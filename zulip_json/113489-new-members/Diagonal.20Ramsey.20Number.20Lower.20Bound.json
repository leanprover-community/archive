[
    {
        "content": "<p>Hello there!</p>\n<p><strong>TLDR:</strong> Is there a tactic that allows me to prove goals of the form \"there exists...\" with the probabilistic method?</p>\n<p>I'd like to prove Erdos' classical lower bound on the diagonal Ramsey numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">{R}(k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> with Lean.  For the following, note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> refers to the complete graph on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> vertices and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E(G)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mclose\">)</span></span></span></span> is the edge set of graph <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span>. The diagonal Ramsey number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">{R}(k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> is the smallest number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> such that for any 2-coloring of the edges of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, there is a monchromatic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraph of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (i.e. a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraph where either all the edges are blue or all the edges are red). Ramsey proved in 1929 that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> is finite for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, but finding the exact number is much more challenging! Here is the theorem I am trying to prove and its proof for reference:</p>\n<p><a href=\"/user_uploads/3121/5uFIf4eKFTjYwIrWSNdT4J7H/proof1.jpeg\" title=\"proof1.jpeg\">proof1.jpeg</a> <br>\n<a href=\"/user_uploads/3121/AKIlqMuaUGKixG034dQfivWg/proof2.jpeg\" title=\"proof2.jpeg\">proof2.jpeg</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5uFIf4eKFTjYwIrWSNdT4J7H/proof1.jpeg\" title=\"proof1.jpeg\"><img src=\"/user_uploads/3121/5uFIf4eKFTjYwIrWSNdT4J7H/proof1.jpeg\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AKIlqMuaUGKixG034dQfivWg/proof2.jpeg\" title=\"proof2.jpeg\"><img src=\"/user_uploads/3121/AKIlqMuaUGKixG034dQfivWg/proof2.jpeg\"></a></div><p>If I were just to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">R(k) &gt; n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> given the necessary inequality on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> in Lean, I expect my goal for the proof would look like something along the lines of \"there exists some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>:</mo><mi>E</mi><mo stretchy=\"false\">(</mo><msub><mi>K</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">{</mo><mi>r</mi><mi>e</mi><mi>d</mi><mo separator=\"true\">,</mo><mi>b</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">c : E(K_n) \\rightarrow \\{red, blue\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">e</span><span class=\"mclose\">}</span></span></span></span> such that for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>⊆</mo><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">H \\subseteq K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>≅</mo><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">H \\cong K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> there exists <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>2</mn></msub><mo>∈</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e_1, e_2 \\in E(H)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\">≠</mo><mi>c</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c(e_1) \\neq c(e_2)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.  </p>\n<p><strong>Now, onto my question:</strong> What tactic would I use to prove a goal of the form \"there exists...\" in Lean with a non-constructive proof? The only way I know how to prove existence goals is with the <code>use</code> tactic, but as you can see the proof pictured above does not construct anything that I could give the <code>use</code> tactic.  Instead the argument is that since there is a positive probability that a random 2 coloring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> has no monochromatic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraphs, then there is <em>some</em> coloring in the space of random colorings of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> which has no monochromatic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> subgraph. What tactic could I use to prove the goal with such an argument?</p>",
        "id": 195273821,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587801811
    },
    {
        "content": "<p>I think you want something like this, to translate an existential statement into the negation of a universal statement</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>There's probably a more idiomatic way of writing this, but <code>push_neg</code> is convenient whenever you want to get rid of negations in a complicated Prop</p>",
        "id": 195274311,
        "sender_full_name": "David Wärn",
        "timestamp": 1587802756
    },
    {
        "content": "<p>There are two different ways to say \"this colouring does not satisfy Ramsey\": there's the one you mentioned of \"for any subset there are two edges with distinct colours\", and there's \"there is no subset that is mono\". Of course the two formulations are equivalent (via <code>push_neg</code> or something), so feel free to choose whichever formulation is more convenient</p>",
        "id": 195274594,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803260
    },
    {
        "content": "<p>The details will depend on how you implement your probability distribution</p>",
        "id": 195274631,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587803284
    },
    {
        "content": "<p>i don't know of really any development of probability theory in Lean</p>",
        "id": 195274662,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587803338
    },
    {
        "content": "<p>Thank you both for your answers. Jalex's comment has me wondering if I'm thinking too far ahead. I might need to rely on a version of the proof that is a counting argument instead. I was unaware that Lean didn't have any probability theory : (</p>",
        "id": 195274725,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587803466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> actually formalized this particular argument here: <a href=\"https://github.com/b-mehta/combinatorics/blob/graphs/src/lower_ramsey.lean\" title=\"https://github.com/b-mehta/combinatorics/blob/graphs/src/lower_ramsey.lean\">https://github.com/b-mehta/combinatorics/blob/graphs/src/lower_ramsey.lean</a><br>\nMy understanding is that for this argument you just need cardinalities of finite sets, or <code>finset.card</code></p>",
        "id": 195274730,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803495
    },
    {
        "content": "<p>Lean does have probability theory though!</p>",
        "id": 195274732,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803510
    },
    {
        "content": "<p>where? mathlib has a little bit of measure theory</p>",
        "id": 195274776,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587803572
    },
    {
        "content": "<p>Thanks for the find David! I'll have to take a good look into this later</p>",
        "id": 195274792,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587803640
    },
    {
        "content": "<p>Yes I wouldn't know if there are actually enough facts about probability that you could formalize this sort of arguments comfortably</p>",
        "id": 195274846,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803731
    },
    {
        "content": "<p>But you can at least talk about probability mass functions. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> made an attempt at formailizing Erdos' probabilistic proof that there are graphs with high chromatic number and high girth in this language<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/hedetniemi/src/graph_theory/random_graph.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/hedetniemi/src/graph_theory/random_graph.lean\">https://github.com/leanprover-community/mathlib/blob/hedetniemi/src/graph_theory/random_graph.lean</a><br>\nI think at the moment it's unclear what the best way of formulating probabilistic arguments is</p>",
        "id": 195274917,
        "sender_full_name": "David Wärn",
        "timestamp": 1587803870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> proved the Markov and Chebyshev inequalities here: <a href=\"https://github.com/jtristan/stump-learnable/blob/81b3854a8ef9ce4329ed1bb6f0e5528ec2ca136f/src/lib/attributed/to_mathlib.lean\" title=\"https://github.com/jtristan/stump-learnable/blob/81b3854a8ef9ce4329ed1bb6f0e5528ec2ca136f/src/lib/attributed/to_mathlib.lean\">https://github.com/jtristan/stump-learnable/blob/81b3854a8ef9ce4329ed1bb6f0e5528ec2ca136f/src/lib/attributed/to_mathlib.lean</a></p>",
        "id": 195275056,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587804067
    },
    {
        "content": "<p>Just to chime in, David's exactly right that my proof just used cardinalities of finite sets - the argument is the exact same as the one you posted though, just phrased in terms of cardinalities rather than probabilities. I'm of the opinion that at the moment, cardinality arguments are the easiest way to prove this sort of thing in lean - there's a lot of api for finsets already there</p>",
        "id": 195280357,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587813252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Thank you for your reply. What exactly do you mean by \"phrased in terms of cardinalities rather than probabilities\"?</p>",
        "id": 195296643,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587839008
    },
    {
        "content": "<p>Instead of using the language of probability, one can \"clear denominators\" and make claims about sizes of sets instead. For example, to prove \"there exists...\" using the probabilistic language one would prove that the probability that a random structure satisfied your property is a positive real. To prove it using the cardinality language one would prove that the cardinality of the structures which had the property was a positive integer.</p>",
        "id": 195296776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587839232
    },
    {
        "content": "<p>I see, thank you</p>",
        "id": 195296850,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587839284
    },
    {
        "content": "<p>Wasn't sure that my other questions were non-trivial enough to deserve their own topic, but I'll just post them here instead. Also sorry I thought I provided an MWE earlier. What else do you need <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ? The casting isssue has gone away but now I have:</p>\n<p>don't know how to synthesize placeholder<br>\ncontext:<br>\nn k : ℕ,<br>\nh : n ≥ k<br>\n⊢ Type ?</p>\n<p>Occurring at <code>mono_sub_colorings</code></p>",
        "id": 195562161,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588079953
    },
    {
        "content": "<p>You had an example of an error talking about <code>real</code> when applying <code>choose</code> to too many arguments, I want to reproduce that</p>",
        "id": 195562339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588080014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294527\">Sam Raleigh</span> <a href=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195562161\" title=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195562161\">said</a>:</p>\n<blockquote>\n<p>Wasn't sure that my other questions were non-trivial enough to deserve their own topic</p>\n</blockquote>\n<p>This is not the right attitude.  And you still aren't posting MWE.</p>",
        "id": 195562376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588080031
    },
    {
        "content": "<p>the more topics the better :-)</p>",
        "id": 195562404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080046
    },
    {
        "content": "<p>(as we just saw)</p>",
        "id": 195562415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080051
    },
    {
        "content": "<p>I think there will always be some fraction of people who think this way, and this is their first post so we don't have a chance to intercept. The \"noob questions\" thread is unkillable</p>",
        "id": 195562605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588080126
    },
    {
        "content": "<p>Sure, we simply need to keep moving people out of it.</p>",
        "id": 195562780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588080207
    },
    {
        "content": "<p>I think we can probably have a rule saying that if the discussion goes beyond problem -&gt; MWE please -&gt; what's an MWE -&gt; MWE given -&gt; solution then it should go into its own topic post facto</p>",
        "id": 195562826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588080218
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">edges_of</span> <span class=\"bp\">`</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">powerset_len</span> <span class=\"mi\">2</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">num_mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">mono_sub_colorings</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195562830,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588080220
    },
    {
        "content": "<p>Here's a minimized example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>Apparently, <code>nat</code> coerces to <code>int</code>, which coerces to <code>cau_seq real int</code> because <code>cau_seq real int</code> is a ring, and <code>cau_seq real int</code> has a coe_fn instance to <code>nat -&gt; real</code>. So with these imports you can apply one <code>nat</code> to another and you get a <code>real</code>. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 195565510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081324
    },
    {
        "content": "<p>This is why I don't like transitive coercions</p>",
        "id": 195565568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081370
    },
    {
        "content": "<p>So what real do you get?</p>",
        "id": 195565827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588081501
    },
    {
        "content": "<p><code>n</code>?</p>",
        "id": 195565832,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588081504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195565510\" title=\"#narrow/stream/113489-new-members/topic/Diagonal.20Ramsey.20Number.20Lower.20Bound/near/195565510\">said</a>:</p>\n<blockquote>\n<p><code>cau_seq real int</code></p>\n</blockquote>\n<p>This can't be what you meant, right?</p>",
        "id": 195566054,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588081602
    },
    {
        "content": "<p>sorry, <code>cau_seq real abs</code></p>",
        "id": 195566150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081647
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">a_ih</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">a_ih</span><span class=\"o\">}]</span>\n</code></pre></div>",
        "id": 195566665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081862
    },
    {
        "content": "<p><a href=\"https://www.destroyallsoftware.com/talks/wat\" title=\"https://www.destroyallsoftware.com/talks/wat\">https://www.destroyallsoftware.com/talks/wat</a></p>",
        "id": 195567546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588082259
    },
    {
        "content": "<p>not exactly the hall of fame we were targeting...</p>",
        "id": 195567659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588082298
    },
    {
        "content": "<p>I wonder how far we could get by elaborating <code>x y</code> when <code>x</code> is not a function to <code>x.to_fun y</code>, combined with the proposal to search \"superclass\" namespaces</p>",
        "id": 195569467,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588083065
    },
    {
        "content": "<p>Or even without that second part.</p>",
        "id": 195569696,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588083164
    },
    {
        "content": "<p>In any case,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">coe_fn_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₂</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₁</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>and perhaps</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">coe_sort_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₂</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₁</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>seem particularly dubious; possibly we can just delete them?</p>",
        "id": 195572415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588084329
    },
    {
        "content": "<p>What happens if you try?</p>",
        "id": 195572473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588084355
    },
    {
        "content": "<p>I would have to wait a few hours for mathlib to finish building, I imagine?</p>",
        "id": 195572518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588084374
    },
    {
        "content": "<p>I'm happy to try this but I cannot offer instant feedback <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195572674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588084435
    },
    {
        "content": "<p>(hopefully I can offer instance feedback)</p>",
        "id": 195572827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588084476
    },
    {
        "content": "<p>Could someone please explain why I'm getting a \"don't know how to synthesize placeholder context\" issue (and what this means) on <code>card</code> in the following code? Also just to be sure, is this an appropriate MWE for the problem at hand?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">mono_sub_colorings</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Thank you!</p>",
        "id": 195587633,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090340
    },
    {
        "content": "<p>the type of <code>\\a</code>cannot be inferred</p>",
        "id": 195587913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090470
    },
    {
        "content": "<p>but this is not an MWE because it does not compile (I only compiled it with my eyes though so I'm not 100% sure)</p>",
        "id": 195588003,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090507
    },
    {
        "content": "<p>Thanks! I copied and pasted this exact code into a separate lean file and it compiles (aside from this issue you just fixed).</p>",
        "id": 195588311,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090636
    },
    {
        "content": "<p>well the MWE would be <code>mono_sub_colorings _ n k</code></p>",
        "id": 195588378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090667
    },
    {
        "content": "<p>and then my comment of the type of <code>\\a</code> not able to be inferred would apply</p>",
        "id": 195588467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090686
    },
    {
        "content": "<p>also this is not python, we write <code>n.choose k</code> here</p>",
        "id": 195588530,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090721
    },
    {
        "content": "<p>Thank you for the clarification. Wouldn't a person seeking to assist with the problem want to know what <code>mono_sub_colorings</code> was?</p>",
        "id": 195588673,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090788
    },
    {
        "content": "<p>Perhaps I don't understand the definition of an MWE</p>",
        "id": 195588745,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090812
    },
    {
        "content": "<p>And what do you mean by your last comment? I did write <code>n.choose(k)</code>, no?</p>",
        "id": 195588784,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090846
    },
    {
        "content": "<p>o wait</p>",
        "id": 195588825,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090866
    },
    {
        "content": "<p>I see what you mean</p>",
        "id": 195588833,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588090870
    },
    {
        "content": "<p>I think Kenny is being somewhat unreasonable. If the issue is that some code is not compiling, then we want to be able to verify that the same code does not compile. It is not supposed to be \"W\" in the sense of working/compiling then!</p>",
        "id": 195588887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588090905
    },
    {
        "content": "<p>well this is just a misunderstanding.</p>",
        "id": 195589018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588090956
    },
    {
        "content": "<p>Ah I think I'm starting to get it. So by \"don't know how to synthesize placeholder\" Lean means that it is unsure what argument to insert in the underscore in <code>mono_sub_colorings _ n k</code>, yes?</p>",
        "id": 195589339,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588091111
    },
    {
        "content": "<p>right</p>",
        "id": 195589537,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588091196
    },
    {
        "content": "<p>Given <code>universe u</code>, what is the difference between <code>variables {α : Type u} </code> and <code>variables α : Type u</code>?</p>",
        "id": 195591662,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588092084
    },
    {
        "content": "<p>if you prove a theorem / make a definition using the latter then you don't need to supply <code>\\a</code> and Lean will try to infer <code>\\a</code></p>",
        "id": 195592193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588092322
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 195592374,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588092385
    },
    {
        "content": "<p>Obligatory <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">TPiL link</a>. See also <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\">6.5</a>.</p>",
        "id": 195592546,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588092475
    },
    {
        "content": "<p>The <em>former</em>!</p>",
        "id": 195592660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588092510
    },
    {
        "content": "<p>I stand corrected.</p>",
        "id": 195593118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588092696
    },
    {
        "content": "<p>Judging by what Kevin said, I'd think that <code>variable {\\a : u}</code> would allow me to have <code>lemma test (n k : ℕ) : card (mono_sub_colorings n k) = n.choose(k) := sorry</code> without any issues. So why am I getting a cannot synthesize placeholder error?</p>",
        "id": 195593920,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588093015
    },
    {
        "content": "<p>Kevin said Lean would try to infer <code>\\a</code>, not that it would succeed.</p>",
        "id": 195593996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093048
    },
    {
        "content": "<p>How would it know what type to pick?</p>",
        "id": 195594053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093075
    },
    {
        "content": "<p>Wouldn't it be able to infer it from the definition of <code>mono_sub_colorings</code>?</p>",
        "id": 195594177,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588093113
    },
    {
        "content": "<p>But what even is the correct answer? There isn't one.</p>",
        "id": 195594474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093224
    },
    {
        "content": "<p>If this isn't clear, imagine adding <code>variable {\\b : Type u}</code>, or even deleting <code>variable {\\a : Type u}</code>.</p>",
        "id": 195594526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093242
    },
    {
        "content": "<p>Who knows, Lean seems to like the type <code>nat -&gt; real</code> so maybe that is a good choice.</p>",
        "id": 195594720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093311
    },
    {
        "content": "<p>If you like, the point is that <code>card</code> could take a <code>finset</code> of anything, so that's precisely the point where we lose the ability to determine the implicit parameter of <code>mono_sub_colorings</code>.</p>",
        "id": 195595310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093538
    },
    {
        "content": "<p>No matter what that parameter is, this equation will type check.</p>",
        "id": 195595339,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093556
    },
    {
        "content": "<p>I see. So how do I fix it? If I try Kenny's suggestion <code>lemma test (n k : ℕ) : card (mono_sub_colorings α n k) = n.choose k  := sorry</code>, then I get a type mismatch because <code>\\a</code>is expected to be of type <code>nat</code>.</p>",
        "id": 195595740,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588093708
    },
    {
        "content": "<p><code>card (@mono_sub_colorings α n k)</code><br>\nor<br>\n<code>card (mono_sub_colorings n k : finset (finset (finset α)))</code></p>",
        "id": 195595992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093819
    },
    {
        "content": "<p><code>@</code> means \"I'm going to give all the parameters including the implicit ones\".</p>",
        "id": 195596065,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588093854
    },
    {
        "content": "<p>I was wondering how to do this, thank you.</p>",
        "id": 195596247,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588093925
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">core_ineq</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n  <span class=\"c1\">--stuff</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">h</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">--other stuff</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>How do I fix the type mismatch at <code>mul_lt_mul_of_pos_left</code>?</p>",
        "id": 195624933,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588106996
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"err\">?</span><span class=\"n\">m_7</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">m_5</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 195625119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107080
    },
    {
        "content": "<p>Your right hand side says ?m_3 must be 2^a but the left hand side is not of the form <code>2^a * X</code></p>",
        "id": 195625298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107148
    },
    {
        "content": "<p>(because of associativity conventions)</p>",
        "id": 195626253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107616
    },
    {
        "content": "<p>Is that the error you got? I mean thank you for pointing that out as I would have had to fix it eventually, but I got this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"n\">h</span> <span class=\"n\">h0</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h0</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 195626375,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588107687
    },
    {
        "content": "<p>Read more?</p>",
        "id": 195626503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107731
    },
    {
        "content": "<p>Had my eyes only looked an inch farther down on the screen, I would not have needed to ask such a silly question. Thanks Kevin : D</p>",
        "id": 195626637,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588107803
    },
    {
        "content": "<p>Learning to read Lean error messages takes a long time</p>",
        "id": 195626678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588107820
    }
]