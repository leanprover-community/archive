[
    {
        "content": "<p>I am trying to reorder a matrix by the zeros of some function. To reorder / reindex the matrix I need provide an equivalence relation between its new index and old index. My line of thought was get a subset with all the indices of the zeros and another with the indices of the nonzeros. <br>\nBut after that I was stuck! I have no idea how to deal with the API for subtypes of fintype/finset/fin. </p>\n<p>So I guess the question is how do I tell lean:<br>\n\"Separate the numbers in fin N to those that have <code>myF</code> zero and those that have <code>myF</code> nonzero. Then use these as indices in the matrix to give me a newly ordered matrix\"?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"bp\">;</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"bp\">;</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"bp\">;</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"o\">]</span>\n<span class=\"c1\">-- variable {myF : fin N → ℕ} -- For later use once I understand this</span>\n<span class=\"kd\">def</span> <span class=\"n\">valsx</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myF</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">list.nth_le</span> <span class=\"n\">valsx</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">fin.is_lt</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.elems</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Froots</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.subtype</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span> <span class=\"bp\">|</span> <span class=\"n\">myF</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"n\">z</span>\n<span class=\"kd\">def</span> <span class=\"n\">nroots</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.subtype</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">myF</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)})</span> <span class=\"n\">z</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Froots</span> <span class=\"c1\">-- Type does not look correct</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Froots</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">nroots</span><span class=\"o\">)</span> <span class=\"c1\">-- Type does not look correct</span>\n\n<span class=\"c1\">-- def e := -- somehow define new index using Froots and nroots</span>\n<span class=\"c1\">--#eval reindex e (equiv.refl (fin N)) A</span>\n<span class=\"c1\">-- should give !![1, 2, 3, 4; 13, 14, 15, 16; 5, 6, 7, 8; 9, 10, 11, 12;]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> An example of a working reindexing but not with the zeros of a function! -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">shiftk</span> <span class=\"o\">{</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}{</span><span class=\"n\">hN</span><span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">):(</span><span class=\"n\">fin</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">shiftk_equiv</span> <span class=\"o\">{</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hN</span><span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">shiftk</span> <span class=\"n\">N</span> <span class=\"n\">hN</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">shiftk</span> <span class=\"n\">N</span> <span class=\"n\">hN</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">shiftk</span><span class=\"o\">,</span> <span class=\"n\">neg_add_cancel_right</span><span class=\"o\">],},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">shiftk</span><span class=\"o\">,</span> <span class=\"n\">add_neg_cancel_right</span><span class=\"o\">],},</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">ne_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"kd\">end</span>\n<span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">shiftk_equiv</span> <span class=\"mi\">4</span> <span class=\"n\">nz</span> <span class=\"mi\">2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">reindex</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">A</span>\n<span class=\"c1\">-- gives !![9, 10, 11, 12; 13, 14, 15, 16; 1, 2, 3, 4; 5, 6, 7, 8]</span>\n</code></pre></div>",
        "id": 362005921,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685382700
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.sum_compl\">docs#equiv.sum_compl</a> lets you split any index type into the values which satisfy <code>p</code>, and the values which do not</p>",
        "id": 362007405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685383181
    }
]