[
    {
        "content": "<p>I'm not fully grasping  what the tactics are doing in this proof. I've written a comment that is how I'm thinking of it on paper but not sure if that's correct.</p>\n<div class=\"codehilite\"><pre><span></span>        <span class=\"kn\">theorem</span> <span class=\"n\">even_plus_even2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n                <span class=\"k\">match</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"k\">with</span>\n                    <span class=\"bp\">⟨</span><span class=\"n\">w1</span><span class=\"o\">,</span> <span class=\"n\">hw1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">w2</span><span class=\"o\">,</span> <span class=\"n\">hw2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">w1</span> <span class=\"bp\">+</span> <span class=\"n\">w2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw1</span><span class=\"o\">,</span> <span class=\"n\">hw2</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n                <span class=\"kn\">end</span>\n        <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">        ∃ w1, a = 2 * w1</span>\n<span class=\"cm\">        w1 : ℕ</span>\n<span class=\"cm\">        hw1 : a = 2 * w1</span>\n<span class=\"cm\">        ∃ w2, b = 2 * w2</span>\n<span class=\"cm\">        w2 : ℕ</span>\n<span class=\"cm\">        hw2 : b = 2 * w2</span>\n<span class=\"cm\">        w1 = a/2, w2 = b/2</span>\n<span class=\"cm\">        w1 + w2 = a/2 + b/2</span>\n<span class=\"cm\">        a + b = 2 * (w1 + w2)</span>\n<span class=\"cm\">        -/</span>\n</pre></div>",
        "id": 195318228,
        "sender_full_name": "Brandon B",
        "timestamp": 1587878399
    },
    {
        "content": "<p>This proof looks okay (but you didn't provide a MWE). What error do you get?</p>",
        "id": 195318664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879334
    },
    {
        "content": "<p>Or is the proof correct and you don't understand how it works?</p>",
        "id": 195318727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879439
    },
    {
        "content": "<p>The proof is correct I'm just trying to understand what's going on under the hood</p>",
        "id": 195318769,
        "sender_full_name": "Brandon B",
        "timestamp": 1587879497
    },
    {
        "content": "<p>Actually there aren't really any tactics in this proof except <code>rw</code>. The <code>match</code> is pattern matching on <code>h1</code> and <code>h2</code>, which are existential statements once you unfold the definition of <code>is_even</code>, to produce <code>w1</code> and <code>hw1 : a = 2 * w1</code> and similarly for <code>w2</code></p>",
        "id": 195318771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879510
    },
    {
        "content": "<p>yeah I understand match I just dont fully understand the <code>,by rw [hw1, hw2, mul_add]</code></p>",
        "id": 195318779,
        "sender_full_name": "Brandon B",
        "timestamp": 1587879542
    },
    {
        "content": "<p>The right hand side is similarly building an existential proof saying <code>w1 + w2</code> suffices, and so the <code>by rw</code> proof needs to prove <code>a + b = 2 * (w1 + w2)</code></p>",
        "id": 195318783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879554
    },
    {
        "content": "<p>Then the rewrites respectively change the goal to <code>2 * w1 + b = 2 * (w1 + w2)</code> and <code>2 * w1 + 2 * w2 = 2 * (w1 + w2)</code>, and the final <code>mul_add</code> rewrites the right hand side to <code>2 * w1 + 2 * w2 = 2 * w1 + 2 * w2</code>. Since this is true by reflexivity it closes the goal</p>",
        "id": 195318828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879626
    },
    {
        "content": "<p>At least, that's what the lean in my head would do, since that's not an MWE I can't test it</p>",
        "id": 195318835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879651
    },
    {
        "content": "<p>Ohhh that makes sense, thanks!</p>",
        "id": 195318882,
        "sender_full_name": "Brandon B",
        "timestamp": 1587879739
    },
    {
        "content": "<p>So rewrite is a substitution rule</p>",
        "id": 195318887,
        "sender_full_name": "Brandon B",
        "timestamp": 1587879761
    },
    {
        "content": "<p>you can also expand <code>by rw [a, b, c]</code> into <code>begin rw a, rw b, rw c, end</code> and step through it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">even_plus_even2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"k\">match</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"k\">with</span>\n            <span class=\"bp\">⟨</span><span class=\"n\">w1</span><span class=\"o\">,</span> <span class=\"n\">hw1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">w2</span><span class=\"o\">,</span> <span class=\"n\">hw2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">w1</span> <span class=\"bp\">+</span> <span class=\"n\">w2</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n              <span class=\"n\">rw</span> <span class=\"n\">hw1</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">hw2</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n              <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n        <span class=\"kn\">end</span>\n <span class=\"bp\">```</span>\n</pre></div>",
        "id": 195318888,
        "sender_full_name": "Frank Dai",
        "timestamp": 1587879764
    },
    {
        "content": "<p>You should be able to step through it even if it is in <code>rw [a,b,c]</code> form</p>",
        "id": 195318891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879790
    },
    {
        "content": "<p>this is one of the special privileges of the <code>rw</code> tactic</p>",
        "id": 195318892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879812
    },
    {
        "content": "<p>How does mul_add know to apply to the right hand side of the equation?</p>",
        "id": 195318992,
        "sender_full_name": "Brandon B",
        "timestamp": 1587879999
    },
    {
        "content": "<p>rw is rewriting terms on the LHS but mul_add works on the RHS.</p>",
        "id": 195319004,
        "sender_full_name": "Brandon B",
        "timestamp": 1587880024
    },
    {
        "content": "<p><code>⊢ 2 * w1 + 2 * w2 = 2 * (w1 + w2)</code></p>",
        "id": 195319013,
        "sender_full_name": "Brandon B",
        "timestamp": 1587880045
    },
    {
        "content": "<p><code>rw</code> will try to find the LHS of the input theorem anywhere in the goal, including on the RHS of the equality if the goal happens to be an equality</p>",
        "id": 195319108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587880225
    },
    {
        "content": "<p>If you used mul_add the other way around, that is <code>rw &lt;- mul_add</code>, then it would try to find <code>a * b + a * c</code> somewhere in the goal instead. In this case it would still succeed, rewriting the LHS and resulting in <code>2 * (w1 + w2) = 2 * (w1 + w2)</code> which is also reflexivity</p>",
        "id": 195319119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587880297
    },
    {
        "content": "<p>When we use tactics, what exactly is happening? Is it replacing the tactic command with lambda expressions under-the-hood? Doesn't everything ultimately need to be reduced to lambda expressions for type checking?</p>",
        "id": 195319239,
        "sender_full_name": "Brandon B",
        "timestamp": 1587880555
    },
    {
        "content": "<p>Did you look at the sources we linked <a href=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/193395147\" title=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/193395147\">here</a> when you asked this previously?</p>",
        "id": 195319562,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587881203
    },
    {
        "content": "<p>Yes, but I have zero background in functional programming. I know Python and R and Java and C.  So a \"proof state\" doesn't make sense to me in the first place. I am sort of learning how to prove basic things but I'm frustrated I don't know what's going on at the computer science level.</p>",
        "id": 195319687,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881409
    },
    {
        "content": "<p>Behind the scenes Lean is building a term which has holes, metavariables, in it</p>",
        "id": 195319702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881452
    },
    {
        "content": "<p>as you use more tactics these holes get filled with more terms with holes until eventually the holes go away</p>",
        "id": 195319706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881475
    },
    {
        "content": "<p>each hole is marked with the type that is expected at that position, and that's the goal state that you see</p>",
        "id": 195319710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881505
    },
    {
        "content": "<p>It's very much like writing term mode proofs using <code>_</code></p>",
        "id": 195319748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881524
    },
    {
        "content": "<p>So in principle  there is a way to mechanistically translate a proof written using tactics into a term mode proof?</p>",
        "id": 195319758,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881574
    },
    {
        "content": "<p>And get one ugly lambda expression at the other end</p>",
        "id": 195319762,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881607
    },
    {
        "content": "<p><code>#print</code></p>",
        "id": 195319763,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587881613
    },
    {
        "content": "<p>See also the thread <a href=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189273625\" title=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189273625\">here</a></p>",
        "id": 195319805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881650
    },
    {
        "content": "<p>treat tactics as little C++ programs that help you write term mode proofs</p>",
        "id": 195319806,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587881652
    },
    {
        "content": "<p>Ohh, ok #print is exactly what I wanted to know</p>",
        "id": 195319815,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881717
    },
    {
        "content": "<p>the lean kernel only knows term proofs, so tactics have to run to produce a term proof before the theorem can be accepted</p>",
        "id": 195319819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881751
    },
    {
        "content": "<p>these proofs are stored and <code>#print</code> recalls them</p>",
        "id": 195319859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881767
    },
    {
        "content": "<p><code>#print</code> is mentioned early on in the <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\">Tactics chapter of TPiL</a>.</p>",
        "id": 195319863,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587881831
    },
    {
        "content": "<p>I see - starting to make a lot more sense. I just couldnt understand why there seemed to be two completely different languages in the same language</p>",
        "id": 195319864,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881840
    },
    {
        "content": "<p>They call it metaprogramming because you are writing a program (tactic) to build a program (term)</p>",
        "id": 195319884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881874
    },
    {
        "content": "<p>Ahh, your answer there about filling holes is very lucid, thanks</p>",
        "id": 195320062,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587882173
    },
    {
        "content": "<p>Thanks for bearing with me - I'm actually a medical doctor just trying to learn more math so I have very little background in all of this</p>",
        "id": 195320116,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587882281
    },
    {
        "content": "<p>Feel free to keep asking questions! There aren't very many introductory sources so most of us have been learning here.</p>",
        "id": 195320243,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587882567
    }
]