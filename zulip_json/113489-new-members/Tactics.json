[
    {
        "content": "<p>is there a factor tactic? (sort of like the reverse of <code> mul_add</code>)</p>",
        "id": 191356365,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811222
    },
    {
        "content": "<p>No there is not! There is a factor-<em>checking</em> tactic, but not a factor-doing one.</p>",
        "id": 191356386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811262
    },
    {
        "content": "<p>Remember though that you can rewrite <code>mul_add</code> in both directions :-)</p>",
        "id": 191356394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811279
    },
    {
        "content": "<p>so if I have something like <code>n*a +n*b = 1</code></p>",
        "id": 191356407,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811312
    },
    {
        "content": "<p>and I do <code>mul_add</code></p>",
        "id": 191356409,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811320
    },
    {
        "content": "<p>I should get <code>n*(a+b)=1</code>?</p>",
        "id": 191356450,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811332
    },
    {
        "content": "<p>what do you mean by \"do\"?</p>",
        "id": 191356455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811338
    },
    {
        "content": "<p>Let's get precise :-)</p>",
        "id": 191356463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811352
    },
    {
        "content": "<p>if I <code>`rw mul_add</code> that statement</p>",
        "id": 191356499,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811423
    },
    {
        "content": "<p>then it will say \"I can't find anything of the form <code>x*(y+z)</code> in your statement so I can't rewrite\"</p>",
        "id": 191356551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811452
    },
    {
        "content": "<p>But if you <code>rw ←mul_add</code> then it will work fine</p>",
        "id": 191356565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811471
    },
    {
        "content": "<p>oh thanks! didn't know how to go backwards at first</p>",
        "id": 191356608,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811509
    },
    {
        "content": "<p>if <code>h</code> is a proof of <code>A = B</code> then <code>rw h</code> will turn all <code>A</code>'s in your goal to <code>B</code>'s, and <code>rw ←h</code> will turn all <code>B</code>'s into <code>A</code>'s.</p>",
        "id": 191356610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811511
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">ring</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Lean didn't do the factoring, but it checked it once I told it.</p>",
        "id": 191356638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811558
    },
    {
        "content": "<p>Another quick tactic question</p>",
        "id": 191370516,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584833411
    },
    {
        "content": "<p>what tactic should I use if I want to turn a=b into b=a?</p>",
        "id": 191370519,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584833427
    },
    {
        "content": "<p>I tried <code>rw eq.symm</code> but I got some sort of \"lemma lhs is a metavariable\" error</p>",
        "id": 191370581,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584833570
    },
    {
        "content": "<p>The <code>rw</code> tactic only works with equalities or iff statements. <code>eq.symm</code> is an implication <code>a = b → b = a</code>. So you should <code>apply</code> it instead. This is a really important distinction and the sooner you learn it the easier your path to enlightenment will be.</p>",
        "id": 191370601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584833622
    },
    {
        "content": "<p>Note that if you want to rewrite something, <code>eq_comm</code> is the proof that <code>a = b ↔ b = a</code></p>",
        "id": 191370651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584833672
    },
    {
        "content": "<p>I see undergraduate mathematicians in my department asking this question again and again. For mathematicians, equality and implication seem to basically be the same idea, or are stored in the same place or something. I guess the point is that if a mathematician knows that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\iff Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> is true, then obviously <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\implies Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> is true, and the concepts can get a bit blurred, especially because in some sense the vast majority of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> statements mathematicians use in school mathematics are special cases of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\iff</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> statements.</p>",
        "id": 191370718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584833861
    },
    {
        "content": "<p>My daughter is currently learning about making new variables the subject of the equation, e.g. she is told <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">y=3x+5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> and has to figure out how to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> as a function of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>. The route to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo>−</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x=(y-5)/3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">3</span></span></span></span> is expressed as a series of implications, but in practice it is a series of iff statements. I am not sure if the distinction is flagged at school.</p>",
        "id": 191370847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584834090
    },
    {
        "content": "<p>You can also use <code>symmetry</code>, which tries to <code>apply</code> a relevant lemma marked with the <code>[symm]</code> attribute.</p>",
        "id": 191371480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584835258
    },
    {
        "content": "<p>and <code>#print eq.symm</code> shows that indeed this lemma has that tag.</p>",
        "id": 191371494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584835318
    },
    {
        "content": "<p>I'm not fully grasping  what the tactics are doing in this proof. I've written a comment that is how I'm thinking of it on paper but not sure if that's correct.</p>\n<div class=\"codehilite\"><pre><span></span>        <span class=\"kn\">theorem</span> <span class=\"n\">even_plus_even2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n                <span class=\"k\">match</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"k\">with</span>\n                    <span class=\"bp\">⟨</span><span class=\"n\">w1</span><span class=\"o\">,</span> <span class=\"n\">hw1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">w2</span><span class=\"o\">,</span> <span class=\"n\">hw2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">w1</span> <span class=\"bp\">+</span> <span class=\"n\">w2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw1</span><span class=\"o\">,</span> <span class=\"n\">hw2</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n                <span class=\"kn\">end</span>\n        <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">        ∃ w1, a = 2 * w1</span>\n<span class=\"cm\">        w1 : ℕ</span>\n<span class=\"cm\">        hw1 : a = 2 * w1</span>\n<span class=\"cm\">        ∃ w2, b = 2 * w2</span>\n<span class=\"cm\">        w2 : ℕ</span>\n<span class=\"cm\">        hw2 : b = 2 * w2</span>\n<span class=\"cm\">        w1 = a/2, w2 = b/2</span>\n<span class=\"cm\">        w1 + w2 = a/2 + b/2</span>\n<span class=\"cm\">        a + b = 2 * (w1 + w2)</span>\n<span class=\"cm\">        -/</span>\n</pre></div>",
        "id": 195318228,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587878399
    },
    {
        "content": "<p>This proof looks okay (but you didn't provide a MWE). What error do you get?</p>",
        "id": 195318664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879334
    },
    {
        "content": "<p>Or is the proof correct and you don't understand how it works?</p>",
        "id": 195318727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879439
    },
    {
        "content": "<p>The proof is correct I'm just trying to understand what's going on under the hood</p>",
        "id": 195318769,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587879497
    },
    {
        "content": "<p>Actually there aren't really any tactics in this proof except <code>rw</code>. The <code>match</code> is pattern matching on <code>h1</code> and <code>h2</code>, which are existential statements once you unfold the definition of <code>is_even</code>, to produce <code>w1</code> and <code>hw1 : a = 2 * w1</code> and similarly for <code>w2</code></p>",
        "id": 195318771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879510
    },
    {
        "content": "<p>yeah I understand match I just dont fully understand the <code>,by rw [hw1, hw2, mul_add]</code></p>",
        "id": 195318779,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587879542
    },
    {
        "content": "<p>The right hand side is similarly building an existential proof saying <code>w1 + w2</code> suffices, and so the <code>by rw</code> proof needs to prove <code>a + b = 2 * (w1 + w2)</code></p>",
        "id": 195318783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879554
    },
    {
        "content": "<p>Then the rewrites respectively change the goal to <code>2 * w1 + b = 2 * (w1 + w2)</code> and <code>2 * w1 + 2 * w2 = 2 * (w1 + w2)</code>, and the final <code>mul_add</code> rewrites the right hand side to <code>2 * w1 + 2 * w2 = 2 * w1 + 2 * w2</code>. Since this is true by reflexivity it closes the goal</p>",
        "id": 195318828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879626
    },
    {
        "content": "<p>At least, that's what the lean in my head would do, since that's not an MWE I can't test it</p>",
        "id": 195318835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879651
    },
    {
        "content": "<p>Ohhh that makes sense, thanks!</p>",
        "id": 195318882,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587879739
    },
    {
        "content": "<p>So rewrite is a substitution rule</p>",
        "id": 195318887,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587879761
    },
    {
        "content": "<p>you can also expand <code>by rw [a, b, c]</code> into <code>begin rw a, rw b, rw c, end</code> and step through it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">even_plus_even2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"k\">match</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"k\">with</span>\n            <span class=\"bp\">⟨</span><span class=\"n\">w1</span><span class=\"o\">,</span> <span class=\"n\">hw1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">w2</span><span class=\"o\">,</span> <span class=\"n\">hw2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">w1</span> <span class=\"bp\">+</span> <span class=\"n\">w2</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n              <span class=\"n\">rw</span> <span class=\"n\">hw1</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">hw2</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n              <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n        <span class=\"kn\">end</span>\n <span class=\"bp\">```</span>\n</pre></div>",
        "id": 195318888,
        "sender_full_name": "Frank Dai",
        "timestamp": 1587879764
    },
    {
        "content": "<p>You should be able to step through it even if it is in <code>rw [a,b,c]</code> form</p>",
        "id": 195318891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879790
    },
    {
        "content": "<p>this is one of the special privileges of the <code>rw</code> tactic</p>",
        "id": 195318892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587879812
    },
    {
        "content": "<p>How does mul_add know to apply to the right hand side of the equation?</p>",
        "id": 195318992,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587879999
    },
    {
        "content": "<p>rw is rewriting terms on the LHS but mul_add works on the RHS.</p>",
        "id": 195319004,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587880024
    },
    {
        "content": "<p><code>⊢ 2 * w1 + 2 * w2 = 2 * (w1 + w2)</code></p>",
        "id": 195319013,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587880045
    },
    {
        "content": "<p><code>rw</code> will try to find the LHS of the input theorem anywhere in the goal, including on the RHS of the equality if the goal happens to be an equality</p>",
        "id": 195319108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587880225
    },
    {
        "content": "<p>If you used mul_add the other way around, that is <code>rw &lt;- mul_add</code>, then it would try to find <code>a * b + a * c</code> somewhere in the goal instead. In this case it would still succeed, rewriting the LHS and resulting in <code>2 * (w1 + w2) = 2 * (w1 + w2)</code> which is also reflexivity</p>",
        "id": 195319119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587880297
    },
    {
        "content": "<p>When we use tactics, what exactly is happening? Is it replacing the tactic command with lambda expressions under-the-hood? Doesn't everything ultimately need to be reduced to lambda expressions for type checking?</p>",
        "id": 195319239,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587880555
    },
    {
        "content": "<p>Did you look at the sources we linked <a href=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/193395147\" title=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/193395147\">here</a> when you asked this previously?</p>",
        "id": 195319562,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587881203
    },
    {
        "content": "<p>Yes, but I have zero background in functional programming. I know Python and R and Java and C.  So a \"proof state\" doesn't make sense to me in the first place. I am sort of learning how to prove basic things but I'm frustrated I don't know what's going on at the computer science level.</p>",
        "id": 195319687,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881409
    },
    {
        "content": "<p>Behind the scenes Lean is building a term which has holes, metavariables, in it</p>",
        "id": 195319702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881452
    },
    {
        "content": "<p>as you use more tactics these holes get filled with more terms with holes until eventually the holes go away</p>",
        "id": 195319706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881475
    },
    {
        "content": "<p>each hole is marked with the type that is expected at that position, and that's the goal state that you see</p>",
        "id": 195319710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881505
    },
    {
        "content": "<p>It's very much like writing term mode proofs using <code>_</code></p>",
        "id": 195319748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881524
    },
    {
        "content": "<p>So in principle  there is a way to mechanistically translate a proof written using tactics into a term mode proof?</p>",
        "id": 195319758,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881574
    },
    {
        "content": "<p>And get one ugly lambda expression at the other end</p>",
        "id": 195319762,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881607
    },
    {
        "content": "<p><code>#print</code></p>",
        "id": 195319763,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587881613
    },
    {
        "content": "<p>See also the thread <a href=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189273625\" title=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189273625\">here</a></p>",
        "id": 195319805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881650
    },
    {
        "content": "<p>treat tactics as little C++ programs that help you write term mode proofs</p>",
        "id": 195319806,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587881652
    },
    {
        "content": "<p>Ohh, ok #print is exactly what I wanted to know</p>",
        "id": 195319815,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881717
    },
    {
        "content": "<p>the lean kernel only knows term proofs, so tactics have to run to produce a term proof before the theorem can be accepted</p>",
        "id": 195319819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881751
    },
    {
        "content": "<p>these proofs are stored and <code>#print</code> recalls them</p>",
        "id": 195319859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881767
    },
    {
        "content": "<p><code>#print</code> is mentioned early on in the <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\">Tactics chapter of TPiL</a>.</p>",
        "id": 195319863,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587881831
    },
    {
        "content": "<p>I see - starting to make a lot more sense. I just couldnt understand why there seemed to be two completely different languages in the same language</p>",
        "id": 195319864,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587881840
    },
    {
        "content": "<p>They call it metaprogramming because you are writing a program (tactic) to build a program (term)</p>",
        "id": 195319884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587881874
    },
    {
        "content": "<p>Ahh, your answer there about filling holes is very lucid, thanks</p>",
        "id": 195320062,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587882173
    },
    {
        "content": "<p>Thanks for bearing with me - I'm actually a medical doctor just trying to learn more math so I have very little background in all of this</p>",
        "id": 195320116,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587882281
    },
    {
        "content": "<p>Feel free to keep asking questions! There aren't very many introductory sources so most of us have been learning here.</p>",
        "id": 195320243,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587882567
    },
    {
        "content": "<p>How to apply the <code>apply</code> tactic to a hypothesis <code>h</code> in the context? (It seems that <code>apply ... at h</code> does not work)</p>\n<p>OK.. I see. Apply <code>apply</code> to h is not logically correct in a proof.</p>",
        "id": 243295721,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624182599
    },
    {
        "content": "<p>I remember in 2017 having exactly the same question and answering it in the same way :-)</p>",
        "id": 243295979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624183064
    },
    {
        "content": "<p>I don't quite understand the tactic <code>obviously</code>. I saw this tactic in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In particular, I don't understand how <code>obviously</code> helps here.<br>\nCould anyone please give me a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> illustrating the function of <code>obviously</code>?</p>",
        "id": 245727217,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626114657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">complete_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">ne</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 245728387,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626115080
    },
    {
        "content": "<p>What <code>obviously</code> does is make it equivalent to writing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">complete_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"n\">sym</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(At least, I think <code>obviously</code> does <code>by tidy</code>.  I'm not remembering. <em>Edit: it basically does <code>tidy</code>, but there's an extra thing where it checks for <code>sorry</code> in the type.</em>)</p>",
        "id": 245728706,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626115169
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">C</span> <span class=\"n\">P</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">V₀</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"n\">qq</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)))(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">Vads</span> <span class=\"bp\">/</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">qq</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> simp only [h1] at hA {single_pass := tt}, -/</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> rw pow_zero at hA, -/</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> rw one_mul at hA, -/</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_add</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">left_distrib</span> <span class=\"n\">at</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hA</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hVads</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Hi, I want to cancel <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi><mn>0</mn></mrow><annotation encoding=\"application/x-tex\"> \\theta 0 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord\">0</span></span></span></span> at hq. In other words, how can I take it out from numerator and denominator and then cancel it.</p>",
        "id": 275152548,
        "sender_full_name": "Parivash",
        "timestamp": 1647176807
    },
    {
        "content": "<p>Pasting that into an empty file yields a bunch of errors - can you create a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 275152724,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647177066
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 275155928,
        "sender_full_name": "Parivash",
        "timestamp": 1647180070
    },
    {
        "content": "<p>Your code still doesn't compile for me, but anyway even after you fix this I think the answer will be that you can't cancel <code>θ 0</code> because you don't seem to have assumed anywhere that it is nonzero.</p>",
        "id": 275539861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647448718
    },
    {
        "content": "<p>Note that Lean does not check that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">b\\not=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> when you write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi mathvariant=\"normal\">/</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a/b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">b</span></span></span></span>, it allows you to write nonsense, and just returns a junk value; you then can't use theorems about division because it is in the theorems where the hypothesis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">b\\not=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is required.</p>",
        "id": 275540187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647448826
    }
]