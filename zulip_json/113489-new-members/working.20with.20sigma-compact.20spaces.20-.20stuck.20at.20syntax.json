[
    {
        "content": "<p>Hi! Given a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-compact topological space, I'm trying to extract the covering by compacts from it --- but am stuck. (I found the items in the documentation, but everything I tried was invalid syntax...) Pretty sure I'm just missing a trick. Advice would be welcome.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Hausdorff</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Lipschitz</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">dummy</span> <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SigmaCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Choose a cover of X by compact sets K_i.</span>\n  <span class=\"c1\">-- Question: fill in the sorries: how to use these theorems?</span>\n  <span class=\"k\">let</span> <span class=\"n\">cov</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- mumble mumble SigmaCompactSpace.compact_covering X</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcov</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">cov</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- mumble mumble iUnion_compactCovering</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcompact</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"o\">(</span><span class=\"n\">cov</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- mumble mumble isCompact_compactCovering</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 390067019,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694296105
    },
    {
        "content": "<p>Meta: it seems LaTeX in the topic name doesn't work? Ok, point taken.</p>",
        "id": 390067044,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694296159
    },
    {
        "content": "<p>Yes you can't do LaTeX in the title</p>",
        "id": 390067057,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694296178
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Hausdorff</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Lipschitz</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dummy</span> <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SigmaCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Choose a cover of X by compact sets K_i.</span>\n  <span class=\"c1\">-- Question: fill in the sorries: how to use these theorems?</span>\n  <span class=\"k\">let</span> <span class=\"n\">cov</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">compactCovering</span> <span class=\"n\">X</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcov</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">cov</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"o\">:=</span> <span class=\"n\">iUnion_compactCovering</span> <span class=\"n\">X</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcompact</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">IsCompact</span> <span class=\"o\">(</span><span class=\"n\">cov</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">isCompact_compactCovering</span> <span class=\"n\">X</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 390067182,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694296322
    },
    {
        "content": "<p>For the first one, note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=compactCovering#doc\">docs#compactCovering</a> is (perhaps surprisingly) <em>not</em> called <code>SigmaCompactSpace.compactCovering</code></p>",
        "id": 390067254,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694296412
    },
    {
        "content": "<p>For the second and third ones, you have to specify the right amount of explicit arguments (or you could also do <code>by apply iUnion_compactCovering</code>, which inserts arguments if needed)</p>",
        "id": 390067338,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694296492
    },
    {
        "content": "<p>There is also the <code>..</code> syntax that includes the right number of trailing <code>_</code>.</p>",
        "id": 390067377,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694296554
    },
    {
        "content": "<p>Oh that's a nice trick, I did not know about that</p>",
        "id": 390067425,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694296570
    },
    {
        "content": "<p>Michael, do you know the distinction between tactic mode and term mode? I'm asking since you mentioned syntax errors, and by the look of your code I was wondering wether you were trying to mix the two</p>",
        "id": 390067458,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694296632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/working.20with.20sigma-compact.20spaces.20-.20stuck.20at.20syntax/near/390067458\">said</a>:</p>\n<blockquote>\n<p>Michael, do you know the distinction between tactic mode and term mode? I'm asking since you mentioned syntax errors, and by the look of your code I was wondering wether you were trying to mix the two</p>\n</blockquote>\n<p>I do! I know sorry can act both as a proof term and as a tactic. :-)</p>",
        "id": 390069365,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694298752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/working.20with.20sigma-compact.20spaces.20-.20stuck.20at.20syntax/near/390067254\">said</a>:</p>\n<blockquote>\n<p>For the first one, note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=compactCovering#doc\">docs#compactCovering</a> is (perhaps surprisingly) <em>not</em> called <code>SigmaCompactSpace.compactCovering</code></p>\n</blockquote>\n<p>Thanks, that helps. I guess I was confused by the description in the docstring: \"The sequence can be extracted using topological_space.compact_covering.\" I interpreted, guessing, this as some expression <code>X.compact_covering</code> - I presume that was a typo instead and should read <code>TopologicalSpace.compactCovering</code> instead?</p>",
        "id": 390069468,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694298895
    },
    {
        "content": "<p>That sounds like an accidental leftover from lean 3; can you link to the place where you read that?</p>",
        "id": 390069609,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694299038
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/54527c58d123171c36990652e0b9dfabae612d30/Mathlib/Topology/SubsetProperties.lean#L1305\">This</a> also looks wrong -- <code>topological_space</code> is Lean 3 speak.</p>",
        "id": 390069803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694299242
    },
    {
        "content": "<p>Docstrings mentioning declaration are tricky. They were easy to miss while porting.</p>",
        "id": 390069847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694299302
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7065\">#7065</a></p>",
        "id": 390070249,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694299700
    },
    {
        "content": "<blockquote>\n<p>\"The sequence can be extracted using topological_space.compact_covering.\" I interpreted, guessing, this as some expression <code>X.compact_covering</code> - I presume that was a typo instead and should read <code>TopologicalSpace.compactCovering</code> instead?</p>\n</blockquote>\n<p>Not quite: the right name is just <code>compactCovering</code> with no namespace (and it wasn't in a namespace in Lean3 either, so the docstring was already wrong). Besides, not all lemmas in a namespace can be used with dot notation, sometimes it's just a matter of organizing lemmas. So you wouldn't have been able to do <code>X.compactCovering</code> anyways. Note that dot notation is a very handy feature but it's never necessary, so if you are fighting syntax errors you should try referring to lemmas by their full name and not use dot notation.</p>",
        "id": 390070443,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694299921
    },
    {
        "content": "<p>Thanks for the advice, I'll keep that in mind.</p>",
        "id": 390070729,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694300271
    }
]