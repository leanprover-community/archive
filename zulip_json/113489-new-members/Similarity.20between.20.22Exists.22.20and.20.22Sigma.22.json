[
    {
        "content": "<p>In TPIL, chapter 7 (Inductive Types), there is a statement that says \"<code>∃ x : α, p</code> is a Prop-valued variant of <code>Σ x : α, p</code>\". A similar comparison is made between <code>Prod</code> and <code>And</code>, and <code>Sum</code> and <code>Or</code>, which I can understand, but I don't understand how \"Exists\" and \"Sigma\" are related in the same manner. Can anyone explain this connection to me?</p>",
        "id": 406726631,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1702030202
    },
    {
        "content": "<p>Can you describe in words what <code>s : Σ x : α, p</code> <em>is</em>? Now, can you do the same with <code>h : ∃ x : α, p</code>?</p>",
        "id": 406726934,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702030295
    },
    {
        "content": "<p>Be prepared that the next question usually is \"why aren't they <em>exactly the same thing?!</em>\"</p>",
        "id": 406727283,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702030411
    },
    {
        "content": "<p>To be quite fair, I'm confused by the spelling. Let's assume it's <code>s : Σ x : α, p x</code> and <code>h : ∃ x : α, p x</code> instead.</p>",
        "id": 406727293,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702030415
    },
    {
        "content": "<p><code>s : Σ x : α, p x</code> means that s is an element of the form (a,b) where the type of b depends on a as <code>p a</code> (not very sure, correct me if wrong)<br>\n<code>h : ∃ x : α, p x</code> means that h is a proof of there existing an element x that satisfies the property <code>p x</code><br>\nAh, now I see something: the type of a part of the proof h (the proof for p x) depends on x, similar to how the type of b depends on a. Is that enough to declare them as pretty much the same, apart from their output types?</p>",
        "id": 406731148,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1702031760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Similarity.20between.20.22Exists.22.20and.20.22Sigma.22/near/406727283\">said</a>:</p>\n<blockquote>\n<p>Be prepared that the next question usually is \"why aren't they <em>exactly the same thing?!</em>\"</p>\n</blockquote>\n<p>Now I'm curious</p>",
        "id": 406735073,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702033154
    },
    {
        "content": "<p>It's just that it's an interesting subtlety why <code>∃</code> is not defined via <code>Σ</code>. Looking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum#doc\">docs#Sum</a>, one sees that <code>(β : Type v)</code> cannot be a <code>Prop</code>, but the reason of this choice is proof irrelevance.</p>",
        "id": 406736232,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702033514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Was that supposed to be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sigma#doc\">docs#Sigma</a> ?</p>\n<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PSigma#doc\">docs#PSigma</a> that allows both arguments to be props. The reason there's both Sigma and PSigma is that PSigma has a complicated universe level expression.</p>",
        "id": 406800515,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702054453
    },
    {
        "content": "<p>Ops sure, I meant that</p>",
        "id": 406800575,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702054481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Similarity.20between.20.22Exists.22.20and.20.22Sigma.22/near/406736232\">said</a>:</p>\n<blockquote>\n<p>It's just that it's an interesting subtlety why <code>∃</code> is not defined via <code>Σ</code>. Looking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum#doc\">docs#Sum</a>, one sees that <code>(β : Type v)</code> cannot be a <code>Prop</code>, but the reason of this choice is proof irrelevance.</p>\n</blockquote>\n<p>What is proof irrelevance? Is that a formal term?</p>",
        "id": 406819169,
        "sender_full_name": "N Gelwan",
        "timestamp": 1702061293
    },
    {
        "content": "<p>Oh, found a reference to this term in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists#doc\">docs#Exists</a>:</p>\n<blockquote>\n<p>Because Lean has proof irrelevance, any two proofs of an existential are definitionally equal.</p>\n</blockquote>",
        "id": 406819825,
        "sender_full_name": "N Gelwan",
        "timestamp": 1702061606
    },
    {
        "content": "<p>Ah, here's an answer from Andrej Bauer and Jacques Carette: <a href=\"https://cstheory.stackexchange.com/questions/48112/proof-relevance-vs-proof-irrelevance\">https://cstheory.stackexchange.com/questions/48112/proof-relevance-vs-proof-irrelevance</a></p>",
        "id": 406820127,
        "sender_full_name": "N Gelwan",
        "timestamp": 1702061744
    }
]