[
    {
        "content": "<p>Hey there,</p>\n<p>I know I have been asking many questions, but I would like to ask the following: I am attempting to implement (and verify) <a href=\"https://www.semanticscholar.org/paper/BaxMC%3A-a-CEGAR-approach-to-Max%23SAT-Vigouroux-Ene/e302a9714978e442b4215b8e659ba5796fbf4031?utm_source=direct_link\">a paper of mine</a>, which talks about a problem over SAT formulas.</p>\n<p>In order to do that, I have lately been working on the underlying classical boolean logic theory, and proving results about it (some small results).</p>\n<p>Are there any already implemented stuff regarding boolean formulas (and results about valuations, formulae equivalence, ...) ?</p>\n<p>If yes, how could I use it, and if not, would someone be interested about that ?</p>",
        "id": 396849954,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697445015
    },
    {
        "content": "<p>If I can continue this thred, here is a minimal Formula type, together with the definition of being a model (for an assignement):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Variable</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Variable</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"n\">S</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Formula</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">var</span> <span class=\"n\">x</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">30</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" || \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">disj</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" &amp;&amp; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">conj</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"⊥\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:(</span><span class=\"n\">max</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"~\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"bp\">~⊥</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"⊤\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">top</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Assignement</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Variable</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Assignement.models</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Sf</span> <span class=\"bp\">⊆</span> <span class=\"n\">Sv</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Assignement</span> <span class=\"n\">Sv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">Sf</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">F</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Finset.mem_of_subset</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">P.2</span>\n  <span class=\"o\">}⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">disj</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Formula.top_models</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Assignement</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.empty_subset</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Formula.bot_models</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Assignement</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.empty_subset</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>My goal here is to prove that <code>Decidable (v.models F)</code>, and I kind of not know how to do that...</p>",
        "id": 396869898,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697451590
    },
    {
        "content": "<p>I have a working instance for one base case, but I can't figure out the rest of the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">modelDecidable</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Sf</span> <span class=\"bp\">⊆</span> <span class=\"n\">Sv</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Assignement</span> <span class=\"n\">Sv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"n\">Sf</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">F</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">Formula.bot_models</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  failed to synthesize instance</span>\n<span class=\"cm\">    Decidable (Assignement.models v A)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Not.decidable</span>\n</code></pre></div>\n<p>My guess is that I am missing some kind of induction hypothesis somehow.</p>",
        "id": 396870246,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697451682
    },
    {
        "content": "<p>So I made some progress and finally got the decidability proof done, but it now complains about it being noncomputable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">fail to show termination for</span>\n<span class=\"cm\">  @modelDecidable</span>\n<span class=\"cm\">with errors</span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Classical.dec', and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">modelDecidable</span> <span class=\"o\">{</span><span class=\"n\">Sf</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Variable</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Sf</span> <span class=\"bp\">⊆</span> <span class=\"n\">Sv</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Assignement</span> <span class=\"n\">Sv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">Formula.bot_models</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.dec</span> <span class=\"o\">(</span><span class=\"n\">Assignement.models</span> <span class=\"n\">v</span> <span class=\"bp\">#</span><span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Not.decidable</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">disj</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.decidable</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dq</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And.decidable</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dq</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 396878179,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697454214
    },
    {
        "content": "<p>Looking from here, I'd say that it is always computable that <code>v P</code> because <code>v</code> is of type <code>Assignement</code> as defined in the file.</p>",
        "id": 396878525,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697454348
    },
    {
        "content": "<p>So this took me some time, but I finally got it right (I had to change my definition of assignement to use Bool)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">modelDecidable</span> <span class=\"o\">{</span><span class=\"n\">Sf</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Variable</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Sf</span> <span class=\"bp\">⊆</span> <span class=\"n\">Sv</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Assignement</span> <span class=\"n\">Sv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"n\">v.models</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">Formula.bot_models</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool.decEq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_of_subset</span> <span class=\"n\">h</span> <span class=\"n\">P.2</span><span class=\"o\">⟩)</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Not.decidable</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">disj</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.decidable</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dq</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And.decidable</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dq</span> <span class=\"o\">:=</span> <span class=\"n\">modelDecidable</span> <span class=\"n\">v</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 396884391,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1697456637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> has marked this topic as resolved.</p>",
        "id": 396884398,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697456641
    }
]