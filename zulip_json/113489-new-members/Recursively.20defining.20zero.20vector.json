[
    {
        "content": "<p>I have a standard definition of vector of length <code>n</code>, and want to define the zero vector for each <code>n</code>.  Presumably this should be done recursively, but I can't figure out the syntax.  How can I define it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"c1\">-- A vector of length n</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span>                              <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vector</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">nil</span> <span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Error on the recursive 0 here:</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">vector</span>\n</code></pre></div>",
        "id": 357699588,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1683839594
    },
    {
        "content": "<p>You should make just one definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">vector.zero</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector.zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>by recursion</p>",
        "id": 357700675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683840051
    },
    {
        "content": "<p>Thanks!  I usually try to avoid an extra <code>def</code> like that, since it's not automatically expanded during proofs.  But I guess a quick <code>dsimp [vector.zero]</code> is all that's needed?</p>",
        "id": 357705470,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1683842379
    }
]