[
    {
        "content": "<p>Is there no promotion from <code>Prop</code> to <code>Bool</code>? I don't know how to deal with this error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">EdgeInd</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edgeSet</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"c1\">-- application type mismatch</span>\n</code></pre></div>",
        "id": 400338047,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699144099
    },
    {
        "content": "<p>If you figure out how to promote from Prop to Bool then let me know what happens when you give it <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RiemannHypothesis#doc\">docs#RiemannHypothesis</a> !</p>",
        "id": 400338579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699144464
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">EdgeInd</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">SimpleGraph.edgeSet</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edgeSet</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>is probably what you're looking for. (I might have 1 and 0 the wrong way around, I don't know what the input order for <code>cond</code> is)</p>",
        "id": 400338773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699144593
    },
    {
        "content": "<p>Huh I had tried <code>DecidableRel G.Adj</code> and it did not work. Thank you!</p>",
        "id": 400339032,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699144771
    },
    {
        "content": "<p>Also, I don't understand the comment about the RiemannHypothesis. From context it seems to imply that such promotion should not be possible. But both Bool and Prop are just two-element types, no? So I don't see why the can't be promotion back and forth.</p>",
        "id": 400339184,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699144843
    },
    {
        "content": "<p>For \"normal\" types like <code>Bool</code>, if you have <code>x : Bool</code> and it doesn't depend on the axiom of choice, then you can eventually compute whether <code>x</code> is <code>true</code> or <code>false</code>. Propositions don't have computational content -- given <code>p : Prop</code> the only thing you can do is try to either prove or disprove <code>p</code>, and there's no algorithm for this that is guaranteed to terminate (incompleteness).</p>\n<p>The <code>Decidable</code> typeclass is for constructing a partial function from propositions to computations that calculate whether they are true or false.</p>",
        "id": 400345213,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699148786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> has marked this topic as resolved.</p>",
        "id": 400366035,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699165563
    }
]