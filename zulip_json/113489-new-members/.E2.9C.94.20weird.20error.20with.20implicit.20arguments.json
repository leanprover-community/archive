[
    {
        "content": "<p>Hi, can anyone help me understand why changing <code>\\all x</code> to <code>\\all {x}</code> in this code makes it error? (lean 4)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h2</span>\n\n<span class=\"c1\">-- only change: ∀ {x} instead of ∀ x</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">a'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">b'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a'</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h2</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   a' (fun {x} =&gt; h) x y h2</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   h2</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   R x : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   R y : Prop</span>\n</code></pre></div>",
        "id": 367286022,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687057389
    },
    {
        "content": "<p>my best guess is that somehow lean is inferring a wrong value for <code>R</code> in the second case</p>",
        "id": 367286340,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687057619
    },
    {
        "content": "<p>eta-reducing it gives a less wrong-seeming error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">b'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a'</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">--   a' (fun {x} =&gt; h) x y</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   R ?m.179 → R ?m.179 : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   R x → R y : Prop</span>\n</code></pre></div>",
        "id": 367286568,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687057754
    },
    {
        "content": "<p><code>set_option pp.explicit true</code> is your friend here (or <code>set_option pp.all true</code>)</p>",
        "id": 367286570,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687057754
    },
    {
        "content": "<p>For a standalone <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, you should change <code>ℕ</code> to <code>Nat</code> here, as otherwise the auto-implicit feature confusingly changes the meaning (and in particular the implicit arguments!) of your functions.</p>",
        "id": 367286899,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687058017
    },
    {
        "content": "<p>But this does look like a bug. <del>Somehow in <code>a' h x y</code>, Lean is using <code>h</code> to fill in the <code>R</code> argument of <code>a'</code>.</del></p>",
        "id": 367287042,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687058106
    },
    {
        "content": "<p>ohh \\N is an implicit argument since I haven't imported mathlib</p>",
        "id": 367287062,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687058138
    },
    {
        "content": "<p>so that applies to any one character identifier? that seems like a bit of a footgun..</p>",
        "id": 367287098,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687058162
    },
    {
        "content": "<p>Nothing specific to one-character. Just anything unknown is converted into an implicit argument!</p>",
        "id": 367287256,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687058264
    },
    {
        "content": "<p>But that's not the explanation for what is going on here.</p>",
        "id": 367287371,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687058344
    },
    {
        "content": "<p>The problem is that when you write <code>h</code> in <code>a' h x y</code>, Lean wants to fill in the implicit argument of <code>h</code>. For some reason that I don't quite see yet, it fills it in with <code>y</code>. That then means that your implicit argument <code>R</code> is actually <code>(fun {x} ↦ R y)</code> (i.e. it ignores the argument!).</p>",
        "id": 367287468,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687058405
    },
    {
        "content": "<p>At that point the error message makes sense, because <code>R x</code> is actually <code>R y</code>!</p>",
        "id": 367287491,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687058430
    },
    {
        "content": "<p>So the mystery here is understanding what decision Lean made to fill in the argument for <code>h</code>.</p>",
        "id": 367287506,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687058450
    },
    {
        "content": "<p>In any case, the correct thing to do here is to write <code>a' @h x y</code>, rather than <code>a' h x y</code>, because you don't want that implicit argument filled in before you pass it to <code>a'</code>.</p>",
        "id": 367287568,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687058504
    },
    {
        "content": "<p>Another solution is to use the <code>{{ ... }}</code> binders:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">x</span><span class=\"o\">}},</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">b'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">x</span><span class=\"o\">}},</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a'</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h2</span> <span class=\"c1\">-- works as expected</span>\n</code></pre></div>",
        "id": 367287638,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687058537
    },
    {
        "content": "<p>thanks so much for explaining!</p>",
        "id": 367287868,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687058653
    },
    {
        "content": "<p>eta-reducing and pp.all give</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">a'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@?</span><span class=\"n\">m.145</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">@?</span><span class=\"n\">m.145</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@?</span><span class=\"n\">m.145</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@?</span><span class=\"n\">m.145</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>So it's creating this mvar and later deciding to unify it with <code>fun _ =&gt; y</code> instead of <code>id</code></p>",
        "id": 367287933,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687058721
    },
    {
        "content": "<p>do you understand why it creates that mvar in the first place instead of <code>@a' (fun {x : Nat} =&gt; R x) (fun {x : Nat} =&gt; @h x) x y</code> ?</p>",
        "id": 367288111,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687058844
    },
    {
        "content": "<p>the way you were explaining it, it seems like just referencing <code>h</code> is gonna try to infer its implicit variables, so I would expect that it elaborates <code>h</code> to <code>@h ?m.145</code>. I'm surprised it instead introduces a lambda abstraction so the mvar can be a function of x</p>",
        "id": 367288750,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687059267
    },
    {
        "content": "<p>hmm if I remove the curly braces from <code>a'</code>'s argument it doesn't introduce the lambda abstraction, so I guess supplying terms when the expected type contains implicit arguments does something fancy</p>",
        "id": 367289292,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687059639
    },
    {
        "content": "<p>I suspect some trace option like <code>set_option trace.Meta.isDefEq true</code> will help work out the metavariables here. Perhaps it is just being elaborated as <code>@h ?_</code> first, but then that mvar gets turned into a lambda by some intermediate step of unification? Unfortunately I have to run now, but looking forward to learning the conclusion. :-)</p>",
        "id": 367289344,
        "sender_full_name": "Kim Liesinger",
        "timestamp": 1687059682
    },
    {
        "content": "<p>looks like the <code>fun {x} =&gt; ...</code> part is being inserted due to <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/interacting_with_lean.html#implicit-lambdas\">Implicit Lambdas</a></p>",
        "id": 367289569,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687059837
    },
    {
        "content": "<p>it all makes sense now!</p>",
        "id": 367290240,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687060267
    },
    {
        "content": "<p>by the way, I just discovered that the section teaching <code>{{ }}</code> uses euclidean relations as its example, which was exactly what I was trying to prove before I reduced to <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 367290364,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1687060333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> has marked this topic as resolved.</p>",
        "id": 367291512,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687061088
    }
]