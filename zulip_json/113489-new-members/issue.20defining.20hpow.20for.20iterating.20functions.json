[
    {
        "content": "<p>I want to define HPow so I can do <code>f^n</code>. Currently I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iterate</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">iterate</span> <span class=\"n\">f</span> <span class=\"n\">n'</span>\n<span class=\"k\">#eval</span> <span class=\"n\">iterate</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">2</span> <span class=\"mi\">9</span> <span class=\"c1\">-- 11</span>\n<span class=\"c1\">-- notation f \" ^ \" n =&gt; iterate (f:=f)  (n:=n)</span>\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">out</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"o\">:=</span> <span class=\"n\">iterate</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:=</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">iterate</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span> <span class=\"c1\">-- 6</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">4</span> <span class=\"c1\">--</span>\n</code></pre></div>\n<p>It errors with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HPow</span> <span class=\"n\">f</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.3591</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.3589</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.3589</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure where the metavars are coming in from.</p>",
        "id": 406008729,
        "sender_full_name": "Alok Singh (S1'17)",
        "timestamp": 1701767365
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.iterate#doc\">docs#Nat.iterate</a> ?</p>",
        "id": 406009081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701767487
    },
    {
        "content": "<p>now i am, thanks. reading the source to see how to impl my own version.</p>",
        "id": 406009217,
        "sender_full_name": "Alok Singh (S1'17)",
        "timestamp": 1701767530
    },
    {
        "content": "<p>You might also be interested in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.End#doc\">docs#Function.End</a></p>",
        "id": 406009296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701767568
    },
    {
        "content": "<p>The errors are that <code>HPow</code> takes three types, and you're giving it three terms.</p>",
        "id": 406013088,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701768834
    },
    {
        "content": "<p>This typechecks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.iterate</span>\n</code></pre></div>\n<p>And this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, it appears this fails to typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 406013282,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701768904
    },
    {
        "content": "<p>It seems to be that the elaborator can't see that this is a function.</p>",
        "id": 406013340,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701768924
    },
    {
        "content": "<p>what does the star after type mean?</p>",
        "id": 406013395,
        "sender_full_name": "Alok Singh (S1'17)",
        "timestamp": 1701768947
    },
    {
        "content": "<p>You can use this trick though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:)</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 406013421,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701768954
    },
    {
        "content": "<p><code>Type*</code> is a mathlib notation, and it's like <code>Type _</code> but it ensures the universe level is a fresh level variable.</p>",
        "id": 406013563,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701768989
    },
    {
        "content": "<p>You can use <code>Type _</code> here.</p>",
        "id": 406013577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701768996
    }
]