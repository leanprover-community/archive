[
    {
        "content": "<p>I have several proofs where <code>aesop</code> fails to close the goal but applies several intro rules that decompose my goal into simpler subgoals with a richer context. However,  editing the proof results in a long wait before my context updates because <code>aesop</code> is running all over again, so I'd like to replace it with an explicit use of the rules its applying. <code>aesop?</code> fails to produce any useful output. How can I find out the rules that <code>aesop</code> applied to create the useful context?</p>",
        "id": 407555608,
        "sender_full_name": "Alex Duchnowski",
        "timestamp": 1702411233
    },
    {
        "content": "<p>Maybe <code>show_term aesop</code></p>",
        "id": 407557754,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702411842
    },
    {
        "content": "<p>Thanks for the suggestion. Unfortunately, that simply produces </p>\n<blockquote>\n<p>Try this: <code>refine ?_ x</code></p>\n</blockquote>\n<p>which doesn't work. Any other ideas?</p>",
        "id": 407559627,
        "sender_full_name": "Alex Duchnowski",
        "timestamp": 1702412481
    },
    {
        "content": "<p>What was the issue with the <code>aesop?</code> output? Usually that works pretty well for me after cleaning up / removing the <code>rename</code>, <code>unhygienic</code>, <code>with_reducible</code>, change <code>aesop_subst</code> to <code>subst</code>, and then try deleting tactics / simp lemmas until it doesn't work anymore</p>",
        "id": 407559841,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702412559
    },
    {
        "content": "<p><code>aesop?</code> simply produces </p>\n<blockquote>\n<p>aesop: failed to prove the goal after exhaustive search.</p>\n</blockquote>",
        "id": 407560036,
        "sender_full_name": "Alex Duchnowski",
        "timestamp": 1702412636
    },
    {
        "content": "<p>Are you using VSCode? Do you get no \"Try this:\"?</p>",
        "id": 407560144,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702412662
    },
    {
        "content": "<p>I am, and I don't.</p>",
        "id": 407560209,
        "sender_full_name": "Alex Duchnowski",
        "timestamp": 1702412683
    },
    {
        "content": "<p>Not sure if this context is useful, but here is my Tactic state before and after <code>aesop</code> (with my cursor to the left of the \"a\" and to the right of the \"p\"):<br>\nBefore:<br>\n<a href=\"/user_uploads/3121/dpbjOw7Zcc19iwCh-8BOx_49/image.png\">image.png</a><br>\nAfter:<br>\n<a href=\"/user_uploads/3121/ghxCADQwZZTpioNOOdCeSchk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dpbjOw7Zcc19iwCh-8BOx_49/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dpbjOw7Zcc19iwCh-8BOx_49/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ghxCADQwZZTpioNOOdCeSchk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ghxCADQwZZTpioNOOdCeSchk/image.png\"></a></div>",
        "id": 407562283,
        "sender_full_name": "Alex Duchnowski",
        "timestamp": 1702413446
    },
    {
        "content": "<p>Possibly <code>aesop_destruct_products</code> and/or <code>repeat' apply And.intro</code></p>",
        "id": 407562927,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702413685
    },
    {
        "content": "<p>Oh sweet, thanks!  How do I name all the daggered variables in my context produced by <code>aesop_destruct_products</code>?</p>",
        "id": 407567487,
        "sender_full_name": "Alex Duchnowski",
        "timestamp": 1702415148
    },
    {
        "content": "<p><code>rename_i</code> is the hacky way; not sure if there's anything better in this case</p>",
        "id": 407572719,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702416938
    },
    {
        "content": "<p>Depending on your proof strategy you might not need those products destructed at all. Or maybe there is some manual way to do it using <code>rw [show x = (x.1, x.2) by rfl] at *</code> or something (not sure of the syntax)</p>",
        "id": 407584478,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702420901
    },
    {
        "content": "<p>You could try the trick I mentioned in <a href=\"#narrow/stream/113488-general/topic/non-finishing.20.60aesop.3F.60/near/404962767\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/non-finishing.20.60aesop.3F.60/near/404962767</a> also perhaps</p>",
        "id": 407852529,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702521320
    }
]