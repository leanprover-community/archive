[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">apply</span> <span class=\"n\">one_smul</span>\n</code></pre></div>\n<p>fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n<span class=\"k\">with</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Looks easy to unify to me...</p>",
        "id": 405898206,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701718276
    },
    {
        "content": "<p>Another clue, when I explicitly provide the <code>b</code> argument, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">one_smul</span> <span class=\"n\">b</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">b</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.761</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.761</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 405898681,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701718476
    },
    {
        "content": "<p>If you <code>import Mathlib.Tactic</code> it works <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 405898799,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1701718534
    },
    {
        "content": "<p>It appears to be a missing instance, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.mulAction#doc\">docs#Pi.mulAction</a></p>\n<p>Adding <code>import Mathlib.GroupTheory.GroupAction.Pi</code> works</p>",
        "id": 405899025,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701718644
    },
    {
        "content": "<p>Thanks!  I would have hoped for a better error message, but the fix certainly gets me un-stuck.</p>",
        "id": 405899215,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701718719
    },
    {
        "content": "<p>This is an extremely common error message that ranks pretty high in the list of frustrating error messages. It always means the type of <code>?b</code> should have type class instances that the type of <code>b</code> hasn't. Somehow we need the error message to mention those type classes. <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> that would be a very nice target in your error message improving quest.</p>",
        "id": 405900135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701719084
    },
    {
        "content": "<p>It's not so much a frustrating error message as a very <em>confusing</em> one, and probably both Patrick and I have seen many people confused by it.</p>",
        "id": 405936868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701735021
    },
    {
        "content": "<p>Does anything about typeclasses appear when you hover over <code>?b</code> in the infoview?<br>\nEdit: Back at computer, and looks like nope.</p>",
        "id": 405949184,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701740032
    },
    {
        "content": "<p>For people wanting to know how to make progress in this kind of situation: When you see the question mark like that, it generally means that Lean doesn't know what variable is supposed to go there. This can be a hint that providing more variables explicitly can be helpful. For example, if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">apply</span> <span class=\"n\">one_smul</span> <span class=\"n\">F</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>you get the \"failed to synthesize instance\" error, which hopefully should clue you in that you need to import the file with the instance.</p>",
        "id": 406320093,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701873707
    }
]