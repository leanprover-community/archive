[
    {
        "content": "<p>What is wrong with the syntax of my code :</p>\n<p>@[class] structure refl_order (A : Type) extends has_le A :=<br>\n(refl : ∀ a, le a a)</p>\n<p>def prod_order {A B : Type} (o₁ : A → A → Prop) (o₂ : B → B → Prop) (s : A × B) (t : A × B) := <br>\no₁ (s.1) (t.1) ∧ o₂ (s.2) (t.2) </p>\n<p>instance refl_prod  {A B: Type} [o₁ : refl_order A] [o₂ : refl_order B] : refl_order (A × B) :=<br>\nlet op : A × B → A × B → Prop  := prod_order o₁.le o₂.le in<br>\n     have refl : ∀ p : A × B, op p p, by intro; apply and.intro; repeat {apply refl_order.refl},<br>\n    show _, from <a href=\"http://refl_order.mk\">refl_order.mk</a> (<a href=\"http://has_le.mk\">has_le.mk</a> op) refl </p>\n<p>type mismatch at application<br>\n  {to_has_le := ?m_2, refl := {le := op}}<br>\nterm<br>\n  {le := op}<br>\nhas type<br>\n  has_le (A × B) : Type<br>\nbut is expected to have type<br>\n  ∀ (a : ?m_1), a ≤ a : Prop</p>\n<p>error message<br>\n  too many arguments</p>",
        "id": 370832367,
        "sender_full_name": "YurySerdyuk",
        "timestamp": 1688053435
    },
    {
        "content": "<p>Here is the code with <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span> <span class=\"kd\">structure</span> <span class=\"n\">refl_order</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_le</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prod_order</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">o₁</span> <span class=\"o\">(</span><span class=\"n\">s.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t.1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">o₂</span> <span class=\"o\">(</span><span class=\"n\">s.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t.2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">refl_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">o₁</span> <span class=\"o\">:</span> <span class=\"n\">refl_order</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">refl_order</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">refl_order</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">prod_order</span> <span class=\"n\">o₁.le</span> <span class=\"n\">o₂.le</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">refl_order.refl</span><span class=\"o\">},</span>\n<span class=\"k\">show</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">refl_order.mk</span> <span class=\"o\">(</span><span class=\"n\">has_le.mk</span> <span class=\"n\">op</span><span class=\"o\">)</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 370839141,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688054627
    },
    {
        "content": "<p>It seems <code>refl_order.mk</code> is supposed to only have one explicit argument, of type <code>(∀ (a : A), a ≤ a)</code>, but this code gives two arguments, <code>(has_le.mk op)</code> and <code>refl</code></p>",
        "id": 370840841,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688054902
    },
    {
        "content": "<p>I see the issue - you included the <code>(has_le.mk op)</code> as one of the arguments, but this was supposed to be implicit, so Lean got confused.</p>",
        "id": 370841574,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688055037
    },
    {
        "content": "<p>This fixes it <code>@refl_order.mk _ (has_le.mk op) refl</code>. The <code>@</code> tells Lean to treat all implicit arguments as explicit, after which there are three arguments, and the <code>_</code> tells Lean to infer the first one.</p>",
        "id": 370841722,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688055069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"626704\">@YurySerdyuk</span></p>",
        "id": 370842713,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688055261
    }
]