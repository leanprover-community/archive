[
    {
        "content": "<p>Hi, I am trying to prove some facts about computing distances between e.g. a line and a line in hyperbolic 3-space. I could not find anything about Minkowski space in mathlib, so I started this file and am stuck with some issues, in particular, since I don't really understand classes and instances well: <br>\n<a href=\"https://github.com/unhyperbolic/hyperbolicGeometryInLean/blob/main/Hyperbolic/hyp.lean\">https://github.com/unhyperbolic/hyperbolicGeometryInLean/blob/main/Hyperbolic/hyp.lean</a><br>\nFor example: What is the best way to implement normalized_time_like which returns a future unit time like vector? Do I make a subclass for such vectors and return the subclass? Or do I just return a vector and annotate in some other way that it is future and unit time like?</p>",
        "id": 370219002,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1687904348
    },
    {
        "content": "<p>I am pretty sure that you don't need instances and classes in your example: a simple def <code>IsLightlike (v : vector) := inner_product vec vec = 0</code> should suffice and then you can have a theorem <code>Foo.isLightlike</code> that starts with <code>unfold</code>ing <code>IsLightlike</code>.</p>",
        "id": 370227750,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1687907889
    },
    {
        "content": "<p>I thought about just a simple IsLightLike... But I think if I want to state theorems later about points in the hyperboloid model, it might be annoying to write the theorems in the style \"IsFutureUnitTimeLike(a) -&gt; IsFutureUnitTimeLike(b) -&gt; theThingIWantToSay\". I think it might be more natural to express that using a type or structure or class. And I would like to express some hierarchy timeLike is more general then unitTimeLike, and so on.</p>",
        "id": 370262663,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1687922501
    },
    {
        "content": "<p>I guess my question isn't so much how do I get to work this, but what would be the proper \"API design\" for Minkowski space.</p>",
        "id": 370263260,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1687922790
    },
    {
        "content": "<p>we have the concept of bundled objects, that is we have a structure that contains the vector and a proof that it is lightlike, something along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">lightLikeVector</span> <span class=\"n\">where</span>\n  <span class=\"n\">toVector</span> <span class=\"o\">:</span> <span class=\"n\">vector</span>\n  <span class=\"n\">light_like</span> <span class=\"o\">:</span> <span class=\"n\">inner_product</span> <span class=\"n\">toVector</span> <span class=\"n\">toVector</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and then you could extend this structure to have future and past lightlike vectors. the downside is that you have to deal with coercions. We use both (bundled and unbundled) approaches in mathlib depending which one is less annoying to deal with. In your case I would think that unbundled might be better. you can always use sections and <code>variable (vec_lightlike : IsLightlike v)</code> so that you don't have to put all the assumptions in the theorem (in Lean 4 you can use all the variables in a theorem, which is a somewhat big change from Lean 3 and this makes unbundled structures more convenient than before)</p>",
        "id": 370307465,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1687937229
    },
    {
        "content": "<p>Thanks.</p>\n<p>Is using subtypes a good idea here?<br>\nI tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"bp\">//</span> <span class=\"n\">isFutureUnitTimeLike</span> <span class=\"n\">v</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">point</span> <span class=\"n\">vector</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p.val</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">distance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"o\">:=</span>\n    <span class=\"n\">Real.arcosh</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">inner_product</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b.val</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>But I am getting: type mismatch</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.73635</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">vector</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">b</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Point</span>\n</code></pre></div>",
        "id": 370956057,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1688085225
    },
    {
        "content": "<p>Typo Point -&gt; point.<br>\nI got it to work with \"instance c : Coe point vector := ⟨ fun p =&gt; p.val ⟩\" Is there a better way?</p>",
        "id": 371007998,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1688104307
    },
    {
        "content": "<p>No, that's what you're supposed to do. There are other options, like using <code>reducible</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"bp\">//</span> <span class=\"n\">isFutureUnitTimeLike</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 371029923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688110143
    },
    {
        "content": "<p>Thanks that works.</p>",
        "id": 371033519,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1688110887
    },
    {
        "content": "<p>Another question: as far as I see, the way to say that something is a vector space is to say that it is a module over a field. What is the quickest way to give \"Fin 4 -&gt; Real\" a vector space structure?<br>\nRight now I am doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">vector</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">⟩</span>\n<span class=\"c1\">--  a bunch of more such stuff</span>\n<span class=\"kd\">def</span> <span class=\"n\">inner_product</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">vector</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and proving things very manual. It would be great if I can approach it from a higher level and communicate that it is a vector space with a symmetric bilinear form. I saw EuclideanSpace - but that is using the wrong inner product.</p>",
        "id": 371035048,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1688111207
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">deriving</span> <span class=\"n\">AddCommGroup</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">vector</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">vector</span><span class=\"bp\">;</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>probably does what you want.</p>",
        "id": 371050482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688114219
    },
    {
        "content": "<p>Thanks that worked for almost everything.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aa</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">vector</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>still gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HMul</span> <span class=\"n\">ℝ</span> <span class=\"n\">vector</span> <span class=\"bp\">?</span><span class=\"n\">m.70817</span>\n</code></pre></div>",
        "id": 371062142,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1688116321
    },
    {
        "content": "<p>I see, it requires a different multiplication symbol. How do I type it in VS code?</p>",
        "id": 371062732,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1688116414
    },
    {
        "content": "<p><code>\\bu</code> (or \\bullet)</p>",
        "id": 371062805,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688116433
    },
    {
        "content": "<p>If you hover over  a symbol it should tell you how to type it</p>",
        "id": 371062950,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688116460
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 371170242,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1688133009
    },
    {
        "content": "<p>I have a couple of more questions: I want to generalize to arbitrary dimension</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>works, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>  <span class=\"n\">deriving</span> <span class=\"n\">AddCommGroup</span>\n</code></pre></div>\n<p>does not work. How do I fix it?</p>",
        "id": 379931138,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1690688672
    },
    {
        "content": "<p>We don't have \"delta\" instances as we did in Lean 3, and it would require a bit of redesign that hasn't happened yet to allow it. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/380\">#380</a>.</p>\n<p>For now just write the instance directly, e.g.<br>\n<code>instance : AddCommGroup (vector n) := inferInstanceAs &lt;| AddCommGroup ((Fin n) → ℝ)</code>.</p>",
        "id": 379931910,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690689166
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 379932321,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1690689475
    },
    {
        "content": "<p>This is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Sign</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Sign</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r.val</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PlusSign</span>  <span class=\"o\">:</span> <span class=\"n\">Sign</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">MinusSign</span> <span class=\"o\">:</span> <span class=\"n\">Sign</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PseudoEuclideanSpace</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">signature</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Sign</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">PseudoEuclideanSpace</span> <span class=\"n\">signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MinkowskiSpaceSignature</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Sign</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">MinusSign</span> <span class=\"k\">else</span> <span class=\"n\">PlusSign</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MinkowskiSpace</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">PseudoEuclideanSpace</span> <span class=\"o\">(</span><span class=\"n\">MinkowskiSpaceSignature</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379934066,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1690690974
    },
    {
        "content": "<p>I ran into a problem at the line instance : AddCommGroup.</p>",
        "id": 379934104,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1690691037
    },
    {
        "content": "<p>Similarly, when I am trying to define the inner product on the PseudoEuclideanSpace with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inner</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">PseudoEuclideanSpace</span> <span class=\"n\">signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">signature</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 379934377,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1690691337
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">PseudoEuclideanSpace</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">signature</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Sign</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">PseudoEuclideanSpace</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works, but I want f to be implicit {} and k to be from instance inference []. But then how do I change the next line?</p>",
        "id": 379936044,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1690692577
    },
    {
        "content": "<p>I think I figured it out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PseudoEuclideanSpace</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379936182,
        "sender_full_name": "Matthias Goerner",
        "timestamp": 1690692656
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SignType#doc\">docs#SignType</a></p>",
        "id": 379941623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690695945
    },
    {
        "content": "<p>Ah, I guess you don't want to allow 0</p>",
        "id": 379941684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690695971
    },
    {
        "content": "<p><del>Making <code>f</code> <code>{}</code>-implicit doesn't make any sense here</del></p>",
        "id": 379941791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690696082
    }
]