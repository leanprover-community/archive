[
    {
        "content": "<p>Hi! I'm trying to play around a bit with coalgebras and algebras in Lean, but I'm having some trouble combining them. The minimal non-working example I have is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Test₁</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test₂</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">Test₁</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"n\">where</span>\n  <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">TensorProduct.lift</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.mk₂</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">add_mul</span> <span class=\"n\">smul_mul_assoc</span> <span class=\"n\">mul_add</span> <span class=\"n\">mul_smul_comm</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which gives the error: <code>unsupported dependent field in d : H →ₗ[F] H ⊗[F] H</code>.  When I swap <code>Test₁ F H</code> and <code>Algebra F H</code> after <code>extends</code>, I can use the coproduct <code>d</code>, but I get the error <code>failed to synthesize instance\n  IsScalarTower F H H</code> on <code>smul_mul_assoc</code> and <code>mul_smul_comm</code>. This makes me think that <code>Test₁ F H</code> and <code>Algebra F H</code> are interfering with each other somehow - changing the element of <code>Test₁ F H</code> to be an F-linear map (without any tensor products) also fails, but changing it to be just any map H -&gt; H works fine. So it seems to be some problem with the field F (also tried changing it to be a commutative ring or a commutative semiring, with no effect), but I can't think what it would be. Any help would be greatly appreciated.</p>",
        "id": 397337967,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697642988
    },
    {
        "content": "<p>What are you trying to do with <code>m</code> there?</p>",
        "id": 397339669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697643502
    },
    {
        "content": "<p>Note that that says \"<code>m</code> is some arbitrary bilinear map, which <em>by default</em> is multiplication, but may be something else\"</p>",
        "id": 397339758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697643536
    },
    {
        "content": "<p>Do you really not want it to <em>always</em> be multiplication?</p>",
        "id": 397339816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697643554
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Bilinear</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"c1\">-- `Module` is no longer after the `extends`</span>\n<span class=\"kd\">class</span> <span class=\"n\">HasCoproduct</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CoAlgebra</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">HasCoproduct</span> <span class=\"n\">F</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 397340422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697643734
    },
    {
        "content": "<p>The problem with your original is that you are asking Lean to merge the <code>Algebra.toSMul</code> instance with <code>Test₁.toModule</code>, and it doesn't know how to do that without making a mess of the type of <code>d</code></p>",
        "id": 397340605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697643795
    },
    {
        "content": "<p>My version above avoids that issue because <code>Test₁</code> doesn't actually <em>contain</em> the module structure, it <em>assumes</em> it.</p>",
        "id": 397340743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697643840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397339816\">said</a>:</p>\n<blockquote>\n<p>Do you really not want it to <em>always</em> be multiplication?</p>\n</blockquote>\n<p>Ah yep! I've gotten into the habit of writing my maps as arbitrary before specifying them because the second part so often breaks, and I want to check everything else works before fixing it. Now that it seems to be working, I should delete that.</p>",
        "id": 397341814,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697644210
    },
    {
        "content": "<p>In fact, the map in question already exists as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.mul%27#doc\">docs#LinearMap.mul'</a></p>",
        "id": 397341913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697644253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397340422\">said</a>:</p>\n<blockquote>\n<p>This seems to work:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `Module` is no longer after the `extends`</span>\n<span class=\"kd\">class</span> <span class=\"n\">HasCoproduct</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CoAlgebra</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">HasCoproduct</span> <span class=\"n\">F</span> <span class=\"n\">H</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you! Do you have any advice on when to use extends, and when to use the square brackets? I've mostly been guessing based on what's already in mathlib. Also, I'm not quite sure why the order in which things are specified after extends matters?</p>",
        "id": 397342298,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697644404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397341913\">said</a>:</p>\n<blockquote>\n<p>In fact, the map in question already exists as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.mul%27#doc\">docs#LinearMap.mul'</a></p>\n</blockquote>\n<p>I was trying to use that, but I kept getting a strange error message about types, so I went to the source and just copied the definition and that seemed to work</p>",
        "id": 397342442,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697644444
    },
    {
        "content": "<p>If you're interested in understanding the strange error message about types, then feel free to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> .</p>",
        "id": 397342769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697644573
    },
    {
        "content": "<p>(the error message was <code>invalid field notation, type is not of the form (C ...) where C is \na constant</code>)</p>",
        "id": 397342770,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697644573
    },
    {
        "content": "<p>That means \"you typed something wrong\", it's not helpful unless we see the code as well.</p>",
        "id": 397342823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697644598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397342769\">said</a>:</p>\n<blockquote>\n<p>If you're interested in understanding the strange error message about types, then feel free to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> .</p>\n</blockquote>\n<p>Ah ok, thank you</p>",
        "id": 397342838,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697644605
    },
    {
        "content": "<p>It probably means you forgot to write <code>import Mathlib.Algebra.Algebra.Bilinear</code></p>",
        "id": 397342979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697644675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462808\">Ali Ramsey</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397341814\">said</a>:</p>\n<blockquote>\n<p>Ah yep! I've gotten into the habit of writing my maps as arbitrary before specifying them because the second part so often breaks, and I want to check everything else works before fixing it. Now that it seems to be working, I should delete that.</p>\n</blockquote>\n<p>Just to be clear, <code>:=</code> does not specify the map at all, and it's probably almost never what you want to use inside a <code>class</code> or <code>structure</code>.</p>",
        "id": 397343208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697644762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397343208\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"462808\">Ali Ramsey</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397341814\">said</a>:</p>\n<blockquote>\n<p>Ah yep! I've gotten into the habit of writing my maps as arbitrary before specifying them because the second part so often breaks, and I want to check everything else works before fixing it. Now that it seems to be working, I should delete that.</p>\n</blockquote>\n<p>Just to be clear, <code>:=</code> does not specify the map at all, and it's probably almost never what you want to use inside a <code>class</code> or <code>structure</code>.</p>\n</blockquote>\n<p>What do you mean by it doesn't specify the map? Is it not setting the map I want as the default?</p>",
        "id": 397344943,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697645245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397342979\">said</a>:</p>\n<blockquote>\n<p>It probably means you forgot to write <code>import Mathlib.Algebra.Algebra.Bilinear</code></p>\n</blockquote>\n<p>Ah that's embarrassing, that was the problem... I think I thought it was in LinearAlgebra.TensorProduct for some reason</p>",
        "id": 397345290,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697645369
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Two</span> <span class=\"n\">where</span>\n  <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Two.two</span> <span class=\"o\">{}</span>  <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Two.two</span> <span class=\"o\">{</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"o\">}</span>  <span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 397345510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697645451
    },
    {
        "content": "<p>Would I just use <code>:</code> instead of <code>:=</code> if I wanted it to be immutable then?</p>",
        "id": 397346993,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697646005
    },
    {
        "content": "<p>No, you just want a regular <code>def</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Two</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Two.two</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Two</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Two.two</span> <span class=\"o\">{}</span>  <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Two.two</span> <span class=\"o\">{</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"o\">}</span>  <span class=\"c1\">-- error, no `two` field exists</span>\n</code></pre></div>",
        "id": 397348021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697646410
    },
    {
        "content": "<p>How does that work when the structure needs inputs like <code>Test₁</code>? Also, what is the <code>_t</code> in the brackets doing? Sorry, I haven't really used <code>def</code> much so I don't know the syntax. Is this all happening outside of the structure too?</p>",
        "id": 397349550,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697647027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462808\">Ali Ramsey</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397349550\">said</a>:</p>\n<blockquote>\n<p>How does that work when the structure needs inputs like <code>Test₁</code>?</p>\n</blockquote>\n<p>You gives these inputs to the function too</p>\n<blockquote>\n<p>Also, what is the <code>_t</code> in the brackets doing?</p>\n</blockquote>\n<p>That's just another input. The <code>_</code> is because lean complains at you if you call it <code>t</code>, but it doesn't actually make any difference</p>\n<blockquote>\n<p>Is this all happening outside of the structure too?</p>\n</blockquote>\n<p>Yes: the only things that go inside the structure are things the caller provides themselves</p>",
        "id": 397352495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697648281
    },
    {
        "content": "<p><code>def name : type := term</code> just assigns the name <code>name</code> to the <code>term</code> with type <code>type</code>. If the <code>def</code> takes arguments like <code>def name (arg : argType) : type := term[arg]</code>, where <code>term[arg]</code> is some term with occurrences of <code>arg</code> throughout, then this just assigns the name <code>name</code> to a term <code>fun arg ↦ term[arg]</code> which has type <code>argType → type</code>.</p>",
        "id": 397352628,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697648328
    },
    {
        "content": "<p>So, <code>def twoNat : Nat := 2</code> just gives us another way to refer to <code>2</code> (in a <em>semireducible</em> way; which you can ignore for the moment if you don't know what it means). You can then do <code>#eval 1 + twoNat -- 3</code>.</p>",
        "id": 397352952,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697648449
    },
    {
        "content": "<p>Sorry, I'm still really confused. If I take the example I had earlier of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Test₁</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test₂</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">Test₁</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"n\">where</span>\n  <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.mul'</span> <span class=\"n\">F</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>as I understand it I shouldn't use <code>:=</code>, because it's mutable. So I should have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Test₁</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test₂</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">Test₁</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>and some <code>def</code> below it (outside the class). But then what should this be? I've tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Test₂.m</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Test₂</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.mul'</span> <span class=\"n\">F</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Test₂.m</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Test₂</span> <span class=\"n\">F</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.mul'</span> <span class=\"n\">F</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>neither of which work. Do I need to put more in square brackets, like <code>[Module F H]</code>? Shouldn't it pick that up from <code>Test₂ F H</code>? Am I going about this completely the wrong way? And I'm confused as to why it really matters, since I won't be doing anything that should change <code>m</code> anyway?</p>",
        "id": 397362596,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697652577
    },
    {
        "content": "<p>I think it might be worth looking for some basic exercises that use <code>def</code> before trying to work out how to use typeclasses!</p>",
        "id": 397367611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697654929
    },
    {
        "content": "<p>But here, you want something more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Test₂.m</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Test₂</span> <span class=\"n\">F</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.mul'</span> <span class=\"n\">F</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 397367655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697654954
    },
    {
        "content": "<blockquote>\n<p>Shouldn't it pick (<code>[Module F H]</code> up from <code>Test₂ F H</code>?</p>\n</blockquote>\n<p>Yes, but you didn't give it <code>Test₂ F H</code>! You wrote that <em>after</em> the colon, which means \"I am going to <em>build</em> a <code>Test₂ F H</code>\". You need it before the colon, which means \"I am going to <em>assume</em> a <code>Test₂ F H</code>\".</p>",
        "id": 397367805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697655026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Extending.20algebra.20with.20a.20coproduct/near/397367611\">said</a>:</p>\n<blockquote>\n<p>I think it might be worth looking for some basic exercises that use <code>def</code> before trying to work out how to use typeclasses!</p>\n</blockquote>\n<p>Yeah, that's fair. I didn't think I'd be using <code>def</code> at all, I figured I'd just be defining structures so I went straight to reading about that. Thank you for your help!</p>",
        "id": 397369289,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697655830
    },
    {
        "content": "<p>I also just wanted to ask: how do you know when to put an argument in square brackets, and when to use extends?</p>",
        "id": 397369424,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697655880
    },
    {
        "content": "<p>It sounds like the \"Structures and classes\" tutorial I gave at <a href=\"https://lftcm2023.github.io/tutorial/index.html\">https://lftcm2023.github.io/tutorial/index.html</a> might be of interest to you; there's a video recording there, and some exercises about working with structures (and <code>def</code> as needed to use them)</p>",
        "id": 397369531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697655931
    },
    {
        "content": "<p>Oh nice, I'll take a look - thank you!</p>",
        "id": 397369700,
        "sender_full_name": "Ali Ramsey",
        "timestamp": 1697656017
    }
]