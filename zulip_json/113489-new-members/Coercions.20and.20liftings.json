[
    {
        "content": "<p>I am getting stuck on lifting and coercions in lean3, is there a source to learn more about them?</p>",
        "id": 344555837,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1679779402
    },
    {
        "content": "<p>You wait until you try Lean 4.</p>\n<p>Are you specifically interested in the ins and outs of <code>has_lift_t</code> and all that jazz (something I'm completely ignorant about, save for knowing that it's all changed in Lean 4 so there's no point learning about it anyway) or do you just want to know how to prove a goal involving integers when you have the corresponding hypothesis involving naturals?</p>",
        "id": 344556948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679780227
    },
    {
        "content": "<p>Like when I was going through the definition of trece in finite fields, I didn't understand what the function of this symbol was:-⇑ <br>\nThe main theorem that I am looking at now is this :-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">trace_to_zmod_nondegenerate</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">char_p.char_is_prime</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">htr</span> <span class=\"o\">:=</span> <span class=\"n\">trace_form_nondegenerate</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">algebra.trace_form_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">htr</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra'</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">htr</span> <span class=\"n\">hf</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 344593714,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1679806412
    },
    {
        "content": "<p>but in the documentation, the same statement is given as :-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finite_field.trace_to_zmod_nondegenerate</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebra.trace</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 344593808,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1679806493
    },
    {
        "content": "<p>It's the coercion from a function-like-thing (eg a group homomorphism, which is a function plus some axioms) to the underlying function</p>",
        "id": 344633435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679827385
    },
    {
        "content": "<p>Okay, that makes sense, but we don't need to specify the coercion in our code?</p>",
        "id": 344662649,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1679837693
    },
    {
        "content": "<p>or does lean generally decipher that for us?</p>",
        "id": 344662950,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1679837823
    },
    {
        "content": "<p>Lean inserts it automatically if you write <code>f x</code> where <code>f</code> is a term which is not literally a function but you are attempting to evaluate it at <code>x</code>. The moment Lean sees you putting a term next to another term in a kind of \"I'm trying to apply a function to an input\" way, if <code>f</code> is not a function then the typeclass inference system will look for a coercion to a function. It's just like if you have <code>a : nat</code> but then write <code>f a</code> where <code>f</code> is a function expecting a real number -- this time it will coerce <code>a</code> from a natural to a real and you'l see <code>f </code>\\u a<code> where </code>\\u` is a little up-arrow this time representing a coercion from a term to another term.</p>",
        "id": 344662961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679837829
    },
    {
        "content": "<p>Unfortunately, this process of elaboration isn't easily reversible. To generate the documentation, the elaborated code is \"delaborated\" back into human-readable stuff, but the delaborator isn't perfect!</p>",
        "id": 344663036,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1679837862
    },
    {
        "content": "<p>It adds unnecessary things sometimes.</p>",
        "id": 344663082,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1679837882
    },
    {
        "content": "<p>If the system finds a coercion to a function, it will apply the coercion and insert the relevant arrow; if it doesn't, you'll get an error of the form \"I expected a function and got something else\". </p>\n<p>Yes, coercions are a good example where round-tripping is bad in Lean 3. If you cut and paste from the prettyprinter output and it doesn't compile because of an error under a coercion, just delete it; that usually does the trick.</p>",
        "id": 344663249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679837932
    }
]