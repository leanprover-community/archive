[
    {
        "content": "<p>Hello,<br>\nI'm new to Lean and pretty much just started messing with it, I've been experimenting with proving basic arithmetic from scratch and just started porting most of my experiments to Lean 4, I however can't seem to understand why the <code>contradiction</code> tactic can't seem to find a contradiction inside the context in this scenario.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_iff_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">succ_ne_zero</span> <span class=\"n\">a</span> <span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">succ_ne_zero</span> <span class=\"n\">b</span> <span class=\"bp\">;</span> <span class=\"n\">contradiction</span> <span class=\"c1\">-- it errors out here</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/axahts60gqNTvKRka58063Is/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/axahts60gqNTvKRka58063Is/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/axahts60gqNTvKRka58063Is/image.png\"></a></div>",
        "id": 327921616,
        "sender_full_name": "Kauê Campos",
        "timestamp": 1676435663
    },
    {
        "content": "<p>I hope this helps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n\n<span class=\"c1\">-- theorem `Nat.eq_zero_of_add_eq_zero` in `Std.Data.Nat.Lemmas`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_iff_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Nat.eq_zero_of_add_eq_zero</span>\n</code></pre></div>",
        "id": 327930770,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1676441976
    },
    {
        "content": "<p>See also Section <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html#tactics-for-inductive-types\">Tactics for Inductive Types</a> in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil4</a>.</p>",
        "id": 327936496,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1676444939
    },
    {
        "content": "<p>In the screenshot, what is the contradiction you expected Lean to find? Lean needs your help in finding a contradiction from <code>h1</code> because of the way addition is defined (I'm assuming that your definition of <code>mynat</code> addition includes the case <code>succ a + b = succ (a+b)</code>, so the statement <code>a + succ b = succ (a+b)</code> is not true by definition and must be proved by induction), so spelling it out might help.</p>",
        "id": 327939163,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1676446191
    },
    {
        "content": "<p>The <code>contradiction</code> tactic does not work hard to find a complicated argument which leads to a contradiction from your hypothesis. Doesn't it <em>only</em> work when there are two hypotheses, one of which is literally <code>not</code> the other one?</p>",
        "id": 328016945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676469468
    },
    {
        "content": "<p>It does a few other things too it seems <a href=\"https://github.com/leanprover-community/lean/blob/855e5b74e3a52a40552e8f067169d747d48743fd/library/init/meta/contradiction_tactic.lean#L73\">https://github.com/leanprover-community/lean/blob/855e5b74e3a52a40552e8f067169d747d48743fd/library/init/meta/contradiction_tactic.lean#L73</a> but all are somewhat basic, <code>false</code> as a hypothesis, not x ~ x for reflexive ~, no confusion for constructors of inductive types.</p>",
        "id": 328030042,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1676472887
    }
]