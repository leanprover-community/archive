[
    {
        "content": "<p>When dealing with <code>is_R_or_C 𝕜</code>, is there a way to \"separate\" it in the proof? Like proving it in the case of <code>𝕜 = ℝ</code> and in the case of <code>𝕜 = ℂ</code>?</p>",
        "id": 326076561,
        "sender_full_name": "Monica Omar",
        "timestamp": 1675675921
    },
    {
        "content": "<p>Not really, no. That's the entire point of <code>is_R_or_C</code> in the first place : avoid proving every real and complex result separately.</p>",
        "id": 326081444,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675677409
    },
    {
        "content": "<p>You might be able to case on <code>I = 0</code>; not sure if that would help</p>",
        "id": 326083557,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675678084
    },
    {
        "content": "<p>Yes, that's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_R_or_C.I_mul_I_ax\">docs#is_R_or_C.I_mul_I_ax</a></p>",
        "id": 326114369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675687735
    },
    {
        "content": "<p>I think a key question is: why do you <em>want</em> to separate it? I'm not saying there are no possible reasons, but often it's the case that there is a better way to work with <code>is_R_or_C</code>.</p>",
        "id": 326177303,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675700739
    },
    {
        "content": "<p>For example, if I want to show that any self-adjoint linear map <code>T</code> has the property: <code>(∀ x, ⟪x, T x⟫ = 0) ↔ T = 0</code>, then I wanted to see if I can use <code>inner_map_self_eq_zero</code> for the complex case, instead of copying the proof.</p>",
        "id": 326347550,
        "sender_full_name": "Monica Omar",
        "timestamp": 1675772083
    },
    {
        "content": "<p>Arguably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_map_self_eq_zero\">docs#inner_map_self_eq_zero</a>  should be stated for <code>is_R_or_C</code> in the first place</p>",
        "id": 326354127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675774097
    },
    {
        "content": "<p>you need the self-adjoint property for it to work over the reals though</p>",
        "id": 326367947,
        "sender_full_name": "Monica Omar",
        "timestamp": 1675778192
    },
    {
        "content": "<p>Can you give the full statement of what you want to prove?</p>",
        "id": 326372573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675779472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/question.20on.20is_R_or_C/near/326354127\">said</a>:</p>\n<blockquote>\n<p>Arguably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_map_self_eq_zero\">docs#inner_map_self_eq_zero</a>  should be stated for <code>is_R_or_C</code> in the first place</p>\n</blockquote>\n<p>Isn't that false over R? For example, have V be R^2 and T be rotation by a quarter turn.</p>",
        "id": 326376075,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675780379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/question.20on.20is_R_or_C/near/326372573\">said</a>:</p>\n<blockquote>\n<p>Can you give the full statement of what you want to prove?</p>\n</blockquote>\n<p>Here ya go</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.symmetric</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T.is_symmetric</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 326379667,
        "sender_full_name": "Monica Omar",
        "timestamp": 1675781390
    },
    {
        "content": "<p>You could prove something like this that works over <code>is_R_or_C</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.symmetric</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">is_R_or_C</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_map.is_symmetric.inner_map_polarization</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T.is_symmetric</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⟪</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span> <span class=\"bp\">-</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span> <span class=\"bp\">-</span>\n    <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span>\n    <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">⟫</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"bp\">@</span><span class=\"n\">I_mul_I_ax</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inner_add_left</span><span class=\"o\">,</span> <span class=\"n\">inner_add_right</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_right</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hT</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_conj_sym</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">eq_conj_iff_re.mpr</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span><span class=\"n\">re_add_im</span> <span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">inner_add_left</span><span class=\"o\">,</span> <span class=\"n\">inner_add_right</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_smul</span><span class=\"o\">,</span>\n             <span class=\"n\">inner_smul_left</span><span class=\"o\">,</span> <span class=\"n\">inner_smul_right</span><span class=\"o\">,</span> <span class=\"n\">is_R_or_C.conj_I</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n             <span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_right</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span>\n             <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_sub</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T.is_symmetric</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">linear_map.zero_apply</span><span class=\"o\">,</span> <span class=\"n\">inner_zero_left</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">]⟩,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.zero_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_self_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">hT.inner_map_polarization</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326397361,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675785860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/question.20on.20is_R_or_C/near/326397361\">said</a>:</p>\n<blockquote>\n<p>You could prove something like this that works over <code>is_R_or_C</code>.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.symmetric</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">is_R_or_C</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_symmetric.inner_map_polarization</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T.is_symmetric</span><span class=\"o\">):</span>\n  <span class=\"bp\">⟪</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span> <span class=\"bp\">-</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span> <span class=\"bp\">-</span>\n    <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span>\n    <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">⟫</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"bp\">@</span><span class=\"n\">I_mul_I_ax</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inner_add_left</span><span class=\"o\">,</span> <span class=\"n\">inner_add_right</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_right</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hT</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inner_conj_sym</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">eq_conj_iff_re.mpr</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span><span class=\"n\">re_add_im</span> <span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">inner_add_left</span><span class=\"o\">,</span> <span class=\"n\">inner_add_right</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_smul</span><span class=\"o\">,</span>\n             <span class=\"n\">inner_smul_left</span><span class=\"o\">,</span> <span class=\"n\">inner_smul_right</span><span class=\"o\">,</span> <span class=\"n\">is_R_or_C.conj_I</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n             <span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_right</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span>\n             <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_sub</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>yo! I was legit in the process of doing this - haha!</p>",
        "id": 326397601,
        "sender_full_name": "Monica Omar",
        "timestamp": 1675785930
    },
    {
        "content": "<p>(edited the code above with a proof of your result)</p>",
        "id": 326402746,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675787206
    },
    {
        "content": "<p>Actually, if you want to PR the results above, that would be nice.</p>",
        "id": 326404397,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675787624
    },
    {
        "content": "<p>yeah! sounds good. i'll do that just now. i'll have to give your code the credit tho lol</p>",
        "id": 326404864,
        "sender_full_name": "Monica Omar",
        "timestamp": 1675787754
    },
    {
        "content": "<p>no need, don't worry about it.</p>",
        "id": 326407536,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675788514
    }
]