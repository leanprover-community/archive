[
    {
        "content": "<p>I saw the following code in Lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_not_em</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inl</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I am confused how can <code>h ∘ Or.inl</code> produce <code>¬a</code>, which is expected here.</p>",
        "id": 372754345,
        "sender_full_name": "newptcai",
        "timestamp": 1688612439
    },
    {
        "content": "<p><code>¬a</code> means the same as <code>a -&gt; False</code>. <code>h</code> has type <code>¬(a ∨ ¬a)</code>, which means <code>(a ∨ ¬a) -&gt; False</code>.<br>\n<code>h ∘ Or.inl</code> is a function which takes in a proof that <code>a</code> is true, applies <code>Or.inl</code> to get a proof that <code>a ∨ ¬a</code> is true, and then uses <code>h</code> to get a proof of <code>False</code>.<br>\nHere's a less concise version of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_not_em</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"c1\">-- This is the same as `h ∘ Or.inl`</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h₁</span>\n    <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">h₂</span>\n</code></pre></div>",
        "id": 372772321,
        "sender_full_name": "Niels Voss",
        "timestamp": 1688621434
    }
]