[
    {
        "content": "<p>Hey (first time writing here - I hope I didn't miss anything and this is the right place to post). I have a small problem with an index proof involving a locally defined function. I currently have this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PcwFn</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">borders</span><span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">δ</span> <span class=\"n\">n</span>\n  <span class=\"n\">fns</span><span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">bordersOrdered</span><span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"o\">(</span><span class=\"bp\">·&lt;·</span><span class=\"o\">)</span> <span class=\"n\">borders.toList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PcwFn.func_at</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PcwFn</span> <span class=\"n\">δ</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">xComparisonDec</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">&lt;·</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">δ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ts</span>\n  <span class=\"k\">let</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">helper</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f.borders.toList</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">helper</span>\n    <span class=\"o\">}</span>\n    <span class=\"o\">{</span>\n\n    <span class=\"o\">}</span>\n  <span class=\"n\">f.fns</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span>\n</code></pre></div>\n<p>and my problem is that <code>helper</code> is not part of the current context inside of the proof of <code>h</code> - in particular the <code>unfold helper</code> isn't valid because of that. I've tried a few different things but can't get it to work. Any pointer would be very much appreciated, thanks.</p>",
        "id": 394483002,
        "sender_full_name": "Stefan Volz",
        "timestamp": 1696268410
    },
    {
        "content": "<p>I'm no expert, but from playing around with it, it seems like as soon as you define something with <code>let rec</code>, Lean forgets the equations you used to define it. The following small example fails too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fac</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fac</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- error; lean seems to have no idea how fac is defined</span>\n\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>There may be a workaround still using <code>let rec</code>, but another option is to create a (private) top-level definition instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">linearSearch</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">δ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">linearSearch</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ts</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PcwFn.func_at</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PcwFn</span> <span class=\"n\">δ</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">xComparisonDec</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">&lt;·</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">linearSearch</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f.borders.toList</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">n</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">linearSearch</span><span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n    <span class=\"o\">{</span>\n\n    <span class=\"o\">}</span>\n  <span class=\"n\">f.fns</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span>\n</code></pre></div>",
        "id": 394497515,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696273952
    },
    {
        "content": "<p>That works - thanks!</p>",
        "id": 394511662,
        "sender_full_name": "Stefan Volz",
        "timestamp": 1696280190
    }
]