[
    {
        "content": "<p>I wrote a Petri Net structure of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span> <span class=\"kd\">structure</span> <span class=\"n\">PetriNet</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">places</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span>\n  <span class=\"n\">transition</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span>\n  <span class=\"n\">rel_pt</span> <span class=\"o\">:</span> <span class=\"n\">places</span> <span class=\"bp\">→</span>  <span class=\"n\">transition</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span>\n  <span class=\"n\">rel_tp</span> <span class=\"o\">:</span> <span class=\"n\">transition</span> <span class=\"bp\">→</span>  <span class=\"n\">places</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span>\n  <span class=\"n\">m₀</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">places</span>\n</code></pre></div>\n<p>and I extend this for reversible nets</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span> <span class=\"kd\">structure</span> <span class=\"n\">revPetriNet</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">PetriNet</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">rev_rel_pt</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">places</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">transition</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rel_tp</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n  <span class=\"n\">rev_rel_tp</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">transition</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">places</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rel_pt</span> <span class=\"n\">p</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>I have too this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rev_postset_t</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">revPetriNet</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R.transition</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R.places</span> <span class=\"o\">:=</span>\n <span class=\"n\">Relation.pre_image</span> <span class=\"n\">R.rel_pt</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"mi\">2</span> <span class=\"s2\">\"•ᵣ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rev_postset_t</span>\n</code></pre></div>\n<p>But when I use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mo>∙</mo><mi>r</mi></msub><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\bullet_r t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mbin\">∙</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> in a lemma, this error occurs: </p>\n<div class=\"codehilite\" data-code-language=\"application\"><pre><span></span><code>  •ᵣt\nargument\n  t\nhas type\n  { x // x ∈ R.transition } : Type\nbut is expected to have type\n  Type : Type 1\n\nWhy?\n</code></pre></div>",
        "id": 408925194,
        "sender_full_name": "Daniel Dávalos",
        "timestamp": 1702989433
    },
    {
        "content": "<p>What exactly do you think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rev_rel_pt</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">places</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">transition</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rel_tp</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n  <span class=\"n\">rev_rel_tp</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">transition</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">places</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rel_pt</span> <span class=\"n\">p</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>means?</p>",
        "id": 408925404,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702989504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20error/near/408925404\">ha dicho</a>:</p>\n<blockquote>\n<p>What exactly do you think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rev_rel_pt</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">places</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">transition</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rel_tp</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n  <span class=\"n\">rev_rel_tp</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">transition</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">places</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rel_pt</span> <span class=\"n\">p</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>means?</p>\n</blockquote>\n<p>They are new relationships that connect in a reversible way.<br>\n<a href=\"/user_uploads/3121/_Me8oXHqY1iYD8IIWpFUYn15/Screenshot_2023-12-19_09-41-28.png\">Screenshot_2023-12-19_09-41-28.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_Me8oXHqY1iYD8IIWpFUYn15/Screenshot_2023-12-19_09-41-28.png\" title=\"Screenshot_2023-12-19_09-41-28.png\"><img src=\"/user_uploads/3121/_Me8oXHqY1iYD8IIWpFUYn15/Screenshot_2023-12-19_09-41-28.png\"></a></div>",
        "id": 408926025,
        "sender_full_name": "Daniel Dávalos",
        "timestamp": 1702989744
    },
    {
        "content": "<p>Okay, let me tell you what it actually means: It means that <code>rev_rel_pt</code> and <code>rev_rel_tp</code> are two (possibly arbitrary) propositions, eg <code>4 = 3</code> or <code>FermatLastTheorem</code>, which, if not provided by the user when defining a <code>revPetriNet</code>, will be taken to be <code>rel_tp t p</code> and <code>rel_pt p t</code> respectively.</p>",
        "id": 408926386,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702989887
    },
    {
        "content": "<p>Possibly you instead meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rev_rel_pt</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">places</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">transition</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rel_tp</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n  <span class=\"n\">rev_rel_tp</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">transition</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">places</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rel_pt</span> <span class=\"n\">p</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>but this still doesn't really make sense to me. So you will have to explain the maths a bit more.</p>",
        "id": 408926535,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702989952
    },
    {
        "content": "<p>Ok, I understand.  Could  I better define it this way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rev_rel_pt</span> <span class=\"o\">:</span> <span class=\"n\">places</span> <span class=\"bp\">→</span> <span class=\"n\">transition</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">rev_rel_tp</span> <span class=\"o\">:</span> <span class=\"n\">transition</span> <span class=\"bp\">→</span> <span class=\"n\">places</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>And I write the <code>rev_postset_t</code>  so that it satisfies the condition I need.</p>",
        "id": 408927912,
        "sender_full_name": "Daniel Dávalos",
        "timestamp": 1702990436
    },
    {
        "content": "<p>So do you want <code>rev_rel_pt p t ↔ rel_tp t p</code>?</p>",
        "id": 408928132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702990507
    },
    {
        "content": "<p>Exactly</p>",
        "id": 408928401,
        "sender_full_name": "Daniel Dávalos",
        "timestamp": 1702990608
    },
    {
        "content": "<p>Ah! Then why even define it? You might as well do <code>def rev_rel_pt (p t) := rel_tp t p</code> later on (outside of the class declaration).</p>",
        "id": 408928547,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702990662
    },
    {
        "content": "<p>I didn't know it was possible to define it like that. Thank you!</p>",
        "id": 408928869,
        "sender_full_name": "Daniel Dávalos",
        "timestamp": 1702990766
    },
    {
        "content": "<p>Also, to answer your original question:</p>\n<ul>\n<li>I don't have enough context to say for sure what the error is. Please read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (this is a link) and follow the instructions there when asking future questions</li>\n<li>I am nevertheless pretty sure that this is because you made too many arguments to <code>rev_postset_t</code> explicit.</li>\n</ul>",
        "id": 408929709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702990999
    },
    {
        "content": "<p>If you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>then <code>foo</code> has <code>α</code> as an explicit argument, so <code>foo a</code> will complain that you gave it <code>a : α</code>, not <code>α : Type</code>.</p>",
        "id": 408929928,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702991058
    },
    {
        "content": "<p>The way to fix this is to use <code>variable {α : Type}</code> instead</p>",
        "id": 408929967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702991074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20error/near/408929967\">ha dicho</a>:</p>\n<blockquote>\n<p>The way to fix this is to use <code>variable {α : Type}</code> instead</p>\n</blockquote>\n<p>This answer finally solved the initial problem!</p>",
        "id": 408934818,
        "sender_full_name": "Daniel Dávalos",
        "timestamp": 1702992798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648116\">Daniel Dávalos</span> has marked this topic as resolved.</p>",
        "id": 408934834,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702992804
    }
]