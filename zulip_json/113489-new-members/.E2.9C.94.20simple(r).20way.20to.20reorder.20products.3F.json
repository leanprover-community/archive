[
    {
        "content": "<p>I know <code>mul_assoc</code> and <code>mul_comm</code> can be used to reorder a series of multiplications. Is there a tactic for rewriting a series of multiplications (currently like <code>a * (b*c)*(d*e)</code>)into some other order that I can just specify the order that I want? In this case I want <code>(b*d)*(a*c*e)</code>.</p>",
        "id": 400846443,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699406615
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 400846999,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699406925
    },
    {
        "content": "<p>I'm assuming you're over the reals because of your other questions.</p>",
        "id": 400847025,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699406943
    },
    {
        "content": "<p>Also, not a better solution, but another one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400847578,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699407220
    },
    {
        "content": "<p>So, in your case, you can</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or whatever you have</p>",
        "id": 400847695,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699407268
    },
    {
        "content": "<blockquote>\n<p>I'm assuming you're over the reals because of your other questions.</p>\n</blockquote>\n<p>Correct. <code>ring</code> does do the reassociations (it even writes <code>a*a</code> as <code>a^2</code>!) but I would like to be able to control the order that I get back with so I can use exact matches for trigonometric identities on the parenthesised products.</p>",
        "id": 400847708,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699407274
    },
    {
        "content": "<p>Oooh, that looks nice!</p>",
        "id": 400847738,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699407288
    },
    {
        "content": "<p>For this specific goal you can also use <code>ac_rfl</code> which is more general (it would work in a commutative semigroup).</p>",
        "id": 400847783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699407309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 400883032,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699426897
    },
    {
        "content": "<p>There is also <code>move_mul</code>, but it does not allow to choose how to parenthesize the result, just reorder and remove parentheses.</p>",
        "id": 400890134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699430194
    }
]