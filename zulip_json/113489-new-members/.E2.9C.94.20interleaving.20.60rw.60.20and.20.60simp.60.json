[
    {
        "content": "<p>Given</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Real.sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I want to do <code>by rw [←Real.sinh_zero ]</code> to convert the <code>0</code>s in the expression to <code>sinh  0</code> (I only want the first one, <code>rw</code> rewrites both, but that's a later problem, I tried <code>by nth_rewrite  0 [←Real.sinh_zero ]</code> to no avail, most likely user error). I then want to use <code>simp [Real.sinh_injective]</code> to turn <code>Real.sinh (2*x) = Real.sinh 0)→ x=sinh 0</code> into <code>2*x = 0→ x =sinh 0</code>.</p>\n<p>Is there a way to interleave <code>rw</code> and <code>simp</code>? or can I do the above with just <code>rw</code>.</p>",
        "id": 400635970,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699317997
    },
    {
        "content": "<p>Try <code>nth_rewrite 1</code>?</p>",
        "id": 400636144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699318086
    },
    {
        "content": "<p>That worked, yielding <code>Real.sinh (2 * x) = Real.sinh 0 → x = 0</code></p>",
        "id": 400636316,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699318188
    },
    {
        "content": "<p>I'm still not sure now how to switch from <code>nth_rewrite</code> to <code>simp</code></p>",
        "id": 400636471,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699318256
    },
    {
        "content": "<p>Normally we would not state examples with implications after the colon. If you instead put <code>(h : Real.sinh (2*x) = 0)</code> before the colon then you can do the rewrite at <code>h</code> without having to worry about nth_rewrite, and then you can <code>apply.Real.sinh_injective at h</code>.</p>",
        "id": 400636486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699318259
    },
    {
        "content": "<p>For context, I have <code>Real.sinh (2 * x)</code> is the derivative and I'm trying to prove that <code>x=0</code> is a global minimum, by proving that the zero is the only zero. </p>\n<p>It is natural for me, a Lean noob and definitely not functional programmer, to think about it in terms of the implication above. In this case the <code>example</code> is a code minimisation. The real code is a local hypothesis, where I have the form of the derivative and want to prove that the unique zero occurs at <code>x=0</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- df = Real.sinh (2 * x)</span>\n<span class=\"k\">have</span> <span class=\"n\">hdz</span> <span class=\"o\">:</span> <span class=\"n\">df</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400637531,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699318787
    },
    {
        "content": "<p>Could you give a full example of what you mean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Real.sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"sd\">/--/→ x=0 :=</span>\n<span class=\"sd\">  by nth_rewrite 1 [←Real.sinh_zero ] at h</span>\n</code></pre></div>\n<p>yield and  error at the <code>/--/</code> on <code>h</code>, the <code>by nth_rewrite 1 [←Real.sinh_zero ] at h</code> does successfully transform <code>h</code> to <code>h: Real.sinh (2 * x) = Real.sinh 0</code>, but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Real.sinh_zero</span> <span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">apply.Real.sinh_injective</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>gives <code>unexpected identifier; expected command</code></p>",
        "id": 400639244,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699319618
    },
    {
        "content": "<p>evidently the <code>h →</code> is not necessary. Fixing that remove one error</p>",
        "id": 400645159,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699322968
    },
    {
        "content": "<p>The dot between <code>apply</code> and <code>Real</code> is a typo.</p>",
        "id": 400645782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699323312
    },
    {
        "content": "<p>with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Real.sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Real.sinh_zero</span> <span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Real.sinh_injective</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- error at start of this line.</span>\n</code></pre></div>\n<p>I still get <code>unexpected identifier; expected command</code></p>",
        "id": 400658895,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699329858
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 400659025,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699329960
    },
    {
        "content": "<p>Your indentation is also inconsistent</p>",
        "id": 400659162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699330032
    },
    {
        "content": "<p>Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Real.sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Real.sinh_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Real.sinh_injective</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400659217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699330066
    },
    {
        "content": "<p>And of course you can replace the sorry with linarith.</p>",
        "id": 400659298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699330097
    },
    {
        "content": "<p>Stupid question, why does that work for <code>rw</code> but not for <code>nth_rewrite</code>?</p>",
        "id": 400661369,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699331345
    },
    {
        "content": "<p>and why is that <code>linarith</code> and not <code>apply linarith</code>?</p>",
        "id": 400661601,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699331472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 400664794,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699333517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20interleaving.20.60rw.60.20and.20.60simp.60/near/400661369\">said</a>:</p>\n<blockquote>\n<p>Stupid question, why does that work for <code>rw</code> but not for <code>nth_rewrite</code>?</p>\n</blockquote>\n<p>The change that fixed your issue was moving the position of \"by\" to one line above. Lean is whitespace sensitive. The way you wrote it, Lean was expecting extra indentation like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Real.sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Real.sinh_zero</span> <span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n     <span class=\"n\">apply</span> <span class=\"n\">Real.sinh_injective</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n     <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>However, the Lean/Mathlib convention is to move the <code>by</code> to the line above, obviating the need for extra indentation.</p>",
        "id": 400685421,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699344504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20interleaving.20.60rw.60.20and.20.60simp.60/near/400661601\">said</a>:</p>\n<blockquote>\n<p>and why is that <code>linarith</code> and not <code>apply linarith</code>?</p>\n</blockquote>\n<p>Because linarith is a tactic. You would <code>apply linarith</code> if <code>linarith</code> were a theorem.</p>",
        "id": 400685505,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699344544
    },
    {
        "content": "<blockquote>\n<p>Lean is whitespace sensitive</p>\n</blockquote>\n<p>Oh god.</p>",
        "id": 400685594,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699344583
    },
    {
        "content": "<blockquote>\n<p>Because linarith is a tactic.</p>\n</blockquote>\n<p>Thanks</p>",
        "id": 400685639,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699344599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20interleaving.20.60rw.60.20and.20.60simp.60/near/400661369\">said</a>:</p>\n<blockquote>\n<p>Stupid question, why does that work for <code>rw</code> but not for <code>nth_rewrite</code>?</p>\n</blockquote>\n<p>It does work with <code>nth_rewrite</code>. I turned it into <code>rw</code> because <code>nth_rewrite</code> was not needed at all.</p>",
        "id": 400751581,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699367470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20interleaving.20.60rw.60.20and.20.60simp.60/near/400661601\">said</a>:</p>\n<blockquote>\n<p>and why is that <code>linarith</code> and not <code>apply linarith</code>?</p>\n</blockquote>\n<p><code>linarith</code> is the name of a tactic, it isn't a proof term.</p>",
        "id": 400751640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699367491
    },
    {
        "content": "<p>Oh sorry, for some reason I didn't see Mauricio already answered.</p>",
        "id": 400751906,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699367584
    },
    {
        "content": "<blockquote>\n<p>It does work with nth_rewrite. I turned it into rw because nth_rewrite was not needed at all</p>\n</blockquote>\n<p>It definitely didn't, but I think this was because my indentation was wrong, and did not realise that Lean was whitespace sensitive.</p>",
        "id": 400817100,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699391670
    }
]