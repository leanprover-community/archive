[
    {
        "content": "<p>II'm trying port over my experiences from other languages like Idris to Lean4 and getting fussy errors. Wonder if anyone knows a tip to clarify my confusion.  Suppose I'm taking in two runtime values and want to convert their equality to a runtime proof of equality.  It seems something like this would work, but the first line complains about x=y type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsEq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">)</span>\n   <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n       <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n               <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n               <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n       <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n               <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n               <span class=\"bp\">|</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n                  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">IsEq</span> <span class=\"n\">k</span> <span class=\"n\">j</span>\n                  <span class=\"k\">match</span> <span class=\"n\">res</span> <span class=\"k\">with</span>\n                    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">congFun</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">pf</span>\n                    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>Also not sure I've got <code>congFun</code> right either.</p>\n<p>Separately, I assume something like this is in the library too,  in fact it wouldn't surprise me to learn that with the right number of tweaks and imported tactics something super generous like the following exists.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsEq</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">rfl</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>Please let me know if that's true.</p>\n<p>but when I go looking for library docs I seem to be lead to books with author curated topics rather than a full list of things for Lean 4.  If such a link exists I'd be happy to know.</p>",
        "id": 367714617,
        "sender_full_name": "James B. Wilson",
        "timestamp": 1687196881
    },
    {
        "content": "<p>If you want a runtime proof of equality, that's what <code>Decidable</code> (and the abbreviation <code>DecidableEq</code>) are for. There is a <code>DecidableEq Nat</code> instance, and with it you can get proofs and disproofs of equality. Just to mention it, if you want to get the <code>Bool</code>, erasing the proof, there's <code>decide</code>.</p>",
        "id": 367715832,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687197162
    },
    {
        "content": "<p>The immediate error you're running into is that <code>Option</code> is set up only for types in a <code>Type _</code> universe, but <code>x = y : Prop</code>. Propositions are erased at runtime, and I think the point is that <code>Option</code> is meant to be used for computations. If you find yourself needing to using propositions anyway, there's <code>PLift</code>, like in <code>Option (PLift (x = y))</code></p>",
        "id": 367716494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687197347
    },
    {
        "content": "<p>Here's your code using <code>Decidable</code>, and filling in the <code>isFalse</code> cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsEq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n          <span class=\"bp\">|</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"n\">Nat.noConfusion</span>\n  <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"n\">Nat.noConfusion</span>\n          <span class=\"bp\">|</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">IsEq</span> <span class=\"n\">k</span> <span class=\"n\">j</span>\n            <span class=\"k\">match</span> <span class=\"n\">res</span> <span class=\"k\">with</span>\n              <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">pf</span><span class=\"o\">)</span>\n              <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pf</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 367717355,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687197575
    },
    {
        "content": "<p>That's just for illustration though. There's already such an instance, as this indicates:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"c1\">-- fun x y ↦ instDecidableEqNat x y</span>\n</code></pre></div>",
        "id": 367717577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687197642
    },
    {
        "content": "<p>This was and excellently informative response, thanks for all the pointers (and neat icon <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> )</p>",
        "id": 367718022,
        "sender_full_name": "James B. Wilson",
        "timestamp": 1687197746
    },
    {
        "content": "<p>You might also like to know that <code>match</code> supports multiple discriminators:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsEq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"n\">Nat.noConfusion</span>\n  <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"n\">Nat.noConfusion</span>\n  <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">IsEq</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">pf</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pf</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 367718406,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687197849
    },
    {
        "content": "<p>For what it's worth, you can write your original code as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsEq</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">PLift.up</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 367720406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687198450
    },
    {
        "content": "<p>The two tricks here are:</p>\n<ul>\n<li><code>PLift</code> promotes <code>x = y</code> into a (vacuous)<code>Type</code>, which allows you to pass it to <code>Option</code></li>\n<li><code>if h : x = y</code> lets you access the proof of a condition within an <code>if</code></li>\n</ul>",
        "id": 367720572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687198499
    },
    {
        "content": "<p>It might also be helpful to compare what Kyle wrote to what appears in the <a href=\"https://github.com/leanprover/lean4/blob/2348fb37d380bb11f9d5bfee5be5d6004eaed589/src/Init/Prelude.lean#L1495\">prelude</a></p>",
        "id": 367721339,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687198746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Fussy.20equality/near/367720572\">said</a>:</p>\n<blockquote>\n<ul>\n<li><code>if h : x = y</code> lets you access the proof of a condition within an <code>if</code></li>\n</ul>\n</blockquote>\n<p>In particular, <code>if</code> is syntactic sugar around using <code>Decidable</code>, and <code>h</code> is the name given to the proof inside the <code>isTrue</code> or <code>isFalse</code> constructor.</p>",
        "id": 367722062,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687198960
    },
    {
        "content": "<p>And of course <code>def IsEq (x y:Nat) : Decidable (x = y)</code> is a far more useful statement because <code>Option (PLift (x = y))</code> doesn't actually promise to be <code>some h</code> when <code>x = y</code> is true, whereas <code>Decidable (x = y)</code> does</p>",
        "id": 367722245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687199017
    },
    {
        "content": "<p>Re the prelude, the actual <code>DecidableEq</code> appears <a href=\"https://github.com/leanprover/lean4/blob/2348fb37d380bb11f9d5bfee5be5d6004eaed589/src/Init/Prelude.lean#L1529\">at this line</a>. It uses the code linked to by <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> and then uses some lemmas that say that <code>Nat</code>'s <code>BEq</code> (which is some boolean-valued operator that may or may not compute equality, denoted <code>==</code>) actually does capture mathematical equality (denoted <code>=</code>). In the prelude there's no notation, so <code>==</code> is <code>beq</code> and <code>=</code> is <code>Eq</code>.</p>",
        "id": 367722921,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687199191
    },
    {
        "content": "<p>To be certain then, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\neg p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">p</span></span></span></span> in <code>isFalse (h : ¬p)</code> found in the <code>Decideable</code> type class unwinds is Lean shorthand for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>→</mo><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">p\\rightarrow \\bot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">⊥</span></span></span></span>, correct?  So I can use it in intuitionisitc models should I so choose(Not sure what empty type is in lean but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">\\bot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">⊥</span></span></span></span> is that in what I just wrote.)</p>",
        "id": 367748304,
        "sender_full_name": "James B. Wilson",
        "timestamp": 1687207663
    },
    {
        "content": "<p>(And <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> your icon is note worthy in its own way.  Thanks for the added clarity.)</p>",
        "id": 367748409,
        "sender_full_name": "James B. Wilson",
        "timestamp": 1687207693
    },
    {
        "content": "<p>Yes, <code>¬p</code> is shorthand for <code>p → False</code></p>",
        "id": 367748535,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687207754
    },
    {
        "content": "<p>But <code>False</code> is not the empty type, it's the empty <code>Prop</code>.</p>",
        "id": 367748579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687207769
    },
    {
        "content": "<p>Ah, good distinction (well not necessarily good, but good to know).</p>",
        "id": 367748754,
        "sender_full_name": "James B. Wilson",
        "timestamp": 1687207833
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=False#doc\">docs4#False</a> v <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Empty#doc\">docs4#Empty</a></p>",
        "id": 367749061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687207975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"624152\">James B. Wilson</span> has marked this topic as resolved.</p>",
        "id": 367947587,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687271223
    }
]