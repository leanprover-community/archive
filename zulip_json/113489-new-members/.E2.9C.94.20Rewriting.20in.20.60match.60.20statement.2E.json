[
    {
        "content": "<p>I am seeing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">x_lt_y</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">compare</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Ordering.lt</span> <span class=\"o\">:=</span> <span class=\"n\">compare_lt_iff_lt.mpr</span> <span class=\"n\">x_lt_y</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">compare</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">true</span> <span class=\"bp\">→</span>\n  <span class=\"n\">p</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and <code>rw [e]</code> refuses to rewrite <code>compare x y</code> in the goal. What am I doing wrong? Could it be that the two <code>compare x y</code> are actually different? If so, how do I see the full information about them (something like <code>Show Implicits</code> in Coq)?</p>",
        "id": 396835126,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697439480
    },
    {
        "content": "<p>You can get the full information with <code>set_option pp.explicit true</code>. Maybe you are having issues because <code>rw</code> can't handle binders so well? I would try to either <code>intro h; rw[e] at h</code> or <code>simp only [e]</code></p>",
        "id": 396835768,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697439745
    },
    {
        "content": "<p>You usually can't rewrite a match discriminant because of type dependencies</p>",
        "id": 396835921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697439827
    },
    {
        "content": "<p>Yeah, that sounds plausible. What's the cure?</p>",
        "id": 396835998,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697439848
    },
    {
        "content": "<p>So instead split and automatically handle all of the cases?</p>",
        "id": 396836023,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697439859
    },
    {
        "content": "<p><code>split</code></p>",
        "id": 396836030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697439862
    },
    {
        "content": "<p>Does <code>simp</code> do the rewrite?</p>",
        "id": 396836103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697439908
    },
    {
        "content": "<p>Nope, <code>simp</code> is stuck, and also none of <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> 's suggestions work. But I am finding that <code>split</code> is my new favorite tactic.</p>",
        "id": 396836213,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697439962
    },
    {
        "content": "<p>Uhm, how do I name the variables introduces by <code>split</code>?</p>",
        "id": 396836959,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697440249
    },
    {
        "content": "<p>that's a feature request <span aria-label=\"zany face\" class=\"emoji emoji-1f92a\" role=\"img\" title=\"zany face\">:zany_face:</span></p>",
        "id": 396837023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697440274
    },
    {
        "content": "<p>Ah, <code>case h_1 x y z =&gt;</code> instead of <code>case h_1 x y z:</code></p>",
        "id": 396837047,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697440284
    },
    {
        "content": "<p>I usually just do <code>next</code> or <code>case</code></p>",
        "id": 396837067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697440291
    },
    {
        "content": "<p>Alas, I have an instance confusion. There are two instances of <code>Ord</code> floating around.</p>",
        "id": 396837406,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697440391
    },
    {
        "content": "<p>oh that's not good</p>",
        "id": 396837466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697440408
    },
    {
        "content": "<p>I find it kind of ironic that you in particular would call <code>split</code> your favorite tactic given its <a href=\"https://github.com/leanprover/lean4/issues/2414\">dark secret</a></p>",
        "id": 396837538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697440432
    },
    {
        "content": "<p>(Of course I knew there was dark magic behind a tactic that could take my goal and do what it did.) Do I need to import something for <code>set_option</code> to work? Is this a top-level command?</p>",
        "id": 396837809,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697440531
    },
    {
        "content": "<p>It's a built-in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">statement</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 396838350,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697440746
    },
    {
        "content": "<p><code>set_option</code> is a command, a term and a tactic</p>",
        "id": 396838931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697440959
    },
    {
        "content": "<p>so you can basically use it anywhere</p>",
        "id": 396838979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697440973
    },
    {
        "content": "<p>It was kind of hard to guess the <code>in</code> part. Anyhow, lesson of the day: don't assume both instances <code>[Ord α]</code> and <code>[LinearOrder α]</code>. Once I removed <code>[Ord α]</code> the original rewrite worked.</p>",
        "id": 396841046,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697441782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 396841066,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697441793
    }
]