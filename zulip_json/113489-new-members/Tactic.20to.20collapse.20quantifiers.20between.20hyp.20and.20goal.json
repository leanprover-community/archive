[
    {
        "content": "<p>Is there a tactic that can make use of repeated <code>intro</code>+<code>specialize</code> and <code>cases</code>+<code>use</code> to get rid of identical quantifiers (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\forall</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">∀</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\exists</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">∃</span></span></span></span>) between a hypothesis and the goal?</p>\n<p>For example, in the tutorial problem 78</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">continuous_opposite</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_at_pt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>you start with the state (after some unfolding and omitting unecessary context)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span> <span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span> <span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm looking for some tactic to condense the operations</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n<span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">hδ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n<span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">hδ</span><span class=\"o\">],</span>\n<span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>since these just serve to eliminate the common beginning between <code>h</code> and <code>⊢</code> (<code>∀ (ε : ℝ), ε &gt; 0 → (∃ (δ : ℝ) (H : δ &gt; 0), ∀ (x : ℝ),</code>).</p>",
        "id": 361154715,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1685044584
    },
    {
        "content": "<p>What does <code>convert h using 3</code> do?</p>",
        "id": 361157307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685045495
    },
    {
        "content": "<p>(if it's easy to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> then this would make the question easier to answer)</p>",
        "id": 361157496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685045573
    },
    {
        "content": "<p>Maybe some variant of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">iff.mp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iff_iff_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>etc etc could be turned into a tactic.</p>",
        "id": 361164795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685048198
    },
    {
        "content": "<p>In this particular case, the answer is just to use <code>simp_rw</code></p>",
        "id": 361165216,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685048340
    },
    {
        "content": "<p>The problem with this approach is that you have to manually write <code>suffices : \\forall x x₀, | f x - f x₀ | = | - f x - - f x₀ |, by simp_rw [this]</code> rather than letting the computer work it out.</p>",
        "id": 361168357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685049550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactic.20to.20collapse.20quantifiers.20between.20hyp.20and.20goal/near/361157307\">said</a>:</p>\n<blockquote>\n<p>What does <code>convert h using 3</code> do?</p>\n</blockquote>\n<p>I think I made mathlib4's <code>convert</code> tactic be able to do this, but the mathlib3 one doesn't know how.</p>",
        "id": 361169471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685050035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"620085\">@Ricardo Prado Cunha</span> I <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Automatic.20intro.2Fcases.2Fspecialize.2Fuse.20dance/near/203767478\">had the same question</a> and wrote a tactic to do some of that, but I never polished it for mathlib because after I did the tutorials I didn't really have so many of these nested quantifiers to deal with anymore in my own work.</p>",
        "id": 361169718,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685050157
    },
    {
        "content": "<p>This doesn't really answer your question Ricardo since this is for Lean 4, but I wanted to check that mathlib4's <code>convert</code> does work here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"mi\">9</span> <span class=\"k\">with</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">x₀: ℝ</span>\n<span class=\"cm\">f: ℝ → ℝ</span>\n<span class=\"cm\">h: ∀ (ε : ℝ), ε &gt; 0 → ∃ δ H, ∀ (x : ℝ), abs (x - x₀) ≤ δ → abs (f x - f x₀) ≤ ε</span>\n<span class=\"cm\">ε: ℝ</span>\n<span class=\"cm\">hε: ε &gt; 0</span>\n<span class=\"cm\">δ: ℝ</span>\n<span class=\"cm\">hδ: δ &gt; 0</span>\n<span class=\"cm\">x: ℝ</span>\n<span class=\"cm\">hx: abs (x - x₀) ≤ δ</span>\n<span class=\"cm\">⊢ abs (-f x - -f x₀) = abs (f x - f x₀)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 361170602,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685050522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactic.20to.20collapse.20quantifiers.20between.20hyp.20and.20goal/near/361169718\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"620085\">Ricardo Prado Cunha</span> I <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Automatic.20intro.2Fcases.2Fspecialize.2Fuse.20dance/near/203767478\">had the same question</a> and wrote a tactic to do some of that, but I never polished it for mathlib because after I did the tutorials I didn't really have so many of these nested quantifiers to deal with anymore in my own work.</p>\n</blockquote>\n<p>Off-rails comment: Natural examples rarely involve more than four (exposed) alternated quantifiers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi mathvariant=\"normal\">∃</mi><mi mathvariant=\"normal\">∀</mi><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\forall\\exists\\forall\\exists</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">∀∃∀∃</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi mathvariant=\"normal\">∀</mi><mi mathvariant=\"normal\">∃</mi><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\exists\\forall\\exists\\forall</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">∃∀∃∀</span></span></span></span>.  At the same time, it is paradoxical that one of the first formal definitions (that of limit) already involves three. A neat pedagogical issue.</p>",
        "id": 361171030,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1685050695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactic.20to.20collapse.20quantifiers.20between.20hyp.20and.20goal/near/361164795\">said</a>:</p>\n<blockquote>\n<p>Maybe some variant of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">iff.mp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iff_iff_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>etc etc could be turned into a tactic.</p>\n</blockquote>\n<p>this should be a good application of <code>congrm</code> (without the first two lines)</p>",
        "id": 361175142,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685052601
    },
    {
        "content": "<p>adding the first two lines could be a macro if this appears more often</p>",
        "id": 361175264,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685052649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactic.20to.20collapse.20quantifiers.20between.20hyp.20and.20goal/near/361157307\">said</a>:</p>\n<blockquote>\n<p>What does <code>convert h using 3</code> do?</p>\n</blockquote>\n<p>Changes the goal to <code>(λ (x : ℝ), - f x) = f</code> (i.e., <code>-f = f</code>). Changing the <code>3</code> to different values doesn't seem to help.</p>\n<p>Also will try to make the MWE in a bit.</p>",
        "id": 361190675,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1685062387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactic.20to.20collapse.20quantifiers.20between.20hyp.20and.20goal/near/361169718\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"620085\">Ricardo Prado Cunha</span> I <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Automatic.20intro.2Fcases.2Fspecialize.2Fuse.20dance/near/203767478\">had the same question</a> and wrote a tactic to do some of that, but I never polished it for mathlib because after I did the tutorials I didn't really have so many of these nested quantifiers to deal with anymore in my own work.</p>\n</blockquote>\n<p>Makes since. I did try to look for other questions asking the same thing before posting this but I missed yours. I guess if this doesn't really show up that much in practice then it's not that pressing of a problem, and if it's available in mathlib4 that's probably good enough.</p>",
        "id": 361193841,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1685063352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactic.20to.20collapse.20quantifiers.20between.20hyp.20and.20goal/near/361175142\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Tactic.20to.20collapse.20quantifiers.20between.20hyp.20and.20goal/near/361164795\">said</a>:</p>\n<blockquote>\n<p>Maybe some variant of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">iff.mp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iff_iff_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>etc etc could be turned into a tactic.</p>\n</blockquote>\n<p>this should be a good application of <code>congrm</code> (without the first two lines)</p>\n</blockquote>\n<p><code>congrm</code> (after reverting and refining into an iff) does work, but it requires writing out the entire common part of the goal, which is quite cumbersome for this usecase.</p>",
        "id": 361195356,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1685063682
    },
    {
        "content": "<p>Here is the MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous_at_pt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_at_pt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">hδ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">hδ</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">abs_sub_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(definition of <code>continuous_at_pt</code> taken from the tutorial). Basically I'm looking for an easier way to do those first 6 tactics (up to the last <code>specialize</code>), as I've found this to be a recurring pattern when dealing with limits and the like.</p>",
        "id": 361197422,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1685064218
    }
]