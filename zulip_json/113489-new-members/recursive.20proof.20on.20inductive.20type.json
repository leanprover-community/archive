[
    {
        "content": "<p>hi all, </p>\n<p>I have this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">room</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Single</span> <span class=\"o\">:</span> <span class=\"n\">room</span>\n<span class=\"bp\">|</span> <span class=\"n\">Double</span> <span class=\"o\">:</span> <span class=\"n\">room</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">room</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">room</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">process</span> <span class=\"o\">:</span> <span class=\"n\">room</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">singles_to_double</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">room</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">process</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">process</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">process</span> <span class=\"o\">(</span><span class=\"n\">room.Double</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- assume we have a proof for this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">proof_process_works</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">room</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">process</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">room.Single</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- assume we have this proof</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">room.Double</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">singles_to_double</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- what do I do here?</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In the <code>proof_process_works</code> lemma, assume we have a proof for <code>room.Single</code>. Now I want to create a proof for <code>room.Double</code> by using the fact that we can kind of split this up with <code>singles_to_double</code>. However, we now get a new goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">process</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">process</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>I can perform <code>cases</code> on <code>x</code> and <code>y</code>, but this process repeats infinitely. Can I make use of the fact that eventually this process will reach base cases of <code>room.single</code> and then use the fact that we already have a proof provided in the first <code>match</code> statement? What do I do here? </p>\n<p>Thank you for reading and I wish all of you the best day possible</p>",
        "id": 324450723,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1675005571
    },
    {
        "content": "<p>this is induction</p>",
        "id": 324451216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675005838
    },
    {
        "content": "<p>you should do <code>induction r</code>, or alternatively do a recursive proof referencing <code>proof_process_works</code> in the subgoals</p>",
        "id": 324451295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675005865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/recursive.20proof.20on.20inductive.20type/near/324451295\">said</a>:</p>\n<blockquote>\n<p>you should do <code>induction r</code>, or alternatively do a recursive proof referencing <code>proof_process_works</code> in the subgoals</p>\n</blockquote>\n<p>Which tactic do I use to refrence <code>proof_process_works</code> in a subgoal? I tried apply but it gives me an error saying it does not recognize <code>proof_process_works</code>. Sorry for the noob question im kind of new. Im using lean 3</p>",
        "id": 324451569,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1675005983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/recursive.20proof.20on.20inductive.20type/near/324451295\">said</a>:</p>\n<blockquote>\n<p>you should do <code>induction r</code>, or alternatively do a recursive proof referencing <code>proof_process_works</code> in the subgoals</p>\n</blockquote>\n<p>So instead of pattern matching I start the proof with <code>induction r</code> right?</p>",
        "id": 324451823,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1675006086
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">proof_process_works1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">room</span><span class=\"o\">),</span> <span class=\"n\">process</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">room.Single</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">room.Double</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">singles_to_double</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">proof_process_works1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">proof_process_works1</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">proof_process_works2</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">room</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">process</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">singles_to_double</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">IH1</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">IH2</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 324452144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675006245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/recursive.20proof.20on.20inductive.20type/near/324452144\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">proof_process_works1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">room</span><span class=\"o\">),</span> <span class=\"n\">process</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">room.Single</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">room.Double</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">singles_to_double</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">proof_process_works1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">proof_process_works1</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you! <br>\nOne question, what does the notatin <code>_ _ ⟨proof_process_works1 x, proof_process_works1 y⟩</code> do exactly? I read it as it filling in the results of the things between the angle brackets in the <code>_</code> placeholders. Is that correct?</p>",
        "id": 324452786,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1675006538
    },
    {
        "content": "<p>The <code>_ _</code> are placeholders for <code>x y</code></p>",
        "id": 324453389,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675006813
    },
    {
        "content": "<p>Those are three arguments to <code>singles_to_doubles</code>, and the underscores are \"lean can figure this out\"</p>",
        "id": 324453411,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675006826
    },
    {
        "content": "<p>Since you made them explicit arguments to <code>singles_to_double</code>.</p>",
        "id": 324453442,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675006833
    },
    {
        "content": "<p>do these angled brackets have a special meaning? ⟨ and ⟩</p>",
        "id": 324454349,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1675007189
    },
    {
        "content": "<p>They're a generic constructor notation when there's only one constrictor</p>",
        "id": 324455366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675007646
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> chapters 7 and 8 is maybe what you want to be reading</p>",
        "id": 324455446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675007683
    }
]