[
    {
        "content": "<p>I would like to show a deterministic version of the Markov inequality. If <code>x</code> and <code>a</code> in the reals with <code>a</code> greater than zero, then the indicator for  x ≥ a is less than x / a. My attempt is below </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and I'm getting the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I think the problem is that left side of the inequality is being seen as a set, rather than either the value zero or one. However, I'm not sure how to proceed. Would someone please provide a hint?</p>",
        "id": 407330520,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702333689
    },
    {
        "content": "<p>in Lean if you write a &lt;= b then for this to make sense a and b have to have the same \"Type\", i.e. they have to \"be the same kind of thing\". In your example you seem to be claiming that a set of reals is &lt;= a real number, and these have different types, so Lean is complaining that one it read last (the real number) doesn't have the type it expected.</p>\n<p>So what actually do you mean by the question? I don't know this area at all but I do understand why Lean doesn't understand what you're writing,</p>",
        "id": 407331563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702334160
    },
    {
        "content": "<p>OK, I want a and x to be numbers in the set of real, not the entire set.  I'm expecting that if x \\ge a then the set indicator will return 1, which will be less than or equal to x / a. </p>\n<p>If I revise to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then I end up with the syntax error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"sc\">':'</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"o\">:=</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">where'</span> <span class=\"n\">or</span> <span class=\"sc\">'|'</span>\n</code></pre></div>\n<p>I'm still missing something.</p>",
        "id": 407332817,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702334783
    },
    {
        "content": "<p>Like the message says, the immediate problem is the unexpected colon.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c1\">--                                                   here ^</span>\n</code></pre></div>\n<p>Beyond that, I don't think the \"set indicator\" notation you're alluding to exists. I could be wrong.<br>\nAlso, <code>ℝ</code> is not a set and does not have members (<code>∈</code>). It is a type, and you use the colon (<code>:</code>) to introduce variables of that type and to ascribe the type to values.<br>\nFinally, I don't think the thing you want to prove is true in Lean, without a slightly stronger hypothesis.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Eq.ge</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">says</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_le_one</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">div_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_le.mpr</span> <span class=\"n\">Real.zero_lt_one</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 407336135,
        "sender_full_name": "Richard Copley",
        "timestamp": 1702336494
    },
    {
        "content": "<p>This is super helpful. Can you tell me how to read the second colon in the example? Before I was reading everything after the colon as the statement of the proposition. This tells me I need to revise.</p>\n<p>Thanks for the clarification on  ℝ.</p>\n<p>Can you tell me what the set_option line does?</p>\n<p>Also, can you help me parse the example? I don't understand what is being negated with ¬ . </p>\n<p>Thanks very much.</p>",
        "id": 407338326,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702337705
    },
    {
        "content": "<p>One more thing, is there a way to denote the set of reals less than a constant a? The indicator functions in the Set module do not behave as I would expect them to.</p>",
        "id": 407338577,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702337875
    },
    {
        "content": "<p>I think you might find it even more super helpful to read the first few sections of <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> so you understand the basics of how to write mathematics in lean. That will answer your question above and probably many others that you'll have</p>",
        "id": 407338650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702337912
    },
    {
        "content": "<p>The set is <code>{ x | x &lt; a }</code>.</p>",
        "id": 407338711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702337955
    },
    {
        "content": "<p>If you want the \"set indicator\", that's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.indicator#doc\">docs#Set.indicator</a></p>",
        "id": 407341366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702339586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422731\">Michael Kane</span> <a href=\"#narrow/stream/113489-new-members/topic/Comparing.20indicator.20with.20real/near/407338326\">said</a>:</p>\n<blockquote>\n<p>This is super helpful. Can you tell me how to read the second colon in the example? Before I was reading everything after the colon as the statement of the proposition. This tells me I need to revise.</p>\n</blockquote>\n<p>The second colon being the one in \"<code>(a x : ℝ)</code>\"? You read it as \"is of type\" or \"has type\". It says that the type of each of the variables <code>a</code> and <code>x</code> is <code>ℝ</code>.</p>\n<blockquote>\n<p>Thanks for the clarification on  ℝ.</p>\n<p>Can you tell me what the set_option line does?</p>\n</blockquote>\n<p>I'm sorry, I should have deleted that. It influences the pretty-printing in the infoview window. It isn't something I intended to introduce to you now.</p>\n<blockquote>\n<p>Also, can you help me parse the example? I don't understand what is being negated with ¬ . </p>\n</blockquote>\n<p>The thing being negated is the thing inside the (matching) parentheses after the not sign, that is, <code>∀ (a x : ℝ) (h0 : a ≥ 0), (if a ≤ x then 1 else 0) ≤ x / a</code> which says, roughly, \"for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">R</mi></mrow><annotation encoding=\"application/x-tex\">ℝ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord amsrm\">R</span></span></span></span>, for all <code>h0</code> of type <code>a ≥ 0</code> (namely for all proofs \"h0\" of the proposition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a ≥ 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>), the value of the expression <code>(if a ≤ x then 1 else 0)</code> is less than or equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi mathvariant=\"normal\">/</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">x/a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">a</span></span></span></span>\".<br>\nI should not have written it that way. It is confusing. A better rendition, using the \"→\" to denote implication, would have been: <code>∀ (a x : ℝ), a ≥ 0 → (if a ≤ x then 1 else 0) ≤ x / a</code>. The reason that these are in fact the same is fundamental to the way Lean works, but I daresay it's not the most important thing to understand in the beginning.</p>\n<blockquote>\n<p>Thanks very much.</p>\n</blockquote>\n<p>You're welcome. Good luck and have fun! I agree with <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> that it is a good idea to use introductory material from a book such as <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> to get started.</p>",
        "id": 407342543,
        "sender_full_name": "Richard Copley",
        "timestamp": 1702340226
    },
    {
        "content": "<p>Thanks very much Richard. I will take a closer look.</p>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I did try the indicator but I don't understand how it is parameterized. I want to be able to say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">indicator</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but this gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">LE</span> <span class=\"o\">((</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.62</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.62</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>From the documentation, the indicator function takes 3 parameters, a set a function, and an argument to the function. The set specification of a set that I have provided is not correct but I don't know what the indicator function is expecting.</p>",
        "id": 407345726,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702341847
    },
    {
        "content": "<p>Like you said: the documentation says it takes 3 arguments. You passed one so got a completely nonsensical error message!</p>",
        "id": 407346309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702342118
    },
    {
        "content": "<p>If you have a function <code>foo</code> that takes three arguments, but you only know the first one, write <code>foo x _ _</code> not <code>foo x</code>; lean will give you a much more helpful error</p>",
        "id": 407346435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702342185
    },
    {
        "content": "<p>Unfortunately, it only gives a different error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.1691</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 407348678,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702343101
    },
    {
        "content": "<p>Can you show what you wrote and the full error?</p>",
        "id": 407350272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702343926
    },
    {
        "content": "<p>Certainly. Note the error occurs in the example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">indicator</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">indicator</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I did try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">indicator</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>thinking maybe the set it wants is the domain and the function is the boolean. It gives the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Zero</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Based on the documentation, I'm not sure what a Zero Prop is.</p>",
        "id": 407350848,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702344233
    },
    {
        "content": "<p>Your first example fails because you forgot the RHS of the inequality that you previously had</p>",
        "id": 407352237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702344986
    },
    {
        "content": "<p>It's like trying to prove <code>example : 37 := sorry</code>; <code>37</code> is not a type so it doesn't make any sense to put it (by itself) after a colon</p>",
        "id": 407352326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702345060
    },
    {
        "content": "<blockquote>\n<p>I'm expecting that if x \\ge a then the set indicator will return 1, which will be less than or equal to x / a.</p>\n</blockquote>\n<p>Apologies if I'm misunderstanding, but are you just trying to prove something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>because if that's the case, there's no reason to involve sets here.</p>",
        "id": 407354937,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702346493
    },
    {
        "content": "<p>Sorry, that was my mistake. Now the message is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"sc\">'x'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n\n<span class=\"n\">ax</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℝ</span>\n\n<span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n</code></pre></div>\n<p>My guess is that first argument is the domain. When I try the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">indicator</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span>  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Zero</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>again.</p>",
        "id": 407355029,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702346523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span>  That is right. The reason I want to do this with the indicator functions is that eventually want x to be a measurable set I use with probability measures.</p>",
        "id": 407355600,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702346668
    },
    {
        "content": "<p>Indicators essentially make it easier to prove probability inequalities over the reals.</p>",
        "id": 407355969,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702346868
    },
    {
        "content": "<p>Someone else should step in here because I'm not familiar with this domain, but I'm going to guess you're trying to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">indicator</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407358101,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702347732
    },
    {
        "content": "<p>The second argument to <code>indicator</code> is the function that determines the result when <code>x</code> is in the set <code>{ k | k ≥ a }</code> (i.e. when <code>x ≥ a</code>). It sounded like you wanted the indicator to return 1 when the value is in the set, and I think you can get away with just passing in <code>1</code> as the \"function\", as I believe Lean will coerce that to a constant function that returns 1.</p>",
        "id": 407359406,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702348065
    },
    {
        "content": "<p>OK. This makes sense. One question about your code, you used k as the set indicator parameter. If I call it x, do you know if it is explicitly bound to the x variable defined above or should it be thought of as a \"dummy\" variable, that is parameterized by the third parameter of the indicator function?</p>",
        "id": 407361780,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702348709
    },
    {
        "content": "<p>If I understand you correctly, <code>k</code> should be understood as a dummy variable, in the sense that it doesn't reference anything outside of the set definition. If you changed it to <code>x</code>, it wouldn't be bound to the other <code>x</code> value.</p>",
        "id": 407362786,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702349001
    },
    {
        "content": "<p>Got it. Thanks very much.</p>",
        "id": 407362863,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702349023
    },
    {
        "content": "<p>No problem!</p>",
        "id": 407362974,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702349049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422731\">@Michael Kane</span> BTW, <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> had a good point... you should probably strengthen your hypothesis from <code>a ≥ 0</code> to <code>a &gt; 0</code> or else you'll end up trying to prove something that isn't actually true (which can lead to some frustration).</p>",
        "id": 407370503,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702351499
    },
    {
        "content": "<p>Good point. Thanks again. I'll try to finish this up tomorrow, post, and mark as resolved.</p>\n<p>Once again, this has been extremely helpful.</p>",
        "id": 407370751,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702351619
    },
    {
        "content": "<p>(Please don't mark zulip threads as resolved)</p>",
        "id": 407412427,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702366740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I thought thread resolution was common here... is this behavior discouraged? It seems like a good way to mark which threads no longer need attention.</p>",
        "id": 407555737,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702411265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> it happens, but we discourage it because it breaks links to the thread, which is annoying. We would turn the feature off, but that's unfortunately not an option we can toggle.</p>",
        "id": 407557302,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702411685
    },
    {
        "content": "<p>My experience is that when people mark threads as being resolved, it makes them re-appear on the \"recent conversations\" list, leading to more attention rather than less.</p>\n<p>Usually it's clear when someone's question has been answered in a thread, and if there's been discussion but no resolution, someone can keep the discussion going with a followup question -- which is good because it helps everyone who might want to help know the current context. I myself don't take whether a thread is \"resolved\" into account to determine whether it's resolved.</p>\n<p>Sometimes people mark a thread as resolved if they answer their own question, but it's better if they explain what they figured out rather that end the thread with the low-information-content \"resolved\".</p>",
        "id": 407557466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702411745
    },
    {
        "content": "<p>The \"resolved\" feature appeared one day, and there is no way to disable it.</p>",
        "id": 407557727,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702411830
    },
    {
        "content": "<p>Got it, good to know!</p>",
        "id": 407557824,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702411867
    },
    {
        "content": "<p>No problem! (And of course these are my own opinions. I only speak for the community as far as no one responds with a counter-argument for why they actually like \"resolved\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 407558177,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702411988
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I thought I might have heard that Zulip fixed the breaking links problem, but I haven't looked into it. If you've noticed broken links in the last couple months, then I don't know what I was remembering.)</p>",
        "id": 407558253,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702412015
    },
    {
        "content": "<p>Ah, I have not checked in recent months, I'm just regurgitating the prior wisdom.</p>",
        "id": 407558626,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702412132
    },
    {
        "content": "<p>In case it is helpful, the solution to the problem described above is shown below. I don't claim it is the best solution or that it makes the best use of mathlib4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_div_ge_one</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">div_le_div</span> <span class=\"n\">h3</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">div_self</span> <span class=\"n\">h5</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ind_x_ge_a</span>  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">indicator</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">indicator</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">indicator_of_mem</span> <span class=\"n\">h2</span> <span class=\"mi\">1</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">is_div_ge_one</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_div_lt_one</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">div_nonneg</span> <span class=\"n\">h1</span> <span class=\"n\">h3</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ind_not_x_ge_a</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">indicator</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">indicator</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">indicator_of_not_mem</span> <span class=\"n\">h1</span> <span class=\"mi\">1</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">is_div_lt_one</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">h3</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">deterministic_markov_inequality</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">indicator</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">if</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"k\">then</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ind_x_ge_a</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">h1</span> <span class=\"n\">hp</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ind_not_x_ge_a</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">hp</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 407834881,
        "sender_full_name": "Michael Kane",
        "timestamp": 1702513386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Comparing.20indicator.20with.20real/near/407558253\">said</a>:</p>\n<blockquote>\n<p>(<span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> I thought I might have heard that Zulip fixed the breaking links problem, but I haven't looked into it. If you've noticed broken links in the last couple months, then I don't know what I was remembering.)</p>\n</blockquote>\n<p>I think thread links are still broken, but those are useless anyway as they go to the end of the thread. Message links definitely work correctly despite resolution or renaming</p>",
        "id": 407837290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702514589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422731\">@Michael Kane</span> FYI you can delete every <code>by exact</code> you've written in that proof, as it's unnecessary. <code>by</code> takes you into tactic mode and <code>exact</code> takes you right back out of it. <code>by exact X</code> is the same thing as just <code>X</code>.</p>",
        "id": 407853443,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702521674
    }
]