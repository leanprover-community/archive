[
    {
        "content": "<p>Hello everyone,<br>\nI am trying to prove different limits on \\R using filters.  I unfortunately haven't been able to prove anything other than these simple limits.<br>\nRight now, my first goal is just to show lim x-&gt;0 x^2 = 0, but as soon as my function is no longer just x, I can't move forward. <br>\nI have seen work material where limits are proved using new definitions such as <br>\ndef tendsto (a : ‚Ñï ‚Üí ‚Ñù) (t : ‚Ñù) : Prop :=‚àÄ Œµ &gt; 0, ‚àÉ B : ‚Ñï, ‚àÄ n, B ‚â§ n ‚Üí |a n - t| &lt; Œµ in ImperialCollegeLondon/formalising-mathematics-2022. <br>\nSo I guess my question is, how do I transform  tendsto (Œª (x : ‚Ñù),  f(x) ) (nhds (a:‚Ñù) ) (nhds (b:‚Ñù)) into something like<br>\n‚àÄ Œµ &gt; 0, ‚àÉ Œ¥ &gt; 0, ‚àÄ (x:‚Ñù), 0&lt;|x - p| &lt; Œ¥  ‚Üí |f(x) - L| &lt; Œµ without making my own definition and simply working with the theorems for filters, maps, etc. <br>\nLast, but not least, thank you for letting me join this community! Excited to improve my math skills using Lean.</p>\n<p>import tactic<br>\nimport topology.basic<br>\nimport analysis.special_functions.exp_deriv </p>\n<p>open set<br>\nopen real<br>\nopen filter</p>\n<p>namespace my_work</p>\n<p>noncomputable theory</p>\n<p>lemma my_limit1 (x:‚Ñù ) (y:‚Ñù ) (f : ‚Ñù ‚Üí ‚Ñù  ) (F : filter ‚Ñù ) (G : filter ‚Ñù ): tendsto (Œª (x : ‚Ñù), (x)) (nhds (0:‚Ñù) ) (nhds (0:‚Ñù)) :=<br>\nbegin<br>\n  unfold tendsto,<br>\n  rw filter.map_id',<br>\n  exact nhds_le_nhds_iff.mpr rfl,<br>\nend</p>\n<p>lemma my_limit2 (x:‚Ñù ) (y:‚Ñù ) (f : ‚Ñù ‚Üí ‚Ñù  ) (F : filter ‚Ñù ) (G : filter ‚Ñù ): tendsto (Œª (x : ‚Ñù), x) (nhds (0:‚Ñù) ) (nhds (0:‚Ñù)) :=<br>\nbegin<br>\n  rw tendsto_def,<br>\n  intro y,<br>\n  intro h,<br>\n  simp only [preimage_id'],<br>\n  exact h,<br>\nend</p>\n<p>lemma my_limit3 (x:‚Ñù ) (y:‚Ñù ) (f : ‚Ñù ‚Üí ‚Ñù  ) (F : filter ‚Ñù ) (G : filter ‚Ñù ): tendsto (Œª (x : ‚Ñù), (8:‚Ñù)) (nhds (0:‚Ñù) ) (nhds (8:‚Ñù)) :=<br>\nbegin<br>\n  unfold tendsto,<br>\n  rw filter.map_const,<br>\n  exact pure_le_nhds 8,<br>\nend</p>\n<p>lemma my_limit4 (x:‚Ñù ) (y:‚Ñù ) (f : ‚Ñù ‚Üí ‚Ñù  ) (F : filter ‚Ñù ) (G : filter ‚Ñù ): tendsto (Œª (x : ‚Ñù), x+ (0:‚Ñù )) (nhds (0:‚Ñù) ) (nhds (0:‚Ñù)) :=<br>\nbegin<br>\n  unfold tendsto,<br>\n  rw ‚Üêfilter.add_pure, <br>\n  simp,<br>\n  sorry,<br>\nend</p>\n<p>lemma my_limit5 (x:‚Ñù ) (y:‚Ñù ) (f : ‚Ñù ‚Üí ‚Ñù  ) (F : filter ‚Ñù ) (G : filter ‚Ñù ): tendsto (Œª (x : ‚Ñù), x+ (0:‚Ñù )) (nhds (0:‚Ñù) ) (nhds (0:‚Ñù)) :=<br>\nbegin<br>\n  unfold tendsto,<br>\n  rw ‚Üêfilter.add_pure, <br>\n  simp,<br>\n  sorry,<br>\nend</p>\n<p>lemma my_limit6 (x:‚Ñù ) (y:‚Ñù ) (f : ‚Ñù ‚Üí ‚Ñù  ) (F : filter ‚Ñù ) (G : filter ‚Ñù ): tendsto (Œª (x : ‚Ñù), x*x) (nhds (0:‚Ñù) ) (nhds (0:‚Ñù)) :=<br>\nbegin<br>\n  rw tendsto_def,<br>\n  intro y,<br>\n  intro h,<br>\n  sorry<br>\nend</p>\n<p>end my_work</p>",
        "id": 329077150,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1676932961
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> might help you with formatting)</p>",
        "id": 329078407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676933792
    },
    {
        "content": "<p>I'm unclear about whether you want to use filters in the proof you're writing that x^2-&gt;0 or whether you want to avoid them</p>",
        "id": 329083218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676937544
    },
    {
        "content": "<p>To add to the confusion, you seem to be using <code>tendsto</code> to mean two different things in your post</p>",
        "id": 329083335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676937629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590693\">rtertr</span> <a href=\"#narrow/stream/113489-new-members/topic/Trying.20to.20do.20real.20analysis.20with.20filters/near/329077150\">said</a>:</p>\n<blockquote>\n<p>So I guess my question is, how do I transform  tendsto (Œª (x : ‚Ñù),  f(x) ) (nhds (a:‚Ñù) ) (nhds (b:‚Ñù)) into something like<br>\n‚àÄ Œµ &gt; 0, ‚àÉ Œ¥ &gt; 0, ‚àÄ (x:‚Ñù), 0&lt;|x - p| &lt; Œ¥  ‚Üí |f(x) - L| &lt; Œµ without making my own definition and simply working with the theorems for filters, maps, etc. </p>\n</blockquote>\n<p>Would <code>rw [tendsto_nhds_nhds]</code> be what you're looking for?</p>",
        "id": 329085795,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1676939379
    },
    {
        "content": "<p>@rtertr, I strongly advise you use your real name here since otherwise many people will think you are simply a student trying to cheat with some exercises. I'll answer this first question anyway. First you need to understand that your statement quoted by Alistair is simply false, because your tendsto uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds\">docs#nhds</a> and you <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œµ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">œµ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ¥</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">Œ¥</span></span></span></span> version uses punctured neighborhoods. You can translate using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topology</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span> <span class=\"n\">metric</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_nhds_nhds</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â†</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tendsto_nhds_within_nhds</span><span class=\"o\">,</span> <span class=\"n\">real.dist_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_singleton_iff</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">dist_pos</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Note those are really lemmas about metric spaces that are specialized to real numbers using the definition of the distance there.</p>",
        "id": 329100224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1676951503
    },
    {
        "content": "<p>The second example uses punctured neighborhoods, denoted by <code>ùìù[‚â†]</code>.</p>",
        "id": 329100283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1676951537
    },
    {
        "content": "<p>If you want to see results about limits of polynomials you can go to <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/special_functions/polynomials.html\">https://leanprover-community.github.io/mathlib_docs/analysis/special_functions/polynomials.html</a>. I can't be more specific unless you tell us what you actually want to do.</p>",
        "id": 329100340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1676951613
    },
    {
        "content": "<p>Last remark: your <code>0 &lt; |x - a| &lt; Œ¥ ‚Üí</code> will not work in Lean. If you are confused by this or by why I replaced it with <code>0 &lt; |x - a| ‚Üí |x - a| &lt; Œ¥ ‚Üí</code> then you need to read basic explanations, for instance in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>.</p>",
        "id": 329100498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1676951759
    },
    {
        "content": "<p>Hello again everyone,<br>\nThank you for all your help! My name is Sonia, and I am just trying some different elementary things in Lean to help me eventually formalize some more complicated math for my thesis. <br>\nTo answer <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I guess I  wanted the starting point to be filters to keep it general. But then I wanted to either transform the proof into an epsilon-delta proof, or (ideally) prove my proofs without using the epsilon-delta definition. I know I referred to your sequence definition from your work sheet, but it was just a reference for where I had seen something defined like real analysis. I want to work with the function limit, not the sequence. <br>\nTo <span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span>  and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , I think this is exactly what I was looking for. Thank you! I will take a look at the limits of polynomials! <br>\nAgain, thank you all. I guess my next goal is to show that a function is bounded, but first I wanted to understand how the limits worked in Lean.</p>",
        "id": 329132423,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1676969000
    },
    {
        "content": "<p>Did you read <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>?</p>",
        "id": 329132655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1676969060
    },
    {
        "content": "<p>Hopefully reading that book (and doing the exercises) should make your Lean learning a lot easier.</p>",
        "id": 329133419,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1676969293
    },
    {
        "content": "<p>By the way, in my 2023 course I changed the epsilon delta definition to <code>tends_to</code> to fix the unfortunate nameclash</p>",
        "id": 329133677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676969391
    },
    {
        "content": "<p>Yes! Not all of it, but some of it. I think you, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>,  wrote the section on Topology Filters cause I also found it through your website. It really helped, but since I haven't done a course on topology, thus I wanted to go back to real analysis! <br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , thank you, great, I will take a look!</p>",
        "id": 329162546,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1676978058
    }
]