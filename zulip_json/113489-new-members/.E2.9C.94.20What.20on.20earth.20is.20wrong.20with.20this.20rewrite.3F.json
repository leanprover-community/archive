[
    {
        "content": "<p>I've spent too much time on trying to get this to work, thought I'd come here. I'm absolutely baffled; can anyone tell what is wrong with this rewrite?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subsemigroup.Basic</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"bp\">Φ</span><span class=\"o\">]</span>\n\n\n<span class=\"c1\">-- Getting a valuation's domain</span>\n<span class=\"kd\">class</span> <span class=\"n\">Domain</span> <span class=\"n\">where</span>\n  <span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">s</span>\n\n\n<span class=\"c1\">-- Combining valuations</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\"⊗\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Semigroup.toMul.mul</span>\n\n\n<span class=\"kn\">private</span> <span class=\"kd\">class</span> <span class=\"n\">DomainMulUnion</span> <span class=\"kd\">extends</span> <span class=\"n\">Domain</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span><span class=\"o\">,</span> <span class=\"n\">domain</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">⊗</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"n\">domain</span> <span class=\"n\">φ</span> <span class=\"bp\">∪</span> <span class=\"n\">domain</span> <span class=\"n\">ψ</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Domain</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">domainPreimage</span> <span class=\"o\">[</span><span class=\"n\">DomainMulUnion</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span> <span class=\"bp\">//</span> <span class=\"n\">Domain.domain</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">The preimage of any \"mul union\" domain is closed under multiplication.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">preimage_domain_mul_closed</span>\n    <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DomainMulUnion</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">domainPreimage</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">domainPreimage</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"n\">Domain.domain</span> <span class=\"o\">(</span><span class=\"n\">φ.val</span> <span class=\"bp\">⊗</span> <span class=\"n\">ψ.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">inst.mul_union</span> <span class=\"n\">φ.val</span> <span class=\"n\">ψ.val</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">    Domain.domain (Mul.mul ↑φ ↑ψ)</span>\n\n<span class=\"cm\">  αβ: Type</span>\n<span class=\"cm\">  Φ: Set α</span>\n<span class=\"cm\">  s: Set β</span>\n<span class=\"cm\">  inst✝¹: Semigroup ↑Φ</span>\n<span class=\"cm\">  inst✝: Domain Φ s</span>\n<span class=\"cm\">  inst: DomainMulUnion Φ s</span>\n<span class=\"cm\">  r: Set ↑s</span>\n<span class=\"cm\">  φψ: domainPreimage Φ s r</span>\n<span class=\"cm\">  h: Domain.domain (Mul.mul ↑φ ↑ψ) = Domain.domain ↑φ ∪ Domain.domain ↑ψ := DomainMulUnion.mul_union ↑φ ↑ψ</span>\n<span class=\"cm\">  ⊢ Domain.domain (Mul.mul ↑φ ↑ψ) = r</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Seems crazy.</p>",
        "id": 405989531,
        "sender_full_name": "N Gelwan",
        "timestamp": 1701759811
    },
    {
        "content": "<p>I don't think you want to see <code>Mul.mul</code> anywhere. Probably this comes from your notation which might work as <code>( \\. * \\.)</code></p>",
        "id": 405991509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701760682
    },
    {
        "content": "<p>Thanks for the suggestion. Let's give it a shot.</p>",
        "id": 405991887,
        "sender_full_name": "N Gelwan",
        "timestamp": 1701760824
    },
    {
        "content": "<p>Well, actually, I'll just eliminate the notation-- it's not necessary for a min breaking example.</p>",
        "id": 405991944,
        "sender_full_name": "N Gelwan",
        "timestamp": 1701760850
    },
    {
        "content": "<p>No <span aria-label=\"dice\" class=\"emoji emoji-1f3b2\" role=\"img\" title=\"dice\">:dice:</span>, unfortunately.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subsemigroup.Basic</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"bp\">Φ</span><span class=\"o\">]</span>\n\n\n<span class=\"c1\">-- Getting a valuation's domain</span>\n<span class=\"kd\">class</span> <span class=\"n\">Domain</span> <span class=\"n\">where</span>\n  <span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">s</span>\n\n\n<span class=\"c1\">-- Combining valuations</span>\n<span class=\"kn\">private</span> <span class=\"kd\">class</span> <span class=\"n\">DomainMulUnion</span> <span class=\"kd\">extends</span> <span class=\"n\">Domain</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span><span class=\"o\">,</span> <span class=\"n\">domain</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"n\">domain</span> <span class=\"n\">φ</span> <span class=\"bp\">∪</span> <span class=\"n\">domain</span> <span class=\"n\">ψ</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Domain</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">domainPreimage</span> <span class=\"o\">[</span><span class=\"n\">DomainMulUnion</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span> <span class=\"bp\">//</span> <span class=\"n\">Domain.domain</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">The preimage of any \"mul union\" domain is closed under multiplication.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">preimage_domain_mul_closed</span>\n    <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DomainMulUnion</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">domainPreimage</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">domainPreimage</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"n\">Domain.domain</span> <span class=\"o\">(</span><span class=\"n\">φ.val</span> <span class=\"bp\">*</span> <span class=\"n\">ψ.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">inst.mul_union</span> <span class=\"n\">φ.val</span> <span class=\"n\">ψ.val</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">    Domain.domain (↑φ * ↑ψ)</span>\n\n<span class=\"cm\">  αβ: Type</span>\n<span class=\"cm\">  Φ: Set α</span>\n<span class=\"cm\">  s: Set β</span>\n<span class=\"cm\">  inst✝¹: Semigroup ↑Φ</span>\n<span class=\"cm\">  inst✝: Domain Φ s</span>\n<span class=\"cm\">  inst: DomainMulUnion Φ s</span>\n<span class=\"cm\">  r: Set ↑s</span>\n<span class=\"cm\">  φψ: domainPreimage Φ s r</span>\n<span class=\"cm\">  h: Domain.domain (↑φ * ↑ψ) = Domain.domain ↑φ ∪ Domain.domain ↑ψ := DomainMulUnion.mul_union ↑φ ↑ψ</span>\n<span class=\"cm\">  ⊢ Domain.domain (↑φ * ↑ψ) = r</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 405992012,
        "sender_full_name": "N Gelwan",
        "timestamp": 1701760875
    },
    {
        "content": "<p>Bizarre, yah huh?</p>",
        "id": 405992211,
        "sender_full_name": "N Gelwan",
        "timestamp": 1701760941
    },
    {
        "content": "<p>If you do <code>convert h</code> to try to unify the LHS with the LHS, it turns up that you have two different <code>Domain Φ s</code> instances that aren't definitionally equal.</p>",
        "id": 405993088,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701761335
    },
    {
        "content": "<p>Ahhhhhh, excellent. Ok, thank you. I'll take a look at that.</p>",
        "id": 405997035,
        "sender_full_name": "N Gelwan",
        "timestamp": 1701763088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665242\">N Gelwan</span> has marked this topic as resolved.</p>",
        "id": 405997048,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701763096
    },
    {
        "content": "<p>Beautiful!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subsemigroup.Basic</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"bp\">Φ</span><span class=\"o\">]</span>\n\n\n<span class=\"c1\">-- Getting a valuation's domain</span>\n<span class=\"kd\">class</span> <span class=\"n\">Domain</span> <span class=\"n\">where</span>\n  <span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">s</span>\n\n\n<span class=\"c1\">-- Combining valuations</span>\n<span class=\"kn\">private</span> <span class=\"kd\">class</span> <span class=\"n\">DomainMulUnion</span> <span class=\"kd\">extends</span> <span class=\"n\">Domain</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span><span class=\"o\">,</span> <span class=\"n\">domain</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"n\">domain</span> <span class=\"n\">φ</span> <span class=\"bp\">∪</span> <span class=\"n\">domain</span> <span class=\"n\">ψ</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">domainPreimage</span> <span class=\"o\">[</span><span class=\"n\">DomainMulUnion</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span> <span class=\"bp\">//</span> <span class=\"n\">Domain.domain</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">The preimage of any \"mul union\" domain is closed under multiplication.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">preimage_domain_mul_closed</span>\n    <span class=\"o\">[</span><span class=\"n\">instDomainMulUnion</span> <span class=\"o\">:</span> <span class=\"n\">DomainMulUnion</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">domainPreimage</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">domainPreimage</span> <span class=\"bp\">Φ</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"n\">Domain.domain</span> <span class=\"o\">(</span><span class=\"n\">φ.val</span> <span class=\"bp\">*</span> <span class=\"n\">ψ.val</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span>\n  <span class=\"k\">have</span> <span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">Domain.domain</span> <span class=\"n\">φ.val</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">φ.property</span>\n  <span class=\"k\">have</span> <span class=\"n\">hψ</span> <span class=\"o\">:</span> <span class=\"n\">Domain.domain</span> <span class=\"n\">ψ.val</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">ψ.property</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">instDomainMulUnion.mul_union</span> <span class=\"n\">φ.val</span> <span class=\"n\">ψ.val</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">hψ</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Set.union_self</span> <span class=\"n\">r</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 405998356,
        "sender_full_name": "N Gelwan",
        "timestamp": 1701763606
    },
    {
        "content": "<p>For those perusing this topic after the fact, the difficulty I was having here seems to be the same as in this topic: <a href=\"#narrow/stream/113489-new-members/topic/Why.20failing.20to.20unify.3F/near/405900135\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Why.20failing.20to.20unify.3F/near/405900135</a></p>",
        "id": 406000788,
        "sender_full_name": "N Gelwan",
        "timestamp": 1701764645
    }
]