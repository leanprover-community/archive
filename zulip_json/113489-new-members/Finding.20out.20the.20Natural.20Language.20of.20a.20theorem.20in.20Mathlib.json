[
    {
        "content": "<p>I am specifically wondering what this theorem means, but new to Mathlib and not googling successfully at the moment. Can someone point me to the correct way to find out about a question like this?</p>\n<p>theorem prime . dvd_of_dvd _pow {p m n : ℕ} (pp : prime p) (h : p \\[Divides] m^n) : p \\[Divides] m :=<br>\nbegin<br>\n  induction n with n IH,<br>\n  { exact pp . not_dvd_one . elim h },<br>\n  { rw pow_succ at h, exact (pp . dvd_mul.1 h) . elim id IH }<br>\nend</p>",
        "id": 373814823,
        "sender_full_name": "Jack Heseltine",
        "timestamp": 1688956805
    },
    {
        "content": "<p>It means that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> is prime and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>m</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">p|m^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi mathvariant=\"normal\">∣</mi><mi>m</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">p|m.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 373824207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688961765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"631270\">@Jack Heseltine</span>, there's not a general method for getting help with \"what is the natural language version of this statement\", beyond learning the basic Lean syntax so you can do it yourself, or asking here.</p>",
        "id": 373849681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688972601
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3808\">#3808</a> is a PR proposing a helper function for the opposite direction (i.e. a #formalize command), but it will only be useful for people either with GPT API access, or a locally running LLM. We could very easily add the other direction, as well.</p>",
        "id": 373849891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688972673
    },
    {
        "content": "<p>Where does the <code>\\[Divides]</code> syntax come from?</p>",
        "id": 373849897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688972675
    },
    {
        "content": "<p>I think this text has been copied and pasted via Mathematica.</p>",
        "id": 373849929,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688972689
    },
    {
        "content": "<p>It rewrites Unicode in interesting ways (and is also prone to insert spaces around punctuation!)</p>",
        "id": 373850033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688972713
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prime.dvd_of_dvd_pow</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pp.not_dvd_one.elim</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pp.dvd_mul.1</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">IH</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>is something which you can just cut and paste into Lean 4.</p>",
        "id": 373892569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688982437
    },
    {
        "content": "<p>If you have ChatGPT, you can get a much quicker answer by asking it directly (no guarantee that what it's saying is right, but it might give some useful hints). E.g.: <br>\n<a href=\"/user_uploads/3121/kGfg-kyqOZIEwtA8GH8-I0a9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kGfg-kyqOZIEwtA8GH8-I0a9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kGfg-kyqOZIEwtA8GH8-I0a9/image.png\"></a></div>",
        "id": 373982780,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1688999355
    }
]