[
    {
        "content": "<p>We know that Finite Particular Point Topology is a general case of Sierpinski space when the no. of points in the topological space. How does one define that there exists these particular amount of elements of that type</p>",
        "id": 396187368,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1697072523
    },
    {
        "content": "<p>You may want to wait for an answer from someone more authoritative, but I think you can just use <code>Fin n</code> (where n is the number of elements)</p>",
        "id": 396267950,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1697109732
    },
    {
        "content": "<p>Yes, I'm not familiar with the area but I'd recommend defining something like <code>def SierpinskiSpace (n : Nat) := Fin n</code> and then create the topology on such a clone, as I think they may already have some topology by \"accident\" and I doubt it will be the one you want.</p>",
        "id": 396282999,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697115574
    },
    {
        "content": "<p>To define a topology, you will need to make a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace#doc\">docs#TopologicalSpace</a> instance.</p>",
        "id": 396283031,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697115588
    },
    {
        "content": "<p>Indeed there is, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instTopologicalSpaceFin#doc\">docs#instTopologicalSpaceFin</a> gives it the discrete topology.</p>",
        "id": 396283191,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697115628
    },
    {
        "content": "<p>In fact, with some details I see that this can be defined for all spaces, not just finite ones. I'd instead recommend defining <code>def ParticularPointTopology (X : Type*) := X</code> and create your topological space instance on there. I'm not sure if I'm being very clear, feel free to ask any questions you have!</p>",
        "id": 396283435,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697115717
    },
    {
        "content": "<p>You also need to choose a point, right? I mean, mathematically</p>",
        "id": 396294616,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697119292
    },
    {
        "content": "<p>Also, if I am declaring a space to be uncountable, how does one pick an element from that space</p>",
        "id": 396372490,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1697148664
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.arbitrary#doc\">docs#Classical.arbitrary</a></p>",
        "id": 396372621,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697148702
    },
    {
        "content": "<p>Also, if I need to pick 2 distinct elements, what can I do?</p>",
        "id": 399996992,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1698948523
    },
    {
        "content": "<p>If you only want two you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_pair_ne#doc\">docs#exists_pair_ne</a></p>",
        "id": 399997575,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698948779
    },
    {
        "content": "<p>How does one prove something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"o\">](</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">)(</span><span class=\"n\">hn1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Nonempty_α</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399999119,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1698949511
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"o\">](</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">)(</span><span class=\"n\">hn1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Nonempty_α</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hn</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Fintype.card_pos_iff.mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"c1\">-- first hit from apply?</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 399999652,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698949719
    }
]