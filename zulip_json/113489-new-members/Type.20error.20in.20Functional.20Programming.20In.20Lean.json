[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> , the section \"<a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/out-params.html\">Controlling Instance Search\"</a> in Functional Programming in Lean appears to have<br>\n<a href=\"/user_uploads/3121/XktWRZgvqDtwInJJSA8hn3rb/Screenshot-from-2023-07-16-11-05-42.png\">Screenshot-from-2023-07-16-11-05-42.png</a><br>\n a coding error in this example:</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XktWRZgvqDtwInJJSA8hn3rb/Screenshot-from-2023-07-16-11-05-42.png\" title=\"Screenshot-from-2023-07-16-11-05-42.png\"><img src=\"/user_uploads/3121/XktWRZgvqDtwInJJSA8hn3rb/Screenshot-from-2023-07-16-11-05-42.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">succ</span> <span class=\"o\">::</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addNatPos</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"o\">(</span><span class=\"n\">addNatPos</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error is that <code>Pos.succ</code> takes a <code>Nat</code> but <code>addNatPos n p</code> is a <code>Pos</code>.  Please also attached screenshot.</p>\n<p>The following alternate definition of <code>addNatPos</code> works but requires a little more buildup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">succ</span> <span class=\"o\">::</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.plus</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n.plus</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pos.plus</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Plus</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">Pos.plus</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Pos.plus</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addNatPos</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.plus</span> <span class=\"o\">(</span><span class=\"n\">Pos.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addPosNat</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.plus</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Pos.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">addPosNat</span> <span class=\"o\">(</span><span class=\"n\">Pos.succ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 375782405,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1689520015
    },
    {
        "content": "<p>The <code>Pos.succ</code> here is the one from this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">Pos</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n</code></pre></div>\n<p>The structure that you have here is part of an exercise on other ways to do it, not the main one in the chapter.</p>\n<p>How could this have been more clear?</p>",
        "id": 382429522,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1691350010
    }
]