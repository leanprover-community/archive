[
    {
        "content": "<p>Is there a good way to rearrange minus signs? For example, is this already in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Or equivalent over an arbitrary <code>comm_ring</code>, or similar things like</p>\n<p>Here's a hacky proof over the integers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_add</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">even.neg_one_pow</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">int.mul_eq_one_iff_eq_one_or_neg_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 352943536,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682541832
    },
    {
        "content": "<p>Here's a hacky proof over an arbitrary <code>comm_ring</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_add</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">even.neg_one_pow</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span> <span class=\"n\">even.neg_one_pow</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">one_mul</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>There's a strange goal at the end: <code>⊢ sub_neg_monoid.to_has_neg R = has_involutive_neg.to_has_neg R</code>. Really the last three lines should just be <code>rw h</code>.</p>",
        "id": 352943755,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682541903
    },
    {
        "content": "<p>Anyway, it would be nice to add some of this functionality to mathlib.</p>",
        "id": 352944151,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682542068
    },
    {
        "content": "<p>This was perhaps a bit easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.units</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.field.power</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">units.ext_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">zpow_coe_nat</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_inv_eq_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">inv_zpow</span><span class=\"o\">,</span> <span class=\"n\">zpow_add</span><span class=\"o\">,</span> <span class=\"n\">inv_neg'</span><span class=\"o\">,</span> <span class=\"n\">inv_one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 352944939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682542347
    },
    {
        "content": "<p>The trick is to move to the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units\">docs#units</a> of <code>R</code>, and integer powers, where you can just move everything around</p>",
        "id": 352945020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682542382
    },
    {
        "content": "<p>There is also the good old case-bash:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_power.ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">neg_one_pow_eq_or</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">neg_one_pow_eq_or</span> <span class=\"n\">R</span> <span class=\"n\">k</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 352951406,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682545021
    },
    {
        "content": "<p>Nice proofs, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> . Either version seems worth adding to mathlib. (I came upon this while doing a different computation, so it would be nice not to be reproving a fact like this, even if the optimized proof is only 3-5 lines).</p>",
        "id": 352962883,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682547941
    },
    {
        "content": "<p>Can you share the statement of the larger computation?</p>",
        "id": 352963451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682548051
    },
    {
        "content": "<p>Sometimes changing the formulation is a better option than adding slightly contrived algebraic lemmas</p>",
        "id": 352963803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682548113
    },
    {
        "content": "<p>I see, let's see. It wasn't just one, though, it was a few different equations. For instance:<br>\n<code>(n k : ℕ) : even (n + k) → (-1 : ℤ)^n = (-1)^k</code><br>\n(or with <code>R</code> in place of <code>ℤ</code>).</p>",
        "id": 352964592,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682548266
    },
    {
        "content": "<p>Or the same statement with <code>odd</code> and an extra sign. This was for the discussion in <a href=\"https://github.com/leanprover-community/mathlib/pull/18837\">#18837</a> about even and odd polynomials, which actually leads to a goal of the form </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 352965075,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682548350
    },
    {
        "content": "<p>I would suggest writing <code>(-1 : ℤ)^n * a = (-1)^k * a</code> as <code>(-1 : ℤˣ)^n • a = (-1 : ℤˣ)^k • a</code>, and then you can prove it for any ring where <code>2</code> is invertible</p>",
        "id": 352969083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682549148
    },
    {
        "content": "<p>Using <code>(-1 : ℤˣ)^n • x</code> as the canonical spelling for \"attach an alternating sign to <code>x</code>\" means you need fewer lemmas to work with</p>",
        "id": 352969246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682549184
    },
    {
        "content": "<p>Oh interesting, OK</p>",
        "id": 352969399,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682549206
    },
    {
        "content": "<p>Hmm. But <code>odd.neg_one_pow</code> and <code>even.neg_one_pow</code> don't use this spelling, I don't think.</p>",
        "id": 352969558,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682549248
    },
    {
        "content": "<p>There was a PR at one point that added a dedicated <code>neg_one_pow</code> function to make this type of thing easier, but I argued we already had that function as <code>(-1 : ℤˣ)^n</code></p>",
        "id": 352969582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682549252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/113489-new-members/topic/Rearranging.20minus.20signs/near/352969558\">said</a>:</p>\n<blockquote>\n<p>Hmm. But <code>odd.neg_one_pow</code> and <code>even.neg_one_pow</code> don't use this spelling, I don't think.</p>\n</blockquote>\n<p>They should work fine, this is exactly why I created <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_distrib_neg\">docs#has_distrib_neg</a></p>",
        "id": 352969800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682549293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Rearranging.20minus.20signs/near/352969083\">said</a>:</p>\n<blockquote>\n<p>I would suggest writing <code>(-1 : ℤ)^n * a = (-1)^k * a</code> as <code>(-1 : ℤˣ)^n • a = (-1 : ℤˣ)^k • a</code>, and then you can prove it for any ring where <code>2</code> is invertible</p>\n</blockquote>\n<p>It is in fact enough that <code>2</code> is not a zero-divisor, which holds for <code>ℤ</code>. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 352970698,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682549480
    },
    {
        "content": "<p>I'm slightly worried I have been using <code>invertible 2</code> when I meant <code>ne_zero 2</code></p>",
        "id": 352970980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682549524
    },
    {
        "content": "<p>2 can only be a zero-divisor if it's zero, right?</p>",
        "id": 352971165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682549567
    },
    {
        "content": "<p><code>ne_zero</code> is not enough: 2 is a zero divisor in zmod 4.</p>",
        "id": 352971244,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682549583
    },
    {
        "content": "<p>Ultimately, you cook up <code>2 * x = 0</code> and you want to deduce that <del><code>2</code></del><code>x</code> is zero.  You get this, but assuming that multiplication by <code>2</code> is injective.</p>",
        "id": 352971574,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682549662
    },
    {
        "content": "<p>And to think I only thought I had to worry about characteristic two...</p>",
        "id": 352971973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682549742
    },
    {
        "content": "<p>You should not worry about characteristic 2, you should embrace it.</p>",
        "id": 352972153,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682549768
    },
    {
        "content": "<p>In the case I have in mind that's actually what I did; but now I can replace my \"the usual approach fails in char 2\" claim with a stronger \"the usual approach fails in even characteristic\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 352972468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682549843
    },
    {
        "content": "<p>Nevertheless,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 352972483,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682549846
    },
    {
        "content": "<p>Hmm. How would you prove the second lemma below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.algebra_map</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.coeff_comp_neg_X</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p.coeff</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_zero_of_odd_add</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnk</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>  <span class=\"n\">p.coeff</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hp</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.coeff_comp_neg_X</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- hp : ↑-1 ^ k * p.coeff k = (↑-1 ^ n * p).coeff k</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 352973114,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682549973
    },
    {
        "content": "<p>Eric, when you say \"even characteristic\" I imagine that you are excluding characteristic 0...  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 352973486,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682550042
    },
    {
        "content": "<p>Anyway, for these kinds of arguments, I find that \"characteristic\" does not isolate the right property.</p>",
        "id": 352973658,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682550074
    },
    {
        "content": "<p>More generally, while \"characteristic\" is defined for very general (semi)rings, it is only actually useful in situations where you are already quite close to a field.</p>",
        "id": 352973990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682550130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"391579\">@Jake Levinson</span>: I guess there's tension here between my claim that <code>(-1 : ℤˣ)^n •</code> is the best spelling for multiplying by -1, and your use case being working with <code>ℤ</code> itself</p>",
        "id": 352974019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682550144
    },
    {
        "content": "<p>I would suggest stating <code>(hp : p.comp (-X) = (-1)^n * p) </code> as <code>(hp : p.comp (-X) = (-1 : ℤˣ)^n • p) </code> though</p>",
        "id": 352974234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682550180
    },
    {
        "content": "<p>Oops, I meant to include that change. The goal I showed (where the coercion from constants to polynomials and the coercion to a unit are both getting in the way) is with the hypotheses adjusted in that way.</p>",
        "id": 352974597,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682550254
    },
    {
        "content": "<p>Here's another version!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_exp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">linear_combination</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_exp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 352975434,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682550424
    },
    {
        "content": "<p>Relatedly, <code>(C (-1 : ℤˣ)^k)</code> doesn't work (<code>failed to synthesize type class instance for semiring ℤˣ</code>). But it's preferable to express this as a constant to say that it affects each coefficient individually (<code>polynomial.coeff_C_mul</code> rather than <code>polynomial.coeff_mul</code>).</p>",
        "id": 352975449,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682550432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Cool! <code>ring_exp</code> and <code>linear_combination</code> seem like good tactics to learn.</p>",
        "id": 352975763,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682550490
    },
    {
        "content": "<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.coeff_smul\">docs#polynomial.coeff_smul</a> exist? (edit: yes)</p>",
        "id": 352976946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682550727
    },
    {
        "content": "<p>It exists, but it doesn't work on that hypothesis (not sure why)</p>",
        "id": 352977090,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682550766
    },
    {
        "content": "<p>Can you make a mwe? I don't see where <code>C</code> appears above</p>",
        "id": 352977180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682550780
    },
    {
        "content": "<p>I'll show you the approach I had before making this thread - I rewrote <code>-1</code> to <code>C (-1)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.algebra_map</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.coeff_comp_neg_X</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p.coeff</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_zero_of_odd_add'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnk</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.coeff</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hp</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">polynomial.coeff_comp_neg_X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n      <span class=\"bp\">←</span> <span class=\"n\">C_pow</span><span class=\"o\">,</span> <span class=\"n\">coeff_C_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_mul_right_iff</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">hnk.neg_one_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- ⊢ (-1) ^ k = (-1) ^ n ↔ (-1) ^ (n + k) = 1</span>\n  <span class=\"c1\">-- use one of the supplied proofs :)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 352978510,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682551062
    },
    {
        "content": "<p>This <del>gets pretty close:</del> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.algebra_map</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.coeff_comp_neg_X</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">p.coeff</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_zero_of_odd_add'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnk</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.coeff</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hp</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">polynomial.coeff_comp_neg_X</span><span class=\"o\">,</span> <span class=\"n\">coeff_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_iff_eq_inv_smul</span><span class=\"o\">,</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">inv_pow</span><span class=\"o\">,</span> <span class=\"n\">inv_neg'</span><span class=\"o\">,</span> <span class=\"n\">inv_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">hnk.neg_pow</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">units.neg_smul</span><span class=\"o\">,</span>\n    <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">eq_neg_self_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 352981262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682551628
    },
    {
        "content": "<p>Hmm. Changing the <code>mul</code>s to <code>smul</code>s throughout makes it better. But, I'm still ending up with needing to move / deal with minus signs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.algebra_map</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial.coeff_comp_neg_X</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">p.coeff</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_zero_of_odd_add'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnk</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.coeff</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hp</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">polynomial.coeff_comp_neg_X</span><span class=\"o\">,</span> <span class=\"n\">coeff_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- hp: (-1) ^ k • p.coeff k = (-1) ^ n • p.coeff k</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 352981358,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682551658
    },
    {
        "content": "<p>Annoyingly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/neg_one_smul\">docs#neg_one_smul</a> <em>doesn't</em> work for the ℤˣ action</p>",
        "id": 352982149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682551807
    },
    {
        "content": "<p>Edited above, now <code>sorry</code>-free</p>",
        "id": 352983489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682552089
    },
    {
        "content": "<p><em>wink wink</em> <code>has_smul_distrib_neg</code></p>",
        "id": 352983572,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682552102
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.neg_smul\">docs#units.neg_smul</a> is good enough for now</p>",
        "id": 352983703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682552138
    },
    {
        "content": "<p>hooray!</p>",
        "id": 352984245,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682552242
    },
    {
        "content": "<p>I suspect my \"<code>(-1 : ℤˣ)^n •</code> sign-application is best sign-application\" stance is not one that is universally held, so you might want to see if anyone has a short proof leveraging a different spelling</p>",
        "id": 352985401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682552483
    },
    {
        "content": "<p>Yes, that looks like exactly the way the proof should go. So a lesson here for me is to use <code>smul</code> and, for minus signs, the units.</p>",
        "id": 352985422,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682552492
    },
    {
        "content": "<p>Hm, fair. Still, <code>smul_eq_iff_eq_inv_smul</code> is literally the rearrangement lemma I was asking for. :)</p>",
        "id": 352985668,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682552531
    },
    {
        "content": "<p><code>eq_inv_smul_iff₀</code> would have worked without <code>units</code>, but you'd have to keep reminding lean that <code>0 \\ne -1</code></p>",
        "id": 352986082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682552632
    },
    {
        "content": "<p>To be fair, who among us doesn't forget <code>0 \\ne -1</code> from time to time?</p>",
        "id": 352989767,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1682553398
    },
    {
        "content": "<p>It's false in characteristic 1 (which is odd and still satisfies 2=0, although 2 is a unit anyway)</p>",
        "id": 353134515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682580416
    }
]