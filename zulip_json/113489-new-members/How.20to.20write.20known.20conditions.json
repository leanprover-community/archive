[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">H₂</span> <span class=\"bp\">∨</span> <span class=\"n\">H₂</span> <span class=\"bp\">⊆</span> <span class=\"n\">H₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can I ask what is wrong with me describing H1 and H2 is still being subgroups</p>",
        "id": 376257094,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689667209
    },
    {
        "content": "<p>You can't write <code>h : x : X</code> to mean \"a proof that x has type X\"</p>",
        "id": 376257709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689667359
    },
    {
        "content": "<p>What you probably want is <code> ∃ H12 : Subgroup G, (H12 : Set G) = H₁ ∪ H₂</code></p>",
        "id": 376258049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689667440
    },
    {
        "content": "<p>Which says \"there is some subgroup H12 that has the same elements as the union of the elements of H1 and H2\"</p>",
        "id": 376258303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689667493
    },
    {
        "content": "<p>The predicate is marked as being deprecated, but a natural way to write this is <code>(h : IsSubgroup (H₁ ∪ H₂))</code>. (I'm not sure the predicate <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSubgroup#doc\">docs#IsSubgroup</a> is <em>really</em> deprecated; it's more that if you're working with subgroups you should strongly prefer terms of <code>Subgroup</code>. However, in this case the question really is about whether a given set is a subgroup.)</p>\n<p>Eric's <code>(h : ∃ H12 : Subgroup G, (H12 : Set G) = H₁ ∪ H₂)</code> is good too.</p>",
        "id": 376259560,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689667785
    },
    {
        "content": "<p>By the way, the conclusion should be written as <code>H₁ ≤ H₂ ∨ H₂ ≤ H₁</code> since we use <code>≤</code> for everything that's not a <code>Set</code>. (This is the symbol for posets in general.)</p>",
        "id": 376261170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689668209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Should there be some sort of predicate that SetLike provides for this existential version?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsA</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SetLike</span> <span class=\"n\">S</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsA</span> <span class=\"o\">(</span><span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"bp\">≤</span> <span class=\"n\">H₂</span> <span class=\"bp\">∨</span> <span class=\"n\">H₂</span> <span class=\"bp\">≤</span> <span class=\"n\">H₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 376261546,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689668308
    },
    {
        "content": "<p>With some notation, then we could make something that looks like <code>h : x : X</code>, which is kind of fun.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"s2\">\":~\"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IsA</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span><span class=\"bp\">~</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"bp\">≤</span> <span class=\"n\">H₂</span> <span class=\"bp\">∨</span> <span class=\"n\">H₂</span> <span class=\"bp\">≤</span> <span class=\"n\">H₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(I doubt this comes up enough in mathlib where notation is worth it though.)</p>",
        "id": 376262778,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689668610
    },
    {
        "content": "<p>I think it would be better to go the other way</p>",
        "id": 376263855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689668864
    },
    {
        "content": "<p>What's the thing here that has directions to go?</p>",
        "id": 376264355,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689668986
    },
    {
        "content": "<p>Defining <code>Subgroup</code> in terms of <code>IsSubgroup</code>, perhaps simply as <code>{ S : Set G // IsSubgroup G }</code></p>",
        "id": 376264666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689669063
    },
    {
        "content": "<p>Thanks to all of you, I have successfully resolved this issue！</p>",
        "id": 376327661,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689682706
    }
]