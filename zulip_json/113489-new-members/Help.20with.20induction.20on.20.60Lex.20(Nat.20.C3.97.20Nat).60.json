[
    {
        "content": "<p>I'm trying to prove a theorem of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lindenbaumSequenceMonotone</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Th</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">lindenbaumSequence</span> <span class=\"n\">t</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lindenbaumSequence</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Th</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lex</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Ctx</span>\n</code></pre></div>",
        "id": 341334058,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678653893
    },
    {
        "content": "<p><code>Monotone</code> unfolds as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Lex</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">lindenbaumSequence</span> <span class=\"n\">t</span> <span class=\"bp\">Δ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">lindenbaumSequence</span> <span class=\"n\">t</span> <span class=\"bp\">Δ</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>so I start by introducing <code>a</code> and <code>b</code>. But I'm going to need to appeal inductively to statements</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">lindenbaumSequence</span> <span class=\"n\">t</span> <span class=\"bp\">Δ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">lindenbaumSequence</span> <span class=\"n\">t</span> <span class=\"bp\">Δ</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>for c &lt; b.</p>",
        "id": 341334181,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678653984
    },
    {
        "content": "<p>I don't seem to be able to get these by just calling <code>lindenbaumSequenceMonotone</code> (the termination checker objects...)</p>",
        "id": 341334335,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678654086
    },
    {
        "content": "<p>Could anyone help me figure out the right way to go about this? Maybe I need some kind of <code>termination_by</code> magic, or maybe there's a correct way to introduce the inductive hypothesis I need here?</p>",
        "id": 341334396,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678654152
    },
    {
        "content": "<p>OK, got it I think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">lindenbaumSequenceMonotone</span> <span class=\"n\">t</span> <span class=\"bp\">Δ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b.fst</span><span class=\"o\">,</span> <span class=\"n\">b.snd</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 341336411,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678655723
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 341338974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678657761
    },
    {
        "content": "<p>I would hope you can use <code>=&gt; b</code> instead of <code>=&gt; (b.fst, b.snd)</code></p>",
        "id": 341338988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678657774
    },
    {
        "content": "<p>Here's an attempt. The following passes, modulo a <code>sorry</code> warning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.Lex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Lex</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">le_rfl</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">l₁</span> <span class=\"o\">:=</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">termination_by</span> <span class=\"n\">mwe</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a.fst</span><span class=\"o\">,</span> <span class=\"n\">a.snd</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But fails to prove termination when I use <code>=&gt; a</code> instead of <code>=&gt; (a.fst, a.snd)</code>.</p>",
        "id": 341348128,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678665157
    },
    {
        "content": "<p>It's perhaps a <code>Lex</code> quirk? It's OK when I try it with plain <code>Nat × Nat</code></p>",
        "id": 341348252,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678665343
    },
    {
        "content": "<p>Thanks, I'll try that tomorrow. I would hope it is possible to teach lean to handle Lex automatically</p>",
        "id": 341348816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678665900
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ofLex#doc\">docs4#ofLex</a> b is a bit shorter than <code>(b.fst, b.snd)</code>, but I haven't tried it</p>",
        "id": 341348864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678665961
    },
    {
        "content": "<p><code>ofLex a</code> Seems to produce the same behavior as a plain <code>a</code></p>",
        "id": 341349340,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678666373
    },
    {
        "content": "<p>I think we need to add a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WellFoundedRelation#doc\">docs4#WellFoundedRelation</a> instance for lex</p>",
        "id": 341349690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678666675
    },
    {
        "content": "<p>Also, you can use the notation for <code>Lex</code> instead of writing it out.</p>",
        "id": 341349915,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678666809
    },
    {
        "content": "<p>What's the notation?</p>",
        "id": 341351255,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1678667768
    },
    {
        "content": "<p><code>ℕ ×ₗ ℕ</code> is notation for <code>Lex (Nat × Nat)</code></p>",
        "id": 341398620,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678696765
    }
]