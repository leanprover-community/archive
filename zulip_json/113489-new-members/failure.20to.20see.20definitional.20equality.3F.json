[
    {
        "content": "<p>I'm wondering if this is expected behavior, or if anyone could explain what's happening in the failing case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">f₁</span>        <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">def</span> <span class=\"n\">f₂</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>   <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">f₁</span> <span class=\"n\">h</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">f₂</span> <span class=\"n\">h</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">f₂</span> <span class=\"n\">h</span> <span class=\"c1\">-- ... has type  x ∈ S 0 : Prop but expected to have type ?m.620 &lt; ?m.621 : Prop</span>\n</code></pre></div>\n<p>why does the presence of meta variables in <code>f₂</code>'s type seem to prevent the definition of <code>S</code> from being unfolded?</p>",
        "id": 402617732,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1700198518
    },
    {
        "content": "<p>Here are two workarounds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">f₂</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">f₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>I was trying to make sense of the output of <code>set_option trace.Meta.isDefEq true</code>, and it looks like when it's solving <code>?m.464 &lt; ?m.465 =?= x ∈ S 0 </code> it can't conclude anything, and then it fails. I'm not sure it's able to defer processing until the instance problem is solved.</p>",
        "id": 402655012,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700213777
    },
    {
        "content": "<p>thanks, that latter workaround is more concise than what I did (<code>change at</code>) in my real example</p>",
        "id": 402771310,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1700251247
    }
]