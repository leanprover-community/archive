[
    {
        "content": "<p>I've been going through a few different tutorials, and I've noticed that often my intuition for the next step of a proof is \"do something to both sides of the equation\". But it seems like the tutorial never does this; either they substitute a hypothesis somewhere, or they use a <code>calc</code> block via a clever rearrangement, or they apply a specific lemma by name. But is there some general purpose way to do this? I feel like there should be, since it's generally true that if two things are equal, then if there's any function that they can be fed into, the output will be the same.</p>",
        "id": 393816618,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695941854
    },
    {
        "content": "<p>This is an interesting question, but if you can give some, to ground the discussion it's helpful to have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (\"minimal\" isn't usually necessary, but \"self-contained\" is sufficient)</p>",
        "id": 393817067,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695942112
    },
    {
        "content": "<p>Maybe you simply want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 393817219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695942226
    },
    {
        "content": "<p>On a recent Mathlib you can do fancier things  such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h'</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c1\">-- will create this : f (a + b) = g b</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 393817271,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695942244
    },
    {
        "content": "<p>But that won't work in most tutorials that have not been updated very recently.</p>",
        "id": 393817316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695942282
    },
    {
        "content": "<p>There are a number of \"congruence\" tactics, where \"congruence\" is roughly about proving the goal by proving something involving a part of the LHS and of the RHS of the goal. For example, <code>congr!</code>, <code>convert</code>, <code>convert_to</code>, <code>congrm</code>, and <code>gcongr</code>. The last one can handle inequalities, and <code>congrm</code> lets you zoom in on a related subexpression using a pattern.</p>\n<p>Sometimes \"doing something to both sides of an equation\" like you'd normally want to do is a little inconvenient when formalizing because what you're actually doing is applying some injective function to both sides, and so you would need to show it's in fact injective. Clever rearrangements might be to eliminate needing to do this. <code>apply_fun</code> can also be used on the goal and can set up an auxiliary injectivity goal.</p>",
        "id": 393817799,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695942663
    },
    {
        "content": "<p>Probably 90% of the time it's addition, subtraction, multiplication and division, but there's going to be a long tail of things like unioning with a given set, or taking the limit, or multiplying by a matrix on the left, et</p>",
        "id": 393818710,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695943411
    },
    {
        "content": "<p>So there's certainly going to be a thing where you can't apply the <em>inverse</em> of any given function to both sides and have it be equal, but it should be true for true for taking any function? Not sure what you mean about injectivity</p>",
        "id": 393818801,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695943460
    },
    {
        "content": "<p>I guess there's the case where I want to do this to a hypothesis, and a different case where I want to do it to a goal</p>",
        "id": 393818846,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695943496
    },
    {
        "content": "<p>And I can imagine that for a goal I'd want to prove something like, a = b, and therefore f(a) = f(b), and it just so happens that f(a) equals the thing on the left side of the goal, and f(b) equals the thing on the right side of the goal</p>",
        "id": 393818894,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695943545
    },
    {
        "content": "<p>If you want to prove <code>x = y</code>, it suffices to prove <code>f x = f y</code> if <code>f</code> is injective.</p>",
        "id": 393818895,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695943547
    },
    {
        "content": "<p>if you have <code>h : x = y</code> as a hypothesis, then you can use Patrick's suggestions for applying <code>f</code> to both sides to get a new hypothesis</p>",
        "id": 393819027,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695943637
    },
    {
        "content": "<p>Okay so this seems to be a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 393820376,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695944562
    },
    {
        "content": "<p>But I take it this isn't idiomatic, and I'm interested to get a feel for why not</p>",
        "id": 393821611,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695945497
    },
    {
        "content": "<p>Well this example is a bit too minimal as in this situation I'd just do <code>rw [h]</code>. But I think using <code>apply_fun</code> is idiomatic enough in situations where you want to apply some intermediate function that doesn't just appear in the goal.</p>",
        "id": 393824384,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695947378
    },
    {
        "content": "<p>... huh ... how does <code>rw</code> know what to rewrite it to?</p>",
        "id": 393825911,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695948138
    },
    {
        "content": "<p>it rewrites every occurrence of <code>a</code> to <code>b</code></p>",
        "id": 393825989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695948193
    },
    {
        "content": "<p><span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 393826062,
        "sender_full_name": "Alex Altair",
        "timestamp": 1695948239
    }
]