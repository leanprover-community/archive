[
    {
        "content": "<p>Hello, I have the following lemma that I would like to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">apply_ne_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can't figure out how to do this and none of the automation tactics are making progress. I feel like I'm missing something here, as this looks very easy to prove. In prose, I would <code>intro i</code> and in <code>h</code> apply both sides to <code>i</code> (which I assume in general does not hold unless <code>function.injective a</code>, but here the right side is always 0 ).</p>\n<p>Some pointers would be appreciated a lot :)<br>\nThank you in advance!</p>",
        "id": 340149920,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678205355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> has marked this topic as resolved.</p>",
        "id": 340150205,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678205421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> has marked this topic as unresolved.</p>",
        "id": 340150225,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678205426
    },
    {
        "content": "<p><code>intros i hi</code>, <code>apply h</code>, should get you close to where you need to be</p>",
        "id": 340150797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678205559
    },
    {
        "content": "<p>But I suspect your problem is that the lemma you've written is false</p>",
        "id": 340150918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678205590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Pi.20ne.20zero.20apply/near/340150918\">said</a>:</p>\n<blockquote>\n<p>But I suspect your problem is that the lemma you've written is false</p>\n</blockquote>\n<p>Ah, I see, I had misunderstood how equality of functions is defined.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">apply_ne_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.ne_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This gives the following context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Which is not going to work, I think I got something else wrong in the rest of my proof, I'll inspect it.</p>",
        "id": 340153041,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678206102
    },
    {
        "content": "<p>Don't you want to quantify it existentially instead?</p>",
        "id": 340153251,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678206147
    },
    {
        "content": "<p>I suppose that <code>a ≠ 0</code> means that <em>at least one</em> entry is nonzero.</p>",
        "id": 340153348,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678206173
    },
    {
        "content": "<p>Unfortunately my main theorem requires universal quanitification, but I will dig into it again and resolve this for now.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Pi.20ne.20zero.20apply/near/340153348\">said</a>:</p>\n<blockquote>\n<p>I suppose that <code>a ≠ 0</code> means that <em>at least one</em> entry is nonzero.</p>\n</blockquote>\n<p>Yea, this is what I had misunderstood, but it makes a lot of sense in hindsight, if I just think about these Pi types as vectors.</p>\n<p>Thanks for the help guys!</p>",
        "id": 340154221,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678206389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> has marked this topic as resolved.</p>",
        "id": 340154333,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678206421
    }
]