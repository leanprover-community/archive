[
    {
        "content": "<p>Hi, I don't understand why this code doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"c1\">-- Add a definition to simplify later code</span>\n<span class=\"kd\">def</span> <span class=\"n\">ℝ3</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"c1\">-- I need to add instances to the definition, so that fderiv will typecheck</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">normed_add_comm_group</span> <span class=\"n\">ℝ3</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">ℝ3</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Why doesn't this work?!?</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ3</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">ℝ3</span><span class=\"o\">,</span>  <span class=\"c1\">-- ERROR: \"simplify tactic failed to simplify\"</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero_deriv</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">zero_deriv</span>\n</code></pre></div>\n<p>Specifically, I am puzzled by the fact that the first <code>instance</code> has no problem unfolding my definition, while the second one fails. What's the formal difference between <code>normed_add_comm_group</code> and <code>normed_space</code> that causes this difference?</p>",
        "id": 358848439,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1684271616
    },
    {
        "content": "<p><code>normed_space</code> mentions <code>ℝ3</code> twice (use <code>set_option pp.implicit true</code> to see where)</p>",
        "id": 358848544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684271657
    },
    {
        "content": "<p>Does <code>dunfold ℝ3</code> work?</p>",
        "id": 358848562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684271666
    },
    {
        "content": "<p>Note that the real answer here is probably <code>@[reducible] def ℝ3 := _</code> or even <code> notation `ℝ3` := _ </code></p>",
        "id": 358848603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684271690
    },
    {
        "content": "<p>Also, this is your obligatory reminder that <code>metric.ball (c : fin 3 → ℝ) r</code> is the cube around <code>c</code> of side length <code>2r</code>; not the round ball you were hoping for!</p>",
        "id": 358848739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684271756
    },
    {
        "content": "<p>So my recommendation would be that you actually use <code>notation `ℝ3` := euclidean_space ℝ (fin 3)</code> unless you want your sphere to be cubes!</p>",
        "id": 358849258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684271941
    },
    {
        "content": "<p>Hi, thanks for your useful answers. Yes, <code>dunfold</code> works. I'm curious about the difference, but I guess it's something related to the tactic internal implementation, so I am not sure it's a good idea to dive too much into that while I'm still struggling with the basics.</p>",
        "id": 358849736,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1684272095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Synthesizing.20typeclass.20instances.20for.20definitions/near/358848603\">said</a>:</p>\n<blockquote>\n<p>Note that the real answer here is probably <code>@[reducible] def ℝ3 := _</code> or even <code> notation `ℝ3` := _ </code></p>\n</blockquote>\n<p>What's the difference between the two alternatives?</p>",
        "id": 358849772,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1684272113
    },
    {
        "content": "<blockquote>\n<p>I'm curious about the difference</p>\n</blockquote>\n<p>I never really understood these tactics, but <code>unfold</code> is basically <code>rw</code>, and <code>dunfold</code> is basically <code>dsimp</code>. <code>rw</code> doesn't like rewriting dependent types (it's hard in general, though <code>simp_rw</code> knows how to do it). <code>dsimp</code> is very happy to, because all it ever has to do is say \"the  new state equals the old one by definition\".</p>",
        "id": 358850064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684272209
    },
    {
        "content": "<p>Handwavy explanation:<br>\nRegular def -- you aren't setting an alias, you want a new object that will have separate API, the fact of how it is defined it meant to be an implementation detaiL<br>\nReducible def --- it's a new object, sure, but for many proofs and automation, you want things to automatically see through the implementation to the underlying object<br>\nNotation -- no new object whatsoever, it is just keystroke shorthand for the precise object you are referencing.</p>",
        "id": 358850409,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684272328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Synthesizing.20typeclass.20instances.20for.20definitions/near/358849258\">said</a>:</p>\n<blockquote>\n<p>So my recommendation would be that you actually use <code>notation `ℝ3` := euclidean_space ℝ (fin 3)</code> unless you want your sphere to be cubes!</p>\n</blockquote>\n<p>Thanks for that too. For the moment I'm not sure I'm already caring about balls, but it's good to know. I guess that <code>fin 3 → ℝ</code> by default uses the sup metric, is that true?</p>",
        "id": 358850414,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1684272331
    },
    {
        "content": "<blockquote>\n<p>What's the difference between the two alternatives?</p>\n</blockquote>\n<p>A rough mental model is \"<code>notation</code> is completely transparent and Lean can't tell the difference between it and the original at all\", whereas <code>reducible</code> is \"lean can tell the difference but promises to ignore it most of the time\"</p>\n<p>If it helps, <code>ℝ</code> is a <code>notation</code> not a <code>@[reducible] def</code>.</p>",
        "id": 358850437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684272342
    },
    {
        "content": "<p>Yes exactly, it uses the sup metric</p>",
        "id": 358850585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684272384
    },
    {
        "content": "<p>If that's what you expected, then <code>fin 3 → ℝ</code> is fine.</p>",
        "id": 358850620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684272399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Synthesizing.20typeclass.20instances.20for.20definitions/near/358850409\">said</a>:</p>\n<blockquote>\n<p>Handwavy explanation:<br>\nRegular def -- you aren't setting an alias, you want a new object that will have separate API, the fact of how it is defined it meant to be an implementation detaiL<br>\nReducible def --- it's a new object, sure, but for many proofs and automation, you want things to automatically see through the implementation to the underlying object<br>\nNotation -- no new object whatsoever, it is just keystroke shorthand for the precise object you are referencing.</p>\n</blockquote>\n<p>Thanks. Some explanation along these lines would make for a nice addition to TPIL 10.5, which is what I was reading when trying to write my code.</p>",
        "id": 358850737,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1684272446
    },
    {
        "content": "<p>To add to the mix, there's <code>abbreviation ℝ3 :=</code> which means <code>@[reducible] def </code> but \"oops I forgot to generate the equation lemma\"</p>",
        "id": 358850883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684272491
    }
]