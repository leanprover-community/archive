[
    {
        "content": "<p>Hi everyone. I'm not quite sure how to phrase this question, but I'm hoping for some advice on how to structure definitions.</p>\n<p>Here's my current example. I have a basic definition for categories:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"bp\">→</span> <span class=\"n\">obj</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n  <span class=\"n\">Id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">),</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">A</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n  <span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">),</span> <span class=\"n\">comp</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">h</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n  <span class=\"n\">unit_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">unit_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>I also have a basic definition for posets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Poset</span> <span class=\"n\">where</span>\n  <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n  <span class=\"n\">reflexivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n  <span class=\"n\">antisymmetry</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">rel</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>It's relatively easy to show that an instance of <code>Poset</code> is an instance of <code>Category</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Poset</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">Poset.rel</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Poset</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n  <span class=\"n\">Id</span> <span class=\"o\">:=</span> <span class=\"n\">Poset.reflexivity</span>\n  <span class=\"n\">comp</span> <span class=\"n\">a_le_b</span> <span class=\"n\">b_le_c</span> <span class=\"o\">:=</span> <span class=\"n\">Poset.transitivity</span> <span class=\"n\">b_le_c</span> <span class=\"n\">a_le_b</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">unit_right</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">unit_left</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>But how can I define <code>instance : Category Poset (?)</code>? Or for that matter, <code>instance : Category Category (?)</code>?</p>\n<p>I'm guessing I have to take universe levels into account, like \"Category of Posets whose objects are from universe level <code>u</code>\", but I'm stuck on how to express such a definition.</p>\n<p>I have definitions for what I _would_ put as <code>Hom</code> and <code>Id</code> (I think), but maybe this is also where my approach is misleading me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isMonotone</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PosetHom</span> <span class=\"o\">[</span><span class=\"n\">Poset</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Poset</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n  <span class=\"n\">isMonotone</span> <span class=\"o\">:</span> <span class=\"n\">isMonotone</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PosetId</span> <span class=\"o\">[</span><span class=\"n\">Poset</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">PosetHom</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"n\">isMonotone</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">isMonotone</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Any advice would be appreciated. Thanks!</p>",
        "id": 375651516,
        "sender_full_name": "Jesse Endo Jenks",
        "timestamp": 1689470508
    },
    {
        "content": "<p>You can see how mathlib does it using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Bundled#doc\">docs#CategoryTheory.Bundled</a></p>",
        "id": 375653191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689471418
    },
    {
        "content": "<p>Ok, I think I got it! So far I have something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Pos</span> <span class=\"o\">:=</span> <span class=\"n\">Bundled</span> <span class=\"n\">Poset.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">PosetHom</span> <span class=\"n\">P.α</span> <span class=\"n\">Q.α</span> <span class=\"n\">P.str</span> <span class=\"n\">Q.str</span>\n  <span class=\"n\">Id</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">PosetId</span> <span class=\"n\">P.α</span> <span class=\"n\">P.str</span>\n  <span class=\"c1\">-- ... etc, bit ugly but can be cleanup up later</span>\n</code></pre></div>\n<p>Similarly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Cat</span> <span class=\"o\">:=</span> <span class=\"n\">Bundled</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and once I get to defining functors, I can define something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">Cat</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">⥤</span> <span class=\"n\">Y</span>\n  <span class=\"c1\">-- etc</span>\n</code></pre></div>",
        "id": 375858606,
        "sender_full_name": "Jesse Endo Jenks",
        "timestamp": 1689554739
    },
    {
        "content": "<p>The point about Bundled is that it makes the category instances for you (using mathlib's categories). </p>\n<p>Making category theory again with all the bells and whistles like <code>Bundled</code> will be a lot of work, mathlib has a category theory library where this stuff is made already.</p>",
        "id": 375900742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689575234
    },
    {
        "content": "<p>Understood, this is more so I can learn lean, not to reinvent mathlib. Thanks for the pointers!</p>",
        "id": 376227845,
        "sender_full_name": "Jesse Endo Jenks",
        "timestamp": 1689657867
    }
]