[
    {
        "content": "<p>How can I write <code>{(x₁, x₂, 0) | x₁, x₂ : F}</code> in Lean?  <code>{v : (F × F × F) | v.3 = 0}</code> gets the job done, but isn't similar to the original form.</p>\n<p>I guess I can phrase it as, given <code>f : F → F → F × F × F</code>, is there a syntactic sugar for <code>{v ∈ F × F × F | ∃ x₁ x₂ : F, f(x₁, x₂) = v}</code>?</p>\n<p>Possibly related, <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Init/Set.lean#L87\">what's this</a> and how do I use it?</p>",
        "id": 402065797,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699994513
    },
    {
        "content": "<p>The syntax is more restrictive than you might want, but you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 402067185,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699995047
    },
    {
        "content": "<p>Thanks!  I feel like I tried that and just got errors, but perhaps I got the syntax wrong.</p>",
        "id": 402067837,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1699995322
    },
    {
        "content": "<p>Where can I read about the syntax that's accepted?  For example, why <code>{(x₁, x₂, 0) | (x₁ x₂ : F)}</code> doesn't work.</p>",
        "id": 402229560,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700052498
    },
    {
        "content": "<p><code>import Mathlib.Data.Set.Basic</code> fixes it</p>",
        "id": 402231464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700052960
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8425\">#8425</a> adds documentation</p>",
        "id": 402233912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700053530
    },
    {
        "content": "<p>It doesn't work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">firstTwo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">×</span> <span class=\"n\">F</span> <span class=\"bp\">×</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{(</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>On x₂, I get <code>unexpected identifier; expected ')'</code>.</p>",
        "id": 402235703,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700053986
    },
    {
        "content": "<p><code>(x₁ x₂ : F)</code> isn't allowed, you have to write <code>(x₁ : F) (x₂ : F)</code></p>",
        "id": 402236094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700054079
    },
    {
        "content": "<p>Ok, thanks.  Where can I learn more about why, and what syntax is allowed and what isn't?</p>",
        "id": 402236191,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700054110
    },
    {
        "content": "<p>If you write a version that's legal, you can goto definition on the <code>|</code></p>",
        "id": 402236564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700054203
    },
    {
        "content": "<p>Thanks.  So it turns into ∃ᵉ, good to know.</p>",
        "id": 402238873,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700054749
    },
    {
        "content": "<p>Is there a way to add a constraint to that?  The equivalent of <code>{(x₁, x₂, x₃, x₄)| x₃ = 5x₄ + b} </code>?</p>",
        "id": 402763287,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1700249573
    },
    {
        "content": "<p>It's not pretty, but you can do <code>{(x₁, x₂, x₃, x₄) | (_ : x₃ = 5*x₄ + b)}</code>, since a constraint is the same as saying that there exists a proof that the constraint is satisfied.</p>",
        "id": 402770165,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700250756
    },
    {
        "content": "<p>Eric added such an example in the documentation in this change: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8425/files\">https://github.com/leanprover-community/mathlib4/pull/8425/files</a></p>",
        "id": 402770240,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700250792
    }
]