[
    {
        "content": "<p>Note: if you are working through Proposition and Proofs, you may wish to look first at Alex J. Best suggestions. And then return to compare your answer with mine.</p>\n<p>Would someone get me started on this exercise:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This exercise is related to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_R</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hPQ</span> <span class=\"n\">hPR</span> <span class=\"n\">hQR</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hPQ</span> <span class=\"n\">hPR</span> <span class=\"n\">hQR</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">OR_R</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hPQ</span> <span class=\"n\">hPR</span> <span class=\"n\">hQR</span>  <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">hPQ</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hPR</span> <span class=\"n\">p</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hQR</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>Thank you very much for your time.</p>",
        "id": 384259886,
        "sender_full_name": "Don Burgess",
        "timestamp": 1691845564
    },
    {
        "content": "<p>You are trying to prove an if and only if, so the way to do that is to prove both implications, this is the constructor of <code>Iff</code> in fact, so the first step is <code>Iff.intro</code>.</p>",
        "id": 384285336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691851803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Ex.20from.20Prop.20and.20Proofs.20in.20Theorem.20Proving/near/384285336\">said</a>:</p>\n<blockquote>\n<p>You are trying to prove an if and only if, so the way to do that is to prove both implications, this is the constructor of <code>Iff</code> in fact, so the first step is <code>Iff.intro</code>.</p>\n</blockquote>\n<p>Thank you. I understand the Iff construct.  My question is more basic</p>\n<p>Lets look at the Forward Proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This start gets me no where because the Or factor is inside the hypothesis h.</p>\n<p>How do I declare </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>true from the hypothesis.</p>\n<p>Thanks for your time.</p>",
        "id": 384293594,
        "sender_full_name": "Don Burgess",
        "timestamp": 1691853604
    },
    {
        "content": "<p>Maybe I'm not understanding you, it doesn't sound like what you want makes sense logically, your hypothesis is an implication, you don't know that <code>P or Q</code> is true at this point, only that if it is it implies R.<br>\nThe next step to take is that we are trying to prove an and statement, so we want to break into proving both sides (<code>And.intro</code>)</p>",
        "id": 384295021,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691853933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Ex.20from.20Prop.20and.20Proofs.20in.20Theorem.20Proving/near/384295021\">said</a>:</p>\n<blockquote>\n<p>Maybe I'm not understanding you, it doesn't sound like what you want makes sense logically, your hypothesis is an implication, you don't know that <code>P or Q</code> is true at this point, only that if it is it implies R.<br>\nThe next step to take is that we are trying to prove an and statement, so we want to break into proving both sides (<code>And.intro</code>)</p>\n</blockquote>\n<p>Thank you very much for working with me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hPR</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">hQR</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"o\">⟨</span> <span class=\"n\">hPR</span><span class=\"o\">,</span><span class=\"n\">hQR</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 384307564,
        "sender_full_name": "Don Burgess",
        "timestamp": 1691856970
    },
    {
        "content": "<p>My solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MP</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hPR</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">hQR</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"o\">⟨</span> <span class=\"n\">hPR</span><span class=\"o\">,</span><span class=\"n\">hQR</span> <span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MPR</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">hPQ</span>  <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Or.elim</span> <span class=\"n\">hPQ</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.left</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.right</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">mp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">MP</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n   <span class=\"n\">mpr</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">hPQ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">MPR</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">hPQ</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 384314308,
        "sender_full_name": "Don Burgess",
        "timestamp": 1691859117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634891\">Don Burgess</span> has marked this topic as resolved.</p>",
        "id": 384314810,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691859308
    }
]