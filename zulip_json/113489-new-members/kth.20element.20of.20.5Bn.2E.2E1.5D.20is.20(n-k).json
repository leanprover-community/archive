[
    {
        "content": "<p>Seems like this should be simple but I'm stuck</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">first_n_nat</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">Nat</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vector.nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">first_n_nat</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">kth_of_first_n_nat_equals_n_minus_k</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">first_n_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">k.elim0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">i</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">first_n_nat</span><span class=\"o\">]</span>\n      <span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Fin.mk</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span>\n</code></pre></div>\n<p>It's vacuously true if n==0, and <code>rfl</code> works if k==0. But the remaining case leaves</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">Vector.get</span> <span class=\"o\">(</span><span class=\"n\">first_n_nat</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span>\n<span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">i</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Vector.get</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">first_n_nat</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I assume I need to somehow pull the head out of the vector and subs val with <code>x</code> (<code>Vector.get (first_n_nat i) { val := x, isLt := y } = i - x</code>), but am hitting a wall with these types.</p>",
        "id": 377667767,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690053363
    },
    {
        "content": "<p>There should be a lemma like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Vector.get_cons_succ#doc\">docs#Vector.get_cons_succ</a> ?</p>",
        "id": 377691058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690065643
    },
    {
        "content": "<p>Using the match here is an error I think</p>",
        "id": 377691120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690065690
    },
    {
        "content": "<p>There should be a better induction principle somewhere</p>",
        "id": 377691128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690065704
    },
    {
        "content": "<p>I'm stuck. That's very close but I can't get the <code>{ val := x + 1, isLt := y }</code> into the <code>Fin.succ i</code> that <code>Vector.get_cons_succ</code> expects. What do you mean by a better induction principle?</p>",
        "id": 377717662,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690078711
    },
    {
        "content": "<p>Also by \"there should be\" do you mean, you think there is already one there, or there isn't but someone should make one?</p>",
        "id": 377772791,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690102493
    },
    {
        "content": "<p>I mean \"I think there already is one\"; it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.inductionOn#doc\">docs#Fin.inductionOn</a></p>",
        "id": 377773230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690102652
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cases#doc\">docs#Fin.cases</a> looks like it would suffice too</p>",
        "id": 377773375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690102696
    },
    {
        "content": "<p>Thanks again! Weird, I thought I'd looked all through that page and couldn't find an induction thing. Maybe I was looking at the wrong version.</p>",
        "id": 377776495,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690103543
    },
    {
        "content": "<p>I recommend using the search box for this kind of thing; typing <code>Fin induction</code> is enough to findit</p>",
        "id": 377779146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690104250
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">kth_of_first_n_nat_equals_n_minus_k</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">first_n_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">k.elim0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">i</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">first_n_nat</span><span class=\"o\">]</span>\n      <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"n\">using</span> <span class=\"n\">Fin.inductionOn</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">h0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Vector.get_cons_succ</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n</code></pre></div>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> <br>\nI don't really know what I did here but it worked! I have to imagine this could be a two-liner though if I knew what I was doing....</p>",
        "id": 377965124,
        "sender_full_name": "Dax Fohl",
        "timestamp": 1690163623
    }
]