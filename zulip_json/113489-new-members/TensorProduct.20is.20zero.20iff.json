[
    {
        "content": "<p>Can you give me any hints on how to state and prove that if an element of the tensor product is zero, it can be written as a sum of generators of the kernel of the defining congruence?<br>\nOn paper this is usually taken as the definition. In Lean I think it may need some tricky functional programming. Here's what I have. I'm not hopeful it can be made to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProduct</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"n\">suppress_compilation</span>\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">FreeAddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)),</span>\n      <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">AddCon.mk'</span> <span class=\"n\">_</span> <span class=\"n\">l.sum</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n        <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m₁</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)])</span>\n          <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₁</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₂</span><span class=\"o\">)])</span>\n            <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">)])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span>\n    <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">TensorProduct.induction_on</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨[],</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">fun</span><span class=\"bp\">.</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ihx</span> <span class=\"n\">ihy</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">tmul</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Quotient.exact</span> <span class=\"n\">hx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h'</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">of_zero_left</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨[],</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.sum_nil</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_tmul</span><span class=\"o\">],</span> <span class=\"k\">fun</span><span class=\"bp\">.</span><span class=\"o\">⟩</span>\n        <span class=\"bp\">|</span> <span class=\"n\">of_zero_right</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨[],</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.sum_nil</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">tmul_zero</span><span class=\"o\">],</span> <span class=\"k\">fun</span><span class=\"bp\">.</span><span class=\"o\">⟩</span>\n        <span class=\"c1\">-- | of_add_left =&gt;  -- (not needed)</span>\n        <span class=\"c1\">-- | of_add_right =&gt; -- (not needed)</span>\n        <span class=\"c1\">-- | of_smul =&gt;      -- (not needed)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">add_comm</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- error:</span>\n          <span class=\"c1\">-- dependent elimination failed, failed to solve equation</span>\n          <span class=\"c1\">-- [(m, n)] = List.append (FreeAddMonoid.toList w) (FreeAddMonoid.toList y)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">symm</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hx</span>      <span class=\"c1\">-- not well founded?</span>\n      <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hx</span> <span class=\"c1\">-- not well founded?</span>\n      <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- error:</span>\n        <span class=\"c1\">-- dependent elimination failed, failed to solve equation</span>\n        <span class=\"c1\">--   [(m, n)] = List.append (FreeAddMonoid.toList x) (FreeAddMonoid.toList y)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.sum_cons</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hl</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">List.mem_cons_of_mem</span> <span class=\"n\">head</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hl</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">List.mem_cons_self</span> <span class=\"n\">head</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n          <span class=\"o\">(⟨</span><span class=\"n\">m₁</span><span class=\"o\">,</span> <span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n      <span class=\"bp\">.</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_tmul</span><span class=\"o\">,</span> <span class=\"n\">tmul_neg</span><span class=\"o\">,</span> <span class=\"n\">tmul_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">neg_add</span><span class=\"o\">,</span> <span class=\"n\">add_neg_eq_zero</span><span class=\"o\">]</span>\n      <span class=\"bp\">.</span> <span class=\"n\">change</span> <span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n₂</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tmul_add</span><span class=\"o\">,</span> <span class=\"n\">neg_tmul</span><span class=\"o\">,</span> <span class=\"n\">neg_tmul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">neg_add</span><span class=\"o\">,</span> <span class=\"n\">add_neg_eq_zero</span><span class=\"o\">]</span>\n      <span class=\"bp\">.</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_tmul</span><span class=\"o\">,</span> <span class=\"n\">neg_tmul</span><span class=\"o\">,</span> <span class=\"n\">add_neg_eq_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 404759731,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701223760
    },
    {
        "content": "<p>First, you have not stated what you intented to state (this often happens!), because if <code>x = 0</code>, then it is the sum over the empty list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">FreeAddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)),</span>\n      <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">AddCon.mk'</span> <span class=\"n\">_</span> <span class=\"n\">l.sum</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n        <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m₁</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)])</span>\n          <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₁</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₂</span><span class=\"o\">)])</span>\n            <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">)])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">List.nil</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 404970347,
        "sender_full_name": "Joël Riou",
        "timestamp": 1701301825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/113489-new-members/topic/TensorProduct.20is.20zero.20iff/near/404970347\">said</a>:</p>\n<blockquote>\n<p>First, you have not stated what you intented to state (this often happens!)</p>\n</blockquote>\n<p>Almost always</p>",
        "id": 404970643,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701301986
    },
    {
        "content": "<p>Then, a correct statement should be something about the representatives of elements in the tensor product, and for that, we may have to go into the internals of the definition of the tensor product as a quotient of a free monoid (and not a free abelian group): by definition, this is a quotient by an equivalence relation generated by many relations, it is not exactly like a quotient of an abelian group by a subgroup. Then, in order to phrase what you want, you may introduce the free abelian group on the product of <code>M</code> and <code>N</code>, introduce a subgroup, and then show that the quotient is isomorphic with the tensor product...</p>",
        "id": 404971334,
        "sender_full_name": "Joël Riou",
        "timestamp": 1701302392
    },
    {
        "content": "<p>Possibly this, but just now I'm tired and not really thinking.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">FreeAddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">AddCon.mk'</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">FreeAddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)),</span>\n      <span class=\"n\">addConGen</span> <span class=\"o\">(</span><span class=\"n\">Eqv</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">l.sum</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n        <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m₁</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m₂</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)])</span> <span class=\"bp\">∨</span>\n          <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₁</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n₂</span><span class=\"o\">)])</span> <span class=\"bp\">∨</span>\n            <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">)])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 404971600,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701302482
    },
    {
        "content": "<p>Thank you for the thoughts! I will give them due attention. Later.</p>",
        "id": 404972052,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701302612
    },
    {
        "content": "<p>Now, the proof is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">List.nil</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">AddCon.eq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I do not think there is a nice statement unless it is rephrased using quotients of abelian groups (or modules). Note also that <code>FreeAddMonoid</code> is the free (non abelian!) additive monoid.</p>",
        "id": 404973309,
        "sender_full_name": "Joël Riou",
        "timestamp": 1701303227
    },
    {
        "content": "<p>Excellent. At least now I know it is not worth <code>sorry</code>ing this and continuing the argument. I really need to get it down.</p>",
        "id": 404973878,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701303451
    },
    {
        "content": "<p>The result I want is what Dummit and Foote use here. I'd say it's moderately subtle and easily overlooked, but I don't fault D&amp;F or Mathlib. Just a bit of an impedance mismatch.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><a href=\"/user_uploads/3121/uQnaMvEZq69GUq0SkEomCyhm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uQnaMvEZq69GUq0SkEomCyhm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/uQnaMvEZq69GUq0SkEomCyhm/image.png\"></a></div></div></div>",
        "id": 404974532,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701303623
    },
    {
        "content": "<p>In case anyone wants to follow along using the book, I can save you some time by saying that \"Equation 6 in the previous section ...\" means equation 10.6  on p.364, here:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><a href=\"/user_uploads/3121/uzeLeMj-XBL0dPxpvpXczBkU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uzeLeMj-XBL0dPxpvpXczBkU/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/uzeLeMj-XBL0dPxpvpXczBkU/image.png\"></a></div></div></div>",
        "id": 404975283,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701303967
    }
]