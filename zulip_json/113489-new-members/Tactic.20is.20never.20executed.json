[
    {
        "content": "<p>Why does Lean not want my proof that <code>p \\leq 1</code> in this variable definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.ProbabilityMassFunction.Constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">PMF.bernoulli</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">]))</span> <span class=\"c1\">-- tactic is never executed</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/n5okAZKaEaQFA53TXLHjEfrM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/n5okAZKaEaQFA53TXLHjEfrM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/n5okAZKaEaQFA53TXLHjEfrM/image.png\"></a></div>",
        "id": 400227495,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699059935
    },
    {
        "content": "<p>I think it wants you to write a theorem that uses hf</p>",
        "id": 400282861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699092870
    },
    {
        "content": "<p>that's probably a bug in the linter that it doesn't ignore that location, although it is arguably also a bug in <code>variable</code> that it doesn't actually run the tactic</p>",
        "id": 400285710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699094253
    },
    {
        "content": "<p>because it means that you don't get any error if you write something bogus there, leading to <a href=\"https://github.com/leanprover/lean4/pull/2226\">lean4#2226</a></p>",
        "id": 400285800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699094326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , I have lemmas in this file that use <code>hf</code> but the linter still complains.</p>",
        "id": 400321019,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699124992
    },
    {
        "content": "<p>This leads to no errors, which shouldn't be right because <code>_</code> can't be inferred from the rest:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">PMF.bernoulli</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400321263,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699125303
    },
    {
        "content": "<p>I wonder if it's that the <code>runTermElabM</code> block in the <code>variable</code> definition isn't doing <code>synthesizeSyntheticMVars</code></p>",
        "id": 400321295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699125362
    },
    {
        "content": "<p>I tried that, Kyle, and I noticed that once I used <code>hf</code> in a proof, I got a red underline under the <code>_</code>. But only after using <code>hf</code> in a proof.</p>",
        "id": 400321336,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1699125375
    },
    {
        "content": "<p>Synthesizing synthetic mvars doesn't solve the <code>_</code> problem, but it does cause <code>by simp [hp]</code> to evaluate at least.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.ProbabilityMassFunction.Constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"c1\">-- A new `variable` command based on the old one, but synthesize synthetic mvars</span>\n<span class=\"kn\">open</span> <span class=\"kn\">private</span> <span class=\"n\">replaceBinderAnnotation</span> <span class=\"k\">in</span> <span class=\"n\">Lean.Elab.Command.elabVariable</span> <span class=\"k\">in</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"variable'\"</span> <span class=\"n\">binders</span><span class=\"o\">:(</span><span class=\"n\">bracketedBinder</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- Try to elaborate `binders` for sanity checking</span>\n  <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.withAutoBoundImplicit</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Term.elabBinders</span> <span class=\"n\">binders</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"n\">for</span> <span class=\"n\">binder</span> <span class=\"k\">in</span> <span class=\"n\">binders</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">binders</span> <span class=\"bp\">←</span> <span class=\"n\">replaceBinderAnnotation</span> <span class=\"n\">binder</span>\n    <span class=\"c1\">-- Remark: if we want to produce error messages when variables shadow existing ones, here is the place to do it.</span>\n    <span class=\"n\">for</span> <span class=\"n\">binder</span> <span class=\"k\">in</span> <span class=\"n\">binders</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">varUIds</span> <span class=\"bp\">←</span> <span class=\"n\">getBracketedBinderIds</span> <span class=\"n\">binder</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mapM</span> <span class=\"o\">(</span><span class=\"n\">withFreshMacroScope</span> <span class=\"bp\">∘</span> <span class=\"n\">MonadQuotation.addMacroScope</span><span class=\"o\">)</span>\n      <span class=\"n\">modifyScope</span> <span class=\"k\">fun</span> <span class=\"n\">scope</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">scope</span> <span class=\"k\">with</span> <span class=\"n\">varDecls</span> <span class=\"o\">:=</span> <span class=\"n\">scope.varDecls.push</span> <span class=\"n\">binder</span><span class=\"o\">,</span> <span class=\"n\">varUIds</span> <span class=\"o\">:=</span> <span class=\"n\">scope.varUIds</span> <span class=\"bp\">++</span> <span class=\"n\">varUIds</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span><span class=\"bp\">'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">PMF.bernoulli</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">]))</span>\n</code></pre></div>",
        "id": 400321749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699125857
    }
]