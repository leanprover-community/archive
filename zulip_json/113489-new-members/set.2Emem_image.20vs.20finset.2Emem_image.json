[
    {
        "content": "<p>Here is the definition of  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_image\">docs#set.mem_image</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">set.mem_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.mem_image\">docs#finset.mem_image</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">finset.mem_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Besides the specific notation <code>''</code> for set images, you see that the right hand sides have different forms, which (it seems to me) makes the automatic translation from one to the other a bit awkward. (I noticed that while trying to pass a proof from <code>set</code> to <code>finset</code>.)<br>\nShould “one” wish to unify them ? and which form would be the preferred one?</p>",
        "id": 265412519,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639825739
    },
    {
        "content": "<p>I think we should definitely unify them to have the same form on the RHS</p>",
        "id": 265412844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826190
    },
    {
        "content": "<p>I'd lean towards the second one, since them <code>simp</code> can be used to take it into the first one if desired</p>",
        "id": 265412865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826250
    },
    {
        "content": "<p>But it doesn't matter much</p>",
        "id": 265412870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826263
    },
    {
        "content": "<p>You mean that <code>simp</code> can create an <code>and</code> but tailord not to destruct it?<br>\nIf I wish to do this unification, do I have to proceed as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> proposed me to do for commutators?</p>",
        "id": 265412996,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639826408
    },
    {
        "content": "<p>Simp knows about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_prop\">docs#exists_prop</a> which rewrites the second lemma into the first</p>",
        "id": 265413322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826822
    },
    {
        "content": "<p>I'd wait for a second opinion on which is the better choice before embarking on the refactor</p>",
        "id": 265413340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826876
    },
    {
        "content": "<p>You could do a <code>/poll</code></p>",
        "id": 265413395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639826898
    },
    {
        "content": "<p>I personally like <code>∃ x : α, x ∈ s ∧ f x = y</code> better. It looks more like what one would write on paper.</p>",
        "id": 265414575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639828719
    },
    {
        "content": "<p>The advantage of the other proposition is that you only ever need to write <code>∃ x ∈ s, f x = y</code>, which looks ever more like what you would write on paper.</p>",
        "id": 265414745,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639828901
    },
    {
        "content": "<p>I copy here links to a thread with answers of <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> : <br>\n<a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Questions.20about.20lemmas.20regarding.20images.20of.20sets.2Ffinsets\">#new members &gt; Questions about lemmas regarding images of sets/finsets</a></p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/Questions.20about.20lemmas.20regarding.20images.20of.20sets.2Ffinsets/near/265414575\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Questions.20about.20lemmas.20regarding.20images.20of.20sets.2Ffinsets/near/265414575</a></p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/Questions.20about.20lemmas.20regarding.20images.20of.20sets.2Ffinsets/near/265414745\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Questions.20about.20lemmas.20regarding.20images.20of.20sets.2Ffinsets/near/265414745</a></p>",
        "id": 265420166,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639836279
    }
]