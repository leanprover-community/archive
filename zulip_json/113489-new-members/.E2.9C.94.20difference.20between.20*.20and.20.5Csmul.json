[
    {
        "content": "<p>Hi, can anyone tell me what is the difference between * and \\smul? I'm trying to define the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Error: failed to synthesize instance  HSMul ℝ ℕ ?m.181</p>\n<p>It fails with the 'failed to synthesise instance' error when using \\smul but works if I change \\smul to *. Is there any way to tell Lean that I want the result to be a real number.</p>",
        "id": 392249554,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1695272970
    },
    {
        "content": "<p>In general we use smul for left actions. Put more concretely, if <code>a : k</code> and <code>v : V</code> then <code>a \\smul v : V</code>. I'm using vector space notation here to give an indication as to an example usage. So you'd be better off using <code>*</code> in your example, which is completely heterogeneous.</p>",
        "id": 392250157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695273303
    },
    {
        "content": "<p>you mean homogeneous?</p>",
        "id": 392250190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695273343
    },
    {
        "content": "<p>Moreover, <code>\\smul</code> requires the second argument to have the same type as the result.</p>",
        "id": 392250268,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695273397
    },
    {
        "content": "<p>Oh do I? Maybe. I didn't but sounds like I'm wrong about mul. Being homogeneous is also fine though because then lean will get the coercions right</p>",
        "id": 392250573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695273636
    },
    {
        "content": "<p>Apparently they're completely identical and both completely heterogeneous:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n    <span class=\"n\">hMul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HSMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n    <span class=\"n\">hSMul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n</code></pre></div>\n<p>so we're having them just for different notations? If <a href=\"https://github.com/leanprover-community/mathlib4/pull/6852\">#6852</a> is in maybe they'll be more different ...</p>",
        "id": 392251067,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695274005
    },
    {
        "content": "<p>they differ in their <code>@[default_instance]</code>s</p>",
        "id": 392251837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695274585
    },
    {
        "content": "<p>Does this homogeneous-by-default <a href=\"https://github.com/leanprover/lean4/blob/325fab1c1db791101a71610160d1359dced5719e/doc/typeclass.md?plain=1#L436-L438\">Mul instance</a> exists as actual Lean code? I've only found this default <a href=\"https://github.com/leanprover-community/mathlib4/blob/9fbca06f59749829b28b94be963b5592d591dc6a/Mathlib/Algebra/Group/Defs.lean#L95-L97\">HSMul instance</a> in mathlib4</p>",
        "id": 392253014,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695275466
    },
    {
        "content": "<p>thank you for all the helpful replies. After changing \\smul to *, Lean now wants me to show the following goal and I am not sure how to proceed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>For some context, I am trying to proof the Schlömilch's generalization of the Cauchy condensation test. Also, is there a Finset.sum_nsmul but for reals and HMul instead? Thank you!</p>",
        "id": 392262102,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1695280751
    },
    {
        "content": "<p>Go left, use <code>norm_cast</code> and then <code>ring</code></p>",
        "id": 392269690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695283816
    },
    {
        "content": "<p>If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (i.e. a more precise question) then you'll get more precise answers.</p>",
        "id": 392269788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695283856
    },
    {
        "content": "<p>Here is a mwe, trying to follow the proof of Cauchy condensation test and rewriting it to suit Schlömilch's generalization.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span> <span class=\"n\">Topology</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_schlomilch_le'</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_u_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ihn</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sum_Ico_consecutive</span><span class=\"o\">]</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">add_le_add</span> <span class=\"n\">ihn</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">h_u_mono</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">n.zero_le</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">h_u_mono</span> <span class=\"n\">n.zero_le</span> <span class=\"n\">n.le_succ</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_of_le</span> <span class=\"n\">le_rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"o\">(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">hk</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">hk</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">convert</span> <span class=\"n\">sum_le_sum</span> <span class=\"n\">this</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">left</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h_u_mono</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">norm_cast</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_schlomilch_le</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_u_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_succ_diff</span><span class=\"o\">:</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>\n    <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h_succ_diff</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hC_pos</span><span class=\"o\">,</span> <span class=\"n\">h_bounded</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_succ'</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>\n  <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">h_bounded</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n  <span class=\"n\">simp</span>\n  <span class=\"k\">calc</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sum_le_sum</span> <span class=\"n\">this</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- HERE: is there a Finset.sum_nsmul but for reals and HMul instead?</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span>\n      <span class=\"o\">(</span><span class=\"n\">sum_schlomilch_le'</span> <span class=\"n\">hf</span> <span class=\"n\">h_pos</span> <span class=\"n\">h_u_mono</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hC_pos</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>With norm_cast and ring, we are now stuck on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Int.subNatNat</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 392281322,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1695287760
    },
    {
        "content": "<p><del>Your code doesn't seem to compile on mathlib master. Are you using an old mathlib? What commit?</del><br>\nOh -- it's not supposed to compile -- you just didn't <code>sorry</code> the goal so I get an error (usually mwe's don't have errors). Yeah if you have <code>Int.subNatNat</code> then that's pretty weird, I wonder where that came from.</p>",
        "id": 392282186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695288045
    },
    {
        "content": "<p>But this goal isn't true: you have done natural subtraction, which you should avoid like the plague. An example of your goal is (0 : Real) - (1 : Real) = ((0 - 1 : Nat) : Real), which is false because the subtraction in naturals is pathological.</p>\n<p>Edit: oh I see, you're OK because you have <code>h_u_mono</code> guaranteeing that the subtraction is \"safe\".</p>",
        "id": 392282709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695288239
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">left</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h_u_mono</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"c1\">-- the missing assumption</span>\n  <span class=\"n\">norm_cast</span>\n</code></pre></div>",
        "id": 392283713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695288561
    },
    {
        "content": "<p>Oops, mwe should compile now. Thanks for the help. Is there anyway we can tell Lean to use a specific subtraction? Sorry for the messy code! Here is an updated mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span> <span class=\"n\">Topology</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_schlomilch_le'</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_u_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_schlomilch_le</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_u_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_succ_diff</span><span class=\"o\">:</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>\n    <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h_succ_diff</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hC_pos</span><span class=\"o\">,</span> <span class=\"n\">h_bounded</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">C</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hC_pos</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_succ'</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>\n    <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">h_bounded</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n    <span class=\"n\">simp</span>\n    <span class=\"k\">calc</span>\n      <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>\n      <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sum_le_sum</span> <span class=\"n\">this</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- HERE: is there a Finset.sum_nsmul but for reals and HMul instead?</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span>\n        <span class=\"o\">(</span><span class=\"n\">sum_schlomilch_le'</span> <span class=\"n\">hf</span> <span class=\"n\">h_pos</span> <span class=\"n\">h_u_mono</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hC_pos</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Not sure how to take <code>C : ℝ</code> outside from the summand. I don't think I can use Finset.sum_nsmul. Is there an equivalent for real numbers?</p>",
        "id": 392289201,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1695290630
    },
    {
        "content": "<p>For subtraction, lean will use the subtraction appropriate for the terms you give it. It wasn't your fault lean used natural subtraction there, you were summing from a to b so a&lt;=b is kind of an inbuilt assumption. For removing C from a summand, the trick is to either to learn the naming convention (if <code>Finset.sum_nsmul</code> tells you how to remove a natural smul from a sum, what about a general smul?) or to exit the proof you're working, write the general statement of what you want to be true in a new <code>example</code> and try and prove it with <code>exact?</code>.</p>",
        "id": 392297214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695293786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649373\">Jeremy Toh</span> has marked this topic as resolved.</p>",
        "id": 392694196,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695472852
    }
]