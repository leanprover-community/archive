[
    {
        "content": "<p>I am looking at <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Geometry/Euclidean/Inversion.lean\">Inversion.lean</a>.  In the <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/geometry/euclidean/inversion.lean\">Lean 3 version</a>, this has a proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_dist_le_mul_dist_add_mul_dist</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- If one of the points `b`, `c`, `d` is equal to `a`, then the inequality is trivial.</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">add_nonneg</span><span class=\"o\">,</span> <span class=\"n\">mul_nonneg</span><span class=\"o\">,</span> <span class=\"n\">dist_nonneg</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Otherwise, we apply the triangle inequality to `euclidean_geometry.inversion a 1 b`,</span>\n<span class=\"cm\">  `euclidean_geometry.inversion a 1 c`, and `euclidean_geometry.inversion a 1 d`. -/</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">dist_triangle</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hb</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">dist_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">div_le_div_right</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">))],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Similarly in Lean 4 we have (so far):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_dist_le_mul_dist_add_mul_dist</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- If one of the points `b`, `c`, `d` is equal to `a`, then the inequality is trivial.</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass.zero_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">add_nonneg</span><span class=\"o\">,</span> <span class=\"n\">mul_nonneg</span><span class=\"o\">,</span> <span class=\"n\">dist_nonneg</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hd</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass.mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Otherwise, we apply the triangle inequality to `euclidean_geometry.inversion a 1 b`,</span>\n<span class=\"cm\">    `euclidean_geometry.inversion a 1 c`, and `euclidean_geometry.inversion a 1 d`. -/</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">dist_triangle</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hb</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">dist_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">div_le_div_right</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">))]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">H</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"bp\">·</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n      <span class=\"n\">ring_nf</span>\n</code></pre></div>\n<p>where the Lean 3 had <code>ring</code> as the last step and Lean 4 is suggesting that this be replaced by <code>ring_nf</code>.</p>\n<p>Line 140 which is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">·</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>replacing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>has a red arrow under the dot:</p>\n<p><a href=\"/user_uploads/3121/3X3_-6ePGjZpcrvk2a9A84ZL/Screenshot-from-2023-05-26-17-34-01.png\">Screenshot-from-2023-05-26-17-34-01.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3X3_-6ePGjZpcrvk2a9A84ZL/Screenshot-from-2023-05-26-17-34-01.png\" title=\"Screenshot-from-2023-05-26-17-34-01.png\"><img src=\"/user_uploads/3121/3X3_-6ePGjZpcrvk2a9A84ZL/Screenshot-from-2023-05-26-17-34-01.png\"></a></div><p>I think this indicates not a syntax error but rather the presence of  these unsolved goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">h.e'_3.h.e</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.37885</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">P</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"n\">b</span><span class=\"bp\">✝</span><span class=\"n\">c</span><span class=\"bp\">✝</span><span class=\"n\">d</span><span class=\"bp\">✝</span><span class=\"n\">xyz</span><span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">abcd</span><span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">hb</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"n\">hc</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n<span class=\"n\">hd</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">HDiv.hDiv</span> <span class=\"bp\">=</span> <span class=\"n\">HMul.hMul</span>\n</code></pre></div>\n<p>I would appreciate any hints on how to fix this proof.  With this fixed, removal of <code>include V</code> on line 38, and lower-case of .Surjective, .Injective and .Bijective on lines 99, 103, and 107, this file would be ported.</p>",
        "id": 361443044,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685137098
    },
    {
        "content": "<p>This seems to be asking for a proof that division of real numbers is the same function as multiplication of real numbers.  If this is the case, I hope that you will not be able to close this goal!</p>",
        "id": 361443932,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685137502
    },
    {
        "content": "<p>More to the point, the <code>convert</code> is going too deep</p>",
        "id": 361444875,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685137920
    },
    {
        "content": "<p>You'll need to change it to <code>convert H using 1</code> (or 2, or 3, ..., whichever creates reasonable goals)</p>",
        "id": 361444996,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685137978
    },
    {
        "content": "<p>It can be helpful to compare to the goals generated in mathlib3, if you've got that around</p>",
        "id": 361445072,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685138009
    },
    {
        "content": "<p>Good point <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  I'll try downloading Mathlib3 and see if VS Code can figure out that it's Lean 3 in a Lean 3 directory.  I don't understand the underlying software architecture.</p>",
        "id": 361466013,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685151743
    },
    {
        "content": "<p>As part of setup I am trying to load the cache for Lean 3 mathlib and I get this response:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span>  <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">installing</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">toolchain</span> <span class=\"bp\">'</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">51</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">the</span> <span class=\"n\">binary</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">catskills</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"c1\">--lean---3.51.1/bin/lake`</span>\n</code></pre></div>\n<p>Is <code>lake</code> and binary cacheing only for Lean 4?</p>",
        "id": 361466651,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685152335
    },
    {
        "content": "<p>I will try a fresh install of Lean 3 using </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wget</span> <span class=\"bp\">-</span><span class=\"n\">q</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">-</span><span class=\"n\">tools</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">install_debian.sh</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">bash</span> <span class=\"n\">install_debian.sh</span> <span class=\"bp\">;</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">install_debian.sh</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">source</span> <span class=\"bp\">~/.</span><span class=\"n\">profile</span>\n</code></pre></div>\n<p>at the risk this might confuse my currently working Lean 4 setup.  Are there any notes on how to install Lean 3 and Lean 4 together on the same Linux account on Ubuntu?</p>",
        "id": 361466997,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685152628
    },
    {
        "content": "<p>I guess I can do <code>mv .local lean4.local</code> but that doesn't make it easy to run both versions simultaneously.  The <code>wget</code> script above wants to reinstall <code>.local/pipx/venvs/mathlibtools</code>.  I don't know if that virtualenv is the same for Lean 3 and Lean 4.</p>",
        "id": 361467161,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685152769
    },
    {
        "content": "<p>I think I figured it out, I need to do a <code>leanproject get tutorials</code> in a new directory, then copy the problematic file to that project and open it there, and it will be Lean 3 at that point.  After which I'm hoping my Lean 4 still works.</p>",
        "id": 361468281,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685153860
    },
    {
        "content": "<p>Actually the Lean 3 source is in the project under _target/src so all is well on the Lean 3 side.</p>",
        "id": 361468596,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685154096
    },
    {
        "content": "<p>I now have Lean 3 and Lean 4 running side by side for the same proof.  I can see that up to the penultimate line, the proof states are the same, although the details of the tactic state is quite different in 3 and 4.  Here is the Lean 3 tactic state just before the last line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span>\n<span class=\"n\">abcd</span><span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span>\n<span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n<span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Here is the Lean 4 tactic state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">inr.inr.inr</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.6894</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">P</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"n\">b</span><span class=\"bp\">✝</span><span class=\"n\">c</span><span class=\"bp\">✝</span><span class=\"n\">d</span><span class=\"bp\">✝</span><span class=\"n\">xyz</span><span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">abcd</span><span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">hb</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"n\">hc</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n<span class=\"n\">hd</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">≤</span>\n  <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 361472888,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685157890
    },
    {
        "content": "<p>The problematic last line in Lean 3 is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">convert</span> <span class=\"n\">H</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and in Lean 4 is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">convert</span> <span class=\"n\">H</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"bp\">·</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n      <span class=\"n\">ring_nf</span>\n</code></pre></div>\n<p>I think I read somewhere that Lean 4 was Python-ish i.e. white space sensitive.  It could be as simple as an indentation problem.</p>",
        "id": 361472999,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685157993
    },
    {
        "content": "<p>that indentation should be fine, although I have been rewriting those kind of proofs to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">convert</span> <span class=\"n\">H</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 361473110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685158086
    },
    {
        "content": "<p>I think we should have a style guide thing against using <code>.</code> as the second argument of a tactic combinator like <code>&lt;;&gt;</code></p>",
        "id": 361473167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685158151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  with that slight change, here is the Lean 3 self-contained example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inversion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">/</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dist_inversion_inversion</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">inversion</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">dist_vadd_cancel_right</span><span class=\"o\">,</span> <span class=\"n\">dist_eq_norm_vsub</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">],</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dist_vsub_cancel_right</span><span class=\"o\">]</span>\n    <span class=\"n\">using</span> <span class=\"n\">dist_div_norm_sq_smul</span> <span class=\"o\">(</span><span class=\"n\">vsub_ne_zero.2</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vsub_ne_zero.2</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_dist_le_mul_dist_add_mul_dist</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">add_nonneg</span><span class=\"o\">,</span> <span class=\"n\">mul_nonneg</span><span class=\"o\">,</span> <span class=\"n\">dist_nonneg</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">dist_triangle</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hb</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">dist_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">div_le_div_right</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">))],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">H</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Here is the Lean 4 self-contained:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inversion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">/</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dist_inversion_inversion</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">R</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inversion</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">dist_vadd_cancel_right</span><span class=\"o\">,</span> <span class=\"n\">dist_eq_norm_vsub</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dist_vsub_cancel_right</span><span class=\"o\">]</span> <span class=\"n\">using</span>\n    <span class=\"n\">dist_div_norm_sq_smul</span> <span class=\"o\">(</span><span class=\"n\">vsub_ne_zero.2</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vsub_ne_zero.2</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_dist_le_mul_dist_add_mul_dist</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass.zero_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">add_nonneg</span><span class=\"o\">,</span> <span class=\"n\">mul_nonneg</span><span class=\"o\">,</span> <span class=\"n\">dist_nonneg</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hd</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass.mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">dist_triangle</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hb</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_inversion_inversion</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">dist_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">div_le_div_right</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">))]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">H</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Placing my cursor just after the <code>convert H;</code>, the Lean 3 tactic state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span>\n<span class=\"n\">abcd</span><span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span>\n<span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n<span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>For Lean 4 I put the cursor after the <code>convert H &lt;;&gt;</code>.  It doesn't give me the tactic state at that point which is on line 32.  Instead it underlines the <code>by</code> on the 19th line, and the tactic state is referring to the whole thing and is very long:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">h.e'_3.h.e</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.6894</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">P</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"n\">b</span><span class=\"bp\">✝</span><span class=\"n\">c</span><span class=\"bp\">✝</span><span class=\"n\">d</span><span class=\"bp\">✝</span><span class=\"n\">xyz</span><span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">abcd</span><span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">hb</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"n\">hc</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n<span class=\"n\">hd</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">d</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">HDiv.hDiv</span> <span class=\"bp\">=</span> <span class=\"n\">HMul.hMul</span>\n\n<span class=\"bp\">...</span><span class=\"n\">too</span> <span class=\"n\">long</span> <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">Zulip</span> <span class=\"n\">message.</span>\n</code></pre></div>",
        "id": 361473708,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685158624
    },
    {
        "content": "<p>as was mentioned above, <code>convert</code> is going too far, <code>convert H using 1</code> works here</p>",
        "id": 361475071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685159954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  somebody checked in a solution.  This incorrect line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">convert</span> <span class=\"n\">H</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>became</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">calc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">H</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb.ne'</span><span class=\"o\">,</span> <span class=\"n\">hc.ne'</span><span class=\"o\">,</span> <span class=\"n\">hd.ne'</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>This uses <code>ring</code>.   I don't know why Lean Infoview was telling me to replace that with <code>ring_nf</code> a few days ago.</p>",
        "id": 361554511,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685188761
    },
    {
        "content": "<p>as I said, <code>convert H using 1 &lt;;&gt; (field_simp [hb.ne', hc.ne', hd.ne', dist_comm a]; ring_nf)</code> is a proof</p>",
        "id": 361554664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685188801
    },
    {
        "content": "<p>actually <code>convert H using 1 &lt;;&gt; (field_simp [hb.ne', hc.ne', hd.ne', dist_comm a]; ring)</code> is also a proof. <code>ring</code> suggests <code>ring_nf</code> if it fails</p>",
        "id": 361554972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685188867
    },
    {
        "content": "<p>I think this was solved by <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>.</p>",
        "id": 361555635,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685189034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> has marked this topic as resolved.</p>",
        "id": 361555735,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685189045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> you are ignoring messages being sent to you</p>",
        "id": 361555881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685189085
    },
    {
        "content": "<p>the fix for your original issue is to add <code>using 1</code> and nothing more to the original proof</p>",
        "id": 361556270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685189177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> this got fixed by someone else while I was asleep. I don't have any other DMs.  I greatly appreciate your help.</p>",
        "id": 361556513,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685189247
    },
    {
        "content": "<p>the last 3 messages I have sent in this thread are all saying the same thing</p>",
        "id": 361556716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685189288
    },
    {
        "content": "<p>also <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Unsolved.20goals.20in.20proof.20to.20port/near/361444996\">this earlier message</a></p>",
        "id": 361556834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685189326
    },
    {
        "content": "<p>You're right, I'm sorry for missing that. I was focusing on getting Lean 3 and Lean 4 set up side by side so I could find the point of divergence, then I went to sleep.</p>",
        "id": 361557392,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685189458
    },
    {
        "content": "<p>So I was focused on the mechanical task of just being able to view the same tactic state in two different versions.</p>",
        "id": 361557540,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685189500
    },
    {
        "content": "<p>Also the calc fix is apparently due to <span class=\"user-mention silent\" data-user-id=\"255580\">Jason Yuen</span> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/4375/commits/bc0ee293e3ec52affde108232f3f1a6158828b50\">https://github.com/leanprover-community/mathlib4/pull/4375/commits/bc0ee293e3ec52affde108232f3f1a6158828b50</a>)</p>",
        "id": 361557710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685189544
    },
    {
        "content": "<p>it should have gotten a <code>Porting note</code> because that's definitely a regression</p>",
        "id": 361558034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685189633
    },
    {
        "content": "<p>Here's a PR to recover the convert proof: <a href=\"https://github.com/leanprover-community/mathlib4/pull/4421\">mathlib4#4421</a></p>",
        "id": 361574698,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685194035
    }
]