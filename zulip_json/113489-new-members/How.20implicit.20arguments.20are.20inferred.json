[
    {
        "content": "<p>Can someone help me understand how implicit arguments are inferred? When I try to leave an argument implicit, even though I have the right type in context, it fails to fill it in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">cotransitive_pos_of_neg_pos</span> <span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">?</span><span class=\"n\">m.20834</span> <span class=\"n\">hab</span> <span class=\"n\">hac</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"n\">R</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">R₂</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"n\">R₂</span>\n<span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">Coequivalence</span> <span class=\"n\">R</span>\n<span class=\"n\">hab</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">cs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">destutter'</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">cs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">destutter'</span> <span class=\"n\">R</span> <span class=\"n\">b</span> <span class=\"n\">cs</span><span class=\"o\">)</span>\n<span class=\"n\">ht</span><span class=\"o\">:</span> <span class=\"n\">Cotransitive</span> <span class=\"n\">R</span>\n<span class=\"n\">hac</span><span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Cotransitive</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>I have an instance of <code>Cotransitive R</code> right there, but it doesn't pull it in... I don't know why.</p>",
        "id": 407586283,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702421784
    },
    {
        "content": "<p>More generally, any good guide to how to deal with explicit/implicit/strict-implicit/[...] binders? And when to use them? And how to best pass them? I couldn't find a guide _anywhere_</p>",
        "id": 407586345,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702421825
    },
    {
        "content": "<p>They're solved purely by unification. It won't do <code>by assumption</code> to try to fill them in.</p>",
        "id": 407587160,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702422215
    },
    {
        "content": "<p>(strict implicit vs implicit are the same in this way; they just have to do with how eager the arguments get filled in with a metavariable)</p>",
        "id": 407587271,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702422268
    },
    {
        "content": "<p>I've thought about how it would be nice to have a new binder type that like an implicit but solves for itself using <code>by assumption</code>. This would make it easy to pass around additional facts without needing to hook it into the typeclass system, which is what <code>[...]</code> binders are about</p>",
        "id": 407587453,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702422382
    },
    {
        "content": "<p>I can't seem to find all the binder types in the Lean 4 reference manual... The Lean 3 reference manual mentions them: <a href=\"https://lean-lang.org/reference/expressions.html#implicit-arguments\">https://lean-lang.org/reference/expressions.html#implicit-arguments</a> They're basically the same, except now <code>(x : α . t)</code> is <code>(x : α := by t)</code></p>",
        "id": 407587733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702422568
    },
    {
        "content": "<p>Theorem Proving in Lean mentions implicit arguments: <a href=\"https://lean-lang.org/theorem_proving_in_lean4/dependent_type_theory.html?highlight=implicit#implicit-arguments\">https://lean-lang.org/theorem_proving_in_lean4/dependent_type_theory.html?highlight=implicit#implicit-arguments</a></p>",
        "id": 407587956,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702422682
    },
    {
        "content": "<p>So does Functional Programming in Lean: <a href=\"https://lean-lang.org/functional_programming_in_lean/getting-to-know/polymorphism.html#implicit-arguments\">https://lean-lang.org/functional_programming_in_lean/getting-to-know/polymorphism.html#implicit-arguments</a></p>",
        "id": 407588072,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702422733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/How.20implicit.20arguments.20are.20inferred/near/407587160\">said</a>:</p>\n<blockquote>\n<p>They're solved purely by unification.</p>\n</blockquote>\n<p>In particular, what this means is that they have to be solvable from the expected type and all the explicit arguments (and maybe in some cases from typeclass arguments too). It does not take the local context into account.</p>",
        "id": 407588164,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702422789
    },
    {
        "content": "<p>Okay, but when I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then it knows to build the <code>Polynomial</code> from the <code>LinearOrderedSemiring</code> structure that I have in context. I also know that I could pass the necessary <code>[Semiring R]</code> argument to <code>@Polynomial</code> if I wanted to. Why does <em>that</em> work?</p>",
        "id": 407590200,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702423995
    },
    {
        "content": "<p>In those references, try looking up things about typeclasses. Typeclass arguments are synthesized using the collection of global instances and local instances.</p>",
        "id": 407591625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702424897
    },
    {
        "content": "<p>I see why you might think that it's like it's pulling an assumption from the context, but there's a whole graph-search-like algorithm going on with these.</p>",
        "id": 407591703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702424976
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/How.20implicit.20arguments.20are.20inferred\">#general &gt; How implicit arguments are inferred</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 407591821,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702425052
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"448405\">@Alex Meiburg</span> You're asking fine questions, and I moved this thread to where questions about Lean basics, like all the types of binders, normally would appear.)</p>",
        "id": 407592488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702425479
    },
    {
        "content": "<p>Oh, huh! Alright. I guess I would've thought that type classes are morally like hypotheses. Hmm</p>",
        "id": 407593333,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702425898
    },
    {
        "content": "<p>All the <code>instance</code>s in Lean, std, and mathlib explain how to get a particular instance given 0 or more additional instances, and these are solved for recursively.</p>\n<p>If you're familiar with Prolog, it's like that.</p>",
        "id": 407593952,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702426211
    },
    {
        "content": "<p>In particular, a local typeclass instance could be used as a hypothesis to one of these other <code>instance</code>s</p>",
        "id": 407593988,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702426244
    },
    {
        "content": "<p>This is how a <code>CommRing</code> can be a <code>Ring</code>. There's an instance somewhere out there that helps make the inference.</p>",
        "id": 407594060,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702426295
    },
    {
        "content": "<p>Alex, beginners questions are welcome here, but it still feels like your life would be a lot easier if you read some documentation instead of trying to guess and then ask here.</p>",
        "id": 407595139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702426939
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 407596769,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702427796
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> I read your deleted message -- there's still sort of a local instance cache, but Lean maintains it by itself. It's an optimization for answering the question \"for each local variable, is it an instance, and if so which class is it for?\")</p>",
        "id": 407599389,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702428901
    },
    {
        "content": "<p>Gotcha, makes sense.</p>",
        "id": 407599683,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702429017
    },
    {
        "content": "<p>Okay, so I had read through <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C06_Structures.html\">https://leanprover-community.github.io/mathematics_in_lean/C06_Structures.html</a> before asking this, but my confusion was (I guess) coming from seeing how <code>Equivalence</code> and related things are defined in lean/mathlib. Like, based on what you've said, and that documentation page, I would expect <code>Equivalence</code> to be a <code>class</code>. And then there would be an <code>instance</code> to show that it's also a <code>Reflexive</code>, <code>Symmetric</code>, and <code>Transitive</code> as well.</p>\n<p>Instead, the definitions read like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Equivalence</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- An equivalence relation is reflexive: `x ~ x` -/</span>\n  <span class=\"n\">refl</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n  <span class=\"sd\">/-- An equivalence relation is symmetric: `x ~ y` implies `y ~ x` -/</span>\n  <span class=\"n\">symm</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n  <span class=\"sd\">/-- An equivalence relation is transitive: `x ~ y` and `y ~ z` implies `x ~ z` -/</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Reflexive</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≺</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Symmetric</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">≺</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≺</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Transitive</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">≺</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≺</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≺</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Equivalence.reflexive</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Reflexive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">h.refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Equivalence.symmetric</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Symmetric</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Equivalence.transitive</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Transitive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.trans</span>\n</code></pre></div>\n<p>So maybe my confusion is that I was trying to go off of Equivalence as my reference, and maybe <code>Equivalence</code> is a weird one?</p>",
        "id": 407754578,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702482156
    },
    {
        "content": "<p>Yeah, it is quite weird (and basically unused)</p>",
        "id": 407755156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702482336
    },
    {
        "content": "<p>Note however that we do have relation classes: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsRefl#doc\">docs#IsRefl</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsTrans#doc\">docs#IsTrans</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSymm#doc\">docs#IsSymm</a> ...</p>",
        "id": 407755315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702482379
    },
    {
        "content": "<p>Oh, I'd missed that! That's great, thanks. I'll probably use those instead, then.</p>",
        "id": 407756325,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702482706
    },
    {
        "content": "<p>Regarding reading documentation first: I guess my two biggest questions where \"is there a way to explicitly provide only some arguments\" (that is, if I have a function with 6 implicit arguments, can I just provide one without stubbing out 5 underscores?) and \"what is the ⦃⦄/{{ }} binder\".</p>\n<p>Of the pages given, none answer the first question. <a href=\"https://lean-lang.org/reference/expressions.html#implicit-arguments\">https://lean-lang.org/reference/expressions.html#implicit-arguments</a> is the only one that mentions ⦃⦄, and it just says that it's \"an implicit argument, weakly inserted\". However, there's no information on what \"weakly inserted\" means, anywhere on that page or any other I could find. It does have one example (which uses pi-types, which don't exist in lean4, but I was able to find that I could change this to a ∀), but I wasn't able to divine what 'weakly inserted' means from that example.</p>\n<p>Sorry if this comes across as a bit of a complaint. I realize this is a community project, and that there's a lot of changes from lean 3 to lean 4, and that a lot of lean documentation is written assuming some familiarity with other proof assistants or dependent type theory (which I lack). But it does make it pretty hard to navigate the documentation, and more often than not I'm not even sure if I'm (1) looking at the wrong documentation to try to answer my question, (2) looking at the right documentation and failing to understand the answer, or (3) not even asking a well-formed question.</p>",
        "id": 407758068,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702483203
    },
    {
        "content": "<p>If <code>h : ∀ ⦃a : α⦄, p a → q a</code> (where <code>α : Type*</code>, <code>p q : α → Prop</code>), then <code>h</code> is defeq to <code>∀ a, p a → q a</code> but <code>h ha</code> (where <code>ha : p a</code>) is defeq to <code>q a</code>.</p>",
        "id": 407758912,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702483395
    },
    {
        "content": "<p>Namely, <code>⦃⦄</code> arguments act as implicit arguments iff a later argument has been provided. I use and abuse this feature.</p>",
        "id": 407759084,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702483433
    },
    {
        "content": "<p>In contrast, if <code>h : ∀ {a : α}, p a → q a</code>, then <code>h</code> is defeq to <code>p ?a → q ?a</code> and <code>h ha</code> is defeq to <code>q a</code>, and if <code>h : ∀ a, p a → q a</code>, then <code>h</code> is defeq to <code>∀ a, p a → q a</code> while <code>h a</code> is defeq to <code>p a → q a</code></p>",
        "id": 407759412,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702483512
    },
    {
        "content": "<p>To give an argument named <code>arg</code> to a function <code>foo</code>, you can do <code>foo (arg := your_arg_here)</code>.</p>",
        "id": 407759546,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702483555
    },
    {
        "content": "<p>Okay, thank you very much for that explanation! :) So in the first example, how would it look if I <em>did</em> want to pass <code>a</code> to h? Because if I pass one argument, it seems as though Lean always wants to assume that it's the <code>p a</code> second argument.</p>\n<p>Is it only relevant if I was passing h to some other function, that wants an argument of type <code>forall a, p a -&gt; q a</code>?</p>",
        "id": 407761848,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702484216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20implicit.20arguments.20are.20inferred/near/407761848\">said</a>:</p>\n<blockquote>\n<p>Is it only relevant if I was passing h to some other function, that wants an argument of type <code>forall a, p a -&gt; q a</code>?</p>\n</blockquote>\n<p>No, it's definitely relevant in that case, but the most important use case is for predicates like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexOn#doc\">docs#ConvexOn</a></p>",
        "id": 407762194,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702484319
    },
    {
        "content": "<p>Ahhh alright, I'll try better to understand what's going on there. Thanks a bunch! 🙏🏼</p>",
        "id": 407763682,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702484691
    },
    {
        "content": "<p>For passing the first argument, you could <code>@h a ha</code> or <code>h (a := a) ha</code></p>",
        "id": 407764402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702484844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448405\">@Alex Meiburg</span> all of this explicit/implicit stuff is explained in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> .</p>",
        "id": 407810961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702501864
    }
]