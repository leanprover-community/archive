[
    {
        "content": "<p>When working with <code>Polynomial</code>, I keep getting errors saying things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">marking</span> <span class=\"n\">it</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">'</span><span class=\"n\">Polynomial.C'</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">executable</span> <span class=\"n\">code</span>\n</code></pre></div>\n<p>it doesn't matter if it's <code>Polynomial.sub</code>, <code>Polynomial.zero</code>, or <code>Polynomial.C</code>... what gives?</p>",
        "id": 404963111,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701298071
    },
    {
        "content": "<p>Mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dropLeading</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">P.natDegree</span> <span class=\"o\">(</span><span class=\"n\">leadingCoeff</span> <span class=\"n\">P</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 404963245,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701298121
    },
    {
        "content": "<p>Most operations on polynomials in mathlib are noncomputable due to a design decision by the mathlib community that carrying around the necessary decidable instance to make computability work was causing isses. You can just put noncomputable in front of your <code>def</code> to get the message to go away. Unless you really need a computable version of course, in that case I'd caution you that the implementation (as a finitely supported function) is not really that computationally good anyways, which is part of the reason we don't feel like we are losing out on too much with the way things are set up. Though of course an actually useful computational variant would be nice to have for some applications.</p>",
        "id": 404963600,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701298290
    },
    {
        "content": "<p>Gotcha, alright. Thanks!</p>",
        "id": 404963717,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1701298336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 404963828,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701298403
    },
    {
        "content": "<p>For the record, <code>dropLeading</code> is actually <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.eraseLead#doc\">docs#Polynomial.eraseLead</a>.</p>",
        "id": 404963857,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701298416
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Computation-models-for-polynomials-and-finitely-supported-functions\">https://github.com/leanprover-community/mathlib4/wiki/Computation-models-for-polynomials-and-finitely-supported-functions</a></p>",
        "id": 404964042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701298506
    },
    {
        "content": "<p>I would \"reimplement <code>ComputablePolynomial</code> via <code>List</code> (or <code>Array</code>)\" to the possible approaches on that page (which seems to presuppose that polynomials should be implemented via finsupp?)</p>",
        "id": 404964537,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701298745
    },
    {
        "content": "<p>One issue here, as computer algebra people know well, is that it's all very well people wanting \"computable polynomials\" but you can't please all of the people all of the time: you have to decide whether you're optimising for small degree polynomials or sparse polynomials for example. It's a losing battle in some sense.</p>",
        "id": 404965303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701298992
    },
    {
        "content": "<p>I wonder if it is of independent interest to implement and prove the correctness of say horner's method, FFT representation and multiplication etc. If we have that, then a whole lot of interesting results become accessible  : <a href=\"https://arxiv.org/pdf/2105.10386.pdf\">https://arxiv.org/pdf/2105.10386.pdf</a></p>\n<p>See the last section of each chapter.</p>",
        "id": 404965378,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701299024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Polynomial.20uncomputable/near/404965303\">said</a>:</p>\n<blockquote>\n<p>One issue here, as computer algebra people know well, is that it's all very well people wanting \"computable polynomials\" but you can't please all of the people all of the time: you have to decide whether you're optimising for small degree polynomials or sparse polynomials for example. It's a losing battle in some sense.</p>\n</blockquote>\n<p>I'm not convinced its a losing battle. Having a sensible default of dense polynomials for univariates seems like it covers 90% of applications in computer algebra. Of course there are situations where more exotic things are useful but we shouldn't let that scare us away from doing something that will be practical in most mathlib use cases anyway</p>",
        "id": 404969577,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701301347
    },
    {
        "content": "<p>If we are talking about multivariate polynomials, a dense representation is very bad choice for Gröbner basis (which I would argue, represent way more than 10% of the applications in computer algebra).</p>",
        "id": 404976447,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1701304492
    },
    {
        "content": "<p>I agree completely, my sentence is to be read as 90% of applications of <em>univariate</em> polynomials can be effectively done with dense representation (of course this is just a random number not an actual literature review <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> but I think my underlying point is sound, we shouldn't worry too much about there being different representations available when we can get a lot of utility from the most basic one). For multivariates I would indeed suggest a sparse by default approach (and not worry about dense until we had a real need)</p>",
        "id": 404977590,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701304954
    }
]