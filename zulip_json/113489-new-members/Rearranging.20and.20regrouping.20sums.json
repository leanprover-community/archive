[
    {
        "content": "<p>Hi. I am trying to prove the following result: <a href=\"/user_uploads/3121/cYrgx2lSjsze2khESdctdF8R/Screenshot-2023-02-06-at-22.38.37.png\">Screenshot-2023-02-06-at-22.38.37.png</a>. In short and generalising, if an arithmetic function f satisfies f(p^k) = f(p), then summing f over all prime powers is the same as summing over primes and multiplying by floor(log_p(n)). On paper it sounds simple, and it really really should be, but I swear I can't figure out how to prove it in Lean. I have spent multiple hours on this one statement <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> Can someone help?<br>\nHere is the statement:</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cYrgx2lSjsze2khESdctdF8R/Screenshot-2023-02-06-at-22.38.37.png\" title=\"Screenshot-2023-02-06-at-22.38.37.png\"><img src=\"/user_uploads/3121/cYrgx2lSjsze2khESdctdF8R/Screenshot-2023-02-06-at-22.38.37.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.von_mangoldt</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"n\">nat.prime</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">nat.log</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">real.log</span> <span class=\"bp\">↑</span><span class=\"n\">x</span>\n                <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"n\">is_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a.min_fac</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326252488,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675723384
    },
    {
        "content": "<p>Can you rearrange to an equality of logs with the sum on the inside?</p>",
        "id": 326252918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675723540
    },
    {
        "content": "<p>I had an idea to partition Icc into union of disjoint sets, as then I can write sum(x in S) = sum(x in S1) +sum(x in S2) + ...  And in this case, if we write <code>filter is_prime_pow (Icc 1 n) = union of {p ^ k}</code>, then it should work intuitively. But I cannot express this nor prove it in Lean.</p>",
        "id": 326252920,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675723540
    },
    {
        "content": "<p>What do you mean for that?</p>",
        "id": 326253003,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675723565
    },
    {
        "content": "<p>The summand on the left depends on p</p>",
        "id": 326253051,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675723595
    },
    {
        "content": "<p>Use the lemmas <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.log_prod\">docs#real.log_prod</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.log_pow\">docs#real.log_pow</a> to move the real.log to the outside of both sides</p>",
        "id": 326253098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675723616
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/7BxjoiqbslsEzIMXJysYGaZP/image.png\">image.png</a> I will still have to prove this, what I think is similar in nature</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7BxjoiqbslsEzIMXJysYGaZP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7BxjoiqbslsEzIMXJysYGaZP/image.png\"></a></div>",
        "id": 326253339,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675723728
    },
    {
        "content": "<p>Sure, but now all the <code>real.log</code>s are gone so your problem is simpler</p>",
        "id": 326253458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675723786
    },
    {
        "content": "<p>You should be able to rearrange <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mi>k</mi></msup><mo>≤</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">p^k  ≤N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0435em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>≤</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>p</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">k ≤ log_p N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> somehow</p>",
        "id": 326253727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675723899
    },
    {
        "content": "<p>Is this the kind of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mi>k</mi></msup><mo>≤</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">p^k \\le N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0435em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> that sums over p's and k's?</p>",
        "id": 326254141,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675724081
    },
    {
        "content": "<p>Yes!</p>",
        "id": 326254167,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675724096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Right, let me try that, so I should write</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>p</mi><mrow><mo stretchy=\"false\">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>p</mi></msub><mi>N</mi><mo stretchy=\"false\">⌋</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">p^{\\lfloor \\log_p N\\rfloor}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1324em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">⌊</span><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0417em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4048em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose mtight\">⌋</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>as</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munder><mo>∏</mo><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mo stretchy=\"false\">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>p</mi></msub><mi>N</mi><mo stretchy=\"false\">⌋</mo></mrow></munder><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\prod_{1 \\leq i \\leq \\lfloor \\log_p N\\rfloor} p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.6743em;vertical-align:-1.6243em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.809em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">≤</span><span class=\"mopen mtight\">⌊</span><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0417em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4048em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose mtight\">⌋</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6243em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span></span></p>\n<p>And write the right hand side as you said, then they should be equal</p>",
        "id": 326254237,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675724132
    },
    {
        "content": "<p>Once you have a product over the primes \\le N on both sides, you can use... <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_congr\">docs#finset.prod_congr</a></p>",
        "id": 326254684,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675724318
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 326255863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675724895
    },
    {
        "content": "<p>Thank you, I needed that :P I tried <code>\\( \\)</code>, <code>$ $</code> and finally <code>```maths</code> :D</p>",
        "id": 326255924,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675724939
    },
    {
        "content": "<p>I am not sure if I made it better or worse, but I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">is_prime_pow</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a.min_fac</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"n\">nat.prime</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">∏</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">nat.log</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">x</span>\n</code></pre></div>\n<p>And I can't manipulate the left hand side at all. Things like <code>simp_rw [is_prime_pow_iff_min_fac_pow_factorization_eq _]</code> doesn't work.</p>",
        "id": 326256881,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675725447
    },
    {
        "content": "<p>I think you need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">is_prime_pow</span> <span class=\"bp\">=</span>\n        <span class=\"o\">((</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">nat.prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">nat.log</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>although I almost certainly made an off-by-one error</p>",
        "id": 326256893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675725455
    },
    {
        "content": "<p>Oh, let me try that. It should be easy by <code>ext</code> and rewriting using the <code>mem_</code> lemmas right</p>",
        "id": 326257100,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675725567
    },
    {
        "content": "<p>Here's an overall outline:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.von_mangoldt</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"n\">nat.prime</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">nat.log</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">real.log</span> <span class=\"bp\">↑</span><span class=\"n\">x</span>\n                <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"n\">is_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">real.log</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a.min_fac</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">real.log_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.cast_pow</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">real.log_prod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">real.log_prod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)],</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nat.cast_prod</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_inj</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">is_prime_pow</span> <span class=\"bp\">=</span>\n        <span class=\"o\">((</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">nat.prime</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bUnion</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">nat.log</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">prod_bUnion</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">prod_image</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"c1\">-- clean up under the sum</span>\n        <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"c1\">-- prove the image is injective</span>\n        <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.on_fun</span><span class=\"o\">,</span> <span class=\"n\">disjoint_left</span><span class=\"o\">],</span>\n      <span class=\"c1\">-- prove the families are disjoint</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.min_fac_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- easy :)</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326258115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675726171
    },
    {
        "content": "<p>Thank you so much, I will try this! I didn't know about the <code>bUnion</code> part and was writing your lemma as some <code>finsupp.sum</code>, and of course it didn't work.</p>",
        "id": 326258628,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675726395
    },
    {
        "content": "<p>Right, your choices here are either <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.bUnion\">docs#finset.bUnion</a>, or if you want to prove the disjointness up front, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.disj_Union\">docs#finset.disj_Union</a></p>",
        "id": 326259517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675726983
    },
    {
        "content": "<p>(similarly you can prove the injectivity up front with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.map\">docs#finset.map</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.image\">docs#finset.image</a>)</p>",
        "id": 326259548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675727016
    },
    {
        "content": "<p>I got it!! Here it is: <a href=\"https://github.com/grhkm21/lean/commit/4e644cf032a5a1f4063f1607a6bbb05aba582960\">https://github.com/grhkm21/lean/commit/4e644cf032a5a1f4063f1607a6bbb05aba582960</a> Around 80 lines of code for what humans would consider trivial :P I feel like I will encounter this a lot while doing number theory or combinatorics.</p>",
        "id": 326265407,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675730745
    }
]