[
    {
        "content": "<p>i think i almost get it but I keep reaching this state</p>",
        "id": 325029415,
        "sender_full_name": "Henkie67",
        "timestamp": 1675203941
    },
    {
        "content": "<p>how do i get rid of the negation</p>",
        "id": 325029692,
        "sender_full_name": "Henkie67",
        "timestamp": 1675204059
    },
    {
        "content": "<p>What is <code>opt</code>? Please read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. It would be more useful if you posted the code rather than the image.</p>",
        "id": 325034361,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675205690
    },
    {
        "content": "<p>So solved it a bit more and i know have this , so i need to apply ih_cc to s to solve the goal</p>",
        "id": 325034411,
        "sender_full_name": "Henkie67",
        "timestamp": 1675205705
    },
    {
        "content": "<p>oh sorry let me know if you need it for this</p>",
        "id": 325034482,
        "sender_full_name": "Henkie67",
        "timestamp": 1675205729
    },
    {
        "content": "<p>nevermind wrong code here is the right one</p>",
        "id": 325034677,
        "sender_full_name": "Henkie67",
        "timestamp": 1675205799
    },
    {
        "content": "<p>Images of the proof state are not helpful. Please read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and post the output of <code>extract_goal</code></p>",
        "id": 325035647,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675206121
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325035919,
        "sender_full_name": "Henkie67",
        "timestamp": 1675206218
    },
    {
        "content": "<p>You can't close this goal easily.</p>",
        "id": 325036225,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675206334
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325036535,
        "sender_full_name": "Henkie67",
        "timestamp": 1675206455
    },
    {
        "content": "<p>but is there no way to extract the goal using ih_cc and s</p>",
        "id": 325036766,
        "sender_full_name": "Henkie67",
        "timestamp": 1675206551
    },
    {
        "content": "<p>No, this goal can't be proved trivially. You need to develop more theory. It would be significantly easier for you if you first develop your theory using pen and paper and then translate the proofs to Lean. You need to have a clear idea of how you are going to prove your theorem. Trying random tactics in Lean can't help you with that.</p>\n<p>I guess you're trying to prove that <code>valid V x</code> implies <code>valid V (opt x)</code>. Can you write an informal (textual) proof of why that must be true? Try to be as precise as possible. Then you can translate that textual proof to Lean and I can help you overcome technical difficulties.</p>",
        "id": 325038142,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675207143
    },
    {
        "content": "<p>I will try, but I only have a couple days left before i need to hand in this assignment (this being the last proof before i am finished) so no promises but thx for the tips you gave me</p>",
        "id": 325039422,
        "sender_full_name": "Henkie67",
        "timestamp": 1675207696
    },
    {
        "content": "<p>I hope you'll be thanking all the people who helped you in this thread when you hand in your assignment</p>",
        "id": 325041571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675208726
    },
    {
        "content": "<p>My students ask for help and I assure them that it's fine as long as they give credit</p>",
        "id": 325041622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675208756
    },
    {
        "content": "<p>of course :)</p>",
        "id": 325041628,
        "sender_full_name": "Henkie67",
        "timestamp": 1675208760
    },
    {
        "content": "<p>It is just so frustrating to be so close but yet so far away constantly</p>",
        "id": 325041723,
        "sender_full_name": "Henkie67",
        "timestamp": 1675208793
    },
    {
        "content": "<p>If you don't have an understanding of the argument on paper then you don't know how close you are</p>",
        "id": 325091233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675239588
    },
    {
        "content": "<p>\"number of sorrys remaining\" is not a good measure of closeness to finishing</p>",
        "id": 325093037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675240258
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325123465,
        "sender_full_name": "Henkie67",
        "timestamp": 1675249130
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325124338,
        "sender_full_name": "Henkie67",
        "timestamp": 1675249346
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325127586,
        "sender_full_name": "Henkie67",
        "timestamp": 1675250367
    },
    {
        "content": "<p>I figure out that by transforming p-&gt;q into not p or q it would be easier to solve but for this I need both of these recursions to work</p>",
        "id": 325127991,
        "sender_full_name": "Henkie67",
        "timestamp": 1675250487
    },
    {
        "content": "<p>Try changing <code>opt(f1.Fneg)</code> to <code>(opt f1).Fneg</code></p>",
        "id": 325135255,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675252399
    },
    {
        "content": "<p>but it already is like that</p>",
        "id": 325135601,
        "sender_full_name": "Henkie67",
        "timestamp": 1675252487
    },
    {
        "content": "<p>It isn't. When you write <code>opt(f1.Fneg)</code>, it first negates <code>f1</code> and then calls <code>opt</code> on the result. That's why you get the error (you could prove termination, but it would be much harder). Changing it to <code>(opt f1).Fneg</code> will first call <code>opt</code> on <code>f1</code> and then negate, which should work.</p>\n<p>For the <code>Fneg</code> case, change <code>opt(f1).Fneg</code> to <code>(opt f1).Fneg</code>. The first one is equivalent to <code>opt (f1.Fneg)</code>, which is not what you want. Property accessor has greater precedence than function application.</p>",
        "id": 325136935,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675252854
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325140547,
        "sender_full_name": "Henkie67",
        "timestamp": 1675253721
    },
    {
        "content": "<p>Again, you can't do this easily. Apparently, <code>ih_dd</code> is useless here and <code>valid' V cc = ff</code> is equivalent to <code>¬valid V cc</code> (similar applies to <code>opt cc</code>). Your goal state is basically:</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>V: valuation\ncc: form\nih_cc: valid V cc → valid V (opt cc)\n⊢ ¬valid V cc → ¬valid V (opt cc)\n</code></pre></div>\n<p>In other words, you want to deduce <code>¬P → ¬Q</code> from <code>P → Q</code>. You can't do that without examining <code>P</code> and <code>Q</code> in some other way.</p>",
        "id": 325142568,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675254256
    },
    {
        "content": "<p>I am sorry but I am running out of ways to look at it, I have been rewriting this case with as many methods that I know but I cant figure it out</p>",
        "id": 325143344,
        "sender_full_name": "Henkie67",
        "timestamp": 1675254449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582257\">Henkie67</span> has marked this topic as resolved.</p>",
        "id": 325432901,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675353262
    }
]