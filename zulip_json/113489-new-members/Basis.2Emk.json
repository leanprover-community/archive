[
    {
        "content": "<p>Hi all, <br>\nI'am trying to implement the graph Laplacian in lean and proving some theorems about it. I want to build a basis for the kernel of the laplacian by taking for each connected component a function that is constant on it and zero elsewhere. Consider the following familiy of functions indexed by the connected components of a SimpleGraph G.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myBasis</span> <span class=\"o\">:</span> <span class=\"n\">G.ConnectedComponent</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">G.connectedComponentMk</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Now I'am trying to get a basis using <a href=\"http://Basis.mk\">Basis.mk</a> by providing proofs that myBasis is spanning and linearly inependent</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">myBasis_linearIndependent</span> <span class=\"o\">:</span>\n  <span class=\"n\">LinearIndependent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">myBasis</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">myBasis_spanning</span> <span class=\"o\">:</span>\n  <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">Matrix.toLinearMap₂'</span> <span class=\"o\">(</span><span class=\"n\">G.lapMatrix</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">myBasis</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Basis.mk</span> <span class=\"o\">{</span><span class=\"n\">G.ConnectedComponent</span><span class=\"o\">}</span> <span class=\"n\">myBasis_linearIndependent</span> <span class=\"n\">myBasis_spanning</span>\n</code></pre></div>\n<p>In the last line this results in the following error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Basis.mk</span> <span class=\"bp\">?</span><span class=\"n\">m.143919</span> <span class=\"bp\">?</span><span class=\"n\">m.143953</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">myBasis_spanning</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"bp\">?</span><span class=\"n\">m.144491</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">ConnectedComponent</span> <span class=\"n\">G</span><span class=\"o\">)],</span>\n    <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">toLinearMap₂'</span> <span class=\"o\">(</span><span class=\"n\">lapMatrix</span> <span class=\"n\">G</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">myBasis</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.143866</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.143863</span>\n</code></pre></div>\n<p>I have checked the types of all the involved objects and couldn't figure out the issue.<br>\nIn case it matters here are the preceding definitions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G.ConnectedComponent</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SimpleGraph.degMatrix</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">of</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">G.degree</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SimpleGraph.lapMatrix</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">G.degMatrix</span> <span class=\"n\">R</span> <span class=\"bp\">-</span> <span class=\"n\">G.adjMatrix</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>Any help would be much appreciated.</p>",
        "id": 402211201,
        "sender_full_name": "Adrian Wüthrich",
        "timestamp": 1700047933
    },
    {
        "content": "<p>That error message is telling you that <code>myBasis_spanning</code> was expecting a <code>G</code> argument</p>",
        "id": 402226599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700051793
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.mk#doc\">docs#Basis.mk</a>)</p>",
        "id": 402226798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700051843
    },
    {
        "content": "<p>You're also passing <code>Basis.mk</code> three arguments, but it expects two</p>",
        "id": 402227080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700051908
    },
    {
        "content": "<p>Thanks a lot. I now ran into a second problem. It looks like <a href=\"http://Basis.mk\">Basis.mk</a> is infering the module that the basis spans from the codomain of <code>myBasis</code>, hence <code>myBasis</code> should look something like the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myBasis</span> <span class=\"o\">:</span> <span class=\"n\">G.ConnectedComponent</span> <span class=\"bp\">→</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">Matrix.toLinearMap₂'</span> <span class=\"o\">(</span><span class=\"n\">G.lapMatrix</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">G.connectedComponentMk</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">myBasis_spanning</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">myBasis</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Basis.mk</span> <span class=\"o\">(</span><span class=\"n\">myBasis_linearIndependent</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myBasis_spanning</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I guess that in the definition of  <code>myBasis</code>  I have to provide a proof that the given map is indeed in the kernel. What would be the syntax for that?</p>",
        "id": 402250620,
        "sender_full_name": "Adrian Wüthrich",
        "timestamp": 1700057429
    },
    {
        "content": "<p>Will you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (with all required imports), please?</p>",
        "id": 402251736,
        "sender_full_name": "Richard Copley",
        "timestamp": 1700057678
    },
    {
        "content": "<p>Of course</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Connectivity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.AdjMatrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.BilinearForm</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">SimpleGraph</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G.ConnectedComponent</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SimpleGraph.degMatrix</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">of</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">G.degree</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SimpleGraph.lapMatrix</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">G.degMatrix</span> <span class=\"n\">R</span> <span class=\"bp\">-</span> <span class=\"n\">G.adjMatrix</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myBasis</span> <span class=\"o\">:</span> <span class=\"n\">G.ConnectedComponent</span> <span class=\"bp\">→</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">Matrix.toLinearMap₂'</span> <span class=\"o\">(</span><span class=\"n\">G.lapMatrix</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">G.connectedComponentMk</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">myBasis_linearIndependent</span> <span class=\"o\">:</span>\n  <span class=\"n\">LinearIndependent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">myBasis</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">myBasis_spanning</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">myBasis</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Basis.mk</span> <span class=\"o\">(</span><span class=\"n\">myBasis_linearIndependent</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">myBasis_spanning</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402267392,
        "sender_full_name": "Adrian Wüthrich",
        "timestamp": 1700061694
    },
    {
        "content": "<p>This should get you started:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myBasis</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G.ConnectedComponent</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">Matrix.toLinearMap₂'</span> <span class=\"o\">(</span><span class=\"n\">G.lapMatrix</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">G.connectedComponentMk</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 402269423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700062216
    },
    {
        "content": "<p>You can also simplify your first definition slightly to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SimpleGraph.degMatrix</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">V</span> <span class=\"n\">V</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Matrix.diagonal</span> <span class=\"o\">(</span><span class=\"n\">G.degree</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402269877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700062340
    },
    {
        "content": "<p>Now it fits all together. Many thanks!</p>",
        "id": 402289142,
        "sender_full_name": "Adrian Wüthrich",
        "timestamp": 1700067637
    }
]