[
    {
        "content": "<p>Could some kind soul explain to me how to optimize the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">j</span><span class=\"bp\">=</span><span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>? It takes for ages, and I'd like a 1-liner avoiding heavy-hitters like <code>finish</code>. I tried <code>ring</code> and its variants, without success, and case-by-case also seems not to work smoothly</p>",
        "id": 368803153,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1687508919
    },
    {
        "content": "<p>First of all, <code>rcases ih with rfl | rfl | rfl | rfl | ⟨⟨⟩⟩,</code> helps!  You can find out about it by using <code>rcases? ih</code>.</p>",
        "id": 368810584,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687510342
    },
    {
        "content": "<p>After that, <code>norm_num</code> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">j</span><span class=\"bp\">=</span><span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">i</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩⟩</span><span class=\"bp\">;</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is almost instant.  Also the original version was not so bad, though...</p>",
        "id": 368811134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687510448
    },
    {
        "content": "<p>Do you really need the ∃?</p>",
        "id": 368812047,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687510626
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩⟩)</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 368812129,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687510646
    },
    {
        "content": "<p>Actually, with the last formulation, you can also prove it as: <code>example : ∀i ∈ ({1,2,3,4} : finset ℕ), i*(12/i)=12 := by norm_num</code>.</p>",
        "id": 368815542,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687511340
    },
    {
        "content": "<p>Thanks a lot! Yes, I wrote a M(N)WE, but I need to get hold of the <code>j</code>. If you have improvement suggestions, here is where the code comes from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foobar</span> <span class=\"n\">g</span> <span class=\"bp\">⊆</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span><span class=\"bp\">/</span><span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">div_12</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨⟩⟩</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">div_12</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">pow_mul</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">l1</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">foobar</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 368815675,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1687511369
    },
    {
        "content": "<p>Here is a (partial) solution using <code>decide</code> (this code snippet is in Lean4):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DecideForAllMemMem</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"n\">where</span>\n  <span class=\"n\">decideForAllMem</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecideForAllMemMem</span> <span class=\"n\">List</span> <span class=\"n\">where</span>\n  <span class=\"n\">decideForAllMem</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecideForAllMemMem</span> <span class=\"n\">Multiset</span> <span class=\"n\">where</span>\n  <span class=\"n\">decideForAllMem</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecideForAllMemMem</span> <span class=\"n\">Finset</span> <span class=\"n\">where</span>\n  <span class=\"n\">decideForAllMem</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">DecideForAllMemMem.decideForAllMem</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">∣</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- decide</span>\n</code></pre></div>\n<p>Lean already knows that <code>a ∣ b</code> is a decidable problem when <code>a b : ℕ</code>, and consequently for any <code>l : Finset ℕ</code>, the proposition <code>∀ i : ℕ, i ∈ l → i ∣ x</code> should be decidable by enumeration. The code above is an (incomplete) attempt at getting Lean to perform decision by enumeration on <code>Finset</code>s. When all the <code>sorry</code>s are filled in, the proof should ideally just be <code>by decide</code>.</p>",
        "id": 368816945,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1687511641
    },
    {
        "content": "<p>I do not know if this is any better for your application, but I find that the <code>convert</code> line let's me, as a human, know what is happening: we are applying <code>l1</code>; after that, it is just a case-check.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">l1</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"mi\">12</span> <span class=\"bp\">/</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">ih</span><span class=\"bp\">;</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Maybe this is more show-casing some of the automation that can be used, though...</p>\n<p>The more I use Lean, the more I prefer writing proofs for humans, over highly-compressed machine-parseable code.</p>",
        "id": 368826059,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687513435
    },
    {
        "content": "<p>If I dare, a followup question: how do I convert inequalities to a finset, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?</p>",
        "id": 369513890,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1687733120
    },
    {
        "content": "<p><code>interval_cases a; tauto</code> ? (Untested)</p>",
        "id": 369514306,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687733438
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">linarith</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">done</span><span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 369514446,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687733601
    },
    {
        "content": "<p>Heather's suggestion is better though, but using <code>simp</code> instead of <code>tauto</code>.</p>",
        "id": 369514656,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687733775
    },
    {
        "content": "<p>If you're converting inequalities to a finset, then you should use a construction like Finset.range instead of a manual construction as you have now that is via Finset.insert</p>",
        "id": 369645724,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1687775529
    }
]