[
    {
        "content": "<p>I have the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Wrapper.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">value</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">extra</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- dependent elimination failed, failed to solve equation Wrapper T = ULift Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">Wrapper.join</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"o\">(</span><span class=\"n\">Wrapper</span> <span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wrapper.value</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>I don't get why match can't figure out that the <code>extra</code> case is impossible. How can I fix this?</p>",
        "id": 396529544,
        "sender_full_name": "James Randolf",
        "timestamp": 1697211537
    },
    {
        "content": "<p>My second attempt is change Wrapper to not be an inductive type family, but in this case I have a new problem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Wrapper'</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">Wrapper'</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">extra</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Wrapper'</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Wrapper'.join</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper'</span> <span class=\"o\">(</span><span class=\"n\">Wrapper'</span> <span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper'</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">extra</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I don't know how to prove that <code>Wrapper' T ≠ Nat</code>.</p>",
        "id": 396533129,
        "sender_full_name": "James Randolf",
        "timestamp": 1697212986
    },
    {
        "content": "<p>It's highly discouraged to use type equality</p>",
        "id": 396536745,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697214370
    },
    {
        "content": "<p>I don't think it's possible to prove that <code>Wrapper' T \\ne Nat</code> since <code>Wrapper' Nat \\equiv Nat</code> and <a href=\"https://math.andrej.com/2023/06/15/types-2023-isomorphism-invariance-and-isomorphism-reflection/\">there is a consistent axiom that equivalence implies type equality</a>.</p>",
        "id": 396550254,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697219941
    }
]