[
    {
        "content": "<p>I have been reading Theorem Proving in Lean 4 Chapter 7 on inductive types. At various points, it talks about recursor and eliminator in a way that seems to assume prior knowledge of these concepts. I am new to dependent type theory and would like to read a bit more about these concepts that are foreign to me. Could anyone suggest some good introductory resources explaining recursors and eliminators? Any help is greatly appreciated.</p>",
        "id": 372571130,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1688559769
    },
    {
        "content": "<p>It is not meant to assume prio knowledge of these concepts.</p>",
        "id": 372575272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688560634
    },
    {
        "content": "<p>You can still read Chapter 4 of <a href=\"https://browncs1951x.github.io/static/files/hitchhikersguide.pdf\">https://browncs1951x.github.io/static/files/hitchhikersguide.pdf</a> for more information.</p>",
        "id": 372575831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688560735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Need.20help.20to.20better.20understand.20recursors.20and.20eliminators/near/372575831\">said</a>:</p>\n<blockquote>\n<p>You can still read Chapter 4 of <a href=\"https://browncs1951x.github.io/static/files/hitchhikersguide.pdf\">https://browncs1951x.github.io/static/files/hitchhikersguide.pdf</a> for more information.</p>\n</blockquote>\n<p>Thanks. I felt it expected prior knowledge because it starts talking about these things before explaining what they are.</p>",
        "id": 372576251,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1688560798
    },
    {
        "content": "<p>If you make a new type <code>T</code> then it's pretty clear that to be able to use it, you need to be able to (a) make elements of <code>T</code> and (b) make functions which start at <code>T</code> and end up somewhere else. Constructors are the fundamental examples of  (a) things, and eliminators or recursors (these are the same thing, I think?) are examples of (b) things.</p>",
        "id": 372578352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688561201
    },
    {
        "content": "<p>If you make the type using the <code>inductive</code> keyword then probably you just wrote all the constructors down, and the recursor is generated automatically by Lean</p>",
        "id": 372578765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688561282
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">MyNat</span> <span class=\"c1\">-- the type</span>\n<span class=\"k\">#check</span> <span class=\"n\">MyNat.zero</span> <span class=\"c1\">-- a constructor</span>\n<span class=\"k\">#check</span> <span class=\"n\">MyNat.succ</span> <span class=\"c1\">-- another one</span>\n<span class=\"k\">#check</span> <span class=\"n\">MyNat.rec</span> <span class=\"c1\">-- the eliminator/recursor</span>\n</code></pre></div>\n<p>Those are the things which are automatically generated by the system when you make a new inductive type.</p>",
        "id": 372579251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688561363
    },
    {
        "content": "<p>It's starting to make more sense. Thank you!</p>",
        "id": 372580145,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1688561514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Need.20help.20to.20better.20understand.20recursors.20and.20eliminators/near/372579251\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">MyNat</span> <span class=\"c1\">-- the type</span>\n<span class=\"k\">#check</span> <span class=\"n\">MyNat.zero</span> <span class=\"c1\">-- a constructor</span>\n<span class=\"k\">#check</span> <span class=\"n\">MyNat.succ</span> <span class=\"c1\">-- another one</span>\n<span class=\"k\">#check</span> <span class=\"n\">MyNat.rec</span> <span class=\"c1\">-- the eliminator/recursor</span>\n</code></pre></div>\n<p>Those are the things which are automatically generated by the system when you make a new inductive type.</p>\n</blockquote>\n<p>Also useful, perhaps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">MyNat.succ</span>\n</code></pre></div>\n<p>(the same constructor as <code>MyNat.succ</code>, presented differently)</p>",
        "id": 372581851,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1688561804
    }
]