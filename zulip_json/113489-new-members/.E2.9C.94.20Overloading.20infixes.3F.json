[
    {
        "content": "<p>I'm noticing something odd when trying to define a particular infix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ⊗₁ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ⊗₂ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Mul.mul</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"bp\">Φ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">(fun x x_1 ↦ x * x_1) φ ψ : Φ</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">φ</span> <span class=\"bp\">⊗₁</span> <span class=\"n\">ψ</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">φ ⊗₂ ψ : Φ</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">φ</span> <span class=\"bp\">⊗₂</span> <span class=\"n\">ψ</span>\n</code></pre></div>\n<p>This issue is with the pretty printing of terms using <code>\\otimes\\1</code>, hoping they'd work more like <code>\\otimes\\2</code>.</p>\n<p>It's not entirely incomprehensible, though; <code>(\\. * \\.)</code> overloads to both <code>Mul.mul</code> and <code>HMul.hMul</code>. And that's actually what I want. I looked around for how stdlib does it, but I couldn't find it.</p>\n<p>Is there any way to get better pretty printing for infixes aliasing <code>(\\. * \\.)</code>, or failing that, any way to overload infixes?</p>",
        "id": 406881456,
        "sender_full_name": "N Gelwan",
        "timestamp": 1702094211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665242\">N Gelwan</span> <a href=\"#narrow/stream/113489-new-members/topic/Overloading.20infixes.3F/near/406881456\">said</a>:</p>\n<blockquote>\n<p><code>(\\. * \\.)</code> overloads to both <code>Mul.mul</code> and <code>HMul.hMul</code>. And that's actually what I want. I looked around for how stdlib does it, but I couldn't find it.</p>\n</blockquote>\n<p>Could you say what you mean by overloading to these? There's no Lean syntax overloading going on with <code>*</code>. The way it works is that <code>Mul</code> provides a default instance to <code>HMul</code>, and <code>*</code> is defined using only <code>HMul.hMul</code>.</p>",
        "id": 406884786,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702096189
    },
    {
        "content": "<p>The difference between <code>⊗₁</code> and <code>⊗₂</code> in your code is that you asked the operands to have the same type in <code>⊗₂</code> but not in <code>⊗₁</code>, so Lean will take a little detour to find <code>Mul</code> in elaboration.</p>\n<p>Another issue is that due to some reasons I don't understand yet, <code>⊗₂</code> successfully delaborates back to the notation while <code>⊗₁</code> didn't (it remains the unfolded definition, the <code>fun</code> looking thing), it doesn't have anything to do with what happens during the elaborations.</p>",
        "id": 406892027,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702099718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Overloading.20infixes.3F/near/406884786\">said</a>:</p>\n<blockquote>\n<p>Could you say what you mean by overloading to these? There's no Lean syntax overloading going on with <code>*</code>. The way it works is that <code>Mul</code> provides a default instance to <code>HMul</code>, and <code>*</code> is defined using only <code>HMul.hMul</code>.</p>\n</blockquote>\n<p>Ohhhh, thanks for explaining that, that escaped me.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113489-new-members/topic/Overloading.20infixes.3F/near/406892027\">said</a>:</p>\n<blockquote>\n<p>Another issue is that due to some reasons I don't understand yet, <code>⊗₂</code> successfully delaborates back to the notation while <code>⊗₁</code> didn't (it remains the unfolded definition, the <code>fun</code> looking thing), it doesn't have anything to do with what happens during the elaborations.</p>\n</blockquote>\n<p>Yeah-- wonder if that's a bug.</p>",
        "id": 406892313,
        "sender_full_name": "N Gelwan",
        "timestamp": 1702099945
    },
    {
        "content": "<p><code>⊗₁</code> doesn't generate a pretty printer since it's not expanding into something that the pretty printer generator recognizes</p>",
        "id": 406893241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702100727
    },
    {
        "content": "<p>Ok, so the solution here is just to use <code>HMul.hMul</code>, yeah?</p>",
        "id": 406893362,
        "sender_full_name": "N Gelwan",
        "timestamp": 1702100795
    },
    {
        "content": "<p>Functionally and aesthetically</p>",
        "id": 406893405,
        "sender_full_name": "N Gelwan",
        "timestamp": 1702100826
    },
    {
        "content": "<p><del><code>notation:70 x \" ⊗₁ \" y =&gt; x * y</code> delabs successfully.</del> (UPDATE: only back to <code>*</code>)</p>",
        "id": 406893748,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702101014
    },
    {
        "content": "<p>Aren't they the same in spirit?</p>",
        "id": 406893846,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702101076
    },
    {
        "content": "<p>No, since that's beta reduced</p>",
        "id": 406893897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702101104
    },
    {
        "content": "<p><del><code>set_option pp.beta true</code> seems to work</del> (UPDATE: only back to <code>*</code>)</p>",
        "id": 406894377,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702101358
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Common</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Mathport.Notation</span>\n\n<span class=\"n\">notation3</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"n\">x</span> <span class=\"s2\">\" ⊗₁ \"</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ⊗₂ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Mul.mul</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"bp\">Φ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"bp\">Φ</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- info: φ ⊗₁ ψ : Φ -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"n\">φ</span> <span class=\"bp\">⊗₁</span> <span class=\"n\">ψ</span>\n\n<span class=\"sd\">/-- info: φ ⊗₂ ψ : Φ -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"n\">φ</span> <span class=\"bp\">⊗₂</span> <span class=\"n\">ψ</span>\n</code></pre></div>\n<p>Anyway, <code>notation3</code> works for now.</p>",
        "id": 406910427,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702111997
    },
    {
        "content": "<p>Note that you should never refer to <code>Mul.mul</code> directly, as none of the lemmas are about it</p>",
        "id": 406910889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702112379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665242\">N Gelwan</span> has marked this topic as resolved.</p>",
        "id": 406914577,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702114608
    }
]