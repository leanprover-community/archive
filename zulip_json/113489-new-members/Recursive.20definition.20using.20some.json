[
    {
        "content": "<p>Is there a way to unfold a recursive definition using <code>some</code> in its construction. For example, in the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, is there a way to recover the property used to construct the sequence?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span>     <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bnd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">loop</span><span class=\"o\">],</span> <span class=\"c1\">-- fails</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 328464096,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1676638801
    },
    {
        "content": "<p>Your <code>bnd</code> does not hold.</p>",
        "id": 328464487,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676638913
    },
    {
        "content": "<p>You should start with <code>induction</code>, or pattern matching</p>",
        "id": 328464600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676638938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Recursive.20definition.20using.20some/near/328464487\">said</a>:</p>\n<blockquote>\n<p>Your <code>bnd</code> does not hold.</p>\n</blockquote>\n<p>Sure, but I can't even prove that :)</p>",
        "id": 328464655,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1676638955
    },
    {
        "content": "<p>You should start with realizing that <code>1 &lt; 1</code> is not true.</p>",
        "id": 328464688,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676638971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/113489-new-members/topic/Recursive.20definition.20using.20some/near/328464655\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Recursive.20definition.20using.20some/near/328464487\">said</a>:</p>\n<blockquote>\n<p>Your <code>bnd</code> does not hold.</p>\n</blockquote>\n<p>Sure, but I can't even prove that :)</p>\n</blockquote>\n<p>Failing to prove <code>P</code> is not a way to prove <code>¬P</code> is that is your aim.</p>",
        "id": 328464931,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676639046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Recursive.20definition.20using.20some/near/328464931\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/113489-new-members/topic/Recursive.20definition.20using.20some/near/328464655\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Recursive.20definition.20using.20some/near/328464487\">said</a>:</p>\n<blockquote>\n<p>Your <code>bnd</code> does not hold.</p>\n</blockquote>\n<p>Sure, but I can't even prove that :)</p>\n</blockquote>\n<p>Failing to prove <code>P</code> is not a way to prove <code>¬P</code> is that is your aim.</p>\n</blockquote>\n<p>Ok, I'll fix the statement... but I think you're missing the point</p>",
        "id": 328464980,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1676639068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Recursive.20definition.20using.20some/near/328464600\">said</a>:</p>\n<blockquote>\n<p>You should start with <code>induction</code>, or pattern matching</p>\n</blockquote>\n<p>Induction does not do help much. What do you mean by <code>pattern matching</code>?</p>",
        "id": 328465697,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1676639255
    },
    {
        "content": "<p>The same thing you did to define <code>loop</code></p>",
        "id": 328466103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676639386
    },
    {
        "content": "<p>Aren't you planning to prove the theorem by induction?</p>",
        "id": 328466675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676639558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Recursive.20definition.20using.20some/near/328466675\">said</a>:</p>\n<blockquote>\n<p>Aren't you planning to prove the theorem by induction?</p>\n</blockquote>\n<p>Well, this is just a toy example, but what I'd you like to be able to do is to recover somehow the fact that <code>loop n &lt; 2 * loop (n + 1)</code> that is the property attached to the element <code>loop (n+1)</code> and I cannot find a way to do that.</p>",
        "id": 328467326,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1676639752
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.some_spec\">docs#Exists.some_spec</a></p>",
        "id": 328467680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676639837
    },
    {
        "content": "<p>I found it pretty hard to get <code>some_spec</code> to work, because I can't prove anything useful abuot <code>loop (n + 1)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span>     <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">loop_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">loop</span>\n</code></pre></div>",
        "id": 328468416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676640044
    },
    {
        "content": "<p>Yes, this is the problem that I have...</p>",
        "id": 328468921,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1676640181
    },
    {
        "content": "<p>Ah, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">loop_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">loop</span><span class=\"o\">],</span>\n  <span class=\"n\">delta</span> <span class=\"n\">Exists.some</span> <span class=\"n\">classical.some</span> <span class=\"n\">classical.indefinite_description</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 328469059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676640232
    },
    {
        "content": "<p>This looks like a bug in the equation compiler to me, it should have generated that lemma in the first place</p>",
        "id": 328469441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676640341
    },
    {
        "content": "<p>It looks like a bug in the equation compiler but the lemma should be true by rfl</p>",
        "id": 328469746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676640429
    },
    {
        "content": "<p>seems to be confused by the fact that it's noncomputable</p>",
        "id": 328469769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676640437
    },
    {
        "content": "<p>It's maybe caused by <code>@[irreducible] noncomputable def indefinite_description</code></p>",
        "id": 328470046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676640524
    },
    {
        "content": "<p>Some  more weirdness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span>     <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">loop_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">loop</span><span class=\"o\">],</span>\n  <span class=\"k\">show</span> <span class=\"n\">subtype.val</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">subtype.val</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">classical.indefinite_description</span><span class=\"o\">],</span>\n  <span class=\"n\">delta</span> <span class=\"n\">classical.indefinite_description</span><span class=\"o\">,</span> <span class=\"c1\">-- why do I still need this?</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>dsimp</code> refuses to unfold a definition on the LHS but unfolds the same definition on the RHS</p>",
        "id": 328470390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676640638
    },
    {
        "content": "<p>With</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>there aren't any more surprises</p>",
        "id": 328470588,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676640709
    },
    {
        "content": "<p>Yes, that works! Thanks.</p>",
        "id": 328472149,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1676641158
    },
    {
        "content": "<p>I've found that with <code>noncomputable</code> recursive definitions you sometimes need to do <code>cases</code> more times than you'd think to get things to be true by definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span>     <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">loop_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 328472642,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676641284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Recursive.20definition.20using.20some/near/328472642\">said</a>:</p>\n<blockquote>\n<p>I've found that with <code>noncomputable</code> recursive definitions you sometimes need to do <code>cases</code> more times than you'd think to get things to be true by definition:</p>\n</blockquote>\n<p>In my original example, <code>cases</code> is not enough but using <code>nat.rec_on</code> does work</p>",
        "id": 328473855,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1676641642
    },
    {
        "content": "<p>You should write the <code>loop_succ</code> lemma first and then use it to prove your actual goal</p>",
        "id": 328474410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676641803
    },
    {
        "content": "<p>Fighting the equation compiler shouldn't be something you mix with fighting induction and fighting <code>some_spec</code>s</p>",
        "id": 328474566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676641840
    },
    {
        "content": "<p>Though, ideally, the equation compiler wouldn't need to be fought at all, at least in a case like this one</p>",
        "id": 328475518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676642119
    }
]