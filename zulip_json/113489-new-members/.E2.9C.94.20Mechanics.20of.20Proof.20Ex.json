[
    {
        "content": "<p>In the solution for the exercise below, I seemed to have to insert redundant steps for the formatting to be accepted. Can someone explain the logical necessity of the steps I marked redundant? Thank you for your time.</p>\n<p>Exercise 3.1.10.13</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Odd</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hEven</span> <span class=\"bp\">|</span> <span class=\"n\">hOdd</span> <span class=\"o\">:=</span> <span class=\"n\">Int.even_or_odd</span> <span class=\"n\">n</span>\n  <span class=\"bp\">.</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">he</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hEven</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"k\">calc</span>\n        <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">extra</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>  <span class=\"c\">/-</span><span class=\"cm\"> This step seems redundant -/</span>\n    <span class=\"bp\">.</span> <span class=\"n\">use</span> <span class=\"n\">e</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">he</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c\">/-</span><span class=\"cm\"> This step seems redundant -/</span>\n\n  <span class=\"bp\">.</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">o</span><span class=\"o\">,</span><span class=\"n\">ho</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hOdd</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"k\">calc</span>\n        <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">extra</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">.</span> <span class=\"n\">use</span> <span class=\"n\">o</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">o</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ho</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">o</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 386502689,
        "sender_full_name": "Don Burgess",
        "timestamp": 1692667561
    },
    {
        "content": "<p>Welcome <span class=\"user-mention\" data-user-id=\"634891\">@Don Burgess</span>.  In these examples, no <code>calc</code> is necessary: if you imagine something as a one-step <code>calc</code> proof, you don't need to write out a calc at all.  So,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Odd</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hEven</span> <span class=\"bp\">|</span> <span class=\"n\">hOdd</span> <span class=\"o\">:=</span> <span class=\"n\">Int.even_or_odd</span> <span class=\"n\">n</span>\n  <span class=\"bp\">.</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">he</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hEven</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">extra</span>\n    <span class=\"bp\">.</span> <span class=\"n\">use</span> <span class=\"n\">e</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">he</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">o</span><span class=\"o\">,</span><span class=\"n\">ho</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hOdd</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">extra</span>\n    <span class=\"bp\">.</span> <span class=\"n\">use</span> <span class=\"n\">o</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ho</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 386516759,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1692674523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  Thank you for your elegant solution and your innovative textbook</p>",
        "id": 387578610,
        "sender_full_name": "Don Burgess",
        "timestamp": 1693185958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634891\">Don Burgess</span> has marked this topic as resolved.</p>",
        "id": 387578661,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693185968
    }
]