[
    {
        "content": "<p>If you are given two natural number <code>x,y</code> and also that <code>y = x + 7</code> and need to show that <code>2 * y = 2 * (x + 7)</code>. My understanding of how to prove such things on paper is: if you have two terms that are equal <code>t1 = t2</code> then for any function or functional symbol <code>f</code> holds <code>f(t1) = f(t2)</code>. I called this substitution property of <code>=</code>. Same holds for any number of arguments. If <code>t1 = t1', ... tn = tn'</code> then <code>f(t1,...tn) = f(t1',...tn')</code>. In our case <code>2 = 2</code>and <code>y = x + 7</code> and <code>*</code> is a function thus <code>2 * y = 2 * (x + 7)</code>. However, in lean the proof was slightly different: you have equality <code>2 * (x + 7) = 2 * (x + 7)</code> following from reflexivity property of <code>=</code> and then substitute <code>x + 7</code> with <code>y</code> on the left hand side. This is also a fine proof that works on paper but is it possible to proof that goal in lean with the first way?</p>",
        "id": 392718680,
        "sender_full_name": "Alexander Belov",
        "timestamp": 1695486877
    },
    {
        "content": "<p>This property that two applications of a function are equal if the functions and inputs are equal is sometimes called \"congruence\". Here are some proofs using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=congr_arg#doc\">docs#congr_arg</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Basic.html#congr_arg%E2%82%82\"><code>congr_arg₂</code></a>, and <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md#congr\">the <code>congr</code> tactic</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr_arg₂</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span>\n</code></pre></div>",
        "id": 392722407,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1695488350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Alexander Belov</span> has marked this topic as resolved.</p>",
        "id": 392723629,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695489427
    }
]