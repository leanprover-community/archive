[
    {
        "content": "<p>How to write an instance of <code>OfNat</code> for a custom Even Number datatype.  My <code>Even</code> is as following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">double</span><span class=\"o\">::</span>\n  <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 375698080,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1689496097
    },
    {
        "content": "<p>This appears to work, but be warned that it divides by two by repeatedly subtracting two:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">double</span><span class=\"o\">::</span>\n  <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.addTwo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"n\">x.base</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.addTwo</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- 0</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- fails to synth instance</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- fails to synth instance</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- fails to synth instance</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 375703841,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689498167
    },
    {
        "content": "<p><code>(254 : Even)</code> is the last even number</p>",
        "id": 375704514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689498346
    },
    {
        "content": "<p>If you're not interested in enforcing evenness of the number literal, then there's the simpler</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 375705737,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689498713
    },
    {
        "content": "<p>I just remembered <a href=\"#narrow/stream/270676-lean4/topic/instance.20with.20tactic.20autoparam/near/343495807\">Gabriel's trick</a> for inserting decidable assumptions into instances.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">double</span><span class=\"o\">::</span>\n  <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">When</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">isTrue</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">When</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">When.mk</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">When</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 375707208,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689499188
    },
    {
        "content": "<p>Now even unimaginably large numbers like 256 (and beyond!) are even. More seriously, there's no practical limit: <code>(100000000000000000000000 : Even)</code> checks out and <code>(100000000000000000000001 : Even)</code> does not.</p>",
        "id": 375707636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689499318
    },
    {
        "content": "<p>This <code>When</code> class lets you do things like implement the Collatz function using typeclasses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Collatz</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">When</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Collatz</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Collatz</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">When</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Collatz</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Collatz</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">When</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Collatz</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">When</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Collatz</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Collatz.steps</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Collatz</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Collatz.steps</span> <span class=\"mi\">39</span>\n<span class=\"c1\">-- [39, 118, 59, 178, 89, 268, 134, 67, 202, 101, 304, 152, 76, 38, 19, 58, 29, 88,</span>\n<span class=\"c1\">--  44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]</span>\n</code></pre></div>",
        "id": 375712237,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689500707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/write.20an.20instance.20for.20Even.20number/near/375703841\">said</a>:</p>\n<blockquote>\n<p>This appears to work, but be warned that it divides by two by repeatedly subtracting two:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">double</span><span class=\"o\">::</span>\n  <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.addTwo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"n\">x.base</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.addTwo</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- 0</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- fails to synth instance</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- fails to synth instance</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- fails to synth instance</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"c1\">-- 3</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><code>eval (2 : Even)</code> This line seems to cause an error, as does the following. Here is the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>synthesize<span class=\"w\"> </span>instance\n<span class=\"w\">  </span>OfNat<span class=\"w\"> </span>Even<span class=\"w\"> </span><span class=\"m\">2</span>\n</code></pre></div>",
        "id": 375759512,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1689514887
    },
    {
        "content": "<p>I did the <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/polymorphism.html\">same problem in the book</a></p>\n<blockquote>\n<p>Write an instance of OfNat for the even number datatype from the previous section's exercises that uses recursive instance search. For the base instance, it is necessary to write OfNat Even <a href=\"http://Nat.zero\">Nat.zero</a> instead of OfNat Even 0.</p>\n</blockquote>\n<p>and came out with this solution which seems to work fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">twice</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.plus</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n.plus</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.plus</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.twice</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Even.twice</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Even.twice</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Plus</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">Even.plus</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Even.plus</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.twice</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">x.toNat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.twice</span> <span class=\"n\">Nat.zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Even.twice</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"c1\">-- expected to fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"c1\">-- expected to fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 375793285,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1689523022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/write.20an.20instance.20for.20Even.20number/near/375793285\">said</a>:</p>\n<blockquote>\n<p>I did the <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/polymorphism.html\">same problem in the book</a></p>\n<blockquote>\n<p>Write an instance of OfNat for the even number datatype from the previous section's exercises that uses recursive instance search. For the base instance, it is necessary to write OfNat Even <a href=\"http://Nat.zero\">Nat.zero</a> instead of OfNat Even 0.</p>\n</blockquote>\n<p>and came out with this solution which seems to work fine:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">twice</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.plus</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n.plus</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.plus</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.twice</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Even.twice</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Even.twice</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Plus</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:=</span> <span class=\"n\">Even.plus</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Even.plus</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.twice</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">x.toNat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.twice</span> <span class=\"n\">Nat.zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Even.twice</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"c1\">-- expected to fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"c1\">-- expected to fail</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This works. Thank you so much! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 376202503,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1689644464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627821\">Trapped Beast</span> has marked this topic as resolved.</p>",
        "id": 376202538,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689644483
    },
    {
        "content": "<p>I am reviving this topic because I cannot understand why the following code does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">double</span> <span class=\"o\">::</span>\n  <span class=\"n\">half</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.double</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.double</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I undestand this is the \"stupid\" thing to do, since I am declaring that every <code>n : Nat</code> is always represented by the same element <code>Even.double 0</code>, yet the following failure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"c1\">--OK, this works</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize instance  OfNat Even 2</span>\n</code></pre></div>\n<p>is unexpected to me because I would expect Lean to look for an instance of <code>OfNat Even 0</code> (which is there, and it can find it), and then to happily move on. What am I missing?</p>",
        "id": 401636453,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699819057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I'm not getting any failures, using a recent version of Lean 4 (the one mathlib's using right now).</p>",
        "id": 401636634,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699819232
    },
    {
        "content": "<p>Oups...</p>",
        "id": 401636678,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699819259
    },
    {
        "content": "<p>No error online (= on the lean web editor) but still errors locally. I try to dig... Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 401636762,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699819319
    },
    {
        "content": "<p>Oh, I see. If I have a lonely lean file (by which I mean that it is not contained in any package, say it sits alone in the Desktop) I can still open it with VSCode and many  \"basic\" things work. The above <code>#check (2 : Even)</code> does not, but all the rest does. It works in a new file inside a project, even if the file does not <code>import</code> anything, but not \"on its own\". I assume then that something is tacitly being imported or activated as soon as I am working in a package, is that correct?</p>",
        "id": 401637206,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699819659
    },
    {
        "content": "<p>Might also be a different lean version?</p>",
        "id": 401637402,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699819910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20write.20an.20instance.20for.20Even.20number/near/401637206\">said</a>:</p>\n<blockquote>\n<p>I assume then that something is tacitly being imported or activated as soon as I am working in a package, is that correct?</p>\n</blockquote>\n<p>I personally have no idea. I've assumed that opening lone files isn't supported so haven't tried.</p>\n<p>It's possible that it's only not working because it's running some random old version of Lean. Want to try this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n</code></pre></div>",
        "id": 401637662,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699820184
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 401637673,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699820213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20write.20an.20instance.20for.20Even.20number/near/401637402\">said</a>:</p>\n<blockquote>\n<p>Might also be a different lean version?</p>\n</blockquote>\n<p>Well, I don't really think so. When I open a lonely file I get the error</p>\n<blockquote>\n<p>Opened folder is not a valid Lean 4 project. Please open a valid Lean 4 project containing a 'lean-toolchain' file for full functionality.</p>\n</blockquote>\n<p>and I think that my issue has something to do with the \" full functionality\". Not that it is really important (in \"real life\" I always work in a project) but I find it funny.</p>",
        "id": 401637686,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699820225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20write.20an.20instance.20for.20Even.20number/near/401637662\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20write.20an.20instance.20for.20Even.20number/near/401637206\">said</a>:</p>\n<blockquote>\n<p>I assume then that something is tacitly being imported or activated as soon as I am working in a package, is that correct?</p>\n</blockquote>\n<p>I personally have no idea. I've assumed that opening lone files isn't supported so haven't tried.</p>\n<p>It's possible that it's only not working because it's running some random old version of Lean. Want to try this?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>\"4.0.0-nightly-2023-02-04\"</p>",
        "id": 401637704,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699820272
    },
    {
        "content": "<p>Which is indeed quite old, I agree; but strange that at that point something in the above code would not work, I though I was playing with super-basic stuff.</p>",
        "id": 401637756,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699820310
    },
    {
        "content": "<p>At any rate, again, not very important! Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> for your replies.</p>",
        "id": 401637791,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699820355
    },
    {
        "content": "<p>I think you can set the default toolchain with <code>elan default</code> if you really want this to work, but I usually find it easier to have a mathlib around and create <code>Mathlib/foo.lean</code> files <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 401637902,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699820457
    },
    {
        "content": "<p>Since we're here: in the <em>working</em> file, when trying to give a clever definition, I can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n   <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Even.double</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Even.double</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- does not work! I get</span>\n<span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">--  n</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--  Nat : Type</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--  Even : Type</span>\n</code></pre></div>\n<p>Is it expected that while declaring some method the implicit type inference needs help?</p>",
        "id": 401638539,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699821163
    },
    {
        "content": "<p>Yeah, the <code>OfNat</code> instance only kicks in automatically for natural number literals, but in <code>(n : Even)</code> you have <code>n</code> is a variable</p>",
        "id": 401638846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699821542
    },
    {
        "content": "<p>You could save a bit of line noise writing it like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Even.double</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 401638943,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699821657
    }
]