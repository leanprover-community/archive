[
    {
        "content": "<p>In the middle of a proof, I have a list <code>L</code> together with an <code>equation : L = x :: y :: ys</code>.  Using that, I prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">positive_length</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I then write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">l_0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">L.length</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and get the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>How can I use <code>positive_length</code> to make Lean synthesize that instance for me, so I can use it in the proof?</p>",
        "id": 390278951,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694427824
    },
    {
        "content": "<p>You must wrap it in a <code>Fact</code>.</p>",
        "id": 390279273,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694427944
    },
    {
        "content": "<p>The conclusion of my theorem is of the form <code>∃ i : Fin L.length, p L[i]</code> for a predicate <code>p</code>.</p>",
        "id": 390279373,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694427973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Failed.20to.20synthesize.20instance.20for.20zero.20index.20of.20list/near/390279273\">said</a>:</p>\n<blockquote>\n<p>You must wrap it in a <code>Fact</code>.</p>\n</blockquote>\n<p>Is <code>Fact</code> a type in Core? I am not using Mathlib or Std.</p>",
        "id": 390279488,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694428014
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.instAddMonoidWithOne#doc\">docs#Fin.instAddMonoidWithOne</a> tells you what you need. You need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NeZero#doc\">docs#NeZero</a>.</p>",
        "id": 390279539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694428032
    },
    {
        "content": "<p>Tough luck. Core and Std only have a <code>OfNat (Fin n.succ)</code> instance, not a <code>Fact (n != 0) -&gt;  OfNat (Fin n)</code> as mathlib does.</p>",
        "id": 390279758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694428106
    },
    {
        "content": "<p>I am confused by that statement: previously in the proof, I wrote <code>(0 : Fin 1)</code> with no complaints.  Do you mean that I should prove <code>L.length = succ x</code> for some <code>x</code>?  That is easy.</p>",
        "id": 390280434,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694428340
    },
    {
        "content": "<p>Yeah because <code>1</code> is syntactically of the form <code>Nat.succ n</code> for some <code>n</code> (namely <code>n := 0</code>). The problem in your case is that <code>L.length</code> is not syntactically of the form <code>Nat.succ n</code> for some <code>n</code>.</p>",
        "id": 390280777,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694428476
    },
    {
        "content": "<p>(1 is <em>not</em> syntactically <code>succ n</code>, but it does unify with it)</p>",
        "id": 390288255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694431188
    },
    {
        "content": "<p>Thank you for your comments, I know how to proceed now!</p>",
        "id": 390301634,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694435973
    }
]