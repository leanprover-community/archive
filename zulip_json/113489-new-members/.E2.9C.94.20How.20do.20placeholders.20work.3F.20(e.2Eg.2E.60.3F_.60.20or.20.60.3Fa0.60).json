[
    {
        "content": "<p><strong>Where in the docs</strong> (books, etc...) can I learn about placeholders?  </p>\n<p>GPT3 says that such placeholder terms are \"assumed and accepted\" and have to be provided later in the proof. That doesn't happen here. Is this specific to <code>refine</code> or is it a general language feature?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span>  <span class=\"o\">:</span>  <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">log_pos</span> <span class=\"bp\">?</span><span class=\"n\">a0.hx</span>\n    <span class=\"n\">linarith</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>(Much better/shorter version of this proof welcome!) <br>\n We have <code>?a0</code>, which is an argument name of <code>mul_le_mul_right</code> (does that matter?), but isn't an argument name of <code>mul_le_mul_right</code>. Nevertheless, renaming the last occurence of <code>?a0</code> to something else adds it as a goal, so the name seems to matter. So does the third <code>?a0</code> refer back to the earlier one? Why does <code>?_</code> instead not work?</p>",
        "id": 392550796,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695397910
    },
    {
        "content": "<p>(can you add the imports etc in your code to make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?)</p>",
        "id": 392560224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695400188
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Init/Tactics.lean#L124-L129\">docs for <code>refine</code></a>  explain that <code>?a0</code> is a \"named hole\" and <code>?_</code> is an \"unnamed hole\". Holes are supported by a couple of tactics like <code>intros</code> and <code>injection</code>.</p>\n<p>In your concrete example, the names <code>a0</code> can be replaced by any name you choose. The fact that the parameter to <code>mul_le_mul_right</code> is also called <code>a0</code> is irrelevant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span>  <span class=\"o\">:</span>  <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">hello</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">log_pos</span> <span class=\"bp\">?</span><span class=\"n\">hello.hx</span>\n    <span class=\"n\">linarith</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">hello</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 392581806,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1695408437
    },
    {
        "content": "<p>Seeing as you're never referring to the names given to the holes, you could also use <code>?_</code> instead. Here's a structured version of the proof that uses <code>?_</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"n\">where</span>\n  <span class=\"n\">mp</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">log_pos</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"n\">mpr</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">log_pos</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 392582642,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1695408803
    },
    {
        "content": "<p>Thanks for the nice answer. I still don't understand why, in this version of the proof, changing the name of the last hole from <code>a0</code> to, say <code>a1</code> no longer completes the proof (but adds another goal):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span>  <span class=\"o\">:</span>  <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">log_pos</span> <span class=\"bp\">?</span><span class=\"n\">a0.hx</span>\n    <span class=\"n\">linarith</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 392797463,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695543233
    },
    {
        "content": "<p>Placeholders are a way to refer to individual metavariables, and metavariables are \"holes\" in expressions that need to eventually be filled in to make a complete proof. The <code>?foo</code> syntax is how you refer to a metavariable named <code>foo</code> in the current list of metavariables. Inside a theorem/example/def, there is a single namespace that associates a metavariable to a given name.</p>\n<p>In Lean, a tactic goal <em>is</em> a metavariable. The <code>refine</code> tactic takes all new <code>?foo</code> and <code>?_</code> metavariables and adds them to the goal list.</p>\n<p>If you reuse a name (like how <code>?a0</code> appears multiple times) then you are using the same <code>a0</code> metavariable to supply a proof in each case. Changing an <code>?a0</code> to <code>?a1</code> means that you get a new goal named <code>a1</code>, distinct from the <code>a0</code> goal. As an experiment, you could do <code>exact ?a0</code> to close the <code>a1</code> goal.</p>",
        "id": 392798822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695544019
    },
    {
        "content": "<p>In general, you want to use different names for each named metavariable that appears. Reusing metavariable names across multiple tactics tends to be confusing and leads to some \"spooky action at a distance.\"</p>",
        "id": 392799807,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695544411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> has marked this topic as resolved.</p>",
        "id": 392835948,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695563794
    }
]