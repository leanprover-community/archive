[
    {
        "content": "<p>Is there a way to assume a type that is an instance of multiple type classes without constructing it? For example, suppose I want to assume  an arbitrary type named <code>var_</code> that is infinite, countable, and has decidable equality. How would I write that? I imagine this would have to be done with something like <code>constant var_ :  Type</code>, but I'm not sure how to say it has the given properties.</p>",
        "id": 324379466,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1674964079
    },
    {
        "content": "<p>You want <code>variable</code> most likely, not <code>constant</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">var_</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">countable</span> <span class=\"n\">var_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">var_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">var_</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The square brackets introduce type class arguments. The curly brackets introduce implicit arguments. The asterisk makes the statements involving this variable universe polymorphic.</p>",
        "id": 324381471,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674966236
    },
    {
        "content": "<p>Oh, and I implicitly assumed you are using Lean 3.</p>",
        "id": 324381524,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674966262
    },
    {
        "content": "<p>Of course, you also need to import the relevant mathlib files containing those declarations.</p>",
        "id": 324381560,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674966313
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 324381840,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1674966720
    },
    {
        "content": "<p>Note: this does not work if the different classes share some data. You cannot assume like this that <code>var_</code> is both a <code>ring</code> and a <code>comm_monoid</code>, since that will give you two multiplications that are not assumed to be related. Instead you have to assume it is a <code>comm_ring</code>.</p>",
        "id": 324418602,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674991355
    }
]