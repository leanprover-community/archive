[
    {
        "content": "<p>Hi people, let me briefly introduce myself. my name is mario krenn, I am a quantum physicist/AI researcher at university of Toronto (<a href=\"http://mariokrenn.wordpress.com/\" title=\"http://mariokrenn.wordpress.com/\">mariokrenn.wordpress.com/</a>).</p>\n<p>I learned about Lean by Kevin Buzzard's MO post (<a href=\"https://mathoverflow.net/questions/311071/which-mathematical-definitions-should-be-formalised-in-lean\" title=\"https://mathoverflow.net/questions/311071/which-mathematical-definitions-should-be-formalised-in-lean\">https://mathoverflow.net/questions/311071/which-mathematical-definitions-should-be-formalised-in-lean</a>), and he introduced me to this channels per email.</p>\n<p>I am in particular interested in graph theoretical questions, and hope for suggestions to start learning, in particular i would love seeing the sources of simple graph theory formalized proofs. Thank you!</p>",
        "id": 195822393,
        "sender_full_name": "Mario Krenn",
        "timestamp": 1588243542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297962\">@Mario Krenn</span> Hello and welcome! At the moment we have no graph theory in <code>mathlib</code>, the \"standard library\" for maths in Lean. But there have been several attempts at getting something done. The last attempt is currently WIP on the <code>hedetniemi</code> branch of the repository. (I don't know if you are familiar with git/github.) You can browse the code here: <a href=\"https://github.com/leanprover-community/mathlib/tree/hedetniemi/src/graph_theory\" title=\"https://github.com/leanprover-community/mathlib/tree/hedetniemi/src/graph_theory\">https://github.com/leanprover-community/mathlib/tree/hedetniemi/src/graph_theory</a></p>",
        "id": 195822657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243704
    },
    {
        "content": "<p>Hello everyone, I just wanted to introduce myself: I am Jakob Scholbach, an algebraic geometer with interests in motives and the Langlands program. I find the recent works on formalization of topics in algebraic geometry very inspiring and I am slowly starting to learn lean. Thanks guys for your help so far, more stupid questions are sure to follow!</p>",
        "id": 224494195,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611936705
    },
    {
        "content": "<p>Hi Jakob. I think one thing which we are lacking right now but which is probably accessible is a whole bunch of predicates on ring homomorphisms, e.g. being flat, unramified, etale, finite presentation etc, and then transferring all these concepts over to morphisms of schemes. We have the category of schemes but nobody has begun to think about formalising any proofs which involve saying \"this morphism is locally X, therefore it is X\". There is an art to getting the definitions right in a theorem prover; with the wrong definitions, proving stuff is really slow going and painful. If you get the definition right however then it can be a dream. The problem is that in some sense the art of figuring out the correct definition is a very subtle one, and probably prover-dependent, so it's right now quite an adventure trying to figure out this stuff.</p>",
        "id": 224507250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611941853
    },
    {
        "content": "<p>OK, good to know. Speaking about \"getting things right\" -- in paper mathematics I am very fond of categorical thinking. E.g. I believe a good approach to étale maps is by combining formally étale (a kind of orthogonality relation against simple classes of maps) + finite presentation property, which is a compactness condition, which again is very categorical in flavor. Since I have zero knowledge about formalisation, let me ask very naively: is this kind of thinking useful or not so much?</p>",
        "id": 224514993,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611945196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> You might be interested in this discussion <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\n<a href=\"#narrow/stream/116395-maths/topic/.C3.89tale.20morphisms.20of.20rings/near/219027888\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/.C3.89tale.20morphisms.20of.20rings/near/219027888</a></p>",
        "id": 224515104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611945246
    },
    {
        "content": "<p>I think formalizing the equivalence between \"categorical\" compactness in the category of rings (or algebras over some commutative ring) as being finitely-presented would be a very interesting project as well.</p>",
        "id": 224515255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611945332
    },
    {
        "content": "<p>Concerning finite presentation, I recently wrote the definition in terms of quotient of polynomial rings and proved some extremely basic results. (If you are not used to formalized math, \"extremely basic\" means something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a finitely generated <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra, this is not completely trivial.) I wanted to do more but I switched to the liquid project, if you are interested I have some results still not in mathlib, essentially that the quotient of a finitely presented algebra by a finitely generated ideal is finitely presented.</p>",
        "id": 224516104,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611945799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> In practice, we often have reasons to write definitions that don't quantify over categories (so no universal properties as definitions), but rather choose something as close as possible to first-order logic.<br>\nThe categorical characterisations will then be theorems that are part of the API, the interface for using the objects.</p>",
        "id": 224517285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611946402
    },
    {
        "content": "<p>All of us mathematicians here have only been using this software for a few years at most. Abstract categorical thinking is super-important, as is trying to find the right abstractions. Maybe you'll find the comments about finding the correct way to think about extending stuff continuously from a dense subset in sections 4 and 5 of <a href=\"https://arxiv.org/abs/1910.12320\">the perfectoid paper</a> interesting. Getting definitions right has been very interesting. I was somehow expecting the computer scientists to have all the answers, but actually they have been encouraging us to experiment, because nobody really tried formalising serious maths of this nature before. It took us three goes to <a href=\"https://arxiv.org/abs/2101.02602\">get schemes right</a>. You've arrived at a really interesting time. You know about this Scholze challenge? It's really quite active right now.</p>",
        "id": 224518776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611947129
    },
    {
        "content": "<p>cool project! im installing lean right now, just curious how big is lean?</p>",
        "id": 258181890,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634644703
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/hello\">#general &gt; hello</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span></p>",
        "id": 258181958,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634644751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451706\">@Tchsurvives</span> Welcome! What do you mean by \"big\"? What measure?</p>",
        "id": 258182001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634644774
    },
    {
        "content": "<p>as in how many megabytes haha</p>",
        "id": 258182028,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634644790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 258182197,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634644839
    },
    {
        "content": "<p>The Lean executable is ~16MB it seems.</p>",
        "id": 258182605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634645064
    },
    {
        "content": "<p>The mathlib library is ~50MB after compiling, and ~650.000 lines of code, I think. These numbers change rapidly.</p>",
        "id": 258182639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634645096
    },
    {
        "content": "<p>I count about 6 MB of Lean and C++ code in Lean itself, and another 27 MB of Lean files in Mathlib.</p>",
        "id": 258182729,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634645134
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>du -b ../lean/library/**/*.lean ../lean/src/**/*.<span class=\"o\">{</span>cpp,h<span class=\"o\">}</span> <span class=\"p\">|</span> awk <span class=\"s1\">'{sum += $1} END {print sum}'</span>\n<span class=\"go\">6431327</span>\n<span class=\"gp\">$ </span>du -sb src/**/*.lean <span class=\"p\">|</span> awk <span class=\"s1\">'{sum += $1} END {print sum}'</span>\n<span class=\"go\">27024149</span>\n</code></pre></div>",
        "id": 258182846,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634645190
    },
    {
        "content": "<p>i am slightly keen in formalising olympiad euclidean synthetic geometry, as part of the goal towards the IMO grand challenge, where do you recommend i begin?</p>",
        "id": 258187629,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634647526
    },
    {
        "content": "<p>i did some searching, but couldnt find much online</p>",
        "id": 258187645,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634647537
    },
    {
        "content": "<p>Did you find the <a class=\"stream\" data-stream-id=\"208328\" href=\"/#narrow/stream/208328-IMO-grand-challenge\">#IMO-grand-challenge</a> stream?</p>",
        "id": 258188114,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634647749
    },
    {
        "content": "<p>I think Euclidean geometry is still fairly hard at this point</p>",
        "id": 258188165,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634647775
    },
    {
        "content": "<p>You can take a look at <code>geometry/euclidean</code> in mathlib, to see what's there already.</p>",
        "id": 258188182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634647783
    },
    {
        "content": "<p>oh i see, ill check it out thanks!</p>",
        "id": 258188292,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634647822
    },
    {
        "content": "<p>I wouldn't be surprised if Euclidean geometry actually needs a DSL + a bunch of tactics in order to become doable or even nice.</p>",
        "id": 258188336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634647842
    },
    {
        "content": "<p>what do you mean domain specific language?</p>",
        "id": 258188524,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634647926
    },
    {
        "content": "<p>Currently setting up a \"geometry problem\" in Lean is very roundabout and verbose. It would be nice if we could \"switch on\" geometry mode, and then be able to talk in very brief terms.</p>",
        "id": 258188663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634647998
    },
    {
        "content": "<p>And not so many people are working on this atm. A lot of effort is being poured into making Lean 4 ready for prime time. After that, I guess people will return to the IMO-GC.</p>",
        "id": 258189114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634648182
    },
    {
        "content": "<p>Other people working on maths/mathlib are (empirical observation) not very interested in Euclidean geometry. It is a somewhat recreational branch of maths these days, which probably explains why.</p>",
        "id": 258189251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634648242
    },
    {
        "content": "<p>i see, ill talk to a few of my friends and see if we can help :) this project is really cool, keep going guys!</p>",
        "id": 258192082,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634649346
    },
    {
        "content": "<p>mathlib is designed as an integrated library of mathematics in general and that includes geometry. That means, for example, that setting up geometry at all involved first setting up affine spaces - but the work done on affine spaces in order to be able to say anything about geometry has since been used and extended by people working on lots of other things. It also means that other concepts we need in geometry should be set up in a more generally useful way (providing more generally useful definitions and lemmas is better than providing things very specific to Euclidean geometry). And when something is specific to geometry, it shouldn't be only two-dimensional unless the underlying concept is genuinely limited to two dimensions (for example, we have <code>circumcenter</code> defined for an arbitrary simplex, not just a triangle).</p>\n<p>For example, we need to be able to refer to betweenness of points, or points being inside triangles, to even state most IMO geometry problems. Defining that properly means first completing the refactor of convexity to apply to affine spaces, which has been discussed recently, which in turn seems to depend on a refactor of affine spaces so spaces with affine combinations over a semiring underlie a type class asserting those affine combinations agree with those coming from the <code>add_torsor</code> structure. That's also necessary before we can talk cleanly about e.g. the area of a triangle (linking to the measure theory parts of the library).</p>\n<p>For example, for oriented angles (which will probably turn out to be much more convenient for formal proofs than the unoriented angles we have, though IMO problems involving angles are stated with unoriented angles) we should first define orientations of vector spaces in general (again, see discussions on Zulip of how that might be done), rather than doing something ad hoc with complex numbers.</p>\n<p>I don't think the verbosity of geometry problems (compared to an informal statement) is any more than the verbosity of formal versions of results in other areas, once all the required definitions have been added. It's just that at this point, you probably need to write about 10000 lines more API, in geometry and things it depends on elsewhere in the library, before you can do much in the way of applying it to prove IMO geometry problems.</p>\n<p>So \"define orientations of vector spaces and prove a load of trivial lemmas about them\" is the sort of thing that's more practical at this point towards geometry than actually solving an IMO geometry problem.</p>",
        "id": 258294413,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1634689656
    },
    {
        "content": "<p>Just here to drop that the current state of the convexity refactor is indeed \"waiting for the affinity refactor\" and the state of the affinity refactor is \"thinking about how to do it\".</p>",
        "id": 258330379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634718422
    },
    {
        "content": "<p>there's something im unsure about</p>",
        "id": 258818916,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989275
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.intro</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)⟩,</span>\n    <span class=\"n\">or.elim</span> <span class=\"n\">h1</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpa</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hpa</span><span class=\"o\">⟩)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hqa</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hqa</span><span class=\"o\">⟩))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">or.elim</span> <span class=\"n\">h</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hpa</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">hpa</span><span class=\"o\">)⟩)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hqa</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">hqa</span><span class=\"o\">)⟩))</span>\n</code></pre></div>",
        "id": 258818938,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989279
    },
    {
        "content": "<p>i tend to see long expressions like these in the documentation, but i am wondering how one can come up with it himself</p>",
        "id": 258818991,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989346
    },
    {
        "content": "<p>while using the interactive evaluater in vs code, when i type the first line 'iff.intro' it simply throws an error (waiting for more arguments), and i am left unsure what to write</p>",
        "id": 258819002,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989395
    },
    {
        "content": "<p>is there a systematic way to go about learning how to 'chain' logic like these together? i have played the natural number game and done some simple exercises but i still don't really get the gist of it</p>",
        "id": 258819012,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989433
    },
    {
        "content": "<ol>\n<li>Use tactics, rather than term mode. </li>\n<li>In term mode, if you write <code>_</code> for missing arguments and hover over the <code>_</code> you will get a message telling you the expected type of that argument.</li>\n<li>Read the error message: it's telling you what sort of thing you need to write next.</li>\n</ol>",
        "id": 258819356,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990045
    },
    {
        "content": "<p>Until you understand what is going on though, learn to use tactics first.</p>",
        "id": 258819361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990066
    },
    {
        "content": "<p>If I were showing someone how to do this proof, I would write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">|</span><span class=\"n\">Q</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258819498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990297
    },
    {
        "content": "<p>Open this in an editor, and click through it, placing your cursor before and after each tactic, looking how the goal view changes.</p>",
        "id": 258819508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990318
    },
    {
        "content": "<p>Hopefully you will see that at every step, there is only one possible sensible thing to do, and that's what the next tactic does!</p>",
        "id": 258819516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990339
    },
    {
        "content": "<p>After you can write tactic proofs like this, a second step is learn how to \"golf\" them into term mode proofs.</p>",
        "id": 258819529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990365
    },
    {
        "content": "<p>is there a way to shorten this code</p>",
        "id": 258821499,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634993303
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩⟩⟩⟩,⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n</code></pre></div>",
        "id": 258821500,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634993304
    },
    {
        "content": "<p>Given that h must be a pretty monstrous term, I'd say that that was a pretty short way of taking it apart!</p>",
        "id": 258821516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634993374
    },
    {
        "content": "<p>You can shorten the code by not making such monstrous terms ;-)</p>",
        "id": 258821547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634993395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451706\">Tchsurvives</span> <a href=\"#narrow/stream/113489-new-members/topic/hello/near/258821500\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩⟩⟩⟩,⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You can do<code>obtain ⟨⟨_, _, _, _, _, _⟩, _, _⟩ := h,</code></p>",
        "id": 258821830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634993750
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">pts</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">between</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">ang_proper</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"n\">ang_proper</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 258822289,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634994317
    },
    {
        "content": "<p>or perhaps if i put h here, is there a better way to unpack it? (into a b c d and all the $\\and$ )</p>",
        "id": 258822302,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634994351
    },
    {
        "content": "<p>I'd put <code>ang_proper α ∧ ang_proper β</code> first.</p>",
        "id": 258822367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634994415
    },
    {
        "content": "<p>Then <code>obtain ⟨_, _, _, _, _, _, _, _, _⟩ := h</code> will do the job.</p>",
        "id": 258822393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634994471
    },
    {
        "content": "<p>that works great :)</p>",
        "id": 258823069,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634995395
    },
    {
        "content": "<p>what will happen when i have two hypotheses of the same name</p>",
        "id": 258823095,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634995442
    },
    {
        "content": "<p>like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">pts</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">pts</span>\n</code></pre></div>",
        "id": 258823132,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634995458
    },
    {
        "content": "<p>also, what is the difference between a semicolon and a comma in tactic mode</p>",
        "id": 258823708,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634996156
    },
    {
        "content": "<p>Weird stuff. The most common thing is that you get confused yourself and mistake one variable for the other. Second thing that can happen is that Lean picks the wrong variable for you. I'd advise on avoiding homonyms.</p>",
        "id": 258825738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634998387
    },
    {
        "content": "<p>A comma is the usual way to separate different tactic invokations. A semicolon means the next tactic invokation applies to all goals.</p>",
        "id": 258825763,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634998427
    },
    {
        "content": "<p>Arf yes</p>",
        "id": 258825894,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634998597
    },
    {
        "content": "<p>is there a way of 'intro'-ing a hypothesis in tactic mode</p>",
        "id": 258864406,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635059919
    },
    {
        "content": "<p>then having another goal to prove that hypothesis</p>",
        "id": 258864413,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635059932
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 258864430,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635059987
    },
    {
        "content": "<p>i hope my question makes sense</p>",
        "id": 258864470,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635060005
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#have\">tactic#have</a></p>",
        "id": 258865585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635062031
    },
    {
        "content": "<p>This code below didnt really work for me though, perhaps theres something im missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 258921241,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635143812
    },
    {
        "content": "<p>Where </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pts</span>\n</code></pre></div>",
        "id": 258921258,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635143835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451706\">@Tchsurvives</span> you probably want <code>have :</code> instead of <code>have :=</code></p>",
        "id": 258921430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635144015
    },
    {
        "content": "<p>oh! that works :D thanks</p>",
        "id": 258923387,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635145959
    },
    {
        "content": "<p>Hi! My name is Yury Yarovikov, I am a research scientist at AIRI. I currently do research on neural theorem proving in Lean, and I would like to join the community, not only for my proffesional research, but also for fun: I primarily view myself as a mathematician, and ITP is an exciting topic that concerns two of my main interests: mathematics and AI. Anyway, I'll be happy to chat about ITP, Lean, automated theorem proving and other stuff</p>",
        "id": 289175140,
        "sender_full_name": "Yury Yarovikov",
        "timestamp": 1657537840
    },
    {
        "content": "<p>hi! <a href=\"/user_uploads/3121/-UF89B6c2XLqb3KApr_Bh80U/Screenshot-2022-07-12-at-8.29.55-PM.png\">Screenshot-2022-07-12-at-8.29.55-PM.png</a> sorry what can i use to </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-UF89B6c2XLqb3KApr_Bh80U/Screenshot-2022-07-12-at-8.29.55-PM.png\" title=\"Screenshot-2022-07-12-at-8.29.55-PM.png\"><img src=\"/user_uploads/3121/-UF89B6c2XLqb3KApr_Bh80U/Screenshot-2022-07-12-at-8.29.55-PM.png\"></a></div><ol>\n<li>\n<p>move the x1 x2 away from injf<br>\nusually if it was in the goal i would use <code>intros x1 x2</code></p>\n</li>\n<li>\n<p>replace the <code>\\exists (g : Y \\right X)</code> with g1 <br>\n<code>apply exists.intro g1</code> didnt seem to work, although it worked for another example (see below picture)</p>\n</li>\n</ol>",
        "id": 289316133,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1657629152
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/8Asf5xBMijKbm6JbSZI1lmbv/Screenshot-2022-07-12-at-8.33.00-PM.png\">Screenshot-2022-07-12-at-8.33.00-PM.png</a> <a href=\"/user_uploads/3121/Rg5mwSAaD4Jy-fcd72i-ygxP/Screenshot-2022-07-12-at-8.33.05-PM.png\">Screenshot-2022-07-12-at-8.33.05-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8Asf5xBMijKbm6JbSZI1lmbv/Screenshot-2022-07-12-at-8.33.00-PM.png\" title=\"Screenshot-2022-07-12-at-8.33.00-PM.png\"><img src=\"/user_uploads/3121/8Asf5xBMijKbm6JbSZI1lmbv/Screenshot-2022-07-12-at-8.33.00-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Rg5mwSAaD4Jy-fcd72i-ygxP/Screenshot-2022-07-12-at-8.33.05-PM.png\" title=\"Screenshot-2022-07-12-at-8.33.05-PM.png\"><img src=\"/user_uploads/3121/Rg5mwSAaD4Jy-fcd72i-ygxP/Screenshot-2022-07-12-at-8.33.05-PM.png\"></a></div>",
        "id": 289316192,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1657629189
    },
    {
        "content": "<p>over here <code>apply exists.intro y</code> seemed to work, but not for functions?</p>",
        "id": 289316254,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1657629227
    },
    {
        "content": "<ol>\n<li>\n<p>You don't want to \"move it away\", right now injf says for any x1 x2 this proposition holds. The fact that it's shown in <code>{ }</code> means that the parameters will be inferred automatically by Lean. That means if you use this hypothesis somewhere Lean will automatically figure out what x1 and x2 should be based on the first argument (The equality) or the expected result type from where you are using it. So the short answer is if you wish to use it for a concrete x1 x2 just use it, Lean will fill it in on its own in this case. If it was not in <code>{ }</code> you would have to explicitly pass them e.g. <code>exact injf myX myOtherX myHypothesis</code>, as it is right now you could write <code>exact injf myHypothesis</code> and Lean will know what x1 and x2 should be.</p>\n</li>\n<li>\n<p>Note that your <code>g</code> is not written <code>g1</code> but with a unicode index, typable as <code>g\\_1</code> in vscode/emacs if you apply that it will work.</p>\n</li>\n</ol>",
        "id": 289317592,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657629981
    },
    {
        "content": "<p>Unless you're trying to prove this on your own, you should take a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.inv_fun\">docs#function.inv_fun</a></p>",
        "id": 289330177,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657635370
    },
    {
        "content": "<ol start=\"2\">\n<li>oh it was my bad i forgot a comma oops haha</li>\n</ol>",
        "id": 289336552,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1657637818
    },
    {
        "content": "<p>Hey just wondered if there’s any previous work on correctness of graph theory algorithms like dijkstra and prim?</p>",
        "id": 308209212,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1667703031
    },
    {
        "content": "<p>Mathlib doesn't have these things, but many of them have been formalized before (for example, searching google for \"coq dijkstra's algorithm\" yielded some github repositories as well as <a href=\"https://hal.archives-ouvertes.fr/hal-01126088/\">this paper</a>).</p>\n<p>One thing about graph theory algorithms is that the way you actually encode a graph is important. In mathlib's graph theory library, we're focusing on encodings useful for theory rather than ones that are useful for efficient algorithms. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph\">docs#simple_graph</a> is an adjacency matrix, rather than using adjacency lists.</p>\n<p>We would probably want these algorithms for programming purposes, so some of the effort would be to find a good API for that.</p>",
        "id": 308225134,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667722008
    },
    {
        "content": "<p>Is anyone here? My real name is Jeremy Tan Jie Rui and I just installed Lean</p>",
        "id": 340343186,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277418
    },
    {
        "content": "<p>Yes I am here.</p>",
        "id": 340343424,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678277485
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/4qeQ4loWXcmy8qgQU-wOcD6c/image.png\">image.png</a> I have this thing now, what do I do to get mathlib4 up and running?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4qeQ4loWXcmy8qgQU-wOcD6c/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4qeQ4loWXcmy8qgQU-wOcD6c/image.png\"></a></div>",
        "id": 340343535,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277523
    },
    {
        "content": "<p>Did you install the <code>lean4</code> plugin into VS Code?</p>",
        "id": 340343681,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678277569
    },
    {
        "content": "<p>yes</p>",
        "id": 340343690,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277573
    },
    {
        "content": "<p>As you can see from the screenshot I already ran <code>lake init ringel</code> to (seemingly) create a new package</p>",
        "id": 340343789,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277610
    },
    {
        "content": "<p>After installing the plugin, you probably saw <code>Failed to start 'lean' language server</code> with two buttons under.</p>",
        "id": 340343816,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678277620
    },
    {
        "content": "<p>yeah, clicked that button already</p>",
        "id": 340343850,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277629
    },
    {
        "content": "<p>Did you click on <code>Install Lean using Elan</code> there?</p>",
        "id": 340343892,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678277643
    },
    {
        "content": "<p>yes</p>",
        "id": 340343994,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277672
    },
    {
        "content": "<p>In that case, after clicking into the <code>.lean</code> file, an Infoview should appear in the right panel.</p>",
        "id": 340344006,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678277675
    },
    {
        "content": "<p>Can you see Infoview anywhere?</p>",
        "id": 340344190,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678277729
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/J4g4UbaYu37EAO4axzS63dUA/image.png\">image.png</a> ...but I closed the infoview</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/J4g4UbaYu37EAO4axzS63dUA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/J4g4UbaYu37EAO4axzS63dUA/image.png\"></a></div>",
        "id": 340344456,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277789
    },
    {
        "content": "<p>so I reopened VS Code and typed the above commands</p>",
        "id": 340344512,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277805
    },
    {
        "content": "<p>so there are these .lean files which I understand contain the actual theorems</p>",
        "id": 340344617,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277834
    },
    {
        "content": "<p>You will need to see the Infoview for pretty much anything.</p>",
        "id": 340344620,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678277835
    },
    {
        "content": "<p>There are probably no theorems in the new project.</p>",
        "id": 340344705,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678277861
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/7HCEOgk_Uw0h2hYF26YqOIVe/image.png\">image.png</a> OK, got the infoview showing</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7HCEOgk_Uw0h2hYF26YqOIVe/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7HCEOgk_Uw0h2hYF26YqOIVe/image.png\"></a></div>",
        "id": 340344837,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277897
    },
    {
        "content": "<p>(by the way the package is called ringel because I ultimately intend this to contain a formally verified proof of the Ringel–Youngs theorem or Heawood conjecture)</p>",
        "id": 340345002,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277956
    },
    {
        "content": "<p>Now I have created a new file test.lean and put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">topological_space</span>\n</code></pre></div>\n<p>but it says that topology is an unknown package, how do I get the lean4 version of this package from mathlib?</p>",
        "id": 340346130,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678278337
    },
    {
        "content": "<p>(I know that Lean 4 is the future, so I don't want to rely on Lean 3 things)</p>",
        "id": 340346659,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678278509
    },
    {
        "content": "<p>I am not up to date, but I suggest you first check if the desired part of the <code>topology</code> package has already been ported to Lean 4:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Topology\">https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Topology</a></p>",
        "id": 340348019,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678278892
    },
    {
        "content": "<p>but how do I actually get it into my computer so that the code above will work?</p>",
        "id": 340348159,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678278945
    },
    {
        "content": "<p>is there <em>another</em> command for that?</p>",
        "id": 340348197,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678278958
    },
    {
        "content": "<p>wait...</p>",
        "id": 340348522,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678279054
    },
    {
        "content": "<p>You can get up to date info on which files have made it to Lean 4 at: <a href=\"https://leanprover-community.github.io/mathlib-port-status\">https://leanprover-community.github.io/mathlib-port-status</a></p>",
        "id": 340349841,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678279422
    },
    {
        "content": "<p>If you want to import mathlib4 files, you need to modify your configuration file, <code>lakefile.lean</code>, to list mathlib4 as a dependency. Alternately, you can delete your current directory and run <code>lake init ringel math</code> which will configure your module to use mathlib4 automatically.</p>",
        "id": 340350744,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678279714
    },
    {
        "content": "<p>I actually did delete my current directory and then ran <code>lake init ringel math</code></p>",
        "id": 340351323,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678279890
    },
    {
        "content": "<p>Now, however, I am running <code>lake exe cache get</code> and it is not providing any progress updates</p>",
        "id": 340351400,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678279916
    },
    {
        "content": "<p><code>Attempting to download 1611 file(s)</code></p>",
        "id": 340351503,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678279928
    },
    {
        "content": "<p>It is not very chatty</p>",
        "id": 340351658,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678279972
    },
    {
        "content": "<p>But it should not take long</p>",
        "id": 340351706,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678279985
    },
    {
        "content": "<p>It depends on your connection speed but usually I don't wait more than a minute for it to finish</p>",
        "id": 340352252,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678280133
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/-1TdnIuCfggkdL0EJfUf91fe/image.png\">image.png</a> The command is still not terminating after 5 minutes</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-1TdnIuCfggkdL0EJfUf91fe/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-1TdnIuCfggkdL0EJfUf91fe/image.png\"></a></div>",
        "id": 340352379,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678280164
    },
    {
        "content": "<p>Ctrl-C or no?</p>",
        "id": 340352525,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678280189
    },
    {
        "content": "<p>Yes</p>",
        "id": 340352559,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678280196
    },
    {
        "content": "<p>Did you copy a <code>lean-toolchain</code> file from another folder?</p>",
        "id": 340352601,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678280208
    },
    {
        "content": "<p>what copying toolchains? I simply followed the instructions on <a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a> starting from step 3</p>",
        "id": 340352787,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678280251
    },
    {
        "content": "<p>What are the contents of your <code>lean-toolchain</code> and what is the output of <code>lake update</code>?</p>",
        "id": 340353086,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678280328
    },
    {
        "content": "<p>how do I view the contents of <code>lean-toolchain</code></p>",
        "id": 340353225,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678280368
    },
    {
        "content": "<p>It is in the root directory of your project. You can view it in VS Code (or another editor or call <code>cat</code>)</p>",
        "id": 340353454,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678280415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Parcly Taxel</span> <a href=\"#narrow/stream/113489-new-members/topic/hello/near/340346130\">said</a>:</p>\n<blockquote>\n<p>Now I have created a new file test.lean and put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">topological_space</span>\n</code></pre></div>\n<p>but it says that topology is an unknown package, how do I get the lean4 version of this package from mathlib?</p>\n</blockquote>\n<p>this is a lean 3 style import btw, files in Lean 4 look like <code>import Mathlib.Topology.Basic</code></p>",
        "id": 340354044,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678280564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113489-new-members/topic/hello/near/340353086\">said</a>:</p>\n<blockquote>\n<p>What are the contents of your <code>lean-toolchain</code> and what is the output of <code>lake update</code>?</p>\n</blockquote>\n<p><code>lean-toolchain</code> reads <code>leanprover/lean4:nightly-2023-02-24</code></p>",
        "id": 340355175,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678280831
    },
    {
        "content": "<p><code>lake update</code> doesn't seem to output anything</p>",
        "id": 340355219,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678280845
    },
    {
        "content": "<p>now I put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">topological_space</span>\n</code></pre></div>\n<p>and suddenly it's building everything</p>",
        "id": 340355341,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678280878
    },
    {
        "content": "<p>The purpose of <code>cache</code> is to pull copies of the built files so you don't have to wait. Building everything locally can take a while depending on your machine.</p>",
        "id": 340356213,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678281073
    },
    {
        "content": "<p>I don't know why <code>lake exe cache get</code> didn't work, why it hung</p>",
        "id": 340356292,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678281099
    },
    {
        "content": "<p>I assume you are on Linux? What is the output of <code>curl -V</code>?</p>",
        "id": 340356427,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678281129
    },
    {
        "content": "<p>I am on Ubuntu 22.10</p>",
        "id": 340356567,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678281171
    },
    {
        "content": "<p><code>curl -V</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">curl</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">85</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">pc</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"o\">)</span> <span class=\"n\">libcurl</span><span class=\"bp\">/</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">85</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">OpenSSL</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"n\">zlib</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">11</span> <span class=\"n\">brotli</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span> <span class=\"n\">zstd</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">libidn2</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"n\">libpsl</span><span class=\"bp\">/</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"n\">libidn2</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">libssh</span><span class=\"bp\">/</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"n\">openssl</span><span class=\"bp\">/</span><span class=\"n\">zlib</span> <span class=\"n\">nghttp2</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">librtmp</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"n\">Release</span><span class=\"bp\">-</span><span class=\"n\">Date</span><span class=\"o\">:</span> <span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">31</span>\n<span class=\"n\">Protocols</span><span class=\"o\">:</span> <span class=\"n\">dict</span> <span class=\"n\">file</span> <span class=\"n\">ftp</span> <span class=\"n\">ftps</span> <span class=\"n\">gopher</span> <span class=\"n\">gophers</span> <span class=\"n\">http</span> <span class=\"n\">https</span> <span class=\"n\">imap</span> <span class=\"n\">imaps</span> <span class=\"n\">ldap</span> <span class=\"n\">ldaps</span> <span class=\"n\">mqtt</span> <span class=\"n\">pop3</span> <span class=\"n\">pop3s</span> <span class=\"n\">rtmp</span> <span class=\"n\">rtsp</span> <span class=\"n\">scp</span> <span class=\"n\">sftp</span> <span class=\"n\">smb</span> <span class=\"n\">smbs</span> <span class=\"n\">smtp</span> <span class=\"n\">smtps</span> <span class=\"n\">telnet</span> <span class=\"n\">tftp</span>\n<span class=\"n\">Features</span><span class=\"o\">:</span> <span class=\"n\">alt</span><span class=\"bp\">-</span><span class=\"n\">svc</span> <span class=\"n\">AsynchDNS</span> <span class=\"n\">brotli</span> <span class=\"n\">GSS</span><span class=\"bp\">-</span><span class=\"n\">API</span> <span class=\"n\">HSTS</span> <span class=\"n\">HTTP2</span> <span class=\"n\">HTTPS</span><span class=\"bp\">-</span><span class=\"n\">proxy</span> <span class=\"n\">IDN</span> <span class=\"n\">IPv6</span> <span class=\"n\">Kerberos</span> <span class=\"n\">Largefile</span> <span class=\"n\">libz</span> <span class=\"n\">NTLM</span> <span class=\"n\">NTLM_WB</span> <span class=\"n\">PSL</span> <span class=\"n\">SPNEGO</span> <span class=\"n\">SSL</span> <span class=\"n\">threadsafe</span> <span class=\"n\">TLS</span><span class=\"bp\">-</span><span class=\"n\">SRP</span> <span class=\"n\">UnixSockets</span> <span class=\"n\">zstd</span>\n</code></pre></div>",
        "id": 340356624,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678281179
    },
    {
        "content": "<p>As for the topological space check, the building finished but now I get <code>unknown identifier 'topological_space'</code></p>",
        "id": 340357166,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678281337
    },
    {
        "content": "<p>Its called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace#doc\">docs4#TopologicalSpace</a> now I think</p>",
        "id": 340357503,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678281436
    },
    {
        "content": "<p>The naming convention has changed as Alex mentioned. You should use <code>TopologicalSpace</code></p>",
        "id": 340357534,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678281445
    },
    {
        "content": "<p>You can try <code>lake exe cache get!</code> which forces a redownload. (Stepping away for a bit)</p>",
        "id": 340357733,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678281496
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/2tuQeVqnTUR62XMVodsyqJ33/image.png\">image.png</a> is the wavy blue line a problem?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2tuQeVqnTUR62XMVodsyqJ33/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2tuQeVqnTUR62XMVodsyqJ33/image.png\"></a></div>",
        "id": 340357803,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678281518
    },
    {
        "content": "<p>ok it probably isn't, it just means that the result can be seen by hovering?</p>",
        "id": 340359707,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678281909
    },
    {
        "content": "<p>That's right</p>",
        "id": 340359923,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1678281958
    },
    {
        "content": "<p>good, that means I can start following <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/title_page.html\">https://leanprover.github.io/theorem_proving_in_lean4/title_page.html</a></p>",
        "id": 340360320,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678282049
    },
    {
        "content": "<p>regarding <code>lake exe cache get</code> it eventually ended with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span>\n<span class=\"n\">gzip</span><span class=\"o\">:</span> <span class=\"n\">stdin</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">file</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Unexpected</span> <span class=\"n\">EOF</span> <span class=\"k\">in</span> <span class=\"n\">archive</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Unexpected</span> <span class=\"n\">EOF</span> <span class=\"k\">in</span> <span class=\"n\">archive</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">recoverable</span><span class=\"o\">:</span> <span class=\"n\">exiting</span> <span class=\"n\">now</span>\n</code></pre></div>",
        "id": 340365120,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678283303
    },
    {
        "content": "<p>This means one of your downloaded files is corrupted. Use <code>lake exe cache get!</code> to retry, overwriting all files.</p>",
        "id": 340367181,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678283798
    },
    {
        "content": "<p>I did the command with the ! and I got the same error</p>",
        "id": 340367585,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678283912
    },
    {
        "content": "<p>That's weird, it might mean one of the files in the cache is broken. Let me see if it works for me...</p>",
        "id": 340368176,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678284063
    },
    {
        "content": "<p>No, it seems everything works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get!\nAttempting<span class=\"w\"> </span>to<span class=\"w\"> </span>download<span class=\"w\"> </span><span class=\"m\">1613</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDecompressing<span class=\"w\"> </span><span class=\"m\">1613</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\n$<span class=\"w\"> </span>git<span class=\"w\"> </span>status\nOn<span class=\"w\"> </span>branch<span class=\"w\"> </span>master\nYour<span class=\"w\"> </span>branch<span class=\"w\"> </span>is<span class=\"w\"> </span>up<span class=\"w\"> </span>to<span class=\"w\"> </span>date<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"s1\">'origin/master'</span>\n$<span class=\"w\"> </span>git<span class=\"w\"> </span>rev-parse<span class=\"w\"> </span>HEAD\n5d07683a061300f8b6b528a735af4914570748ef\n</code></pre></div>",
        "id": 340369393,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678284338
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/XisooUVJnKvWt0ErVKUKsJbB/image.png\">image.png</a> ehh, I did it again and it exited successfully</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XisooUVJnKvWt0ErVKUKsJbB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XisooUVJnKvWt0ErVKUKsJbB/image.png\"></a></div>",
        "id": 340369681,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678284399
    },
    {
        "content": "<p>(note the blue circle which indicates success)</p>",
        "id": 340369725,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678284413
    },
    {
        "content": "<p>Great! Then you can restart the Lean server in VS Code and import topology</p>",
        "id": 340369991,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678284469
    },
    {
        "content": "<p>Why does this not work for lambda abstraction?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">introduce</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 340386967,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678288008
    },
    {
        "content": "<p>This is trying to prove \"if p and q, then (p implies q)\"</p>",
        "id": 340387775,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678288184
    },
    {
        "content": "<p>Works for me. What do you mean by \"does not work\"?</p>",
        "id": 340388834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678288403
    },
    {
        "content": "<p>You also only need <code>q</code> to be true for this.</p>",
        "id": 340388954,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678288431
    },
    {
        "content": "<p><code>unused variable hp</code></p>",
        "id": 340388967,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678288434
    },
    {
        "content": "<p>That is a warning (yellow) from the linter. Not an error (red)</p>",
        "id": 340389121,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678288461
    },
    {
        "content": "<p>For Lean there are two <code>hp</code> in the context</p>",
        "id": 340389227,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678288490
    },
    {
        "content": "<p>Right -- your code has both a free variable hp and a bound variable also called hp</p>",
        "id": 340389310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678288510
    },
    {
        "content": "<p>and the linter is complaining that in fact your code uses neither :-)</p>",
        "id": 340389371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678288524
    },
    {
        "content": "<p>I remember learning Coq in one of my university modules but I can't remember much about that language itself</p>",
        "id": 340389464,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678288543
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">introduce</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span>\n</code></pre></div>\n<p>still complains that <code>p</code> is unused</p>",
        "id": 340390439,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678288749
    },
    {
        "content": "<p>Replace the bound variable by <code>_</code></p>",
        "id": 340390616,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678288778
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">introduce</span> <span class=\"o\">(</span><span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span>\n</code></pre></div>\n<p>so this produces no errors or warnings. I suppose this is the very essence of <em>introducing</em> an implication, right?</p>",
        "id": 340391262,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678288914
    },
    {
        "content": "<p>In your first example, there is a name capture of the type <code>p</code>  (defined in the first line) by the lambda-abstracted variable also named <code>p</code> (in the second line).</p>",
        "id": 340391458,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1678288948
    },
    {
        "content": "<p>In your second example, Lean figures that <code>p</code> is some type, and so it knows the type of the abstracted value <code>_</code> needs to be <code>p</code>.</p>",
        "id": 340391804,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1678289018
    },
    {
        "content": "<p>You could keep the explicit type annotation for the abstracted variable even with the wildcard <code>_</code> (here I use <code>Prop</code>, but any types would work)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">introduce</span> <span class=\"o\">(</span><span class=\"n\">p</span>  <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 340391982,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1678289045
    },
    {
        "content": "<p>I just made this proof by myself; could this be made terser without sacrificing readability?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">lhs.elim</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">pq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pq.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">pp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">pp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">qq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">qq</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">rr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">rr</span><span class=\"o\">)),</span>\n  <span class=\"k\">fun</span> <span class=\"n\">rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"k\">from</span> <span class=\"n\">rhs.elim</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">pp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">pp</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">qr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">qr.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">qq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">qq</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">rr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">rr</span><span class=\"o\">))⟩</span>\n</code></pre></div>",
        "id": 340414562,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678294265
    },
    {
        "content": "<p>Not sure if everyone would consider this more readable, but some of these lambda-abstracted nested propositional rule applications can be shorted to compositions of the rules . I guess it's only readable assuming you know how <code>Or.elim</code> works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">from</span>\n  <span class=\"n\">lhs.elim</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">pq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pq.elim</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inl</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inr</span><span class=\"o\">),</span>\n  <span class=\"k\">fun</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"k\">from</span>\n  <span class=\"n\">rhs.elim</span>\n    <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inl</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">qr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">qr.elim</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span><span class=\"o\">))⟩</span>\n</code></pre></div>",
        "id": 340418907,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1678295391
    },
    {
        "content": "<p>Well I think I'm getting the hang of this. In a valid proof an expression is at once a function and a proof, and the result of applying functions to each other <em>constructs</em> (parts of a) proof</p>",
        "id": 340419761,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678295640
    },
    {
        "content": "<p>But the proof that sqrt(2) is irrational doesn't seem to be in mathlib4</p>",
        "id": 340419932,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678295682
    },
    {
        "content": "<p>Here's some other proofs of <code>or_assoc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">((</span><span class=\"n\">hp</span> <span class=\"bp\">|</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n     <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n     <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n     <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"bp\">|</span> <span class=\"n\">hq</span> <span class=\"bp\">|</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n     <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n     <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n     <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">hpqr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hpqr.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hpq.elim</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"bp\">$</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"bp\">$</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">hpqr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hpqr.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">$</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hqr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hqr.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">$</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"n\">Or.inr</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Irrationality of sqrt(2) is in mathlib3, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/irrational_sqrt_two\">docs#irrational_sqrt_two</a> . But you're right, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/real/irrational.lean\">the file it's in</a> hasn't been ported to mathlib4 yet. You can see how far we are from porting it at <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/data/real/irrational\">this link</a>.</p>",
        "id": 340426776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678297461
    },
    {
        "content": "<p>You don't need the <code>show</code>s in your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs.elim</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">pq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pq.elim</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inl</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inr</span><span class=\"o\">),</span>\n  <span class=\"k\">fun</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs.elim</span>\n    <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inl</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">qr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">qr.elim</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"bp\">∘</span> <span class=\"n\">Or.inr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span><span class=\"o\">))⟩</span>\n</code></pre></div>",
        "id": 340427375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678297618
    },
    {
        "content": "<p>how do I get the rewrite to work on the last line here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_add</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>                <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>            <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>              <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>              <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.two_mul</span><span class=\"o\">]</span> <span class=\"c1\">-- ???</span>\n</code></pre></div>",
        "id": 340502561,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678330478
    },
    {
        "content": "<p>oh right, the one-liner <code>example (x y: Nat): (x + y) * (x + y) = x * x + 2 * x * y + y * y := by linarith</code> works</p>",
        "id": 340503023,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678330784
    },
    {
        "content": "<p>Note that you can solve the whole thing with <code>ring</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 340524064,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678344238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Parcly Taxel</span> <a href=\"#narrow/stream/113489-new-members/topic/hello/near/340502561\">said</a>:</p>\n<blockquote>\n<p>how do I get the rewrite to work on the last line here?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_add</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>                <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>            <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>              <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>              <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.two_mul</span><span class=\"o\">]</span> <span class=\"c1\">-- ???</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The issue is that <code>x * x + x * y + x * y + y * y</code> is actually <code>((x * x + x * y) + x * y) + y * y</code> so <code>x * y + x * y</code> is not actually a subterm. You'll have to do a targetted rewrite of <code>add_assoc</code> to make this approach work. This is exactly why <code>ring</code> exists, to save us from having to go through this sort of stuff (sure it's fun to start with, but the novelty wears off after a while when you start actually making a gigantic mathematical library).</p>",
        "id": 340556180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678355218
    },
    {
        "content": "<p>How does nat.lean define an alias from nat.zero.succ to the symbol 1? Or is it done in the lean kernel</p>",
        "id": 341223549,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1678599032
    },
    {
        "content": "<p>In lean 3, this would be an instance of the has_one typeclass</p>",
        "id": 341233786,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1678606238
    },
    {
        "content": "<p>Hi - I'm just taking a look at lean. Got as far as installing it and starting on the theorem proving book. I tried this to see what would happen:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Nat.add</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>It barfed. I was expecting it to display some kind of function value or expression tree. Is this my fat fingers or are there constraints on what we can eval?</p>",
        "id": 388547778,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693581997
    },
    {
        "content": "<p><code>Nat.add 3</code> is a function. What does it mean to evaluate it? Maybe you should try <code>Nat.add 3 5</code></p>",
        "id": 388551764,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693583184
    },
    {
        "content": "<p>You can, in fact, obtain the underlying <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs#Lean.Expr</a> and you can do this using the<code>Qq</code> library: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 388552232,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693583355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/hello/near/388551764\">said</a>:</p>\n<blockquote>\n<p><code>Nat.add 3</code> is a function. What does it mean to evaluate it? Maybe you should try <code>Nat.add 3 5</code></p>\n</blockquote>\n<p>Thanks. I wasn't sure if functions were values, in this sense.</p>",
        "id": 388556328,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693584782
    },
    {
        "content": "<p>Functions are values, but they don't have an implementation of <code>Repr</code> which is presumably the error you saw</p>",
        "id": 388556418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693584820
    },
    {
        "content": "<p>The implementation of <code>#eval</code> isn't compiler magic, it just runs <code>Repr T</code> where <code>T</code> is the type of the value you give it in order to produce the text that is displayed</p>",
        "id": 388556701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693584933
    },
    {
        "content": "<p>(actually it looks for <code>MetaEval</code> but in most cases this will just be a <code>Repr</code> instance)</p>",
        "id": 388556859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693584989
    },
    {
        "content": "<p>Ah! That makes sense. Thanks. I'll continue on through the tutorial :D</p>",
        "id": 388556878,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693584996
    },
    {
        "content": "<p>Is there a way to report possible bugs in the tutorials? I'm looking at this from Theorem Proving in Lean 4, Chapter 4: Propositions and Proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t2</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">show</span> <span class=\"n\">r</span> <span class=\"k\">from</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This introduces a variable <code>s</code> which I can't see used.</p>",
        "id": 388571282,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693590169
    },
    {
        "content": "<p>Is it used later?</p>",
        "id": 388572392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693590505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/hello/near/388572392\">said</a>:</p>\n<blockquote>\n<p>Is it used later?</p>\n</blockquote>\n<p>Not as far as I can see</p>",
        "id": 388573282,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693590876
    },
    {
        "content": "<p>I'm seeing that there's lots of unicode used, but so far in the tutorial <code>=&gt;</code> is spelled out in ascii, rather than using the unicode <code>⇒</code> -- is this me being daft? I don't see a shortcut for this symbol in the vscode mode.</p>",
        "id": 388590163,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693598068
    },
    {
        "content": "<p>No, seems like this particular character is only used for <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Relator.html#Relator.%C2%ABterm_%E2%87%92_%C2%BB\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Relator.html#Relator.%C2%ABterm_%E2%87%92_%C2%BB</a></p>",
        "id": 388592604,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693599148
    },
    {
        "content": "<p>note that the unicode equivalent for the <code>=&gt;</code> in <code>fun x =&gt; e</code> is <code>↦</code> (shortcut <code>\\mapsto</code> or <code>\\r-|</code>), not <code>⇒</code> (shortcut <code>\\=&gt;</code>)</p>",
        "id": 388593004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693599369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/hello/near/388593004\">said</a>:</p>\n<blockquote>\n<p>note that the unicode equivalent for the <code>=&gt;</code> in <code>fun x =&gt; e</code> is <code>↦</code> (shortcut <code>\\mapsto</code> or <code>\\r-|</code>), not <code>⇒</code> (shortcut <code>\\=&gt;</code>)</p>\n</blockquote>\n<p>Thanks! I don't think that I would have realised that by myself.</p>",
        "id": 388598939,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693601991
    },
    {
        "content": "<p>vscode says the shortcuts in hover messages</p>",
        "id": 388599686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693602350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/hello/near/388599686\">said</a>:</p>\n<blockquote>\n<p>vscode says the shortcuts in hover messages</p>\n</blockquote>\n<p>Cheers :D Found it. I'm working through the chapter 3 exercise, and finding them really fun. I've been trying out different proof assistants the past month, and so far this is the first one where I've actually been enjoying constructing proofs. Finding working with negations more challenging though.</p>",
        "id": 388679607,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693652092
    }
]