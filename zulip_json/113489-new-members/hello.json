[
    {
        "content": "<p>Hiya, some of you probably know me from mathoverflow.  I was curious how things are going in here.</p>",
        "id": 147443337,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541874915
    },
    {
        "content": "<p>Hey, welcome! Good to see you.</p>",
        "id": 147443347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541874946
    },
    {
        "content": "<p>Things are going pretty good here (-;</p>",
        "id": 147443353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541874957
    },
    {
        "content": "<p>I'm a complete noob on the whole theorem proving thing, but I feel like it's something worth learning</p>",
        "id": 147443394,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541874984
    },
    {
        "content": "<p>One of our biggest problems is lack of (wo)man-power</p>",
        "id": 147443395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875001
    },
    {
        "content": "<p>I'd like to eventually work on the library for simplicial sets, but I'm completely worthless at programming</p>",
        "id": 147443397,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875018
    },
    {
        "content": "<p>Right. The first thing you need to learn is that you should ask lots of questions here <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 147443404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875040
    },
    {
        "content": "<p>You don't need that much programming experience. Coincidentally, I did some stuff on simplicial sets a couple of months ago.</p>",
        "id": 147443406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875067
    },
    {
        "content": "<p>In the mean time, Scott wrote a very <em>very</em> nice category library.</p>",
        "id": 147443409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875082
    },
    {
        "content": "<p>Does it have Grothendieck constructions</p>",
        "id": 147443451,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875094
    },
    {
        "content": "<p>I've been meaning to update my stuff, but haven't done so yet.</p>",
        "id": 147443452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875094
    },
    {
        "content": "<p>It only has the basics so far. We are in the process of adding limits and colimits.</p>",
        "id": 147443456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875120
    },
    {
        "content": "<p>If it does, maybe it's already time to introduce the Theta construction that I use in my research</p>",
        "id": 147443457,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875121
    },
    {
        "content": "<p>Ah, ok!</p>",
        "id": 147443460,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875136
    },
    {
        "content": "<p>For example: we don't have abelian categories yet.</p>",
        "id": 147443467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875151
    },
    {
        "content": "<p>If there's a simplicial library and a category theory library, you might be able to use simplicial objects in Cat to get monoidal categories</p>",
        "id": 147443472,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875162
    },
    {
        "content": "<p>No fundamental obstructions. Just that there are only 3 people working on this in their spare time.</p>",
        "id": 147443477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875173
    },
    {
        "content": "<p>via Segal's observation</p>",
        "id": 147443481,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875182
    },
    {
        "content": "<p>Also, are Abelian categories really that fundamental for theorem proving?</p>",
        "id": 147443483,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875199
    },
    {
        "content": "<p>Practice seems to show that theorem provers need a delicate balance between hands-on constructions and big theoretical hammers.</p>",
        "id": 147443531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875222
    },
    {
        "content": "<p>Not for theorem proving, but they are for applying theorem provers to (some, eg my) mathematical research.</p>",
        "id": 147443537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875255
    },
    {
        "content": "<p>mhm, do you know where I can get bootstrapped with experience to start contributing?</p>",
        "id": 147443539,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875260
    },
    {
        "content": "<p>First you need to install a Lean environment.</p>",
        "id": 147443547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875276
    },
    {
        "content": "<p>What editor do you use to type LaTeX and the likes?</p>",
        "id": 147443550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875287
    },
    {
        "content": "<p>vscode</p>",
        "id": 147443552,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875295
    },
    {
        "content": "<p>Great!</p>",
        "id": 147443554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875301
    },
    {
        "content": "<p>There is a Lean extension for VScode</p>",
        "id": 147443556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875309
    },
    {
        "content": "<p>Is the Windows lean environment crippled?</p>",
        "id": 147443599,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875325
    },
    {
        "content": "<p>Install it, and open an empty Lean file. It will then ask if you want it to install Lean for you.</p>",
        "id": 147443603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875330
    },
    {
        "content": "<p>oh, that's neat!</p>",
        "id": 147443607,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875342
    },
    {
        "content": "<p>I think it was fixed. I am not sure. I haven't touched Windows in 10 years.</p>",
        "id": 147443608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875351
    },
    {
        "content": "<p>If you like textbooks I would recommend Theorem Proving in Lean</p>",
        "id": 147443611,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541875365
    },
    {
        "content": "<p>Maybe it is about to be fixed.</p>",
        "id": 147443612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875366
    },
    {
        "content": "<p>If it's not working, I have the Win10 Linux emulator installed</p>",
        "id": 147443621,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875386
    },
    {
        "content": "<p>that's why I'm asking</p>",
        "id": 147443623,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875391
    },
    {
        "content": "<p>Lean on Windows works great</p>",
        "id": 147443628,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541875427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137844\">@Harry Gindi</span>  <a href=\"https://gist.github.com/kckennylau/611cc453c67df074ad492b4939ddd356\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/611cc453c67df074ad492b4939ddd356\">here</a> is my (controversal) instructions on how to get Lean on windows</p>",
        "id": 147443676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541875445
    },
    {
        "content": "<p>There are some issues with setting $PATH correctly. However, if you are the kind of person to have WSL installed, I'm sure you'll be able to fix it</p>",
        "id": 147443677,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541875446
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 147443688,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875515
    },
    {
        "content": "<p>oh wait, you said you're working in Linux, never mind then</p>",
        "id": 147443694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541875542
    },
    {
        "content": "<p>Both work, Kenny.  WSL is slow though</p>",
        "id": 147443695,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875559
    },
    {
        "content": "<p>Disk I/O is extremely bad</p>",
        "id": 147443736,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875576
    },
    {
        "content": "<p>then again, so is mingw64 =D</p>",
        "id": 147443738,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875584
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 147443739,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541875605
    },
    {
        "content": "<p>iirc disk i/o on cygwin and msys is benchmarked just as slow as WSL</p>",
        "id": 147443745,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875642
    },
    {
        "content": "<p>it's the main reason why things are so slow.</p>",
        "id": 147443746,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875660
    },
    {
        "content": "<p>I was really active on the WSL github for like two years, and performance is on-par with linux now except for disk i/o</p>",
        "id": 147443785,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137844\">@Harry Gindi</span> Once you have Lean installed, you will want to fork <a href=\"https://github.com/leanprover-community/mathlib/\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/\">https://github.com/leanprover-community/mathlib/</a><br>\nThen you need to run <code>leanpkg build</code> in that directory. After that, get yourself some tea. Your computer will be warming your room for about an hour.</p>",
        "id": 147443792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541875749
    },
    {
        "content": "<p>but I also used msys2 before, and it was even slower</p>",
        "id": 147443793,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875751
    },
    {
        "content": "<p>then what's the best one?</p>",
        "id": 147443794,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541875752
    },
    {
        "content": "<p>Kenny Lau, meh, nothing's great.  The best thing you could do probably is run a VM</p>",
        "id": 147443797,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875776
    },
    {
        "content": "<p>if you're concerned about performance</p>",
        "id": 147443798,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875786
    },
    {
        "content": "<p>Thanks Johan!</p>",
        "id": 147443800,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875798
    },
    {
        "content": "<p>I compile Lean with MSYS2, disk i/o is far from the limiting factor when it comes to performance</p>",
        "id": 147443841,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541875819
    },
    {
        "content": "<p>and you need to rewarm your room for an hour every time you update mathlib, isn't Lean wonderful!</p>",
        "id": 147443842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541875834
    },
    {
        "content": "<p>Andrew Ashworth, then maybe performance on WSL is better than msys2 on everything but disk I/O</p>",
        "id": 147443854,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137844\">@Harry Gindi</span> ping</p>",
        "id": 147443857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541875888
    },
    {
        "content": "<p>hello!</p>",
        "id": 147443858,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875892
    },
    {
        "content": "<p>Harry Gindi, not ping</p>",
        "id": 147443860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541875899
    },
    {
        "content": "<p>I'm aware, I'm just using the web UI</p>",
        "id": 147443862,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875909
    },
    {
        "content": "<p>is it now? I can't imagine there being a huge difference</p>",
        "id": 147443863,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541875919
    },
    {
        "content": "<p>Andrew, they did benchmarks on phoronix, and on cpu-only tasks, WSL performs at 95-100% of native</p>",
        "id": 147443904,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875960
    },
    {
        "content": "<p>once it hits disk i/o, it crashes to like 20%</p>",
        "id": 147443905,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541875974
    },
    {
        "content": "<p>it has to do with the fact that NTFS doesn't use inodes and therefore can't cache them effectively</p>",
        "id": 147443914,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876025
    },
    {
        "content": "<p>also, windows defender, and a bunch of other things just kill it on disk i/o</p>",
        "id": 147443957,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876047
    },
    {
        "content": "<p>anyway, going to get this lean system installed</p>",
        "id": 147443960,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876081
    },
    {
        "content": "<p>does arch have a lean-git AUR package?</p>",
        "id": 147443962,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876098
    },
    {
        "content": "<p>Looks like it does</p>",
        "id": 147443971,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876115
    },
    {
        "content": "<p>ah, I was aware of that. I think you can compile Lean with visual studio and get a totally native binary, if i recall correctly</p>",
        "id": 147443975,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541876127
    },
    {
        "content": "<p>i've never investigated it though, so ymmv</p>",
        "id": 147443980,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541876142
    },
    {
        "content": "<p>blech, I have an arch installation on this pc</p>",
        "id": 147443981,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876155
    },
    {
        "content": "<p>disk access is not an issue at 20% or 100% anyway</p>",
        "id": 147443982,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541876160
    },
    {
        "content": "<p>but every time I decide to jump into linux, I get sidetracked</p>",
        "id": 147444022,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876170
    },
    {
        "content": "<p>I end up staying up all night messing around with it, it's unhealthy for me</p>",
        "id": 147444030,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876194
    },
    {
        "content": "<p>Don't use that arch thing.</p>",
        "id": 147444034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541876202
    },
    {
        "content": "<p>oh, it's bad?</p>",
        "id": 147444035,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876208
    },
    {
        "content": "<p>or are you saying don't use arch in general :D</p>",
        "id": 147444040,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876224
    },
    {
        "content": "<p>The VScode Lean extension is better. It sets up a useful wrapper called <code>elan</code>.</p>",
        "id": 147444043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541876226
    },
    {
        "content": "<p>No, I run arch as OS <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span> So that's fine.</p>",
        "id": 147444045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541876241
    },
    {
        "content": "<p>the arch thing is just a lean system, I thought</p>",
        "id": 147444046,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876248
    },
    {
        "content": "<p>anyway gonna work on this tomorrow morning</p>",
        "id": 147444093,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876332
    },
    {
        "content": "<p>cheers all</p>",
        "id": 147444094,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541876335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I think <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/elan.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/elan.md\">https://github.com/leanprover/mathlib/blob/master/docs/elan.md</a> is a better place to direct computer-savvy Windows users to than your link</p>",
        "id": 147446031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541880026
    },
    {
        "content": "<p>fair</p>",
        "id": 147446253,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541880513
    },
    {
        "content": "<p>Yes --- please, please, everyone should now be using elan, no messing around with $PATH, no installing complicated things like msys2 or WSL, just go with the bare minimum provided by \"git bash\" and its installer, then work entirely inside VS Code.</p>",
        "id": 147448670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541885400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137844\">@Harry Gindi</span> ^^ that</p>",
        "id": 147448715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885446
    },
    {
        "content": "<p>Also, welcome <span class=\"user-mention\" data-user-id=\"137844\">@Harry Gindi</span>. :-)</p>",
        "id": 147448772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541885603
    },
    {
        "content": "<p>Got it, thanks!</p>",
        "id": 147448775,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541885623
    },
    {
        "content": "<p>Also hello, Kevin and Scott, it's been a while since I saw you on MO</p>",
        "id": 147448814,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541885660
    },
    {
        "content": "<p>Here is a roadmap to getting started. First read through all of Theorem Proving In Lean and do all the exercises. Then choose a project to work on, and work on it.</p>",
        "id": 147448815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885661
    },
    {
        "content": "<p>The projects I chose were: (1) do all the exercises in the undergraduate class I was teaching at the time and then (2) define schemes and prove that an affine scheme is a scheme.</p>",
        "id": 147448817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885696
    },
    {
        "content": "<p>Do not underestimate how difficult all of this is at this point.</p>",
        "id": 147448822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885703
    },
    {
        "content": "<p>It seems like it'll be really annoying, don't worry =)</p>",
        "id": 147448825,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541885720
    },
    {
        "content": "<p>I think maybe a good project to work on would be weak factorization systems once I learn stuff</p>",
        "id": 147448877,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541885800
    },
    {
        "content": "<p>Working with isomorphisms is difficult. Working with categories is even more difficult, for several reasons -- some associated with dependent type theory (it is difficult to transport structure along isomorphisms at this point, although things will change one day), some associated with universe issues (mathematicians being sloppy about universes, basically) and other things too</p>",
        "id": 147448878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885805
    },
    {
        "content": "<p>But there is no better recommendation than \"start on something and whenever you get stuck, ask here\"</p>",
        "id": 147448886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885837
    },
    {
        "content": "<p>The first thing you will probably have to ask is a question of the form \"here's a link to a pdf, I want to make definition 2.3 of that paper in Lean, where do I even start?\". There will be an answer.</p>",
        "id": 147448888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885876
    },
    {
        "content": "<p>WFS would be useful if anyone wants to go full bore and do model categories, and it can be done with monads for algebraic weak factorization systems</p>",
        "id": 147448928,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541885888
    },
    {
        "content": "<p>I'm guessing that monads work well?</p>",
        "id": 147448930,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541885899
    },
    {
        "content": "<p>Listen, honestly, categories are really like jumping in at the deep end</p>",
        "id": 147448931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885902
    },
    {
        "content": "<p>ah</p>",
        "id": 147448932,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541885906
    },
    {
        "content": "<p>groups work well</p>",
        "id": 147448933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885907
    },
    {
        "content": "<p>but it is not impossible, and you have to jump in somewhere</p>",
        "id": 147448936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885924
    },
    {
        "content": "<p>I mean, my research is in category theory</p>",
        "id": 147448937,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541885941
    },
    {
        "content": "<p>but I'll see how hard it is</p>",
        "id": 147448942,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541885956
    },
    {
        "content": "<p>well, when I arrived here a year ago people were already talking about formalising categories, and one year later they still haven't managed to do adjoint functors.</p>",
        "id": 147448943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541885976
    },
    {
        "content": "<p>This is basically for two reasons: (1) universes make this harder than you think and (2) lack of manpower or personpower or whatever it should be called nowadays</p>",
        "id": 147448987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886011
    },
    {
        "content": "<p>I would have assumed that monads might be easier than adjunctions, but maybe this is a mistake</p>",
        "id": 147448992,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886050
    },
    {
        "content": "<p>I'm also exaggerating a little. But dependent type theory is perhaps not set up with category theory in mind</p>",
        "id": 147448994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886052
    },
    {
        "content": "<p>On the other hand, \"difficult\" is certainly not the same as \"impossible\"</p>",
        "id": 147449005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886074
    },
    {
        "content": "<p>Do presheaves of sets make sense?</p>",
        "id": 147449009,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886104
    },
    {
        "content": "<p>and there is no actual obstruction to doing adjoints and a whole bunch more. It's just that people really like (a) working in the maximal generality and (b) writing automation as they go</p>",
        "id": 147449010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886105
    },
    {
        "content": "<p>they call them presheaves of types here</p>",
        "id": 147449012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886115
    },
    {
        "content": "<p>but I defined these in a hands-on way when doing schemes, no problem</p>",
        "id": 147449051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886130
    },
    {
        "content": "<p>Neat, I'll have to look at what you've done already before I try to jump in</p>",
        "id": 147449053,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886158
    },
    {
        "content": "<p>I did not use the category theory machinery though, I just wrote down the axioms for a functor in that specific case rather than relying on a general theory (which at that time was not there anyway)</p>",
        "id": 147449054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886162
    },
    {
        "content": "<p>My code sucks though</p>",
        "id": 147449056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886172
    },
    {
        "content": "<p>because it was the code I wrote to learn how to do mathematics in dependent type theory</p>",
        "id": 147449062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886185
    },
    {
        "content": "<p>I am currently refactoring all of it with an MSc student</p>",
        "id": 147449064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886196
    },
    {
        "content": "<p>so when you defined schemes, did you follow e.g. Toën?</p>",
        "id": 147449069,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886213
    },
    {
        "content": "<p>working with functors of points the whole way?</p>",
        "id": 147449110,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886245
    },
    {
        "content": "<p>or is that exactly the kind of non-kosher thing that implicitly uses universes</p>",
        "id": 147449120,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886266
    },
    {
        "content": "<p>I followed the stacks project</p>",
        "id": 147449121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886266
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/master/src/tag009I.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/master/src/tag009I.lean\">https://github.com/kbuzzard/lean-stacks-project/blob/master/src/tag009I.lean</a></p>",
        "id": 147449123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886271
    },
    {
        "content": "<p>there's presheaves of types on a basis of open sets of a top space</p>",
        "id": 147449124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886279
    },
    {
        "content": "<p>But nowadays we would not write it like that</p>",
        "id": 147449125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886284
    },
    {
        "content": "<p>we'd use the category theory machinery, which seems to be just about ready to do that sort of thing.</p>",
        "id": 147449126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886300
    },
    {
        "content": "<p>As of about last week</p>",
        "id": 147449130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886303
    },
    {
        "content": "<p>neat!</p>",
        "id": 147449135,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886338
    },
    {
        "content": "<p>I heard that some simplicial set machinery was developed up-thread</p>",
        "id": 147449139,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886359
    },
    {
        "content": "<p>was this done entirely without model structures using e.g. Ex^∞?</p>",
        "id": 147449180,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886388
    },
    {
        "content": "<p>In that code I linked to, I am literally saying that a presheaf of types is a function F which takes a basis element to a type, plus a restriction F(U)-&gt;F(V), plus the axioms that res from U to U is id and res of res is res. So I am avoiding explicit usage of any category theory formalism.</p>",
        "id": 147449189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886427
    },
    {
        "content": "<p>You'll have to ask <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> where he put his simplicial set stuff. That was also written before categories were available, I believe.</p>",
        "id": 147449192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886449
    },
    {
        "content": "<p>mhm</p>",
        "id": 147449194,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886461
    },
    {
        "content": "<p>alright let's not but the cart before the horse, I've gotta do the exercises and stuff</p>",
        "id": 147449195,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886479
    },
    {
        "content": "<p>cheers, this seems exciting</p>",
        "id": 147449234,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886487
    },
    {
        "content": "<p>it's the future</p>",
        "id": 147449235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886492
    },
    {
        "content": "<p>but I might have died before it becomes really important</p>",
        "id": 147449236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886504
    },
    {
        "content": "<p>I have no idea of the time frame before it becomes (a) useful (b) powerful (c) better than us</p>",
        "id": 147449237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886518
    },
    {
        "content": "<p>ascended to robothood</p>",
        "id": 147449238,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886520
    },
    {
        "content": "<p>but currently we are still a long way from (a)</p>",
        "id": 147449242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886531
    },
    {
        "content": "<p>\"proof assistants\" currently do nothing but make mathematician's lives harder, for the most part.</p>",
        "id": 147449247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886550
    },
    {
        "content": "<p>like any assistant they must be trained =p</p>",
        "id": 147449250,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886570
    },
    {
        "content": "<p>otherwise all they do is spill coffee on you</p>",
        "id": 147449251,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886581
    },
    {
        "content": "<p>right. And my view (and I do say this firmly with my tongue in my cheek and slightly provocatively, but there is a grain of truth in it) is that currently the main problem is that for the most part they are being trained to do mathematics by computer scientists, which is in my opinion not driving development in the right directions.</p>",
        "id": 147449303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886650
    },
    {
        "content": "<p>I'm going to try to get my friend in the US involved on this</p>",
        "id": 147449313,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886694
    },
    {
        "content": "<p>There are a few mathematicians here who are trying to change all this, mostly by saying things such as \"mathematicians will not be able to use your software unless you make stuff like (x+y)^3=x^3+3x^2y+3xy^2+y^3 easy to do\"</p>",
        "id": 147449314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886701
    },
    {
        "content": "<p>he did a math undergrad and he's doing a CS Ph.D., but he hates CS</p>",
        "id": 147449316,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886713
    },
    {
        "content": "<p>this might be a nice change of pace for him</p>",
        "id": 147449355,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886724
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2018/06/13/ab3/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/06/13/ab3/\">https://xenaproject.wordpress.com/2018/06/13/ab3/</a></p>",
        "id": 147449356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886724
    },
    {
        "content": "<p>is anyone doing analysis-related stuff?</p>",
        "id": 147449361,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886736
    },
    {
        "content": "<p>Yes, but it's happening very slowly</p>",
        "id": 147449365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886748
    },
    {
        "content": "<p>because he always liked analysis</p>",
        "id": 147449366,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886750
    },
    {
        "content": "<p>alright, I'll try to cajole him into helping =)</p>",
        "id": 147449369,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886767
    },
    {
        "content": "<p>and in my opinion there is a problem with the development plan we have</p>",
        "id": 147449370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886783
    },
    {
        "content": "<p>In fact Harry to be honest basic freshman one variable analysis would be a perfect project to learn Lean with</p>",
        "id": 147449377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886815
    },
    {
        "content": "<p>because the maths is basically very well known and well understood, and putting it into a theorem prover would be a formidable challenge for a beginner, however there would be plenty of people around to help</p>",
        "id": 147449381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886839
    },
    {
        "content": "<p>The problem is that the general position here is \"do everything in the correct generality\" which means \"the maximal generality\"</p>",
        "id": 147449422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886859
    },
    {
        "content": "<p>break out a copy of Bourbaki's 'analysis in one real variable' haha</p>",
        "id": 147449423,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886878
    },
    {
        "content": "<p>so instead of developing a basic theory of analysis of functions of one real variable, everyone wants to do stuff on normed spaces and Banach spaces etc etc and then prove all the single-variable theorems in one fell swoop by specialising to this case</p>",
        "id": 147449426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886900
    },
    {
        "content": "<p>Is that even possible?</p>",
        "id": 147449432,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886914
    },
    {
        "content": "<p>In my mind a good analogy here is what happened with polynomials</p>",
        "id": 147449434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886919
    },
    {
        "content": "<p>A computer scientist developed a fabulous library of polynomials in an arbitrary number of variables (in fact for an arbitrary set of variables)</p>",
        "id": 147449442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886953
    },
    {
        "content": "<p>but when mathematicians wanted to actually use it to prove basic stuff like quadratic reciprocity or finite fields or whatever</p>",
        "id": 147449485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886986
    },
    {
        "content": "<p>For example, defining C^\\infty functions requires you do have partial derivatives, which come from the 1-dimensional case, if I remember correctly (I haven't done analysis in around 8 years =\\)</p>",
        "id": 147449486,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541886991
    },
    {
        "content": "<p>they found they really just wanted a much deeper theory of polynomials in one variable</p>",
        "id": 147449487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541886999
    },
    {
        "content": "<p>so at the end of the day an undergraduate here at Imperial, Chris Hughes, just wrote the theory of polynomials in one variable anyway.</p>",
        "id": 147449494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887025
    },
    {
        "content": "<p>And I kind of suspect that the same might happen for differentiable functions.</p>",
        "id": 147449499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887047
    },
    {
        "content": "<p>Eventually we'll have them on Banach manifolds or something</p>",
        "id": 147449502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887058
    },
    {
        "content": "<p>oh, you're saying that you agree that the 1-variable case is separate and important</p>",
        "id": 147449503,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887060
    },
    {
        "content": "<p>but then when someone wants to prove that the derivative of sin is cos (which we do not have at this point)</p>",
        "id": 147449504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887074
    },
    {
        "content": "<p>they will not want to work on a Banach manifold</p>",
        "id": 147449544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887086
    },
    {
        "content": "<p>it's not even meaningful on a banach manifold</p>",
        "id": 147449545,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887097
    },
    {
        "content": "<p>the derivative of a map of manifolds is a map on tangent bundles</p>",
        "id": 147449546,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887123
    },
    {
        "content": "<p>I know, I'm just saying that if you write general functions which work in some big generality then you will just end up constantly having to tell these functions to specialise to the case of the real numbers</p>",
        "id": 147449547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887128
    },
    {
        "content": "<p>sure, yes</p>",
        "id": 147449557,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887148
    },
    {
        "content": "<blockquote>\n<p>the derivative of a map of manifolds is a map on tangent bundles</p>\n</blockquote>\n<p>right, and you'll then have to identify the tangent space of the reals with the reals etc</p>",
        "id": 147449558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887153
    },
    {
        "content": "<p>What I am saying is that in my opinion there is a need for a theory of functions in one real variable</p>",
        "id": 147449561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887177
    },
    {
        "content": "<p>and that identification is not obvious without additional structure</p>",
        "id": 147449563,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887188
    },
    {
        "content": "<p>I believe that there is a little about functions in one complex variable, somewhere in the modular forms work</p>",
        "id": 147449564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541887190
    },
    {
        "content": "<p>I get ya!</p>",
        "id": 147449565,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887191
    },
    {
        "content": "<p>I fully agree with this</p>",
        "id": 147449644,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887220
    },
    {
        "content": "<p>there's almost always a distinguished most important 1-dimensional case of whatever</p>",
        "id": 147449651,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887263
    },
    {
        "content": "<p>imagine if people tried to write the categories library starting with 2-categories</p>",
        "id": 147449657,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887274
    },
    {
        "content": "<p>It's also why e.g. Lawvere's ETCC was dead on arrival</p>",
        "id": 147449666,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887312
    },
    {
        "content": "<p>anyway, I'm going to give some of this a shot tomorrow morning</p>",
        "id": 147449710,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887353
    },
    {
        "content": "<p>cheers!</p>",
        "id": 147449712,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1541887355
    },
    {
        "content": "<p>Hi people, let me briefly introduce myself. my name is mario krenn, I am a quantum physicist/AI researcher at university of Toronto (<a href=\"http://mariokrenn.wordpress.com/\" title=\"http://mariokrenn.wordpress.com/\">mariokrenn.wordpress.com/</a>).</p>\n<p>I learned about Lean by Kevin Buzzard's MO post (<a href=\"https://mathoverflow.net/questions/311071/which-mathematical-definitions-should-be-formalised-in-lean\" title=\"https://mathoverflow.net/questions/311071/which-mathematical-definitions-should-be-formalised-in-lean\">https://mathoverflow.net/questions/311071/which-mathematical-definitions-should-be-formalised-in-lean</a>), and he introduced me to this channels per email.</p>\n<p>I am in particular interested in graph theoretical questions, and hope for suggestions to start learning, in particular i would love seeing the sources of simple graph theory formalized proofs. Thank you!</p>",
        "id": 195822393,
        "sender_full_name": "Mario Krenn",
        "timestamp": 1588243542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297962\">@Mario Krenn</span> Hello and welcome! At the moment we have no graph theory in <code>mathlib</code>, the \"standard library\" for maths in Lean. But there have been several attempts at getting something done. The last attempt is currently WIP on the <code>hedetniemi</code> branch of the repository. (I don't know if you are familiar with git/github.) You can browse the code here: <a href=\"https://github.com/leanprover-community/mathlib/tree/hedetniemi/src/graph_theory\" title=\"https://github.com/leanprover-community/mathlib/tree/hedetniemi/src/graph_theory\">https://github.com/leanprover-community/mathlib/tree/hedetniemi/src/graph_theory</a></p>",
        "id": 195822657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588243704
    },
    {
        "content": "<p>Hello everyone, I just wanted to introduce myself: I am Jakob Scholbach, an algebraic geometer with interests in motives and the Langlands program. I find the recent works on formalization of topics in algebraic geometry very inspiring and I am slowly starting to learn lean. Thanks guys for your help so far, more stupid questions are sure to follow!</p>",
        "id": 224494195,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611936705
    },
    {
        "content": "<p>Hi Jakob. I think one thing which we are lacking right now but which is probably accessible is a whole bunch of predicates on ring homomorphisms, e.g. being flat, unramified, etale, finite presentation etc, and then transferring all these concepts over to morphisms of schemes. We have the category of schemes but nobody has begun to think about formalising any proofs which involve saying \"this morphism is locally X, therefore it is X\". There is an art to getting the definitions right in a theorem prover; with the wrong definitions, proving stuff is really slow going and painful. If you get the definition right however then it can be a dream. The problem is that in some sense the art of figuring out the correct definition is a very subtle one, and probably prover-dependent, so it's right now quite an adventure trying to figure out this stuff.</p>",
        "id": 224507250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611941853
    },
    {
        "content": "<p>OK, good to know. Speaking about \"getting things right\" -- in paper mathematics I am very fond of categorical thinking. E.g. I believe a good approach to étale maps is by combining formally étale (a kind of orthogonality relation against simple classes of maps) + finite presentation property, which is a compactness condition, which again is very categorical in flavor. Since I have zero knowledge about formalisation, let me ask very naively: is this kind of thinking useful or not so much?</p>",
        "id": 224514993,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611945196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> You might be interested in this discussion <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\n<a href=\"#narrow/stream/116395-maths/topic/.C3.89tale.20morphisms.20of.20rings/near/219027888\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/.C3.89tale.20morphisms.20of.20rings/near/219027888</a></p>",
        "id": 224515104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611945246
    },
    {
        "content": "<p>I think formalizing the equivalence between \"categorical\" compactness in the category of rings (or algebras over some commutative ring) as being finitely-presented would be a very interesting project as well.</p>",
        "id": 224515255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611945332
    },
    {
        "content": "<p>Concerning finite presentation, I recently wrote the definition in terms of quotient of polynomial rings and proved some extremely basic results. (If you are not used to formalized math, \"extremely basic\" means something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a finitely generated <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra, this is not completely trivial.) I wanted to do more but I switched to the liquid project, if you are interested I have some results still not in mathlib, essentially that the quotient of a finitely presented algebra by a finitely generated ideal is finitely presented.</p>",
        "id": 224516104,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611945799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> In practice, we often have reasons to write definitions that don't quantify over categories (so no universal properties as definitions), but rather choose something as close as possible to first-order logic.<br>\nThe categorical characterisations will then be theorems that are part of the API, the interface for using the objects.</p>",
        "id": 224517285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611946402
    },
    {
        "content": "<p>All of us mathematicians here have only been using this software for a few years at most. Abstract categorical thinking is super-important, as is trying to find the right abstractions. Maybe you'll find the comments about finding the correct way to think about extending stuff continuously from a dense subset in sections 4 and 5 of <a href=\"https://arxiv.org/abs/1910.12320\">the perfectoid paper</a> interesting. Getting definitions right has been very interesting. I was somehow expecting the computer scientists to have all the answers, but actually they have been encouraging us to experiment, because nobody really tried formalising serious maths of this nature before. It took us three goes to <a href=\"https://arxiv.org/abs/2101.02602\">get schemes right</a>. You've arrived at a really interesting time. You know about this Scholze challenge? It's really quite active right now.</p>",
        "id": 224518776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611947129
    },
    {
        "content": "<p>cool project! im installing lean right now, just curious how big is lean?</p>",
        "id": 258181890,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634644703
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/hello\">#general &gt; hello</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span></p>",
        "id": 258181958,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634644751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451706\">@Tchsurvives</span> Welcome! What do you mean by \"big\"? What measure?</p>",
        "id": 258182001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634644774
    },
    {
        "content": "<p>as in how many megabytes haha</p>",
        "id": 258182028,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634644790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 258182197,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634644839
    },
    {
        "content": "<p>The Lean executable is ~16MB it seems.</p>",
        "id": 258182605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634645064
    },
    {
        "content": "<p>The mathlib library is ~50MB after compiling, and ~650.000 lines of code, I think. These numbers change rapidly.</p>",
        "id": 258182639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634645096
    },
    {
        "content": "<p>I count about 6 MB of Lean and C++ code in Lean itself, and another 27 MB of Lean files in Mathlib.</p>",
        "id": 258182729,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634645134
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>du -b ../lean/library/**/*.lean ../lean/src/**/*.<span class=\"o\">{</span>cpp,h<span class=\"o\">}</span> <span class=\"p\">|</span> awk <span class=\"s1\">'{sum += $1} END {print sum}'</span>\n<span class=\"go\">6431327</span>\n<span class=\"gp\">$ </span>du -sb src/**/*.lean <span class=\"p\">|</span> awk <span class=\"s1\">'{sum += $1} END {print sum}'</span>\n<span class=\"go\">27024149</span>\n</code></pre></div>",
        "id": 258182846,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634645190
    },
    {
        "content": "<p>i am slightly keen in formalising olympiad euclidean synthetic geometry, as part of the goal towards the IMO grand challenge, where do you recommend i begin?</p>",
        "id": 258187629,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634647526
    },
    {
        "content": "<p>i did some searching, but couldnt find much online</p>",
        "id": 258187645,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634647537
    },
    {
        "content": "<p>Did you find the <a class=\"stream\" data-stream-id=\"208328\" href=\"/#narrow/stream/208328-IMO-grand-challenge\">#IMO-grand-challenge</a> stream?</p>",
        "id": 258188114,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634647749
    },
    {
        "content": "<p>I think Euclidean geometry is still fairly hard at this point</p>",
        "id": 258188165,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634647775
    },
    {
        "content": "<p>You can take a look at <code>geometry/euclidean</code> in mathlib, to see what's there already.</p>",
        "id": 258188182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634647783
    },
    {
        "content": "<p>oh i see, ill check it out thanks!</p>",
        "id": 258188292,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634647822
    },
    {
        "content": "<p>I wouldn't be surprised if Euclidean geometry actually needs a DSL + a bunch of tactics in order to become doable or even nice.</p>",
        "id": 258188336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634647842
    },
    {
        "content": "<p>what do you mean domain specific language?</p>",
        "id": 258188524,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634647926
    },
    {
        "content": "<p>Currently setting up a \"geometry problem\" in Lean is very roundabout and verbose. It would be nice if we could \"switch on\" geometry mode, and then be able to talk in very brief terms.</p>",
        "id": 258188663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634647998
    },
    {
        "content": "<p>And not so many people are working on this atm. A lot of effort is being poured into making Lean 4 ready for prime time. After that, I guess people will return to the IMO-GC.</p>",
        "id": 258189114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634648182
    },
    {
        "content": "<p>Other people working on maths/mathlib are (empirical observation) not very interested in Euclidean geometry. It is a somewhat recreational branch of maths these days, which probably explains why.</p>",
        "id": 258189251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634648242
    },
    {
        "content": "<p>i see, ill talk to a few of my friends and see if we can help :) this project is really cool, keep going guys!</p>",
        "id": 258192082,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634649346
    },
    {
        "content": "<p>mathlib is designed as an integrated library of mathematics in general and that includes geometry. That means, for example, that setting up geometry at all involved first setting up affine spaces - but the work done on affine spaces in order to be able to say anything about geometry has since been used and extended by people working on lots of other things. It also means that other concepts we need in geometry should be set up in a more generally useful way (providing more generally useful definitions and lemmas is better than providing things very specific to Euclidean geometry). And when something is specific to geometry, it shouldn't be only two-dimensional unless the underlying concept is genuinely limited to two dimensions (for example, we have <code>circumcenter</code> defined for an arbitrary simplex, not just a triangle).</p>\n<p>For example, we need to be able to refer to betweenness of points, or points being inside triangles, to even state most IMO geometry problems. Defining that properly means first completing the refactor of convexity to apply to affine spaces, which has been discussed recently, which in turn seems to depend on a refactor of affine spaces so spaces with affine combinations over a semiring underlie a type class asserting those affine combinations agree with those coming from the <code>add_torsor</code> structure. That's also necessary before we can talk cleanly about e.g. the area of a triangle (linking to the measure theory parts of the library).</p>\n<p>For example, for oriented angles (which will probably turn out to be much more convenient for formal proofs than the unoriented angles we have, though IMO problems involving angles are stated with unoriented angles) we should first define orientations of vector spaces in general (again, see discussions on Zulip of how that might be done), rather than doing something ad hoc with complex numbers.</p>\n<p>I don't think the verbosity of geometry problems (compared to an informal statement) is any more than the verbosity of formal versions of results in other areas, once all the required definitions have been added. It's just that at this point, you probably need to write about 10000 lines more API, in geometry and things it depends on elsewhere in the library, before you can do much in the way of applying it to prove IMO geometry problems.</p>\n<p>So \"define orientations of vector spaces and prove a load of trivial lemmas about them\" is the sort of thing that's more practical at this point towards geometry than actually solving an IMO geometry problem.</p>",
        "id": 258294413,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1634689656
    },
    {
        "content": "<p>Just here to drop that the current state of the convexity refactor is indeed \"waiting for the affinity refactor\" and the state of the affinity refactor is \"thinking about how to do it\".</p>",
        "id": 258330379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634718422
    },
    {
        "content": "<p>there's something im unsure about</p>",
        "id": 258818916,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989275
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.intro</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)⟩,</span>\n    <span class=\"n\">or.elim</span> <span class=\"n\">h1</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpa</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hpa</span><span class=\"o\">⟩)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hqa</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hqa</span><span class=\"o\">⟩))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">or.elim</span> <span class=\"n\">h</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hpa</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">hpa</span><span class=\"o\">)⟩)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hqa</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">hqa</span><span class=\"o\">)⟩))</span>\n</code></pre></div>",
        "id": 258818938,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989279
    },
    {
        "content": "<p>i tend to see long expressions like these in the documentation, but i am wondering how one can come up with it himself</p>",
        "id": 258818991,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989346
    },
    {
        "content": "<p>while using the interactive evaluater in vs code, when i type the first line 'iff.intro' it simply throws an error (waiting for more arguments), and i am left unsure what to write</p>",
        "id": 258819002,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989395
    },
    {
        "content": "<p>is there a systematic way to go about learning how to 'chain' logic like these together? i have played the natural number game and done some simple exercises but i still don't really get the gist of it</p>",
        "id": 258819012,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634989433
    },
    {
        "content": "<ol>\n<li>Use tactics, rather than term mode. </li>\n<li>In term mode, if you write <code>_</code> for missing arguments and hover over the <code>_</code> you will get a message telling you the expected type of that argument.</li>\n<li>Read the error message: it's telling you what sort of thing you need to write next.</li>\n</ol>",
        "id": 258819356,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990045
    },
    {
        "content": "<p>Until you understand what is going on though, learn to use tactics first.</p>",
        "id": 258819361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990066
    },
    {
        "content": "<p>If I were showing someone how to do this proof, I would write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">|</span><span class=\"n\">Q</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258819498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990297
    },
    {
        "content": "<p>Open this in an editor, and click through it, placing your cursor before and after each tactic, looking how the goal view changes.</p>",
        "id": 258819508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990318
    },
    {
        "content": "<p>Hopefully you will see that at every step, there is only one possible sensible thing to do, and that's what the next tactic does!</p>",
        "id": 258819516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990339
    },
    {
        "content": "<p>After you can write tactic proofs like this, a second step is learn how to \"golf\" them into term mode proofs.</p>",
        "id": 258819529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634990365
    },
    {
        "content": "<p>is there a way to shorten this code</p>",
        "id": 258821499,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634993303
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩⟩⟩⟩,⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n</code></pre></div>",
        "id": 258821500,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634993304
    },
    {
        "content": "<p>Given that h must be a pretty monstrous term, I'd say that that was a pretty short way of taking it apart!</p>",
        "id": 258821516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634993374
    },
    {
        "content": "<p>You can shorten the code by not making such monstrous terms ;-)</p>",
        "id": 258821547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634993395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451706\">Tchsurvives</span> <a href=\"#narrow/stream/113489-new-members/topic/hello/near/258821500\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩⟩⟩⟩,⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You can do<code>obtain ⟨⟨_, _, _, _, _, _⟩, _, _⟩ := h,</code></p>",
        "id": 258821830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634993750
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">pts</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"bp\">∠</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">between</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">ang_proper</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"n\">ang_proper</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 258822289,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634994317
    },
    {
        "content": "<p>or perhaps if i put h here, is there a better way to unpack it? (into a b c d and all the $\\and$ )</p>",
        "id": 258822302,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634994351
    },
    {
        "content": "<p>I'd put <code>ang_proper α ∧ ang_proper β</code> first.</p>",
        "id": 258822367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634994415
    },
    {
        "content": "<p>Then <code>obtain ⟨_, _, _, _, _, _, _, _, _⟩ := h</code> will do the job.</p>",
        "id": 258822393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634994471
    },
    {
        "content": "<p>that works great :)</p>",
        "id": 258823069,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634995395
    },
    {
        "content": "<p>what will happen when i have two hypotheses of the same name</p>",
        "id": 258823095,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634995442
    },
    {
        "content": "<p>like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">pts</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">pts</span>\n</code></pre></div>",
        "id": 258823132,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634995458
    },
    {
        "content": "<p>also, what is the difference between a semicolon and a comma in tactic mode</p>",
        "id": 258823708,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634996156
    },
    {
        "content": "<p>Weird stuff. The most common thing is that you get confused yourself and mistake one variable for the other. Second thing that can happen is that Lean picks the wrong variable for you. I'd advise on avoiding homonyms.</p>",
        "id": 258825738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634998387
    },
    {
        "content": "<p>A comma is the usual way to separate different tactic invokations. A semicolon means the next tactic invokation applies to all goals.</p>",
        "id": 258825763,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634998427
    },
    {
        "content": "<p>Arf yes</p>",
        "id": 258825894,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634998597
    },
    {
        "content": "<p>is there a way of 'intro'-ing a hypothesis in tactic mode</p>",
        "id": 258864406,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635059919
    },
    {
        "content": "<p>then having another goal to prove that hypothesis</p>",
        "id": 258864413,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635059932
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 258864430,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635059987
    },
    {
        "content": "<p>i hope my question makes sense</p>",
        "id": 258864470,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635060005
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#have\">tactic#have</a></p>",
        "id": 258865585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635062031
    },
    {
        "content": "<p>This code below didnt really work for me though, perhaps theres something im missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 258921241,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635143812
    },
    {
        "content": "<p>Where </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pts</span>\n</code></pre></div>",
        "id": 258921258,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635143835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451706\">@Tchsurvives</span> you probably want <code>have :</code> instead of <code>have :=</code></p>",
        "id": 258921430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635144015
    },
    {
        "content": "<p>oh! that works :D thanks</p>",
        "id": 258923387,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635145959
    },
    {
        "content": "<p>I am a software developer and longtime aficionado of computerized deduction, taking a scenic excursion from building a web GUI proof assistant \"for beginners\" (<a href=\"https://prooftoys.org/\">https://prooftoys.org/</a>) to the modern world of Lean.</p>",
        "id": 276130495,
        "sender_full_name": "Cris Perdue",
        "timestamp": 1647908436
    },
    {
        "content": "<p>Hi! My name is Yury Yarovikov, I am a research scientist at AIRI. I currently do research on neural theorem proving in Lean, and I would like to join the community, not only for my proffesional research, but also for fun: I primarily view myself as a mathematician, and ITP is an exciting topic that concerns two of my main interests: mathematics and AI. Anyway, I'll be happy to chat about ITP, Lean, automated theorem proving and other stuff</p>",
        "id": 289175140,
        "sender_full_name": "Yury Yarovikov",
        "timestamp": 1657537840
    },
    {
        "content": "<p>hi! <a href=\"/user_uploads/3121/-UF89B6c2XLqb3KApr_Bh80U/Screenshot-2022-07-12-at-8.29.55-PM.png\">Screenshot-2022-07-12-at-8.29.55-PM.png</a> sorry what can i use to </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-UF89B6c2XLqb3KApr_Bh80U/Screenshot-2022-07-12-at-8.29.55-PM.png\" title=\"Screenshot-2022-07-12-at-8.29.55-PM.png\"><img src=\"/user_uploads/3121/-UF89B6c2XLqb3KApr_Bh80U/Screenshot-2022-07-12-at-8.29.55-PM.png\"></a></div><ol>\n<li>\n<p>move the x1 x2 away from injf<br>\nusually if it was in the goal i would use <code>intros x1 x2</code></p>\n</li>\n<li>\n<p>replace the <code>\\exists (g : Y \\right X)</code> with g1 <br>\n<code>apply exists.intro g1</code> didnt seem to work, although it worked for another example (see below picture)</p>\n</li>\n</ol>",
        "id": 289316133,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1657629152
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/8Asf5xBMijKbm6JbSZI1lmbv/Screenshot-2022-07-12-at-8.33.00-PM.png\">Screenshot-2022-07-12-at-8.33.00-PM.png</a> <a href=\"/user_uploads/3121/Rg5mwSAaD4Jy-fcd72i-ygxP/Screenshot-2022-07-12-at-8.33.05-PM.png\">Screenshot-2022-07-12-at-8.33.05-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8Asf5xBMijKbm6JbSZI1lmbv/Screenshot-2022-07-12-at-8.33.00-PM.png\" title=\"Screenshot-2022-07-12-at-8.33.00-PM.png\"><img src=\"/user_uploads/3121/8Asf5xBMijKbm6JbSZI1lmbv/Screenshot-2022-07-12-at-8.33.00-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Rg5mwSAaD4Jy-fcd72i-ygxP/Screenshot-2022-07-12-at-8.33.05-PM.png\" title=\"Screenshot-2022-07-12-at-8.33.05-PM.png\"><img src=\"/user_uploads/3121/Rg5mwSAaD4Jy-fcd72i-ygxP/Screenshot-2022-07-12-at-8.33.05-PM.png\"></a></div>",
        "id": 289316192,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1657629189
    },
    {
        "content": "<p>over here <code>apply exists.intro y</code> seemed to work, but not for functions?</p>",
        "id": 289316254,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1657629227
    },
    {
        "content": "<ol>\n<li>\n<p>You don't want to \"move it away\", right now injf says for any x1 x2 this proposition holds. The fact that it's shown in <code>{ }</code> means that the parameters will be inferred automatically by Lean. That means if you use this hypothesis somewhere Lean will automatically figure out what x1 and x2 should be based on the first argument (The equality) or the expected result type from where you are using it. So the short answer is if you wish to use it for a concrete x1 x2 just use it, Lean will fill it in on its own in this case. If it was not in <code>{ }</code> you would have to explicitly pass them e.g. <code>exact injf myX myOtherX myHypothesis</code>, as it is right now you could write <code>exact injf myHypothesis</code> and Lean will know what x1 and x2 should be.</p>\n</li>\n<li>\n<p>Note that your <code>g</code> is not written <code>g1</code> but with a unicode index, typable as <code>g\\_1</code> in vscode/emacs if you apply that it will work.</p>\n</li>\n</ol>",
        "id": 289317592,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657629981
    },
    {
        "content": "<p>Unless you're trying to prove this on your own, you should take a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.inv_fun\">docs#function.inv_fun</a></p>",
        "id": 289330177,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657635370
    },
    {
        "content": "<ol start=\"2\">\n<li>oh it was my bad i forgot a comma oops haha</li>\n</ol>",
        "id": 289336552,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1657637818
    },
    {
        "content": "<p>Hey just wondered if there’s any previous work on correctness of graph theory algorithms like dijkstra and prim?</p>",
        "id": 308209212,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1667703031
    },
    {
        "content": "<p>Mathlib doesn't have these things, but many of them have been formalized before (for example, searching google for \"coq dijkstra's algorithm\" yielded some github repositories as well as <a href=\"https://hal.archives-ouvertes.fr/hal-01126088/\">this paper</a>).</p>\n<p>One thing about graph theory algorithms is that the way you actually encode a graph is important. In mathlib's graph theory library, we're focusing on encodings useful for theory rather than ones that are useful for efficient algorithms. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph\">docs#simple_graph</a> is an adjacency matrix, rather than using adjacency lists.</p>\n<p>We would probably want these algorithms for programming purposes, so some of the effort would be to find a good API for that.</p>",
        "id": 308225134,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667722008
    }
]