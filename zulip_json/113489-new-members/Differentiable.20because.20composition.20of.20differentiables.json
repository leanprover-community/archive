[
    {
        "content": "<p>Is there a tactic or a simple way to prove that any composition of differentiable functions is differentiable? Taking care of additions, multiplications, etc. What I'm doing right now is manually composing the lemmas, which seems like it should be automatable... How would you prove this, for example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">sin</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 394512212,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696280423
    },
    {
        "content": "<p>You could see how the <code>continuity</code> tactic works and then generalise to a <code>differentiability</code> tactic. Alternatively you could train <code>aesop</code> to do this. I can't tell you any more details of either approach but I think that both would be nice projects.</p>",
        "id": 394562927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696311424
    },
    {
        "content": "<p>I've not looked into macros yet but maybe I could try anyway. It seems that <code>continuity</code>only works on <code>Continuous f</code> but not on <code>ContinuousAt f x</code>? So I guess <code>differentiability</code> sould also start with <code>Differentiable</code> while forgetting the <code>At</code>?<br>\nAlso the tactic <code>continuity?</code> seems to produce output that doesn't actually prove the goal (without errors). It seems <code>continuity</code> is some kind of special mode of <code>aesop</code> already? So I should start looking into macros and then into how <code>aesop</code> works internally?</p>",
        "id": 394570096,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696315535
    },
    {
        "content": "<p>That would be a good start, but I think adding the at versions shouldn't be too hard to do at some point.</p>\n<p>Can you give an example for the <code>continuity?</code> issue, I can try and fix it.</p>\n<p>Yes, many tactics are based on aesop now, which was one of the original goals of aesop.<br>\nI'm not sure you need to understand that much about the actual internals of aesop to work with it, reading the whole readme at <a href=\"https://github.com/JLimperg/aesop\">https://github.com/JLimperg/aesop</a> and looking at continuity should be enough</p>",
        "id": 394601814,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696328029
    },
    {
        "content": "<p>At some point I did set up aesop for this purpose and you do not need to understand how aesop works(I still don't). Just copy paste exactly what the continuity tactic does:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Continuity.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Continuity.lean</a></p>\n<p>Unfortunately aesop was too slow for my application. In my library SciLean I have a specialized tactic <code>fprop</code> to deal with this type of proof. It can deal with much bigger terms. </p>\n<p>Here is the <a href=\"https://github.com/lecopivo/SciLean/blob/master/SciLean/Core/FunctionPropositions/DifferentiableAt.lean\">file</a> setting up <code>fprop</code> for DifferentiableAt. </p>\n<p>Would there be interested in adding this tactic to mathlib?</p>",
        "id": 394606065,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1696329428
    },
    {
        "content": "<p>If it's better than using Aesop then yes.</p>",
        "id": 394641080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696341296
    },
    {
        "content": "<p>How does it juggle with <code>Differentiable</code>, <code>DifferentiableAt</code>, <code>DifferentiableOn</code>, <code>DifferentiableWithinAt</code>, <code>HasDeriv</code> and all the variants? (In the same vein, how hard would it be to extend <code>continuity</code> so that it understands <code>ContinuousOn</code>?)</p>",
        "id": 394646808,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696342964
    },
    {
        "content": "<p>That is the problem, it is not strictly better then aesop and it would require non trivial work which is not too much aligned with my current goals. Mainly, it is faster then aesop on the problems like in the original question. Plus there are some cases which <code>continuity</code> can't solve but <code>fprop</code> can, like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">continuity</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">fprop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">continuity</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">fprop</span>\n</code></pre></div>\n<p>Right now, there are still some annoying limitations of <code>fprop</code> I do not know how to deal with propertly:</p>\n<ul>\n<li>for <code>f : X → Fin 5 → Fin 10 → Fin 15→ Y</code> derive <code>Differentiable K f</code> from <code> ∀ i j k, Differentiable K (f · i j k)</code> or vice versa</li>\n<li>for <code>f : X → Y → Z</code> derive <code>∀ x, Differentiable K fun y =&gt; f x y</code> from <code>Differentiable K fun (x,y) =&gt; f x y</code><br>\nI think I have a good idea how to deal with the second one, no clue what to do in complete generality with the first one.</li>\n</ul>",
        "id": 394656628,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1696346216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/394646808\">said</a>:</p>\n<blockquote>\n<p>How does it juggle with <code>Differentiable</code>, <code>DifferentiableAt</code>, <code>DifferentiableOn</code>, <code>DifferentiableWithinAt</code>, <code>HasDeriv</code> and all the variants? (In the same vein, how hard would it be to extend <code>continuity</code> so that it understands <code>ContinuousOn</code>?)</p>\n</blockquote>\n<p>Currently it treats all the variants <code>Differentiable/At/On</code> separately. To deal with this, my plan is to:</p>\n<ul>\n<li>for each constant, like <code>HAdd.hAdd</code>, formulate theorem for each variant <code>Differentiable/At/On</code>. This can be automated, At and On variant can be automatically generated once theorem for <code>Differentiable</code> is stateted</li>\n<li>for free variables allow inferring between variants e.g. <code>DifferentiableAt K f x</code> from <code>DifferentiableOn K x Ω</code> or <code>DifferentiableK f</code> where <code>f</code> is free variable, of inferring from completely different propositions like <code>Continuous</code> from <code>Differentiable</code> or <code>IsLinearMap</code> on finite dimensional vector spaces.</li>\n</ul>\n<p>I think there is no difference between <code>Differentiable/On</code> and <code>Continuous/On</code> the type of arguments are the same.</p>",
        "id": 394656922,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1696346304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/394601814\">said</a>:</p>\n<blockquote>\n<p>Can you give an example for the <code>continuity?</code> issue, I can try and fix it.</p>\n</blockquote>\n<p>Basically no examples I've tried involving more than a couple composed functions worked without errors.<br>\nFor example, this outputs something misaligned and upon aligning it correctly it has <code>apply</code>'s which fail.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">example</span>  <span class=\"o\">:</span>  <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">sin</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">continuity</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 394684147,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696356114
    },
    {
        "content": "<p>That issue is presumable completely unrelated to <code>continuity</code>, it's probably the power bug.</p>",
        "id": 394684892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696356430
    },
    {
        "content": "<p>Try adding <code>local macro_rules | `($x ^ $y)   =&gt; `(HPow.hPow $x $y)</code> before the example.</p>",
        "id": 394684930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696356446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/394684930\">said</a>:</p>\n<blockquote>\n<p>Try adding <code>local macro_rules | `($x ^ $y)   =&gt; `(HPow.hPow $x $y)</code> before the example.</p>\n</blockquote>\n<p>Doesn't help. Same issues.</p>",
        "id": 394686019,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696356921
    },
    {
        "content": "<p>Actually, it seems to be just formatting and punctuation. Deleting all cdot's and indentation fixes the problem.</p>",
        "id": 394686358,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696357079
    },
    {
        "content": "<p>I tried it and I see a single indentation mismatch. Everything after the first line has one extra level of indentation. The correct output is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>  <span class=\"o\">:</span>  <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">sin</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Continuous.add</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Continuous.add</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">continuous_pow</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Real.continuous_sin</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Continuous.mul</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Continuous.mul</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Real.continuous_cos</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Real.continuous_exp</span>\n      <span class=\"bp\">·</span> <span class=\"n\">aesop_unfold</span> <span class=\"o\">[</span><span class=\"n\">npowRec</span><span class=\"o\">]</span>\n        <span class=\"n\">aesop_unfold</span> <span class=\"o\">[</span><span class=\"n\">npowRec</span><span class=\"o\">]</span>\n        <span class=\"n\">aesop_unfold</span> <span class=\"o\">[</span><span class=\"n\">npowRec</span><span class=\"o\">]</span>\n        <span class=\"n\">aesop_unfold</span> <span class=\"o\">[</span><span class=\"n\">npowRec</span><span class=\"o\">]</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Continuous.mul</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Continuous.mul</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Real.continuous_cos</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Real.continuous_exp</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Continuous.mul</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Continuous.mul</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Real.continuous_cos</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Real.continuous_exp</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Continuous.mul</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Real.continuous_cos</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Real.continuous_exp</span>\n</code></pre></div>",
        "id": 394686552,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696357166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span></p>",
        "id": 394686562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696357173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/394686552\">said</a>:</p>\n<blockquote>\n<p>Everything after the first line has one extra level of indentation.</p>\n</blockquote>\n<p>Indeed. I didn't \"fix\" the indentation carefully enough last time. <del>The power bug plays no role here and the macro isn't needed.</del></p>",
        "id": 394687074,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696357356
    },
    {
        "content": "<p>I'm very surprised you don't need the macro. Where are you running this?</p>",
        "id": 394687199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696357414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/394687199\">said</a>:</p>\n<blockquote>\n<p>I'm very surprised you don't need the macro. Where are you running this?</p>\n</blockquote>\n<p>Was running it from Mathematics in Lean. Indeed, in my own project it doesn't work. I don't understand where MIL places the macro though, not that it matters here. Sorry, will check in my own project from now on. (Lean macros are too powerful for me :D)<br>\nThanks for your patience!</p>",
        "id": 394687786,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696357667
    },
    {
        "content": "<p>No problem. This power bug is a curse but one day it will go away and become a legend that young people will get tired of hearing allusions to.</p>",
        "id": 394689348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696358258
    },
    {
        "content": "<p>Patrick and I still remember the days when coercing an integer to a natural would time out...</p>",
        "id": 394694612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696360446
    },
    {
        "content": "<p>OK, so now I copied the file defining the Aesop ruleset <code>Continuous</code>, the file defining the tactic <code>continuity</code> and text-replaced \"continuous\" by \"differentiable\". Then I copied a bunch of theorems from Mathlib (things like <code>differentiable_cos</code>which do not currently have any attributes) and added the new <code>differentiability</code> attribute to them. </p>\n<p>Finally, I was forced to copy <code>Differentiable.add</code> and give it the new attribute, although it already has a <code>@[simp]</code>. <strong>Why wasn't it found automatically?</strong></p>\n<p>All in all, this seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Note: Not MWE, needs the custom tactic.</span>\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">sin</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">differentiability</span>\n</code></pre></div>",
        "id": 394695634,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696360916
    },
    {
        "content": "<p>So I guess we could have this tactic by just adding the tactic definition and adding <code>@[differentiability]</code> to all theorems that are \"differentiability analogues\" (there seem to be a lot) of theorems currently marked <code>@[continuity]</code>.</p>",
        "id": 394696390,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696361266
    },
    {
        "content": "<p>I knew this would be a nice project :-)</p>",
        "id": 394696480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696361287
    },
    {
        "content": "<p>Does it work for <code>HasDerivAt</code> too?</p>",
        "id": 394789328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696408942
    },
    {
        "content": "<p>In particular, it would be great if <code>have : HasDerivAt f _ x := by differentiation</code> filled in the <code>_</code> by unification</p>",
        "id": 394789458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696408972
    },
    {
        "content": "<p>Does it work for <code>HasDerivAt</code> too?</p>",
        "id": 394789459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696408972
    },
    {
        "content": "<p>What I did so far can't do <code>HasDerivAt</code>. For filling in the derivative one might need an actual tactic, not just an Aesop ruleset?</p>",
        "id": 394790358,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696409180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/394684147\">said</a>:</p>\n<blockquote>\n<p>For example, this outputs something misaligned </p>\n</blockquote>\n<p>This is a known issue with <code>aesop?</code>. I think I even had a partial fix for it on some branch; let me reactivate that. If you find more bugs with this functionality (or Aesop in general), please ping me.</p>",
        "id": 394791806,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696409667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/394790358\">said</a>:</p>\n<blockquote>\n<p>What I did so far can't do <code>HasDerivAt</code>. For filling in the derivative one might need an actual tactic, not just an Aesop ruleset?</p>\n</blockquote>\n<p>If the derivative can be filled in by unification (i.e. you can solve the goal by <code>apply</code>ing lemmas without ever writing the derivative), then Aesop should be able to automate the proof.</p>",
        "id": 394792168,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696409795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/394792168\">said</a>:</p>\n<blockquote>\n<p>If the derivative can be filled in by unification (i.e. you can solve the goal by <code>apply</code>ing lemmas without ever writing the derivative), then Aesop should be able to automate the proof.</p>\n</blockquote>\n<p>Sounds interesting. Can you give an example (manual, not necessarily Aesop) where the derivative is filled by unification?</p>\n<p>On another note: Do we want some version of <code>differentiability</code> in Mathlib? It seems like the \"plagiarize <code>continuity</code> version\" would be about as useful as <code>continuity</code>. Of course, one might extend these and make them a lot more useful still.</p>",
        "id": 394802150,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696413365
    },
    {
        "content": "<p>Some version of <code>differentiability</code> in mathlib: absolutely. My students already miss this functionality and one of them even wrote a lean 3 tactic doing this last year by mimicking lean 3 <code>continuity</code>.</p>",
        "id": 394822950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696420185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/394802150\">said</a>:</p>\n<blockquote>\n<p>Sounds interesting. Can you give an example (manual, not necessarily Aesop) where the derivative is filled by unification?</p>\n</blockquote>\n<p>Here's a proof that the derivative of sin is cos:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.ExpDeriv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"sd\">/-- The complex sine function is everywhere strictly differentiable, with the derivative `cos x`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">hasStrictDerivAt_sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasStrictDerivAt</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasStrictDerivAt</span> <span class=\"n\">sin</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sin</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">HasStrictDerivAt.mul_const</span>\n    <span class=\"n\">apply</span> <span class=\"n\">HasStrictDerivAt.mul_const</span>\n    <span class=\"n\">apply</span> <span class=\"n\">HasStrictDerivAt.sub</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">HasStrictDerivAt.cexp</span>\n      <span class=\"n\">apply</span> <span class=\"n\">HasStrictDerivAt.mul_const</span>\n      <span class=\"n\">apply</span> <span class=\"n\">HasStrictDerivAt.neg</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hasStrictDerivAt_id</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">HasStrictDerivAt.cexp</span>\n      <span class=\"n\">apply</span> <span class=\"n\">HasStrictDerivAt.mul_const</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hasStrictDerivAt_id</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">I_mul_I</span><span class=\"o\">,</span> <span class=\"n\">neg_one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n         <span class=\"n\">I_mul_I</span><span class=\"o\">,</span> <span class=\"n\">mul_neg_one</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">cos</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The first <code>have</code> leaves the derivative unspecified, and the subsequent <code>apply</code>s determine it by unification. (The original proof is in <code>Mathlib/Analysis/SpecialFunctions/Trigonometric/Deriv.lean</code>.)</p>",
        "id": 394825839,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696421192
    },
    {
        "content": "<p>And here's the Aesop version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">hasStrictDerivAt_sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasStrictDerivAt</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasStrictDerivAt</span> <span class=\"n\">sin</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sin</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">apply</span>\n      <span class=\"o\">[</span><span class=\"n\">HasStrictDerivAt.mul_const</span><span class=\"o\">,</span> <span class=\"n\">HasStrictDerivAt.sub</span><span class=\"o\">,</span> <span class=\"n\">HasStrictDerivAt.cexp</span><span class=\"o\">,</span>\n       <span class=\"n\">HasStrictDerivAt.neg</span><span class=\"o\">,</span> <span class=\"n\">hasStrictDerivAt_id'</span><span class=\"o\">])</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cos</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span>\n        <span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">I</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">I_mul_I</span><span class=\"o\">,</span> <span class=\"n\">neg_one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span>\n        <span class=\"n\">I_mul_I</span><span class=\"o\">,</span> <span class=\"n\">mul_neg_one</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It's a bit slow for my liking though. Seems like running <code>simp_all</code> on every goal is quite expensive. It's also mostly pointless, but when I disable Aesop's integrated <code>simp_all</code>, it doesn't solve the goal any more.</p>",
        "id": 394829525,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696422481
    },
    {
        "content": "<p>Another Aesop version, this time without <code>simp</code> but with the lemmas applied with <code>default</code> transparency:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">hasStrictDerivAt_sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasStrictDerivAt</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasStrictDerivAt</span> <span class=\"n\">sin</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sin</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">transparency</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"n\">default</span><span class=\"o\">))</span>\n      <span class=\"o\">[</span><span class=\"n\">HasStrictDerivAt.mul_const</span><span class=\"o\">,</span> <span class=\"n\">HasStrictDerivAt.sub</span><span class=\"o\">,</span> <span class=\"n\">HasStrictDerivAt.cexp</span><span class=\"o\">,</span>\n       <span class=\"n\">HasStrictDerivAt.neg</span><span class=\"o\">,</span> <span class=\"n\">hasStrictDerivAt_id'</span><span class=\"o\">])</span>\n      <span class=\"o\">(</span><span class=\"n\">simp_options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">enabled</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">I_mul_I</span><span class=\"o\">,</span> <span class=\"n\">neg_one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n         <span class=\"n\">I_mul_I</span><span class=\"o\">,</span> <span class=\"n\">mul_neg_one</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">cos</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This one seems to be a little bit faster. But <code>default</code> transparency destroys indexing, so it's going to become (much?) slower with more lemmas.</p>",
        "id": 394830090,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696422668
    },
    {
        "content": "<p>I wonder: why is <code>continuity</code> is using <code>attribute [aesop (rule_sets [Continuous]) unfold norm] npowRec</code>? This leads to a big slow-down for larger powers while it could be done in a single step. Of course, such large powers almost never happen in practice but it sill seems weird to me.  I guess it's some <code>ofNat</code> shenanigans with literals going wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">20</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">continuity</span><span class=\"bp\">?</span> <span class=\"c1\">-- does `aesop_unfold [npowRec]` 20 times and a bunch of `apply` to go with that</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">continuity</span><span class=\"bp\">?</span> <span class=\"c1\">-- does not work, even though `Continuous.pow` is marked with `continuity`.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Continuous.pow</span> <span class=\"n\">h</span> <span class=\"n\">n</span>  <span class=\"c1\">-- here, `continuity` also doesn't work.</span>\n</code></pre></div>",
        "id": 394833438,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696423805
    },
    {
        "content": "<p>Good question. I'll look into it.</p>",
        "id": 394835657,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696424508
    },
    {
        "content": "<p>See also the discussion at <a href=\"#narrow/stream/287929-mathlib4/topic/.60Continuous.2Epow.60.20not.20picked.20up.20by.20.60continuity.60\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60Continuous.2Epow.60.20not.20picked.20up.20by.20.60continuity.60</a></p>",
        "id": 394836065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696424596
    },
    {
        "content": "<p>I guess there are some architectural/design choices to make in order to have that work for <code>continuity</code>? Maybe <code>differentiability</code> should wait for that to happen?</p>\n<p>I didn't find any relevant PRs or issues on Mathlib4 (except peripherally relevant <a href=\"https://github.com/leanprover-community/mathlib4/issues/5030\">https://github.com/leanprover-community/mathlib4/issues/5030</a> and <a href=\"https://github.com/leanprover-community/mathlib4/issues/430\">https://github.com/leanprover-community/mathlib4/issues/430</a>).</p>",
        "id": 395025732,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1696506716
    },
    {
        "content": "<p>(See also discussion <a href=\"#narrow/stream/113489-new-members/topic/Why.20are.20two.20simps.20needed.20here.3F/near/397881863\">here</a>)</p>\n<p>I made a PR (still WIP) adding the <code>differentiability</code> tactic to Mathlib4. <a href=\"https://github.com/leanprover-community/mathlib4/pull/7892\">https://github.com/leanprover-community/mathlib4/pull/7892</a><br>\nI'm confused now where to ask/talk about the process of making it good. Guidelines seem to say Zulip is the main place, PR discussion I guess concerns more concrete things happening to the branch.</p>\n<h2>What I did</h2>\n<ul>\n<li>copy the files defining the Aesop-rulesets, attribute and tactics for <code>continuity</code></li>\n<li>replace all notions of \"continuous\" by appropriate \"differentiability\" notions</li>\n<li>Make a test file, also by copying the test file for <code>continuity</code>.</li>\n<li>Note: I kept the copyright notices of the original files and added myself to the author list. I assume this is fine unless someone objects.</li>\n</ul>\n<p>The next step is (WIP) is making a list of lemmas to be tagged with the <code>differentiability</code> attribute. My approach so far:</p>\n<ul>\n<li>Copy the list returned by <a href=\"https://loogle.lean-lang.org/?q=%7C-+Differentiable+_+_\">Loogle for <code>|- Differentiable _ _</code></a>, put in <code>test/Differentiability.lean</code>, give them all the attribute and fix imports.</li>\n<li>This doesn't work that well. I think it's because there's too much stuff and the \"exhaustive search\" of Aesop does not find the right combination with given settings of depth/iterations/whatnot.</li>\n<li>Do <code>git grep --heading -A 1 \"\\@\\[.*continuity.*\\]\"</code> on Mathlib to find all tactics tagged with <code>continuity</code>. Go over that list manually and check if there are analogous lemmas concerning <code>differentiability</code>. <strong>I looked for a way to list all definitions tagged with the attribute but apparently this is not possible in general?</strong></li>\n<li>Add those lemmas to the test file as comments (TODO delete when tactic is ready)<p>1. Comment out all lemmas where I didn't find a differentiability analogue and it seems unlikely there is one given my very limited understanding of advanced math. Also <strong>indent them twice</strong>.<br>\n  2. Comment out <strong>without identation</strong> all lemmas where analogue was found.<br>\nAdd analogue below, thus giving it the new attribute.</p>\n<p>3. Comment out lemmas where an analogue seems like it should/could exist but I couldn't find one. Add comment below for what the analogue might be called if I had found it. Add a \"TODO\" marker.</p>\n</li>\n</ul>\n<h2>TODOs</h2>\n<ul>\n<li>fix commit message</li>\n<li>Make tactic work well (works with very few lemmas tagged, does not with current maximal set)</li>\n<li>Consider extending this to <code>DifferentiableAt</code>, <code>deriv</code>, etc... (there are no analogues in Continuity land that do this. Why? I tested making another tactic for <code>DifferentiableAt</code> (not in PR) and it seemed to work about equally well as the current <code>differentiability</code> tactic when its set of lemmas is restricted.) If tagging too many lemmas is a problem for Aesop performance, perhaps the tactic <code>differentiability</code> (or <code>continuity</code> for that matter) could have a custom-written (non-Aesop) step that checks what the goal looks like and then delegates to Aesop with the proper rule set?</li>\n</ul>",
        "id": 398283039,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698152047
    },
    {
        "content": "<p>My first confusion is what the HTML comment in the PR message is supposed to do exactly. I put the description of \"what I did\" (copy-pasted above) in there but it's not visible on GitHub so who sees it?</p>",
        "id": 398283200,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698152110
    }
]