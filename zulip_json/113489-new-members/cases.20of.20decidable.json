[
    {
        "content": "<p>Having defined a decidable hypothesis, what's good style for using it in a proof by cases? I'd like the proof to fail if, after edits, it's no longer true that the hypothesis is decidable, which rules out <code>by_cases</code>. Here's my current attempt (see <code>all_good'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">lesser</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">decidable_lesser</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">lesser</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">decidable.is_true</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">decidable.is_false</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">lesser</span> <span class=\"o\">:=</span> <span class=\"n\">decidable_lesser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">when_lesser</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lesser</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">unless_lesser</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">lesser</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_good'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">lesser</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Note : must provide a name \"k\" to avoid the error \"failed to revert 'd',</span>\n  <span class=\"c1\">-- it is a frozen local instance\"</span>\n  <span class=\"n\">cases</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">unless_lesser</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">when_lesser</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326450130,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675801219
    },
    {
        "content": "<p>why do you care that the hypothesis is decidable for the lemma? It is a proof of a proposition</p>",
        "id": 326450472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675801338
    },
    {
        "content": "<p>(That's not a rhetorical question. There are reasons to care, and depending on which one is yours the solution is different.)</p>",
        "id": 326450604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675801387
    },
    {
        "content": "<p>It's more that I'm new to Lean and I want to understand what is happening. Also ... there's no proof provided to <del>the lemma</del> <code>theorem all_good'</code>, right? So I'm not sure I understand the question.</p>",
        "id": 326451142,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675801568
    },
    {
        "content": "<p>The hypothesis <code>h</code>?</p>",
        "id": 326451328,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675801662
    },
    {
        "content": "<p>Lemme edit <code>all_good'</code> to be a <code>theorem</code> to avoid confusion [done]</p>",
        "id": 326451475,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675801709
    },
    {
        "content": "<p>I'm saying that because <code>all_good'</code> is a theorem, there are no observable effects of having proved it using classical logic instead of the decidable instance</p>",
        "id": 326451595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675801771
    },
    {
        "content": "<p>(FYI <code>lemma</code> and <code>theorem</code> are synonyms in lean, there is no difference between them other than style)</p>",
        "id": 326451837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675801833
    },
    {
        "content": "<p>(sure! but now we can say \"the theorem\" and \"the lemmas\")</p>",
        "id": 326451999,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675801901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/cases.20of.20decidable/near/326451837\">said</a>:</p>\n<blockquote>\n<p>(FYI <code>lemma</code> and <code>theorem</code> are synonyms in lean, there is no difference between them other than style)</p>\n</blockquote>\n<p>Sometimes I wish we had even more freedom. I'd like to have the following synonyms:<br>\n<code>theorem</code><br>\n<code>lemma</code><br>\n<code>observation</code><br>\n<code>corollary</code></p>",
        "id": 326452480,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675802069
    },
    {
        "content": "<p>Is <code>by_cases</code> what you would suggest, then?</p>",
        "id": 326453438,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675802395
    },
    {
        "content": "<p>Hmm. The observable effect is that the proposition is now inhabited, which is what I'd want to avoid if (hypothetically) the predicate were genuinely undecidable and (also hypothetically) decidable math is what I'm interested in, for the piece of work in question</p>",
        "id": 326456020,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675803270
    },
    {
        "content": "<p>what do you mean by \"decidable math is what I'm interested in\"</p>",
        "id": 326457512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675803789
    },
    {
        "content": "<p>there are a lot of ways to gloss \"decidable math\" and most of them don't directly correspond to having an instance of <code>decidable</code></p>",
        "id": 326457621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675803835
    },
    {
        "content": "<p>If the objective is to come up with a proof that does not use excluded middle, double-negation elimination and so on.</p>",
        "id": 326457988,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675803987
    },
    {
        "content": "<p>The non-hypothetical reason is that I want to understand the fundamentals of the way Lean works, a little at a time.</p>",
        "id": 326458346,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675804138
    },
    {
        "content": "<p>Probably in that case you shouldn't use tactics at all, use <code>if</code> instead</p>",
        "id": 326458792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675804316
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">all_good'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lesser</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n  <span class=\"n\">unless_lesser</span> <span class=\"n\">h</span>\n<span class=\"k\">else</span>\n   <span class=\"n\">when_lesser</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>this won't compile unless it is possible to infer <code>decidable (lesser x)</code>. However, it is possible to supply such an instance using classical logic if you use it directly (e.g. by using <code>open_locale classical</code> which makes <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.dec\">docs#classical.dec</a> a local instance)</p>",
        "id": 326459318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675804476
    },
    {
        "content": "<p>I notice just now that the <code>by_cases</code> tactic is used a little in \"init/data/nat/lemmas.lean\", so probably not something worth me being too precious about</p>",
        "id": 326459696,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675804601
    },
    {
        "content": "<p><code>by_cases</code> does not use classical logic unless it has to, but it won't error if the instance is missing</p>",
        "id": 326459834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675804650
    },
    {
        "content": "<p>BTW, curiously <code>cases (d : decidable)</code> seems to take the cases in the opposite order to <code>by_cases</code>. In my example <code>when_lesser</code> takes <code>(lesser x)</code> and <code>unless_lesser</code> takes <code>¬(lesser x)</code></p>",
        "id": 326460123,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675804757
    },
    {
        "content": "<p>Thank you so much for taking the time, this has been helpful</p>",
        "id": 326460151,
        "sender_full_name": "Richard Copley",
        "timestamp": 1675804771
    },
    {
        "content": "<p>usually this is the more useful behavior since it works in both classical and constructive contexts. If you are defining a function to be <code>#eval</code>'d, you will get an error as desired if the classical instance is used, because it will make the definition <code>noncomputable</code></p>",
        "id": 326460197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675804794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Buster</span> <a href=\"#narrow/stream/113489-new-members/topic/cases.20of.20decidable/near/326460123\">said</a>:</p>\n<blockquote>\n<p>BTW, curiously <code>cases (d : decidable)</code> seems to take the cases in the opposite order to <code>by_cases</code>. In my example <code>when_lesser</code> takes <code>(lesser x)</code> and <code>unless_lesser</code> takes <code>¬(lesser x)</code></p>\n</blockquote>\n<p>That's because <code>cases</code> uses the natural order of the constructors (false then true, because false is 0 and true is 1), while <code>by_cases</code> uses the same order used by <code>if</code> (then-case then else-case)</p>",
        "id": 326462334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675805557
    }
]