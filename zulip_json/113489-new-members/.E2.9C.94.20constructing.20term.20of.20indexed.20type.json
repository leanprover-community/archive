[
    {
        "content": "<p>Hi folks. I'm pretty new to dependently-typed programming (as well as lean4). I've boiled down an issue to the following example: <a href=\"https://gist.github.com/abakst/3ca9e59775e45fd5b019af0191a03847\">https://gist.github.com/abakst/3ca9e59775e45fd5b019af0191a03847</a>. What I'd like to know is: what would be the general pattern for defining a term such as <code>Example</code>, which requires show equality of type indices, _without_ using tactics (i.e., directly)? This feels a bit clumsy as I've written it. Note that I believe this is specific to <code>Rat</code> vs. say using <code>Nat</code> (in the original program I would really prefer to use <code>Rat</code>).</p>",
        "id": 395929154,
        "sender_full_name": "Alexander Bakst",
        "timestamp": 1696959252
    },
    {
        "content": "<p>Here's a version with fewer tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">three_eq_one_plus_two</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Example</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"n\">three_eq_one_plus_two</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">Rat.add_zero</span> <span class=\"mi\">2</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">T.TN</span> <span class=\"mi\">1</span> <span class=\"o\">(</span> <span class=\"n\">T.TN</span> <span class=\"mi\">2</span> <span class=\"n\">T.T0</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 395932196,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696960617
    },
    {
        "content": "<p>I'm not sure how to get rid of the <code>by rfl</code>.</p>",
        "id": 395932233,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696960629
    },
    {
        "content": "<p>and I don't claim that this is idiomatic</p>",
        "id": 395932257,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696960644
    },
    {
        "content": "<p>Note that you can do <code>#print Example</code> to see the value of a definition.</p>",
        "id": 395932316,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696960671
    },
    {
        "content": "<p>Thanks. I suppose the  main question is: do I really need to prove the right theorem like <code>three_eq_one_plus_two</code> for each term I construct (even when the term has literals like this)? Maybe the way to go is that there's a more general combinator?</p>",
        "id": 395940935,
        "sender_full_name": "Alexander Bakst",
        "timestamp": 1696963315
    },
    {
        "content": "<p>I guess you could pull out <code>pf: m = n</code> as an argument and have something similar to your solution, maybe as one of these 'smart constructors'. Are these applications of <code>three_eq_one_plus_two</code>, <code>Rat.add_zero</code> erased?</p>",
        "id": 395942503,
        "sender_full_name": "Alexander Bakst",
        "timestamp": 1696963683
    },
    {
        "content": "<p>I'm also thinking there must be some hidden machinery for <code>Nat</code>, since if you change <code>Rat</code> to <code>Nat</code> then I think the example just typechecks from the exact term <code>(T.TN 1 ...)</code></p>",
        "id": 395942919,
        "sender_full_name": "Alexander Bakst",
        "timestamp": 1696963776
    },
    {
        "content": "<p>The idiomatic way to prove any arithmetic identity over the rationals is the <code>norm_num</code> tactic, which is designed precisely for this purpose and hence removes the need to come up with workarounds which you seem to hope will exist. Why do you want to avoid tactics? Proofs are erased in Lean so who cares if they're as ugly as sin.</p>",
        "id": 395947121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696965523
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">37</span><span class=\"bp\">/</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">42</span><span class=\"bp\">/</span><span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">181</span><span class=\"bp\">/</span><span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- immediate</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- terrifying</span>\n</code></pre></div>",
        "id": 395947317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696965619
    },
    {
        "content": "<p>I don't have a good reason for avoiding tactics. If that's an idiomatic way to construct terms that you're doing to do computation with (rather than \"merely\" proving theorems), then so be it.</p>\n<p>To be clear, I'm specifically talking about the case where I'm constructing/computing elements of the <code>T q</code> type, not proving equalities over <code>Q</code> that may be needed to do so. Does that make sense?</p>",
        "id": 395947550,
        "sender_full_name": "Alexander Bakst",
        "timestamp": 1696965743
    },
    {
        "content": "<p>Right -- when you're constructing the elements of the <code>T q</code> you want to avoid tactics; but it's safe to use them to prove any theorems you need along the way.</p>",
        "id": 395952779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696968130
    },
    {
        "content": "<p>yes -- so then I guess my original question boils down to: what's the idiomatic way to construct <code>T q</code> elements when in general I'll need to prove equalities about the indices? write 'smart constructors' that take proofs of equality as arguments?</p>",
        "id": 395953156,
        "sender_full_name": "Alexander Bakst",
        "timestamp": 1696968279
    },
    {
        "content": "<p>Oh I now understand the question properly, sorry for being slow. You can do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.EqToHom</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">Rat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T0</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Example</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">CategoryTheory.eqToHom</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">T.TN</span> <span class=\"mi\">1</span> <span class=\"o\">(</span> <span class=\"n\">T.TN</span> <span class=\"mi\">2</span> <span class=\"n\">T.T0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I suspect that there will be a more lowbrow version of eqToHom which doesn't use the category theory library.</p>",
        "id": 395954412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696968867
    },
    {
        "content": "<p>I guess it's just the triangle which David mentioned already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Example</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">T.TN</span> <span class=\"mi\">1</span> <span class=\"o\">(</span> <span class=\"n\">T.TN</span> <span class=\"mi\">2</span> <span class=\"n\">T.T0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>You might end up in dependent type hell with that though. The advantage of eqToHom is that there are a whole bunch of simp lemmas all designed to make your life easier when working with it.</p>",
        "id": 395954982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696969173
    },
    {
        "content": "<p>cool, i'll play around with it, thanks<br>\nhow do you type that triangle anyway <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 395959336,
        "sender_full_name": "Alexander Bakst",
        "timestamp": 1696971283
    },
    {
        "content": "<p>\"\\t\" works for me in emacs</p>",
        "id": 395959456,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696971358
    },
    {
        "content": "<p>thanks everyone!</p>",
        "id": 395971976,
        "sender_full_name": "Alexander Bakst",
        "timestamp": 1696979031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657977\">Alexander Bakst</span> has marked this topic as resolved.</p>",
        "id": 395971982,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696979037
    },
    {
        "content": "<p>Kevin, the category-theory-free eqToHom is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cast#doc\">docs#cast</a></p>",
        "id": 396036514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697013010
    },
    {
        "content": "<p>Please don't use <code>eqToHom</code> outside of category theory, it's going to confuse and upset people. :-)</p>",
        "id": 396058336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697020686
    }
]