[
    {
        "content": "<p>As a local hypothesis I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">whatever</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"o\">:</span>  <span class=\"n\">ℂ</span>  <span class=\"bp\">→</span><span class=\"n\">ℝ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"n\">hbbz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span> <span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">normSq_nonneg</span>  <span class=\"o\">(</span><span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'w'</span>\n</code></pre></div>",
        "id": 400894261,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699432164
    },
    {
        "content": "<p>Does beginning the proof with <code>intro w</code> help?</p>",
        "id": 400894644,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699432332
    },
    {
        "content": "<p><code>:= by intro w</code> at the top of the proof gives <code>tactic 'introN' failed, insufficient number of binders</code>???</p>",
        "id": 400895829,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699432880
    },
    {
        "content": "<p>I meant the beginning the inner proof with <code>intro w</code>.</p>",
        "id": 400896918,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699433223
    },
    {
        "content": "<p>Same thing</p>",
        "id": 400900247,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699434236
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">whatever</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"o\">:</span>  <span class=\"n\">ℂ</span>  <span class=\"bp\">→</span><span class=\"n\">ℝ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hbbz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span> <span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">w</span>\n    <span class=\"n\">exact</span> <span class=\"n\">normSq_nonneg</span>  <span class=\"o\">(</span><span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>gives a new error</p>",
        "id": 400900342,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699434255
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hbbz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span> <span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">w</span>\n  <span class=\"n\">exact</span> <span class=\"n\">normSq_nonneg</span>  <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>works. Thanks!</p>",
        "id": 400905217,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699436024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 400905230,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699436033
    }
]