[
    {
        "content": "<p>Where is the <code>∧</code> operator defined? I've opened the Prelude and found <code>structure And</code>. The Prelude doesn't contain the <code>∧</code> character at all (except in comments). What am I missing?</p>\n<p>I'm trying to find the exact precedence and associativity of all the operators I'm using. Most things let you jump to the definition, I don't think I can do so with operators?</p>",
        "id": 404664443,
        "sender_full_name": "Treq",
        "timestamp": 1701186610
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=And#doc\">docs#And</a></p>",
        "id": 404666129,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701187147
    },
    {
        "content": "<p>Ah, you mean the notation</p>",
        "id": 404666214,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701187170
    },
    {
        "content": "<p>Yeah, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=And#doc\">docs#And</a> uses the operator in it's comments, but I'm expecting to see <code>infixr:??   \" ^ \" =&gt; And.intro</code> somewhere. No?</p>",
        "id": 404666622,
        "sender_full_name": "Treq",
        "timestamp": 1701187274
    },
    {
        "content": "<p>You can ctrl-click in VS Code on the symbol</p>",
        "id": 404666747,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701187308
    },
    {
        "content": "<p>Oh! Nice</p>",
        "id": 404666926,
        "sender_full_name": "Treq",
        "timestamp": 1701187335
    },
    {
        "content": "<p>Thank you :)</p>",
        "id": 404666957,
        "sender_full_name": "Treq",
        "timestamp": 1701187342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Treq</span> has marked this topic as resolved.</p>",
        "id": 404666970,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701187345
    },
    {
        "content": "<p>It's <a href=\"https://github.com/leanprover/lean4/blob/8e5cf6466061e7660353d7c3d9b69f744ac29edd/src/Init/Notation.lean#L327-L327\">here</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span> <span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"s2\">\" /</span><span class=\"se\">\\\\</span><span class=\"s2\"> \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And</span>\n</code></pre></div>",
        "id": 404667258,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701187412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Treq</span> has marked this topic as unresolved.</p>",
        "id": 404670509,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701188448
    },
    {
        "content": "<p>So, I know that -&gt; is right-associative, but what is its precedence? ctrl-click in VS Code doesn't work.</p>",
        "id": 404671111,
        "sender_full_name": "Treq",
        "timestamp": 1701188635
    },
    {
        "content": "<p>If you right click the arrow and do \"go to declaration\" you should get to the notation declaration</p>",
        "id": 404673373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701189310
    },
    {
        "content": "<p>\"Go to definition\" gives you the code for how syntax gets interpreted (elaborated). For <code>infixr</code>/<code>notation</code>/etc., the declaration and the definition coincide.</p>",
        "id": 404673651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701189384
    },
    {
        "content": "<p>(The answer appears to be 25)</p>",
        "id": 404673749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701189414
    },
    {
        "content": "<p><code>termParser 25</code> basically says the precedence is 25?</p>",
        "id": 404673822,
        "sender_full_name": "Treq",
        "timestamp": 1701189437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Treq</span> has marked this topic as resolved.</p>",
        "id": 404674089,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701189497
    },
    {
        "content": "<p>Yeah, seems to be the case. Okay! Thanks :)</p>",
        "id": 404674197,
        "sender_full_name": "Treq",
        "timestamp": 1701189527
    },
    {
        "content": "<p>That's saying that the RHS of the arrow has to parse correctly next to something of precedence 25, and I think that could be interpreted as arrow being precedence 25.</p>\n<p>The <code>infixr</code> command by the way is just a macro that expands into lower-level parsers. Associativity is sort of an illusion implemented by having different precedences in the left and right operands.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.command</span> <span class=\"n\">true</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"s2\">\" ∧ \"</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">And</span>\n<span class=\"c1\">-- A couple interesting steps during macro expansion of this command:</span>\n<span class=\"c\">/-</span><span class=\"cm\"> syntax:35 (name := «term_∧_») (priority := 1000) term:36 \" ∧ \" term:35 -/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">@[term_parser 1000]</span>\n<span class=\"cm\">def «term_∧_» : Lean.TrailingParserDescr :=</span>\n<span class=\"cm\">  ParserDescr.trailingNode `unbundled.«term_∧_» 35 36</span>\n<span class=\"cm\">    (ParserDescr.binary `andthen (ParserDescr.symbol \" ∧ \") (ParserDescr.cat `term 35))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 404675818,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701190030
    },
    {
        "content": "<p>Right. That makes sense. Though I assume this means you'd want to avoid defining operators with with  precedence only 1 away from each other as that might expand strangely.</p>",
        "id": 404676454,
        "sender_full_name": "Treq",
        "timestamp": 1701190241
    }
]