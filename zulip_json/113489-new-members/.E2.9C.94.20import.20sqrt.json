[
    {
        "content": "<p>Hello, I just started to use Lean and I'm currently struggeling with the imports. Like what do I need to do to be able to use Mathlib definitions and theorems.</p>\n<p>This is what I've tried so far, but it underlines the sqrt and I don't understand why.<br>\nIf I uncomment the second import it underlines the first import (Nat.Modeq)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Modeq</span>\n<span class=\"c1\">-- import Mathlib.Data.Real.Sqrt</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">alph</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">v_nezero</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">v</span>\n  <span class=\"n\">u2dmodv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">%</span> <span class=\"n\">v</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">alph_reduced</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">v_nezero</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">v</span>\n  <span class=\"n\">u2dmodv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">%</span> <span class=\"n\">v</span>\n  <span class=\"n\">gt_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">v</span>\n  <span class=\"n\">konj_betw_one_zero</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">sqrt</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">sqrt</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 395632099,
        "sender_full_name": "Chris Miller",
        "timestamp": 1696835061
    },
    {
        "content": "<p>I am not sure why your first import works: I need <code>ModEq</code> (note the capitalization of the <code>E</code>).</p>\n<p>Next, <code>open Nat</code> fixes the <code>sqrt</code> issue, since I imagine that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.sqrt#doc\">docs#Nat.sqrt</a> is what you were after!</p>",
        "id": 395636074,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696836590
    },
    {
        "content": "<p>when I use <code>open Nat</code> it evaluates sqrt 5 as 2, and if I try <code>open Real</code> or <code>#eval Real.sqrt 5</code> it returns an error, even though <code>#check Real.sqrt 5</code> seems to work just fine.</p>",
        "id": 395637403,
        "sender_full_name": "Chris Miller",
        "timestamp": 1696837125
    },
    {
        "content": "<p>So, there are (at least) two different <code>sqrt</code> that you could mean: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.sqrt#doc\">docs#Nat.sqrt</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sqrt#doc\">docs#Real.sqrt</a>.  The former, is the \"truncation\" of the latter.  The former is computable, so <code>#eval</code> works with it.  The latter is intended for proofs, since it behaves as you would expect the square root to behave (at least if you are a mathematician!).</p>",
        "id": 395637798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696837290
    },
    {
        "content": "<p>Depending on which one you want to use, you should either <code>open Nat</code> or <code>open Real</code>.</p>",
        "id": 395637850,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696837314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657510\">Chris Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/import.20sqrt/near/395637403\">said</a>:</p>\n<blockquote>\n<p>when I use <code>open Nat</code> it evaluates sqrt 5 as 2, and if I try <code>open Real</code> or <code>#eval Real.sqrt 5</code> it returns an error</p>\n</blockquote>\n<p>It is much easier to help you if you tell us <em>what</em> the error says</p>",
        "id": 395638067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696837400
    },
    {
        "content": "<p>Thank you. <br>\nAlso, how does one know which letters to capitalize in the imports? In the documentation it seems like everything is lower cap except the first letter</p>",
        "id": 395638139,
        "sender_full_name": "Chris Miller",
        "timestamp": 1696837431
    },
    {
        "content": "<p>Capitalization should follow the filename.  I wonder whether your first import worked for some fluke, since you are on a case-insensitive OS...</p>",
        "id": 395638273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696837469
    },
    {
        "content": "<p>There is no 1:1 mapping between imports and function names, just in case you thought otherwise</p>",
        "id": 395638342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696837498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/import.20sqrt/near/395638067\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"657510\">Chris Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/import.20sqrt/near/395637403\">said</a>:</p>\n<blockquote>\n<p>when I use <code>open Nat</code> it evaluates sqrt 5 as 2, and if I try <code>open Real</code> or <code>#eval Real.sqrt 5</code> it returns an error</p>\n</blockquote>\n<p>It is much easier to help you if you tell us <em>what</em> the error says</p>\n</blockquote>\n<p>this is the error message:<br>\n<code>IR check failed at '_eval', error: unknown declaration 'Real.sqrt'</code></p>",
        "id": 395638371,
        "sender_full_name": "Chris Miller",
        "timestamp": 1696837506
    },
    {
        "content": "<p>That error is a weird way of saying that you cannot \"compute\" <code>Real.sqrt</code>.</p>",
        "id": 395638439,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696837532
    },
    {
        "content": "<p>(That error message being confusing is arguably a bug, but the fact you get an error at all is not)</p>",
        "id": 395638540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696837577
    },
    {
        "content": "<p>Briefly, you can of course prove facts about both <code>Nat.sqrt</code> and <code>Real.sqrt</code>.  However, I would view <code>Real.sqrt</code> as the \"correct\" square root, while <code>Nat.sqrt</code> is what you get when you want to define the square root on the naturals and insist that it should take values in the naturals.</p>\n<p>As a generic statement, you could probably say that <code>Nat.sqrt</code> is for CS, while <code>Real.sqrt</code> is for maths, but the distinction is very blurry.</p>",
        "id": 395638726,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696837671
    },
    {
        "content": "<p>By the way, looking at the code that you posted, I suspect that you may want <code>Real.sqrt</code>, since you want the outcome to be strictly between <code>-1</code> and <code>0</code>.  However, the operation <code>%</code> on <code>Real</code> is not too interesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">EuclideanDomain.div_add_mod</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"n\">b0</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 395642274,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696839056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/import.20sqrt/near/395642274\">said</a>:</p>\n<blockquote>\n<p>By the way, looking at the code that you posted, I suspect that you may want <code>Real.sqrt</code>, since you want the outcome to be strictly between <code>-1</code> and <code>0</code>.  However, the operation <code>%</code> on <code>Real</code> is not too interesting:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">EuclideanDomain.div_add_mod</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"n\">b0</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, I accidently typed % instead of /  even though I only intended to write % for the u2dmodv...<br>\nI do need it to be Real.sqrt</p>",
        "id": 395644887,
        "sender_full_name": "Chris Miller",
        "timestamp": 1696839927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657510\">Chris Miller</span> has marked this topic as resolved.</p>",
        "id": 395652168,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696842446
    }
]