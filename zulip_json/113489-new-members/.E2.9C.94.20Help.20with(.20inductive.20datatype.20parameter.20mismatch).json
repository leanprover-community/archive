[
    {
        "content": "<p>Hello i try to port following code from coq</p>\n<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"kn\">Inductive</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"o\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">V</span>\n<span class=\"o\">|</span> <span class=\"n\">go</span>   <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">V</span><span class=\"o\">.</span>\n</code></pre></div>\n<p>to lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">go</span>   <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>but i got this error message </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">datatype</span> <span class=\"kd\">parameter</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Option</span> <span class=\"n\">α</span>\n<span class=\"n\">expected</span>\n  <span class=\"n\">α</span>\n</code></pre></div>\n<p>Is there any way to solve this error in lean</p>",
        "id": 401112267,
        "sender_full_name": "Sileanth",
        "timestamp": 1699521441
    },
    {
        "content": "<p>I found that following code works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">go</span>   <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 401127538,
        "sender_full_name": "Sileanth",
        "timestamp": 1699525607
    },
    {
        "content": "<p>Can some explain why, in Coq i didn't need to do such operation with type levels?</p>",
        "id": 401128295,
        "sender_full_name": "Sileanth",
        "timestamp": 1699525840
    },
    {
        "content": "<p>Because <em>you</em> decided to give those indications. Lean does it alone just as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">go</span>   <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 401155612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699536515
    },
    {
        "content": "<p>In Coq, when you write your datatype, somewhere hidden from you a universe inequality <code>u &lt; v</code> (or <code>u &lt;= v</code>) is added to some database. Lean doesn't have the notion of universe inequalities, you or Lean has to make sure the output lies in a universe higher than the input (note: we can mimic universe inequalities by using <code>u1</code> and <code>max u1 u2</code>).</p>",
        "id": 401195155,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699547811
    },
    {
        "content": "<p>Thank you for help</p>",
        "id": 401455992,
        "sender_full_name": "Sileanth",
        "timestamp": 1699664030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"512838\">Sileanth</span> has marked this topic as resolved.</p>",
        "id": 401455995,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699664033
    }
]