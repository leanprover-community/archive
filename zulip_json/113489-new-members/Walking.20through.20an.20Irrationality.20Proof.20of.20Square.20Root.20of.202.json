[
    {
        "content": "<p>Hey - I just picked up Lean a couple days ago and I'm working through a couple of classic proofs - would love some assistance as I make my way through some of them</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">coprime</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span>\n<span class=\"k\">#eval</span> <span class=\"n\">coprime</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>I've defined the following for determining if two numbers are coprime - however both of these return the same result; have I done something wrong?</p>",
        "id": 326480908,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1675814201
    },
    {
        "content": "<p>The result for both is \"I can't useful print this\"</p>",
        "id": 326484429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675816063
    },
    {
        "content": "<p>It's the same output as <code>#eval 2 + 2 = 4</code> gives, right?</p>",
        "id": 326484604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675816152
    },
    {
        "content": "<p>You need to ask lean to \"decide\" the proposition, which you can do by casting to <code>bool</code></p>",
        "id": 326484650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675816188
    },
    {
        "content": "<p>Im going to keep my questions in this thread as its the same proof that I am working on - I am currently trying to prove something similar to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_theorem</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>what tactic(s) would i use in order to prove this? I should just be able to provide a solution (x=5), but not sure how to translate that into lean</p>",
        "id": 326693986,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1675894015
    },
    {
        "content": "<p><code>use 5</code></p>",
        "id": 326694084,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675894055
    },
    {
        "content": "<p>thanks!</p>",
        "id": 326694402,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1675894179
    },
    {
        "content": "<p>is there an easy way to search for theorems besides scrolling through the mathlib docs? i vaguely know what i want to do (need something along the lines of x+1 = y+1 \\implies x = y), but I'm not sure how to find such a theorem efficiently</p>",
        "id": 326700387,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1675896625
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">tactic#library_search</a></p>",
        "id": 326700738,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675896781
    },
    {
        "content": "<p>Thanks for the help! This proof is coming together, its like an intro proof class all over again <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 326702662,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1675897591
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">all_integers_even_or_odd</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"c1\">-- 0 is even as 0 = 2*0</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">even</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">odd</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">even</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">odd</span> <span class=\"n\">at</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">even</span> <span class=\"n\">at</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n      <span class=\"c1\">-- case that j is even</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">l</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"kd\">begin</span> <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">n_ih</span> <span class=\"k\">with</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n        <span class=\"n\">finish</span><span class=\"o\">,</span>\n      <span class=\"o\">}</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"c1\">-- case that j is odd</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"kd\">begin</span> <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">n_ih</span> <span class=\"k\">with</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">l'</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">finish</span><span class=\"o\">,</span>\n      <span class=\"o\">}</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this was probably unnecessary but any feedback would be appreciated</p>",
        "id": 326706164,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1675899359
    },
    {
        "content": "<p>A good next step would be to try to replace <code>finish</code> with <code>simp</code>, <code>ring</code> or some other action; that way, you can learn the steps it's taking</p>",
        "id": 326716361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675906145
    },
    {
        "content": "<p><code>by begin { ... } end</code> is better spelt <code>{ ... }</code>!</p>",
        "id": 326716391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675906187
    },
    {
        "content": "<p>that is better spelt</p>",
        "id": 326717707,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1675907502
    },
    {
        "content": "<p>im almost done with implementing Euclid's proof of the irrationality of sqrt 2 - after that I'll go through and polish it up</p>",
        "id": 326717767,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1675907528
    },
    {
        "content": "<p><code>finish</code> really slows your code down and makes the game less fun. Too many orange bars.</p>",
        "id": 326955584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675994965
    }
]