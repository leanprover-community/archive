[
    {
        "content": "<p>Hi I am very new to Lean. I am trying to prove that a concrete matrix to be Hermitian. Here are the definitions and my proof so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Hermitian</span>\n<span class=\"kd\">def</span> <span class=\"n\">PauliX</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">example</span> <span class=\"n\">paulix_is_hermitian</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">PauliX</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">PauliX</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">PauliX</span><span class=\"o\">,</span> <span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"n\">Matrix.vecCons</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Currently, my first goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"mi\">1</span> <span class=\"bp\">!</span><span class=\"o\">[]))</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"mi\">0</span> <span class=\"bp\">!</span><span class=\"o\">[]))</span> <span class=\"bp\">!</span><span class=\"o\">[])</span> <span class=\"n\">j</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"mi\">0</span> <span class=\"bp\">!</span><span class=\"o\">[])</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n</code></pre></div>\n<p>I admit that I used the help of chatGPT to get here. I am confused that:</p>\n<ol>\n<li>I used <code>fin_cases i; fin_cases j</code>, but why there is still  <code>j</code> in the goal?</li>\n<li>How do I proceed?<br>\nThanks!</li>\n</ol>",
        "id": 407546050,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1702408108
    },
    {
        "content": "<p><code>fin_cases i; fin_cases j</code> should be <code>fin_cases i &lt;;&gt; fin_cases j</code>. Maybe ChatGPT is confused about Lean 3 vs Lean 4.</p>\n<p>The <code>;</code> ends up meaning \"do <code>fin_cases j</code> on the first goal produced by <code>fin_cases i</code>\"</p>",
        "id": 407546869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702408422
    },
    {
        "content": "<p>Got it. Thanks very much!</p>\n<p>Here is my new proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">paulix_is_hermitian</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">PauliX</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">PauliX</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">PauliX</span><span class=\"o\">,</span> <span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"n\">Matrix.vecCons</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>However, I still get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">infer</span> <span class=\"n\">binder</span> <span class=\"n\">type</span> <span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n</code></pre></div>\n<p>I find all types are clear in the proof, what is wrong?</p>",
        "id": 407547468,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1702408634
    },
    {
        "content": "<p>Note that <code>![![0, 1], ![1, 0]]</code> is not a matrix, and some lemmas won't fire as a result</p>",
        "id": 407549586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702409414
    },
    {
        "content": "<p>The correct notation is <code>!![0, 1; 1, 0]</code></p>",
        "id": 407549667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702409439
    },
    {
        "content": "<p>Your issue here is that the syntax for <code>example</code> is wrong. <code>example foo : True := sorry</code> means <code>example (foo : _) : true := sorry</code></p>",
        "id": 407549865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702409507
    },
    {
        "content": "<p>Which is to say: <code>examples</code> don't have names. If you want to give it a name, you should use <code>theorem</code></p>",
        "id": 407550121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702409589
    },
    {
        "content": "<p>It's unfortunate that lean parses this in such a confusing way</p>",
        "id": 407550147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702409599
    },
    {
        "content": "<p>Thanks! <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It resolves all the problem!</p>",
        "id": 407550562,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1702409724
    },
    {
        "content": "<p>Now I am trying to prove a 2nd version of the theorem, which leverages the \"IsHermitian\" in mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">PauliX_is_still_hermitian</span><span class=\"o\">:</span> <span class=\"n\">PauliX.IsHermitian</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Currently, I am having this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">i</span><span class=\"bp\">✝</span><span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">PauliX</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"n\">i</span><span class=\"bp\">✝</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">PauliX</span> <span class=\"n\">i</span><span class=\"bp\">✝</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span>\n</code></pre></div>\n<p>Since <code>i✝, x✝</code> are <code>Fin 2</code>, I want to <code>fin_cases</code> them. However, I cannot type them in the editor (the editor won't recognize them). How do I proceed?</p>",
        "id": 407552846,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1702410428
    },
    {
        "content": "<p>i didn't test, but most likely you want to <code>ext i x</code> or something</p>",
        "id": 407553647,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702410686
    },
    {
        "content": "<p>I'm curious. Does just <code>rfl</code> alone (no <code>ext</code>) work?</p>",
        "id": 407553916,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702410767
    },
    {
        "content": "<p>Or avoid unfolding the definition and start by rewriting with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.IsHermitian.ext_iff#doc\">docs#Matrix.IsHermitian.ext_iff</a></p>",
        "id": 407553955,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702410779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Prove.20that.20a.20matrix.20is.20Hermitian/near/407553916\">said</a>:</p>\n<blockquote>\n<p>I'm curious. Does just <code>rfl</code> alone (no <code>ext</code>) work?</p>\n</blockquote>\n<p>unfortunately, it doesn't. It says type not match.</p>",
        "id": 407557353,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1702411703
    },
    {
        "content": "<p>Sorry, what I asked before was nonsense. Thanks for checking though!</p>",
        "id": 407559786,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702412533
    },
    {
        "content": "<p>You may want to write some <code>simp</code> lemmas for <code>PauliX</code>, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Hermitian</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PauliX</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">PauliX₁₁</span> <span class=\"o\">:</span> <span class=\"n\">PauliX</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">PauliX₁₂</span> <span class=\"o\">:</span> <span class=\"n\">PauliX</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">PauliX₂₁</span> <span class=\"o\">:</span> <span class=\"n\">PauliX</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">PauliX₂₂</span> <span class=\"o\">:</span> <span class=\"n\">PauliX</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PauliX.IsHermitian</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Matrix.IsHermitian.ext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>which makes the proof quite simple.</p>",
        "id": 407561411,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702413124
    },
    {
        "content": "<p>You can also pass <code>PauliX</code> as a simp lemma rather than writing those four lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PauliX.IsHermitian</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Matrix.IsHermitian.ext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">PauliX</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 407561765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702413257
    },
    {
        "content": "<p>Those are very helpful. Thanks! <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 407571785,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1702416624
    }
]