[
    {
        "content": "<p>Hi, I'm trying to work on proving a simple corollary of Nakayama's lemma (tag <a href=\"https://stacks.math.columbia.edu/tag/07RC\">07RC</a>, part 8). I've completed what I at first considered to be the \"nontrivial\" part of the proof (applying Nakayama's lemma), but am getting bogged down by something I first thought would be \"elementary\" (showing that if <code>N</code> is a submodule of <code>M</code> which is equal to <code>⊤</code> mod <code>I</code>, then <code>N ⊔ (I • ⊤) = ⊤</code> as <code>M</code>-submodules).</p>\n<p>In particular, I wanted to use <code>submodule.map_mkq_eq_top</code> to show this. However, the goal that I get once applying this lemma is about <code>R</code>-modules, not <code>R/I</code>-modules, and it's not clear to me what lemma about <code>map</code> or <code>comap</code> would solve this, seeing as the implication that I want (these things are equal as <code>R/I</code>-modules, so they must be equal as <code>R</code>-modules) is not true in general.</p>\n<p>At this point, I'm not sure if I'm formalizing the assumption in a non-optimal way, or if I'm missing a lemma somewhere in mathlib about <code>map</code> and <code>comap</code> and quotient modules. Can someone give me some tips about how to proceed?</p>\n<p>Here is my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.nakayama</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.jacobson_ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.torsion</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ideal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">generate_of_quotient_generate_of_le_jacobson</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hIjac</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">jacobson</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hIM</span> <span class=\"o\">:</span> <span class=\"n\">submodule.span</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">submodule.quotient.mk</span> <span class=\"bp\">''</span> <span class=\"bp\">↑</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))))</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"bp\">↑</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"bp\">↑</span><span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">MM</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">htop</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">MM</span> <span class=\"bp\">=</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">sup_top_eq</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">hItop</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">eq.trans</span> <span class=\"n\">hh</span> <span class=\"n\">htop.symm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hIineqtop</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">MM</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">sup_top_eq</span><span class=\"o\">,</span> <span class=\"n\">hItop</span><span class=\"o\">,</span> <span class=\"n\">top_le_iff</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">nakayama</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">submodule.smul_sup_le_of_le_smul_of_le_jacobson_bot</span> <span class=\"n\">hM</span> <span class=\"n\">hIjac</span> <span class=\"n\">hIineqtop</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">),</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nakayama</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq.trans</span> <span class=\"n\">this</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">sup_symm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">),</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">sup_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sup_symm</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">submodule.map_mkq_eq_top</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rw [←hIM], -- I think this should be somewhere in here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 350601927,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1681760492
    },
    {
        "content": "<p>Do we have a standard way to speak about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M/IM</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">R/I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>-module where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module?</p>",
        "id": 350604183,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681761344
    },
    {
        "content": "<p>You could certainly consider restating <code>hIM</code> as the statement that is your goal at that <code>sorry</code>.</p>",
        "id": 350605690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681761911
    },
    {
        "content": "<p>But nevertheless, we should have a way to go back and forth between <code>R</code>-submodules and <code>R/I</code>-submodules.</p>",
        "id": 350605750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681761934
    },
    {
        "content": "<p>If you consider them as <code>R</code>-modules, it's easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.nakayama</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.jacobson_ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.torsion</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">N.map</span> <span class=\"o\">(</span><span class=\"n\">submodule.mkq</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))))</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submodule.map_mkq_eq_top</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 350606347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681762145
    },
    {
        "content": "<p>Presumably we should also have this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">≃</span><span class=\"n\">o</span>\n  <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">N.add_mem</span><span class=\"o\">,</span> <span class=\"n\">N.zero_mem</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">N.smul_mem</span> <span class=\"n\">c</span> <span class=\"n\">hx</span><span class=\"o\">}⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">N.add_mem</span><span class=\"o\">,</span> <span class=\"n\">N.zero_mem</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">N.smul_mem</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">iff.refl</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 350608142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681762830
    },
    {
        "content": "<p>Well, this was a good reminder for me just how annoying lean can be. There's a lot of room for refactoring in this proof (and I abused definitional equalities with impunity). I hope it helps anyway!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.nakayama</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.jacobson_ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.torsion</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">true</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">≃</span><span class=\"n\">o</span>\n  <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">N.add_mem</span><span class=\"o\">,</span> <span class=\"n\">N.zero_mem</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">N.smul_mem</span> <span class=\"n\">c</span> <span class=\"n\">hx</span><span class=\"o\">}⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">N.add_mem</span><span class=\"o\">,</span> <span class=\"n\">N.zero_mem</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">N.smul_mem</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">iff.refl</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">--variables {R M : Type*} [comm_ring R] [add_comm_group M] [module R M]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ideal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">generate_of_quotient_generate_of_le_jacobson</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hIjac</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">jacobson</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hIM</span> <span class=\"o\">:</span> <span class=\"n\">submodule.span</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">submodule.quotient.mk</span> <span class=\"bp\">''</span> <span class=\"bp\">↑</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))))</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"bp\">↑</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"bp\">↑</span><span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">MM</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">htop</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">MM</span> <span class=\"bp\">=</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">sup_top_eq</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">hItop</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">eq.trans</span> <span class=\"n\">hh</span> <span class=\"n\">htop.symm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hIineqtop</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">MM</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">sup_top_eq</span><span class=\"o\">,</span> <span class=\"n\">hItop</span><span class=\"o\">,</span> <span class=\"n\">top_le_iff</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">nakayama</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">submodule.smul_sup_le_of_le_smul_of_le_jacobson_bot</span> <span class=\"n\">hM</span> <span class=\"n\">hIjac</span> <span class=\"n\">hIineqtop</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">),</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nakayama</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq.trans</span> <span class=\"n\">this</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">sup_symm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">),</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">sup_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sup_symm</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">submodule.map_mkq_eq_top</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">foobar</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">order_iso.map_top</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hIM</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">hm</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">submodule.span_induction</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">submodule.subset_span</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">submodule.quotient.mk_add</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">submodule.add_mem</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">submodule.quotient.mk_smul</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">submodule.smul_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">submodule.quotient.mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hx</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">finsupp.mem_span_iff_total</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.map</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mkq</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"bp\">↑</span><span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">⧸</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r.out'</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">submodule.quotient.mk</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n      <span class=\"n\">set.image_factorization</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hπ</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">set.surjective_onto_image</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">submodule.quotient.mk</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hπ</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hτ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hπ</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">l.support</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n      <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">submodule.sum_mem</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n      <span class=\"n\">apply</span> <span class=\"n\">submodule.subset_span</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">c.2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">x'</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">linear_map.map_sum</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">l.support</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">fapply</span> <span class=\"n\">finset.sum_bij</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">submodule.quotient.mk</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">subtype.val</span> <span class=\"o\">(</span><span class=\"n\">hτ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n        <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk'</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">],</span>\n        <span class=\"n\">rw</span> <span class=\"n\">quotient.out_eq'</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 350620445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681768065
    },
    {
        "content": "<p>I think the right approach with this is to develop some further api that lets us consider an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> as a module over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">R/I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> whenever <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is contained in the annihilator.</p>",
        "id": 350621988,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681768871
    },
    {
        "content": "<p>Here's a more general result (without finiteness of S) which avoids spans (which was the most annoying part of the proof above):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.nakayama</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.jacobson_ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.torsion</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">true</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">submodule.map_mod</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">M'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">⟩,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">N.smul_mem</span> <span class=\"n\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">N.to_add_subgroup.map</span> <span class=\"n\">f.to_add_monoid_hom</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">module.mkqₛₗ</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">submodule.mkq</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">module.idqₛₗ</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n  <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">linear_map.id</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simps apply]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">≃</span><span class=\"n\">o</span>\n  <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N.map_mod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">module.idqₛₗ</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">N.add_mem</span><span class=\"o\">,</span> <span class=\"n\">N.zero_mem</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">N.smul_mem</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">a'</span> <span class=\"bp\">≤</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">b'</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">submodule.map_mod</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">submodule.map</span> <span class=\"o\">(</span><span class=\"n\">submodule.mkq</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">module.idqₛₗ</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">submodule.map_mod</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">module.mkqₛₗ</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set_like.coe_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ideal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">generate_of_quotient_generate_of_le_jacobson</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hIjac</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">jacobson</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hIM</span> <span class=\"o\">:</span> <span class=\"n\">submodule.map_mod</span> <span class=\"n\">I</span> <span class=\"n\">_</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">module.mkqₛₗ</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">MM</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">nak</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">submodule.smul_sup_le_of_le_smul_of_le_jacobson_bot</span> <span class=\"n\">hM</span> <span class=\"n\">hIjac</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">sup_top_eq</span><span class=\"o\">,</span> <span class=\"n\">top_le_iff</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nak</span><span class=\"o\">]),</span> <span class=\"n\">hh</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sup_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">submodule.map_mkq_eq_top</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">foobar</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">order_iso.map_top</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hIM</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 350629100,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681771854
    },
    {
        "content": "<p>That looks much better :-)</p>",
        "id": 350631450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681772698
    },
    {
        "content": "<p>Oh, it looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.map\">docs#submodule.map</a> already uses semilinear maps. So the above can be refactored to just use that</p>",
        "id": 350631598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681772754
    },
    {
        "content": "<p>okay, cleaned up a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.nakayama</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.jacobson_ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.torsion</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">true</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">submodule.mkqₛₗ</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">submodule.mkq</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">submodule.idqₛₗ</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n  <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">linear_map.id</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simps apply]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">≃</span><span class=\"n\">o</span>\n  <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">N.map</span> <span class=\"o\">(</span><span class=\"n\">submodule.idqₛₗ</span> <span class=\"n\">M</span> <span class=\"n\">I</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">N.add_mem</span><span class=\"o\">,</span> <span class=\"n\">N.zero_mem</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">N.smul_mem</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">a'</span> <span class=\"bp\">≤</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">b'</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">N.map</span> <span class=\"bp\">$</span> <span class=\"n\">submodule.mkq</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">submodule.idqₛₗ</span> <span class=\"n\">M</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">N.map</span> <span class=\"o\">(</span><span class=\"n\">submodule.mkqₛₗ</span> <span class=\"n\">M</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set_like.coe_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">id</span> <span class=\"bp\">''</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ideal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">generate_of_quotient_generate_of_le_jacobson</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hIjac</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">jacobson</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hIM</span> <span class=\"o\">:</span> <span class=\"n\">submodule.map</span> <span class=\"o\">(</span><span class=\"n\">submodule.mkqₛₗ</span> <span class=\"n\">M</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">MM</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MM</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">nak</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">submodule.smul_sup_le_of_le_smul_of_le_jacobson_bot</span> <span class=\"n\">hM</span> <span class=\"n\">hIjac</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">sup_top_eq</span><span class=\"o\">,</span> <span class=\"n\">top_le_iff</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nak</span><span class=\"o\">]),</span> <span class=\"n\">hh</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sup_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">submodule.map_mkq_eq_top</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">MM</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">foobar</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">order_iso.map_top</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hIM</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 350632644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681773205
    },
    {
        "content": "<p>Isn't the reverse direction of <code>foobar</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.restrict_scalara\">docs#submodule.restrict_scalara</a>?</p>",
        "id": 350690548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681801878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Nakayama.3A.20Change.20assumption.20or.20search.20for.20lemma.3F/near/350629100\">said</a>:</p>\n<blockquote>\n<p>Here's a more general result (without finiteness of S) which avoids spans (which was the most annoying part of the proof above):<br>\n</p>\n</blockquote>\n<p>What was your thought process in choosing to phrase it this way? </p>\n<p>I feel like I often phrase lemmas in a way that makes it much harder to prove, but I can't tell the difference.</p>",
        "id": 351724165,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1682107998
    },
    {
        "content": "<p>At least part of this will be \"experience\"</p>",
        "id": 351725466,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682108413
    },
    {
        "content": "<p>yeah, experience, but in this case it was also a matter of replacing an ideal written in terms of generators by just an ideal, which is something that is perfectly natural from a mathematical perspective (regardless of the formalization)</p>",
        "id": 351726615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682108868
    },
    {
        "content": "<p>Perhaps some of the intuition is we don't want to talk about elements if possible unless all we're doing some sort of computation with equations using <code>ring</code> or such?</p>",
        "id": 351728463,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1682109543
    },
    {
        "content": "<p>Sure, that's one point. The theorem is some statement about the lattice of ideals in some ring (and uses the language of lattices exclusively), so it's natural to try to stick to this language as much as possible.</p>",
        "id": 351728808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682109663
    },
    {
        "content": "<p>It's hard to formalize intuition :)</p>",
        "id": 351728903,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682109694
    }
]