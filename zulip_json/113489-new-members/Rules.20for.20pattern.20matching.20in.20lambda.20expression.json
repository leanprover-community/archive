[
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there a way to replace <code>h</code> with something to match the disjunction?  I tried <code>⟨h, h'⟩</code> and <code>⟨h | h'⟩</code> but neither works.  Is this because lambdas follow the rules for <code>intros</code> rather than <code>rintros</code>, i.e. they don't do recursive matching?  Why not?  In other words, why not allow recursive matching everywhere that non-recursive matching is allowed?  Why have <code>intros</code> at all, and not just <code>rintros</code>?</p>",
        "id": 327258463,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1676124928
    },
    {
        "content": "<p><code>(h | h')</code>. I agree about <code>rintros</code> but you can't just change core lean!</p>",
        "id": 327259162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676125228
    },
    {
        "content": "<p>lambda does recursive matching, but it does not use the same syntax as <code>rintro</code></p>",
        "id": 327260231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676125663
    },
    {
        "content": "<p>you have to use actual terms as patterns rather than this <code>|</code> stuff</p>",
        "id": 327260331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676125688
    },
    {
        "content": "<p>Good afternoon Kevin.  That fails for me too.  At the pipe it says <code>invalid declaration, ')' expected</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span><span class=\"o\">),</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 327260343,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1676125691
    },
    {
        "content": "<p>to write a pattern using <code>|</code> you should write it like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>if both branches are the same</p>",
        "id": 327260413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676125740
    },
    {
        "content": "<p>the syntax Kevin is suggesting is <code>by rintro x (h | h')</code></p>",
        "id": 327260467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676125768
    },
    {
        "content": "<p>oh this is lean 3</p>",
        "id": 327260707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676125861
    },
    {
        "content": "<p>in lean 3 there is no pattern matching syntax for lambda with multiple alternatives, you have to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">or.inl</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">or.inr</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 327260807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676125906
    },
    {
        "content": "<p>and in this case <code>rintro</code> (which is also available in lean 3) is the clear winner</p>",
        "id": 327260925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676125960
    },
    {
        "content": "<p>Thanks Mario!</p>",
        "id": 327261574,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1676126229
    }
]