[
    {
        "content": "<p>I notice that we can't make <code>λ n : Nat =&gt; Sort n</code> (which would be of type <code>∀ n : Nat. Sort (n + 1)</code> universe levels are a special kind of sub-language rather than being able to be arbitrary naturals, including parameters.<br>\nWhy does that limitation exist? What would go wrong if <code>Sort n</code> (with <code>n</code> a variable passed in from a lambda) was allowed?</p>",
        "id": 382652049,
        "sender_full_name": "Caroline",
        "timestamp": 1691418606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> has marked this topic as resolved.</p>",
        "id": 382652171,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691418623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> has marked this topic as unresolved.</p>",
        "id": 382652202,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691418626
    },
    {
        "content": "<p>what universe would that live in?</p>",
        "id": 382652438,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691418660
    },
    {
        "content": "<p>oh, i see, indeed, one wouldn't be able to give the type of <code>∀ n : Nat. Sort (n + 1)</code>. There isn't a <code>k</code> such that <code>(∀ n : Nat. Sort (n + 1)) : Sort k</code>. thanks!</p>",
        "id": 382653458,
        "sender_full_name": "Caroline",
        "timestamp": 1691418810
    },
    {
        "content": "<p>Note that universe levels live in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Level#doc\">docs#Lean.Level</a> (at least, in the meta-theory), and are not <code>Nat</code>s (which are <code>Expr</code>s in the meta-theory)</p>",
        "id": 382653941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691418874
    },
    {
        "content": "<p>Agda supports first-class levels, and types like <code>∀ n : Nat. Set n</code> live in an \"inaccessible\" sort <code>Setω</code></p>",
        "id": 382654271,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1691418921
    },
    {
        "content": "<p>In <code>Lean</code>, Sort levels are not really natural numbers (or at least they aren't <code>Nat</code>), as they don't really exists within the theory at all. If you aren't careful, allowing first-class levels can lead to proofs of <code>False</code>. Obviously since Agda supports first-class levels it is possible to make them work but Lean doesn't support them.<br>\nOut of curiosity, is there an actual problem you have that would be solved easier if such a function was constructable?</p>",
        "id": 382743059,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691437307
    }
]