[
    {
        "content": "<p>Given how useful the following equivalence is in constructing proofs, since it trades <code>\\exists</code> and <code>\\forall</code> is there a standard name for it in logic?  And what is the corresponding theorem called in Lean 4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">anyThen_iff_existsThen</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span>\n</code></pre></div>",
        "id": 405603213,
        "sender_full_name": "Sergey Cherkis",
        "timestamp": 1701578988
    },
    {
        "content": "<p>Hi! Please see <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>\n<p>It's called <code>exists_imp</code>. One way to find it is to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span><span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>This prints the message <code>Try this: exact Iff.symm forall_exists_index</code>. Then go to the definition of <code>forall_exists_index</code> and look around nearby.</p>\n<p>I don't know if this rule has a name in English.</p>",
        "id": 405604938,
        "sender_full_name": "Richard Copley",
        "timestamp": 1701580497
    },
    {
        "content": "<p>Yes, it has. This is called the elimination principle of <code>Exists</code>. It comes from the inductive definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists#doc\">docs#Exists</a></p>",
        "id": 405614161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701588534
    }
]