[
    {
        "content": "<p>Hi all - just starting so pardon the dumb question...</p>\n<p>why would one choose to use <code>show .. from</code> syntax in the following example, when the most desugared version seems more straightforward and less like macro magic? Is the <code>show..from</code> syntax supposed to be more readable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `show .. from`  syntax for Or elimination -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.elim</span> <span class=\"n\">hPQ</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"k\">from</span> <span class=\"n\">Or.intro_right</span> <span class=\"n\">q</span> <span class=\"n\">hP</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"k\">from</span> <span class=\"n\">Or.intro_left</span>  <span class=\"n\">p</span> <span class=\"n\">hQ</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- desugars to `have` syntax -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex2</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.elim</span> <span class=\"n\">hPQ</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">hQP</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Or.intro_right</span> <span class=\"n\">q</span> <span class=\"n\">hP</span><span class=\"bp\">;</span> <span class=\"n\">hQP</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">hQP</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Or.intro_left</span>  <span class=\"n\">p</span> <span class=\"n\">hQ</span><span class=\"bp\">;</span> <span class=\"n\">hQP</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- which further desugars to a straight forward anon fn -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex3</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.elim</span> <span class=\"n\">hPQ</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_right</span> <span class=\"n\">q</span> <span class=\"n\">hP</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_left</span>  <span class=\"n\">p</span> <span class=\"n\">hQ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340458183,
        "sender_full_name": "E F Vincent",
        "timestamp": 1678307241
    },
    {
        "content": "<p>Yes!</p>",
        "id": 340458762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678307452
    },
    {
        "content": "<p>Why are you writing this code anyway? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Or.symm#doc\">docs4#Or.symm</a> is presumably already in core lean 4 and I would imagine that the proof is as minimal as possible. So probably you're writing it for teaching purposes, because you don't need to prove it again. So the form of the proof will depend on what you are trying to teach at that point.</p>",
        "id": 340459135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678307597
    },
    {
        "content": "<p>Heh, the proof in core is great :-)</p>",
        "id": 340459331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678307662
    },
    {
        "content": "<p>The why - that's right I'm just trying to understand the purpose of <code>show..from</code> syntax, and there's little in the doc to explain why it exists, the proof is just an example.  Also in VSCode one cannot navigate to the source code for <code>show..from</code> or from the <code>having</code> syntax, presumably because they're macros and <code>go to definition</code> function doesn't work on macros, so it's not easy to find the meaning. <a href=\"https://github.com/leanprover/lean4/blob/d4caf1f92248f4fc13c4b9f75c94b8995344d847/doc/expressions.md#structured-proofs\">This file</a> was the only mention I came across, and aside from pointing out how each syntax desugars, it doesn't really explain why it would exist.</p>",
        "id": 340460108,
        "sender_full_name": "E F Vincent",
        "timestamp": 1678307984
    },
    {
        "content": "<p>I suppose it exists because you might want to write something definitionally equivalent to the goal.</p>",
        "id": 340460372,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678308089
    },
    {
        "content": "<p>Yeah sometimes people use <code>show</code> to change the goal to something definitionally equal but syntactically different, so that a rewrite will work.</p>",
        "id": 340460704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678308205
    },
    {
        "content": "<p>got it ... perhaps the value will be more obvious as I experiment with less trivial examples - thanks for the feedback! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 340460749,
        "sender_full_name": "E F Vincent",
        "timestamp": 1678308231
    },
    {
        "content": "<p>This reminds me a question I wanted to ask but forgot (sorry for hijacking your thread): Does Lean 4 have an equivalent of Lean 3's <code>change</code> ... <code>at</code> ... ?</p>",
        "id": 340461044,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678308352
    },
    {
        "content": "<p>The last time someone asked this, the answer was <code>revert h, change ... -&gt; _, intro h</code>. Sounds like a nice exercise for someone wanting to learn how to write tactics, if it's not done already</p>",
        "id": 340461313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678308459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/why.20show.2E.2Efrom.20.3F/near/340461044\">said</a>:</p>\n<blockquote>\n<p>This reminds me a question I wanted to ask but forgot (sorry for hijacking your thread): Does Lean 4 have an equivalent of Lean 3's <code>change</code> ... <code>at</code> ... ?</p>\n</blockquote>\n<p>No, this still needs to be implemented I'm fairly sure.</p>",
        "id": 340489181,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678320936
    }
]