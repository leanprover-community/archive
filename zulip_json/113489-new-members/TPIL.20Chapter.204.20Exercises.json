[
    {
        "content": "<p>Question 4.2: I'm getting a type mismatch errors on all the example in ch4 exercise 2, first on the iff.intro, then on the or.elim, then on the iff.intro. Any insights would be appreciated!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>  <span class=\"n\">hr</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">r</span> <span class=\"n\">hpx</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"bp\">_</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hVxpx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hVxpx</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"bp\">_</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n   <span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n   <span class=\"o\">((</span><span class=\"n\">h1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">((</span><span class=\"n\">h2</span> <span class=\"n\">hr</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 190099442,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583777285
    },
    {
        "content": "<p>Is this your real code? <code>p</code> is not declared anywhere</p>",
        "id": 190099795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583777511
    },
    {
        "content": "<p>also, <code>(assume hr : hr)</code> is clearly wrong</p>",
        "id": 190099815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583777521
    },
    {
        "content": "<p>For the first one, you need to write <code>assume hr a, hr</code> instead of <code>assume hr: hr</code></p>",
        "id": 190099883,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583777538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/190099795\" title=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/190099795\">said</a>:</p>\n<blockquote>\n<p>Is this your real code? <code>p</code> is not declared anywhere</p>\n</blockquote>\n<p>Sorry! P was defined at the top of my file and I forgot to include it when I copied it over.</p>",
        "id": 190100008,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583777616
    },
    {
        "content": "<p>The pattern for <code>assume</code> is <code>assume x : α, b</code> where <code>x</code> is an identifier, <code>α</code> is a type or proposition and <code>b</code> is a term or proof. But you can skip the type and you can chain multiple identifiers.</p>",
        "id": 190100050,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583777640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/190099883\" title=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/190099883\">said</a>:</p>\n<blockquote>\n<p>For the first one, you need to write <code>assume hr a, hr</code> instead of <code>assume hr: hr</code></p>\n</blockquote>\n<p>Just made that correction, thank you! It's still giving me a type mismatch error on iff.intro though.</p>",
        "id": 190100302,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583777773
    },
    {
        "content": "<p>On the next example, take a look at the error:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  or.elim h2 (λ (hVxpx : ∀ (x : α), p x), or.intro_left ?m_1[hVxpx] (hVxpx a))\nterm\n  λ (hVxpx : ∀ (x : α), p x), or.intro_left ?m_1[hVxpx] (hVxpx a)\nhas type\n  ∀ (hVxpx : ∀ (x : α), p x), p a ∨ ?m_1[hVxpx]\nbut is expected to have type\n  (∀ (x : α), p x) → ∀ (x : α), p x ∨ r\n</pre></div>",
        "id": 190100318,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583777780
    },
    {
        "content": "<p>Try commenting out the code that is complaining and replacing it with an underscore <code>_</code> and then seeing what type Lean wants you to replace the underscore with</p>",
        "id": 190100821,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583778055
    },
    {
        "content": "<p>In the case of the second exercise, you might want to comment out the entire proof and replace with an underscore and then slowly add lines back in.</p>",
        "id": 190100862,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583778092
    },
    {
        "content": "<p>Because eg there is a rogue <code>assume a : α,</code> at the top</p>",
        "id": 190100877,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583778116
    },
    {
        "content": "<p>Ok I was able to get 1 and 3 working. I realize now that I misunderstood the way that \"assume\" statements interact with universal quantifiers. I still can't figure out how to get the 'left to right' direction of 2. If I assume a specific element in the assumption to be able to or.elim, then I've lost the generality to exact on all elements in alpha on the right hand side. I feel like I'm missing something.</p>",
        "id": 190108141,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583782168
    },
    {
        "content": "<p>I think that <code>(∀ x, p x ∨ r) -&gt; (∀ x, p x) ∨ r</code> needs to be done by contradiction.</p>",
        "id": 190113789,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583785384
    },
    {
        "content": "<p>There is nothing much you can try with intuitionistic logic here. The assumption cannot be broken and the only allowed moves are <code>left</code> and <code>right</code>.</p>",
        "id": 190114515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583785809
    },
    {
        "content": "<p>I'm skimming through this chapter to see what seems allowed, and I'm always puzzled by this \"French quotation mark\" terminology. In English, do you say ' is a quotation mark? Do you ever use it alone?</p>",
        "id": 190115353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786380
    },
    {
        "content": "<p>the problem mentions that one of the directions requires classical reasoning</p>",
        "id": 190115451,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1583786433
    },
    {
        "content": "<p>Anyway, I guess this exercise is rather difficult in term mode, since it seems you are not allowed to use the lemmas describing the negation of quantifiers.</p>",
        "id": 190115455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786437
    },
    {
        "content": "<p>Classical reasoning yes, but why half quotation marks?</p>",
        "id": 190115493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786460
    },
    {
        "content": "<p>I think I'd be happy calling a quotation mark a quotation mark. Does TPIL refer to one French quotation mark? I'm a bit confused about whether you're talking about ' vs \" or \" vs \"\"</p>",
        "id": 190115884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583786761
    },
    {
        "content": "<p>apostrophe or single quote</p>",
        "id": 190115921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583786763
    },
    {
        "content": "<p>They are sometimes used to quote inside quotations</p>",
        "id": 190115967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583786803
    },
    {
        "content": "<p>TPIL says ‹ is a French quotation mark, but this symbol appears nowhere in France.  We do use  « as an opening quotation mark.</p>",
        "id": 190116004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786843
    },
    {
        "content": "<p>Single quotes are sometimes just normal quotes in the UK, right?</p>",
        "id": 190116042,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583786871
    },
    {
        "content": "<blockquote>\n<p>They are sometimes used to quote inside quotations</p>\n</blockquote>\n<p>I'm so disappointed, I thought python invented this wonderful trick.</p>",
        "id": 190116051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786877
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Quotation_mark#History\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Quotation_mark#History\">Wiki says:</a></p>\n<blockquote>\n<p>The single quotation marks emerged around 1800 as a means of indicating a secondary level of quotation. One could expect that the logic of using the corresponding single mark would be applied everywhere, but it was not. In some languages using the angular quotation marks, the usage of single ones (‹…›) became obsolete, being replaced by double curved ones (“…”); the single ones still survive, for instance, in Switzerland.</p>\n</blockquote>",
        "id": 190116296,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583787036
    },
    {
        "content": "<p>Maybe we should call them Swiss quotes instead.</p>",
        "id": 190116310,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583787044
    },
    {
        "content": "<p>This would be less confusing, especially since French quotation marks are also used in Lean.</p>",
        "id": 190116373,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583787092
    },
    {
        "content": "<p>Given that angle quotation marks are paired, I don't see why there needs to be two different flavors anyway. Nesting FTW</p>",
        "id": 190135690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583804442
    },
    {
        "content": "<p>in Hong Kong written Chinese we use 「」 for the outer quote and 『』 for the inner quote</p>",
        "id": 190135839,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1583804710
    },
    {
        "content": "<p>(in mainland China they use '' and \"\")</p>",
        "id": 190135845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1583804726
    },
    {
        "content": "<p>「」looks like the \"round towards 0\" operation (ceiling if negative, floor if positive)</p>",
        "id": 190136645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583806051
    },
    {
        "content": "<p>I'm getting an error message when I try to use <code>exp_log_eq</code> in term mode below for Chapter 6 Exercise 6.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--6. Give a calculational proof of the theorem log_mul below.</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">real</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">real</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">log_exp_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">exp_log_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">exp_pos</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">exp_add</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- this ensures the assumptions are available in tactic proofs</span>\n<span class=\"n\">include</span> <span class=\"n\">log_exp_eq</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">exp_pos</span> <span class=\"n\">exp_add</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exp_add</span><span class=\"o\">,</span> <span class=\"n\">exp_add</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">log_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n  <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">exp_log_eq</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"c1\">--??????????</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">exp_log_eq</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"c1\">--??????????</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">exp_add</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">log_exp_eq</span>\n</pre></div>\n\n\n<p>I got it to work in tactic mode, but I want to understand what I'm doing wrong. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">log_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">-</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">exp_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">log_exp_eq</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190631151,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1584250405
    },
    {
        "content": "<p><code>by rw exp_log_eq hx</code></p>",
        "id": 190631207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584250520
    },
    {
        "content": "<p><code>by exp_log_eq hx</code> doesn't work because <code>exp_log_eq</code> is not a tactic</p>",
        "id": 190631211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584250538
    },
    {
        "content": "<p>remember that <code>by tac</code> is shorthand for <code>begin tac, end</code></p>",
        "id": 190631255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584250576
    }
]