[
    {
        "content": "<p>I'm trying to show that the hermite polynomials are indeed each polynomials. I have them defined as real functions through their recursive definition, and I'm working on the last lemma in the code below. I'm wondering why <code>rw polynomial.eval_sub</code> is failing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.mean_value</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">x_sub_dx</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">id</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">hermite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.iterate</span> <span class=\"n\">x_sub_dx</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iterate_assoc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">nat.iterate</span> <span class=\"n\">op</span> <span class=\"n\">k.succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">nat.iterate</span> <span class=\"n\">op</span> <span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"bp\">;</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">])</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n                  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">))</span>     <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n                  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span>      <span class=\"o\">:</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hermite_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hermite</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">x_sub_dx</span> <span class=\"o\">(</span><span class=\"n\">hermite</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iterate_assoc</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x_sub_dx_def</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x_sub_dx</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"bp\">*</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x_sub_dx_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">x_sub_dx</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">polynomial_deriv_eval</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">derivative</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- H_n is a polynomial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_polynomial_hermite</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p.eval</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hermite</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">--unfold hermite,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">--unfold hermite,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">X</span><span class=\"bp\">*</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"n\">q.derivative</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hermite_succ</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- intro x,</span>\n    <span class=\"c1\">-- specialize hq x,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">x_sub_dx_def</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">polynomial.eval_sub</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326712737,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1675903435
    },
    {
        "content": "<p>Why don't you just define them directly as polynomials?</p>",
        "id": 326713000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675903619
    },
    {
        "content": "<p>Your theorem that you want to prove just involves redefining the Hermite polynomials as polynomials rather than functions, so you have to do it anyway, so why not make it the definition instead, and if you really want the function then just evaluate the polynomial</p>",
        "id": 326713177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675903721
    },
    {
        "content": "<p>Let me reiterate that polynomials and functions in lean are totally different objects</p>",
        "id": 326713216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675903752
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.derivative</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">hermite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">derivative</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hermite_zero</span> <span class=\"o\">:</span> <span class=\"n\">hermite</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hermite_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hermite</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">hermite</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">hermite</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">derivative</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hermite</span><span class=\"o\">,</span> <span class=\"n\">function.iterate_succ'</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 326726138,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675914589
    },
    {
        "content": "<p>also, your <code>iterate_assoc</code> is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.iterate_succ'\">docs#function.iterate_succ'</a></p>",
        "id": 326727073,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675915249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.2Eeval_sub.20rewrite.20fail/near/326727073\">said</a>:</p>\n<blockquote>\n<p>also, your <code>iterate_assoc</code> is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.iterate_succ'\">docs#function.iterate_succ'</a></p>\n</blockquote>\n<p>Strange that this isn’t in the same file or namespace as <code>nat.iterate</code></p>",
        "id": 326751907,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1675930414
    },
    {
        "content": "<p>Yeah, most lemma names pretend it's called <code>function.iterate</code></p>",
        "id": 326754028,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675931137
    },
    {
        "content": "<p>By the way, if you're feeling fancy, you might replace <code>(λ p, X * p)</code> with <code>linear_map.mul R R[X] X</code> (but it needs another import), which has the advantage of turning the function you are iterating into a linear map (since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.derivative\">docs#polynomial.derivative</a> is).</p>",
        "id": 326813263,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675948927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.2Eeval_sub.20rewrite.20fail/near/326713000\">said</a>:</p>\n<blockquote>\n<p>Why don't you just define them directly as polynomials?</p>\n</blockquote>\n<p>Thanks, I gave it a go and it was much simpler!</p>",
        "id": 326919673,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1675978015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.2Eeval_sub.20rewrite.20fail/near/326727073\">said</a>:</p>\n<blockquote>\n<p>also, your <code>iterate_assoc</code> is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.iterate_succ'\">docs#function.iterate_succ'</a></p>\n</blockquote>\n<p>Ah, ok, thanks. I was suspecting it existed already, but couldn't find it</p>",
        "id": 326919800,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1675978063
    }
]