[
    {
        "content": "<p>I have a structure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span>\n  <span class=\"n\">ord</span> <span class=\"o\">:</span> <span class=\"n\">fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">snd</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Ord</span>\n</code></pre></div>\n<p>and I would like to define an <code>instance {m : Nat} : LinearOrder (Edge m)</code>. How do I tell Lean that it should use the <code>Ord</code> instance that was derived by <code>deriving Ord</code>?</p>\n<p>Or better even, how do I get the linear ordering on <code>Edge</code> automagically?</p>",
        "id": 397059714,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697532647
    },
    {
        "content": "<p>You can build the injection to <code>Prod.lex</code>, and then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrder.lift#doc\">docs#LinearOrder.lift</a></p>",
        "id": 397059991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697532727
    },
    {
        "content": "<p>Will that be reasonably efficient? (We're going to compute with these things a lot.)</p>",
        "id": 397060243,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697532812
    },
    {
        "content": "<p>Looking at the source, it seems so. Thanks, I'll try that.</p>",
        "id": 397061290,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697533119
    },
    {
        "content": "<p>Sorry to be a bother, but is <code>(a, b) = (x, y) -&gt; a = x âˆ§ b = y</code> a one-liner?</p>",
        "id": 397062092,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697533416
    },
    {
        "content": "<p><code>rintro rfl; exact \\&lt;rfl, rfl\\&gt;</code></p>",
        "id": 397062113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697533428
    },
    {
        "content": "<p>probably <code>simp</code> can do it as well</p>",
        "id": 397062215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697533453
    },
    {
        "content": "<p><code>simp</code> does nothing.</p>",
        "id": 397062276,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1697533478
    },
    {
        "content": "<p>after the <code>rintro rfl</code> it should be easy</p>",
        "id": 397062302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697533491
    },
    {
        "content": "<p>oh actually it might need to be <code>rintro \\&lt;\\&gt;</code></p>",
        "id": 397062382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697533517
    },
    {
        "content": "<p>Does <code>intro h, injection h</code> work?</p>",
        "id": 397064051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697534115
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.mk.inj_iff#doc\">docs#Prod.mk.inj_iff</a></p>",
        "id": 397094487,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1697544461
    },
    {
        "content": "<p>So it's the autogenerated (?) Prod.mk.injEq</p>",
        "id": 397094945,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1697544611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 397140867,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697558588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as unresolved.</p>",
        "id": 397140882,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697558593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 397140898,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697558597
    }
]