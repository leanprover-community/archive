[
    {
        "content": "<p>I'm a former mathematician and a professional programmer (very new to Lean), and I'm hoping to make some contributions to mathlib in the way of differential geometry. I notice that there's a nice formalization already of smooth manifolds with corners, tangent bundles, and smooth sections of vector bundles. I'd like to get started formalizing a notion of Riemannian metric so that I can build out more advanced concepts. However, I'm quickly getting stuck on some kind of type inference issue. Why does the following not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.SmoothManifoldWithCorners</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.VectorBundle.SmoothSection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.VectorBundle.Tangent</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Manifold</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">General</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Riemannian</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">SmoothVectorField</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">SmoothSection</span> <span class=\"n\">I</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">TangentBundle</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>There's a message <code>typeclass instance problem is stuck, it is often due to metavariables</code> with the annotation <code>FiberBundle E ?m.70869</code>, but I'm not really understanding how to track down the issue. I'm using VS Code, and if I mouse over <code>?m.70869</code>, I get more expressions involving metavariables, but it's pretty hard to follow where they're coming from and what condition might be unsatisfied. Thanks, all!</p>",
        "id": 376231280,
        "sender_full_name": "Michael Lee",
        "timestamp": 1689659393
    },
    {
        "content": "<p>Doh... of course type coercion failed. After looking closer at the definitions of <code>SmoothSection</code> and <code>TangentBundle</code>, I realized I had to do this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SmoothVectorField</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">SmoothSection</span> <span class=\"n\">I</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 376326695,
        "sender_full_name": "Michael Lee",
        "timestamp": 1689682504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> wrote down a formalization of the Riemannian metric not too long ago, maybe it is closer to mathlib-ready now?</p>",
        "id": 376340384,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1689685190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113489-new-members/topic/Formalizing.20Riemannian.20geometry/near/376340384\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> wrote down a formalization of the Riemannian metric not too long ago, maybe it is closer to mathlib-ready now?</p>\n</blockquote>\n<p>Very exciting! <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, I'd love to see how you've gone about implementing this, if you don't mind sharing. Maybe I could contribute to mathlib diffgeo in the future.</p>",
        "id": 376399545,
        "sender_full_name": "Michael Lee",
        "timestamp": 1689695764
    }
]