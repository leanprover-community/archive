[
    {
        "content": "<p>Hi folks, I'm learning Lean with Advent of Code and quickly falling in love with the language and its documentation :) One thing tripped me up: when I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">digits</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"1\"</span><span class=\"o\">,</span> <span class=\"s2\">\"2\"</span><span class=\"o\">,</span> <span class=\"s2\">\"3\"</span><span class=\"o\">,</span> <span class=\"s2\">\"4\"</span><span class=\"o\">,</span> <span class=\"s2\">\"5\"</span><span class=\"o\">,</span> <span class=\"s2\">\"6\"</span><span class=\"o\">,</span> <span class=\"s2\">\"7\"</span><span class=\"o\">,</span> <span class=\"s2\">\"8\"</span><span class=\"o\">,</span> <span class=\"s2\">\"9\"</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">process</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">digits.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c.toNat</span> <span class=\"bp\">-</span> <span class=\"sc\">'0'</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n  <span class=\"n\">where</span> <span class=\"n\">digits</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">String.toList</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">List.filter</span> <span class=\"n\">Char.isDigit</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">firstAndLast</span>\n</code></pre></div>\n<p>then the global <code>digits</code> shadows the \"local variable\" <code>digits</code> instead of the other way around. That was very unexpected, since usually programming languages prefer definition from inner scopes. Is there a good reason not to do it in the usual way?</p>",
        "id": 408272827,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1702683571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>?</p>",
        "id": 408273173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702683837
    },
    {
        "content": "<p>Interesting, I don't think anyone has tried that before. It is certainly worth a bug report.</p>",
        "id": 408273323,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1702683950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113489-new-members/topic/Global.20definition.20shadowing.20a.20local.20one/near/408273323\">said</a>:</p>\n<blockquote>\n<p>Interesting, I don't think anyone has tried that before. It is certainly worth a bug report.</p>\n</blockquote>\n<p>Cool, I'll just open an issue on GitHub then?</p>",
        "id": 408273490,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1702684067
    },
    {
        "content": "<p>This only happens when using dot notation it seems</p>",
        "id": 408273529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702684086
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">foo.add</span> <span class=\"mi\">1</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span> <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">baz</span> <span class=\"c1\">-- 11</span>\n</code></pre></div>",
        "id": 408273557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702684110
    },
    {
        "content": "<p>Thanks Eric, probably best if I use your simplified example in the bug description. Edit: <a href=\"https://github.com/leanprover/lean4/issues/3079\">https://github.com/leanprover/lean4/issues/3079</a></p>",
        "id": 408273857,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1702684342
    }
]