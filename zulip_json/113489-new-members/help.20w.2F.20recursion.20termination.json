[
    {
        "content": "<p>Hello, I'm new to lean but even newer to Zulip so sorry in advance if this shouldn't be posted here<br>\nI am playing with lean to learn how to prove termination and have this very simple example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Pic</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rect</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pics</span> <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Pic</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">asString</span> <span class=\"o\">:</span> <span class=\"n\">Pic</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pic.rect</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"rect\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pic.pics</span> <span class=\"n\">ps</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">strs</span> <span class=\"o\">:=</span> <span class=\"n\">ps.map</span> <span class=\"n\">asString</span>\n  <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"n\">strs</span>\n  <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"pics({str})\"</span>\n</code></pre></div>\n<p>My asString function fails to show termination. I have read this page on the book: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html\">https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html</a> and feel like I should use WellFounded / Acc, however I also fail to define a \"&lt;\" relation for Pic. Could someone tell me what is the easiest way to satisfy lean with that?</p>",
        "id": 386641543,
        "sender_full_name": "Dapper Mink",
        "timestamp": 1692719646
    },
    {
        "content": "<p>I've noticed messages are often ignored if you don't use your real name. Sorry, this is my google account but my real name is Quentin Januel. I am not a student, I am learning lean with the books and am trying to develop a game to verify my understanding. Also I am not specifically asking for a solution, a redirection towards a resource that explains this would be equally appreciated. It has been two days I am struggling with this problem because I feel like the book doesn't cover this kind of cases (lean is my first proof assistant btw).<br>\nTo me, the problem is that this should be a structural recursion, but it is not probably because of the \"List\" indirection. I think I could maybe avoid this by using a mutual recursion with a custom list implementation, but I would like to stick with the standard list. Also I tried to implement sizeOf or a binary relation for this structure, but I feel like they all also require to show termination. Any help would be greatly appreciated.</p>",
        "id": 386922085,
        "sender_full_name": "Dapper Mink",
        "timestamp": 1692811939
    },
    {
        "content": "<p>Also the book (theorem proving) does not provide any example of \"Acc\" afaik</p>",
        "id": 386922367,
        "sender_full_name": "Dapper Mink",
        "timestamp": 1692812065
    },
    {
        "content": "<p>You're exactly right that I personally tend not to reply to people who are not using their full real name, but your question is completely reasonable as is your explanation of anonymity I guess. Another reason I didn't reply myself was that I didn't know the answer. I don't understand what <code>s!</code> does because I use Lean in a totally different way to the code you're posting, but here's some code which I do understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Pic</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rect</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pics</span> <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Pic</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">asString</span> <span class=\"o\">:</span> <span class=\"n\">Pic</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pic.rect</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pic.pics</span> <span class=\"n\">ps</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">strs</span> <span class=\"o\">:=</span> <span class=\"n\">ps.map</span> <span class=\"n\">asString</span>\n  <span class=\"n\">strs.length</span>\n</code></pre></div>\n<p>and this also doesn't compile; the issue is somehow that <code>ps.map</code> is taking Lean out of its comfort zone when it comes to proving that things are well-defined. We get the usual error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<p>but I don't know how to fix it because I only ever do induction/recursion on naturals. Just bumping this and hoping that my simpler example will encourage someone who is less mean about replying to anonymous users and more CS-ish will help you out :-)</p>",
        "id": 387158501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692909368
    },
    {
        "content": "<p>The problem is that lean doesn't know that <code>ps.map</code> will call its argument only on pictures from <code>ps</code>. But you give it a hint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">asString</span> <span class=\"o\">:</span> <span class=\"n\">Pic</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pic.rect</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"rect\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pic.pics</span> <span class=\"n\">ps</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">strs</span> <span class=\"o\">:=</span> <span class=\"n\">ps.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">asString</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"n\">strs</span>\n  <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"pics({str})\"</span>\n</code></pre></div>\n<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.attach#doc\">docs#List.attach</a> for what it does (and feel free to ask more about it).</p>\n<p>And it seems that some more magic is happening behind the scenes where lean knows that <code>x ∈ xs</code> implies that <code>x</code> is smaller than <code>xs</code>:<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/List/BasicAux.html#List.tacticSizeOf_list_dec\">https://leanprover-community.github.io/mathlib4_docs/Init/Data/List/BasicAux.html#List.tacticSizeOf_list_dec</a></p>",
        "id": 387160088,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692910197
    },
    {
        "content": "<p>I decided to try and answer this question myself but I was totally bewildered by <code>Pic.rec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Pic.rec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive_1</span> <span class=\"o\">:</span> <span class=\"n\">Pic</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive_2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Pic</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rect</span> <span class=\"o\">:</span> <span class=\"n\">motive_1</span> <span class=\"n\">rect</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pics</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Pic</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"n\">ps</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"o\">(</span><span class=\"n\">pics</span> <span class=\"n\">ps</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">motive_2</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">Pic</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Pic</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">head</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"n\">tail</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Pic</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">motive_1</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>Why are there two motives? I understand very little about this kind of an inductive type.</p>",
        "id": 387161035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692910681
    },
    {
        "content": "<p>Is this actually provable? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">asString</span> <span class=\"o\">:</span> <span class=\"n\">Pic</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pic.rect</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"rect\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">Pic.pics</span> <span class=\"n\">ps</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">strs</span> <span class=\"o\">:=</span> <span class=\"n\">ps.map</span> <span class=\"n\">asString</span>\n  <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"n\">strs</span>\n  <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"pics({str})\"</span>\n  <span class=\"n\">decreasing_by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    a✝¹ a✝ : Pic</span>\n<span class=\"cm\">    ⊢ InvImage WellFoundedRelation.rel (fun a ↦ sizeOf a) a✝ a✝¹</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 387162955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692911588
    },
    {
        "content": "<p><code>'induction' tactic does not support nested inductive types, the eliminator 'Pic.rec' has multiple motives</code><br>\n<span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 387163552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692911881
    },
    {
        "content": "<p>I'm having trouble proving it by induction ;-)</p>",
        "id": 387163649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692911911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Thank you for your solution, it indeed works great and reading through the definitions of List.attach, List.pmap and List.forall_mem_cons made made me understand better. Also I was confused because I didn't know std4 was a thing and was wondering why my List.attach function did not exit. Fortunately, this is all sorted out now</p>",
        "id": 387211669,
        "sender_full_name": "Dapper Mink",
        "timestamp": 1692941866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes I'm sorry about that, I will use another google account if I ever get any more questions from now on</p>",
        "id": 387211860,
        "sender_full_name": "Dapper Mink",
        "timestamp": 1692941999
    }
]