[
    {
        "content": "<p>example code: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pop_min</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n    <span class=\"k\">let</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">none</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pop_min_mem</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pop_min</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">pop_min</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">minimum_mem</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pop_min_length</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pop_min</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">rest.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">pop_min_mem</span> <span class=\"n\">h</span>\n\n  <span class=\"n\">unfold</span> <span class=\"n\">pop_min</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_pred_eq_of_pos</span> <span class=\"n\">hl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.selection_sort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- \"unused variable\" warning appears on `h`, but `h` is used!</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">pop_min</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">,</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">selection_sort</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">rest.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">pop_min_length</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 401943273,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699954293
    },
    {
        "content": "<p>possibly related:  <a href=\"#narrow/stream/113489-new-members/topic/Possible.20linter.2EunusedVariables.20bug\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Possible.20linter.2EunusedVariables.20bug</a></p>",
        "id": 401943410,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699954335
    },
    {
        "content": "<p>I am trying to create an MWE and have failed. In the following example, <code>h</code> is not warned as unused.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401975011,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699964550
    },
    {
        "content": "<p>I dont understand the reason of this....</p>",
        "id": 401975236,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699964636
    },
    {
        "content": "<p>I don't know anything about this linter, but just in case you didn't see it, this is a comment from Mario from another recent thread on this linter: <a href=\"#narrow/stream/113489-new-members/topic/Possible.20linter.2EunusedVariables.20bug/near/401865331\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Possible.20linter.2EunusedVariables.20bug/near/401865331</a></p>",
        "id": 402007122,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699974742
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_le_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is a MWE, the issue is that the name is only used in the decreasing by proof so doesnt get registered as used inside the original term</p>",
        "id": 402026046,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699980125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Thank you very much. Are you saying that this is not a bug?</p>",
        "id": 402172675,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700036601
    },
    {
        "content": "<p>I would say this is a bug. I simply tried to minimise it to make it clear what is going on</p>",
        "id": 402234337,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700053638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I see. Have you already reported this bug to the developers?</p>",
        "id": 402875005,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700312766
    },
    {
        "content": "<p>No I didn't. I also didn't check if there is already an issue</p>",
        "id": 402875083,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700312835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I reported this bug.  <a href=\"https://github.com/leanprover/lean4/issues/2873#issuecomment-1817506136\">https://github.com/leanprover/lean4/issues/2873#issuecomment-1817506136</a></p>\n<p>Thank you!</p>",
        "id": 402875543,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700313191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 402875656,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700313277
    }
]