[
    {
        "content": "<p>Hi, so if I have something like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">b</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>why does </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkA</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>not work?</p>",
        "id": 387318065,
        "sender_full_name": "MangoIV",
        "timestamp": 1692985555
    },
    {
        "content": "<p>It might be that <code>mkA</code> isn't in scope. You can either change it to <code>A.mkA</code> or use expected-type-directed dot notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mkA</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>(I didn't test anything here)</p>",
        "id": 387318474,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692985760
    },
    {
        "content": "<p>ah yeah, thank you, this actually did work, now I'm even more confused because now I do not even see the reason why the more complex example might not work :D</p>",
        "id": 387318640,
        "sender_full_name": "MangoIV",
        "timestamp": 1692985838
    },
    {
        "content": "<p>ah lol, it doesn't work if you do a nested match, why is that?</p>",
        "id": 387318957,
        "sender_full_name": "MangoIV",
        "timestamp": 1692985994
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">signature</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inL</span> <span class=\"n\">readerAct</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">readerAct</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">loc</span> <span class=\"n\">f</span> <span class=\"n\">act</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Reader.run</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">handler</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Functor.mapConst</span> <span class=\"n\">act</span> <span class=\"n\">ctx</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ask</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Functor.mapConst</span> <span class=\"n\">r</span> <span class=\"n\">ctx</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inR</span> <span class=\"n\">other</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">signature</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inL</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">loc</span> <span class=\"n\">f</span> <span class=\"n\">act</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Reader.run</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">handler</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Functor.mapConst</span> <span class=\"n\">act</span> <span class=\"n\">ctx</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inL</span> <span class=\"bp\">.</span><span class=\"n\">ask</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Functor.mapConst</span> <span class=\"n\">r</span> <span class=\"n\">ctx</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inR</span> <span class=\"n\">other</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This doesn't</p>",
        "id": 387319092,
        "sender_full_name": "MangoIV",
        "timestamp": 1692986052
    },
    {
        "content": "<p>What does \"doesn't work\" mean?</p>",
        "id": 387319667,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692986346
    },
    {
        "content": "<p>It gives me a type mismatch, it looks like it doesn't recover the type equality from the match but rather tries to match the type with the surrounding <code>inL</code>'s type as though the type variable was bound at the wrong point.</p>",
        "id": 387320113,
        "sender_full_name": "MangoIV",
        "timestamp": 1692986558
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/A1px0c1pZOBqptJDeLKcKFVH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/A1px0c1pZOBqptJDeLKcKFVH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/A1px0c1pZOBqptJDeLKcKFVH/image.png\"></a></div>",
        "id": 387320463,
        "sender_full_name": "MangoIV",
        "timestamp": 1692986760
    },
    {
        "content": "<p>Interesting, the pattern itself isn't type correct. Maybe you have to put rho into it to as an extra discriminant? Like <code>match \\rho, signature with</code>, and then for the patterns you can do <code>| _, .inl .ask =&gt; ...</code> for example (or maybe you have to do <code>| .(_), .inl .ask =&gt; ...</code>, I'm not sure, since you don't actually want to pattern match on rho).</p>",
        "id": 387321697,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692987424
    },
    {
        "content": "<p>I'm not sure why the nested matching works, but I'd hazard that <code>match</code> is detecting that it needs to add rho for you in the inner <code>match</code>.</p>",
        "id": 387322056,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692987564
    },
    {
        "content": "<p>I think in that case I’ll just do the nesting by hand…</p>",
        "id": 387323019,
        "sender_full_name": "MangoIV",
        "timestamp": 1692987869
    },
    {
        "content": "<p>Would you mind trying the experiment with adding rho?</p>",
        "id": 387323113,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692987911
    },
    {
        "content": "<p>I’ll try when I’m back home, sure.</p>",
        "id": 387323289,
        "sender_full_name": "MangoIV",
        "timestamp": 1692987977
    },
    {
        "content": "<blockquote>\n<p>Would you mind trying the experiment with adding rho?</p>\n</blockquote>\n<p>This worked! <br>\n<a href=\"/user_uploads/3121/EMovb6wRJejtCFIPhVGYdo7F/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EMovb6wRJejtCFIPhVGYdo7F/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/EMovb6wRJejtCFIPhVGYdo7F/image.png\"></a></div>",
        "id": 387349326,
        "sender_full_name": "MangoIV",
        "timestamp": 1693001062
    },
    {
        "content": "<p>Thanks for testing it!</p>",
        "id": 387350336,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693001771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586938\">MangoIV</span> has marked this topic as resolved.</p>",
        "id": 387414487,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693047730
    }
]