[
    {
        "content": "<p>Today I started learning Lean for fun. Here's a thing I tried to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">log₂</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Real.logb</span> <span class=\"mi\">2</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- Shannon binary entropy</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log₂</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">log₂</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>First thing I tried was <code>#eval h₂ 0.5</code>, which should give <code>1</code>, but I guess Lean doesn't work that way. So I \"proved\" it...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">log2_div_log2_is1</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">log_ne_zero</span> <span class=\"bp\">?</span><span class=\"n\">_</span>  <span class=\"c1\">-- no idea what this is, found by `apply?`</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">linarith</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_div</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_self</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">log₂</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">log₂</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">logb</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">refine</span> <span class=\"n\">log2_div_log2_is1</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">asdf</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">asdf</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">ring</span>\n</code></pre></div>\n<p>This works, but is incredibly ugly. I'm sure the proofs can be simplified. But even then, isn't there some tactic that can \"just compute this\"? Is there some way I can say \"compute <code>h₂ 0.1234</code> to at least 10 digits\"? I also had trouble proving that <code>0.5 = 1/2</code>, which also seems somehow too trivial to have to think about...</p>",
        "id": 382196823,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691256447
    },
    {
        "content": "<p>\"to at least 10 digits\" is somewhat hard, but for exact computations, the tactic is called <code>norm_num</code></p>",
        "id": 382198887,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691257177
    },
    {
        "content": "<p>But to use it, you'll first need to unfold your own definitions; I don't think it can see through those. And then your guess is as good as mine as to whether it already supports <code>Real.logb</code></p>",
        "id": 382199188,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691257276
    },
    {
        "content": "<p>Thanks a lot for the help! Is there a way to \"automatically unfold my definitions\"? Otherwise, it seems like I should minimize my own definitions at any cost... <br>\nSo there isn't a way to, say \"compute with 64bit floats and get a rigorous (maybe very loose) bound on accuracy\"? I would think that's a nice use-case for a theorem prover. Is there a way to \"plug in 64 bit floats where there used to be reals in the code\"?</p>",
        "id": 382203729,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691258929
    },
    {
        "content": "<p>You can do <code>unfold h₂</code>, or <code>unfold h₂ at h</code> (if <code>h₂</code> occurs somewhere other than the goal) to unwrap your definition. (Note that sometimes, unfolding is not necessary because of definition equalities, but it is usually necessary if you are using <code>rw</code>). It is still often useful to keep your definitions short and concise, for other reasons.</p>",
        "id": 382206155,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691259907
    },
    {
        "content": "<p>I don't think there is a way to use computation on Floats to get bounds for real numbers. There are after all a finite number of Floats and an uncountable number of Reals, and Reals are always exact rather than an approximation. Like mentioned above, <code>norm_num</code> is sort of like a mini-CAS which can be used to simplify expressions.<br>\nThat isn't to say that it wouldn't be useful or possible to get bounds using Floats, but no one has managed to accomplish that yet, and proving properties about the precision of floats is very, very hard.</p>",
        "id": 382206736,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691260142
    },
    {
        "content": "<p>There was a project which might be of interest to you, called <a href=\"https://github.com/lecopivo/SciLean\">Sci Lean</a>. I haven't used it, but I think it might be able to do approximations of Reals using Floats, but not prove that they are correct.</p>",
        "id": 382207102,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691260270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> <a href=\"#narrow/stream/113489-new-members/topic/Trivial.20calculations.20with.20Reals.3F/near/382206736\">said</a>:</p>\n<blockquote>\n<p>proving properties about the precision of floats is very, very hard.</p>\n</blockquote>\n<p>I would think this is only hard \"in general\" and if you want tight bounds. If I'm happy with propagating  some worst-case errors, that shouldn't be so bad? Guess I haven't studied enough numerics.<br>\nAnyway, this means that actually calculating with real numbers isn't (currently) possible in Lean? Is there at least a <code>Float64</code> type? The docs aren't very informative on the matter (empty page at <a href=\"https://leanprover.github.io/lean4/doc/float.html\">https://leanprover.github.io/lean4/doc/float.html</a>) and I can't find it...</p>",
        "id": 382208644,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691260999
    },
    {
        "content": "<p>(Also, you rely on the assumption that your computer's implementation of floats is correct)</p>",
        "id": 382209308,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691261305
    },
    {
        "content": "<p>Floats have somewhat redimentarty support, and it is very hard to prove theorems about them. I think <code>Float</code> is what most languages call <code>double</code>, and there are no 32-bit floats.</p>",
        "id": 382211888,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691262348
    },
    {
        "content": "<p>Thanks. Is there any docs about the Float support? I'm somewhat aghast at the docs page I linked above being empty...</p>",
        "id": 382212004,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691262394
    },
    {
        "content": "<p>Lean is a theorem prover not a computer algebra system, and it's extremely difficult to prove theorems about floats because things like x+y=y+x aren't true.</p>",
        "id": 382212249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691262495
    },
    {
        "content": "<p>People will get to floats in the end, but the biggest lean project right now is its mathematics library which has no use at all for floats, it uses infinite precision reals instead because they're much better for theorems (and much worse for computations)</p>",
        "id": 382212337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691262565
    },
    {
        "content": "<p>Ok, so let's forget proving things. Is there a way to compute <code>h₂ 0.1234</code> in Lean such that I can have reasonable confidence (as I would get from Float64) that it's correct up to 5 digits? Does the C code generation support using native C-Floats?</p>",
        "id": 382212349,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691262572
    },
    {
        "content": "<p>Here are some of the functions on floats, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Float.html#floatSpec\">https://leanprover-community.github.io/mathlib4_docs/Init/Data/Float.html#floatSpec</a></p>",
        "id": 382212374,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691262589
    },
    {
        "content": "<p>But if you read it closely, you will notice that Float is essentially defined as a extra axiom</p>",
        "id": 382212463,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691262618
    },
    {
        "content": "<p>So I think it is not currently possible to reason about floats in any meaningful manner. (Except for something called <code>native_decide</code>)</p>",
        "id": 382212559,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691262671
    },
    {
        "content": "<p>I guess noone does things like this then, but is there an easy way to prove something like <code>exp 14515/1234156 &gt; 1</code>? Or is that a hard problem?</p>",
        "id": 382214079,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691263363
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 382214402,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691263514
    },
    {
        "content": "<p>Assuming now you're talking about reals, we will have a lemma saying x &gt; 0 -&gt; exp x &gt; 1 so that reduces the problem to showing that your rational is positive, which the <code>norm_num</code> tactic will do. So it's a process of both applying theorems and using algorithms.</p>",
        "id": 382214403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691263514
    },
    {
        "content": "<p>If you mean for floats, you can try <code>native_decide</code> but note that native decide adds an additional axiom whose soundness is questionable</p>",
        "id": 382214549,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691263589
    },
    {
        "content": "<blockquote>\n<p>Anyway, this means that actually calculating with real numbers isn't (currently) possible in Lean?</p>\n</blockquote>\n<p>There are essentially two different reasons why Reals are uncomputable. They are defined as Cauchy sequences of rational numbers. In general, there's no way to know whether one Cauchy sequence will coverage to a greater number than the other, so <code>&lt;</code> is undecidable on Reals, among other things.</p>\n<p>Another reason is that the axiom of choice is used extensively in defining functions and values. For example, we can prove via IVT that there is a real number <code>c</code> in <code>[1,2]</code> such that <code>cos c = 0</code>. Then <code>pi</code> is defined as <code>2 * c</code>. This obviously doesn't give any way to compute <code>pi</code></p>",
        "id": 382215131,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691263894
    },
    {
        "content": "<p>Yes, I get that. However, if people cared about it (and I'm not saying they should) it would be possible to have <code>#eval cos Real.pi</code> work. So I'm just finding out which things work and which don't. Thanks for the help!</p>",
        "id": 382215521,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691264072
    },
    {
        "content": "<p>You can maybe try <code>#norm_num cos Real.pi</code>, though I'm not sure if that's been ported to Lean 4 yet</p>",
        "id": 382216717,
        "sender_full_name": "Niels Voss",
        "timestamp": 1691264758
    },
    {
        "content": "<p>Any idea why <code>#norm_num log (exp 4)</code> works but  <code>#norm_num exp (log 4)</code> doesn't? (Let me know if I'm starting to spam/bother people here...)</p>",
        "id": 382217169,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691264993
    },
    {
        "content": "<p>My group is prioritizing real-to-float conversions right now, for scientific computing applications. <span class=\"user-mention\" data-user-id=\"576850\">@John Velkey ⚛️</span> is currently working on this, building off the code by <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> here: <a href=\"https://github.com/verified-optimization/CvxLean/blob/main/CvxLean/Tactic/Solver/Float/RealToFloat.lean\">https://github.com/verified-optimization/CvxLean/blob/main/CvxLean/Tactic/Solver/Float/RealToFloat.lean</a></p>\n<p>Read some more in this thread: <a href=\"#narrow/stream/113488-general/topic/Real.20to.20float.20translation\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Real.20to.20float.20translation</a></p>",
        "id": 382221350,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1691267206
    },
    {
        "content": "<p>In our case, we intend to entirely ignore errors in floating point precision (other people can work on that). We just want to prove that functions over real numbers have certain properties, and then use such functions on floats for computations and IO.</p>",
        "id": 382221679,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1691267369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Trivial.20calculations.20with.20Reals.3F/near/382214403\">said</a>:</p>\n<blockquote>\n<p>Assuming now you're talking about reals, we will have a lemma saying x &gt; 0 -&gt; exp x &gt; 1 so that reduces the problem to showing that your rational is positive, which the <code>norm_num</code> tactic will do. So it's a process of both applying theorems and using algorithms.</p>\n</blockquote>\n<p>But can Lean4 prove <code>333/106 &lt; Pi &lt; 355/113</code> ?</p>",
        "id": 382222710,
        "sender_full_name": "Jz Pan",
        "timestamp": 1691267986
    },
    {
        "content": "<p>I think maybe we can add a typeclass called \"computable real\", which means that there is a computable function which accepts a positive rational number <code>epsilon</code> and outputs two rational numbers <code>a</code> and <code>b</code> such that <code>a&lt;=x&lt;=b</code> and <code>|x-a|&lt;epsilon</code> and <code>|x-b|&lt;epsilon</code>.</p>",
        "id": 382223105,
        "sender_full_name": "Jz Pan",
        "timestamp": 1691268213
    },
    {
        "content": "<p>I mean a computable function, and a proof that this function returns the correct value.</p>",
        "id": 382223239,
        "sender_full_name": "Jz Pan",
        "timestamp": 1691268287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> <a href=\"#narrow/stream/113489-new-members/topic/Trivial.20calculations.20with.20Reals.3F/near/382215131\">said</a>:</p>\n<blockquote>\n<p>Another reason is that the axiom of choice is used extensively in defining functions and values. For example, we can prove via IVT that there is a real number <code>c</code> in <code>[1,2]</code> such that <code>cos c = 0</code>. Then <code>pi</code> is defined as <code>2 * c</code>. This obviously doesn't give any way to compute <code>pi</code></p>\n</blockquote>\n<p>But you can use Newton's method or bisection method, no?</p>",
        "id": 382223463,
        "sender_full_name": "Jz Pan",
        "timestamp": 1691268461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113489-new-members/topic/Trivial.20calculations.20with.20Reals.3F/near/382222710\">said</a>:</p>\n<blockquote>\n<p>But can Lean4 prove <code>333/106 &lt; Pi &lt; 355/113</code> ?</p>\n</blockquote>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.pi_lt_3141593#doc\">docs#Real.pi_lt_3141593</a>.</p>",
        "id": 382223986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691268744
    },
    {
        "content": "<p>The file where this lemma is proven will never cease to grow.</p>",
        "id": 382224479,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691269097
    },
    {
        "content": "<p>Cool. This file essentially proves that pi is a computable real.</p>",
        "id": 382224537,
        "sender_full_name": "Jz Pan",
        "timestamp": 1691269144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Trivial.20calculations.20with.20Reals.3F/near/382214079\">said</a>:</p>\n<blockquote>\n<p>I guess noone does things like this then, but is there an easy way to prove something like <code>exp 14515/1234156 &gt; 1</code>? Or is that a hard problem?</p>\n</blockquote>\n<p>Yes, I believe we do have high precision <code>exp</code> calculations in mathlib, although not via any general tactic</p>",
        "id": 382244033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691281851
    },
    {
        "content": "<p>so you would have to copy the approach used there, most likely to work out the first few terms (until it exceeds 1)</p>",
        "id": 382244142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691281895
    },
    {
        "content": "<p>the denominators grow pretty quickly with this method though so it would be better to have something more approximate</p>",
        "id": 382244284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691281952
    },
    {
        "content": "<p>More generally, the tactic that does \"calculate the first 10 digits of this real expression\" via interval arithmetic is <code>approx</code>, which I wrote in lean 3 and never finished to push to mathlib; I translated it to lean 4 in the Leiden Workshop 3 weeks ago but it turned out to be a bit of an ambitious project for an \"intro to metaprogramming\" project so we did <code>clean</code> instead</p>",
        "id": 382244663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691282109
    },
    {
        "content": "<p>This <code>approx</code> sounds great. Do you think it might be ported e.g. this year? I would also be interested in seeing how powerful it is/will be. (I guess I would also love to help porting it but that's probably too ambitious for my current stage of learning)</p>",
        "id": 382333253,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691320439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Hi, sorry to bother you again. I'm really interested in getting this <code>approx</code> tactic to work. Any clue where I should start? Do I have to port over some lean 3-tactic to lean 4? You  mentioned that you already translated it to lean 4? I'm still only a beginner, so meta-programing a tactic might be a bit ambitious, but I would like to try.</p>",
        "id": 387736209,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1693248482
    },
    {
        "content": "<p>I wrote it in lean 3, and hastily mathported it to lean4 a few months ago: <a href=\"https://gist.github.com/digama0/fd3be96cd82e92535dbb420e86a8b1be\">https://gist.github.com/digama0/fd3be96cd82e92535dbb420e86a8b1be</a></p>",
        "id": 398977448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698446718
    },
    {
        "content": "<p>Thanks for responding <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! <br>\nThis was never in Mathlib3, right? Was it ever seriously used somewhere or was it always a prototype?  Is there any example on how this is intended to be used (using concrete numbers)? </p>\n<p>Finishing the porting (especially without knowing the intended way to use it) is currently beyond my capabilities but I could probably learn a lot by trying.</p>",
        "id": 399187408,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698615871
    }
]