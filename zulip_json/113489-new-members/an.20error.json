[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xt</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span><span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">xt</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>There is an error reporting <code>expected checkColGt</code>, does anyone know why?</p>",
        "id": 379007995,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1690435394
    },
    {
        "content": "<p>No error here</p>",
        "id": 379008734,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690435626
    },
    {
        "content": "<p>These kinds of <code>checkColGt</code> errors indicate that Lean has trouble parsing indentation, but I can't see any error here.</p>",
        "id": 379089202,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690452675
    },
    {
        "content": "<p>I think I got Lean4 installed. Trying \"Mathematics in Lean\" , the first line \"import Mathlib.Data.Nat.Basic\" results in an error: <br>\nc:\\Users\\gumm\\.elan\\toolchains\\leanprover--lean4---nightly-2023-06-20\\bin\\lake.exe print-paths Init Mathlib.Data.Nat.Basic Mathlib.Data.Nat.Parity Mathlib.Tactic` failed:</p>\n<p>stderr:<br>\ninfo: [52/379] Building Std.CodeAction.Attr<br>\n....<br>\nerror: external command <code>c:\\Users\\gumm\\.elan\\toolchains\\leanprover--lean4---nightly-2023-06-20\\bin\\lean.exe</code> exited with code 3221225477</p>\n<p>What to do?</p>",
        "id": 379110271,
        "sender_full_name": "Peter Gumm",
        "timestamp": 1690456111
    },
    {
        "content": "<p>Did you run a <code>lake exe cache get</code> command?</p>",
        "id": 379110424,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690456144
    },
    {
        "content": "<p>Note that you have to stop vscode from running lean before running that command, either by closing vscode, or running <code>pkill lean</code> first.</p>",
        "id": 379110750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690456207
    },
    {
        "content": "<p>I did all commands described in the Manual<br>\nOK I ran the command ...<br>\nOK I killed lean and ran the command again <br>\nNow I get a Windows message <br>\n<a href=\"/user_uploads/3121/7GdcG_FKRXeWp8Cw6E7waHF-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7GdcG_FKRXeWp8Cw6E7waHF-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7GdcG_FKRXeWp8Cw6E7waHF-/image.png\"></a></div>",
        "id": 379111814,
        "sender_full_name": "Peter Gumm",
        "timestamp": 1690456392
    },
    {
        "content": "<p>Try killing lean and running <code>lake exe cache get!</code> instead (the exclamation point forces redownloading existing files). Corrupted caches are weirdly common.</p>",
        "id": 379127675,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1690459154
    },
    {
        "content": "<p>OK, I did it. But that command has been stuck for some minutes now after \"99%\" : <br>\nHere is my command and lake's response:  </p>\n<p>C:\\Users\\gumm\\mathematics_in_lean&gt;lake exe cache get!</p>\n<p>Attempting to download 3538 file(s)<br>\nDownloaded: 3527 file(s) [attempted 3527/3538 = 99%]</p>\n<p>Hm !!??</p>",
        "id": 379130387,
        "sender_full_name": "Peter Gumm",
        "timestamp": 1690459619
    },
    {
        "content": "<p>Yes, that (stalled downloads and cache corruption on less-than-perfect network connections) matches my pre-<code>leantar</code> experience too, unfortunately. Hopefully there will be a mathlib bump soon so <code>leantar</code> can be used in mathematics_in_lean.</p>",
        "id": 379135678,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1690460549
    },
    {
        "content": "<p>If you run <code>gzip -t *.gz</code> inside the cache folder (should be called <code>.mathlib</code> in your home folder or something) then it will tell you which files are corrupted. You can then delete them and run <code>lake exe cache get</code> (without the exclamation point) to re-download the files you deleted.</p>",
        "id": 379136407,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1690460658
    },
    {
        "content": "<p>Assuming you have a working gzip program on windows, at least</p>",
        "id": 379136528,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1690460678
    },
    {
        "content": "<p>Test mathlib bump at <a href=\"https://github.com/leanprover-community/mathematics_in_lean/pull/9\">https://github.com/leanprover-community/mathematics_in_lean/pull/9</a> if you want to see if it helps with your cache corruption problems</p>",
        "id": 379144857,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1690462081
    },
    {
        "content": "<p>(A \"proper\" mathlib bump is at <a href=\"https://github.com/avigad/mathematics_in_lean_source/pull/100\">https://github.com/avigad/mathematics_in_lean_source/pull/100</a>)</p>",
        "id": 379148006,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1690462591
    },
    {
        "content": "<p>sorry, I dont have gzip installed, neither do I know what a \"bump\" is<br>\nI'll try to see whether some other lean tutorial  works on my machine ...</p>",
        "id": 379236265,
        "sender_full_name": "Peter Gumm",
        "timestamp": 1690476744
    },
    {
        "content": "<p>I think I didn't explain myself too well, sorry! What I mean is that I updated mathlib on my fork of the tutorial (<a href=\"https://github.com/collares/mathematics_in_lean\">https://github.com/collares/mathematics_in_lean</a>), and you can clone that if you'd like to test whether <code>lake exe cache get</code> works any better. In the future this update will be in the main tutorial too.</p>",
        "id": 379245460,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1690478524
    },
    {
        "content": "<p>YES ! This worked. Thanks a lot !!</p>",
        "id": 379315150,
        "sender_full_name": "Peter Gumm",
        "timestamp": 1690496922
    }
]