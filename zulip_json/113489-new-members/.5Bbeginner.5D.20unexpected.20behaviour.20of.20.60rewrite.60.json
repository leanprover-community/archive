[
    {
        "content": "<p>Hi, I am attempting the Natural Number Game tutorial, more specifically I was trying to prove this theorem, where I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">some_lemma</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and I have a theorem <code>add_zero</code> that says <code>a + 0 = a</code>. I was trying to replace the second occurrence of a to a + 0. Reading from Lean document, <code>rewrite</code> tactic only rewrite the first matching it encounters. Hence I tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">rewrite</span> <span class=\"bp\">\\</span><span class=\"n\">l</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but the environment shows that both <code>a</code> has been replaced as <code>a + 0</code>.</p>\n<p>Where am I wrong, and how should I fix it?<br>\nThanks :D</p>",
        "id": 248723632,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1628353125
    },
    {
        "content": "<p><del>The rewrite tactic looks for the first <em>pattern</em> that matches and replaces every instance of that pattern.</del></p>\n<p>I wrote that badly. I meant that it looks for the first expression that matches the pattern and then replaces every instance of that expression.</p>",
        "id": 248724160,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1628353950
    },
    {
        "content": "<p>Ah I see :D but how do I get the desired behaviour then? I think in Coq I can specify the position where I want to do rewrite.</p>",
        "id": 248724173,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1628353989
    },
    {
        "content": "<p>There's an <code>nth_rewrite</code> tactic that rewrites only the nth occurrence: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a></p>",
        "id": 248724238,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1628354068
    },
    {
        "content": "<p>Though that won't work for the NNG.</p>",
        "id": 248724259,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1628354111
    },
    {
        "content": "<p>Thanks! I'll look into the link.</p>",
        "id": 248724271,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1628354149
    },
    {
        "content": "<p>Not sure if this is the correct place to ask, but may I ask about the use of parentheses and curly brackets in definitions of lemmas? I see like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">and_or_distrib_left</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">P</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">\\</span><span class=\"n\">or</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">\\</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">succ_inj</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}:</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_left_eq_zero</span><span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>when shall I use (), {} and {{}} (or possibly other brackets)? Thanks again!</p>",
        "id": 248724985,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1628355177
    },
    {
        "content": "<p>My understand is that {} means implicit argument i.e. it can be inferred from other arguments? but then what is {{}}?</p>",
        "id": 248725158,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1628355419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431349\">@leafGecko</span> <code>{{...}}</code> means implicit arguments, but Lean won't eagerly try to solve for them. <a href=\"https://leanprover.github.io/reference/expressions.html#implicit-arguments\">https://leanprover.github.io/reference/expressions.html#implicit-arguments</a></p>\n<p>(My understanding: outermost implicit arguments for terms in an expression get automatically filled in with metavariables.  Outermost <code>{{...}}</code> arguments remain <code>{{..}}</code> arguments.)</p>",
        "id": 248725812,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628356314
    },
    {
        "content": "<p>I think <code>{...}</code> arguments are the closest to Haskell's parametric polymorphism.  In a way, <code>{{...}}</code> arguments are how you make definitions that automatically go against the \"monomorphism restriction\" (i.e., in Haskell, type inference won't preserve polymorphism when setting to a variable -- there are examples where inferring polymorphism gives code with unexpectedly high asymptotic running times, though this does not matter for proofs!).</p>",
        "id": 248726227,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628356884
    },
    {
        "content": "<p>hmm, I may need to learn more theory on that :D btw, is there a way I can apply a (series of) tactic to all subgoals generated from previous tactic, like in Coq?</p>",
        "id": 248726961,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1628357938
    },
    {
        "content": "<p><code>tactic ; other_tactic</code></p>",
        "id": 248727035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628358030
    },
    {
        "content": "<p>note the <code>;</code> instead of <code>,</code></p>",
        "id": 248727039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628358039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431349\">@leafGecko</span> Here's an example for the differences. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">id₁</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">id₂</span> <span class=\"o\">{{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">id₁</span>  <span class=\"c1\">-- error (tries to solve for p but can't)</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id₁</span>  <span class=\"c1\">-- ok (can solve for p)</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">id₂</span>  <span class=\"c1\">-- ok (has the same type as id₂)</span>\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id₂</span>  <span class=\"c1\">-- error (Lean won't even try to fill in {{...}} arguments)</span>\n<span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">id₂</span> <span class=\"n\">h</span> <span class=\"c1\">-- ok (giving id₂ an argument triggers solving for the implicit argument)</span>\n</code></pre></div>",
        "id": 248734488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628368727
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248735523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628370249
    }
]