[
    {
        "content": "<p>I'm trying to learn the category theory formalization in mathlib, and am struggling through the <code>BinaryCofan</code> and <code>WalkingPair</code> constructions. What's the right way to fill in the sorries here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exercise33</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasBinaryCoproduct</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">AddCommGroupCat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">AddMonoidHom.inl</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">AddMonoidHom.inr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n        <span class=\"n\">ext</span> <span class=\"n\">g</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n        <span class=\"n\">ext</span> <span class=\"n\">h</span>\n        <span class=\"n\">simp</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The maths proof here is I think captured by these two lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exercise33'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">AddMonoidHom.coprod</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">AddMonoidHom.inl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidHom.coprod_comp_inl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exercise33''</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">AddMonoidHom.coprod</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">AddMonoidHom.inr</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidHom.coprod_comp_inr</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 386505800,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1692669507
    },
    {
        "content": "<p>the key is to also case split on <code>f</code>.</p>",
        "id": 386507468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692670537
    },
    {
        "content": "<p>BTW, here's how I would go about this (the first two sorries are the other two exercises).</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coproductCocone</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">BinaryCofan</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">AddCommGroupCat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">BinaryCofan.mk</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AddMonoidHom.inl</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AddMonoidHom.inr</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isColimitCoproductCocone</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsColimit</span> <span class=\"o\">(</span><span class=\"n\">coproductCocone</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">BinaryCofan.IsColimit.mk</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddMonoidHom.coprod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exercise33</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasBinaryCoproduct</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">AddCommGroupCat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_colimit</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isColimitCoproductCocone</span> <span class=\"n\">G</span> <span class=\"n\">H</span>\n</code></pre></div>\n</div></div>",
        "id": 386509648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692671590
    },
    {
        "content": "<p>Also, just curious, where are these exercises from?</p>",
        "id": 386509735,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692671633
    },
    {
        "content": "<p>I tried it this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exercise33</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasBinaryCoproduct</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">AddCommGroupCat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">AddMonoidHom.inl</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">AddMonoidHom.inr</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">⟨⟨⟨⟩⟩⟩</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"n\">BinaryCofan.IsColimit.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">T</span> <span class=\"n\">f</span> <span class=\"n\">f'</span>\n      <span class=\"n\">exact</span> <span class=\"n\">AddMonoidHom.coprod</span> <span class=\"n\">f</span> <span class=\"n\">f'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">T</span> <span class=\"n\">f</span> <span class=\"n\">f'</span>\n      <span class=\"n\">exact</span> <span class=\"n\">AddMonoidHom.coprod_comp_inl</span> <span class=\"n\">f</span> <span class=\"n\">f'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">T</span> <span class=\"n\">f</span> <span class=\"n\">f'</span>\n      <span class=\"n\">exact</span> <span class=\"n\">AddMonoidHom.coprod_comp_inr</span> <span class=\"n\">f</span> <span class=\"n\">f'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">T</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">g</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span>\n      <span class=\"gr\">sorry</span> <span class=\"c1\">-- AddMonoidHom.coprod_inl_inr somehow</span>\n</code></pre></div>",
        "id": 386510646,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1692672065
    },
    {
        "content": "<p>I'm glad I worked out to use the <code>IsColimit.mk</code> -- what is tripping me up is that it seems very API-intrusive to resolve some complex </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">BinaryCofan.inl</span>\n      <span class=\"o\">{</span> <span class=\"n\">pt</span> <span class=\"o\">:=</span> <span class=\"n\">AddCommGroupCat.of</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n        <span class=\"n\">ι</span> <span class=\"o\">:=</span>\n          <span class=\"n\">NatTrans.mk</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">↦</span>\n            <span class=\"n\">WalkingPair.rec</span> <span class=\"o\">(</span><span class=\"n\">AddMonoidHom.inl</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">AddCommGroupCat.of</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AddMonoidHom.inr</span> <span class=\"n\">G</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">AddCommGroupCat.of</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n              <span class=\"n\">X.as</span> <span class=\"o\">}</span> <span class=\"bp\">≫</span>\n    <span class=\"n\">AddMonoidHom.coprod</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span>\n  <span class=\"n\">f</span>\n</code></pre></div>\n<p>with just an <code>exact AddMonoidHom.coprod_comp_inl f f'</code>. I understand _why_ it works, I just wish there was some more syntactic-level simplification going on.</p>",
        "id": 386511171,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1692672240
    },
    {
        "content": "<p>I think the issue is that you're applying <code>BinaryCofan.inl</code> to a cocone (the stuff in <code>{...}</code>. Binary cofans are defined as some cocones, but there is a special API for them. So this really mixes two APIs, one of which is essentially an alias for the other in a specific case. I also this this is a consequence of using <code>by constructor ...</code> as opposed to building a binary cofan with <code>BinaryCofan.mk</code>.</p>",
        "id": 386512428,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692672771
    }
]