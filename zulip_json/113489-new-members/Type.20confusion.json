[
    {
        "content": "<p>Hi. I am dealing with rationals numbers and integers at the same time (oh no), and I am getting very lost converting between all the types. This is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nice_lemma</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">↑</span><span class=\"n\">q.denom</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">int.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">rat.coe_int_inj</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rat.num_div_denom</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n        <span class=\"bp\">←</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">int.cast_mul</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">q.denom</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">q.denom</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">rat.denom_div_cast_eq_one_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">int.dvd_of_dvd_mul_right_of_gcd_one</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">coprime.symm</span> <span class=\"n\">q.cop</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rat.denom_ne_zero</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">rat.num_div_denom</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n        <span class=\"bp\">←</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">int.cast_mul</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">q.denom</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">q.denom</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">rat.denom_div_cast_eq_one_iff</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rat.denom_ne_zero</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nice_lemma'</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">q.denom</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have two questions:</p>\n<ol>\n<li>It is clear that the proof of <code>nice_lemma</code> has a block of literal copy and paste, but I cannot seem to get rid of it. I tried <code>rw</code> before <code>split</code> but it only <code>rw</code> once, and I will have to <code>rw</code> twice to get the effect I want. Using <code>simp only</code> runs into self-modifying (?) issues. Can someone provide a better solution, or even an existing lemma that will do the work? I looked for a while but can't find anything.</li>\n<li>How to prove <code>nice_lemma'</code> from <code>nice_lemma</code>? I want to do something like <code>lift n to \\Z</code>, but it failed and I don't know what I am doing.</li>\n</ol>",
        "id": 325416629,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675349183
    },
    {
        "content": "<p>You need an intermediate lemma saying that if <code>(q : ℚ)</code> and <code>(n : ℕ)</code> then <code>(n : ℤ) * q = n * q</code>. This shouldn't be hard (maybe it is <code>rfl</code>). Then you have to convert the assumption <code>n ≠ 0</code> to <code>(n : ℤ) ≠ 0</code>, and this is surely in the library.</p>",
        "id": 325417924,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675349522
    },
    {
        "content": "<p>Thank you! After doing all that then golfing and collapsing everything, I got this :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nice_lemma'</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">q.denom</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">iff.trans</span> <span class=\"o\">(</span><span class=\"n\">nice_lemma</span> <span class=\"o\">(</span><span class=\"n\">cast_ne_zero.2</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">int.coe_nat_dvd</span>\n</code></pre></div>\n<p>One line!</p>",
        "id": 325421876,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675350471
    },
    {
        "content": "<p>That line is too long,  it should be <code>(nice_lemma (cast_ne_zero.2 h)).trans int.coe_nat_dvd</code></p>",
        "id": 325423375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675350798
    },
    {
        "content": "<p>(without <code>by exact</code> which is useless)</p>",
        "id": 325423425,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675350809
    },
    {
        "content": "<p><code>by exact_mod_cast (@nice_lemma _ n $ by exact_mod_cast h)</code> also works</p>",
        "id": 325423675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675350859
    },
    {
        "content": "<p>Oh wow, let me understand them slowly :) Sooo much to learn</p>",
        "id": 325424073,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675350956
    },
    {
        "content": "<p>What is the <code>@</code> doing? I don't understand the error after removing it.</p>",
        "id": 325428545,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675352103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20confusion/near/325428545\">said</a>:</p>\n<blockquote>\n<p>What is the <code>@</code> doing? I don't understand the error after removing it.</p>\n</blockquote>\n<p>It makes all arguments explicit (in this case, <code>q</code> and <code>n</code>).</p>",
        "id": 325434168,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1675353603
    }
]