[
    {
        "content": "<p>I have a goal of the form decide (P) = true =&gt; P.  It seems like this should be a relatively easy thing to prove.  There's probably a tactic that will quickly prove this, but I can't seem to find it?  The Lean 4 manual that I've been looking at seems to have a lot of tactics and example that work well when the fundamental objects are defined inductively, but when I have objects defined by <code>structure</code> a lot of the tactics don't seem to work.   </p>\n<p>In continuation of my previous posts about learning, I defined a simple program that returns true when a graph has a particular edge.   It's a simple enough program, but I wanted to prove that the program was correct.  Hence, the code below:</p>\n<p><a href=\"/user_uploads/3121/eunR4LRFTYccV8bA15ROo3h1/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eunR4LRFTYccV8bA15ROo3h1/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/eunR4LRFTYccV8bA15ROo3h1/image.png\"></a></div><p>I'm not looking for someone to spoil it for me, but to maybe give me insight on what to do when you want to \"unfold\" these decidable equalities and get them into a nicer form to work with.  </p>\n<p>Thanks!</p>\n<p>Edit: For completeness sake, here is all of the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">vertex_to_string</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">v.name</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">×</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">edge_to_string</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>  <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">e.edge.fst.name</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">e.edge.snd.name</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Edge</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SimpleGraph</span> <span class=\"kd\">extends</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">simple_property</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">graph_to_string</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n  <span class=\"k\">fun</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"{Vertices = \"</span> <span class=\"bp\">++</span>\n            <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">(</span><span class=\"n\">G.vertices.map</span> <span class=\"n\">toString</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\" : ¬ Edges = \"</span> <span class=\"bp\">++</span>\n            <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">(</span><span class=\"n\">G.edges.map</span> <span class=\"n\">toString</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\"}\"</span>\n<span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_edge</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">label</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Graph</span><span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span><span class=\"o\">)</span>  <span class=\"k\">then</span>\n  <span class=\"o\">{</span><span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"n\">G.vertices</span><span class=\"o\">,</span>\n   <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"n\">G.edges</span> <span class=\"bp\">++</span> <span class=\"o\">[{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">label</span><span class=\"o\">,</span>\n                          <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"k\">else</span>\n<span class=\"n\">G</span>\n\n<span class=\"c1\">-- Example graph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v_1</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_1\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_2</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_2\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_3</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_3\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_4</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_4\"</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"e_1\"</span><span class=\"o\">,</span>\n  <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v_1</span><span class=\"o\">,</span> <span class=\"n\">v_2</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"e_2\"</span>\n  <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v_2</span><span class=\"o\">,</span> <span class=\"n\">v_3</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">example_graph</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">v_1</span><span class=\"o\">,</span> <span class=\"n\">v_2</span><span class=\"o\">,</span> <span class=\"n\">v_3</span><span class=\"o\">],</span>\n  <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">e_1</span><span class=\"o\">,</span> <span class=\"n\">e_2</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- Programs on Graph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_edge</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span>\n<span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">G.edges</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">e.name</span><span class=\"o\">,</span>\n                       <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_edge_correct</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_edge</span> <span class=\"n\">G</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edges</span> <span class=\"bp\">∧</span> <span class=\"n\">e.edge</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_edge</span>\n</code></pre></div>",
        "id": 358583314,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684190163
    },
    {
        "content": "<p>Have you tried <code>simp</code>?</p>",
        "id": 358585124,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684191071
    },
    {
        "content": "<p>Thanks, I could have sworn I tried that.  I think I tried dsimp and it did nothing.</p>",
        "id": 358585501,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684191243
    },
    {
        "content": "<p>You can try <code>simp?</code> to find out what it did (or <code>show_term {simp}</code>, I think that or some variant works in Lean 4 now).</p>",
        "id": 358586380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684191656
    },
    {
        "content": "<p>Sorry to ask another question, but as I started working through it I came to a goal of the form Exists(e) /\\ e = (u,v).  When I used <code>constructor</code> to break up the conjunction, Lean lost track of the types (as indicated in the comment).  So I tried <code>apply d</code>, <code>obtain &lt;e, eh&gt; := h</code>,  and <code>have d</code> but nothing seems to get me anywhere.  I feel like something is happening when I use <code>constructor</code> on a conjunction with an existential statement.  Any ideas?</p>\n<p><a href=\"/user_uploads/3121/UdJchJTIHVdboQLUAiocK7qo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UdJchJTIHVdboQLUAiocK7qo/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/UdJchJTIHVdboQLUAiocK7qo/image.png\"></a></div>",
        "id": 358588742,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684192830
    },
    {
        "content": "<p>It seems <code>obtain &lt;e, eh&gt; := c</code> got me somewhere but after the constructor was used things got really messy with the types.</p>",
        "id": 358589082,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684193006
    },
    {
        "content": "<p>I think that <code>constructor</code> is probably too primitive.  I think that <code>split</code> should be better for splitting an <code>and</code>.</p>",
        "id": 358589172,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684193050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20proving.20Goal.2C/near/358589172\">said</a>:</p>\n<blockquote>\n<p>I think that <code>constructor</code> is probably too primitive.  I think that <code>split</code> should be better for splitting an <code>and</code>.</p>\n</blockquote>\n<p>I may be mistaken on the syntax, but split seems to fail.  The tool tip says it should be used with nested implications and match statements.  Maybe that's why it fails?</p>",
        "id": 358589439,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684193270
    },
    {
        "content": "<p>Without being able to play with your proof it is hard to say...</p>",
        "id": 358589525,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684193314
    },
    {
        "content": "<p>Here's the code so far.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">vertex_to_string</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">v.name</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"bp\">×</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">edge_to_string</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>  <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">e.edge.fst.name</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">e.edge.snd.name</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Edge</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SimpleGraph</span> <span class=\"kd\">extends</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">simple_property</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">graph_to_string</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n  <span class=\"k\">fun</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"{Vertices = \"</span> <span class=\"bp\">++</span>\n            <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">(</span><span class=\"n\">G.vertices.map</span> <span class=\"n\">toString</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\" : ¬ Edges = \"</span> <span class=\"bp\">++</span>\n            <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">(</span><span class=\"n\">G.edges.map</span> <span class=\"n\">toString</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\"}\"</span>\n<span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_edge</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">label</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Graph</span><span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span><span class=\"o\">)</span>  <span class=\"k\">then</span>\n  <span class=\"o\">{</span><span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"n\">G.vertices</span><span class=\"o\">,</span>\n   <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"n\">G.edges</span> <span class=\"bp\">++</span> <span class=\"o\">[{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">label</span><span class=\"o\">,</span>\n                          <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"k\">else</span>\n<span class=\"n\">G</span>\n\n<span class=\"c1\">-- Example graph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v_1</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_1\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_2</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_2\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_3</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_3\"</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">v_4</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"v_4\"</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"e_1\"</span><span class=\"o\">,</span>\n  <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v_1</span><span class=\"o\">,</span> <span class=\"n\">v_2</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"e_2\"</span>\n  <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v_2</span><span class=\"o\">,</span> <span class=\"n\">v_3</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">example_graph</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">v_1</span><span class=\"o\">,</span> <span class=\"n\">v_2</span><span class=\"o\">,</span> <span class=\"n\">v_3</span><span class=\"o\">],</span>\n  <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">e_1</span><span class=\"o\">,</span> <span class=\"n\">e_2</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- Programs on Graph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_edge</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span>\n<span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">G.edges</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">e.name</span><span class=\"o\">,</span>\n                       <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_edge_correct</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_edge</span> <span class=\"n\">G</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edges</span> <span class=\"bp\">∧</span> <span class=\"n\">e.edge</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_edge</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">apply</span> <span class=\"n\">a</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">apply</span> <span class=\"n\">b</span>\n  <span class=\"n\">constructor</span> <span class=\"c1\">-- ?mp.right.right.w ∈ G.edges ∧ ?mp.right.right.w.edge = (u, v)</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hh</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">c</span>\n  <span class=\"n\">constructor</span>\n</code></pre></div>",
        "id": 358589702,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684193428
    },
    {
        "content": "<p>Do you also have <code>(kernel) declaration has metavariables 'has_edge_correct'</code>?</p>",
        "id": 358589814,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684193517
    },
    {
        "content": "<p>This is the first issue that Lean points out with your code.</p>",
        "id": 358589870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684193533
    },
    {
        "content": "<p>In any case, after <code>apply b</code>, you should probably <code>use c</code>, to let Lean know what is your edge.</p>",
        "id": 358589949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684193610
    },
    {
        "content": "<p>This is how I would do the first part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_edge_correct</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vertex</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_edge</span> <span class=\"n\">G</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">G.vertices</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edges</span> <span class=\"bp\">∧</span> <span class=\"n\">e.edge</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">.</span> <span class=\"n\">unfold</span> <span class=\"n\">has_edge</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">hu</span> <span class=\"n\">hv</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hh</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hh</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">.</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 358590148,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684193755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20proving.20Goal.2C/near/358589814\">said</a>:</p>\n<blockquote>\n<p>Do you also have <code>(kernel) declaration has metavariables 'has_edge_correct'</code>?</p>\n</blockquote>\n<p>I don't think so.  I don't see where Lean is pointing that out either but <code>use c</code> got me somewhere.  I didn't see <code>use</code> in the manual I'm reading either.</p>",
        "id": 358590200,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684193768
    },
    {
        "content": "<p>Ah, that looks nice.  I'll give that a shot.</p>",
        "id": 358590230,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684193790
    },
    {
        "content": "<p>To give you some code feedback: when you use <code>constructor</code> you kind of are saying \"I have no idea what to do, so let's start breaking things apart\".  This means that you may be lucky and Lean will do exactly what you want, but this is hit or miss.  Instead, there are more specific tactics that will help when you are aware of the tactics and of the structure.  I realize that I did not make much use of tactics in my proof above: let me make if more verbose.</p>",
        "id": 358590413,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684193939
    },
    {
        "content": "<p>Yeah, currently at my disposal I only have the Natural Number game under my belt.  Hence, my tactics library is weak.</p>",
        "id": 358590581,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194058
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">.</span> <span class=\"n\">unfold</span> <span class=\"n\">has_edge</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intros</span> <span class=\"n\">hu</span> <span class=\"n\">hv</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hh</span>\n    <span class=\"n\">use</span> <span class=\"n\">hu</span>\n    <span class=\"n\">use</span> <span class=\"n\">hv</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span>\n    <span class=\"n\">use</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hh</span>\n</code></pre></div>",
        "id": 358590596,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684194064
    },
    {
        "content": "<p>Also, Lean seems to complain when I try to initialize a particular case with the \\dot.  It gives me a message saying that Lean is expecting a token.</p>",
        "id": 358590753,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194179
    },
    {
        "content": "<p>I used a simple period <code>.</code>: does this solve the issue?</p>",
        "id": 358590933,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684194298
    },
    {
        "content": "<p>Actually the period is marked and I'm given the message \"unsolved goals\", but I guess I can ignore this and it will work itself out at the end?</p>",
        "id": 358591085,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194378
    },
    {
        "content": "<p>Yes, this is Lean telling you that you have not yet solved that goal.</p>",
        "id": 358591103,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684194396
    },
    {
        "content": "<p>The first <code>refine</code> splits the iff into two goals.  The code that I sent proves the first implication, the other is not proven yet.</p>",
        "id": 358591136,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684194429
    },
    {
        "content": "<p>Ah yes, I see it working now.  Thanks for the great information, but why would I favor refine over constructor?  They seemed to both do what I wanted them to do.</p>",
        "id": 358591219,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194484
    },
    {
        "content": "<p>Also, the ?_ notation is slightly esoteric and makes me nervous that I'm making a mistake from a user perspective</p>",
        "id": 358591285,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194536
    },
    {
        "content": "<p>I'm familiar with using _ as a hole, but the question mark has me confused.</p>",
        "id": 358591358,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194601
    },
    {
        "content": "<p><code>refine</code> gives you more control: in this specific case, they act the same, but <code>refine</code> is a really flexible tactic.</p>",
        "id": 358591463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684194655
    },
    {
        "content": "<p>If I found refine in a tactics list and tried refine &lt;_, _&gt;, it wouldn't have worked and I would have moved on to a different approach.</p>",
        "id": 358591465,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194656
    },
    {
        "content": "<p><code>?_</code> means that you want Lean to convert that part of the term into its own separate goal.<br>\n<code>_</code> tells Lean to provide that part of the term itself.</p>",
        "id": 358591534,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684194715
    },
    {
        "content": "<p>Ahhh, thanks.  I get it now.</p>",
        "id": 358591598,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194737
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#refine\">Lean 3 tactics</a> are a good starting point to learn about tactics.</p>",
        "id": 358591659,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684194801
    },
    {
        "content": "<p>Ah yes, this looks like a much more complete list.  I have been avoiding Lean 3 documentation simply because I kept having issues with discrepancies between keywords in Lean 4.</p>",
        "id": 358591845,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194928
    },
    {
        "content": "<p>Given that most of the documentation and tutorials are for Lean 3, it is hard to learn Lean 4 without already knowing also a lot of Lean 3.</p>",
        "id": 358591852,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684194936
    },
    {
        "content": "<p>Good to know, at least now I know where to go to figure it out.  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 358591914,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684194965
    },
    {
        "content": "<p>I still think that adjusting for differences between Lean 3 and Lean 4 is probably easier than not finding information about Lean 4.</p>",
        "id": 358591920,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684194977
    },
    {
        "content": "<p>I definitely see what you're saying.</p>",
        "id": 358591943,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684195014
    },
    {
        "content": "<p>For instance, in Lean 3, there was no difference between <code>?_</code> and <code>_</code>: they both meant essentially \"create a new goal (well, not exactly, but close)\".</p>",
        "id": 358591974,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684195042
    },
    {
        "content": "<p>Sorry, <code>?_</code> was non-existing notation, the other <code>_</code> existed and meant \"produce a goal\".</p>",
        "id": 358591999,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684195073
    },
    {
        "content": "<p>Hey, sorry to ask a silly question but I'm wondering what is going on with <code>simpa using hh</code>.  I feel like I understand what's going on but the micro steps inbetween are a bit fuzzy.  I see that hh contains the information that we need to show that the edge is (u,v) but the steps of extracting that information from hh are a bit fuzzy.  </p>\n<p>The description of simpa says that it uses some rules to simplify the type of hh and then simplifies the goal with hh.  I guess this is the strange part to me because I feel like the proof should be \"extracting\" the field <code>edge := (u,v)</code> from hh and substituting it into the goal and closing it out with reflexivity.  I don't see why there's any need to simplify types, or how it's going about doing that.</p>",
        "id": 358593596,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684196056
    },
    {
        "content": "<p><code>simpa using hh</code> is more or less doing <code>simp at hh; simp; exact hh</code></p>",
        "id": 358593722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684196127
    },
    {
        "content": "<p>Thanks!  That's what I needed to see.</p>",
        "id": 358593829,
        "sender_full_name": "Jonathan Whitehead",
        "timestamp": 1684196174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"472585\">Jonathan Whitehead</span> has marked this topic as resolved.</p>",
        "id": 358594239,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684196387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Help.20proving.20Goal.2C/near/358591974\">said</a>:</p>\n<blockquote>\n<p>For instance, in Lean 3, there was no difference between <code>?_</code> and <code>_</code>: they both meant essentially \"create a new goal (well, not exactly, but close)\".</p>\n</blockquote>\n<p>Okay, and now thanks to this discussion I finally know why I couldn't make <code>refine</code> work in Lean4 !</p>",
        "id": 358623236,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1684213819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Help.20proving.20Goal.2C/near/358589172\">said</a>:</p>\n<blockquote>\n<p>I think that <code>constructor</code> is probably too primitive.  I think that <code>split</code> should be better for splitting an <code>and</code>.</p>\n</blockquote>\n<p>For the record, you're confused with Lean 3 tactics, Damiano. Lean 3's <code>constructor</code> and <code>split</code> correspond to Lean 4's <code>constructor</code>. Lean 3's <code>split_ifs</code> corresponds to Lean 4's <code>split</code>.</p>",
        "id": 358643850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684222069
    },
    {
        "content": "<p>These pairs of tactics aren't perfectly matching in functionality, but for most purposes you can consider them equivalent.</p>",
        "id": 358644136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684222160
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>  thanks for the correction, Yaël!</p>",
        "id": 358645625,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684222639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Help.20proving.20Goal.2C/near/358623236\">said</a>:</p>\n<blockquote>\n<p>Okay, and now thanks to this discussion I finally know why I couldn't make <code>refine</code> work in Lean4 !</p>\n</blockquote>\n<p>I wonder if we should add some small pointers to the Lean 3 tactics page, highlighting differences with Lean 4.</p>",
        "id": 358645885,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684222713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> is curating a list of such changes</p>",
        "id": 358650133,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684223994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Help.20proving.20Goal.2C/near/358650133\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> is curating a list of such changes</p>\n</blockquote>\n<p>Table of rough replacements for tactics from Lean 3 in Lean 4:<br>\n<a href=\"https://github.com/madvorak/lean3-tactic-lean4\">https://github.com/madvorak/lean3-tactic-lean4</a></p>\n<p>Lean 4 cheatsheet:<br>\n<a href=\"https://github.com/madvorak/lean4-cheatsheet\">https://github.com/madvorak/lean4-cheatsheet</a></p>",
        "id": 358652161,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1684224599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> With a simple substitution, you can add links for the mathlib4 docs to your file, something like what is below.  I did not actually test all the links, though...</p>\n<table>\n<thead>\n<tr>\n<th>Lean 3</th>\n<th>Lean 4</th>\n<th>requires</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>all_goals</td>\n<td>all_goals</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>any_goals</td>\n<td>any_goals</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>apply</td>\n<td>apply</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>assumption</td>\n<td>assumption</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>by_cases</td>\n<td>by_cases</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>by_contradiction</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/ByContra.html\">by_contra</a></td>\n<td>import Mathlib.Tactic.ByContra</td>\n</tr>\n<tr>\n<td>cases</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Cases.html\">cases'</a></td>\n<td>import Mathlib.Tactic.Cases</td>\n</tr>\n<tr>\n<td>congr</td>\n<td>congr</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>contradiction</td>\n<td>contradiction</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>contrapose</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Contrapose.html\">contrapose</a></td>\n<td>import Mathlib.Tactic.Contrapose</td>\n</tr>\n<tr>\n<td>convert</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Convert.html\">convert</a></td>\n<td>import Mathlib.Tactic.Convert</td>\n</tr>\n<tr>\n<td>convert_to</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Convert.html\">convert_to</a></td>\n<td>import Mathlib.Tactic.Convert</td>\n</tr>\n<tr>\n<td>exact</td>\n<td>exact</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>exfalso</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/Basic.html\">exfalso</a></td>\n<td>import Std.Tactic.Basic</td>\n</tr>\n<tr>\n<td>field_simp</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/FieldSimp.html\">field_simp</a></td>\n<td>import Mathlib.Tactic.FieldSimp</td>\n</tr>\n<tr>\n<td>finish</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>have</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Have.html\">have</a></td>\n<td>import Mathlib.Tactic.Have</td>\n</tr>\n<tr>\n<td>hint</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>induction</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Cases.html\">induction'</a></td>\n<td>import Mathlib.Tactic.Cases</td>\n</tr>\n<tr>\n<td>intro</td>\n<td>intro</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>intros</td>\n<td>intro</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>iterate</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/Basic.html\">iterate</a></td>\n<td>import Std.Tactic.Basic</td>\n</tr>\n<tr>\n<td>left</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/LeftRight.html\">left</a></td>\n<td>import Mathlib.Tactic.LeftRight</td>\n</tr>\n<tr>\n<td>library_search</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/LibrarySearch.html\">library_search</a></td>\n<td>import Mathlib.Tactic.LibrarySearch</td>\n</tr>\n<tr>\n<td>linarith</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Linarith.html\">linarith</a></td>\n<td>import Mathlib.Tactic.Linarith</td>\n</tr>\n<tr>\n<td>push_neg</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/PushNeg.html\">push_neg</a></td>\n<td>import Mathlib.Tactic.PushNeg</td>\n</tr>\n<tr>\n<td>rcases</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/RCases.html\">rcases</a></td>\n<td>import Std.Tactic.RCases</td>\n</tr>\n<tr>\n<td>refl</td>\n<td>rfl</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>repeat</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/Basic.html\">repeat'</a></td>\n<td>import Std.Tactic.Basic</td>\n</tr>\n<tr>\n<td>right</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/LeftRight.html\">right</a></td>\n<td>import Mathlib.Tactic.LeftRight</td>\n</tr>\n<tr>\n<td>ring</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Ring.html\">ring</a></td>\n<td>import Mathlib.Tactic.Ring</td>\n</tr>\n<tr>\n<td>rintro</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/RCases.html\">rintro</a></td>\n<td>import Std.Tactic.RCases</td>\n</tr>\n<tr>\n<td>rw</td>\n<td>rw</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>simp</td>\n<td>simp</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>sorry</td>\n<td>sorry</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>specialize</td>\n<td>specialize</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>split</td>\n<td>constructor</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>split_ifs</td>\n<td>split</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>squeeze_simp</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/SimpTrace.html\">simp?</a></td>\n<td>import Std.Tactic.SimpTrace</td>\n</tr>\n<tr>\n<td>suggest</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/LibrarySearch.html\">library_search</a></td>\n<td>import Mathlib.Tactic.LibrarySearch</td>\n</tr>\n<tr>\n<td>swap</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/PermuteGoals.html\">swap</a></td>\n<td>import Mathlib.Tactic.PermuteGoals</td>\n</tr>\n<tr>\n<td>symmetry</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Relation/Symm.html\">symm</a></td>\n<td>import Mathlib.Tactic.Relation.Symm</td>\n</tr>\n<tr>\n<td>tauto</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Tauto.html\">tauto</a></td>\n<td>import Mathlib.Tactic.Tauto</td>\n</tr>\n<tr>\n<td>try</td>\n<td>try</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>unfold</td>\n<td>unfold</td>\n<td>[core]</td>\n</tr>\n<tr>\n<td>use</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Use.html\">use</a></td>\n<td>import Mathlib.Tactic.Use</td>\n</tr>\n</tbody>\n</table>",
        "id": 358661872,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684227312
    },
    {
        "content": "<p>Can you please PR it? I will then test all the links.</p>",
        "id": 358663183,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1684227650
    },
    {
        "content": "<p>Sure!  I will PR the md file and also the script to obtain it from the earlier form.</p>",
        "id": 358699347,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684236593
    },
    {
        "content": "<p>(Sorry, it is a hectic day and I am going to disappear and reappear at random times! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> )</p>",
        "id": 358699494,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684236624
    },
    {
        "content": "<p>PS: There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html\">https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html</a><br>\nPPS: <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> will include the docs for the core tactics as well.</p>",
        "id": 358750372,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1684247265
    }
]