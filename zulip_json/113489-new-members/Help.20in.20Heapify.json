[
    {
        "content": "<p>Hello, I am trying to implement recursive heapification of an array in lean, but I am unable to perform the recursion. Could you please help me with correcting and improving my code? </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"nn\">data.list</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">convert_to_nat</span> <span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"p\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span>  <span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">value</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n  <span class=\"n\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">heapify</span> <span class=\"p\">(</span><span class=\"n\">arr</span> <span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"n\">ℕ</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"p\">:</span> <span class=\"n\">ℕ</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">let</span> <span class=\"n\">largest</span> <span class=\"p\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"p\">,</span>\n      <span class=\"n\">l</span> <span class=\"p\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"n\">r</span> <span class=\"p\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n      <span class=\"n\">leftval</span><span class=\"o\">:=</span> <span class=\"n\">convert_to_nat</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">nth</span> <span class=\"n\">l</span><span class=\"p\">),</span>\n      <span class=\"n\">rightval</span><span class=\"o\">:=</span> <span class=\"n\">convert_to_nat</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">nth</span> <span class=\"n\">r</span><span class=\"p\">),</span>\n      <span class=\"n\">maxval</span><span class=\"o\">:=</span> <span class=\"n\">convert_to_nat</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">nth</span> <span class=\"n\">largest</span><span class=\"p\">),</span>\n      <span class=\"nb\">len</span><span class=\"o\">:=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">length</span>\n  <span class=\"ow\">in</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">)</span> <span class=\"err\">∧</span> <span class=\"p\">(</span><span class=\"n\">leftval</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxval</span><span class=\"p\">)</span> <span class=\"n\">then</span>\n    <span class=\"n\">let</span> <span class=\"n\">largest</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"p\">,</span>\n        <span class=\"n\">nmax</span> <span class=\"o\">:=</span> <span class=\"n\">convert_to_nat</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">nth</span> <span class=\"n\">largest</span><span class=\"p\">)</span>\n      <span class=\"ow\">in</span>\n      <span class=\"k\">if</span> <span class=\"n\">largest</span> <span class=\"err\">≠</span> <span class=\"n\">i</span> <span class=\"n\">then</span>\n        <span class=\"n\">let</span> <span class=\"n\">list2</span> <span class=\"o\">:=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">update_nth</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">nmax</span><span class=\"p\">),</span>\n            <span class=\"n\">list3</span> <span class=\"o\">:=</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"n\">update_nth</span> <span class=\"n\">largest</span> <span class=\"p\">(</span><span class=\"n\">maxval</span><span class=\"p\">)</span>\n        <span class=\"ow\">in</span>\n          <span class=\"n\">heapify</span> <span class=\"n\">arr</span> <span class=\"nb\">len</span> <span class=\"n\">largest</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">arr</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">)</span> <span class=\"err\">∧</span> <span class=\"p\">(</span><span class=\"n\">rightval</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxval</span><span class=\"p\">)</span> <span class=\"n\">then</span>\n      <span class=\"n\">let</span> <span class=\"n\">largest</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"p\">,</span>\n        <span class=\"n\">nmax</span> <span class=\"o\">:=</span> <span class=\"n\">convert_to_nat</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">nth</span> <span class=\"n\">largest</span><span class=\"p\">)</span>\n      <span class=\"ow\">in</span>\n      <span class=\"k\">if</span> <span class=\"n\">largest</span> <span class=\"err\">≠</span> <span class=\"n\">i</span> <span class=\"n\">then</span>\n        <span class=\"n\">let</span> <span class=\"n\">list2</span> <span class=\"o\">:=</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">update_nth</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"n\">nmax</span><span class=\"p\">),</span>\n            <span class=\"n\">list3</span> <span class=\"o\">:=</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"n\">update_nth</span> <span class=\"n\">largest</span> <span class=\"p\">(</span><span class=\"n\">maxval</span><span class=\"p\">)</span>\n        <span class=\"ow\">in</span>\n          <span class=\"n\">heapify</span> <span class=\"n\">arr</span> <span class=\"nb\">len</span> <span class=\"n\">largest</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">arr</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">arr</span>\n</code></pre></div>",
        "id": 380651366,
        "sender_full_name": "Debangan Mishra",
        "timestamp": 1690887670
    },
    {
        "content": "<p>Is this Lean 3? Do you have any reason not to upgrade to Lean 4? Lean 3 and mathlib3 are now retired.</p>",
        "id": 380819545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690918806
    }
]