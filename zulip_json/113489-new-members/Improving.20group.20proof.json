[
    {
        "content": "<p>I managed to show group homomorphisms send 1 to 1, and shortened this proof from what I originally had.  I'm sure that this does not abide by \"best practices\", so I'm wondering what a \"better\" proof of this might look like.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Deprecated.Subgroup</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">redux_two</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">have</span> <span class=\"n\">one_eff</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congrArg</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>  <span class=\"bp\">*</span> <span class=\"bp\">·</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_eff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 361188531,
        "sender_full_name": "Kristaps Balodis",
        "timestamp": 1685060876
    },
    {
        "content": "<p>Right after posting the above, I figured out I could shorten it further to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">redux_three</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congrArg</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>  <span class=\"bp\">*</span> <span class=\"bp\">·</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I still suspect there's a better way to do this that's more in line with the community standards</p>",
        "id": 361188985,
        "sender_full_name": "Kristaps Balodis",
        "timestamp": 1685061186
    },
    {
        "content": "<p>Does <code>by simpa using hom 1 1</code> not work?</p>",
        "id": 361200089,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1685066299
    },
    {
        "content": "<p>It did, thanks.</p>",
        "id": 361222263,
        "sender_full_name": "Kristaps Balodis",
        "timestamp": 1685080398
    }
]