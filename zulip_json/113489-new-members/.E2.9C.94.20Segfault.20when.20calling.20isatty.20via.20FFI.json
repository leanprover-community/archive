[
    {
        "content": "<p>I wanted to check if my lean binary was being run from a terminal or being piped into (e.g. <code>echo hello | my-binary</code>), I wasn't sure how to do it so I tried calling the POSIX function <code>isatty</code>, but it seems no matter what I do I get a segfault if my lean binary calls code that calls <code>isatty</code>.</p>\n<p>Here's how I first tried it:</p>\n<ol>\n<li><code>lake init thing</code></li>\n<li>Main.lean:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"isatty\"]</span> <span class=\"n\">opaque</span> <span class=\"n\">istty</span> <span class=\"o\">:</span> <span class=\"n\">Int16</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">Int16</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">istty</span> <span class=\"mi\">1</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>\n<ol start=\"3\">\n<li><code>lake build</code></li>\n<li>run the binary and get <code>Segmentation fault (core dumped)</code></li>\n</ol>\n<p>I then tried statically linking like in <a href=\"https://github.com/leanprover/lake/blob/master/examples/ffi/lib/lakefile.lean\">https://github.com/leanprover/lake/blob/master/examples/ffi/lib/lakefile.lean</a>, here's the repo: <a href=\"https://github.com/dariof4/test\">https://github.com/dariof4/test</a>, but it still segfaults :(<br>\nIs there something I'm doing wrong? And is there a better way to check if a binary is being run from a terminal and not being piped into?</p>",
        "id": 373291940,
        "sender_full_name": "dariof4",
        "timestamp": 1688752811
    },
    {
        "content": "<p><code>lean_isatty</code> returns <code>uint16_t</code>, while Lean expects <code>IO UInt16</code> which is <code>lean_object*</code> (or <code>lean_obj_res</code>) in FFI.<br>\nUse <code>lean_io_result_mk_ok(lean_box(isatty(fileno(stdin))))</code>.</p>",
        "id": 373308678,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1688757273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587706\">Daniil Kisel</span> <a href=\"#narrow/stream/113489-new-members/topic/Segfault.20when.20calling.20isatty.20via.20FFI/near/373308678\">said</a>:</p>\n<blockquote>\n<p><code>lean_isatty</code> returns <code>uint16_t</code>, while Lean expects <code>IO UInt16</code> which is <code>lean_object*</code> (or <code>lean_obj_res</code>) in FFI.<br>\nUse <code>lean_io_result_mk_ok(lean_box(isatty(fileno(stdin))))</code>.</p>\n</blockquote>\n<p>This works perfectly, thank you very much!</p>",
        "id": 373309462,
        "sender_full_name": "dariof4",
        "timestamp": 1688757539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630721\">dariof4</span> has marked this topic as resolved.</p>",
        "id": 373309488,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688757545
    }
]