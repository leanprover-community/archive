[
    {
        "content": "<p>Reading <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/indexing.html\">the textbook on non-empty lists:</a>, I type in the example code which is about checking for array out of bounds.  The code, which typechecks, crashes the Lean server:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idahoSpiders</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Banded Garden Spider\"</span><span class=\"o\">,</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n    <span class=\"s2\">\"Long-legged Sac Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Wolf Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Hobo Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Cat-faced Spider\"</span>\n  <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NonEmptyList.get</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">xs.head</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.tail.get</span><span class=\"bp\">?</span> <span class=\"n\">n</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">NonEmptyList.inBounds</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">xs.tail.length</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">atLeastThreeSpiders</span> <span class=\"o\">:</span> <span class=\"n\">idahoSpiders.inBounds</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">notSixSpiders</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">idahoSpiders.inBounds</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NonEmptyList.get</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">xs.inBounds</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.head</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.tail</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">idahoSpiders.get</span><span class=\"bp\">?</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">idahoSpiders.get</span><span class=\"bp\">?</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">GetElem1</span> <span class=\"o\">(</span><span class=\"n\">coll</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">item</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inBounds</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">coll</span> <span class=\"bp\">→</span> <span class=\"n\">idx</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">coll</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">inBounds</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">item</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span> <span class=\"n\">NonEmptyList.inBounds</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"o\">:=</span> <span class=\"n\">NonEmptyList.get</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">succ</span> <span class=\"o\">::</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.plus</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n.plus</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pos.plus</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addNatPos</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pos.plus</span> <span class=\"o\">(</span><span class=\"n\">Pos.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Pos</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAdd</span> <span class=\"o\">:=</span> <span class=\"n\">addNatPos</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pos.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pos.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Pos</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">list</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">list.length</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n.toNat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"n\">ok</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i.toNat</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">idahoSpiders</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"c1\">-- \"Server process for file:///home/catskills/mathlib4/test/hw_lists.lean crashed, likely due to a stack overflow or a bug.\"</span>\n</code></pre></div>",
        "id": 376325082,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1689682157
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2252\">lean4#2252</a></p>",
        "id": 376326380,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1689682440
    }
]