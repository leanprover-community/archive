[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Ray</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.ENorm</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)[</span><span class=\"n\">SMul</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">one_smul</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">x'</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>Does anyone know why the error occurs: <code>tactic 'rewrite' failed, equality or iff proof expected\n  ?m.1339</code></p>",
        "id": 387032069,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692870059
    },
    {
        "content": "<p>I get two errors, the other one being:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Monoid</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>This means Lean can't assign a type to <code>one_smul (b := x')</code>, which then causes the error in <code>rw</code>. If you fix the \"failed to synthesize instance\" error, the <code>rw</code> error should also go away.</p>",
        "id": 387037342,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1692871838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Smul/near/387037342\">said</a>:</p>\n<blockquote>\n<p>I get two errors, the other one being:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Monoid</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>This means Lean can't assign a type to <code>one_smul (b := x')</code>, which then causes the error in <code>rw</code>. If you fix the \"failed to synthesize instance\" error, the <code>rw</code> error should also go away.</p>\n</blockquote>\n<p>Should I modify the definition of <code>E</code>? If so, how should I modify it?</p>",
        "id": 387037846,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692872001
    },
    {
        "content": "<p>Here's how I got it to work, with comments explaining what I changed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"c1\">-- To make 𝕜 explicit, put it on a separate line. Otherwise Lean defines a new 𝕜</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"c1\">-- Upgrade SMul 𝕜 E to MulAction 𝕜 E</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">one_smul</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">x'</span><span class=\"o\">)]</span> <span class=\"c1\">-- Pass 𝕜 explicitly</span>\n</code></pre></div>",
        "id": 387037934,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1692872016
    },
    {
        "content": "<p>I must say that I find the meaning of <code>variable (𝕜)</code> depending on the remainder of the <code>variable</code> line quite unintuitive, and the error reported by <code>rw</code> should be made clearer.</p>",
        "id": 387038234,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1692872123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Smul/near/387037934\">said</a>:</p>\n<blockquote>\n<p>Here's how I got it to work, with comments explaining what I changed.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"c1\">-- To make 𝕜 explicit, put it on a separate line. Otherwise Lean defines a new 𝕜</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"c1\">-- Upgrade SMul 𝕜 E to MulAction 𝕜 E</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">one_smul</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">x'</span><span class=\"o\">)]</span> <span class=\"c1\">-- Pass 𝕜 explicitly</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you. In fact, this example is a part of a large proof. It is strange that I still can’t write this way in that relatively large proof. I wonder if it is because the E is not good enough?</p>",
        "id": 387040527,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692872891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span> <a href=\"#narrow/stream/113489-new-members/topic/Smul/near/387040527\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Smul/near/387037934\">said</a>:</p>\n<blockquote>\n<p>Here's how I got it to work, with comments explaining what I changed.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"c1\">-- To make 𝕜 explicit, put it on a separate line. Otherwise Lean defines a new 𝕜</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"c1\">-- Upgrade SMul 𝕜 E to MulAction 𝕜 E</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">one_smul</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">x'</span><span class=\"o\">)]</span> <span class=\"c1\">-- Pass 𝕜 explicitly</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you. In fact, this example is a part of a large proof. It is strange that I still can’t write this way in that relatively large proof. I wonder if it is because the E is not good enough?</p>\n</blockquote>\n<p>In that proof its error is:<code> failed to synthesize instance\n   Mul Action 𝕜 E</code></p>",
        "id": 387040873,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692873006
    },
    {
        "content": "<p>Do I understand correctly in your larger proof that the expression <code>(1 : 𝕜) • (x' : E)</code> does not give an error, but <code>one_smul 𝕜 (b := x')</code> does? That is caused because you have only a <code>SMul 𝕜 E</code> instance available but need <code>MulAction 𝕜 E</code>.</p>",
        "id": 387041588,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1692873249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Smul/near/387041588\">said</a>:</p>\n<blockquote>\n<p>Do I understand correctly in your larger proof that the expression <code>(1 : 𝕜) • (x' : E)</code> does not give an error, but <code>one_smul 𝕜 (b := x')</code> does? That is caused because you have only a <code>SMul 𝕜 E</code> instance available but need <code>MulAction 𝕜 E</code>.</p>\n</blockquote>\n<p>In fact that part of the proof is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"gr\">sorry</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">l4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">l2</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">l3</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">l4</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>In this part <code>x':E</code> is not clearly written, but it is correct. As for why <code>rw[one_smul 𝕜 (b := x')]</code> can't work, I don't quite understand</p>",
        "id": 387042352,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692873532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"631681\">@tsuki  hao</span>, unfortunately it's impossible to debug your issues without more context. If you can't paste a complete <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for whatever reason, can you at least paste the goal view at the point where the lemma fails to apply?</p>",
        "id": 387042903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692873738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Smul/near/387042903\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span>, unfortunately it's impossible to debug your issues without more context. If you can't paste a complete <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for whatever reason, can you at least paste the goal view at the point where the lemma fails to apply?</p>\n</blockquote>\n<p>The whole proof involves a lot of definitions and lemmas. What I need to prove now is the above c1. As for the error, I have already given it above.</p>",
        "id": 387045724,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692874743
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> does not have to be short. A lot of definitions and lemmas are fine. Sorry long proofs and post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . You are posting code which we can't run and this makes it much much harder to diagnose your problems (and it also wastes people's time because they come up with incorrect conjectures about what the problem is, explain how to solve it, and then it turns out that it's all irrelevant).</p>",
        "id": 387046739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692875123
    },
    {
        "content": "<p>These codes look like this after simplification. My doubts are the last two sorry. What I need to remind is that after I changed the proof of aux1 to sorry, there seems to be an error in hf, but you have completely proved that the error is not correct after playing aux1. does not exist. But the proof of aux1 is too long and I can't paste it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Ray</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.ENorm</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">properfun</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dom</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span><span class=\"o\">}</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sublevel</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epigraph</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">EReal</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">EReal</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span> <span class=\"bp\">≤</span> <span class=\"n\">p.2</span><span class=\"o\">}</span>\n<span class=\"c1\">-- {p : E × β | p.1 ∈ s ∧ f p.1 ≤ p.2}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SequentialSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SequentialSpace</span> <span class=\"n\">EReal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SequentialSpace</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderTopology</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">FirstCountableTopology</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FirstCountableTopology</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">closedfunc</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">epigraph</span> <span class=\"n\">s</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">liminf</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">IsClosed</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Closeds</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"bp\">𝕜</span> <span class=\"n\">EReal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux12</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux23</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux31</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux31'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">r</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isSeqClosed_iff_isClosed</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"n\">xns</span> <span class=\"n\">cx</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">epigraph</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"n\">IsClosed.isSeqClosed</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xns</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tendsto.prod_mk_nhds</span> <span class=\"n\">cx</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mem_setOf.mpr</span> <span class=\"o\">(</span><span class=\"n\">mem_setOf.mp</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq12</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux12</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux31</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">aux23</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq23</span> <span class=\"o\">:</span> <span class=\"n\">lo_semicontinuous</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux23</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux12</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">aux31</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq31</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">),</span> <span class=\"n\">IsClosed</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">):=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux31</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux23</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">aux12</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span>\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">IsClosed</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Metric</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">ProperSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">properfun</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"o\">):</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"bp\">∧</span> <span class=\"n\">Bounded</span> <span class=\"o\">(</span><span class=\"n\">sublevel</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"bp\">∧</span> <span class=\"n\">IsCompact</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Bounded</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"bp\">∧</span> <span class=\"n\">IsCompact</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Convex</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">strong_quasi</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs''</span> <span class=\"o\">:</span> <span class=\"n\">Convex</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">properfun</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">closedfunc</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf''</span> <span class=\"o\">:</span> <span class=\"n\">strong_quasi</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exist_uniqueness</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"bp\">∧</span> <span class=\"n\">IsCompact</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">aux1</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">hf'</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Bounded.mono</span> <span class=\"o\">(</span><span class=\"n\">inter_subset_right</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">⊤</span><span class=\"o\">}</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IsCompact.bounded</span> <span class=\"n\">hs'</span><span class=\"o\">)</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this.1</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">xs'</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x'</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.eq_singleton_iff_nonempty_unique_mem</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">this.1</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">xs</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">xneq</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">xneq</span>\n    <span class=\"k\">have</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">max_eq_right</span> <span class=\"o\">(</span><span class=\"n\">xs.2</span> <span class=\"n\">x'</span> <span class=\"n\">xs'</span><span class=\"o\">)</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">lea</span> <span class=\"n\">leb</span> <span class=\"n\">ab</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Eq.trans_gt</span> <span class=\"n\">eq</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hf''</span> <span class=\"n\">xs.1</span> <span class=\"n\">xs'</span> <span class=\"n\">xneq</span> <span class=\"n\">lea</span> <span class=\"n\">leb</span> <span class=\"n\">ab</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">m1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">):=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Eq.ge</span> <span class=\"n\">rfl</span>\n      <span class=\"k\">have</span> <span class=\"n\">m2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"k\">have</span> <span class=\"n\">m3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">zero_add</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"n\">m1</span> <span class=\"n\">m2</span> <span class=\"n\">m3</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"gr\">sorry</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">l4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">l2</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">l3</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">l4</span><span class=\"o\">]</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">c1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h2</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">l1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h3</span> <span class=\"n\">rfl</span>\n\n  <span class=\"n\">use</span> <span class=\"n\">x'</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">xs'</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">xns</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hx'</span> <span class=\"n\">x</span> <span class=\"n\">xns.1</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">hlt</span> <span class=\"bp\">|</span> <span class=\"n\">heq</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hlt</span>\n    <span class=\"n\">exfalso</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xns.2</span> <span class=\"o\">(</span><span class=\"n\">Eq.subset</span> <span class=\"n\">uniq</span> <span class=\"o\">⟨</span><span class=\"n\">xns.1</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.trans_le</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"n\">heq</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx'</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"o\">)⟩)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span><span class=\"o\">}</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hxs</span>\n  <span class=\"n\">exfalso</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">xs'</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">setOf_eq_eq_singleton</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxs</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">ne_comm</span> <span class=\"n\">hxs</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"o\">(</span><span class=\"n\">hx'</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">x'</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 387049844,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692876238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span> has marked this topic as resolved.</p>",
        "id": 387077855,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692884605
    },
    {
        "content": "<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scratch37.lean</span><span class=\"o\">:</span><span class=\"mi\">131</span><span class=\"o\">:</span><span class=\"mi\">19</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">aux1</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">hf</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">properfun</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Metric.Bounded</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>in the proof of <code>exist_uniqueness</code></p>",
        "id": 387079189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692884944
    }
]