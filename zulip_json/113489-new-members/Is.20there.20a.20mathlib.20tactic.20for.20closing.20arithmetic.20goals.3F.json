[
    {
        "content": "<p>I have lots of goals like the following <code>forall (i j k : Nat), i * j = i * (j - k) + k * i</code>. I thought maybe <code>norm_num</code> would do it, but it seems to have no effect.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">H</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>The goal is the same after <code>norm_num</code> as it is before.<br>\nThe <code>ring</code> tactic does change the goal a bit, but not in any especially helpful way as far as I can tell.</p>\n<p>Hopefully I'm not missing something obvious. Thank you.</p>",
        "id": 385001161,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1692075368
    },
    {
        "content": "<p>I guess that example actually isn't true, since k &gt; j means j - k &lt; 0, which can't happen in Nats.</p>",
        "id": 385001752,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1692075707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"629627\">Alexander Lucas</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20a.20mathlib.20tactic.20for.20closing.20arithmetic.20goals.3F/near/385001752\">said</a>:</p>\n<blockquote>\n<p>I guess that example actually isn't true, since k &gt; j means j - k &lt; 0, which can't happen in Nats.</p>\n</blockquote>\n<p>Subtraction <code>a - b</code> on natural numbers is defined as zero if <code>b &gt; a</code>, so your claim is false. You want to use integers and then <code>ring</code> should prove your claim</p>",
        "id": 385002986,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1692076292
    },
    {
        "content": "<p>Thank you, yeah. Is it possible to do induction on integers though? Pick a base case n and induct for m &gt; n?<br>\nAlso, incidentally, what _is_ <code>norm_num</code> for? If you don't mind.</p>",
        "id": 385003823,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1692076643
    },
    {
        "content": "<p><code>norm_num</code> is for calculations with explicit numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 385004203,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1692076792
    },
    {
        "content": "<p>I see. Thanks.</p>",
        "id": 385004382,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1692076857
    },
    {
        "content": "<p>(by calculation I mean normalizing)</p>",
        "id": 385004485,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1692076889
    },
    {
        "content": "<p>The induction tactic works with integers, but then you have to prove your statement for the natural numbers and then for n-1 assuming n. In the natural number case you can do induction again and together with some artifical inserting of zeros you can shift the base case to any integer n.</p>",
        "id": 385005445,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1692077320
    },
    {
        "content": "<p>But I have no idea whether there is something out of the box for that</p>",
        "id": 385005488,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1692077336
    },
    {
        "content": "<p>without the shifting there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.induction_on#doc\">docs#Int.induction_on</a></p>",
        "id": 385005721,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1692077427
    },
    {
        "content": "<p>I appreciate it mate. I'll try to make that work.</p>",
        "id": 385006331,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1692077690
    },
    {
        "content": "<p>By looking in the file you pointed me to, I found the tactic <code>Int.le_induction</code>, which seems to do what I need. Here's an example using it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">postage_ℤ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">H</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Int.le_induction</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">_</span>\n    <span class=\"n\">exists</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n    <span class=\"k\">match</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">k'</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Classical.byCases</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h₃</span> <span class=\"n\">_</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">j'</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">1</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">]</span>\n        <span class=\"n\">ring</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">j'</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span>\n        <span class=\"n\">ring</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">exact</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 385030373,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1692085449
    },
    {
        "content": "<p>The ring tactic works better in the integers then over the natural numbers when substraction is involved.  Since in general (j - k) is not a natural number. Try the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"k\">#eval</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"mi\">9</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">9</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">H</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 385291272,
        "sender_full_name": "Maarten Derickx",
        "timestamp": 1692136666
    },
    {
        "content": "<p>Thanks. I ended up coming to the same conclusion. I do have another related question. Say I have some arithmetic expression of naturals with a subexpression <code>(j - k)</code>. Say I also have some <code>H : k &lt;= j</code>. Since, under this assumption <code>H</code>, <code>j - k</code> <em>is</em> generally a natural number, is there a way to convey that fact to ring, directly or indirectly, such that the goal can still be closed without a bunch of manual rewriting?</p>",
        "id": 385292182,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1692137134
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#zify\">tactic#zify</a></p>",
        "id": 385292208,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692137149
    },
    {
        "content": "<p>Well damn, that was quick. Thanks!</p>",
        "id": 385292310,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1692137192
    },
    {
        "content": "<p>This isn't exactly what you asked for, but <code>zify [H], ring</code> is what I would do in that situation <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 385292320,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692137203
    }
]