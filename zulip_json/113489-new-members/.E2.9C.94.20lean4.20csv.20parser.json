[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/README.md\">https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/README.md</a></p>\n<p>In the csv parser example the following snippet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">escaped</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dQUOTE</span> <span class=\"bp\">*&gt;</span>\n  <span class=\"n\">manyChars</span> <span class=\"o\">(</span><span class=\"n\">textData</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">COMMA</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">CR</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">LF</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">«</span><span class=\"n\">twoDQuote</span><span class=\"bp\">»</span><span class=\"o\">)</span>\n  <span class=\"bp\">&lt;*</span> <span class=\"n\">dQUOTE</span>\n</code></pre></div>\n<p>what does <code>&lt;&lt;twoDQuote&gt;&gt;</code> mean?</p>",
        "id": 407986506,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702568144
    },
    {
        "content": "<p><code>twoDQuote</code> is the parser defined in above in <a href=\"https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/README.md#the-combinator\">https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/README.md#the-combinator</a> the double &lt;&lt; are french quotes, which is a way of escaping a name that lean has trouble with, it shouldn't be needed here, but I guess whoever wrote the same at one point called it <code>2DQuote</code> to match the spec, which is not a great name as it starts with a numeral</p>",
        "id": 408001100,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702572251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/lean4.20csv.20parser/near/408001100\">said</a>:</p>\n<blockquote>\n<p><code>twoDQuote</code> is the parser defined in above in <a href=\"https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/README.md#the-combinator\">https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/README.md#the-combinator</a> the double &lt;&lt; are french quotes, which is a way of escaping a name that lean has trouble with, it shouldn't be needed here, but I guess whoever wrote the same at one point called it <code>2DQuote</code> to match the spec, which is not a great name as it starts with a numeral</p>\n</blockquote>\n<p>Thanks I was confused about <code>&lt;&lt;</code> french quotes and what it meant sematically</p>",
        "id": 408016556,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702577339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar 🦀 (he/him)</span> has marked this topic as resolved.</p>",
        "id": 408017033,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702577522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar 🦀 (he/him)</span> has marked this topic as unresolved.</p>",
        "id": 408234587,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702664128
    },
    {
        "content": "<p>I had another question in the same csv parser tutorial, where is <code>crlf</code> defined?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"bp\">$</span> <span class=\"n\">Array</span> <span class=\"n\">Record</span> <span class=\"o\">:=</span>\n  <span class=\"n\">manySep</span> <span class=\"n\">record</span> <span class=\"o\">(</span><span class=\"n\">crlf</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">notFollowedBy</span> <span class=\"n\">eof</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"n\">crlf</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">eof</span>\n</code></pre></div>",
        "id": 408234756,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702664187
    },
    {
        "content": "<p>Can you get this code working in lean? If so you should be able to right click it and go to definition to see</p>",
        "id": 408245887,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702669195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/lean4.20csv.20parser/near/408245887\">said</a>:</p>\n<blockquote>\n<p>Can you get this code working in lean? If so you should be able to right click it and go to definition to see</p>\n</blockquote>\n<p>I am not able to get this code working, the following the complete snippet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Parsec</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parsec</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">csvString</span> <span class=\"o\">:=</span> <span class=\"s2\">\"a, </span><span class=\"se\">\\\"</span><span class=\"s2\">b</span><span class=\"se\">\\n</span><span class=\"s2\">c</span><span class=\"se\">\\\"</span><span class=\"err\">\\</span><span class=\"s2\">r</span><span class=\"se\">\\n</span><span class=\"s2\">1,2\"</span>\n\n  <span class=\"c1\">-- csv file</span>\n  <span class=\"c1\">-- 1, 2, 3</span>\n  <span class=\"c1\">-- a, b, c</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Field</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Record</span> <span class=\"o\">:=</span> <span class=\"n\">Array</span> <span class=\"n\">Field</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Csv</span> <span class=\"o\">:=</span> <span class=\"n\">Array</span> <span class=\"n\">Record</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dQUOTE</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"n\">pchar</span> <span class=\"sc\">'\"'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comma</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"n\">pchar</span> <span class=\"sc\">','</span>\n<span class=\"kd\">def</span> <span class=\"n\">cr</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"n\">pchar</span> <span class=\"sc\">'→'</span>\n<span class=\"kd\">def</span> <span class=\"n\">lf</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"n\">pchar</span> <span class=\"sc\">'¬'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">textData</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"n\">satisfy</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"mi\">0x20</span> <span class=\"bp\">≤</span> <span class=\"n\">c.val</span> <span class=\"bp\">∧</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">0x21</span> <span class=\"bp\">∨</span>\n  <span class=\"mi\">0x23</span> <span class=\"bp\">≤</span> <span class=\"n\">c.val</span> <span class=\"bp\">∧</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">0x2B</span> <span class=\"bp\">∨</span>\n  <span class=\"mi\">0x2D</span> <span class=\"bp\">≤</span> <span class=\"n\">c.val</span> <span class=\"bp\">∧</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">0x7E</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">twoDQuote</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"n\">attempt</span> <span class=\"o\">(</span><span class=\"n\">pchar</span> <span class=\"sc\">'\"'</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pchar</span> <span class=\"sc\">'\"'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">escaped</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dQUOTE</span> <span class=\"bp\">*&gt;</span>\n  <span class=\"n\">manyChars</span> <span class=\"o\">(</span><span class=\"n\">textData</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">comma</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">cr</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">lf</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">twoDQuote</span><span class=\"o\">)</span>\n  <span class=\"bp\">&lt;*</span> <span class=\"n\">dQUOTE</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nonEscaped</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">manyChars</span> <span class=\"n\">textData</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">field</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Field</span> <span class=\"o\">:=</span> <span class=\"n\">escaped</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">nonEscaped</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">manyChars</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">manyCharsCore</span> <span class=\"n\">p</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">many1Chars</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">manyCharsCore</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"bp\">$</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">manyCore</span> <span class=\"n\">p</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">many1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"bp\">$</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">manyCore</span> <span class=\"n\">p</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">manySep</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"bp\">$</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">manyCore</span> <span class=\"o\">(</span><span class=\"n\">attempt</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"c1\">-- record = field *(COMMA field)</span>\n<span class=\"kd\">def</span> <span class=\"n\">record</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Record</span> <span class=\"o\">:=</span> <span class=\"n\">manySep</span> <span class=\"n\">field</span> <span class=\"n\">comma</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"bp\">$</span> <span class=\"n\">Array</span> <span class=\"n\">Record</span> <span class=\"o\">:=</span>\n  <span class=\"n\">manySep</span> <span class=\"n\">record</span> <span class=\"o\">(</span><span class=\"n\">crlf</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">notFollowedBy</span> <span class=\"n\">eof</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"n\">crlf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 408340729,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702730373
    },
    {
        "content": "<p>crlf isn't defined anywhere in Lean or Parsec and the tutorial isn't defining crlf except in a pseudocode way :</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">file</span><span class=\"w\">        </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span>header<span class=\"w\"> </span>CRLF<span class=\"o\">]</span><span class=\"w\"> </span>record<span class=\"w\"> </span>*<span class=\"o\">(</span>CRLF<span class=\"w\"> </span>record<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>CRLF<span class=\"o\">]</span>\n<span class=\"nv\">header</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span>name<span class=\"w\"> </span>*<span class=\"o\">(</span>COMMA<span class=\"w\"> </span>name<span class=\"o\">)</span>\n<span class=\"nv\">record</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span>field<span class=\"w\"> </span>*<span class=\"o\">(</span>COMMA<span class=\"w\"> </span>field<span class=\"o\">)</span>\n<span class=\"nv\">name</span><span class=\"w\">        </span><span class=\"o\">=</span><span class=\"w\"> </span>field\n<span class=\"nv\">field</span><span class=\"w\">       </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>escaped<span class=\"w\"> </span>/<span class=\"w\"> </span>non-escaped<span class=\"o\">)</span>\n<span class=\"nv\">escaped</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span>DQUOTE<span class=\"w\"> </span>*<span class=\"o\">(</span>TEXTDATA<span class=\"w\"> </span>/<span class=\"w\"> </span>COMMA<span class=\"w\"> </span>/<span class=\"w\"> </span>CR<span class=\"w\"> </span>/<span class=\"w\"> </span>LF<span class=\"w\"> </span>/<span class=\"w\"> </span>2DQUOTE<span class=\"o\">)</span><span class=\"w\"> </span>DQUOTE\nnon-escaped<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>*TEXTDATA\n<span class=\"nv\">COMMA</span><span class=\"w\">       </span><span class=\"o\">=</span><span class=\"w\"> </span>%x2C\n<span class=\"nv\">CR</span><span class=\"w\">          </span><span class=\"o\">=</span><span class=\"w\"> </span>%x0D\n<span class=\"nv\">DQUOTE</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span>%x22\n<span class=\"nv\">LF</span><span class=\"w\">          </span><span class=\"o\">=</span><span class=\"w\"> </span>%x0A\n<span class=\"nv\">CRLF</span><span class=\"w\">        </span><span class=\"o\">=</span><span class=\"w\"> </span>CR<span class=\"w\"> </span>LF\n<span class=\"nv\">TEXTDATA</span><span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span>%x20-21<span class=\"w\"> </span>/<span class=\"w\"> </span>%x23-2B<span class=\"w\"> </span>/<span class=\"w\"> </span>%x2D-7E\n</code></pre></div>",
        "id": 408340853,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702730464
    },
    {
        "content": "<p>There's an accompanying source file: <a href=\"https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/CSVParser.lean\">https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/CSVParser.lean</a></p>",
        "id": 408341326,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702730860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/lean4.20csv.20parser/near/408341326\">said</a>:</p>\n<blockquote>\n<p>There's an accompanying source file: <a href=\"https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/CSVParser.lean\">https://github.com/leanprover-community/lean4-samples/blob/main/CSVParser/CSVParser.lean</a></p>\n</blockquote>\n<p>Sorry I never thought of doing the obvious, thanks for the pointer</p>",
        "id": 408341381,
        "sender_full_name": "Shubham Kumar 🦀 (he/him)",
        "timestamp": 1702730889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar 🦀 (he/him)</span> has marked this topic as resolved.</p>",
        "id": 408350482,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702738136
    }
]