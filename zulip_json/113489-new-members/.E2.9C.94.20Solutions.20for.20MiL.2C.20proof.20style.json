[
    {
        "content": "<p>I am working my way through MiL, trying to be a good little boy and prove the theorems.</p>\n<ol>\n<li>\n<p>Is there a file with the solutions? I am learning by myself and don't have an instructor checking them.</p>\n</li>\n<li>\n<p>I would appreciate it if someone would check my proofs of three theorems from Sec 2.2 p. 11 (below). The proofs are accepted but I don't know if they conform to the expected style and conventions. (I know that I can put multiple tactics in a <code>rw</code> but I prefer not to at this stage.)</p>\n</li>\n<li>\n<p>Even though the proofs are accepted, I get a squiggle under the second <code>by</code> in <code>add_right_cancel</code>. What is Lean trying to tell me?</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_neg_cancel_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_right_neg</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span>  <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_add_cancel_left</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_neg</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 403733952,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1700725741
    },
    {
        "content": "<p>If you go to the squiggle, Lean tells you <code>unsolved goals</code>, so you should work more on that proof.</p>",
        "id": 403734604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700726038
    },
    {
        "content": "<p>With respect to the style, I think that the answer depends on your final goal: if you are trying to learn Lean, then you are the ultimate judge of what you prefer!  In this case, readability and taking steps with which you feel comfortable are probably important measures.</p>\n<p>Mathlib has somewhat strict guidelines for a lot of its style, but that is because it is a highly collaborative project that is massive and interdependent, so cohesion and maintainability are <em>very</em> important goals.</p>",
        "id": 403735003,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700726223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667469\">Moti Ben-Ari</span> <a href=\"#narrow/stream/113489-new-members/topic/Solutions.20for.20MiL.2C.20proof.20style/near/403733952\">said</a>:</p>\n<p>Apologies! I found the solutions in the MiL library.</p>\n<blockquote>\n<ol start=\"3\">\n<li>Even though the proofs are accepted, I get a squiggle under the second <code>by</code> in <code>add_right_cancel</code>. What is Lean trying to tell me?</li>\n</ol>\n</blockquote>\n<p>I would still like an explanation of the squiggle on the <code>by</code>.</p>",
        "id": 403757635,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1700734497
    },
    {
        "content": "<p>It's because your proof is incomplete or wrong. Put <code>done</code> at the end of your proof for more information.</p>",
        "id": 403758608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700734802
    },
    {
        "content": "<p>Note that the LHS has <code>a</code> and <code>b</code>, while the RHS has <code>b</code> and <code>c</code>.</p>",
        "id": 403758929,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700734903
    },
    {
        "content": "<p>Me again <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <br>\nI am trying to prove <code>add_right_cancel</code> by using commutativity twice and then <code>add_left_cancel</code>, but I can't see how to apply <code>add_comm</code> to <code>c+b</code> in <code>a+b=c+b</code>. The following is illegal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>and the following does nothing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>This is not the first time that I have been unable to get Lean to apply a tactic on the second occurrence.</p>",
        "id": 403781264,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1700743296
    },
    {
        "content": "<p>I think that <code>nth_rw</code> is a little buggy and does not consistently do what it should.  The second example that you give, though, does work.  The issue may be the once you commute <code>c</code> and <code>b</code>, you still have not finished your proof: you should tell Lean that your goal is your assumption <code>h</code>.</p>",
        "id": 403782128,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700743616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"667469\">@Moti Ben-Ari</span> I am going to encourage you (like I encourage all my students) to end all your proofs with <code>done</code>. When you incorrectly say things like \"the following does nothing\" it seems that what you really mean is \"I don't know where to look for the result\". End your proof with <code>done</code> and put your cursor just before the <code>d</code> of <code>done</code> to see the current tactic state. If you're not finished there will be an error on <code>done</code> but the tactic state should be up to date information about how far you've got.</p>",
        "id": 403785983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700744960
    },
    {
        "content": "<p>I was trying to isolate the problem there.<br>\nFor the full theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h''</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>I get the goal <code>b+a=b+c</code> as expected but Lean gives an error for <code>add_cancel_left</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thanks for the tip on <code>done</code></p>",
        "id": 403786632,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1700745216
    },
    {
        "content": "<p>I can't debug \"Lean gives an error for <code>add_cencel_left</code>\" because you are making two common beginner errors at once here: (1) not saying what the error message is (just because you may not understand what it means, doesn't mean that it's not a very important piece of information!) and (2) not posting a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (click on the link to find out what that is). I don't even know what <code>R</code> is in your code.</p>",
        "id": 403806796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700752004
    },
    {
        "content": "<p>Sorry, I thought it was sufficient that I just changed one theorem in MIL. Here is a MWE with the four messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">warningAsError</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_add_right_cancel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h''</span>\n  <span class=\"n\">done</span>\n\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  unsolved goals</span>\n\n<span class=\"cm\">  R: Type u_1</span>\n<span class=\"cm\">  inst✝: CommRing R</span>\n<span class=\"cm\">  a✝b✝c✝dabc: R</span>\n<span class=\"cm\">  h: a + b = b + c</span>\n<span class=\"cm\">  ⊢ a + b = b + c</span>\n<span class=\"cm\">  -/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">unsolved goals</span>\n\n<span class=\"cm\">R: Type u_1</span>\n<span class=\"cm\">inst✝: CommRing R</span>\n<span class=\"cm\">a✝b✝c✝dabc: R</span>\n<span class=\"cm\">h: a + b = c + b</span>\n<span class=\"cm\">h': b + a = b + c</span>\n<span class=\"cm\">⊢ b + a = b + c</span>\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  add_left_cancel b</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  b</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  R : Type u_1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ?m.1921 + ?m.1922 = ?m.1921 + ?m.1923 : Prop</span>\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'rewrite' failed, equality or iff proof expected</span>\n<span class=\"cm\">  ?m.41851</span>\n\n<span class=\"cm\">R: Type u_1</span>\n<span class=\"cm\">inst✝: CommRing R</span>\n<span class=\"cm\">a✝b✝c✝dabc: R</span>\n<span class=\"cm\">h: a + b = c + b</span>\n<span class=\"cm\">h': a + b = b + c</span>\n<span class=\"cm\">h'': b + a = b + c</span>\n<span class=\"cm\">⊢ a = c</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 403813364,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1700754428
    },
    {
        "content": "<p>I'm on mobile so unable to run anything :-) I'm just looking at your code on a train.</p>\n<p>So do you understand the first error? It says \"you are in the middle of a proof but just seem to have stopped\". You should finish your proof with <code>exact h</code>, you've done all the hard work. Second error is similar.</p>\n<p>Third error is different, it says that you fed <code>add_left_cancel</code> something called <code>b</code> which is an element of R, but it was expecting a proof that x+y=x+z for some values of x,y,z that it was going to work out itself. So in short you have not got the syntax of the function <code>add_left_cancel</code> correct and should hover over it to understand better what its inputs are.</p>",
        "id": 403814217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700754796
    },
    {
        "content": "<p>Done!<br>\nI don't know why Lean is harder for me to learn compared with other systems, but I'll make progress.<br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks for your patience <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 403831120,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1700761554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667469\">Moti Ben-Ari</span> has marked this topic as resolved.</p>",
        "id": 403831193,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700761566
    }
]