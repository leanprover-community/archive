[
    {
        "content": "<p>why emacs why, i need my vim plugins</p>",
        "id": 271145058,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644334395
    },
    {
        "content": "<p>Did you try the Lean vim plugin?</p>",
        "id": 271145105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644334414
    },
    {
        "content": "<p><a href=\"https://github.com/Julian/lean.nvim/\">https://github.com/Julian/lean.nvim/</a></p>",
        "id": 271145156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644334438
    },
    {
        "content": "<p><a href=\"https://github.com/Julian/lean.nvim\">https://github.com/Julian/lean.nvim</a></p>",
        "id": 271145158,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644334439
    },
    {
        "content": "<p>wait it exists? From what I've read it's emacs or vscode only. The docs need to mention vim at least...</p>",
        "id": 271145289,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644334473
    },
    {
        "content": "<p>thanks guys! I'll try it out!</p>",
        "id": 271145318,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644334486
    },
    {
        "content": "<p>Last time I tried it wasn't really usable.</p>",
        "id": 271145339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644334496
    },
    {
        "content": "<p>uhhhh <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 271145392,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644334519
    },
    {
        "content": "<p>yeah, I did notice this when reading the general Linux instructions <a href=\"https://leanprover-community.github.io/install/linux.html\">https://leanprover-community.github.io/install/linux.html</a>. I'll submit a PR in a bit fixing this</p>",
        "id": 271145439,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644334542
    },
    {
        "content": "<p>I'm not a <del>Lean</del> <em>vim!</em> user but I've heard good things about it recently, <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> is in charge of it</p>",
        "id": 271145536,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644334570
    },
    {
        "content": "<p>I think part of the issue is they are most focused on Lean 4.</p>",
        "id": 271146136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644334822
    },
    {
        "content": "<p>Last time I tried it was crashing so often that I gave up</p>",
        "id": 271146168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644334833
    },
    {
        "content": "<p>I've found it quite reliable recently, different to vscode for sure but probably worth trying again and reporting any crashes</p>",
        "id": 271146263,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644334877
    },
    {
        "content": "<p>I have had little complaints with <code>lean.nvim</code> since October, apart from some irregular crashing and slightly wonky UTF-16 handling (which might have been fixed by now, I should really update...)</p>",
        "id": 271146976,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644335176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/271146168\">said</a>:</p>\n<blockquote>\n<p>Last time I tried it was crashing so often that I gave up</p>\n</blockquote>\n<p>Patrick is this still the case? If so please say so when that happens</p>",
        "id": 271147101,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644335245
    },
    {
        "content": "<p>I wouldn't say we (if there's a we) are more focused on Lean 4 -- I want both to work equally well until Lean 4 is what everyone uses. Lean 4 has new LSP functionality so there's some cool things that only work on Lean 4, but I personally use it with Lean 3</p>",
        "id": 271147243,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644335297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/271146976\">said</a>:</p>\n<blockquote>\n<p>I have had little complaints with <code>lean.nvim</code> since October, apart from some irregular crashing and slightly wonky UTF-16 handling (which might have been fixed by now, I should really update...)</p>\n</blockquote>\n<p>Yes this is fixed (it was partially a neovim bug actually, not a lean.nvim one, so update both)</p>",
        "id": 271147309,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644335329
    },
    {
        "content": "<p>I'll try to find time to try again.</p>",
        "id": 271147367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644335355
    },
    {
        "content": "<p>But yes please no one keep complaints to yourself :)? We are likely more than happy to fix them but we can't fix what we don't know.</p>",
        "id": 271147374,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644335358
    },
    {
        "content": "<p>Last time it was so unstable that I thought everybody would see it.</p>",
        "id": 271147557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644335428
    },
    {
        "content": "<p>The only crash related thing I'm aware of is this issue: <a href=\"https://github.com/Julian/lean.nvim/issues/203\">https://github.com/Julian/lean.nvim/issues/203</a> which I believed was macOS only -- if that's what you're running into the crashes would indeed be suuuuuuper annoying. So if it's that (if you see lots of segfaults) let me know, though I'm not sure what to do, it just requires some time digging through the source code.</p>",
        "id": 271147729,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644335515
    },
    {
        "content": "<p>I've been using it exclusively with Lean 3 for quite a while now (will get back into development as soon as I've PR'ed some of my work on random variables). Haven't run into any major issues yet, but I do get <code>SigAbrt</code>once or twice daily (on Linux) and do <code>:LspRestart</code> when that happens -- but it's something I'm willing to accept so that can use vim...</p>",
        "id": 271164593,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1644342380
    },
    {
        "content": "<p>Interesting, I didn't know you saw the sigabrts too -- we could shove in a hack to just auto-restart until we figure out what's causing them</p>",
        "id": 271165309,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644342748
    },
    {
        "content": "<p>(By the way I should have said earlier that <span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> is the one responsible for figuring out the pesky utf-16 issue, which would have been hell to debug!)</p>",
        "id": 271165368,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644342773
    },
    {
        "content": "<p>I have a question about installing lean.nvim. Since a package manager doesn't seem to have much use anymore I don't use one. I made a package ~/.config/nvim/pack/lean and cloned the 6 dependencies and lean.vim to ~/.config/nvim/pack/lean/start but was wondering about the ~/.config/nvim/plugin/lean.lua configuration file. I made it anyways but was wondering if it is something a package manager is supposed to use or if the lean.nvim plugin itself uses it without the help of a plugin manager.</p>",
        "id": 389033747,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1693849854
    },
    {
        "content": "<p>(You mean <code>lean.nvim</code> right not <code>lean.vim</code>)</p>\n<p>I'd say yeah a package manager is still extremely common to use, probably 95% plus of users I'd guess use it.</p>",
        "id": 389036883,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693851909
    },
    {
        "content": "<p>There's instructions for using <code>lazy.nvim</code> or <code>vim-plug</code> in the README</p>",
        "id": 389036904,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693851928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/389036883\">said</a>:</p>\n<blockquote>\n<p>(You mean <code>lean.nvim</code> right not <code>lean.vim</code>)</p>\n<p>I'd say yeah a package manager is still extremely common to use, probably 95% plus of users I'd guess use it.</p>\n</blockquote>\n<p>Yes sorry typo. Yea historically it had use and that's why they're so common. Vim and nvim don't really need them anymore though.</p>",
        "id": 389038386,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1693852918
    },
    {
        "content": "<p>Most people still think they do, there's lots of additional functionality they provide, but yes, vim and nvim now have at least pathogen-style package managers in them.</p>",
        "id": 389038475,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693852959
    },
    {
        "content": "<p>(Having instructions for using vanilla nvim packaging would certainly be a welcome addition to the README if you're interested!)</p>",
        "id": 389038735,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693853160
    },
    {
        "content": "<p>Oh, I'm just now seeing your edit to your original message -- that sounds like your nvim is too old, what version are you on?</p>",
        "id": 389038826,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693853222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/389038735\">said</a>:</p>\n<blockquote>\n<p>(Having instructions for using vanilla nvim packaging would certainly be a welcome addition to the README if you're interested!)</p>\n</blockquote>\n<p>It can just be install lean4 and make sure you have export PATH=\"/home/david/lean4/build/release/stage1/bin:$PATH\" in your .bashrc and clone your plugins into ~/.config/nvim/pack/*/start and the github has the rest covered.</p>",
        "id": 389049945,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1693861758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/389038826\">said</a>:</p>\n<blockquote>\n<p>Oh, I'm just now seeing your edit to your original message -- that sounds like your nvim is too old, what version are you on?</p>\n</blockquote>\n<p>I'm using v0.7.2, the newest version for my package manager (apt on Debian). I uninstalled that and built it from source, now I have v0.10.0 but it still had an error turned out I did not have lean in my path.</p>",
        "id": 389049965,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1693861778
    },
    {
        "content": "<p>I'm reading Type Driven Development and saw that in the text editor it uses there's a way where you just write the name and type for a definition and with a shortcut the editor will insert a skeleton definition for it, using the equivalent of sorry for the parts that still have to be implemented. There's no equivalent for Lean, right?</p>",
        "id": 392870833,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1695592673
    },
    {
        "content": "<p>I think that general question is being tackled \"generically\" (as in not specifically to nvim) now thankfully.</p>\n<p>I think the answer is \"partially yes\" for some kinds of declarations. E.g. if you write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and put your cursor on the <code>_</code> (in either normal or insert mode) and then ask for a code action, you'll see:</p>\n<p><a href=\"/user_uploads/3121/ebzjnFSUG_r4tqKevH1Z9_Ab/Screenshot-2023-09-24-at-19.07.51.png\">Screenshot-2023-09-24-at-19.07.51.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ebzjnFSUG_r4tqKevH1Z9_Ab/Screenshot-2023-09-24-at-19.07.51.png\" title=\"Screenshot-2023-09-24-at-19.07.51.png\"><img src=\"/user_uploads/3121/ebzjnFSUG_r4tqKevH1Z9_Ab/Screenshot-2023-09-24-at-19.07.51.png\"></a></div>",
        "id": 392874488,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695596887
    },
    {
        "content": "<p>If your question has to do with setting code actions up entirely, there's an example here for how I do it which I suppose probably belongs in a note in the Wiki if it's not already there, I forget: <a href=\"https://github.com/Julian/dotfiles/blob/4a711e30c4efdb3df5e79f9a868037cffc7d34e0/.config/nvim/lua/plugins/lsp.lua#L71-L74\">https://github.com/Julian/dotfiles/blob/4a711e30c4efdb3df5e79f9a868037cffc7d34e0/.config/nvim/lua/plugins/lsp.lua#L71-L74</a></p>",
        "id": 392874520,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695596957
    },
    {
        "content": "<p>I think the book David is reading is based on idris, right? Anyway I think the closest we came to this was <code>extract_goal</code> in lean3. I’m not sure about the status with lean4.</p>",
        "id": 392875590,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695598227
    },
    {
        "content": "<p>There is <code>Mathlib.Tactic.ExtractGoal</code> I dont think it yet produces a code action though (partly as its a bit unclear how to get the location where it should be inserted</p>",
        "id": 392880863,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695602692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/392874488\">said</a>:</p>\n<blockquote>\n<p>I think that general question is being tackled \"generically\" (as in not specifically to nvim) now thankfully.</p>\n<p>I think the answer is \"partially yes\" for some kinds of declarations. E.g. if you write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and put your cursor on the <code>_</code> (in either normal or insert mode) and then ask for a code action, you'll see:</p>\n<p><a href=\"/user_uploads/3121/ebzjnFSUG_r4tqKevH1Z9_Ab/Screenshot-2023-09-24-at-19.07.51.png\">Screenshot-2023-09-24-at-19.07.51.png</a></p>\n</blockquote>\n<p>Oh that's great to hear! I'm relatively new to plugin configurations, so now I'm learning lua and nvim+lua. I had some trouble getting your plugin to work 3 weeks ago but didn't install the additional plugins until recently. I haven't been able to get nvim-lightbulb and lsp-status to work yet.</p>",
        "id": 393030855,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1695652499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/392874520\">said</a>:</p>\n<blockquote>\n<p>If your question has to do with setting code actions up entirely, there's an example here for how I do it which I suppose probably belongs in a note in the Wiki if it's not already there, I forget: <a href=\"https://github.com/Julian/dotfiles/blob/4a711e30c4efdb3df5e79f9a868037cffc7d34e0/.config/nvim/lua/plugins/lsp.lua#L71-L74\">https://github.com/Julian/dotfiles/blob/4a711e30c4efdb3df5e79f9a868037cffc7d34e0/.config/nvim/lua/plugins/lsp.lua#L71-L74</a></p>\n</blockquote>\n<p>Thanks, this is helpful. I should be able to get it working once I learn lua and plugin configurations.</p>",
        "id": 393031194,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1695652606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/392875590\">said</a>:</p>\n<blockquote>\n<p>I think the book David is reading is based on idris, right? Anyway I think the closest we came to this was <code>extract_goal</code> in lean3. I’m not sure about the status with lean4.</p>\n</blockquote>\n<p>Yes, it's based on Idris 1.</p>",
        "id": 393031396,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1695652677
    },
    {
        "content": "<p>Hi, I'm still confused on setting up your plugin. I don't use completion but was hoping to be able to get lightbulb and lsp-status working. The plugin I have besides those are lsp-config, plenary, switch, and tcomment. I've been putting .lua config files in runtimepath/lua/. I was wondering how init.lua and the config files should look?</p>",
        "id": 393780776,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1695924961
    },
    {
        "content": "<p>That's more about setting up neovim than it is setting up <code>lean.nvim</code> specifically. My recommendation is still to use a plugin manager :), for which you can then simply follow the instructions in the README. If you insist on doing things without one I probably am still happy to help (tomorrow) but please then pastebin what you have somewhere so I can see what you've done so far.</p>",
        "id": 394033380,
        "sender_full_name": "Julian Berman",
        "timestamp": 1696039756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/394033380\">said</a>:</p>\n<blockquote>\n<p>That's more about setting up neovim than it is setting up <code>lean.nvim</code> specifically. My recommendation is still to use a plugin manager :), for which you can then simply follow the instructions in the README. If you insist on doing things without one I probably am still happy to help (tomorrow) but please then pastebin what you have somewhere so I can see what you've done so far.</p>\n</blockquote>\n<p>Sorry configuration questions are probably inappropriate; that's probably why nobody responded to my initial configuration questions on the neovim chat. I learned some lua basics and reading the nvim documentation I thought it would be good learning to write my own little plugin for lean. I got the basics working and I used your syntax and abbreviations files</p>",
        "id": 394482789,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1696268350
    },
    {
        "content": "<p>Hello! Is there an interaction function that allows the user to automatically split on match cases, like done for examples in Agda?</p>",
        "id": 394592073,
        "sender_full_name": "Edoardo",
        "timestamp": 1696324536
    },
    {
        "content": "<p>Can you give an example of a proof state and what you'd like the tactic to do more precisely (for those of us that dont know agda)</p>",
        "id": 394599544,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696327305
    },
    {
        "content": "<p>Sure! It's not really a tactic, it's just a convenient help from the LSP/editor support.  For example, in Agda one might define a simple function such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>where <code>{! !}</code> is something similar to goals in Lean. In my editor, for example, if I  get the cursor into the goal and press the correct combination of keys, I get a prompt that asks me \"on what I want to split\": say I want to split on <code>x</code>, it automatically changes the definition of <code>add</code> to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">add</span> <span class=\"n\">zero</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n<span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">suc</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Of course, I'm not asking what combination do I have to press to do stuff I do in a completely different framework, just if Lean (or lean.nvim) supports something similar</p>",
        "id": 394606908,
        "sender_full_name": "Edoardo",
        "timestamp": 1696329686
    },
    {
        "content": "<p>If, for example, I have a similar situation: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>is there a way to automatically \"split\" <code>n</code>?</p>",
        "id": 394607199,
        "sender_full_name": "Edoardo",
        "timestamp": 1696329757
    },
    {
        "content": "<p>You can do stuff like this with the LSP code actions that are provided by std4. But it is not built in right now. In general I would not expect these features to  be provided by the editor in a Lean context but instead by user libraries that define code actions. You can of course bind the execution of specific code actions to some keys I guess.</p>",
        "id": 394610981,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696331135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113489-new-members/topic/vim.20support.3F/near/394610981\">said</a>:</p>\n<blockquote>\n<p>You can do stuff like this with the LSP code actions that are provided by std4. But it is not built in right now. In general I would not expect these features to  be provided by the editor in a Lean context but instead by user libraries that define code actions. You can of course bind the execution of specific code actions to some keys I guess.</p>\n</blockquote>\n<p>Do you know of any such libraries that have been written?</p>",
        "id": 394648754,
        "sender_full_name": "David Sprayberry",
        "timestamp": 1696343611
    },
    {
        "content": "<p>I would expect Std to (eventually) contain a code action for auto-expanding match statements. We already have this for <code>cases</code> and <code>induction</code>. See here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.CodeAction.casesExpand#doc\">docs#Std.CodeAction.casesExpand</a>. Probably a code action for <code>match</code> would be similar.</p>",
        "id": 394661926,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696347847
    }
]