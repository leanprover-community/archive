[
    {
        "content": "<p>I want to start learning Lean by verifying proofs in my textbook <a href=\"https://link.springer.com/book/10.1007/978-1-4471-4129-7\">Mathematical Logic for Computer Science</a>. A Hilbert system starts with three axioms and MP as the inference rule. The first theorem (3.10 in the book)  is <code>p -&gt; p</code> [how do I get the arrow? <code>p \\to p</code> doesn't work either!]. The theorem is proved from axioms <code>p -&gt; (q-&gt;p)</code> and  <code>((p-&gt;(q-&gt;r)-&gt;((p-&gt;q)-&gt;(p-&gt;r))</code>. How do I specify an axiom?</p>\n<p>I want to use this for educational purposes so I don't want to depend on the Lean libraries.</p>",
        "id": 402646801,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1700211931
    },
    {
        "content": "<p>One problem with doing something so basic is that these axioms are all theorems in Lean using only its built-in axioms</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- \\to gives →</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Maybe it would make sense to make your own arrow so that you're sure you avoid Lean's axioms.</p>",
        "id": 402648307,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700212280
    },
    {
        "content": "<p>Here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"s2\">\" ⇒ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">imp</span> <span class=\"c1\">-- \\=&gt;</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">mp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⇒</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">ax1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">⇒</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">ax2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">⇒</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">⇒</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">⇒</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⇒</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">⇒</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402650104,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700212678
    },
    {
        "content": "<p>I was just doing the same thing:<br>\n<a href=\"https://github.com/madvorak/fecssk/blob/76f4e7dfa13ecc7fab5ef348d798480e216add4f/Fecssk/Class06.lean#L91\">https://github.com/madvorak/fecssk/blob/76f4e7dfa13ecc7fab5ef348d798480e216add4f/Fecssk/Class06.lean#L91</a></p>",
        "id": 402656607,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700214246
    },
    {
        "content": "<p>Your <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> observation about arrows is smart. I was less careful in my implementation.</p>",
        "id": 402657060,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700214404
    },
    {
        "content": "<p>Also, how can I use the <code>¬</code> symbol after <code>prelude</code> (without importing its meaning)?</p>",
        "id": 402657445,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700214537
    },
    {
        "content": "<p>What does <code>axiom imp</code> exactly do in your <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> code?</p>",
        "id": 402657908,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700214693
    },
    {
        "content": "<p>I think I could define <code>¬</code> similarly to <code>=&gt;</code> that you have on the second line.</p>",
        "id": 402658339,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700214835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402657908\">said</a>:</p>\n<blockquote>\n<p>What does <code>axiom imp</code> exactly do in your <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> code?</p>\n</blockquote>\n<p>It says that there exists some binary operator on <code>Prop</code> called <code>imp</code> (notice it has the same type as <code>fun p q =&gt; (p -&gt; q)</code>)</p>",
        "id": 402658350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700214840
    },
    {
        "content": "<p>You can override the notation using high priority:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">myNot</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"¬\"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">myNot</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 402658460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700214866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402658350\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402657908\">said</a>:</p>\n<blockquote>\n<p>What does <code>axiom imp</code> exactly do in your <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> code?</p>\n</blockquote>\n<p>It says that there exists some binary operator on <code>Prop</code> called <code>imp</code> (notice it has the same type as <code>fun p q =&gt; (p -&gt; q)</code>)</p>\n</blockquote>\n<p>How is it different from <code>variable</code> of the same type?</p>",
        "id": 402658598,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700214917
    },
    {
        "content": "<p><code>variable</code> adds a new argument to new definitions/theorems. <code>axiom</code> adds a new definition without any sort of proof of existence.</p>",
        "id": 402659588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700215232
    },
    {
        "content": "<p><code>axiom</code> is sort of like a variable that the whole theory takes (but there's no mechanism to pass in values of that variable, short of replacing the <code>axiom</code> with a definition)</p>",
        "id": 402659867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700215300
    },
    {
        "content": "<p>Ah makes sense. I was confused by seeing <code>axiom</code> used for two different purposes.</p>",
        "id": 402660106,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700215353
    },
    {
        "content": "<p>May I copy your <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> code into my repository?</p>",
        "id": 402661286,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700215693
    },
    {
        "content": "<p>Sure</p>",
        "id": 402661668,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700215834
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 402661813,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700215891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402656607\">said</a>:</p>\n<blockquote>\n<p>I was just doing the same thing:<br>\n<a href=\"https://github.com/madvorak/fecssk/blob/76f4e7dfa13ecc7fab5ef348d798480e216add4f/Fecssk/Class06.lean#L91\">https://github.com/madvorak/fecssk/blob/76f4e7dfa13ecc7fab5ef348d798480e216add4f/Fecssk/Class06.lean#L91</a></p>\n</blockquote>\n<p>Thanks, Martin, I'll look at this.</p>",
        "id": 402665835,
        "sender_full_name": "Moti Ben-Ari",
        "timestamp": 1700216966
    },
    {
        "content": "<p>FYI, I am refactoring it right now.</p>",
        "id": 402666173,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700217044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402660106\">said</a>:</p>\n<blockquote>\n<p>Ah makes sense. I was confused by seeing <code>axiom</code> used for two different purposes.</p>\n</blockquote>\n<p>Actually three...</p>\n<ul>\n<li><code>axiom</code> as a symbol</li>\n<li><code>axiom</code> as a rule of inference</li>\n<li><code>axiom</code> as an axiom</li>\n</ul>",
        "id": 402666471,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700217131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402650104\">said</a>:</p>\n<blockquote>\n<p>Here</p>\n</blockquote>\n<p>Well...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">_imp</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"s2\">\" ⇒ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_imp</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">MP</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">⇒</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ψ</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"bp\">⇒</span> <span class=\"n\">φ</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"bp\">⇒</span> <span class=\"n\">χ</span><span class=\"o\">))</span> <span class=\"bp\">⇒</span> <span class=\"o\">((</span><span class=\"n\">φ</span> <span class=\"bp\">⇒</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">⇒</span> <span class=\"n\">χ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">K</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">MP</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">K</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⇒</span> <span class=\"n\">a</span>\n        <span class=\"k\">from</span> <span class=\"n\">MP</span> <span class=\"n\">h4</span> <span class=\"n\">h3</span>\n</code></pre></div>\n<p>I got a weird error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">MP</span> <span class=\"n\">h4</span> <span class=\"n\">h3</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">h3</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⇒</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⇒</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⇒</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 402667019,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700217249
    },
    {
        "content": "<p>Note that the second arrow is different</p>",
        "id": 402667081,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700217273
    },
    {
        "content": "<p>You have very sharp eyes!</p>",
        "id": 402667295,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700217343
    },
    {
        "content": "<p>(I'm not sure I'd use <code>Prop</code> at all)</p>",
        "id": 402667310,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700217349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402667295\">said</a>:</p>\n<blockquote>\n<p>You have very sharp eyes!</p>\n</blockquote>\n<p>Big screen :)</p>",
        "id": 402667336,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700217356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402667310\">said</a>:</p>\n<blockquote>\n<p>(I'm not sure I'd use <code>Prop</code> at all)</p>\n</blockquote>\n<p>Would you write <code>axiom Propo</code> then?</p>",
        "id": 402667699,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700217459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402667081\">said</a>:</p>\n<blockquote>\n<p>Note that the second arrow is different</p>\n</blockquote>\n<p>Ah, I kept the \"wrong\" arrow in the first two instantiations of the axioms.</p>",
        "id": 402667955,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700217540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667469\">Moti Ben-Ari</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402665835\">said</a>:</p>\n<blockquote>\n<p>Thanks, Martin, I'll look at this.</p>\n</blockquote>\n<p>Have a look now:<br>\n<a href=\"https://github.com/madvorak/fecssk/blob/3fce703425c30539fb06c791a3a976fbcf34fb84/Fecssk/Class06.lean#L93\">https://github.com/madvorak/fecssk/blob/3fce703425c30539fb06c791a3a976fbcf34fb84/Fecssk/Class06.lean#L93</a><br>\nAlso, I included some example proofs.</p>",
        "id": 402671112,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700218546
    },
    {
        "content": "<p>Or rather now:<br>\n<a href=\"https://github.com/madvorak/fecssk/blob/40467a80dc045a4bce0380143231e7d5f0d2ea09/Fecssk/Class06.lean#L95\">https://github.com/madvorak/fecssk/blob/40467a80dc045a4bce0380143231e7d5f0d2ea09/Fecssk/Class06.lean#L95</a></p>",
        "id": 402674771,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700219771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20in.20Hilbert.20System/near/402667310\">said</a>:</p>\n<blockquote>\n<p>(I'm not sure I'd use <code>Prop</code> at all)</p>\n</blockquote>\n<p>You can try this exercise and see why I left it as <code>Prop</code>, unless you mean you'd use <code>Type</code>. Or maybe you'd use a type with a <code>CoeType</code> instance?</p>",
        "id": 402749242,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700244102
    },
    {
        "content": "<p>I haven't thought about it; just noting the risk of using the wrong arrows, for example</p>",
        "id": 402750034,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700244331
    }
]