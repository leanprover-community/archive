[
    {
        "content": "<p>Some theorem requires instance. I can prepare the instance outside the proof. My question is how can I do the same inside the proof.</p>\n<p>This works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">TransCmp</span> <span class=\"n\">cmp</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">cmp.trans</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">find</span><span class=\"bp\">?</span><span class=\"n\">_some_cmp</span>  <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">Std.RBNode.Ordered</span> <span class=\"n\">cmp</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span>\n  <span class=\"n\">Std.RBNode.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">cmp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">cmp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Ordering.eq</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">cmp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Ordering.eq</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cmp</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Std.RBNode.Ordered.find</span><span class=\"bp\">?</span><span class=\"n\">_some</span> <span class=\"n\">ht</span>\n</code></pre></div>\n<p>I wonder how can I do the same by writing somthing in sorry. I have tried <code>constructor</code> or <code>simp</code> but can not rewrite  <code>TransCmp</code> to its definition which should be the two targets.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">find</span><span class=\"bp\">?</span><span class=\"n\">_some_cmp</span>  <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">Std.RBNode.Ordered</span> <span class=\"n\">cmp</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span>\n  <span class=\"n\">Std.RBNode.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">cmp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">cmp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Ordering.eq</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">cmp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Ordering.eq</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cmp</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">TransCmp</span> <span class=\"n\">cmp</span> <span class=\"o\">:=</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Std.RBNode.Ordered.find</span><span class=\"bp\">?</span><span class=\"n\">_some</span> <span class=\"n\">ht</span>\n</code></pre></div>",
        "id": 399203818,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698628728
    },
    {
        "content": "<p>Hey, next time when you post, please include the <code>import</code> and <code>open</code> statements so that people can test it easily.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Property</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n  <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Property2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Property</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Property</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">Property</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Property2</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p1</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 399205424,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698629591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span>  <br>\nThis is the missing part of the code, you can <code>sorry</code> out the <code>cmp.trans</code> and <code>symm</code> to make it easier to read.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span> <span class=\"n\">Std.RBMap</span> <span class=\"n\">Std.RBNode</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">cmp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Ordering.lt</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Ordering.eq</span>\n  <span class=\"k\">else</span> <span class=\"n\">Ordering.gt</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cmp.trans</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">cmp</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"bp\">.</span><span class=\"n\">gt</span> <span class=\"bp\">→</span> <span class=\"n\">cmp</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"bp\">.</span><span class=\"n\">gt</span> <span class=\"bp\">→</span> <span class=\"n\">cmp</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"bp\">.</span><span class=\"n\">gt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cmp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">hh1</span> <span class=\"n\">hh2</span>\n  <span class=\"k\">have</span> <span class=\"n\">xley</span> <span class=\"o\">:</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">l1</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">l1</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">l2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_eq</span> <span class=\"n\">l2</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">ylez</span> <span class=\"o\">:</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">l1</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">l1</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">l2</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_eq</span> <span class=\"n\">l2</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">xley</span> <span class=\"n\">ylez</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_iff_lt_or_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">hl</span>\n  <span class=\"n\">absurd</span> <span class=\"n\">hh1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hl</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">hl</span>\n  <span class=\"n\">absurd</span> <span class=\"n\">hh2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">Ordering.swap</span> <span class=\"o\">(</span><span class=\"n\">cmp</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cmp</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cmp</span><span class=\"o\">,</span> <span class=\"n\">Ordering.swap</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n    <span class=\"k\">have</span> <span class=\"n\">l2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.not_lt</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_iff_le_and_ne.mp</span> <span class=\"n\">l1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n    <span class=\"k\">have</span> <span class=\"n\">l3</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">xh</span>\n      <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_iff_le_and_ne.mp</span> <span class=\"n\">l1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">xh</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span><span class=\"o\">,</span> <span class=\"n\">l3</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_iff_le_and_ne.mpr</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_not_lt</span> <span class=\"n\">l1</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"n\">absurd</span> <span class=\"n\">l2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span><span class=\"o\">,</span> <span class=\"n\">l3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 399205743,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698629789
    },
    {
        "content": "<p>Next time sorry it before posting :) Anyways,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">TransCmp</span> <span class=\"n\">cmp</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">cmp.trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 399206020,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698629953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20construct.20an.20instance.20inside.20proof.2E/near/399205424\">said</a>:</p>\n<blockquote>\n<p>Hey, next time when you post, please include the <code>import</code> and <code>open</code> statements so that people can test it easily.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Property</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n  <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Property2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Property</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Property</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">Property</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Property2</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p1</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you. I finished the proof. Do you know why I can not use constructor in this situation?</p>",
        "id": 399206172,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698630038
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 399206218,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698630078
    },
    {
        "content": "<p>The code snippet I sent works for me.</p>",
        "id": 399206229,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698630091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20construct.20an.20instance.20inside.20proof.2E/near/399206020\">said</a>:</p>\n<blockquote>\n<p>Next time sorry it before posting :) Anyways,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">TransCmp</span> <span class=\"n\">cmp</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">cmp.trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>works.</p>\n</blockquote>\n<p>got it</p>",
        "id": 399206245,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698630105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20construct.20an.20instance.20inside.20proof.2E/near/399206218\">said</a>:</p>\n<blockquote>\n<p>What do you mean?</p>\n</blockquote>\n<p>It works. but still wondering why the constructor tactic doesn't work on this. Is looks like a constructor just like an <code>\\and</code>.</p>",
        "id": 399206375,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698630193
    },
    {
        "content": "<p>Ah. That I am not sure as well, someone else probably knows better</p>",
        "id": 399206718,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698630381
    },
    {
        "content": "<p>But in general you construct instances and classes with the <code>{}</code> syntax</p>",
        "id": 399206750,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698630408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20construct.20an.20instance.20inside.20proof.2E/near/399206718\">said</a>:</p>\n<blockquote>\n<p>Ah. That I am not sure as well, someone else probably knows better</p>\n</blockquote>\n<p>Well, it doesn't matter. Your solution works. Thank you for your help.</p>",
        "id": 399206803,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698630454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 399206838,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698630476
    }
]