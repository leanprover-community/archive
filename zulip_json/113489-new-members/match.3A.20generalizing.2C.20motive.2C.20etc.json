[
    {
        "content": "<p>Is there anywhere I could read about the more advanced features of Lean's <code>match</code>? In particular <code>generalizing</code>and <code>motive</code>. I'm also interested in manually proving that some cases are unreachable given hypotheses, I've found that I can do it using <code>absurd</code> but I don't know if that's how it's usually done.</p>",
        "id": 407099213,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702237385
    },
    {
        "content": "<p>I've seen the term \"motive\" used around induction principles too, and I'm not sure how to interpret the general concept.</p>",
        "id": 407099446,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702237660
    },
    {
        "content": "<p>Okay, after reviewing \"The Type Theory of Lean\" I think I get that the motive is just the type family for the result of the match expression. I'm guessing the motive of a match expression is usually inferred for normal programming, but may need to be spelled out for theorem proving.</p>",
        "id": 407100647,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702238363
    },
    {
        "content": "<p>The motive is to control how the type of the match expression should depend on the values of the objects being matched (so yeah, it's the type family you mentioned). Lean tries to compute a motive automatically, but if it gets it wrong you can override it. This might be necessary if you have really complicated dependent types.</p>\n<p>The <code>generalizing</code> feature (which is on by default) is controlling whether to automatically include additional variables as discriminants if they depend on the discriminants being matched against. This is like a dual to the motive (generalizing is for variables in the context, and motive is for the expected type).</p>",
        "id": 407102671,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702239239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"668081\">Francisco Giordano</span> <a href=\"#narrow/stream/113489-new-members/topic/match.3A.20generalizing.2C.20motive.2C.20etc/near/407099213\">said</a>:</p>\n<blockquote>\n<p>I'm also interested in manually proving that some cases are unreachable given hypotheses, I've found that I can do it using <code>absurd</code> but I don't know if that's how it's usually done.</p>\n</blockquote>\n<p>Yeah, <code>absurd</code> is common. If you're lazy, you can sometimes do <code>by simp at h</code> where <code>h</code> is your hypothesis, if that hypothesis simplifies to <code>False</code>.</p>",
        "id": 407102780,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702239284
    },
    {
        "content": "<p>If the hypothesis is an equality that's absurd, and it's an equality involving constructors, you can sometimes do <code>by cases h</code></p>",
        "id": 407102888,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702239347
    },
    {
        "content": "<p>I thought <code>generalizing</code> was only <em>sometimes</em> on by default?</p>",
        "id": 407103236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702239515
    },
    {
        "content": "<p>I think that changed in Lean 4.0.0-m4. RELEASES.md says:</p>\n<blockquote>\n<p><code>(generalizing := true)</code> is the default behavior for <code>match</code> expressions even if the expected type is not a proposition</p>\n</blockquote>",
        "id": 407104244,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702240003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/match.3A.20generalizing.2C.20motive.2C.20etc/near/407102671\">said</a>:</p>\n<blockquote>\n<p>whether to automatically include additional variables as discriminants if they depend on the discriminants being matched against</p>\n</blockquote>\n<p>I'm not sure what this means. What are the discriminants? </p>\n<p>Here's a situation that I don't fully understand yet. Would appreciate some pointers.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IsValue</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">IsValue</span> <span class=\"o\">(</span><span class=\"n\">Term.var</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">IsValue</span> <span class=\"o\">(</span><span class=\"n\">Term.lam</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">typeOfValue</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IsValue</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.var</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"var\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.lam</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"lam\"</span>\n</code></pre></div>\n<p>This compiles fine, but when I add <code>(generalizing := false)</code> I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.753</span> <span class=\"o\">(</span><span class=\"n\">Term.var</span> <span class=\"n\">id</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">IsValue</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">IsValue</span> <span class=\"o\">(</span><span class=\"n\">Term.var</span> <span class=\"n\">id</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 407107828,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702242287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"668081\">Francisco Giordano</span> <a href=\"#narrow/stream/113489-new-members/topic/match.3A.20generalizing.2C.20motive.2C.20etc/near/407104244\">said</a>:</p>\n<blockquote>\n<p>I think that changed in Lean 4.0.0-m4. RELEASES.md says:</p>\n<blockquote>\n<p><code>(generalizing := true)</code> is the default behavior for <code>match</code> expressions even if the expected type is not a proposition</p>\n</blockquote>\n</blockquote>\n<p>I think I must have read an outdated docstring somewhere</p>",
        "id": 407110274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702244462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"668081\">@Francisco Giordano</span> The syntax is <code>match ...discriminants... with | ...patterns... =&gt; ... ...</code></p>",
        "id": 407111155,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702245347
    },
    {
        "content": "<p>Here's how to do when <code>generalizing</code> is false:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">typeOfValue</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsValue</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">generalizing</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.var</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"var\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.lam</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"lam\"</span>\n</code></pre></div>\n<p>This is what <code>generalizing := true</code> does for you.</p>",
        "id": 407111249,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702245418
    },
    {
        "content": "<p>I think the way it works is that when you have multiple discriminants, each discriminant generalizes itself in the next, so in the first case for example the second pattern has type <code>IsValue (Term.var _)</code> rather than <code>IsValue t</code></p>",
        "id": 407111287,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702245476
    },
    {
        "content": "<p>The reason you don't need to write the <code>Term.app</code> case is that the second pattern has type <code>IsValue (Term.app _ _)</code> and it's smart enough to see that there are no constructors that produce that, so it can handle that case automatically</p>",
        "id": 407111461,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702245549
    },
    {
        "content": "<p>I don't understand the application type mismatch error. It might be a bug.</p>",
        "id": 407111672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702245631
    },
    {
        "content": "<p>Leaving out the <a href=\"http://Term.app\">Term.app</a> case without errors was exactly what I wanted in this example.</p>\n<p>One final (tangential) thing about this function I'm having trouble with is that if I define <code>{h : IsValue t}</code> as an implicit, Lean is not able to synthesize it. It works well if I give it an auto-tactic: <code>(h : IsValue t := by constructor)</code>. But this seems redundant, is this normal? Is there any way to customize implicit synthesis / elaboration?</p>",
        "id": 407112082,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702245804
    },
    {
        "content": "<p>I think I understand now, that to synthesize implicit arguments Lean will only try to find a suitable value in the environment by unification without invoking any (other) tactics.</p>\n<p>Thanks for the help!</p>",
        "id": 407125242,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702256401
    },
    {
        "content": "<p>Yes, I think <code>(h : IsValue t := by constructor)</code> is the way you'd do it. I wish you could do <code>{h : IsValue t := by constructor}</code> so that the only way to pass it explicitly is by using a keyword argument (like <code>typeOfValue t (h := ...)</code>)</p>",
        "id": 407125740,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702256576
    }
]