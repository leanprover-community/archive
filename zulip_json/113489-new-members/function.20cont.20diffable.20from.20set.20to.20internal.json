[
    {
        "content": "<p>Hello, I have a function such that it's continuous on a segment from some point x_star to some other point x_star + α • d. Where x_star and d are vectors and α is real. Then I should be able to write this such as the following where the function only takes in a input c in reals in a interval [0, α] and scales d by c and transforms it by x_star.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span> <span class=\"c1\">-- imports the real numbers</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- Declare a type E with some properties</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h_xstar</span><span class=\"o\">:</span> <span class=\"n\">x_star</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_d_not_zero</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_d_in_u</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h_twice_continuous_diffable</span><span class=\"o\">:</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">segment</span> <span class=\"n\">ℝ</span> <span class=\"n\">x_star</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"bp\">+</span> <span class=\"n\">α</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">)))</span>  <span class=\"o\">:</span>\n<span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x_star</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would have thought there is some 'rw ___' command I can use to show this is essentially equivalent to 'h_twice_continuous_diffable' but maybe i am wrong and i have to do this in a multistep proof.</p>",
        "id": 345082834,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1679998245
    },
    {
        "content": "<p>Can you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff_on.comp\">docs#cont_diff_on.comp</a>?</p>",
        "id": 345084650,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1679998732
    },
    {
        "content": "<p>Thank you, Sebastien! This is exactly what I was looking for. Got it to work.</p>",
        "id": 345247589,
        "sender_full_name": "Abu Al Hassan",
        "timestamp": 1680040108
    }
]