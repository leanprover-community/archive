[
    {
        "content": "<p>I'm using VSCode and I want to refer to a hypothesis in the premise that is introduced by tactics (i.e. they have a small \"+\" sign after):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span>\n<span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">a</span>\n<span class=\"n\">hh</span><span class=\"o\">:</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"n\">y</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">a</span>\n<span class=\"n\">a</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">✝</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">y</span><span class=\"bp\">✝</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>I couldn't seem to use <code>intros</code> to give them names, because it will report <code>tactic 'introN' failed, insufficient number of binders</code>. How do I go about giving those hypotheses names or refer to them in the code?</p>\n<p>The code I am stuck at is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">trc</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">TrcRefl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">TrcFront</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">trc_trans</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"n\">z</span> <span class=\"n\">hh</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span>\n<span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hh</span>\n<span class=\"bp\">.</span>  <span class=\"c\">/-</span><span class=\"cm\"> I cannot use intros here -/</span>\n</code></pre></div>",
        "id": 390988445,
        "sender_full_name": "Z. Wu",
        "timestamp": 1694712655
    },
    {
        "content": "<p>Instead of the dot, you can use the <code>next n1 n2 n3 =&gt; ...</code> tactic to rename the inaccessible names to the given names and then run a tactic block inside the <code>...</code>. There's also a structured version of <code>cases</code> that I believe is explained in the docstring of the tactic.</p>",
        "id": 390988766,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694712800
    },
    {
        "content": "<p>I think the <code>next</code> macro works! And thanks for pointing me to the docstring</p>",
        "id": 390992463,
        "sender_full_name": "Z. Wu",
        "timestamp": 1694714209
    },
    {
        "content": "<p>If you use the yellow lightbulb (which you get if you e.g. <code>import Mathlib</code>) then you get a yellow lightbulb after typing <code>cases h</code>, and if you click on it you get this:</p>\n<p><a href=\"/user_uploads/3121/oQzkZX6wsgaQN4n63PNpRedV/Screenshot-from-2023-09-14-19-04-04.png\">Screenshot-from-2023-09-14-19-04-04.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oQzkZX6wsgaQN4n63PNpRedV/Screenshot-from-2023-09-14-19-04-04.png\" title=\"Screenshot-from-2023-09-14-19-04-04.png\"><img src=\"/user_uploads/3121/oQzkZX6wsgaQN4n63PNpRedV/Screenshot-from-2023-09-14-19-04-04.png\"></a></div><p>Selecting \"Generate an explicit pattern match for <code>cases</code>\" gives you the (buggy, lol)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">trc_trans</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">trc</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"n\">z</span> <span class=\"n\">hh</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TrcRefl</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TrcFront</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and then deleting the buggy lines with alpha and R gives you what you could have typed to get access to those inaccessible terms.</p>",
        "id": 390993766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694714749
    },
    {
        "content": "<p>thanks, that's good to know!</p>",
        "id": 391052206,
        "sender_full_name": "Z. Wu",
        "timestamp": 1694742498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Zwu</span> has marked this topic as resolved.</p>",
        "id": 391064482,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694747551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Zwu</span> has marked this topic as unresolved.</p>",
        "id": 391064492,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694747557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Zwu</span> has marked this topic as resolved.</p>",
        "id": 391064500,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694747564
    },
    {
        "content": "<p>For future references, we have the <code>rename_i</code> tactic that can be used to rename exactly the inaccessible names.<br>\nSo just use something like <code>rename_i x y z</code></p>\n<p>I found this when browsing the source code <code>Init/Tactics.lean</code></p>",
        "id": 393195369,
        "sender_full_name": "Z. Wu",
        "timestamp": 1695720313
    }
]