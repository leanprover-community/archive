[
    {
        "content": "<p>Hello. I have the following definition, which I <em>defined</em> to only take 3 arguments, nothing else. However, for some reason Lean requires me to supply additional arguments, more than what I defined. Can someone explain how this works? Can't seem to find documentation of it either.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.euclidean.angle.sphere</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">affine</span> <span class=\"n\">affine_map</span> <span class=\"n\">affine_subspace</span> <span class=\"n\">euclidean_geometry</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">affine</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span> <span class=\"n\">euclidean_geometry</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real_space</span>\n\n<span class=\"c1\">-- Specify on the real plane</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Pt</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">Pt</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">ℝ</span> <span class=\"n\">Pt</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hd2</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n<span class=\"kn\">include</span> <span class=\"n\">hd2</span>\n\n<span class=\"c1\">-- Perpendicular distance from p3 to p1 p2, which doesn't seem to be defined in mathlib</span>\n<span class=\"kd\">def</span> <span class=\"n\">perpendicular_distance</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">‖</span><span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">orthogonal_projection</span> <span class=\"n\">line</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">]</span> <span class=\"n\">p3</span><span class=\"o\">)</span><span class=\"bp\">‖</span>\n\n<span class=\"c1\">-- The shortest distance from p3 to any point on p1 p2 is perpendicular distance</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma2</span> <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"bp\">⨅</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">line</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">],</span> <span class=\"bp\">‖</span><span class=\"n\">x</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p3</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"n\">perpendicular_distance</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If you look at <code>perpendicular_distance</code>, I defined it to take in 3 points. However, Lean forces me to also supply <code>V</code> and <code>Pt</code> when I use it in the statement of <code>lemma2</code>.</p>",
        "id": 327044198,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676033881
    },
    {
        "content": "<p>When you write <code>variables (V : Type*) (Pt : Type*)</code> you are saying \"all functions which use <code>V</code> or <code>Pt</code> from this point on will take them as <em>explicit</em> arguments\"</p>",
        "id": 327044528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676034000
    },
    {
        "content": "<p>If you change those <code>()</code> (explicit) s to <code>{}</code> (implicit) then your problem might go away</p>",
        "id": 327044674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676034035
    },
    {
        "content": "<p>Yea it does! But now it deduces the wrong argument <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> It thinks it's <code>... \\R Pt p1 p2 p3</code> instead of the correct <code>... V Pt p1 p2 p3</code>.</p>",
        "id": 327044937,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676034119
    },
    {
        "content": "<p>I have no idea why it's doing that!</p>",
        "id": 327046144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676034498
    },
    {
        "content": "<p>Oh I think <code>normed_add_torsor ℝ Pt</code> is the problem</p>",
        "id": 327046203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676034526
    },
    {
        "content": "<p>Lean doesn't want you having more than vector space associated with your affine space</p>",
        "id": 327046317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676034562
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 327046733,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676034694
    },
    {
        "content": "<p>I will think through all the instances and assumptions then. I am just copying them here and there, mainly from the IMO 2019 Q2 geometry question formalisation, since it uses euclidean geometry lol</p>",
        "id": 327046873,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676034736
    },
    {
        "content": "<p><code>[normed_add_torsor ℝ Pt]</code> means \"you can subtract any two points and get a real number\"</p>",
        "id": 327047057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676034785
    },
    {
        "content": "<p>Which essentially makes your problem 1D, I think (and therefore trivial because your assumption is that it's 2D, so contradiction)</p>",
        "id": 327047091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676034794
    },
    {
        "content": "<p>Oh hmm, so it's kind of saying Pt - Pt is the distance? Instead of say the vector</p>",
        "id": 327047374,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676034866
    },
    {
        "content": "<p>It's saying that it's the signed distance along 1D space</p>",
        "id": 327048219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676035095
    },
    {
        "content": "<p>To get this to work it seems you need <code>complete_space ↥((affine_span ℝ {p1, p2}).direction)</code> and I'm not sure where that comes from</p>",
        "id": 327049283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676035344
    },
    {
        "content": "<p>Maybe I should start from scratch. Like essentially all I want is 2d vectors over the reals.</p>",
        "id": 327049468,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676035394
    },
    {
        "content": "<p>Since the theorem I am trying to prove is specifically for 2d and over the reals, at least for now</p>",
        "id": 327049561,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676035420
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> can advise on why your version doesn't work out</p>",
        "id": 327049598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676035435
    },
    {
        "content": "<p>Thanks in advance <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> Or just point me to what I actually need I guess. I think the major reason why I am struggling is I don't know the broad theory that is implemented in Lean, i.e. all the torsor and things, and there hasn't been past samples on how to setup a specific instance (R^2) either.</p>",
        "id": 327050037,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676035558
    },
    {
        "content": "<p>This seems to work, but feels ugly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">affine</span> <span class=\"n\">affine_map</span> <span class=\"n\">affine_subspace</span> <span class=\"n\">euclidean_geometry</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">affine</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span> <span class=\"n\">euclidean_geometry</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real_space</span>\n\n<span class=\"c1\">-- Specify on the real plane</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Pt</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">Pt</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hd2</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n<span class=\"kn\">include</span> <span class=\"n\">hd2</span>\n\n<span class=\"c1\">-- Perpendicular distance from p3 to p1 p2, which doesn't seem to be defined in mathlib</span>\n<span class=\"kd\">def</span> <span class=\"n\">perpendicular_distance</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">line</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">direction</span> <span class=\"k\">then</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">‖</span><span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">euclidean_geometry.orthogonal_projection</span> <span class=\"n\">line</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">]</span> <span class=\"n\">p3</span><span class=\"o\">)</span><span class=\"bp\">‖</span>\n<span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 327050242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676035590
    },
    {
        "content": "<p>Why not use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.inf_dist\">docs#metric.inf_dist</a>?</p>",
        "id": 327051563,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1676035889
    },
    {
        "content": "<p>That <code>if</code> seems weird lol</p>",
        "id": 327051571,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676035892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Mysterious.20arguments/near/327051563\">said</a>:</p>\n<blockquote>\n<p>Why not use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.inf_dist\">docs#metric.inf_dist</a>?</p>\n</blockquote>\n<p>I will take a look, thanks! Looks good so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Perpendicular distance from p3 to p1 p2, which doesn't seem to be defined in mathlib</span>\n<span class=\"kd\">def</span> <span class=\"n\">perpendicular_distance</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">metric.inf_dist</span> <span class=\"n\">p3</span> <span class=\"n\">line</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- (Practice lemmas)</span>\n<span class=\"c1\">-- The perpendicular distance from p1 to p1 p2 is 0</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma1</span> <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">perpendicular_distance</span> <span class=\"n\">V</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">perpendicular_distance</span><span class=\"o\">,</span> <span class=\"n\">coe_affine_span</span><span class=\"o\">,</span> <span class=\"n\">inf_dist</span><span class=\"o\">,</span>\n             <span class=\"n\">inf_edist_zero_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_span_points</span> <span class=\"n\">ℝ</span> <span class=\"n\">p1</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_insert</span> <span class=\"n\">p1</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"n\">zero_to_real</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 327053426,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676036388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Mysterious.20arguments/near/327049283\">said</a>:</p>\n<blockquote>\n<p>To get this to work it seems you need <code>complete_space ↥((affine_span ℝ {p1, p2}).direction)</code> and I'm not sure where that comes from</p>\n</blockquote>\n<p>I think we need instances <code>finite_dimensional_direction_affine_span_singleton</code> and <code>finite_dimensional_vector_span_singleton</code> and <code>finite_dimensional_direction_affine_span_insert_set</code> to go along with the existing <code>finite_dimensional_vector_span_insert_set</code>, and then type class inference should be able to deduce <code>complete_space ↥((affine_span ℝ s).direction)</code> (via <code>finite_dimensional</code>) for any <code>s</code> that is syntactically of the form <code>{p1, p2, p3, ...}</code>.</p>",
        "id": 327060106,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1676038052
    },
    {
        "content": "<p>Oh, does adding a <code>finite_dimensional ℝ V</code> instance argument make the first example work?</p>",
        "id": 327060648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676038173
    },
    {
        "content": "<p>Okay so essentially I got a bit lost in everything, so I deleted everything and started again, but this time deriving the instances I need on my own lmao. Here is what I got: <a href=\"https://github.com/grhkm21/lean/blob/master/sketch/sylvester_gallai.lean#L61\">https://github.com/grhkm21/lean/blob/master/sketch/sylvester_gallai.lean#L61</a> I think it is working okay, just need to fix the remaining 50 bugs :D Thanks for the help</p>",
        "id": 327069556,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676040361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Mysterious.20arguments/near/327060648\">said</a>:</p>\n<blockquote>\n<p>Oh, does adding a <code>finite_dimensional ℝ V</code> instance argument make the first example work?</p>\n</blockquote>\n<p>Yes, this is the fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.euclidean.angle.sphere</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">affine</span> <span class=\"n\">affine_map</span> <span class=\"n\">affine_subspace</span> <span class=\"n\">euclidean_geometry</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">affine</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span> <span class=\"n\">euclidean_geometry</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real_space</span>\n\n<span class=\"c1\">-- Specify on the real plane</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Pt</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">Pt</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hd2</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n<span class=\"kn\">include</span> <span class=\"n\">hd2</span>\n\n<span class=\"c1\">-- Perpendicular distance from p3 to p1 p2, which doesn't seem to be defined in mathlib</span>\n<span class=\"kd\">def</span> <span class=\"n\">perpendicular_distance</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">Pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‖</span><span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">euclidean_geometry.orthogonal_projection</span> <span class=\"n\">line</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">]</span> <span class=\"n\">p3</span><span class=\"o\">)</span><span class=\"bp\">‖</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">real_space</span>\n</code></pre></div>\n<p><code>metric.inf_dist</code> is probably still a good choice</p>",
        "id": 327072211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676041003
    }
]