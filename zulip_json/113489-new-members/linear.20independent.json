[
    {
        "content": "<p>Hi all, <br>\nThis might be a little bit of a dumb question but I'm trying to understand the design of linear_independent and how to use it. I'm trying to use some of the existing lemmas for matroid proofs, but I keep tripping up on the two different ways that a set of vectors can be expressed and I'm not really sure which to use, how to go between them, etc. More specifically, I'm trying to talk about the image of a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>:</mo><mi>E</mi><mo>→</mo><mo stretchy=\"false\">(</mo><mi>ι</mi><mo>→</mo><mi>𝔽</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi : E \\rightarrow (ι → 𝔽)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ι</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">F</span><span class=\"mclose\">)</span></span></span></span> that maps into a set of vectors, and we have</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">linear_independent</span><span class=\"w\"> </span><span class=\"kt\">𝔽</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">φ</span><span class=\"w\"> </span><span class=\"sc\">''</span><span class=\"w\"> </span><span class=\"kt\">X</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"kt\">𝔽</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>but also we can express it like </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">linear_independent</span><span class=\"w\"> </span><span class=\"kt\">𝔽</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">λ</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">X</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">φ</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">E</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>For example, I want to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finrank_span_set_eq_card</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.to_finset.card</span>\n</code></pre></div>\n<p>which clearly uses the <code>coe</code> expression.</p>",
        "id": 346923899,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1680628667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> can you say a bit more about what <code>X</code> is?</p>",
        "id": 346925680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680629110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/linear.20independent/near/346925680\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"303889\">Alena Gusakov</span> can you say a bit more about what <code>X</code> is?</p>\n</blockquote>\n<p>Sure! <code>X</code> is just an arbitrary <code>set E</code>, where <code>E</code> is just a type for now (in our case it's the ground set of the matroid but I don't think that is necessary to know)</p>",
        "id": 346925952,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1680629172
    },
    {
        "content": "<p>Is it important that <code>X</code> is a <code>set E</code>? Or is it useful to think about <code>X</code> as an \"indexed family of elements of <code>E</code>\"?</p>",
        "id": 346926220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680629245
    },
    {
        "content": "<p>I suppose you could view it as an indexed family of elements, but in the definition I have it as a set currently, I can provide an MWE if that helps!</p>",
        "id": 346926600,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1680629344
    },
    {
        "content": "<p>If you can explain in a words a bit of the background that might also help. What is the intuitive meaning/role of <code>X</code>?</p>",
        "id": 346926972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680629441
    },
    {
        "content": "<p>Is it supposed to be a basis? Or a random set? Where does it come from? How is it used?</p>",
        "id": 346927062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680629465
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.image_of_comp\">docs#linear_independent.image_of_comp</a> is one direction.</p>",
        "id": 346927613,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680629596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/linear.20independent/near/346927062\">said</a>:</p>\n<blockquote>\n<p>Is it supposed to be a basis? Or a random set? Where does it come from? How is it used?</p>\n</blockquote>\n<p>So <code>X</code> is an arbitrary set of elements in a representable matroid, through which I'm trying to write some helper lemmas about the relationship between independence of a set in a matroid and linear independence of its representation. I.e. if a set <code>X</code> is independent in <code>matroid E</code>, then when you take its representation over some field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">F</span></span></span></span> (which will be a set of vectors in some vector space over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">F</span></span></span></span>) you get a linearly independent set, and if it's not independent then the representation will not be linearly independent.</p>",
        "id": 346927637,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1680629606
    },
    {
        "content": "<p>For future reference, the lemma Alena was looking for is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent_image\">docs#linear_independent_image</a></p>",
        "id": 347999408,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681035825
    }
]