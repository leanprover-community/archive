[
    {
        "content": "<p>From <a href=\"https://github.com/vaibhavkarve/leanteach2020/blob/master/src/euclid.lean\">this lean 3 project</a>, I got the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">lies_on</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">line_of_points</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span> <span class=\"bp\">→</span> <span class=\"n\">Line</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">line_exists</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"o\">:=</span> <span class=\"n\">line_of_points</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n    <span class=\"n\">lies_on</span> <span class=\"n\">p₁</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">lies_on</span> <span class=\"n\">p₂</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>How would one use <code>line_exists</code> in a proof? The fact that it's a <code>let</code> statement is giving me trouble. In particular, suppose the local context contains </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p₁p₂</span><span class=\"o\">:</span> <span class=\"n\">Point</span>\n<span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Line</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span>\n<span class=\"n\">g_1</span><span class=\"o\">:</span> <span class=\"n\">lies_on</span> <span class=\"n\">p₁</span> <span class=\"n\">l</span>\n<span class=\"n\">g_2</span><span class=\"o\">:</span> <span class=\"n\">lies_on</span> <span class=\"n\">p₂</span> <span class=\"n\">l</span>\n<span class=\"n\">l₀</span><span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"o\">:=</span> <span class=\"n\">line_of_points</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Could <code>line_exists</code> be used to show <code>l = l₀</code>?</p>",
        "id": 309285996,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668221689
    },
    {
        "content": "<p>no, at least not with those axioms alone</p>",
        "id": 309286230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668221946
    },
    {
        "content": "<p><code>line_exists</code> could be used to show that <code>lies_on p₁ l₀</code> and <code>lies_on p₂ l₀</code> but you need some uniqueness assumption to prove <code>l = l₀</code></p>",
        "id": 309286257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668221994
    },
    {
        "content": "<p>Thanks. <del>Doesn't uniqueness follow from the fact that <code>line_of_points</code> is a function?</del></p>\n<p>I see.</p>",
        "id": 309286374,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668222078
    },
    {
        "content": "<p>Can I use <code>∃!</code> like this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">two_points_unique_line</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">lies_on</span> <span class=\"n\">p₁</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">lies_on</span> <span class=\"n\">p₂</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>IF so, once I have <code>gl: lies_on p₁ l ∧ lies_on p₂ l</code> and <code>gl₀: lies_on p₁ l₀ ∧ lies_on p₂ l₀</code> in my local context, how can I use <code>two_points_unique_line</code> to show <code>l=l_0</code>?</p>",
        "id": 309290175,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668226549
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique_of_exists_unique\">docs#unique_of_exists_unique</a></p>",
        "id": 309291244,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668227872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 309298866,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668236435
    }
]