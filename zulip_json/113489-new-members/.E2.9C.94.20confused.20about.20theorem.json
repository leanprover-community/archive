[
    {
        "content": "<p>Hi i am recently learning lean and while the functional part is going rather ok i have a bit of trouble with proving lemma/theorem when they get a little too complex. As shown in the code below I am making a SAT solver which can solve boolean formulas. Boolean formulas are represented by inductive form and are checked by function valid with the use of a valuation.(function which maps variables to truth values aka true/false). function find_valuation finds a valuation if there is one which makes the formula true else it sends back option.none. And lastly the solver function takes a form and uses find_valuation to determine if it is solvable or not. </p>\n<p>The part that i am stuck on is the theorem solver_sound which states that  in the case a formula p is solvable with solver p resulting in true/tt this should imply that it is satisfiable which in this case means that there exists a valuation V which results in valid V p. I have been struggling to find any way to prove this even by making helper lemma's but i can't seem to figure it out.</p>\n<p>Is there any advice i can get about solving this problem please let me know. Also let me know if more information is required or if i broke some rule on this forum</p>",
        "id": 322786058,
        "sender_full_name": "Henkie67",
        "timestamp": 1674340832
    },
    {
        "content": "<p>I can't answer your question but just to reassure you that it's totally fine to ask basic questions in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a>  -- that's what the stream is for!</p>",
        "id": 322786706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674341227
    },
    {
        "content": "<p>By the way, your code does not compile for me: I have errors on <code>find_val</code> and <code>length_truth</code>. If you could edit your post to make the code a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> then that would be even better.</p>",
        "id": 322786864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674341308
    },
    {
        "content": "<p>ok will do</p>",
        "id": 322786932,
        "sender_full_name": "Henkie67",
        "timestamp": 1674341365
    },
    {
        "content": "<p>i have added every function i have</p>",
        "id": 322787313,
        "sender_full_name": "Henkie67",
        "timestamp": 1674341647
    },
    {
        "content": "<p>If I remove <code>import .lovelib</code> and replace it with <code>import tactic</code> (from <code>mathlib</code>, Lean's mathematics library) then the code compiles for me. I need to go and eat but hopefully someone else can take it from here!</p>",
        "id": 322787697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674341948
    },
    {
        "content": "<p>i added the import</p>",
        "id": 322787981,
        "sender_full_name": "Henkie67",
        "timestamp": 1674342143
    },
    {
        "content": "<p>can somebody please help me I am still stuck and this is for a rather important project.</p>",
        "id": 322880920,
        "sender_full_name": "Henkie67",
        "timestamp": 1674404638
    },
    {
        "content": "<p>Have you tried <code>induction p</code>?</p>",
        "id": 322882745,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674405641
    },
    {
        "content": "<p>I have now 7 goals for every case i managed to get the first one right but the second one (form.Ftrue) still has goal:∃ (V : valuation), true</p>",
        "id": 322884419,
        "sender_full_name": "Henkie67",
        "timestamp": 1674406557
    },
    {
        "content": "<p>which seems odd to prove</p>",
        "id": 322884479,
        "sender_full_name": "Henkie67",
        "timestamp": 1674406569
    },
    {
        "content": "<p>and the case with form.Ffalse seems impossible to prove this way because it results in false</p>",
        "id": 322886124,
        "sender_full_name": "Henkie67",
        "timestamp": 1674407511
    },
    {
        "content": "<p>Note that having <code>false</code> as a goal doesn't mean you're stuck. Assuming you wrote down a true theorem, you must have a contradictory hypothesis in context (namely, you're arguing by contradiction).</p>",
        "id": 322890250,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674410097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582257\">Henkie67</span> <a href=\"#narrow/stream/113489-new-members/topic/confused.20about.20theorem/near/322884479\">said</a>:</p>\n<blockquote>\n<p>which seems odd to prove</p>\n</blockquote>\n<p>All you need to prove it is to provide any <code>Valuation</code> and any proof of <code>true</code>. The unique proof of <code>true</code> is called <code>trivial</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/trivial\">docs#trivial</a>.</p>",
        "id": 322890417,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674410184
    },
    {
        "content": "<p>i have managed to solve true, but with false i have now this:</p>\n<p>solve1 tactic failed, focused goal has not been solved<br>\nstate:<br>\na : solver form.Ffalse = tt,<br>\nff : ¬false<br>\n⊢ false</p>",
        "id": 322896854,
        "sender_full_name": "Henkie67",
        "timestamp": 1674414370
    },
    {
        "content": "<p>Try to get a contradiction from your <code>a</code> assumption</p>",
        "id": 322901833,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674417733
    },
    {
        "content": "<p>You will need to unfold a bunch of your definitions to make progress</p>",
        "id": 322901900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674417800
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/DYFtbVPJvUpsTXZ7o4dYSFMp/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DYFtbVPJvUpsTXZ7o4dYSFMp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/DYFtbVPJvUpsTXZ7o4dYSFMp/image.png\"></a></div><p>so in this case i have unfolded it now we have a pattern match that should result in false or ff thereby making a contradiction but how would i make it so</p>",
        "id": 322903315,
        "sender_full_name": "Henkie67",
        "timestamp": 1674418725
    },
    {
        "content": "<p>Do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">find_valuation</span> <span class=\"n\">form.Ffalse</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>Then you know the maths better than I do.</p>",
        "id": 322904285,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674419280
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/yL5oDob25_wV1tORfW8txEZe/image.png\">image.png</a> <br>\ni think i am starting to lose my mind over this</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yL5oDob25_wV1tORfW8txEZe/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yL5oDob25_wV1tORfW8txEZe/image.png\"></a></div>",
        "id": 322906125,
        "sender_full_name": "Henkie67",
        "timestamp": 1674420562
    },
    {
        "content": "<p>I assume and hope you tried library_search and the various techniques similar?</p>",
        "id": 322906456,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674420814
    },
    {
        "content": "<p>thx library_search worked dont know why tho</p>",
        "id": 322906562,
        "sender_full_name": "Henkie67",
        "timestamp": 1674420880
    },
    {
        "content": "<p>nevermind it crashed my virtualbox</p>",
        "id": 322906812,
        "sender_full_name": "Henkie67",
        "timestamp": 1674421116
    },
    {
        "content": "<p>Note that there is an actual theorem to be proved here. You defined a lot of functions. Now you need to prove that they compute what you claim they do.</p>",
        "id": 322907846,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674421889
    },
    {
        "content": "<p>You can't follow your nose. You need to understand the maths.</p>",
        "id": 322907868,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674421906
    },
    {
        "content": "<p>i realize that, i just have trouble understanding it because of the complexity compared to the examples i was given before this assignment</p>",
        "id": 322907957,
        "sender_full_name": "Henkie67",
        "timestamp": 1674421958
    },
    {
        "content": "<p>What I would suggest is going back to the very first function you defined, and prove it is correct. Then do the second one. Then the third, etc...</p>",
        "id": 322908025,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674422007
    },
    {
        "content": "<p>i still have to define and,or,-&gt; and not after this which i assume are similair difficulty, i dont understand why such a (until now) relative easy assignment suddenly becomes so complex</p>",
        "id": 322908574,
        "sender_full_name": "Henkie67",
        "timestamp": 1674422437
    },
    {
        "content": "<p>This assignment never looked easy to me <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 322909255,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674422968
    },
    {
        "content": "<p>i am used to haskell so the functions were not that difficult but the theorem/lemma's are to me at least</p>",
        "id": 322909357,
        "sender_full_name": "Henkie67",
        "timestamp": 1674423023
    },
    {
        "content": "<p>If you work methodically, you will get there. Know what you want to prove at each step before going to the next.</p>",
        "id": 322909372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674423058
    },
    {
        "content": "<p>i solved it, but it was because i made an error which resulted in solver form.Ffalse being true</p>",
        "id": 322910918,
        "sender_full_name": "Henkie67",
        "timestamp": 1674424202
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/yc_Z0nlWDf90niTvgLzojeQH/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yc_Z0nlWDf90niTvgLzojeQH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yc_Z0nlWDf90niTvgLzojeQH/image.png\"></a></div><p>do you have any advice on dealing with and statements with a existential quantifier because when i introduce a valuation the induction hypothesis still have theirs</p>",
        "id": 322913074,
        "sender_full_name": "Henkie67",
        "timestamp": 1674425784
    },
    {
        "content": "<p>This goal is probably false</p>",
        "id": 322913413,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674426014
    },
    {
        "content": "<p>it should be true</p>",
        "id": 322913482,
        "sender_full_name": "Henkie67",
        "timestamp": 1674426081
    },
    {
        "content": "<p>Or rather, it's probably true but you're not having the proper induction hypothesis</p>",
        "id": 322913497,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674426092
    },
    {
        "content": "<p>The problem is that the simple existence of a valuation for <code>p</code> and <code>q</code> doesn't mean there's one that does both simultaneously</p>",
        "id": 322913507,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674426108
    },
    {
        "content": "<p>how should the proper one look like then</p>",
        "id": 322913625,
        "sender_full_name": "Henkie67",
        "timestamp": 1674426201
    },
    {
        "content": "<p>I have no idea. Once again, you know the maths better than me.</p>",
        "id": 322913722,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674426265
    },
    {
        "content": "<p>Maybe forget about <code>solver</code> and try proving correctness of <code>find_value</code> directly</p>",
        "id": 322913772,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674426316
    },
    {
        "content": "<p>Lean is not going to do this proof for you automagically. You need to know what the argument is on paper, and then type the argument in. Asking other people to help without telling them the argument is unlikely to work because what we are doing in general in Lean is typing in arguments which we already understand -- we are explaining our knowledge to the computer, not using the computer to generate new knowledge.</p>",
        "id": 322913811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674426354
    },
    {
        "content": "<p>This looks like it would trivial if you made <code>find_val</code> return <code>option { V : valuation // valid V p}</code></p>",
        "id": 322913885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674426397
    },
    {
        "content": "<p>The proof is \"I asked if the valuation I had was a solution, and only returned it if it was\"</p>",
        "id": 322913952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674426461
    },
    {
        "content": "<p>wouldn't this require me to also change find_valuation to option { V : valuation // valid V p} because i am not allowed to change the arguments of that function</p>",
        "id": 322915095,
        "sender_full_name": "Henkie67",
        "timestamp": 1674427322
    },
    {
        "content": "<p>Not the arguments, the return value</p>",
        "id": 322915326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674427468
    },
    {
        "content": "<p>yeah i am also not allowed to change that because of the assignment</p>",
        "id": 322915335,
        "sender_full_name": "Henkie67",
        "timestamp": 1674427488
    },
    {
        "content": "<p>But if you can't change the arguments of that function, write a new <code>find_valuation'</code> that has the new type, and implement <code>find_valuation</code> in terms of it</p>",
        "id": 322915338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674427493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/confused.20about.20theorem/near/322913952\">said</a>:</p>\n<blockquote>\n<p>The proof is \"I asked if the valuation I had was a solution, and only returned it if it was\"</p>\n</blockquote>\n<p>To confirm, I was able to almost completely prove this without ever caring about the definition of <code>form</code> or <code>valid</code></p>",
        "id": 322915487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674427606
    },
    {
        "content": "<p>The only goal that needs thought is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">form</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">length_truth</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">valid</span> <span class=\"n\">valff</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 322915569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674427676
    },
    {
        "content": "<p>thx i will look into this</p>",
        "id": 322915660,
        "sender_full_name": "Henkie67",
        "timestamp": 1674427734
    },
    {
        "content": "<p>I think your method is correct but I am struggling to convince the compiler that the valuation I return are valid and get error's like these <a href=\"/user_uploads/3121/45JgJfuAqHV7unuYgSNCi-pK/image.png\">image.png</a> , I have tried if-else statements which ensure only valid valuations get returned but alas, and proofs using ⟨V,valid V p⟩ in sitatuations were all valuations are valid but still nothing</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/45JgJfuAqHV7unuYgSNCi-pK/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/45JgJfuAqHV7unuYgSNCi-pK/image.png\"></a></div>",
        "id": 322988261,
        "sender_full_name": "Henkie67",
        "timestamp": 1674470771
    },
    {
        "content": "<p>The second entry within the angle brackets needs to be the proof. You've put the statement there</p>",
        "id": 322989134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674471093
    },
    {
        "content": "<p>That's like saying \"here's my proof of <code>true</code>: <code>true</code>\". The proof of <code>true</code> is <code>trivial</code>, not <code>true</code>. The proof of <code>valid valff p</code> is something you'll have to work out; I recommend making a standalone lemma for that.</p>",
        "id": 322989410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674471167
    },
    {
        "content": "<p>but in order to proof valid valff p don't i need to ensure that p is 100% valid without knowing what p is</p>",
        "id": 322996267,
        "sender_full_name": "Henkie67",
        "timestamp": 1674473385
    },
    {
        "content": "<p>Why don't you write a <code>begin sorry end</code> in place of <code>valid valff p</code> and see what your goal state is?</p>",
        "id": 322997233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674473662
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cSKdTsLLyqGvKBKty41r42Ol/image.png\">image.png</a> <br>\nI keep getting this as a goal in pretty much every proof i make I don't know what that weird arrow means tho</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cSKdTsLLyqGvKBKty41r42Ol/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/cSKdTsLLyqGvKBKty41r42Ol/image.png\"></a></div>",
        "id": 323002683,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475372
    },
    {
        "content": "<p>It means \"turn this <code>bool</code> into a <code>Prop</code>\"</p>",
        "id": 323003797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674475729
    },
    {
        "content": "<p>Can you share your new code?</p>",
        "id": 323003810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674475734
    },
    {
        "content": "<p>you mean check_val or the entire thing</p>",
        "id": 323003876,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475761
    },
    {
        "content": "<p>May as well do the entire thing, otherwise it becomes hard to help</p>",
        "id": 323003932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674475774
    },
    {
        "content": "<p>You can put it in <code> ````spoiler </code> (with <code> ```lean </code> inside) to make it collapsible if you want</p>",
        "id": 323003959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674475788
    },
    {
        "content": "<p>will do</p>",
        "id": 323004189,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475883
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323004392,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475945
    },
    {
        "content": "<p>check_val` is the new one</p>",
        "id": 323004479,
        "sender_full_name": "Henkie67",
        "timestamp": 1674475972
    },
    {
        "content": "<p>The trick you're missing is <code>if h : (valid1 valff p) = true then</code> instead of <code>if (valid1 valff p) = true then</code></p>",
        "id": 323004722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674476045
    },
    {
        "content": "<p>Then you have <code>h</code> at the sorry</p>",
        "id": 323004756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674476057
    },
    {
        "content": "<p>that worked nice</p>",
        "id": 323005425,
        "sender_full_name": "Henkie67",
        "timestamp": 1674476264
    },
    {
        "content": "<p>So now i have a function find_valutation ' which returns a valuation that is confirmed valid but how would i use that in proving the solver is valid</p>",
        "id": 323007664,
        "sender_full_name": "Henkie67",
        "timestamp": 1674476953
    },
    {
        "content": "<p>I would redefine <code>find_valuation</code> in terms of <code>find_valuation'</code></p>",
        "id": 323007977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674477031
    },
    {
        "content": "<p>ok but it gives me error that option {V:valuation//valid V p} is not option valuation</p>",
        "id": 323008682,
        "sender_full_name": "Henkie67",
        "timestamp": 1674477285
    },
    {
        "content": "<p>wich seems odd because it is still a valuation</p>",
        "id": 323008904,
        "sender_full_name": "Henkie67",
        "timestamp": 1674477357
    },
    {
        "content": "<p>Sure, you need to do some translation yourself</p>",
        "id": 323011404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674478172
    },
    {
        "content": "<p>Think about how you might turn an <code>option nat</code> into an <code>option int</code></p>",
        "id": 323011455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674478192
    },
    {
        "content": "<p>You will need the same trick here</p>",
        "id": 323011574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674478213
    },
    {
        "content": "<p>used pattern matching and it worked</p>",
        "id": 323011970,
        "sender_full_name": "Henkie67",
        "timestamp": 1674478337
    },
    {
        "content": "<p>So now my solver p has guaranteed a valid valuation for form p if true, but now i need to solve the theorem with it</p>",
        "id": 323013487,
        "sender_full_name": "Henkie67",
        "timestamp": 1674478831
    },
    {
        "content": "<p>to solve satisfiable i need a valuation so how do i retrieve said valuation from solver p</p>",
        "id": 323013641,
        "sender_full_name": "Henkie67",
        "timestamp": 1674478880
    },
    {
        "content": "<p>Case on the value of <code>find_valuation p</code> in your proof</p>",
        "id": 323027192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674482624
    },
    {
        "content": "<p>Then you'll be able to expand the pattern match used in <code>solver</code></p>",
        "id": 323027407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674482671
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/TnYxeaNWCMLak1itP92xERBv/image.png\">image.png</a> <br>\ni managed to solve the none case with simplification but the second case with some valuation i have only managed to reduce it to this,</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TnYxeaNWCMLak1itP92xERBv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/TnYxeaNWCMLak1itP92xERBv/image.png\"></a></div>",
        "id": 323032485,
        "sender_full_name": "Henkie67",
        "timestamp": 1674483804
    },
    {
        "content": "<p>Now unfold <code>solver._match_1</code></p>",
        "id": 323033320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674483999
    },
    {
        "content": "<p>Oh, I guess that's not useful</p>",
        "id": 323033427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674484025
    },
    {
        "content": "<p>You need <code>cases h : find_valuation p</code> not <code>cases find_valuation p</code></p>",
        "id": 323033461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674484034
    },
    {
        "content": "<p>yes now i am only left with this <a href=\"/user_uploads/3121/pF7_PQIrZx4eoaHQVMe-rrYi/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pF7_PQIrZx4eoaHQVMe-rrYi/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pF7_PQIrZx4eoaHQVMe-rrYi/image.png\"></a></div>",
        "id": 323035703,
        "sender_full_name": "Henkie67",
        "timestamp": 1674484620
    },
    {
        "content": "<p>you would think that with a valuation and form that it would be done by now</p>",
        "id": 323035829,
        "sender_full_name": "Henkie67",
        "timestamp": 1674484658
    },
    {
        "content": "<p>You basically are done, now try unfolding <code>find_valuation</code> (and get the match to go away)</p>",
        "id": 323035927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674484677
    },
    {
        "content": "<p>how does one unfold a hypothesis</p>",
        "id": 323036650,
        "sender_full_name": "Henkie67",
        "timestamp": 1674484863
    },
    {
        "content": "<p>sorry if this is a stupid question</p>",
        "id": 323036685,
        "sender_full_name": "Henkie67",
        "timestamp": 1674484874
    },
    {
        "content": "<p><code>rw find_valuation at h</code></p>",
        "id": 323036761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674484890
    },
    {
        "content": "<p>this is as far as i could unfold, <a href=\"/user_uploads/3121/HiG6VLXKCbc3hnwaDzF43cCB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HiG6VLXKCbc3hnwaDzF43cCB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HiG6VLXKCbc3hnwaDzF43cCB/image.png\"></a></div>",
        "id": 323039887,
        "sender_full_name": "Henkie67",
        "timestamp": 1674485627
    },
    {
        "content": "<p>You unfolded further than you need to</p>",
        "id": 323042020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486117
    },
    {
        "content": "<p>Unfold to <code>find_valuation ' whatever</code>, then case on the value of <code>find_valuation '  whatever</code></p>",
        "id": 323042159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486136
    },
    {
        "content": "<p>Your goal is to make the <code>match_1</code> go away</p>",
        "id": 323042295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486167
    },
    {
        "content": "<p>To do that, you need to turn the thing it's applied to into <code>some _</code> or <code>none</code></p>",
        "id": 323042382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486185
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/YXLnqFlwsKjjfg-0Wu72vzkn/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YXLnqFlwsKjjfg-0Wu72vzkn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/YXLnqFlwsKjjfg-0Wu72vzkn/image.png\"></a></div><p>the matches are gone, i solved the other none case already but this is the last one</p>",
        "id": 323047062,
        "sender_full_name": "Henkie67",
        "timestamp": 1674487258
    },
    {
        "content": "<p>Nice, now you can rewrite by <code>h</code> in reverse</p>",
        "id": 323048353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674487565
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323048846,
        "sender_full_name": "Henkie67",
        "timestamp": 1674487674
    },
    {
        "content": "<p>Or <code>subst h</code>, which will clean the rest up a bit too</p>",
        "id": 323049951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674487934
    },
    {
        "content": "<p>yes so now i have valid val_1 p</p>",
        "id": 323050232,
        "sender_full_name": "Henkie67",
        "timestamp": 1674487998
    },
    {
        "content": "<p>Not quite, there's an arrow that you didn't mention too, isn't there?</p>",
        "id": 323050855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488147
    },
    {
        "content": "<p>never find i fixed it</p>",
        "id": 323050999,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488174
    },
    {
        "content": "<p>it is done</p>",
        "id": 323051016,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488179
    },
    {
        "content": "<p>thanks a lot</p>",
        "id": 323051046,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488184
    },
    {
        "content": "<p>i used cases on val_1 and then used the property</p>",
        "id": 323051155,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488213
    },
    {
        "content": "<p><code>exact val_1.prop</code> would also have worked</p>",
        "id": 323051214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488227
    },
    {
        "content": "<p>btw is it ok to delete this topic or delete my code because of school plagarism chekcks and al</p>",
        "id": 323051367,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488266
    },
    {
        "content": "<p>But note this was the easy direction of the interesting thing to prove: what you presumably want is to show that you find a solution iff there is one</p>",
        "id": 323051372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488267
    },
    {
        "content": "<p>It won't be plagiarism if you reference (put a link to) this topic in what you hand in</p>",
        "id": 323051586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488305
    },
    {
        "content": "<p>oke thx</p>",
        "id": 323051645,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488318
    },
    {
        "content": "<p>Was the assigment really to prove <code>solver p = tt → satisfiable p </code>?</p>",
        "id": 323051792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488356
    },
    {
        "content": "<p>because if you implement <code>find_valuation</code> to always return <code>none</code> then that statement is trivial!</p>",
        "id": 323051840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488370
    },
    {
        "content": "<p>yep it was to prove the soundness of the solver</p>",
        "id": 323051917,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488395
    },
    {
        "content": "<p>this was exercise 8 btw of 8</p>",
        "id": 323052044,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488418
    },
    {
        "content": "<p>So a solver that always returns \"I can't solve it\" would get full marks?</p>",
        "id": 323052045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488418
    },
    {
        "content": "<p>no it would invalidate the other exercises</p>",
        "id": 323052123,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488434
    },
    {
        "content": "<p>but thanks to you i might pass this course</p>",
        "id": 323052209,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488464
    },
    {
        "content": "<p>Hey, you wrote all the code!</p>",
        "id": 323052249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674488478
    },
    {
        "content": "<p>i know but i am a embedded c coder so this was quite the switch to make</p>",
        "id": 323052352,
        "sender_full_name": "Henkie67",
        "timestamp": 1674488512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582257\">Henkie67</span> has marked this topic as resolved.</p>",
        "id": 323052593,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674488577
    }
]