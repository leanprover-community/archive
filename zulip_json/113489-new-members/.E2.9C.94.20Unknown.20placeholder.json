[
    {
        "content": "<p>Why is the MWE below throwing the error  (<strong>UPDATED to include full error message</strong>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>at the <code>foo.bar q</code> immediately after the <code>=</code>? My understanding is that something has been left implicit that Lean cannot infer, but I do not see what.</p>\n<p>MWE: (<strong>UPDATED to make a <em>bona fide</em> MWE</strong>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span>  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">foo.bar</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo.bar</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">foo.bar</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">foo.bar</span> <span class=\"n\">q</span> <span class=\"k\">then</span> <span class=\"n\">foo.bar</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">foo.bar</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 342941531,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679235382
    },
    {
        "content": "<p>Quick comments: You should declare the universe <code>u</code> beforehand (or just use <code>Type*</code>), as well as the types <code>P</code> and <code>Q</code> in the definition of <code>baz</code> (which can be implicit).<br>\nThe problem seems to be that you don't know that <code>P</code> has decidable equality, but not sure yet.</p>",
        "id": 342944751,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1679236563
    },
    {
        "content": "<p>As Pedro remarks, this isn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> as the very first line doesn't compile</p>",
        "id": 342945482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679236837
    },
    {
        "content": "<p>I realized there was a problem by making the type parameters of <code>foo.bar</code> explicit using <code>@</code>: This gave a better error message.</p>",
        "id": 342945620,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1679236901
    },
    {
        "content": "<blockquote>\n<p>don't know how to synthesize placeholder</p>\n</blockquote>\n<p>Please include the full message; it contains important information that helps solve your problem</p>",
        "id": 342945629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679236904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> <a href=\"#narrow/stream/113489-new-members/topic/Unknown.20placeholder/near/342941531\">said</a>:</p>\n<blockquote>\n<p>Why is the MWE below throwing the error <code>don't know how to synthesize placeholder</code> at the <code>foo.bar q</code> immediately after the <code>=</code>? My understanding is that something has been left implicit that Lean cannot infer, but I do not see what.</p>\n<p>MWE:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Actually, it seems that the definition does not depend on <code>L</code>, and Lean can't figure out that type argument. The following seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">L</span><span class=\"o\">]:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">foo.bar</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo.bar</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">foo.bar</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo.bar</span> <span class=\"n\">_</span> <span class=\"n\">L</span> <span class=\"n\">q</span> <span class=\"k\">then</span> <span class=\"n\">foo.bar</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">foo.bar</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 342946430,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1679237152
    },
    {
        "content": "<p>Of course it might make more sense to test whether <code>p = q</code> instead...</p>",
        "id": 342946834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679237286
    },
    {
        "content": "<p>I updated my original message based on your comments. Thanks.</p>",
        "id": 342962854,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679243772
    },
    {
        "content": "<p>Here's the actual example (no longer an attempt at being minimal, but still pretty short).  This one does use <code>L</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">flats_lattice</span>  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">points</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n<span class=\"bp\">|</span> <span class=\"n\">lines</span>  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">flats_lattice</span>\n<span class=\"kd\">def</span> <span class=\"n\">meet</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">points</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">points</span> <span class=\"n\">q</span> <span class=\"k\">then</span> <span class=\"n\">points</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">flats_lattice</span>\n</code></pre></div>\n<p>and here's the error message, which, again, is at the <code>points q</code> immediately following the <code>=</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">meet</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 342964263,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679244555
    },
    {
        "content": "<p>Yeah it's the same issue as above.</p>",
        "id": 342964953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679244894
    },
    {
        "content": "<p>Is there a reason you don't write <code>if p = q then points p else zero</code>?</p>",
        "id": 342964991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679244909
    },
    {
        "content": "<p>I tried that and it wasn't working so I thought I need to include <code>points</code>, but now</p>",
        "id": 342967120,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679246124
    },
    {
        "content": "<p>changing it to what you've suggested gives a more telling error (indeed about decidability as suggested above):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">meet</span> <span class=\"o\">:</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">flats_lattice</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 342967239,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679246167
    },
    {
        "content": "<p>So you need <code>[decidable_eq P]</code></p>",
        "id": 342967275,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679246191
    },
    {
        "content": "<p>Thanks. Is there a good place to read about that or at least to see a good example?</p>",
        "id": 342967803,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679246491
    },
    {
        "content": "<p><code>decidable (p = q)</code> is nothing but \"the typeclass needed to make <code>if p = q then x else y</code> make sense\"</p>",
        "id": 342969251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247250
    },
    {
        "content": "<p>And if you look at <code>decidable_eq X</code> it's just a shorthand for <code>Π p q : X, decidable (p = q)</code></p>",
        "id": 342969302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247290
    },
    {
        "content": "<p>It seems that I do need <code>points</code> in <code>if p = q then points p else zero</code>. True?</p>",
        "id": 342973608,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1679249606
    },
    {
        "content": "<p>Yes, you need it on the RHS of the <code>then</code></p>",
        "id": 342973701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679249646
    },
    {
        "content": "<p>but you don't need <code>points p = points q</code></p>",
        "id": 342973732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679249682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 342973969,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679249830
    }
]