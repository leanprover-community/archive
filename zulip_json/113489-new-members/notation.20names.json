[
    {
        "content": "<p>In Lean 3, what does the syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>mean?  I haven't been able to find any documentation of it.</p>",
        "id": 305195568,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1666285261
    },
    {
        "content": "<p>This is a recently added feature, for the port, so it isn't documented anywhere properly I think, see <a href=\"https://github.com/leanprover-community/lean/pull/754\">https://github.com/leanprover-community/lean/pull/754</a></p>",
        "id": 305195999,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666285375
    },
    {
        "content": "<p>Context: I wanted to define a version of negation that acts on types rather than props.  This works fine in the Lean web editor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">empty</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`¬`</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>However, on <em>some</em> local installations (I haven't figured out what they have in common), this gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kd\">notation</span><span class=\"o\">:</span> <span class=\"kd\">notation</span> <span class=\"n\">already</span> <span class=\"n\">declared.</span> <span class=\"n\">Consider</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"bp\">'</span>\n</code></pre></div>\n<p>which is where I learned about the existence of this syntax.  On those installations, adding such an annotation to the above definition of negation does indeed fix the problem.  However, on installations where the annotation <em>isn't</em> required (including the Lean web editor), including the annotation gives a <code>unknown identifier</code> error.</p>",
        "id": 305196410,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1666285493
    },
    {
        "content": "<p>Ah, maybe the difference is that the web editor is still using Lean 3.46.0, and new installations that have Lean 3.47.0 require the annotation?</p>",
        "id": 305196997,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1666285659
    },
    {
        "content": "<p>It's a shame if it's now impossible to write code that works in both versions.</p>",
        "id": 305197133,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1666285687
    },
    {
        "content": "<p>Is there some other way to declare overloaded notations that would work in both 3.46 and 3.47?</p>",
        "id": 305197251,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1666285729
    },
    {
        "content": "<p>When I ran into this issue, I found it easier to implement an instance of the underlying notation typeclass.</p>",
        "id": 305197356,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666285768
    },
    {
        "content": "<p>what.</p>",
        "id": 305197375,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1666285779
    },
    {
        "content": "<p>This is Lean 4. Let me link to an example.</p>",
        "id": 305197520,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666285810
    },
    {
        "content": "<p>Will it also work in Lean 3?</p>",
        "id": 305197584,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1666285828
    },
    {
        "content": "<p>Eg. <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#EmptyCollection\"><code>EmptyCollection</code></a> exists to supply <code>∅</code></p>",
        "id": 305198037,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666285952
    },
    {
        "content": "<p>Maybe not for <code>not</code> it's defined as this in lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"kd\">prefix</span> <span class=\"bp\">`¬`</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"o\">:=</span> <span class=\"n\">not</span>\n</code></pre></div>",
        "id": 305198051,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666285955
    },
    {
        "content": "<p>Is <code>¬</code> reserved this way in Lean 3?</p>",
        "id": 305198297,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666286024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381187\">Mike Shulman</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20names/near/305196997\">said</a>:</p>\n<blockquote>\n<p>Ah, maybe the difference is that the web editor is still using Lean 3.46.0, and new installations that have Lean 3.47.0 require the annotation?</p>\n</blockquote>\n<p>The web editor thing certainly is annoying (iirc the issue is that it is now too big for the previous CI upload method or something).<br>\nWhat is your use case for the editor? I'd recommend sticking to the newest lean and using gitpod instead for a web-based play around, does that work for you?</p>",
        "id": 305198606,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666286108
    },
    {
        "content": "<p>Yes. It is the upgrade in Lean 3.47. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/296106859\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/3d7987cda72abc473c7cdbbb075170e9ac620042\">chore(*): bump to lean 3.47.0</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib/pull/16252\">mathlib#16252</a>)</p>\n<p>A major change is that notations now require names when they are shadowing another identical notation, even if it is a local notation. Also, because localized notations can be imported in a variety of contexts, there are some new best practices for them:</p>\n<ul>\n<li>localized notations should always have a <code>(name := ...)</code>. Notation names are unrelated to declaration names, but the declaration name is a reasonable base for the notation name.</li>\n<li>localized notations should never use <code>_</code> in the notation, because this gets desugared to a unique metavariable index, meaning that the notation will not be recognized as a duplicate of itself if <code>open_locale</code> is used when the notation is already available. Instead, you should use the <code>hole!</code> notation, which unfolds to <code>_</code>.</li>\n</ul>\n<p>Another major change is that projection notation (<code>x.foo</code>) now always instantiates implicit arguments with metavariables, which is consistent with Lean 4. To simulate the older behavior, one can use either strict implicit arguments for the structure field (e.g. <code>∀ {{n}}, p n</code> instead of <code>∀ {n}, p n</code>) or, depending on specifics, writing <code>λ _, x.foo</code> to ensure the implicit argument is preserved as an argument.</p>\n<p>Co-authored-by: Kyle Miller &lt;<a href=\"mailto:kmill31415@gmail.com\">kmill31415@gmail.com</a>&gt;</p>\n<p>Authored-by: <a href=\"https://github.com/digama0\">digama0</a> <a href=\"https://github.com/leanprover-community/mathlib/commit/3d7987cda72abc473c7cdbbb075170e9ac620042\">(commit)</a></p>\n</blockquote>",
        "id": 305202390,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666287310
    },
    {
        "content": "<p>22 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/lean.20in.20browser.20on.20classroom.20PC\">#new members &gt; lean in browser on classroom PC</a> by <span class=\"user-mention silent\" data-user-id=\"381187\">Mike Shulman</span>.</p>",
        "id": 306749778,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666991314
    }
]