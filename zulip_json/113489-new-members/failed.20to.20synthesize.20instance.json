[
    {
        "content": "<p><a href=\"/user_uploads/3121/tNx97VY-tMAnupSJ7Et0D0dE/image.png\">image.png</a> how do I fix this error in Lean 4? It shouldn't be one since the required instance is in a hypothesis</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tNx97VY-tMAnupSJ7Et0D0dE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tNx97VY-tMAnupSJ7Et0D0dE/image.png\"></a></div>",
        "id": 341970682,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678863015
    },
    {
        "content": "<p>What happens if you do <code>resetI</code> before the failing command? I don't know if that got ported yet but it would solve the problem in lean 3. Here I don't know whether the problem is the one solved by <code>resetI</code> (instance cache needs resetting) or <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a></p>",
        "id": 341978112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678866036
    },
    {
        "content": "<p><code>resetI</code> is not ported yet, and neither are the other <code>I</code> versions of tactics</p>",
        "id": 341978806,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678866268
    },
    {
        "content": "<p><code>resetI</code> should not be necessary</p>",
        "id": 341978980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678866327
    },
    {
        "content": "<p>it happens automatically and transparently now</p>",
        "id": 341979071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678866352
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 341979087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678866357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20synthesize.20instance/near/341979087\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CharP.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">ExpChar</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">[</span><span class=\"n\">CharZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ExpChar</span> <span class=\"n\">R</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Prime</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hprime</span> <span class=\"o\">:</span> <span class=\"n\">q.Prime</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hchar</span> <span class=\"o\">:</span> <span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ExpChar</span> <span class=\"n\">R</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">char_eq_expChar_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">ExpChar</span> <span class=\"n\">R</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">p.Prime</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">expChar_is_prime_or_one</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">ExpChar</span> <span class=\"n\">R</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">or_iff_not_imp_right.mpr</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">CharP.exists</span> <span class=\"n\">R</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_eq_q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">char_eq_expChar_iff</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"c1\">-- here</span>\n</code></pre></div>",
        "id": 341982999,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678867562
    },
    {
        "content": "<p>if you use <code>obtain</code> instead of <code>cases'</code> then the error disappears (well, it changes to a type error, which is expected given <code>char_eq_expChar_iff</code>)</p>",
        "id": 342080677,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678891983
    },
    {
        "content": "<p>Somehow there are two threads about this, there's also a discussion in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a></p>",
        "id": 342082794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678892434
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/!4.232894</a></p>",
        "id": 342082956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678892462
    },
    {
        "content": "<p>Hi, I'm trying my first programming project in Lean and I've run into the following difficulty:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Repr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Primitive</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Attr</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Primitive</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Primitive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Record</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Attr</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span><span class=\"o\">):</span> <span class=\"n\">Value</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span> <span class=\"c1\">-- fails with \"failed to synthesize instance Repr (Attr -&gt; Value)\"</span>\n</code></pre></div>\n<p>Where I'd like to use <code>r: Attr → Value</code> as a Map from Attrs to Values. The definition seem to work, but in order to print I'd like to derive <code>Repr</code> for <code>Value</code>.  When I try I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n    <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Attr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I assume because Value is recursive. Is there a way I can derive Repr for Value (possibly by writing my own function to print Values)? Sorry for the noob question, I couldn't seem to find documentation for this.</p>",
        "id": 345261127,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1680046095
    },
    {
        "content": "<p>Do you want <code>Record</code> to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Attr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span>\n</code></pre></div>",
        "id": 345261885,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680046537
    },
    {
        "content": "<p>I could be wrong here but you could do <code>Record : Attr -&gt; Value</code> if that is what you were intending.</p>",
        "id": 345261985,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680046583
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Repr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Primitive</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Attr</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Primitive</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Primitive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Record</span> <span class=\"o\">:</span> <span class=\"n\">Attr</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span> <span class=\"c1\">-- fails with \"failed to synthesize instance Repr (Attr -&gt; Value)\"</span>\n</code></pre></div>\n<p>Doesn't error out is what I am alluding to.</p>",
        "id": 345262226,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680046719
    },
    {
        "content": "<p>My intention is to be able to pass in structured data as &lt;key, value&gt; pairs where ultimately values will be primitives, but maybe not initially. So I could have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_record</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Attr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"foo\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Value.Primitive</span> <span class=\"o\">(</span><span class=\"n\">Primitive.Bool</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inner_record</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Attr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"foo\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Value.Primitive</span> <span class=\"o\">(</span><span class=\"n\">Primitive.Bool</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Value.Wrong</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_record</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Attr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"foo\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inner_record</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Value.Wrong</span>\n</code></pre></div>\n<p>to represent what would be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"s2\">\"foo\"</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"s2\">\"foo\"</span><span class=\"o\">:{</span><span class=\"s2\">\"foo\"</span><span class=\"o\">:</span><span class=\"n\">false</span><span class=\"o\">}}</span>\n</code></pre></div>\n<p>in python/json/whatever</p>",
        "id": 345262598,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1680046943
    },
    {
        "content": "<p>The book Functional Programming for Lean 4 has section on JSON which might be helpful.</p>",
        "id": 345264727,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680048240
    },
    {
        "content": "<p>On mobile with one hand tied up throwing ball for my dogs so hard to look into it more at the moment.</p>",
        "id": 345265083,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680048386
    },
    {
        "content": "<p>Thanks for the help! I'll take a look.</p>",
        "id": 345265247,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1680048489
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Repr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Primitive</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Attr</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Primitive</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Primitive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Record</span> <span class=\"o\">:</span> <span class=\"n\">Attr</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span> <span class=\"c1\">-- fails with \"failed to synthesize instance Repr (Attr -&gt; Value)\"</span>\n</code></pre></div>\n<p>So the <code>-&gt;</code> is right associative</p>",
        "id": 345265864,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680048869
    },
    {
        "content": "<p>At any rate, that doesn't error out (note to self: change the comments on someone's code block with your own comments)</p>",
        "id": 345266010,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680048957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"604246\">Andrew Wells</span> <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20synthesize.20instance/near/345261127\">said</a>:</p>\n<blockquote>\n<p>Is there a way I can derive Repr for Value (possibly by writing my own function to print Values)? Sorry for the noob question, I couldn't seem to find documentation for this.</p>\n</blockquote>\n<p>You would need a way to print functions, since the argument <code>r</code> of the <code>Record</code> constructor is a function. And in general there's not an obvious way.</p>",
        "id": 345299022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680069272
    },
    {
        "content": "<p>A co-worker gave the following solution, which I like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Repr</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.AssocList</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- Derive Repr for AssocList</span>\n<span class=\"c1\">-- From https://leanprover-community.github.io/archive/stream/270676-lean4/topic/AssocList.20.22failed.20to.20synthesize.22.html</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">AssocList</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">repr</span> <span class=\"n\">f.toList</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Primitive</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Attr</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Primitive</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Primitive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Record</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">Attr</span> <span class=\"n\">Value</span><span class=\"o\">):</span> <span class=\"n\">Value</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>Thanks for the help!</p>",
        "id": 345484720,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1680114297
    }
]