[
    {
        "content": "<p>Do you know offhand why overloading =&gt; causes the following failure (Lean 3)? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>    <span class=\"c1\">-- Prop</span>\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">pImp</span><span class=\"o\">)</span> <span class=\"n\">e1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"n\">pBinOp</span> <span class=\"n\">opImp</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span>\n<span class=\"k\">#check</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>    <span class=\"c1\">-- INVALID EXPRESSION</span>\n</code></pre></div>\n<p>Changing = to == (eq to heq) makes the error go away, as does changing the operator from =&gt; to ==&gt;</p>",
        "id": 325448021,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1675357150
    },
    {
        "content": "<p>You didn't put backquotes around the <code>=&gt;</code> operator, so it's probably being lexed as two tokens. That is, you are actually defining <code>e1 = &gt; e2</code> and this breaks the behavior of the <code>=</code> operator</p>",
        "id": 325452545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675358352
    },
    {
        "content": "<p>indeed, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>    <span class=\"c1\">-- Prop</span>\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">pImp</span><span class=\"o\">)</span> <span class=\"n\">e1</span> <span class=\"bp\">`</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"n\">pBinOp</span> <span class=\"n\">opImp</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span>\n<span class=\"k\">#check</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>    <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 325453010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675358481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/operator.20overload.20issue/near/325453010\">said</a>:</p>\n<blockquote>\n<p>indeed, this works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>    <span class=\"c1\">-- Prop</span>\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">pImp</span><span class=\"o\">)</span> <span class=\"n\">e1</span> <span class=\"bp\">`</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"n\">pBinOp</span> <span class=\"n\">opImp</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span>\n<span class=\"k\">#check</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>    <span class=\"c1\">-- ok</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yeah, thanks. I was just adding them when you replied (head lowered).</p>",
        "id": 325453221,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1675358525
    },
    {
        "content": "<p>alternatively you can declare <code>=&gt;</code> as a token beforehand</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>    <span class=\"c1\">-- Prop</span>\n<span class=\"kd\">precedence</span> <span class=\"bp\">`=&gt;`</span><span class=\"o\">:</span><span class=\"mi\">50</span>\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">pImp</span><span class=\"o\">)</span> <span class=\"n\">e1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"n\">e1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">e2</span>\n<span class=\"k\">#check</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>    <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 325453326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675358549
    }
]