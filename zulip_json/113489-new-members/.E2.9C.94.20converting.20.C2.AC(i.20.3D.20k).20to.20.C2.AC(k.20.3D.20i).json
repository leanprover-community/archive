[
    {
        "content": "<p>Heya!</p>\n<p>I've been getting my feet wet in lean4 and I can't seem to find a point I can latch on to understand how I could transform <code>¬(k = i)</code> to  <code>¬(i = k)</code>.</p>\n<p>I understand that <code>Not p</code> is just <code>p -&gt; False</code>, but I was hoping I could still rewrite this anyway since <code>a = b \\iff b = a</code></p>\n<p>I tried using <code>conv =&gt; args; apply Eq.symm</code> but this gave me a new subgoal instead and I think I just don't understand it well.</p>\n<p>Does someone maybe have a pointer into what I could be doing wrong? This feels like I should  be able to rewrite it with <code>Eq.symm</code> but that only gives me \"tactic 'rewrite' failed, pattern is a metavariable\" and googling that gives me nothing I can understand.</p>\n<p>Thank you!</p>",
        "id": 398968901,
        "sender_full_name": "Hemera",
        "timestamp": 1698441080
    },
    {
        "content": "<p><code>Eq.symm</code> is <code>a = b -&gt; b = a</code>. <code>Eq.comm</code> is the iff version. Rewrite with the latter instead.</p>",
        "id": 398969004,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698441149
    },
    {
        "content": "<p>If I try that, it gives me a different error:</p>\n<p><code>theorem not_comm: ¬(i = k) -&gt; ¬(k = i) := by rw [Eq.comm]</code></p>\n<p>the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">Eq</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.1820</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.1820</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">or</span> <span class=\"n\">iff</span> <span class=\"n\">proof</span> <span class=\"n\">expected</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.1822</span>\n<span class=\"n\">α</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span>\n<span class=\"n\">ik</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>I also can't seem to find <code>Eq.comm</code> ?</p>",
        "id": 398970806,
        "sender_full_name": "Hemera",
        "timestamp": 1698442158
    },
    {
        "content": "<p>it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eq_comm#doc\">docs#eq_comm</a></p>",
        "id": 398970919,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698442221
    },
    {
        "content": "<p>Note that the reason <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Eq.symm#doc\">docs#Eq.symm</a> is in the <code>Eq</code> namespace but <code>eq_comm</code> isn't is primarily because the former can make use of dot notation (i.e., if you have <code>h : a = b</code>, then you can write <code>h.symm</code> which has type <code>b = a</code>), while the latter can't because it's an <code>↔</code>.</p>",
        "id": 398971019,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698442312
    },
    {
        "content": "<p>Awesome! </p>\n<p>I got a convoluted solution, but it is one :D</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_comm</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Now to understand how to simplify it.</p>\n<p>Thank you!</p>",
        "id": 398972060,
        "sender_full_name": "Hemera",
        "timestamp": 1698442963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662711\">Hemera</span> has marked this topic as resolved.</p>",
        "id": 398972066,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698442966
    },
    {
        "content": "<p>It does feel like we could create a better error message for \"no definition with this name exists\" than \"invalid field notation.</p>",
        "id": 398972072,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698442971
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_comm</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">Eq.symm</span>\n</code></pre></div>",
        "id": 398975324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698445091
    },
    {
        "content": "<p>If you don't really need to use <code>Eq.symm</code>, you also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ne.symm#doc\">docs#Ne.symm</a></p>",
        "id": 398985718,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1698453002
    }
]