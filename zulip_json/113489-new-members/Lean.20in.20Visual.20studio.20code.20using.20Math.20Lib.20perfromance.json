[
    {
        "content": "<p>I've been working trhough the exercices in the  Mathematics in Lean book (which imports Mathlib) but every so often the whole thing gets stuck and I have to restart the lean server, it seems to take multiple minutes to get this all working again. What do people think the performance of e.g. restarting the lean server in this sort of file should be? Am I missing something that I should have done to make this faster. I can't find any logs that are doing anything in VS code and the lean.exe process doesn't seem to be doing anything with CPU but is reading something from the disk</p>",
        "id": 393314074,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695757499
    },
    {
        "content": "<p>This issue is a problem with some runaway processes and threads which will hopefully be fixed in the near future. See this github issue and linked threads: <a href=\"https://github.com/leanprover/vscode-lean4/issues/305\">https://github.com/leanprover/vscode-lean4/issues/305</a></p>",
        "id": 393315191,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695757934
    },
    {
        "content": "<p>Does the startup time seem reasonable? It sometimes also have messages like \"info: [798/1637] Building Mathlib.GroupTheory.Subsemigroup.Basic\" or whatever so I'm wondering if I've missed something that would cache the build of MathLib or something like that</p>",
        "id": 393316354,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695758297
    },
    {
        "content": "<p>Also are there any workarounds that make this more reliable somehow?</p>",
        "id": 393317143,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695758489
    },
    {
        "content": "<p>That doesn't  sounds good. Try closing vscode and ending all lean processes running, then run <code>lake exe cache get</code> from the terminal within the Mathematics in lean directory</p>",
        "id": 393317572,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695758574
    },
    {
        "content": "<p>This should download cached build files that are stored online so your computer doesnt need to build them</p>",
        "id": 393317682,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695758609
    },
    {
        "content": "<p>hmm it says \"<br>\nNo files to download<br>\nDecompressing 3678 file(s)<br>\nunpacked in 57589 ms<br>\n\"<br>\nDoes that mean it thinks it has already downloaded them? Or does it mean it can't find them?</p>",
        "id": 393319852,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695759177
    },
    {
        "content": "<p>Here's what I do when everything seems to be going very wrong. First I do the <code>Lean 4: stop server</code> command from within VS Code. After that, in the terminal:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>killall<span class=\"w\"> </span>lean<span class=\"w\"> </span><span class=\"c1\"># or pkill if you in an environment like Gitpod</span>\nkillall<span class=\"w\"> </span>lake<span class=\"w\"> </span><span class=\"c1\"># not sure if this is necessary, but I don't want it to feel left out</span>\nlake<span class=\"w\"> </span>clean\nlake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get!<span class=\"w\"> </span><span class=\"c1\"># the ! is probably not necessary after a clean</span>\n</code></pre></div>\n<p>Sometimes at this point I do <code>lake build</code> to be sure that the cache is actually picked up. This might build a couple things, but it should be at most a minute. Only after all of this do I do <code>Lean 4: restart server</code> in VS Code.</p>",
        "id": 393320024,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695759219
    },
    {
        "content": "<p>Also could this be caused by using a nightly version of lean</p>",
        "id": 393320559,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695759333
    },
    {
        "content": "<p>Yes, depending on what you mean. Could you give the contents of the <code>lean-toolchain</code> file and the output of <code>lean --version</code> from within the project root?</p>",
        "id": 393320800,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695759382
    },
    {
        "content": "<p>(You might have nightly lean installed, but the <code>lean-toolchain</code> file is meant to control which version actually gets used for your project. If you use lean/elan installed by your OS package manager, you can end up in a situation where the OS lean always gets used, which is not good.)</p>",
        "id": 393321036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695759432
    },
    {
        "content": "<p>both seem to say \"leanprover/lean4:nightly-2023-08-23\" and \"Lean (version 4.0.0-nightly-2023-08-23, commit 216d2460e0ad, Release)\"</p>",
        "id": 393322091,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695759662
    },
    {
        "content": "<p>lake exe cache get doesn't seem to have made this sort itself out quick so going to try your thing</p>",
        "id": 393322455,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695759788
    },
    {
        "content": "<p>Hmm wonder what I've done wrong, this seems significantly better in gitpod</p>",
        "id": 393325817,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695761060
    },
    {
        "content": "<p>What does <code>git status</code> report?</p>",
        "id": 393327124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695761517
    },
    {
        "content": "<p>Okay it's definitely better having cleaned the cache</p>",
        "id": 393330144,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695762499
    },
    {
        "content": "<p>git status just shows a 5 or so of the modified exercise files I've been doing</p>",
        "id": 393330289,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695762562
    },
    {
        "content": "<p>(although I think the recommended workflow is to copy all the exercise files and work on the copied files)</p>",
        "id": 393332218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695763395
    },
    {
        "content": "<p>One of the 4.1 release candidates had a buggy cache. This should be fixed with 4.2<br>\n<span class=\"user-mention silent\" data-user-id=\"217253\">Leo Shine</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20in.20Visual.20studio.20code.20using.20Math.20Lib.20perfromance/near/393320559\">said</a>:</p>\n<blockquote>\n<p>Also could this be caused by using a nightly version of lean</p>\n</blockquote>",
        "id": 393339859,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695766973
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> Leo appears to be using a nightly for 4.0 that MIL wants -- does this buggy cache issue apply pre-4.1?)</p>",
        "id": 393343750,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695769043
    },
    {
        "content": "<p>Probably not. I used this toolchain and had no trouble with cache. I see two separate complaints in what Leo is saying. </p>\n<ol>\n<li>Start up time because vscode is building mathlib from scratch. In that version the most likely reason is that the lean-toolchain mismatch between mathlib and the project. But once the cache is messed up, it is best to clean <code>~/.cache/mathlib</code>. I am not sure <code>lake clean</code> does that or <code>get!</code> has any effect on that folder.</li>\n<li>The extension grinding to a halt while being used. This is about the runaway threads and processes when one types in imports (this one is about processes). We discussed this before and the thread is in the issue I linked.</li>\n</ol>",
        "id": 393344443,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695769362
    },
    {
        "content": "<p>use <code>lake exe cache clean</code> or <code>lake exe cache clean!</code> to clean up <code>~/.cache/mathlib</code></p>",
        "id": 393345879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695770227
    },
    {
        "content": "<p>Thanks everyone,  definitely feels like the lake exe cache clean  has helped, but yes also a separate issue with why it grinds to a halt and for whatever reason the gitpod thing is definitely significantly faster than whatever I've got set up on my local machine</p>",
        "id": 393397532,
        "sender_full_name": "Leo Shine",
        "timestamp": 1695793680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217253\">Leo Shine</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20in.20Visual.20studio.20code.20using.20Math.20Lib.20perfromance/near/393397532\">said</a>:</p>\n<blockquote>\n<p>Thanks everyone,  definitely feels like the lake exe cache clean  has helped, but yes also a separate issue with why it grinds to a halt and for whatever reason the gitpod thing is definitely significantly faster than whatever I've got set up on my local machine</p>\n</blockquote>\n<p>It is possible that gitpod kills off excessively resource consuming processes to maintain resource limits.</p>",
        "id": 393498453,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695823646
    }
]