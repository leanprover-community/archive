[
    {
        "content": "<p>Hello, this is somewhat of a follow-up to <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Pi.20ne.20zero.20apply\">the topic I had opened recently</a>. </p>\n<p>I have the following MWE lemma I want to prove, but I'm struggling with this. I hope it's not the case that this isn't provable as in my other topic.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_eq_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hlin</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.univ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fin.fintype</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n      <span class=\"bp\">→</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- intros i i_el eq_zero,</span>\n  <span class=\"c1\">-- rw finset.sum_fn at hlin,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>My idea would be to somehow push the <code>∀ (i : fin m)</code> inside the <code>finset.univ.sum</code>, then I can just do <code>exact hlin</code>, but it's not quite working, I'm guessing due to the <code>i ∈ finset.univ</code>. I have some tactics commented out, those get me started, but maybe it's the wrong idea.</p>\n<p>Any help is much appreciated :) Thanks!</p>\n<p>The context of this lemma is proving positive definiteness of a matrix if a matrix has linearly independent columns.</p>",
        "id": 340655580,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678379660
    },
    {
        "content": "<p>What are the imports?</p>",
        "id": 340655772,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678379708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Lambda.20in.20sum.20proof/near/340655772\">said</a>:</p>\n<blockquote>\n<p>What are the imports?</p>\n</blockquote>\n<p>Sorry, forgot to add them, edited my question</p>",
        "id": 340655869,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678379736
    },
    {
        "content": "<p>What do you want this lemma to say? Currently it looks like it says if the product vector <code>X * a</code> is non-zero then every element of that vector is non-zero? Which doesn't sound true to me.</p>",
        "id": 340659382,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678380499
    },
    {
        "content": "<p>Do you know about the notations for these finite sums?</p>",
        "id": 340659879,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678380653
    },
    {
        "content": "<p>It would probably help all of us read your code, and make it more likely that you write what you mean</p>",
        "id": 340660057,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678380702
    },
    {
        "content": "<p>In particular I think the hypothesis is summing over <code>i</code> (only), while the conclusion is summing over <code>j</code>.</p>",
        "id": 340660698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678380867
    },
    {
        "content": "<p>I guess it's possible this is what you mean, if you insert parentheses strategically in the conclusion (before <code>-&gt; false</code>)</p>",
        "id": 340660896,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678380918
    },
    {
        "content": "<p>Or wait no that's not right because <code>hlin</code> says the sum is <em>not</em> zero... confusing. You can also use <code>\\ne</code> instead of this <code>=</code> and <code>-&gt; false</code>.</p>",
        "id": 340661123,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678380967
    },
    {
        "content": "<p>Thanks for the answers!<br>\nI probably messed up my MWE (again...), sorry!</p>\n<p>Yes I'm aware of the sum notation, I just copied the context that Lean gave me for my main theorem to construct this MWE, but my Emacs does not display it with the sum notation, unfortunately.</p>\n<p>I'm posting my entire theorem here, hopefully this makes it easier, I should really learn not to mess up my MWEs...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.pos_def</span>\n\n<span class=\"c1\">-- Copied from stdlib as stdlib notation does not parse</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"postfix `ᵀ`:1500 := matrix.transpose\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"infixl ` ⬝ `:75 := matrix.mul\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_def_assoc</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">matrix.dot_product</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">X</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.dot_product</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_mul</span> <span class=\"n\">a</span> <span class=\"n\">X</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">matrix.mul_vec</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_def_iff_linear_independent</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hLinIn</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pos_def</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.pos_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.linear_independent_iff</span> <span class=\"n\">at</span> <span class=\"n\">hLinIn</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.is_hermitian</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.conj_transpose_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_R_or_C.re_to_real</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">matrix.dot_product</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">X</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hLinIn</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pos_def_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.vec_mul_transpose</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.dot_product</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset.sum_pos</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset.univ_nonempty_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"k\">have</span> <span class=\"n\">inhabited_pred_succ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">fin.inhabited</span> <span class=\"n\">m.pred</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.succ_pred_eq_of_pos</span> <span class=\"n\">hm</span> <span class=\"n\">at</span> <span class=\"n\">inhabited_pred_succ</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">inhabited_pred_succ</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nonempty_of_inhabited</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So the <code>sorry</code> in <code>pos_def_iff_linear_independent</code> is the spot where I am stuck.</p>\n<p>I also just realized this is not a good name, as I'm only proving the implication one way, not <code>iff</code>.</p>\n<p>Also, it's a bit messy, I should group the <code>rw</code> with <code>[]</code>, and clean it up a bit more.</p>",
        "id": 340662525,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678381294
    },
    {
        "content": "<p>Hopefully I did not mess up the linear algebra itself</p>",
        "id": 340663920,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678381637
    },
    {
        "content": "<p>Can be cleaned up but hopefully this is enough to get you unstuck</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.pos_def</span>\n\n<span class=\"c1\">-- Copied from stdlib as stdlib notation does not parse</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"postfix `ᵀ`:1500 := matrix.transpose\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"infixl ` ⬝ `:75 := matrix.mul\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_def_assoc</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">matrix.dot_product</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">X</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.dot_product</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_mul</span> <span class=\"n\">a</span> <span class=\"n\">X</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">matrix.mul_vec</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_def_iff_linear_independent</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hLinIn</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pos_def</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.pos_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.linear_independent_iff</span> <span class=\"n\">at</span> <span class=\"n\">hLinIn</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.is_hermitian</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.conj_transpose_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_R_or_C.re_to_real</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">matrix.dot_product</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">X</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hLinIn</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pos_def_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.vec_mul_transpose</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.dot_product</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset.sum_pos</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hLinIn</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">pow_two_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"o\">},</span>\n     <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset.univ_nonempty_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"k\">have</span> <span class=\"n\">inhabited_pred_succ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">fin.inhabited</span> <span class=\"n\">m.pred</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.succ_pred_eq_of_pos</span> <span class=\"n\">hm</span> <span class=\"n\">at</span> <span class=\"n\">inhabited_pred_succ</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">inhabited_pred_succ</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nonempty_of_inhabited</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340666372,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678382239
    },
    {
        "content": "<p>to finish you'll need to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.vec_mul_transpose\">docs#matrix.vec_mul_transpose</a> or something I guess<br>\nEDIT: oops i'm not even sure this works still!</p>",
        "id": 340666509,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678382276
    },
    {
        "content": "<p>Maybe you need to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_pos'\">docs#finset.sum_pos'</a> rather than sum_pos, this is the weaker statement that at least one entry is positive, not that all are</p>",
        "id": 340669592,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678383021
    },
    {
        "content": "<p>Thank you Alex, I tried to continue with yours and I made a bit of progress, but not there fully. I will also try the weaker statement, because that sounds promising. In retrospect, it makes sense that <code>apply</code> could lead astray, same as with <code>left/right</code> or similar. Is there a list of tactics that can lead you off the correct path? Can that happen with <code>rw</code>?</p>",
        "id": 340671615,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678383523
    },
    {
        "content": "<p><code>rw</code> is reversible so if you change the goal to something you could always change it back, though it could leave a side goal that is unprovable along the way, so it could be unsafe in this sense but most often isn't.<br>\nYou are right that that's exactly what I did in my head to identify the problem line, the original statement seemed true, but the goal we reached at the end didn't so something must have got us into an unprovable state. Things like intro and rewrite and simp don't tend to do this, but apply definitely can! And claiming that all entries of something are positive to prove that the sum is definitely seems quite strong!</p>",
        "id": 340672582,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678383762
    },
    {
        "content": "<p>I've managed to do it with the weaker theorem using modus tollens, it was a bit of a struggle. I've tried to clean it up, but there might be ways to shorten it even more. I'm posting it here, in case anyone finds this thread via the search in the future.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.pos_def</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_def_assoc</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">matrix.dot_product</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">X</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">matrix.dot_product</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_mul</span> <span class=\"n\">a</span> <span class=\"n\">X</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">matrix.mul_vec</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">matrix.dot_product_mul_vec</span><span class=\"o\">,</span> <span class=\"n\">matrix.mul_vec_mul_vec</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_def_linear_independent</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X_lin_indep</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pos_def</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.pos_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.linear_independent_iff</span> <span class=\"n\">at</span> <span class=\"n\">X_lin_indep</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.is_hermitian</span><span class=\"o\">,</span> <span class=\"n\">matrix.conj_transpose_mul</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a_neq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_R_or_C.re_to_real</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">matrix.dot_product</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">X</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">X_lin_indep</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pos_def_assoc</span><span class=\"o\">,</span> <span class=\"n\">matrix.vec_mul_transpose</span><span class=\"o\">,</span> <span class=\"n\">matrix.dot_product</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset.sum_pos'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">iel</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_self_nonneg</span> <span class=\"o\">(</span><span class=\"n\">X.mul_vec</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_def</span><span class=\"o\">,</span>\n               <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span>\n               <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n               <span class=\"n\">matrix.transpose</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">X_lin_indep</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">finset.sum_fn</span> <span class=\"n\">at</span> <span class=\"n\">X_lin_indep</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">contraposed</span> <span class=\"o\">:=</span> <span class=\"n\">function.mt</span> <span class=\"n\">X_lin_indep</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">not_forall</span> <span class=\"n\">at</span> <span class=\"n\">contraposed</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">function.ne_iff</span> <span class=\"n\">at</span> <span class=\"n\">a_neq_zero</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">ne_zero_vec</span> <span class=\"o\">:=</span> <span class=\"n\">contraposed</span> <span class=\"n\">a_neq_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_self_pos</span><span class=\"o\">,</span>\n               <span class=\"n\">matrix.mul_vec</span><span class=\"o\">,</span>\n               <span class=\"n\">matrix.dot_product</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">ne.def</span> <span class=\"n\">at</span> <span class=\"n\">ne_zero_vec</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">function.ne_iff</span> <span class=\"n\">at</span> <span class=\"n\">ne_zero_vec</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">ne_zero_vec</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">finset.mem_univ</span> <span class=\"n\">v</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks for the help again!</p>",
        "id": 340732450,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678404011
    },
    {
        "content": "<p>Is this something that could go into mathlib or does it already exist? I've got a couple of other linear algebra lemmas I have not been able to find in mathlib (maybe I just didn't look in the right spots).</p>",
        "id": 340956560,
        "sender_full_name": "Aron Erben",
        "timestamp": 1678479328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> has marked this topic as resolved.</p>",
        "id": 341390365,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678693728
    }
]