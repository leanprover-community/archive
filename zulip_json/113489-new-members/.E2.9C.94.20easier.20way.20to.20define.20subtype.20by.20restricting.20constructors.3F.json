[
    {
        "content": "<p>I am wondering if there is an easier way to define <code>redStuff</code> in the below, saying \"give me the subtype which only uses this subset of type constructors\"?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">stuff</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span>\n<span class=\"bp\">|</span> <span class=\"n\">inside</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">stuff</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">stuff</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">onlyRed</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">inside</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">onlyRed</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">redStuff</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"n\">onlyRed</span>\n</code></pre></div>",
        "id": 268147865,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1642281776
    },
    {
        "content": "<p>You could use an inductive Prop instead, which saves you a case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">stuff</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span>\n<span class=\"bp\">|</span> <span class=\"n\">inside</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">stuff</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">stuff</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">onlyRed</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">onlyRed</span> <span class=\"n\">red</span>\n<span class=\"bp\">|</span> <span class=\"n\">inside</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">onlyRed</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">onlyRed</span> <span class=\"o\">(</span><span class=\"n\">inside</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">redStuff</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"n\">onlyRed</span>\n</code></pre></div>",
        "id": 268148133,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642282158
    },
    {
        "content": "<p>ah, did not know that before - let me try it out :-)</p>",
        "id": 268148288,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1642282370
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">redStuff</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stuff</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">inside</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">red</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 268148391,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642282559
    },
    {
        "content": "<p>Hehe, this also looks nice, and works for my toy example, but in my non-mwe I have an \"inside\" that takes a list of previous \"stuff\".</p>",
        "id": 268148465,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1642282656
    },
    {
        "content": "<p>Many thanks to both of you! I managed to write what I wanted for my real use-case, a definition of open and closed tableaus <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tableau</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">byRule</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">α</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">β</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">tableau</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tableau</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">isOpen</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">formula</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">rule</span> <span class=\"n\">α</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tableau</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">isClosedTableau</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"n\">B</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">tableau</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">byRule</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">rule</span> <span class=\"n\">α</span> <span class=\"n\">B</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">prev</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">β</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">tableau</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">isClosedTableau</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"n\">isClosedTableau</span> <span class=\"o\">(</span><span class=\"n\">tableau.byRule</span> <span class=\"n\">r</span> <span class=\"n\">prev</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">closedTableau</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"n\">B</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">isClosedTableau</span> <span class=\"n\">α</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268149323,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1642284002
    },
    {
        "content": "<p>Hm, it compiles but maybe is not what I wanted. Now I cannot write \"closedTableau α\" analogous to \"tableau α\" to indicate the subtype of closed tableaus for that finset. Is there a way to make α explicit but B still implicit? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 268149646,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1642284372
    },
    {
        "content": "<p>In terms of the MWE, I think I am trying to do something like this (not compiling):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">stuffFor</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">stuffFor</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">stuffFor</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">inside</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">stuffFor</span> <span class=\"n\">k</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">stuffFor</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">stuffFor</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">onlyRed</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">stuffFor</span> <span class=\"n\">k</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">onlyRed</span> <span class=\"n\">red</span>\n<span class=\"bp\">|</span> <span class=\"n\">inside</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">onlyRed</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">onlyRed</span> <span class=\"o\">(</span><span class=\"n\">inside</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">redStuffFor</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">onlyRed</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268150088,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1642285064
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">onlyRed</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">stuffFor</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">onlyRed</span> <span class=\"n\">red</span>\n<span class=\"bp\">|</span> <span class=\"n\">inside</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">stuffFor</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">onlyRed</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">onlyRed</span> <span class=\"o\">(</span><span class=\"n\">inside</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">redStuffFor</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">onlyRed</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268150461,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642285587
    },
    {
        "content": "<p>wonderful, thanks! I there now a way to make the k an explicit argument in the last line?</p>",
        "id": 268150744,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1642286027
    },
    {
        "content": "<p>Replace <code>{k}</code> with <code>(k)</code></p>",
        "id": 268150805,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642286097
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 268150831,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1642286157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422703\">Malvin Gattinger</span> has marked this topic as resolved.</p>",
        "id": 268151486,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642287134
    }
]