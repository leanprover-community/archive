[
    {
        "content": "<p>Hi all, fairly new member here. I've been using Lean as a functional programming language on a project. I'd like to write and run simple tests, either in-module or in separate test modules. I have not been able to find much talk on this subject or examples. Mostly I just want to evaluate terms and assert some boolean equality. Ideally failure of assertions would flag errors in the IDE and fail my <code>lake build</code>. Obviously I'd like to write proofs instead of unit tests eventually, but tests are useful for now.</p>\n<p>I've tried expressing tests as <code>example</code>s, and that works sometimes, but <code>rfl</code> and <code>simp</code> aren't always able to fully reduce terms on both sides of the prop equality, even when Lean can <code>#eval</code> them just fine. Here's a specific example where <code>rfl</code> fails to show definitional equality and <code>simp</code> makes no progress. The <code>#eval</code> outputs <code>true</code> as expected, but it's not an enforced test.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Merging of sorted lists (maintaining repetitions) -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"o\">::</span> <span class=\"n\">t1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">match</span> <span class=\"n\">l2</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l1</span>\n      <span class=\"bp\">|</span> <span class=\"n\">h2</span> <span class=\"o\">::</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">compare</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isLE</span> <span class=\"k\">then</span> <span class=\"n\">h1</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"n\">t1</span> <span class=\"n\">l2</span> <span class=\"k\">else</span> <span class=\"n\">h2</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"n\">l1</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> termination_by merge l1 l2 =&gt; l1.length + l2.length -/</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">merge</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>  <span class=\"c1\">-- true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">merge</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The lean4 project has a lot of what look like Cram-style tests (e.g. <a href=\"https://github.com/leanprover/lean4/tree/master/tests/lean\">https://github.com/leanprover/lean4/tree/master/tests/lean</a>), but I haven't been able to figure out how the test runner works or if it could be easily ported into my package.</p>\n<p>Does anyone have suggestions for how to write and run unit tests in an idiomatic way in Lean? Or examples of such?</p>",
        "id": 400029665,
        "sender_full_name": "Benjamin Jones",
        "timestamp": 1698965097
    },
    {
        "content": "<p>It's been a while since we've updated it so it might need a bump: <a href=\"https://github.com/lurk-lab/LSpec\">https://github.com/lurk-lab/LSpec</a></p>",
        "id": 400030242,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1698965540
    },
    {
        "content": "<p>There's a \"testing framework\" we use in mathlib that's pretty simple. It just captures the messages and then checks that the messages are the same.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.GuardMsgs</span>\n\n<span class=\"sd\">/-- info: 2 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#eval</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 400031101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698966112
    },
    {
        "content": "<p>Slightly more sophisticated is <code>#guard e</code>, which does <code>#eval</code> on <code>e</code> and checks that the result is true.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.GuardExpr</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Merging of sorted lists (maintaining repetitions) -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"o\">::</span> <span class=\"n\">t1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">match</span> <span class=\"n\">l2</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l1</span>\n      <span class=\"bp\">|</span> <span class=\"n\">h2</span> <span class=\"o\">::</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">compare</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isLE</span> <span class=\"k\">then</span> <span class=\"n\">h1</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"n\">t1</span> <span class=\"n\">l2</span> <span class=\"k\">else</span> <span class=\"n\">h2</span> <span class=\"o\">::</span> <span class=\"n\">merge</span> <span class=\"n\">l1</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> termination_by merge l1 l2 =&gt; l1.length + l2.length -/</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">guard</span> <span class=\"n\">merge</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Fails:</span>\n<span class=\"bp\">#</span><span class=\"n\">guard</span> <span class=\"n\">merge</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">==</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400031299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698966200
    },
    {
        "content": "<p>Thanks! I'll check out both of these. <code>#guard</code> is exactly what I was looking for originally, but LSpec looks good too.</p>",
        "id": 400033246,
        "sender_full_name": "Benjamin Jones",
        "timestamp": 1698967674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621618\">Benjamin Jones</span> has marked this topic as resolved.</p>",
        "id": 400183107,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699034600
    }
]