[
    {
        "content": "<p>How can i rewrite <code>n(n-1)/2=sum n</code> as <code>n(n-1)=2*(sum n)</code> in a lean proof</p>",
        "id": 308165998,
        "sender_full_name": "Joseph O",
        "timestamp": 1667667013
    },
    {
        "content": "<p>It is usually <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_eq_iff\">docs#div_eq_iff</a> but I cannot be sure unless there is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 308166287,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667667188
    },
    {
        "content": "<p>what namespace is it under, bc it can't find it</p>",
        "id": 308167730,
        "sender_full_name": "Joseph O",
        "timestamp": 1667668097
    },
    {
        "content": "<p>It's in the top-level namespace, but to use it you need to <code>import algebra.group_with_zero.units</code> (or import something that imports this module).</p>",
        "id": 308167944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667668239
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 308167972,
        "sender_full_name": "Joseph O",
        "timestamp": 1667668255
    },
    {
        "content": "<p>The module name is the top-middle of the docs page that Andrew gave</p>",
        "id": 308167988,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667668273
    },
    {
        "content": "<p>Ok so i did try that before, and it turns out it wasn't working because i didn't have mathlib. <br>\ni made the project again with leanproject, but it fails to add mathlib for some reason, even though my elan is set to Lean 3.42.1<br>\n<a href=\"/user_uploads/3121/rDFRMZ9feUV_c5VLegw3g8de/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rDFRMZ9feUV_c5VLegw3g8de/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rDFRMZ9feUV_c5VLegw3g8de/image.png\"></a></div>",
        "id": 308168369,
        "sender_full_name": "Joseph O",
        "timestamp": 1667668513
    },
    {
        "content": "<p><code>elan self update</code> should help</p>",
        "id": 308168660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667668702
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/rewrite.20rule\">#general &gt; rewrite rule</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 308168686,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667668721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> i tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.units</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sum'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trinum</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">sum'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_eq_iff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>yet it gives me the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">sum'</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 308173494,
        "sender_full_name": "Joseph O",
        "timestamp": 1667671946
    },
    {
        "content": "<p>try <code>intro n,</code> first</p>",
        "id": 308173685,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667672109
    },
    {
        "content": "<p>This is because <code>n/2 = m ↔ n = 2 * m</code> does not hold in general for <code>ℕ</code>: the division is rounding down.</p>",
        "id": 308173847,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667672207
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.qify\">docs#tactic.interactive.qify</a> would be useful here. You will need to supply it with a proof that <code>2 ∣ n * (n-1)</code>.</p>",
        "id": 308173919,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667672272
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.div_eq_iff_eq_mul_left\">docs#nat.div_eq_iff_eq_mul_left</a> also probably works, with the same proof obligation</p>",
        "id": 308173990,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1667672310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> now i have the problem of proving <code>h</code>. library search doesn't suggest anything </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.units</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.qify</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sum'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trinum</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">sum'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">qify</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_eq_iff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 308175209,
        "sender_full_name": "Joseph O",
        "timestamp": 1667673203
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.even_mul_self_pred\">docs#nat.even_mul_self_pred</a></p>",
        "id": 308175317,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667673287
    },
    {
        "content": "<p>and also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/even_iff_two_dvd\">docs#even_iff_two_dvd</a></p>",
        "id": 308175368,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667673343
    },
    {
        "content": "<p>I cant import <code>nat</code> or <code>data.nat</code> for some reason</p>",
        "id": 308175431,
        "sender_full_name": "Joseph O",
        "timestamp": 1667673373
    },
    {
        "content": "<p>Is your mathlib up to date? Does <code>elan self update</code> not work for you?</p>",
        "id": 308175589,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667673502
    },
    {
        "content": "<p>if you're trying to use the first suggestion you'll need to import <code>data.nat.parity</code>... <code>nat</code> and <code>data.nat</code> are not valid imports</p>",
        "id": 308175594,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667673509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20rule/near/308175589\">said</a>:</p>\n<blockquote>\n<p>Is your mathlib up to date? Does <code>elan self update</code> not work for you?</p>\n</blockquote>\n<p>i did that already</p>",
        "id": 308175613,
        "sender_full_name": "Joseph O",
        "timestamp": 1667673529
    },
    {
        "content": "<p>Lean modules are different from namespaces. The module name is the top-middle of the docs page.</p>",
        "id": 308175688,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667673601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20rule/near/308175613\">said</a>:</p>\n<blockquote>\n<p>i did that already</p>\n</blockquote>\n<p>And what is the output of <code>elan --version</code>? If it's not 1.4.2, how did you install elan originally?</p>",
        "id": 308176074,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1667673869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> I think this person has already solved the \"missing mathlib\" issue, if you're trying to help with that</p>",
        "id": 308176432,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667674165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 308193497,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667687817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 308193676,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667687996
    },
    {
        "content": "<p>[EDIT] not needed</p>",
        "id": 308194046,
        "sender_full_name": "Joseph O",
        "timestamp": 1667688259
    },
    {
        "content": "<p>nevermind i dont need it anymore</p>",
        "id": 308194621,
        "sender_full_name": "Joseph O",
        "timestamp": 1667688729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 308194631,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667688741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 308199016,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667692939
    },
    {
        "content": "<p>i have a function </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sum'</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and a proof </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">sum'</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>but I'm not sure how to prove it using the function.</p>",
        "id": 308199210,
        "sender_full_name": "Joseph O",
        "timestamp": 1667693157
    },
    {
        "content": "<p>The proof should be <code>by rfl</code> (or <code>rfl</code>, or <code>by refl</code> if using Lean3)</p>",
        "id": 308199316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667693258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20rule/near/308199316\">said</a>:</p>\n<blockquote>\n<p>The proof should be <code>by rfl</code> (or <code>rfl</code>, or <code>by refl</code> if using Lean3)</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">tactic.istep</span> <span class=\"mi\">21</span> <span class=\"mi\">30</span> <span class=\"mi\">21</span> <span class=\"mi\">30</span> <span class=\"mi\">90</span> <span class=\"n\">rfl</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">case</span> <span class=\"n\">nat.zero</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">even_mul_self_pred</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">sum'</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 308199505,
        "sender_full_name": "Joseph O",
        "timestamp": 1667693452
    },
    {
        "content": "<p>Oh so your goal isn't <code>sum' 0 = 0</code>, contrary to your previous message</p>",
        "id": 308199609,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667693545
    },
    {
        "content": "<p>Is this Lean 3 or 4?</p>",
        "id": 308199635,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667693583
    },
    {
        "content": "<p>it wasnt my goal, it was a <code>have</code></p>",
        "id": 308199653,
        "sender_full_name": "Joseph O",
        "timestamp": 1667693616
    },
    {
        "content": "<p>Can you please provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 308199736,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667693659
    },
    {
        "content": "<p>the goal was </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">nat.zero</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">even_mul_self_pred</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum'</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>my current proof is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">sum'</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 308199744,
        "sender_full_name": "Joseph O",
        "timestamp": 1667693675
    },
    {
        "content": "<p>Replace sorry with <code>rfl</code></p>",
        "id": 308199758,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667693694
    },
    {
        "content": "<p>oh that works, thanks</p>",
        "id": 308199871,
        "sender_full_name": "Joseph O",
        "timestamp": 1667693798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 308200236,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667694210
    }
]