[
    {
        "content": "<p>Hi! I am new to lean4 and wanted to start by doing some of the exercises from <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>.</p>\n<p>I am currently working my way through <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html\">chapter 3</a> and I got stuck a bit on the first example requring classical reasoning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>All the proofs that I was able to come up with end up causing a <code>linter.unusedVariables</code> warning. Here are two examples:<br>\nProof 1 (unused variable in line 4):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span>\n            <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span>\n            <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hq</span> <span class=\"n\">hnq</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Proof 2 (unused variable in line 6):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hpq</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"n\">hnpq</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>The issue seems to occur whenever I construct a proof of <code>p → q</code> from the proof of <code>q</code>. A similar issue occurs when trying to prove the following simpler example (one of the examples described in the book):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span>\n</code></pre></div>\n<p>My questions are:</p>\n<ul>\n<li>Are linter warnings (the unusedVariables one in particular) telling us anything about the correctness of the proof or are they only about coding style?</li>\n<li>How much should I worry about them?</li>\n<li>Is it always possible to avoid them? In particular, can I prove any theorem without introducing unused variables?</li>\n<li>Can I prove the examples above without introducing any unused variables? How?</li>\n</ul>",
        "id": 326493390,
        "sender_full_name": "Kuba",
        "timestamp": 1675822457
    },
    {
        "content": "<p>It's not an issue of correctness, only code style (although sometimes it can help you catch errors when defining things). You can ignore them and get the linter to be quiet by adding an underscore to the start of the variable name.</p>",
        "id": 326494092,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675823128
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Lean.20as.20a.20way.20to.20learn.20proving\">#new members &gt; Lean as a way to learn proving</a> by <span class=\"user-mention silent\" data-user-id=\"587316\">Kuba</span>.</p>",
        "id": 326494505,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675823430
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span>\n            <span class=\"bp\">λ</span> <span class=\"n\">_hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"c1\">-- use `_hp` instead of `hp`</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span>\n            <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hq</span> <span class=\"n\">hnq</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hpq</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"n\">hnpq</span><span class=\"o\">)</span> <span class=\"c1\">-- use `_` instead of `hp`</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 326785340,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1675940665
    }
]