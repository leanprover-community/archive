[
    {
        "content": "<p>Consider this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.fin.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"c1\">-- ERROR!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>From the definition of <code>test</code> it seems that Lean feels fine about the decidability of a <code>fin</code> being equal to 0. However, in the second example it gives an error on the <code>if</code> construct, saying that it's unable to synthesize <code>decidable (i == 0)</code>. What am I missing?</p>",
        "id": 359073524,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1684354419
    },
    {
        "content": "<p>In the first example, you manually added the decidability as an assumption.</p>",
        "id": 359074002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684354583
    },
    {
        "content": "<p>If you import enough stuff from mathlib, then decidability on <code>fin</code> will work automatically.</p>",
        "id": 359074066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684354614
    },
    {
        "content": "<p>You probably want <code>i = 0</code> instead of <code>i == 0</code>, since <code>i == 0</code> is heterogenous equality (<code>heq</code>)</p>",
        "id": 359074101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684354628
    },
    {
        "content": "<p>Maybe <code>import data.fin.basic</code>, instead of the <code>init.*</code> version?</p>",
        "id": 359074113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684354631
    },
    {
        "content": "<p>Ooh, I completely glossed over the <code>==</code>.</p>",
        "id": 359074147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684354645
    },
    {
        "content": "<p>It's hard to disprove <code>==</code>, so decidability instances for it are rare</p>",
        "id": 359074216,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684354674
    },
    {
        "content": "<p>Ha, that's what I get for being a C programmer by trade! Sorry for the noise.</p>",
        "id": 359074741,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1684354852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246262\">Giovanni Mascellani</span> has marked this topic as resolved.</p>",
        "id": 359074748,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684354855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246262\">Giovanni Mascellani</span> has marked this topic as unresolved.</p>",
        "id": 359074754,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684354857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246262\">Giovanni Mascellani</span> has marked this topic as resolved.</p>",
        "id": 359074761,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684354860
    },
    {
        "content": "<p>I think that in Lean 4, <code>==</code> is the Boolean equality, while <code>=</code> is the <code>Prop</code> equality.</p>",
        "id": 359074856,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684354895
    },
    {
        "content": "<p>So, you will be vindicated soon...</p>",
        "id": 359074888,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684354910
    }
]