[
    {
        "content": "<p>Let's say I have a simple inductive type like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Shopping</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eggs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bread</span>\n  <span class=\"bp\">|</span> <span class=\"n\">milk</span>\n</code></pre></div>\n<p>Is there an automatic way to enumerate and get a list of (strings representing) the constructors that gets updated if I decide to add or remove constructors from the type?  In other words:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ShoppingList</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">NumberOfItems</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>         <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where the <code>sorry</code> do not need to be modified if I change the contents of <code>Shopping</code>.</p>",
        "id": 394205803,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696164018
    },
    {
        "content": "<p>you can do that with meta programming in principle but why would you want this?</p>",
        "id": 394210080,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696166227
    },
    {
        "content": "<p>Why not? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"constr_list%\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverloadWithInfo</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">ival</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfoInduct</span> <span class=\"n\">n</span>\n  <span class=\"c1\">-- Assuming every constructor name is a `Name.str`:</span>\n  <span class=\"n\">return</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"n\">ival.ctors.map</span> <span class=\"n\">Name.getString</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"constr_count%\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverloadWithInfo</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">ival</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfoInduct</span> <span class=\"n\">n</span>\n  <span class=\"n\">return</span> <span class=\"n\">toExpr</span> <span class=\"n\">ival.numCtors</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Shopping</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eggs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bread</span>\n  <span class=\"bp\">|</span> <span class=\"n\">milk</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ShoppingList</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">constr_list</span><span class=\"bp\">%</span> <span class=\"n\">Shopping</span>\n<span class=\"kd\">def</span> <span class=\"n\">NumberOfItems</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>         <span class=\"o\">:=</span> <span class=\"n\">constr_count</span><span class=\"bp\">%</span> <span class=\"n\">Shopping</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">ShoppingList</span>\n<span class=\"c1\">-- [\"eggs\", \"bread\", \"milk\"]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">NumberOfItems</span>\n<span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 394217119,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696170077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113489-new-members/topic/Iterating.20over.20constructors.20of.20non-recursive.20inductive/near/394210080\">said</a>:</p>\n<blockquote>\n<p>you can do that with meta programming in principle but why would you want this?</p>\n</blockquote>\n<p>I want to encode e.g. actions a program can take in such a finite type.  If, later, I want to add or remove an action, I want to have to modify as few parts as possible.  I also want these for ad hoc debugging, because I don't yet understand attributes and options (I cannot find much documentation about them, either).</p>",
        "id": 394247066,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696184799
    },
    {
        "content": "<p>The Mathlib <code>Fintype</code> derive handler generates a List of all the constructors for an enumeration like this by the way. This isn't documented (yet).</p>",
        "id": 394252086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696188282
    }
]