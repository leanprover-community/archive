[
    {
        "content": "<p>Here is some (tiny) code I wrote. I have defined <code>Tree</code> type and now I'm trying to make a function that collects pairs made of id and degree (lengths of <code>choices</code>) of each decision node into <code>List</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">payouts</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decision_node</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">node_id</span> <span class=\"n\">player</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">choices</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">)),</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ids_with_degree</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can someone help with this? If the problem is solved by reading some tutorial, that works too.</p>",
        "id": 397188789,
        "sender_full_name": "Lessness",
        "timestamp": 1697580570
    },
    {
        "content": "<p>Trying <code>induction t</code> tactic results in such error message:<br>\n<code>'induction' tactic does not support nested inductive types, the eliminator 'Tree.rec' has multiple motives</code></p>",
        "id": 397188951,
        "sender_full_name": "Lessness",
        "timestamp": 1697580657
    },
    {
        "content": "<p>Have you tried pattern matching on <code>t</code>, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ids_with_degree</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decision_node</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>(or using <code>match t</code>).</p>\n<p>Writing functions using tactics is possible, but sometimes confusing, so I’d write it like this first.</p>\n<p>You might run into complaints from lean about termination issues, but we can see what happens then :-)</p>",
        "id": 397245146,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697612722
    },
    {
        "content": "<p>Yes, I got stuck with such message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">ids_with_degree</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<p>The code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">payouts</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decision_node</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">node_id</span> <span class=\"n\">player</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">choices</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">)),</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">List.length</span>\n<span class=\"k\">#check</span> <span class=\"n\">List.append</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">temp</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)):</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">L</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.append</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">temp</span> <span class=\"n\">A</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ids_with_degree</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.leaf</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.decision_node</span> <span class=\"n\">id</span> <span class=\"n\">player</span> <span class=\"n\">choices</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">List.length</span> <span class=\"n\">choices</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">temp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">ids_with_degree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">choices</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397260654,
        "sender_full_name": "Lessness",
        "timestamp": 1697618103
    },
    {
        "content": "<p>I kind of understand what Lean doesn't like. Will try to write in some other way.</p>",
        "id": 397268297,
        "sender_full_name": "Lessness",
        "timestamp": 1697620890
    },
    {
        "content": "<p>I would personally go with the “obvious” functional program, add<code>termination_by</code> and prove termination (but I haven’t done that in anger with Lean yet).<br>\nI don’t know if <code>termination_by</code> will set up the goals so that it knows that the argument passed by <code>map</code> is  a member of the original list, though (maybe using <code>List.map_congr</code>) or if you need to explicitly use <code>List.attach</code> or <code>List.pmap</code> maybe.</p>",
        "id": 397296262,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697630202
    },
    {
        "content": "<p>No success for now. It's my second day with Lean, basically, so I'm very much noob.</p>",
        "id": 397381724,
        "sender_full_name": "Lessness",
        "timestamp": 1697662188
    },
    {
        "content": "<p>Ah, then nested termination may be a bit of a challenge (unfortunately)</p>",
        "id": 397440509,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697698112
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">payouts</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decision_node</span> <span class=\"o\">(</span><span class=\"n\">node_id</span> <span class=\"n\">player</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">choices</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">temp</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)):</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">L</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.append</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">temp</span> <span class=\"n\">A</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ids_with_degree</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.leaf</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.decision_node</span> <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"n\">choices</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">List.length</span> <span class=\"n\">choices</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">temp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">choices.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ids_with_degree</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 397442190,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1697699075
    },
    {
        "content": "<p>Now I get <code>unknown package 'Std'</code> <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span><br>\nWhat could I be missing?</p>\n<p>Apologies for beginner problems. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 397464321,
        "sender_full_name": "Lessness",
        "timestamp": 1697707136
    },
    {
        "content": "<p>At <a href=\"https://lean.math.hhu.de/\">https://lean.math.hhu.de/</a> the code works, so it is a problem on my computer. As I thought</p>",
        "id": 397465211,
        "sender_full_name": "Lessness",
        "timestamp": 1697707478
    },
    {
        "content": "<p>Please use <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> instead.  <a href=\"http://lean.math.hhu.de\">lean.math.hhu.de</a> is becoming a test server.</p>",
        "id": 397467828,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697708449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Function.20on.20Tree.20type/near/397467828\">said</a>:</p>\n<blockquote>\n<p>Please use <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> instead.  <a href=\"http://lean.math.hhu.de\">lean.math.hhu.de</a> is becoming a test server.</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 397469462,
        "sender_full_name": "Lessness",
        "timestamp": 1697709109
    },
    {
        "content": "<p>Does package 'Std' comes with the Lean extension of VSCode? Or do I need to install it myself?</p>\n<p>I downloaded it from Github and did <code>lake build</code>, but no changes in the VSCode when I open the .lean file... :|</p>",
        "id": 397532493,
        "sender_full_name": "Lessness",
        "timestamp": 1697730196
    },
    {
        "content": "<p>Std doesn't come included, but it is a separate package that you should manage with <code>lake</code> (and not download manually). Are you working on a project (that you created with <code>lake new</code>)?</p>",
        "id": 397533217,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697730444
    },
    {
        "content": "<p>Before your comment I was editing single file outside any project, just to learn the most basic things.</p>\n<p>Now I successfully made a new project with <code>lake new</code>, yes. But still not successfully imported <code>Std</code>.</p>",
        "id": 397536302,
        "sender_full_name": "Lessness",
        "timestamp": 1697731485
    },
    {
        "content": "<p>Ok you should add a line like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>to your <code>lakefile.lean</code> (before the <code>lean_lib</code> / <code>lean_exe</code> line) and run <code>lake update</code></p>",
        "id": 397536982,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697731707
    },
    {
        "content": "<p>Thank you for your patience!</p>\n<p>Ok, added the line, <code>lake update</code> worked and something started to happen in VsCode when I started new file and added import Std, but it did end with error message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">ilmar</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---stable\\bin\\lake.exe print-paths Init Std` failed:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">74</span><span class=\"bp\">/</span><span class=\"mi\">149</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.Simpa</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">85</span><span class=\"bp\">/</span><span class=\"mi\">149</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.SimpTrace</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span> <span class=\"n\">PATH</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">ilmar</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---stable\\bin\\lean.exe -Dlinter.missingDocs=true -DwarningAsError=true .\\lake-packages\\std\\.\\.\\Std\\Tactic\\SimpTrace.lean -R .\\lake-packages\\std\\.\\. -o .\\lake-packages\\std\\build\\lib\\Std\\Tactic\\SimpTrace.olean -i .\\lake-packages\\std\\build\\lib\\Std\\Tactic\\SimpTrace.ilean -c .\\lake-packages\\std\\build\\ir\\Std\\Tactic\\SimpTrace.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Tactic</span><span class=\"bp\">\\</span><span class=\"n\">SimpTrace.lean</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">Origin.decl</span> <span class=\"n\">declName</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Origin</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Tactic</span><span class=\"bp\">\\</span><span class=\"n\">SimpTrace.lean</span><span class=\"o\">:</span><span class=\"mi\">72</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAppend</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.simpStar</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.simpLemma</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.simpStar</span><span class=\"o\">))</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">lessness</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---stable\\bin\\lean.exe` exited with code 1</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span><span class=\"bp\">;.\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">lib</span> <span class=\"n\">PATH</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">ilmar</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---stable\\bin\\lean.exe -Dlinter.missingDocs=true -DwarningAsError=true .\\lake-packages\\std\\.\\.\\Std\\Tactic\\Simpa.lean -R .\\lake-packages\\std\\.\\. -o .\\lake-packages\\std\\build\\lib\\Std\\Tactic\\Simpa.olean -i .\\lake-packages\\std\\build\\lib\\Std\\Tactic\\Simpa.ilean -c .\\lake-packages\\std\\build\\ir\\Std\\Tactic\\Simpa.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Tactic</span><span class=\"bp\">\\</span><span class=\"n\">Simpa.lean</span><span class=\"o\">:</span><span class=\"mi\">74</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">Origin.decl</span> <span class=\"n\">declName</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Origin</span>\n<span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Std</span><span class=\"bp\">\\</span><span class=\"n\">Tactic</span><span class=\"bp\">\\</span><span class=\"n\">Simpa.lean</span><span class=\"o\">:</span><span class=\"mi\">103</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAppend</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.simpStar</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.simpLemma</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.simpStar</span><span class=\"o\">))</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">lessness</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---stable\\bin\\lean.exe` exited with code 1</span>\n</code></pre></div>",
        "id": 397538715,
        "sender_full_name": "Lessness",
        "timestamp": 1697732410
    },
    {
        "content": "<p>I will delete the project folder and try redoing all the steps again.</p>",
        "id": 397538752,
        "sender_full_name": "Lessness",
        "timestamp": 1697732428
    },
    {
        "content": "<p>actually I forgot one step: after lake update you should copy the file <code>lake-packages/std/lean-toolchain</code> to the root directory of your project</p>",
        "id": 397539095,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697732562
    },
    {
        "content": "<p>This will ensure that your project uses the same lean version as the version of std it depends on</p>",
        "id": 397539177,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697732589
    },
    {
        "content": "<p>Thank you very much!</p>\n<p>Now everything works <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 397540153,
        "sender_full_name": "Lessness",
        "timestamp": 1697733001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Function.20on.20Tree.20type/near/397536982\">said</a>:</p>\n<blockquote>\n<p>Ok you should add a line like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>to your <code>lakefile.lean</code> (before the <code>lean_lib</code> / <code>lean_exe</code> line) and run <code>lake update</code></p>\n</blockquote>\n<p>And if I want to add Mathlib to the dependencies of this already existing project? (I want to use Mathlib.Data.Vector, for now.)<br>\nIt's probably the variation of this line you gave me.</p>",
        "id": 397858942,
        "sender_full_name": "Lessness",
        "timestamp": 1697902350
    },
    {
        "content": "<p>Oh, it seems I found it on the Internet.</p>\n<p><code>require mathlib from git \"https://github.com/leanprover-community/mathlib4.git\"</code></p>",
        "id": 397858966,
        "sender_full_name": "Lessness",
        "timestamp": 1697902378
    },
    {
        "content": "<p>It's good practice to add <code>@ \"master\"</code> at the end of that.</p>",
        "id": 397859823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697903207
    },
    {
        "content": "<p>Thank you, it works! <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 397860274,
        "sender_full_name": "Lessness",
        "timestamp": 1697903689
    },
    {
        "content": "<p>Another question...</p>\n<p>This works without any errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">scores</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decision_node</span> <span class=\"o\">(</span><span class=\"n\">node_id</span> <span class=\"n\">player</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">choices</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ids_with_info</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.leaf</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.decision_node</span> <span class=\"n\">id</span> <span class=\"n\">player</span> <span class=\"n\">choices</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">player</span><span class=\"o\">,</span> <span class=\"n\">List.length</span> <span class=\"n\">choices</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">List.join</span> <span class=\"o\">(</span><span class=\"n\">choices.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ids_with_info</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>But this (below) says I have unsolved goal <code>Zero.zero ≤ id + player</code>. Why is it so and how to fix it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Vector</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">scores</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decision_node</span> <span class=\"o\">(</span><span class=\"n\">node_id</span> <span class=\"n\">player</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">choices</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ids_with_info</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.leaf</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.decision_node</span> <span class=\"n\">id</span> <span class=\"n\">player</span> <span class=\"n\">choices</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">player</span><span class=\"o\">,</span> <span class=\"n\">List.length</span> <span class=\"n\">choices</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">List.join</span> <span class=\"o\">(</span><span class=\"n\">choices.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ids_with_info</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 397863219,
        "sender_full_name": "Lessness",
        "timestamp": 1697907048
    },
    {
        "content": "<p>Still no idea, what's going on with that missing <code>Zero.zero &lt;= id + player</code> proof. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>\n<p>For now dismissing <code>Mathlib.Data.Vector</code> and defining the type <code>Vector</code> myself.</p>",
        "id": 397877590,
        "sender_full_name": "Lessness",
        "timestamp": 1697922144
    },
    {
        "content": "<p>Apologies for this necromancy...</p>\n<p><span aria-label=\"pleading face\" class=\"emoji emoji-1f97a\" role=\"img\" title=\"pleading face\">:pleading_face:</span></p>",
        "id": 397932972,
        "sender_full_name": "Lessness",
        "timestamp": 1697969968
    },
    {
        "content": "<p>Ok, I suppose it's some kind of bug (dunno, where exactly though). Closing the topic.</p>",
        "id": 397963133,
        "sender_full_name": "Lessness",
        "timestamp": 1697998623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658873\">Lessness</span> has marked this topic as resolved.</p>",
        "id": 397963142,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697998629
    },
    {
        "content": "<p>I managed to minimize this, its a bad interaction between some lemma in mathlib and the built in <code>simp_arith</code>, so if you import too much of mathlib the proof breaks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Cancel.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"c1\">-- uncomment this and the proof breaks</span>\n\n<span class=\"c1\">-- instance linearOrderedCommSemiring : OrderedCancelAddCommMonoid ℕ :=</span>\n<span class=\"c1\">--   { Nat.commSemiring, Nat.linearOrder with</span>\n<span class=\"c1\">--     lt := Nat.lt, add_le_add_left := @Nat.add_le_add_left,</span>\n<span class=\"c1\">--     le_of_add_le_add_left := @Nat.le_of_add_le_add_left,</span>\n<span class=\"c1\">--     }</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">scores</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decision_node</span> <span class=\"o\">(</span><span class=\"n\">node_id</span> <span class=\"n\">player</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">choices</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n<span class=\"c1\">-- set_option trace.Elab.step true</span>\n<span class=\"kd\">def</span> <span class=\"n\">ids_with_info</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.leaf</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.decision_node</span> <span class=\"n\">id</span> <span class=\"n\">player</span> <span class=\"n\">choices</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">player</span><span class=\"o\">,</span> <span class=\"n\">List.length</span> <span class=\"n\">choices</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">List.join</span> <span class=\"o\">(</span><span class=\"n\">choices.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ids_with_info</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">sizeOf_lt_of_mem</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n  <span class=\"c1\">-- rw [lt_add_iff_pos_left] -- is the simp lemma below that breaks</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span>\n  <span class=\"c1\">-- simp (config := { arith := true }) only -- would be fine</span>\n</code></pre></div>\n<p>I'll have to try and work out what the fix is some other time</p>",
        "id": 398170948,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698103948
    },
    {
        "content": "<p>Perhaps this is the root cause</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">whnf</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"mi\">0</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"c1\">-- Nat.zero</span>\n<span class=\"bp\">#</span><span class=\"n\">whnf</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 0</span>\n</code></pre></div>",
        "id": 398171467,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698104422
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"n\">only</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"n\">only</span>\n</code></pre></div>\n<p>for another example</p>",
        "id": 398171640,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698104582
    },
    {
        "content": "<p>Thank you!</p>\n<p>Should I report this as some kind of error?</p>",
        "id": 398646101,
        "sender_full_name": "Lessness",
        "timestamp": 1698311185
    }
]