[
    {
        "content": "<p>I am trying to convert a sequent described on page 23 of Huth and Ryan to Lean<br>\nappreciate a little guidance on a couple steps </p>\n<p>point 6  → elim 1,5 <br>\npoint 8 ¬ intro 4-7 based upon the contradiction</p>\n<p>-- sequent (p ∧ ¬ q) → r, ¬r, p ⊢ q</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- from page 23 in Huth and Ryan</span>\n<span class=\"c1\">-- sequent (p ∧ ¬ q) → r, ¬r, p ⊢ q</span>\n\n<span class=\"c1\">-- 1    (p ∧ ¬ q) → r       premise</span>\n<span class=\"c1\">-- 2    ¬r                  premise</span>\n<span class=\"c1\">-- 3    p                   premise</span>\n  <span class=\"c1\">-- 4    ¬q                    assumption (by contradiction)</span>\n  <span class=\"c1\">-- 5    p ∧ ¬q                and.intro 3,4</span>\n  <span class=\"c1\">-- 6    r                     → elim 1,5</span>\n  <span class=\"c1\">-- 7    false                 ¬ elim 6,2</span>\n<span class=\"c1\">-- 8    ¬¬q                 ¬ intro 4-7</span>\n<span class=\"c1\">-- 9    q                   ¬¬ elim 8</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span>  <span class=\"o\">(</span><span class=\"n\">hpnqr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnr</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">hnr</span> <span class=\"bp\">?</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span><span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">hnq</span><span class=\"o\">)</span> <span class=\"n\">hpnqr</span><span class=\"o\">)),</span>    <span class=\"c1\">-- ?r need elim tactic that returns r ... modus ponens?</span>\n<span class=\"bp\">??</span> <span class=\"n\">hnnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span> <span class=\"n\">q</span><span class=\"o\">,</span>                                         <span class=\"c1\">-- since assumption in row 4 was proven false then takes its negation</span>\n<span class=\"k\">show</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>TIA -Kieran</p>",
        "id": 258877855,
        "sender_full_name": "Kieran Beltran",
        "timestamp": 1635080461
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 258888472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635095815
    },
    {
        "content": "<p>I tried translating the sequent proof somewhat directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- steps 1-3 are already assumptions</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">and.intro</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h7</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h9</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">of_not_not</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h9</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I wrote it as a tactic proof, but it's not hard to translate it to a proof term from here.</p>",
        "id": 258891836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635100803
    },
    {
        "content": "<p>Kyle - thanks ... quite elegant and follows the sequent validation steps quite well. Grateful. -K</p>",
        "id": 258894682,
        "sender_full_name": "Kieran Beltran",
        "timestamp": 1635104913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435688\">Kieran Beltran</span> has marked this topic as resolved.</p>",
        "id": 258894692,
        "sender_full_name": "Notification Bot",
        "timestamp": 1635104934
    }
]