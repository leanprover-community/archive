[
    {
        "content": "<p>I see in <a href=\"https://github.com/leanprover-community/mathlib4/blob/d25807f0a9495980f1893bcc296acb17e355e1a0/Mathlib/Init/Data/Nat/Bitwise.lean#L427\">Nat.Bitwise</a> the theorems have an assumption that <code>f false false = false</code>. What about <code>f false false = true</code>? I'm guessing there's an easy reduction from the latter to the former perhaps by sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>→</mo><mi mathvariant=\"normal\">¬</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f \\to \\neg f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>. Is this what's intended?</p>",
        "id": 358936757,
        "sender_full_name": "Harun Khan",
        "timestamp": 1684316742
    },
    {
        "content": "<p>This is because <code>bitwise</code> turns <code>[0 0 0 0 a b c] [0 0 0 0 x y z]</code> into  <code>[0 0 0 0 (f a x) (f b y) (f c z)]</code> (Using <code>0</code> as a shorthand for <code>false</code>)</p>",
        "id": 358955332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684321971
    },
    {
        "content": "<p>So the statement is only true if the leading <code>false</code>s remain <code>false</code></p>",
        "id": 358955440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684322012
    },
    {
        "content": "<p>The argument is that <code>nat</code> is an infinite number of <code>0</code> bits followed by a finite number of possibly-not-<code>0</code> bits. You can't turn the infinite series of 0 bits into 1s, because then your number is infinite and not a nat any more</p>",
        "id": 358955610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684322065
    },
    {
        "content": "<p>you can if you use integers and two's complement</p>",
        "id": 358956292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684322277
    },
    {
        "content": "<p>I assume <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.bitwise\">docs#int.bitwise</a> doesn't exist?</p>",
        "id": 358960180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684323509
    },
    {
        "content": "<p>Oh, it does!</p>",
        "id": 358960216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684323524
    },
    {
        "content": "<p>Though we have exactly no lemmas about it!</p>",
        "id": 358960284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684323550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/extra.20hypothesis.20in.20bitwise'_bit/near/358955610\">said</a>:</p>\n<blockquote>\n<p>The argument is that <code>nat</code> is an infinite number of <code>0</code> bits followed by a finite number of possibly-not-<code>0</code> bits. You can't turn the infinite series of 0 bits into 1s, because then your number is infinite and not a nat any more</p>\n</blockquote>\n<p>I see. In that case how does it compute bitwise functions such that <code>f false false = true</code>. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">bitwise'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">false</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">false</span> <span class=\"mi\">17</span><span class=\"o\">)</span>  <span class=\"c1\">--63</span>\n<span class=\"k\">#eval</span> <span class=\"n\">bit</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b'</span><span class=\"o\">))</span> <span class=\"n\">false</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bitwise'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b'</span><span class=\"o\">))</span> <span class=\"mi\">10</span> <span class=\"mi\">17</span><span class=\"o\">)</span> <span class=\"c1\">--63</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b'</span><span class=\"o\">))</span> <span class=\"n\">false</span> <span class=\"n\">false</span> <span class=\"c1\">--true</span>\n</code></pre></div>",
        "id": 359296198,
        "sender_full_name": "Harun Khan",
        "timestamp": 1684375968
    },
    {
        "content": "<p>ok hmm actually i think i understand. Lean computations are done by a virtual machine...<br>\nIn any case, I'm trying to merge <code>bitwise</code> and <code>bitwise'</code> as mentioned <a href=\"https://github.com/leanprover-community/mathlib4/blob/de0cf0af4a454e6a6ce5cd95d204fde12a535227/Mathlib/Init/Data/Nat/Bitwise.lean#L459\">here</a>.<br>\nIs this still true even if <code>f false false = true</code>? I don't see why not.</p>",
        "id": 359304650,
        "sender_full_name": "Harun Khan",
        "timestamp": 1684383032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265538\">Harun Khan</span> has marked this topic as resolved.</p>",
        "id": 359365302,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684408329
    }
]