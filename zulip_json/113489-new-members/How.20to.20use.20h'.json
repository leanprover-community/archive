[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsA</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SetLike</span> <span class=\"n\">S</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsA</span> <span class=\"o\">(</span><span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"bp\">≤</span> <span class=\"n\">H₂</span> <span class=\"bp\">∨</span> <span class=\"n\">H₂</span> <span class=\"bp\">≤</span> <span class=\"n\">H₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h'</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can somone tell me how the h' should be used here?</p>",
        "id": 376341507,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689685373
    },
    {
        "content": "<p>Your question is vague. You can use <code>h'</code> in lots of ways. What do you want to turn <code>h'</code> into? Can you write your question in Lean rather than in text?</p>\n<p>Here is a possible continuation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">SetLike.le_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy2</span><span class=\"o\">,</span> <span class=\"n\">hy1</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 376349603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689686820
    },
    {
        "content": "<p>Maybe you'd start like this instead of <code>by_contra</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsA</span> <span class=\"o\">(</span><span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"bp\">≤</span> <span class=\"n\">H₂</span> <span class=\"bp\">∨</span> <span class=\"n\">H₂</span> <span class=\"bp\">≤</span> <span class=\"n\">H₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">Set.ext_iff.mp</span> <span class=\"n\">h'</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">SetLike.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_union</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  H₁ H₂ H : Subgroup G</span>\n<span class=\"cm\">  h' : ∀ (x : G), x ∈ H ↔ x ∈ H₁ ∨ x ∈ H₂</span>\n<span class=\"cm\">  ⊢ H₁ ≤ H₂ ∨ H₂ ≤ H₁</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 376355324,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689687779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20h'/near/376349603\">said</a>:</p>\n<blockquote>\n<p>Your question is vague. You can use <code>h'</code> in lots of ways. What do you want to turn <code>h'</code> into? Can you write your question in Lean rather than in text?</p>\n<p>Here is a possible continuation:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">SetLike.le_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy2</span><span class=\"o\">,</span> <span class=\"n\">hy1</span><span class=\"o\">⟩⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks for your answer, that's exactly what I was looking for</p>",
        "id": 376367049,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689689771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20h'/near/376355324\">said</a>:</p>\n<blockquote>\n<p>Maybe you'd start like this instead of <code>by_contra</code>?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsA</span> <span class=\"o\">(</span><span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">H₁</span> <span class=\"bp\">≤</span> <span class=\"n\">H₂</span> <span class=\"bp\">∨</span> <span class=\"n\">H₂</span> <span class=\"bp\">≤</span> <span class=\"n\">H₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">Set.ext_iff.mp</span> <span class=\"n\">h'</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">SetLike.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_union</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  H₁ H₂ H : Subgroup G</span>\n<span class=\"cm\">  h' : ∀ (x : G), x ∈ H ↔ x ∈ H₁ ∨ x ∈ H₂</span>\n<span class=\"cm\">  ⊢ H₁ ≤ H₂ ∨ H₂ ≤ H₁</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you, maybe it's ok to write like this, I'll try it later</p>",
        "id": 376367293,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689689816
    },
    {
        "content": "<p>I was trying to do it as an exercise and got stuck here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsA</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SetLike</span> <span class=\"n\">S</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">IsA</span> <span class=\"o\">(</span><span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">H₁</span> <span class=\"bp\">≤</span> <span class=\"n\">H₂</span> <span class=\"bp\">∨</span> <span class=\"n\">H₂</span> <span class=\"bp\">≤</span> <span class=\"n\">H₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">contr</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">contr</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a_in</span><span class=\"o\">,</span> <span class=\"n\">a_ni</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">H₂</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Iff.mp</span> <span class=\"n\">Set.not_subset</span> <span class=\"n\">contr.1</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b_in</span><span class=\"o\">,</span> <span class=\"n\">b_ni</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∉</span> <span class=\"n\">H₁</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Iff.mp</span> <span class=\"n\">Set.not_subset</span> <span class=\"n\">contr.2</span>\n  <span class=\"n\">clear</span> <span class=\"n\">contr</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">a_in_union</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_union_left</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">H₂</span><span class=\"o\">)</span> <span class=\"n\">a_in</span>\n  <span class=\"k\">have</span> <span class=\"n\">b_in_union</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Set.mem_union_right</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">H₁</span><span class=\"o\">)</span> <span class=\"n\">b_in</span>\n  <span class=\"k\">have</span> <span class=\"n\">ab_in_union</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"bp\">∪</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I think I need to access something like <code>hyp.mul_mem'</code> but differently. How can I do it?</p>\n<p>Also, is there a better way to write <code>a ∈ (H₁ : Set G) ∪ (H₂ : Set G)</code> and so on?</p>",
        "id": 376371368,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689690494
    },
    {
        "content": "<p>I'd expect <code>a ∈ (H₁ ∪ H₂ : Set G)</code> to work</p>",
        "id": 376371582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689690541
    },
    {
        "content": "<p>Thanks. I updated the post above.</p>\n<p>I still don't know how to prove <code>a * b ∈ (H₁ ∪ H₂ : Set G)</code> tho.</p>",
        "id": 376371852,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689690592
    },
    {
        "content": "<p>Is this a Lean question or a maths question?</p>",
        "id": 376385265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689693102
    },
    {
        "content": "<p>Lean question. I have:</p>\n<ul>\n<li><code>a ∈ (H₁ ∪ H₂ : Set G)</code></li>\n<li><code>b ∈ (H₁ ∪ H₂ : Set G)</code></li>\n<li><code>IsA (Subgroup G) (H₁ ∪ H₂)</code></li>\n</ul>\n<p>I need:</p>\n<ul>\n<li><code>a * b ∈ (H₁ ∪ H₂ : Set G)</code></li>\n</ul>\n<p>I just don't know how to access <code>mul_mem'</code> of the hypothesis.</p>",
        "id": 376387253,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689693500
    },
    {
        "content": "<p>I have trouble switching between viewing <code>H₁ ∪ H₂</code> as a set and viewing <code>H₁ ∪ H₂</code> as a structure.</p>",
        "id": 376388179,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689693685
    },
    {
        "content": "<p>This <code>IsA</code> thing isn't great to work with directly. In <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20h'/near/376355324\">this message</a> I gave a couple tactics to eliminate it</p>",
        "id": 376389814,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689693967
    },
    {
        "content": "<p>Is there a mathlib declaration that would allow me to say \" <code>H₁ ∪ H₂</code> is a subgroup of <code>G</code> \"?</p>",
        "id": 376391076,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689694187
    },
    {
        "content": "<p>Yeah, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSubgroup#doc\">docs#IsSubgroup</a>. See also <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20write.20known.20conditions/near/376257094\">this thread</a> from today, which this topic is continuing.</p>",
        "id": 376392134,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689694353
    }
]