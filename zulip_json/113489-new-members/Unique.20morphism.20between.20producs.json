[
    {
        "content": "<p>I am trying to learn the category theory library in mathlib, and am having difficulty understanding how to tackle the following exercise using mathlib. I have a proof using my own home-brewed category definitions.<br>\n<a href=\"/user_uploads/3121/o8UVtidvmOkmQf537O0Q_fSx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/o8UVtidvmOkmQf537O0Q_fSx/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/o8UVtidvmOkmQf537O0Q_fSx/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">AProd.lift_square_aux</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Unique</span> <span class=\"o\">({</span><span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">G</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">H</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">H</span> <span class=\"bp\">//</span> <span class=\"n\">fg</span> <span class=\"bp\">‚â´</span> <span class=\"n\">fstHom</span> <span class=\"bp\">=</span> <span class=\"n\">fstHom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">œÜ</span> <span class=\"bp\">‚àß</span> <span class=\"n\">fg</span> <span class=\"bp\">‚â´</span> <span class=\"n\">sndHom</span> <span class=\"bp\">=</span> <span class=\"n\">sndHom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">œÜ</span><span class=\"o\">}))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">fstHom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sndHom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">œÜ</span><span class=\"o\">),</span> <span class=\"n\">lift_comp_fst</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lift_comp_snd</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">intro</span> <span class=\"o\">‚ü®</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Subtype.ext</span> <span class=\"o\">(</span><span class=\"n\">lift_unique</span> <span class=\"n\">h</span> <span class=\"n\">hl</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 382413369,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1691343332
    },
    {
        "content": "<p>The full code to make my proof work is here:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Full code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Final</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">‚àÄ</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">example39_down</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"bp\">Œ£</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">hC.Hom</span> <span class=\"n\">Z</span> <span class=\"n\">A</span> <span class=\"bp\">√ó</span> <span class=\"n\">hC.Hom</span> <span class=\"n\">Z</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">‚ü®</span><span class=\"n\">Z‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">f‚ÇÅ</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">Z‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">f‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"n\">Z‚ÇÅ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z‚ÇÇ</span> <span class=\"bp\">//</span> <span class=\"n\">œÉ</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f‚ÇÇ.fst</span> <span class=\"bp\">=</span> <span class=\"n\">f‚ÇÅ.fst</span> <span class=\"bp\">‚àß</span> <span class=\"n\">œÉ</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f‚ÇÇ.snd</span> <span class=\"bp\">=</span> <span class=\"n\">f‚ÇÅ.snd</span><span class=\"o\">}</span>\n  <span class=\"n\">id</span>  <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hC.id_comp</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hC.id_comp</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">‚ü®</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">‚ü®</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hC.assoc</span><span class=\"o\">,</span> <span class=\"n\">hg.left</span><span class=\"o\">,</span> <span class=\"n\">hf.left</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hC.assoc</span><span class=\"o\">,</span> <span class=\"n\">hg.right</span><span class=\"o\">,</span> <span class=\"n\">hf.right</span><span class=\"o\">]‚ü©</span>\n  <span class=\"n\">id_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Subtype.ext</span> <span class=\"o\">(</span><span class=\"n\">hC.id_comp</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">comp_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Subtype.ext</span> <span class=\"o\">(</span><span class=\"n\">hC.comp_id</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Subtype.ext</span> <span class=\"o\">(</span><span class=\"n\">hC.assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasFiniteProducts</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">hasFinal</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œ£</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">hC.Hom</span> <span class=\"n\">Z</span> <span class=\"n\">A</span> <span class=\"bp\">√ó</span> <span class=\"n\">hC.Hom</span> <span class=\"n\">Z</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Final</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">HasFiniteProducts</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">AProd</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hp.hasFinal</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose.fst</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">A</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" √ó_C \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AProd</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">AProd.fstHom</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">B</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hp.hasFinal</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose.snd.fst</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">AProd.sndHom</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">B</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hp.hasFinal</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose.snd.snd</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">AProd_Final_sigma</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Final</span> <span class=\"o\">(‚ü®</span><span class=\"n\">A</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">AProd.fstHom</span><span class=\"o\">,</span> <span class=\"n\">AProd.sndHom</span><span class=\"o\">‚ü©</span>\n      <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œ£</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">hC.Hom</span> <span class=\"n\">Z</span> <span class=\"n\">A</span> <span class=\"bp\">√ó</span> <span class=\"n\">hC.Hom</span> <span class=\"n\">Z</span> <span class=\"n\">B</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hp.hasFinal</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">AProd.lift_aux</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Unique</span> <span class=\"o\">({</span><span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">B</span> <span class=\"bp\">//</span> <span class=\"n\">fg</span> <span class=\"bp\">‚â´</span> <span class=\"n\">fstHom</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">‚àß</span> <span class=\"n\">fg</span> <span class=\"bp\">‚â´</span> <span class=\"n\">sndHom</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">}))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">F</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">AProd_Final_sigma</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n  <span class=\"k\">let</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">Z</span><span class=\"o\">‚ü©,</span> <span class=\"n\">hZ</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">F</span> <span class=\"o\">‚ü®</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">Z</span><span class=\"o\">‚ü©,</span> <span class=\"bp\">Œª</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hZ</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">AProd.lift</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">AProd.lift_aux</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">AProd.lift_comp_fst</span>  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">fstHom</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">AProd.lift_aux</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">default.prop.left</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">AProd.lift_comp_snd</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">sndHom</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">AProd.lift_aux</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">default.prop.right</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">AProd.lift_unique</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">fstHom</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">sndHom</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">AProd.lift_aux</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">uniq</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Subtype.val</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">‚ü®</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">‚ü©)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">AProd.lift_square_aux</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Unique</span> <span class=\"o\">({</span><span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">G</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">H</span> <span class=\"bp\">√ó</span><span class=\"n\">_C</span> <span class=\"n\">H</span> <span class=\"bp\">//</span> <span class=\"n\">fg</span> <span class=\"bp\">‚â´</span> <span class=\"n\">fstHom</span> <span class=\"bp\">=</span> <span class=\"n\">fstHom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">œÜ</span> <span class=\"bp\">‚àß</span> <span class=\"n\">fg</span> <span class=\"bp\">‚â´</span> <span class=\"n\">sndHom</span> <span class=\"bp\">=</span> <span class=\"n\">sndHom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">œÜ</span><span class=\"o\">}))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">fstHom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sndHom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">œÜ</span><span class=\"o\">),</span> <span class=\"n\">lift_comp_fst</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lift_comp_snd</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">intro</span> <span class=\"o\">‚ü®</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Subtype.ext</span> <span class=\"o\">(</span><span class=\"n\">lift_unique</span> <span class=\"n\">h</span> <span class=\"n\">hl</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 382413538,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1691343389
    },
    {
        "content": "<p>Where can I find some documentation/guide to understand how to reinterpret my proof in mathlib-style category theory defns?</p>",
        "id": 382413619,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1691343424
    },
    {
        "content": "<p>This is a really poorly stated exercise imo.</p>",
        "id": 382425025,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691347997
    },
    {
        "content": "<p>It‚Äôs not true that there is a unique morphism. What is true is that there is a unique morphism such that the composition with the projections satisfies some commutative square involving phi.</p>",
        "id": 382425255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691348131
    },
    {
        "content": "<p>That last point is left very implicit in the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>œï</mi><mo separator=\"true\">,</mo><mi>œï</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\phi,\\phi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">œï</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">œï</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 382425352,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691348165
    },
    {
        "content": "<p>Agreed. That's why I constrained the uniqueness to the subtype of homs such that composition equals composition with with phi.</p>",
        "id": 382427393,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1691349037
    },
    {
        "content": "<p>Initially, I was stuck for a while because I didn't have that constraint. But then I realized that if there was another hom psi between G and H, that would induce another hom between the products.</p>",
        "id": 382427537,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1691349102
    },
    {
        "content": "<p>The main definition you want to look at from mathlib would be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.prod#doc\">docs#CategoryTheory.prod</a> and the relevant api</p>",
        "id": 382432258,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691351363
    },
    {
        "content": "<p>we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.prod.map#doc\">docs#CategoryTheory.Limits.prod.map</a></p>",
        "id": 382432386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691351454
    }
]