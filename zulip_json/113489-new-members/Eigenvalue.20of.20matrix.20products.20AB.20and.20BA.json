[
    {
        "content": "<p>Hello everyone,</p>\n<p>I have been trying to prove the following: </p>\n<p>Let wo matrices   <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>×</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> A (m \\times n) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> and  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>×</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> B (n \\times m) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span> such that the two products <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> AB </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\"> BA </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">A</span></span></span></span> can be formed and if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> is an eigenvalue of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> AB </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\"> z \\neq 0 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is not zero then it must be an eigenvalue of BA. The math proof seemed straight forward but it took a lot a head banging to get the code shown below.</p>\n<p>The math proof goes something like the following:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>z</mi><mtext> is a non zero eigenvalue </mtext><mi>o</mi><mi>f</mi><mi>A</mi><mi>B</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi mathvariant=\"normal\">∃</mi><mi>v</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">C</mi><mi>m</mi></msup><mtext> and </mtext><mi>v</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi>B</mi><mi>v</mi><mo>=</mo><mi>z</mi><mi>v</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>B</mi><mi>A</mi><mi>B</mi><mi>v</mi><mo>=</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mi>v</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>B</mi><mi>A</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>z</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n&amp;z \\text{ is a non zero eigenvalue } of AB \\\\\n&amp;\\implies \\exists v \\in \\mathbb{C}^m \\text{ and } v \\neq 0 | ABv = zv \\\\\n&amp;\\implies BABv = B(zv) \\implies BA (Bv) = z(Bv) \\\\\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.5em;vertical-align:-2em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5em;\"><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5em;\"><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord text\"><span class=\"mord\"> is a non zero eigenvalue </span></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\"> and </span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0∣</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>The last equation implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> is an eigenvalue if we can show that  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">Bv</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> (the proposed eigenvector of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">BA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">A</span></span></span></span>)  is not zero. Assume by way of contradiction <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>v</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">Bv = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. Then: </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>A</mi><mi>B</mi><mi>v</mi><mo>=</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mn>0</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mtext>But </mtext><mspace width=\"1em\"/></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>v</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>z</mi><mi>v</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mtext>But </mtext><mspace width=\"1em\"/></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>A</mi><mi>B</mi><mi>v</mi><mo>=</mo><mi>z</mi><mi>v</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mn>0</mn><mo>=</mo><mi>z</mi><mi>v</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn><mo>→</mo><mtext> a contradiction </mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n&amp;ABv = A(Bv) = A0 = 0 \\\\\n\\text{But }\\quad &amp;v \\neq 0 \\implies zv \\neq 0 \\\\\n\\text{But }\\quad &amp;ABv = zv \\implies 0 = zv \\neq 0 \\rightarrow \\text{ a contradiction }\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.5em;vertical-align:-2em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5em;\"><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">But </span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">But </span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.5em;\"><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord text\"><span class=\"mord\"> a contradiction </span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Below is my attempt. I have a few questions:</p>\n<ol>\n<li>\n<p>I was not able to use the theorem <code>protected theorem mul_assoc </code> in the <code>data.matrix.basic</code> file. Is this because it is protected? How do I make use of it? Is there any other convenient way to go from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>B</mi><mi>v</mi><mo>=</mo><mi>z</mi><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">ABv = zv</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>A</mi><mi>B</mi><mi>v</mi><mo>=</mo><mi>z</mi><mi>B</mi><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">BABv = zBV</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>? Any other suggestions to replace the <code>sorry</code> in <code>ABveqzv_BABveqzBV </code>?</p>\n</li>\n<li>\n<p>The update of the status in vscode takes a long time after every modification I have to wait like 20 sec. (I am using <code>lean3.50</code> with <code>mathlib, rev=57e09a1296bfb4330ddf6624f1028ba186117d82</code>).  I ran the profile option on the lean executable and got this summary (I can post the whole log if  necessary). I this expected? Is there any way I can cut down the item labelled <code>tactic execution</code>, since it seems to be the bulk of the time?</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n        <span class=\"n\">compilation</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0024</span><span class=\"n\">ms</span>\n        <span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0083</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span> <span class=\"mi\">23</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"n\">s</span>\n        <span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">compilation</span> <span class=\"mi\">38</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">22</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">s</span>\n        <span class=\"n\">parsing</span> <span class=\"mi\">199</span><span class=\"n\">ms</span>\n        <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>Any thoughts on the proof. It was very ad-hoc so I guess it can use a lot of improvement?</li>\n</ol>\n<p>Thanks a lot in advance for your time and help.</p>\n<p>Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span> <span class=\"n\">big_operators</span> <span class=\"n\">complex_conjugate</span>\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">module</span>\n<span class=\"kn\">open</span> <span class=\"n\">module.End</span>\n<span class=\"kn\">open</span> <span class=\"n\">linear_map</span>\n<span class=\"kn\">open</span> <span class=\"n\">orthonormal_basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ABveqzv_BABveqzBV</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hinj</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">•</span><span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">⬝</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">•</span><span class=\"o\">(</span><span class=\"n\">B.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eig_AB_is_eig_BA</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hEigz</span><span class=\"o\">:</span> <span class=\"n\">has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">matrix.to_lin'</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hEigzNz</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">matrix.to_lin'</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">⬝</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hVecExists</span> <span class=\"o\">:=</span> <span class=\"n\">hEigz.exists_has_eigenvector</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hVecExists</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsMul</span> <span class=\"o\">:=</span> <span class=\"n\">hv.apply_eq_smul</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hv</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">hvNz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">BvNz</span> <span class=\"o\">:</span> <span class=\"n\">B.mul_vec</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">to_lin'</span> <span class=\"n\">at</span> <span class=\"n\">hsMul</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hsMul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_vec_mul_vec</span> <span class=\"n\">at</span> <span class=\"n\">hsMul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hsMul</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hsMul</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hxra</span><span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">•</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">hsMul</span><span class=\"o\">,},</span>\n    <span class=\"n\">clear</span> <span class=\"n\">hsMul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">hxra</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hxra</span> <span class=\"k\">with</span> <span class=\"n\">hzz</span> <span class=\"n\">hvz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hEigzNz</span> <span class=\"n\">hzz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hvNz</span> <span class=\"n\">hvz</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">BvEig</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">matrix.to_lin'</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">⬝</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">B.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">has_eigenvector</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">to_lin'</span> <span class=\"n\">at</span> <span class=\"n\">hsMul</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hsMul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_eigenspace_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">to_lin'</span><span class=\"o\">],</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ABveqzv_BABveqzBV</span> <span class=\"n\">hsMul</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">BvNz</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">has_eigenvalue_of_has_eigenvector</span> <span class=\"n\">BvEig</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 344720611,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1679869301
    },
    {
        "content": "<p>Protected lemmas need to be used via their full name (in this case <code>matrix.mul_assoc</code>) this is normally done when the name is too common so it would overlap too much with other lemmas otherwise.</p>",
        "id": 344721074,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679869646
    },
    {
        "content": "<p>20s indeed does seem a bit long, I'd recommend commenting out different parts of your proof (using <code>sorry { stuff }</code> to disable bits of it) and seeing where the slow parts are, if there is one line that is taking most of the time or something we can definitely look at how to improve that</p>",
        "id": 344721211,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679869766
    },
    {
        "content": "<p>In general though, breaking larger proofs down into lots of  smaller lemmas is always helpful for speed</p>",
        "id": 344721237,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679869791
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> . <br>\nI tried what you suggested, commenting out and reprofiling. I made a guess that the simp tactic is the one taking a good bulk of the time. After replacing all the simps with simp only. It seems the time got better. The <code>lean --profile</code> command shows a reduction to 2sec. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n        <span class=\"n\">compilation</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0025</span><span class=\"n\">ms</span>\n        <span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">007</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">34</span><span class=\"n\">s</span>\n        <span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">compilation</span> <span class=\"mi\">29</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">09</span><span class=\"n\">s</span>\n        <span class=\"n\">parsing</span> <span class=\"mi\">207</span><span class=\"n\">ms</span>\n        <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>In VSCode however the time feels a bit more than that. But hey I will take that over the 20 secs <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Any thoughts on the sorry in the <code>theorem ABveqzv_BABveqzBV </code>?<br>\nThanks again for your help.</p>",
        "id": 344723261,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1679871078
    },
    {
        "content": "<p>You might be interested to know about <code>set_option profiler true</code> which lets you turn on profiling for a single block of code</p>",
        "id": 344724197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679871613
    },
    {
        "content": "<p>Here's a proof of your missing lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ABveqzv_BABveqzBV</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hinj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">•</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">⬝</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul_vec</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">•</span><span class=\"o\">(</span><span class=\"n\">B.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">matrix.mul_vec_smul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hinj</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">matrix.mul_vec_mul_vec</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Note that it goes faster the less you import</p>",
        "id": 344724457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679871751
    },
    {
        "content": "<p>Nice! Thanks a lot <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nA question poses it self to me,<br>\nIn the second rewrite using <code>hinj</code>, you replaced the left side in the goal. <br>\nBut is there a way to do it more \"naturally\",  i.e. what is the lean equivalent of \"multiply both sides of <code>hinj</code> by matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> from the left\"?</p>",
        "id": 344725390,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1679872427
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\">tactic#apply_fun</a> for that something like <code>apply_fun ((⬝) B) at hinj</code></p>",
        "id": 344726012,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679872857
    },
    {
        "content": "<p><code>replace hinj := congr_arg B.mul_vec hinj,</code> does what you need</p>",
        "id": 344727076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679873868
    },
    {
        "content": "<p>It's a matrix/vector multiply not a matrix/matrix, so you can't use <code>⬝</code> like Alex suggests</p>",
        "id": 344727134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679873896
    },
    {
        "content": "<p>Using Alex's suggestion I tried <code>apply_fun (B.mul_vec) at hinj</code>. It seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">B.mul_vec</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hinj</span><span class=\"o\">,</span> <span class=\"c1\">-- Alex J Best'ts Suggestion.</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.mul_vec_mul_vec</span><span class=\"o\">,</span> <span class=\"n\">mul_vec_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hinj</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- rw [←matrix.mul_vec_smul, ←hinj, ←matrix.mul_vec_mul_vec], -- Eric Wiesers Proof</span>\n</code></pre></div>",
        "id": 344727385,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1679874173
    },
    {
        "content": "<p>What's the goal state at the point you did <code>tauto</code>?</p>",
        "id": 344728101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679874919
    },
    {
        "content": "<p>If it's what I think it is and <code>hinj</code> is exactly the goal, that's a massively overkill tactic that will make everything slower</p>",
        "id": 344728114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679874949
    },
    {
        "content": "<p>You want either <code>assumption</code> or <code>exact hinj</code></p>",
        "id": 344728119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679874958
    },
    {
        "content": "<p>or <code>rwa [...] at hinj</code>?</p>",
        "id": 344734729,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679879249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  <br>\nYes it is exactly <code>hinj</code>. <br>\nThanks that is very useful to know.<br>\nAny references or thoughts on which tactics on which tactics to avoid?  or which are slower than others?</p>",
        "id": 344786941,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1679903413
    },
    {
        "content": "<p>Non terminal simps, finish, tidy and omega can sometimes be slow</p>",
        "id": 344792084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679904964
    }
]