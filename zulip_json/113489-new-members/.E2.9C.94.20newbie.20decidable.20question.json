[
    {
        "content": "<p>hello, I have a simple newbie question.  I am getting the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">north_open</span> <span class=\"n\">mummy_position</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and my north_open function looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">north_open</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Position</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Boolean</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm not sure I understand how to tell Lean that the function is decidable.</p>",
        "id": 371788018,
        "sender_full_name": "Andrew",
        "timestamp": 1688322054
    },
    {
        "content": "<p>What is <code>Boolean</code>? Is it an abbreviation you made for <code>Prop</code>? There's also <code>Bool</code>, which has a coercion to <code>Prop</code> so you can use <code>Bool</code> values in places propositions are expected.</p>",
        "id": 371795509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688324694
    },
    {
        "content": "<p>I can only really speculate though without more information (a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would help a lot)</p>",
        "id": 371795646,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688324744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"629324\">Andrew</span> has marked this topic as resolved.</p>",
        "id": 371797347,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688325472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"629324\">Andrew</span> has marked this topic as unresolved.</p>",
        "id": 371797916,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688325731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20newbie.20decidable.20question/near/371795509\">said</a>:</p>\n<blockquote>\n<p>What is <code>Boolean</code>? Is it an abbreviation you made for <code>Prop</code>? There's also <code>Bool</code>, which has a coercion to <code>Prop</code> so you can use <code>Bool</code> values in places propositions are expected.</p>\n</blockquote>\n<p>Thank you -- I am a newbie.  I'm in vscode and I typed \"Bool\" but it didn't syntax highlight, but when I typed \"Boolean\" it seemed to highlight so I thought I was on the right track.  Now I know to use Bool instead :)</p>",
        "id": 371797978,
        "sender_full_name": "Andrew",
        "timestamp": 1688325774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"629324\">Andrew</span> has marked this topic as resolved.</p>",
        "id": 371798009,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688325784
    },
    {
        "content": "<p>You might consider putting <code>set_option autoImplicit false</code> at the top of your file to get Lean to throw an error rather than silently accepting these kinds of mistakes. The default right now is that when you make a definition, any unrecognized identifier in the type signature become new implicit arguments. It can be convenient, but the feature isn't always so newbie-friendly!</p>",
        "id": 371798855,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688326108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20newbie.20decidable.20question/near/371798855\">said</a>:</p>\n<blockquote>\n<p>You might consider putting <code>set_option autoImplicit false</code> at the top of your file to get Lean to throw an error rather than silently accepting these kinds of mistakes. The default right now is that when you make a definition, any unrecognized identifier in the type signature become new implicit arguments. It can be convenient, but the feature isn't always so newbie-friendly!</p>\n</blockquote>\n<p>I will do that.  Thank you for the pro-tip...</p>",
        "id": 371798992,
        "sender_full_name": "Andrew",
        "timestamp": 1688326160
    },
    {
        "content": "<p>I have a habit of hovering my mouse over identifiers to see that they're what I expect them to be. If it's pale blue and unexpectedly has a type like <code>Sort ?m.37</code> then auto-implicits kicked in</p>",
        "id": 371799057,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688326192
    }
]