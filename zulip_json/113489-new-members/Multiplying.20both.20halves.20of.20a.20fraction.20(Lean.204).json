[
    {
        "content": "<p>How can I do this proof (if possible, using calc mode)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 343461275,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679415882
    },
    {
        "content": "<p>Somehow I need to multiply both halves of the fraction by <code>m ^ 2</code> and then expand both halves. What's the best way to do this</p>",
        "id": 343461489,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679415941
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#field_simp\">tactic#field_simp</a>, maybe?</p>",
        "id": 343465112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679416824
    },
    {
        "content": "<p>You could start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_left_inj'</span> <span class=\"o\">(</span><span class=\"n\">pow_ne_zero</span> <span class=\"mi\">2</span> <span class=\"n\">hm</span><span class=\"o\">)]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 343466160,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679417080
    },
    {
        "content": "<p>If you give <code>field_simp</code> the information that <code>m^2 + n^2</code> is nonzero, then <code>field_simp; ring</code> should work (untested, but it worked for me in similar cases in Lean 3).</p>",
        "id": 343470419,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679418079
    },
    {
        "content": "<p>Actually the context for this question is <a href=\"https://github.com/leanprover-community/mathlib4/pull/3022\">!4#3022</a></p>",
        "id": 343471405,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679418323
    },
    {
        "content": "<p>so at line 512 I <code>have hv2 : v = 2 * m * n / ((m : ℚ) ^ 2 + (n : ℚ) ^ 2)</code>, and I do have the fact that <code>m^2 + n^2 != 0</code></p>",
        "id": 343471632,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679418387
    },
    {
        "content": "<p>but if I try <code>field_simp</code> (after rewriting <code>v</code>, see below) it somehow expands into a jumble of <code>x y z</code>s</p>",
        "id": 343471708,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679418408
    },
    {
        "content": "<p>It's easy to <code>calc</code> from <code>v</code> to <code>2 * (n / m) / (1 + (n / m) ^ 2)</code>, and this is where the original question came from</p>",
        "id": 343471967,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679418467
    },
    {
        "content": "<p>You could state the identity you want as a <code>have help : \\forall (m n : rat) (hm : m \\ne 0), ... = ...</code> and prove this by establishing <code>m^2 + n^2 \\ne 0</code>, then <code>field_simp; ring</code>, and use <code>help</code> to prove the <code>calc</code> step.</p>",
        "id": 343472616,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679418623
    },
    {
        "content": "<p>This avoids <code>m</code> and <code>n</code> to be replaced by their definitions.</p>",
        "id": 343472693,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679418644
    },
    {
        "content": "<p>It doesn't work though, the <code>field_simp</code> doesn't clear all denominators:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 343478084,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679420241
    },
    {
        "content": "<p>Does it work in Lean3?</p>",
        "id": 343480692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679420907
    },
    {
        "content": "<p>You also need <code>k * (k ^ 2 + j ^ 2) ≠ 0</code> (note the swapping of the summands).</p>",
        "id": 343480929,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679420983
    },
    {
        "content": "<p>(Tested in Lean 3.)</p>",
        "id": 343481033,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679421005
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_ne_zero</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">),</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 343481158,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679421034
    },
    {
        "content": "<p>OK I've made some progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">helper</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_ne_zero</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n    <span class=\"kd\">by</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n  <span class=\"k\">have</span> <span class=\"n\">hv2</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">ht4.1</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq2</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">Rat.cast_ne_zero.mpr</span> <span class=\"n\">hm0</span><span class=\"o\">)</span> <span class=\"n\">hm2n20</span>\n</code></pre></div>\n<p>There's just one little nit left for this part</p>",
        "id": 343487290,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679422506
    },
    {
        "content": "<p>The known hypothesis <code>hm0 : m != 0</code> has <code>m</code> an integer, whereas the helper needs <code>m</code> to be a rational</p>",
        "id": 343487445,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679422551
    },
    {
        "content": "<p>how can I get <code>(m : Rat) != 0</code> from <code>(m : Int) != 0</code> (the <code>Rat.cast...</code> part is the only thing not working)?</p>",
        "id": 343487632,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679422594
    },
    {
        "content": "<p><code>Nat.cast_ne_zero.mpr</code> not <code>Rat.cast_ne_zero.mpr</code></p>",
        "id": 343491397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679423667
    },
    {
        "content": "<p>It refers to the type being cast _from_</p>",
        "id": 343491410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679423673
    },
    {
        "content": "<p>Though that doesn't seem to help</p>",
        "id": 343491546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679423731
    },
    {
        "content": "<p>I pushed some unrelated fixes to that PR</p>",
        "id": 343491581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679423744
    },
    {
        "content": "<p><code>Int.cast_ne_zero.mpr</code>? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.cast_ne_zero#doc\">docs4#Int.cast_ne_zero</a></p>",
        "id": 343493880,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679424474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> that indeed worked (with the usual tweaking of arguments to fit the actual context)</p>",
        "id": 343497665,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679425528
    }
]