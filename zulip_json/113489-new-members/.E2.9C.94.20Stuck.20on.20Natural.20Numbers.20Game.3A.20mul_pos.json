[
    {
        "content": "<p>Hi,<br>\nI'm stuck on the first level of Advanced Multiplication World in the Natural Numbers Game.  I've tried all kinds of approaches, but I can't make progress. There must be some tactic which I'm missing.</p>\n<p>My  basic strategy is</p>\n<ul>\n<li>Use the induction tactic</li>\n<li>Solve for the easy zero case</li>\n<li>Look for a way to use trick (2) given in the hints.  i.e. I want the goal to be <code>false</code> and to have a hypothesis <code>succ(something)=0</code></li>\n</ul>\n<p>Could anyone give me a hint?  If possible, don't post the solution but give me just enough to allow me make progress</p>",
        "id": 279280476,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1650283619
    },
    {
        "content": "<p>Do you know the maths proof?</p>",
        "id": 279280714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650283813
    },
    {
        "content": "<p>PS the website seems to be down again :-/ Here's a mirror <a href=\"https://cbirkbeck.github.io/natural_number_game\">https://cbirkbeck.github.io/natural_number_game</a> . I've reported the issue, no doubt someone will read the report on Wednesday when the university opens again :-/</p>",
        "id": 279281149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650284317
    },
    {
        "content": "<p>I think the maths proof is something like this.   From the state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>We know that the successor of a number can never be zero.  <code>succ_ne_zero</code> should take care of that.<br>\nWe have a hypothesis that <code> b ≠ 0</code>.<br>\nWe need the fact that multiplying two non-zero numbers results in a non-zero number. <code>hd</code> looks to cover that, but I'm not sure what tactic would use <code>hd</code>to get the goal into the right state for  <code>succ_ne_zero</code></p>",
        "id": 279325605,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1650310983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"495142\">Joe Lambourne</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20on.20Natural.20Numbers.20Game.3A.20mul_pos/near/279325605\">said</a>:</p>\n<blockquote>\n<p>We need the fact that multiplying two non-zero numbers results in a non-zero number.</p>\n</blockquote>\n<p>Note that this fact is exactly what you need to prove in the first place</p>",
        "id": 279326091,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650311318
    },
    {
        "content": "<p>From the state you posted, it looks like you've already made a wrong turn. Your induction hypothesis hd is not strong enough to make progress, because it's about fixed d and you need it for all d. I think you should have encountered that situation a few times before getting to advanced multiplication</p>",
        "id": 279326636,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650311636
    },
    {
        "content": "<p>Ah. Yes.  So it looks like I don't know the maths proof.  <br>\nAlso it looks like starting with induction was a wrong move.  <code>cases b with n,</code> and solving the easy case got me to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 279328810,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1650312833
    },
    {
        "content": "<p>Notice that using <code>cases</code> instead of <code>induction</code> usually gives you <em>less</em> resources to work with (no induction hypothesis)</p>",
        "id": 279329320,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650313149
    },
    {
        "content": "<blockquote>\n<p>I think you should have encountered that situation a few times before getting to advanced multiplication</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> this is not true! In fact I never explain this issue properly, which is why everyone gets stuck on advanced mult world level 4, which is the first time you really need it (I now spell out what to do in the hints).</p>\n<p><span class=\"user-mention\" data-user-id=\"495142\">@Joe Lambourne</span> it's getting to the point in the game where you need to know the maths proofs, you can't follow your nose any more. So I would try to figure out a maths proof before trying to leanify it.</p>",
        "id": 279330125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650313656
    },
    {
        "content": "<p>OK.  Proof by contradiction feels like a sensible strategy.<br>\nLet's imagine that we have two numbers <code>a ≠ 0</code> and <code>b ≠ 0</code> but <code>a*b=0</code>.<br>\nNow <code>a*succ(b)=a*b + a</code><br>\nbut as <code>a*b=0</code>we have<br>\n<code>a*succ(b)=a</code><br>\nThen with something like <code>mul_one</code> we see that <code>succ(b)=1</code><br>\nbut then <code>b=0</code></p>\n<p>Trying to follow this strategy I can get to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 279332525,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1650315019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20on.20Natural.20Numbers.20Game.3A.20mul_pos/near/279330125\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think you should have encountered that situation a few times before getting to advanced multiplication</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> this is not true! In fact I never explain this issue properly, which is why everyone gets stuck on advanced mult world level 4, which is the first time you really need it (I now spell out what to do in the hints).</p>\n</blockquote>\n<p>Oh huh, I was convinced it came up in addition somewhere. Thanks for the correction</p>",
        "id": 279333300,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650315476
    },
    {
        "content": "<p>I was able to solve this, but I'm trying to understand quite how the tactics worked.  The solution was a proof by contradiction implemented into lean using <code> exact succ_ne_zero _ hab</code> with a goal of <code>false</code> as recommended in the tricks section.</p>\n<p>However the expressions in hypothesis <code>hab</code> which worked are not at all what I expected.   It feels like the <code>exact</code> tactic is doing multiple extra steps for me.   Is there a way to see what lean has replaced <code>_</code> with to help extend my understanding?</p>",
        "id": 286662641,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1655574570
    },
    {
        "content": "<p>What is your proof? Tactics <code>apply</code> and <code>exact</code> can unfold terms up to definitional equality. So, for example, in this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">succ_ne_zero</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Before <code>apply succ_ne_zero</code>, the goal was <code>succ a * succ b ≠ 0</code>, but the <code>apply</code> tactic unfolds it to <code>succ a * b + succ a ≠ 0</code> and then to <code>succ (succ a * b + a) ≠ 0</code>, so it figures out that the argument for <code>succ_ne_zero</code> must be <code>succ a * b + a</code></p>",
        "id": 286663904,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655576310
    },
    {
        "content": "<p>You could fill in the hole with a random thing like 37 or <code>hab</code> and read the error to find out what it was expecting.</p>",
        "id": 286671085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655586344
    },
    {
        "content": "<blockquote>\n<p>What is your proof?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>   <span class=\"c1\">-- Let's imagine that we have natural numbers a and b which are non-zero</span>\n<span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"c1\">-- Using induction we have an easy zero case</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>           <span class=\"c1\">--  We assumed b=0 which contradicts ha</span>\n<span class=\"n\">exact</span> <span class=\"n\">ha</span><span class=\"o\">,</span>              <span class=\"c1\">-- Goal is now 0 != 0 which is the same as ha</span>\n<span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"c1\">-- Same induction steps for b</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- Now at this point we have  succ d * succ e ≠ 0</span>\n<span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"c1\">-- So here we are saying something like</span>\n           <span class=\"c1\">-- \"Imagine we have found natural numbers d and e</span>\n           <span class=\"c1\">--  such that succ d * succ e = 0.   This must be false\"</span>\n<span class=\"n\">exact</span> <span class=\"n\">succ_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">hab</span><span class=\"o\">,</span>  <span class=\"c1\">-- Works...   but why</span>\n</code></pre></div>\n<blockquote>\n<p>You could fill in the hole with a random thing like 37 or hab and read the error to find out what it was expecting.<br>\nThank you.  A useful tip.    But in this case it's telling me</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">succ_ne_zero</span> <span class=\"mi\">37</span> <span class=\"n\">hab</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hab</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">succ</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>So it's like lean is able to find a <code>_</code> such that <code>succ _ = 0</code> is equivalent to <code>succ d * succ e = 0</code> by definition.   I'm not really sure what that could be.</p>",
        "id": 286699208,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1655630007
    },
    {
        "content": "<p><code>succ d * succ e = 0</code> is definitionally equal to <code>succ (succ d * e + d) = 0</code></p>",
        "id": 286699580,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655630629
    },
    {
        "content": "<p>Note that whenever you do induction and then you realize you never used the induction hypothesis (like in your proof), you want <code>cases</code> instead.</p>",
        "id": 286699636,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655630697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20on.20Natural.20Numbers.20Game.3A.20mul_pos/near/286699580\">said</a>:</p>\n<blockquote>\n<p><code>succ d * succ e = 0</code> is definitionally equal to <code>succ (succ d * e + d) = 0</code></p>\n</blockquote>\n<p>Ah.  Yes.   Interesting.   That totally makes sense.    I was trying to expand this using <code>rw mul_succ</code> before the <code>intro hab</code> line.   That was giving <code>succ d * e + succ d ≠ 0</code>.   Maybe I'm not understanding where the brackets get placed.</p>",
        "id": 286699878,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1655631096
    },
    {
        "content": "<p>Function application has the highest priority, so the parentheses in <code>succ d * e + succ d</code> are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If you perform <code>rw add_succ</code> on <code>succ d * e + succ d</code>, you will get <code>succ (succ d * e + d)</code></p>",
        "id": 286700330,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655631739
    },
    {
        "content": "<blockquote>\n<p>Function application has the highest priority<br>\nOK.  Good.  That's how I was interpreting it</p>\n</blockquote>\n<blockquote>\n<p>If you perform rw add_succ on succ d * e + succ d, you will get succ (succ d * e + d)<br>\nAh.  Perfect.   This now explains everything.</p>\n</blockquote>\n<p>Thank you everyone for all your help with this!!</p>",
        "id": 286701356,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1655633221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"495142\">Joe Lambourne</span> has marked this topic as resolved.</p>",
        "id": 286701364,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655633231
    }
]