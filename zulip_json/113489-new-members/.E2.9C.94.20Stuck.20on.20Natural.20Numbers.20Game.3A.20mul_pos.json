[
    {
        "content": "<blockquote>\n<p>What is your proof?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>   <span class=\"c1\">-- Let's imagine that we have natural numbers a and b which are non-zero</span>\n<span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"c1\">-- Using induction we have an easy zero case</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>           <span class=\"c1\">--  We assumed b=0 which contradicts ha</span>\n<span class=\"n\">exact</span> <span class=\"n\">ha</span><span class=\"o\">,</span>              <span class=\"c1\">-- Goal is now 0 != 0 which is the same as ha</span>\n<span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"c1\">-- Same induction steps for b</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- Now at this point we have  succ d * succ e ≠ 0</span>\n<span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"c1\">-- So here we are saying something like</span>\n           <span class=\"c1\">-- \"Imagine we have found natural numbers d and e</span>\n           <span class=\"c1\">--  such that succ d * succ e = 0.   This must be false\"</span>\n<span class=\"n\">exact</span> <span class=\"n\">succ_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">hab</span><span class=\"o\">,</span>  <span class=\"c1\">-- Works...   but why</span>\n</code></pre></div>\n<blockquote>\n<p>You could fill in the hole with a random thing like 37 or hab and read the error to find out what it was expecting.<br>\nThank you.  A useful tip.    But in this case it's telling me</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">succ_ne_zero</span> <span class=\"mi\">37</span> <span class=\"n\">hab</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hab</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">succ</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>So it's like lean is able to find a <code>_</code> such that <code>succ _ = 0</code> is equivalent to <code>succ d * succ e = 0</code> by definition.   I'm not really sure what that could be.</p>",
        "id": 286699208,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1655630007
    },
    {
        "content": "<p><code>succ d * succ e = 0</code> is definitionally equal to <code>succ (succ d * e + d) = 0</code></p>",
        "id": 286699580,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655630629
    },
    {
        "content": "<p>Note that whenever you do induction and then you realize you never used the induction hypothesis (like in your proof), you want <code>cases</code> instead.</p>",
        "id": 286699636,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655630697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20on.20Natural.20Numbers.20Game.3A.20mul_pos/near/286699580\">said</a>:</p>\n<blockquote>\n<p><code>succ d * succ e = 0</code> is definitionally equal to <code>succ (succ d * e + d) = 0</code></p>\n</blockquote>\n<p>Ah.  Yes.   Interesting.   That totally makes sense.    I was trying to expand this using <code>rw mul_succ</code> before the <code>intro hab</code> line.   That was giving <code>succ d * e + succ d ≠ 0</code>.   Maybe I'm not understanding where the brackets get placed.</p>",
        "id": 286699878,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1655631096
    },
    {
        "content": "<p>Function application has the highest priority, so the parentheses in <code>succ d * e + succ d</code> are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If you perform <code>rw add_succ</code> on <code>succ d * e + succ d</code>, you will get <code>succ (succ d * e + d)</code></p>",
        "id": 286700330,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655631739
    },
    {
        "content": "<blockquote>\n<p>Function application has the highest priority<br>\nOK.  Good.  That's how I was interpreting it</p>\n</blockquote>\n<blockquote>\n<p>If you perform rw add_succ on succ d * e + succ d, you will get succ (succ d * e + d)<br>\nAh.  Perfect.   This now explains everything.</p>\n</blockquote>\n<p>Thank you everyone for all your help with this!!</p>",
        "id": 286701356,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1655633221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"495142\">Joe Lambourne</span> has marked this topic as resolved.</p>",
        "id": 286701364,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655633231
    },
    {
        "content": "<p>Hello to all,</p>\n<p>After reading the stream, I see that the power of <code>exact</code> and what definitionally equal means, are really important to overcome this level.<br>\nI too have been stuck for a long while, so thank you very much in advance for the help.</p>\n<p>But I would maybe like to leave my solution in case it can help other people unfamiliar with both concepts. The difference being that I do some intermediate substitutions to achieve a more \"visual\" equality between the expressions, not only definitional equality.</p>\n<div class=\"codehilite\" data-code-language=\"intros\"><pre><span></span><code>cases a,\ncc, -- easy base case\ncases b,\ncc, -- easy base case\nrw mul_succ at h_a_mul_b, -- this line could be omitted due to definitionally equality\napply succ_ne_zero (succ a*b + a), -- try to build h_a_mul_b backwards from false\nrw ← add_succ, -- this line can also be omitted for the same reason\nexact h_a_mul_b,\n</code></pre></div>\n<p>It is not too long... and I hope it is conceptually correct.<br>\nThis was the same intuition I used in some previous proofs by contradiction (like the ones involving not equal). Until I further grasp what definitionally equal \"looks like\" I feel more comfortable building solutions like this.</p>",
        "id": 397976762,
        "sender_full_name": "Nicolau Oliver",
        "timestamp": 1698014642
    },
    {
        "content": "<p>I have made the decision to move away from definitional equality in NNG4. I had really hoped to deprecate NNG3 this weekend but for family reasons I ended up going to the seaside instead. Can I urge you to move to NNG4? Inequality world is running on my laptop and will be live within the next few days. It's here <a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4\">https://adam.math.hhu.de/#/g/hhu-adam/NNG4</a></p>",
        "id": 398014945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698040587
    }
]