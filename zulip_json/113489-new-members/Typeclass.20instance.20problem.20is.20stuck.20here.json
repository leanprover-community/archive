[
    {
        "content": "<p>How do I fix the error in the last line below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Localization.FractionRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Localization.Integer</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.UniqueFactorizationDomain</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IsLocalization</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">UniqueFactorizationMonoid</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_reduced_fraction</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nonZeroDivisors</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">},</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">IsUnit</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">mk'</span> <span class=\"n\">K</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">num</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">exists_reduced_fraction</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">denom</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonZeroDivisors</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_reduced_fraction</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mk'_num_denom</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mk'</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">denom</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_reduced_fraction</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">num_mul_denom_eq_num_mul_denom_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">num</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">denom</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">num</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">denom</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- the error is in mk'_eq_of_eq' h below</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mk'_num_denom</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mk'_eq_of_eq'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 343815225,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679536780
    },
    {
        "content": "<p>The error being</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">IsLocalization</span> <span class=\"o\">(</span><span class=\"n\">nonZeroDivisors</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.10189</span>\n</code></pre></div>",
        "id": 343815240,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679536799
    },
    {
        "content": "<p>So in this tactic state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.102398</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁹</span><span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span>\n<span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">R</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.102498</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">S</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁷</span><span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.102758</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁶</span><span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">P</span>\n<span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">A</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁴</span><span class=\"o\">:</span> <span class=\"n\">IsDomain</span> <span class=\"n\">A</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">UniqueFactorizationMonoid</span> <span class=\"n\">A</span>\n<span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">K</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">IsFractionRing</span> <span class=\"n\">A</span> <span class=\"n\">K</span>\n<span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">denom</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">num</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">denom</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">mk'</span> <span class=\"bp\">?</span><span class=\"n\">m.104168</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">denom</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk'</span> <span class=\"bp\">?</span><span class=\"n\">m.104168</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">denom</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to put <code>S</code> into the place of <code>?m.104168</code> but I don't know how</p>",
        "id": 343817756,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679539211
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">num_mul_denom_eq_num_mul_denom_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">num</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">denom</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">num</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">denom</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mk'_num_denom</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mk'_eq_of_eq'</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 343819282,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679540154
    },
    {
        "content": "<p>This is a new feature in lean4, where you can fill in implicit variables with <code>(_ := _)</code>. In lean3 you would have had to write <code>@mk'_eq_of_eq'</code> with a bunch of underscores.</p>",
        "id": 343819365,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679540225
    }
]