[
    {
        "content": "<p>There is <code>abs_cases a : |a| = a ∧ 0 ≤ a ∨ |a| = -a ∧ a &lt; 0</code>. However,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">abs_cases</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>gives an inaccessible hypothesis (<code>|a| = a ∧ 0 ≤ a</code>). Why is it inaccessible?</p>",
        "id": 383872273,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691743497
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">abs_cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383872584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691743554
    },
    {
        "content": "<p>It's inaccessible because you didn't tell Lean you wanted to access it; this is just how <code>cases</code> works in Lean 4.</p>",
        "id": 383872748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691743583
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html?highlight=cases#more-tactics\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html?highlight=cases#more-tactics</a> has a part about</p>\n<blockquote>\n<p>You can also use a (unstructured) cases without the with and a tactic for each alternative.</p>\n</blockquote>\n<p>Why does it not apply here?</p>",
        "id": 383873606,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691743729
    },
    {
        "content": "<p>Unstructured cases makes the new variables inaccesible</p>",
        "id": 383876843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691744410
    },
    {
        "content": "<p>You can use <code>cases' abs_cases with h h</code> if you want a compromise, which is a mathlib extension IIRC</p>",
        "id": 383876918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691744426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> has marked this topic as resolved.</p>",
        "id": 383877086,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691744467
    }
]