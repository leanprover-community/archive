[
    {
        "content": "<p>Hello, I can't figure out why the <code>rw [same]</code> in the example below does not work.<br>\nI introduced <code>same</code> as a sanity check to verify they are indeed equal, but even a direct rewrite does not work... I also tried conv.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f.support.card</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test.upd</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hin</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">t.f.support</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpos</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n\n  <span class=\"o\">⟨</span><span class=\"n\">t.f.update</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.update</span><span class=\"o\">,</span> <span class=\"n\">hpos</span><span class=\"o\">]</span>\n   <span class=\"k\">have</span> <span class=\"n\">same</span><span class=\"o\">:</span>\n    <span class=\"n\">Finset.card</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">n</span> <span class=\"n\">t.f.support</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.card</span> <span class=\"n\">t.f.support</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.card_insert_of_mem</span> <span class=\"n\">hin</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">same</span><span class=\"o\">]</span>\n   <span class=\"gr\">sorry</span>\n  <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 355970529,
        "sender_full_name": "Daniele Pusceddu",
        "timestamp": 1683272841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"612987\">@Daniele Pusceddu</span> Lean pretty-prints your proof state so that it's more readable, but you can add an option to make it show everything in detail (turn off pretty printing), e.g. by adding the line <code>set_option pp.all true in</code> above your <code>def test.upd</code>.</p>",
        "id": 355997485,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683279714
    },
    {
        "content": "<p>in your case it gives me this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">@</span><span class=\"n\">Finset.card.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Insert.insert.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.instInsertFinset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instDecidableEqNat</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finsupp.support.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommMonoidWithZero.toZero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.linearOrderedCommMonoidWithZero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">test.f</span> <span class=\"n\">t</span><span class=\"o\">)))</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n<span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">hin</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.instMembershipFinset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finsupp.support.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommMonoidWithZero.toZero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.linearOrderedCommMonoidWithZero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">test.f</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n<span class=\"n\">same</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.card.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Insert.insert.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.instInsertFinset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instDecidableEqNat</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finsupp.support.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommMonoidWithZero.toZero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.linearOrderedCommMonoidWithZero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">test.f</span> <span class=\"n\">t</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.card.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finsupp.support.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommMonoidWithZero.toZero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.linearOrderedCommMonoidWithZero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">test.f</span> <span class=\"n\">t</span><span class=\"o\">)))</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.card.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Insert.insert.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Finset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.instInsertFinset.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.decEq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finsupp.support.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommMonoidWithZero.toZero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.linearOrderedCommMonoidWithZero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">test.f</span> <span class=\"n\">t</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 355997677,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683279753
    },
    {
        "content": "<p>and if you compare <code>same</code> with your goal, it looks ilke it's using a different equality type for <code>a = b</code>, <code> instDecidableEqNat a b</code> vs <code>Classical.decEq.{1} Nat a b</code></p>",
        "id": 355997889,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683279810
    },
    {
        "content": "<p>that answers why it doesn't rewrite. How to fix that I'm not sure, I don't really know what <code>Classical.decEq</code> does and why your <code>h</code> in <code>test</code> asks for that</p>",
        "id": 355998325,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683279921
    },
    {
        "content": "<p>What I do in situations like that is just write a line<br>\n<code>#check Classical.decEq</code> so that I can use my editor to \"go to definition\", and that sends me to the mathlib definition of <code>Classical.decEq</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Any type `α` has decidable equality classically. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">decEq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">classical.dec_eq</span> <span class=\"n\">Classical.decEq</span>\n</code></pre></div>",
        "id": 355998713,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683280014
    },
    {
        "content": "<p>the strange thing is that it's using that instance for your cardinalities, which are <code>Nat</code>s. I have no idea why though</p>",
        "id": 355999329,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683280159
    },
    {
        "content": "<p>The answer is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp#doc\">docs4#Finsupp</a> is classical and something in the API is leaking this implementation detail. I don't know where exactly the problem is, but I can tell you something is wrong and it's not your fault.</p>",
        "id": 356009870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683282552
    },
    {
        "content": "<p>thanks, that's a much better way of putting it <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 356017150,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683284159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"612987\">@Daniele Pusceddu</span> There's a tactic that can be useful here, which is <code>convert</code>. It knows that there is at most one <code>Fintype</code> instance for a given type and inserts rewrites automatically for you to convert from one to the other. Since the LHS of <code>same</code> is supposed to match the LHS of the goal (except for the fact it's not defeq), we can do <code>convert same</code> to have it line things up and create new goals for things it can't figure out are equal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Convert</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f.support.card</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test.upd</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hin</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">t.f.support</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpos</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n\n  <span class=\"o\">⟨</span><span class=\"n\">t.f.update</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span>\n\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.update</span><span class=\"o\">,</span> <span class=\"n\">hpos</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">same</span><span class=\"o\">:</span> <span class=\"n\">Finset.card</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">n</span> <span class=\"n\">t.f.support</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.card</span> <span class=\"n\">t.f.support</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.card_insert_of_mem</span> <span class=\"n\">hin</span>\n      <span class=\"n\">convert</span> <span class=\"n\">same</span> <span class=\"c1\">-- or do `convert ← same` to get the goal to be reversed, which looks better</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 356020826,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683285071
    },
    {
        "content": "<p>In general, think of <code>convert</code> to be like <code>exact</code> but it creates side goals wherever there are differences that it can't resolve itself.</p>",
        "id": 356021170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683285163
    }
]