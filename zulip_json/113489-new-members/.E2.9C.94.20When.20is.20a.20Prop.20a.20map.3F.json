[
    {
        "content": "<p>I am looking at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inversion_surjective</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Surjective</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">inversion_involutive</span> <span class=\"n\">c</span> <span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Surjective</span>\n</code></pre></div>\n<p>on line 102 of <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Geometry/Euclidean/Inversion.lean\">Inversion.lean</a>.</p>\n<p>The following holds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span>\n<span class=\"n\">Involutive</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inversion_involutive</span> <span class=\"n\">c</span> <span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">Involutive</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>hence (I think, transitive?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inversion_involutive</span> <span class=\"n\">c</span> <span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Function.Surjective.</span><span class=\"o\">{</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I guess that <code>e.f</code> is the same as <code>f e</code>.  <code>Surjective</code> requires a map.  <code>inversion_involutive c hR </code> is not a map, it's a <code>Prop</code>.  so why would </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">inversion_involutive</span> <span class=\"n\">c</span> <span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Surjective</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Surjective</span> <span class=\"o\">(</span><span class=\"n\">inversion_involutive</span> <span class=\"n\">c</span> <span class=\"n\">hR</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>have worked in Lean 3?</p>",
        "id": 361209068,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685072775
    },
    {
        "content": "<p>most likely <code>Involutive</code> has a coercion to function; look for <code>CoeFn (Involutive ...)</code></p>",
        "id": 361209498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685073076
    },
    {
        "content": "<p>actually you haven't said what the definition of <code>Involutive</code> is, it may well be a function type (there are function types in <code>Prop</code> you know - they are called implications!)</p>",
        "id": 361209637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685073172
    },
    {
        "content": "<p>while it's not an implication, it is a pi type: <a href=\"https://github.com/leanprover-community/mathlib4/blob/a6885a1a7f1c301ca3061ca678024788cf82aa54/Mathlib/Logic/Function/Basic.lean#L870-L871\">https://github.com/leanprover-community/mathlib4/blob/a6885a1a7f1c301ca3061ca678024788cf82aa54/Mathlib/Logic/Function/Basic.lean#L870-L871</a></p>",
        "id": 361209788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685073291
    },
    {
        "content": "<p>I forget what the exact rules are, we added some hacks to lean 3 to support this kind of thing, but I think if we unfold everything and hit a pi type we look in the <code>Function</code> namespace for dot-notation stuff</p>",
        "id": 361209851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685073343
    },
    {
        "content": "<p>Actually, looking at the original code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inversion_involutive</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Involutive</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inversion_inversion</span> <span class=\"n\">c</span> <span class=\"n\">hR</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inversion_surjective</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Surjective</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">inversion_involutive</span> <span class=\"n\">c</span> <span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Surjective</span>\n</code></pre></div>\n<p>it is most likely that this is referring to a function called <code>Involutive.Surjective</code> (which should be called <code>Involutive.surjective</code> BTW) which asserts that an involution is surjective</p>",
        "id": 361209991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685073443
    },
    {
        "content": "<p>It is called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Involutive.surjective#doc\">docs4#Function.Involutive.surjective</a> but mathport capitalized dot notation.</p>",
        "id": 361211534,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685074363
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , lower-casing .surjective, .injective and .bijective fixed lines 99, 103 and 107 of <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Geometry/Euclidean/Inversion.lean\">Inversion.lean</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inversion_surjective</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Surjective</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">inversion_involutive</span> <span class=\"n\">c</span> <span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">surjective</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">euclidean_geometry.inversion_surjective</span> <span class=\"n\">EuclideanGeometry.inversion_surjective</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inversion_injective</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">inversion_involutive</span> <span class=\"n\">c</span> <span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">euclidean_geometry.inversion_injective</span> <span class=\"n\">EuclideanGeometry.inversion_injective</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inversion_bijective</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bijective</span> <span class=\"o\">(</span><span class=\"n\">inversion</span> <span class=\"n\">c</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">inversion_involutive</span> <span class=\"n\">c</span> <span class=\"n\">hR</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bijective</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">euclidean_geometry.inversion_bijective</span> <span class=\"n\">EuclideanGeometry.inversion_bijective</span>\n</code></pre></div>",
        "id": 361440788,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685136078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> has marked this topic as resolved.</p>",
        "id": 361440820,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685136092
    }
]