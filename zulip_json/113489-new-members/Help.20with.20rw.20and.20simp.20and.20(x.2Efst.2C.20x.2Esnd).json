[
    {
        "content": "<p>I'm having trouble getting either rw or simp to substitute (x.fst, x.snd) by x. The goal I have is</p>\n<div class=\"codehilite\"><pre><span></span><code>(fun state =&gt; (fun x =&gt; pure (x.fst, x.snd)) &lt;=&lt; f state) = f\n</code></pre></div>\n\n<p>This is where I got from using simp, but simp doesn't appear to be able to go any further. If I was able then substitute (x.fst, x.snd) with x, then I can remove the lambda, and then I have pure  &lt;=&lt; f state which should be easy to prove is f state, and then I would get f. But at the moment I'm stuck on  rewriting (x.fst, x.snd) to  x.</p>\n<p>I've proved the following without issue with simp</p>\n<div class=\"codehilite\"><pre><span></span><code>have h : ∀x : Prod α β, (x.fst, x.snd) = x := by simp\n</code></pre></div>\n\n<p>But if I try to use that in the goal above with rw or simp it fails. For instance below is what happens with <code>rw [h]</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">384</span><span class=\"o\">:</span><span class=\"mi\">18</span>\n<span class=\"n\">Tactic</span> <span class=\"n\">state</span>\n<span class=\"n\">case</span> <span class=\"n\">cell.mk</span>\n<span class=\"n\">bc</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">,</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"n\">s</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">✝</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">,</span> <span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"bp\">&lt;=&lt;</span> <span class=\"n\">f</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">384</span><span class=\"o\">:</span><span class=\"mi\">16</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x.fst</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">x.snd</span><span class=\"o\">)</span>\n<span class=\"n\">case</span> <span class=\"n\">cell.mk</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">,</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">✝</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">,</span> <span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"bp\">&lt;=&lt;</span> <span class=\"n\">f</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>The type of x in fun x is <code>c × s✝</code> so it should be a normal Prod.</p>\n<p>I think I'm probably missing something...</p>",
        "id": 345919431,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680262730
    },
    {
        "content": "<p>full code <a href=\"https://gist.github.com/miguel-negrao/02a9e72e9b8a8bc3745c7b426c6a8d91\">here</a>.</p>",
        "id": 345921351,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680263196
    },
    {
        "content": "<p><code>rw</code> can't see under the binder, try using <code>simp_rw</code>. Or just forget the <code>have h</code> and instead of <code>rw [h]</code> you can just use <code>simp only [Prod.mk.eta]</code></p>",
        "id": 345936481,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680266441
    },
    {
        "content": "<p>simp_rw is from Mathlib, but if I import Mahtlib suddenly simp doesn't get hung up in the same place, it finishes the whole goal in one go.  So it appears with Mathlib simp becomes more powerful !</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cell_id_comp</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">cell</span> <span class=\"o\">:</span> <span class=\"n\">Cell</span> <span class=\"n\">m</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">cellCatCompose</span> <span class=\"n\">cellCatId</span> <span class=\"n\">cell</span> <span class=\"bp\">=</span> <span class=\"n\">cell</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">cell</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">arrm</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cellCatCompose</span><span class=\"o\">,</span> <span class=\"n\">cellCatId</span><span class=\"o\">,</span> <span class=\"n\">Bind.kleisliLeft</span><span class=\"o\">]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">cell</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cellCatCompose</span><span class=\"o\">,</span> <span class=\"n\">cellCatId</span><span class=\"o\">,</span> <span class=\"n\">Bind.kleisliLeft</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Thanks for letting me know about simp_rw, it might come in handy in another situation where I need to do substitutions under binders.</p>",
        "id": 345942413,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680267717
    },
    {
        "content": "<p>You don't need <code>simp_rw</code>, <code>simp only [h]</code> should work (or whatever lemma <code>simp</code> calls to solve your <code>have h</code>). This should avoid you needing to make mathlib a dependency if you would prefer to avoid it.</p>\n<p>It's not surprising that <code>simp</code> becomes more powerful with mathlib though: mathlib adds lots of <code>@[simp]</code> tagged lemmas.</p>",
        "id": 345946560,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680268483
    },
    {
        "content": "<p>Without <code>import Mathlib</code> <code>simp only [h]</code>does not do anything to the goal...</p>",
        "id": 345965810,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680272443
    },
    {
        "content": "<p>You can use <code>squeeze_simp</code> to find out which lemmas are being used.</p>",
        "id": 345968363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680272956
    },
    {
        "content": "<p>Kevin, this is Lean 4. I think it's <code>simp?</code> now.</p>",
        "id": 345968832,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680273049
    },
    {
        "content": "<p>There is some subtle issue with my <code>h</code>, actually without using Mathlib <code>simp only [Prod.eta]</code> works.</p>",
        "id": 345969715,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680273213
    },
    {
        "content": "<p>The issue with your <code>h</code> is that you gave it for <code>α β : Type</code> not <code>α β : Type _</code>.</p>",
        "id": 345970044,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680273270
    },
    {
        "content": "<p>But <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.eta#doc\">docs4#Prod.eta</a> is the right thing to use</p>",
        "id": 345970199,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680273301
    },
    {
        "content": "<p>Ok, so after <code>simp only [Prod.eta]</code>, simp doesn't do the eta reduction in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">p.fst</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=&lt;</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">p</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>I mean changing <code>(fun x =&gt; pure x) </code> to <code>pure</code>.  Should I pass an explicit eta reduction theorem to  simp ? Btw, ading <code>Prod.eta</code> to the list of theorems I'm passing to simp also works, I don't need to use <code>simp only</code> apparently.</p>",
        "id": 345972121,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680273687
    },
    {
        "content": "<p>But ok, the important thing here is that I got stuck because my version of Prod.eta didn't have the right universes.</p>",
        "id": 345972363,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680273735
    },
    {
        "content": "<p>But even with the following version of h it doesn't work with simp:</p>\n<div class=\"codehilite\"><pre><span></span><code>have h  {α : Type _} {β : Type _} (p : α × β) : (p.1, p.2) = p := rfl\n</code></pre></div>",
        "id": 345972910,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680273845
    },
    {
        "content": "<p>while <code>Prod.eta</code> does...</p>",
        "id": 345972987,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680273863
    },
    {
        "content": "<p>Similarly the following also doesn't manage to get simp to do the eta reduction...</p>\n<div class=\"codehilite\"><pre><span></span><code>have h2  {α : Type _} {β : Type _} (f : α → β) : (λ x ↦ f x) = f := rfl\n</code></pre></div>\n\n<p>I'm a bit lost here...</p>",
        "id": 345973765,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680274036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20rw.20and.20simp.20and.20.28x.2Efst.2C.20x.2Esnd.29/near/345968832\">disse</a>:</p>\n<blockquote>\n<p>Kevin, this is Lean 4. I think it's <code>simp?</code> now.</p>\n</blockquote>\n<p>Right, in lean 4 it's simp?. With that I can see what else I needed to add to make it work only in Lean 4 without Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>simp only [cellCatCompose, cellCatId, Bind.kleisliLeft, map_pure, Prod.eta, bind_pure]\n</code></pre></div>",
        "id": 345979029,
        "sender_full_name": "Miguel Negrão",
        "timestamp": 1680275117
    }
]