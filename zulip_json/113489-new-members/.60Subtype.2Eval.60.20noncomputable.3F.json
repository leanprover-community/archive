[
    {
        "content": "<p>Can anyone lead me through this issue?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The type of sub-domains of a domain -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">SubDomain</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">y</span> <span class=\"bp\">⊆</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoeOut</span> <span class=\"o\">(</span><span class=\"n\">SubDomain</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y.val</span>\n\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Subtype.val', and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">SubDomain</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoeOut</span> <span class=\"o\">(</span><span class=\"n\">SubDomain</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">SubDomain</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">z.val</span><span class=\"o\">,</span> <span class=\"n\">subset_trans</span> <span class=\"n\">z.property</span> <span class=\"n\">y.property</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I'm failing to grasp why the first coercion works but the second does not.</p>",
        "id": 408688758,
        "sender_full_name": "N Gelwan",
        "timestamp": 1702934062
    },
    {
        "content": "<p>can you please read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and update your code with imports, namespaces, etc.?</p>",
        "id": 408689044,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702934203
    },
    {
        "content": "<p>Here's a reduced example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Subtype.val', and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">True</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">True</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">z.val</span><span class=\"o\">,</span> <span class=\"n\">z.property</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 408689354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702934384
    },
    {
        "content": "<p>Strange. This works;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Subtype.val', and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">True</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">True</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">z.val</span> <span class=\"bp\">;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z.property</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 408689599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702934517
    },
    {
        "content": "<p>Or with no imports at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- still fails</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"n\">True</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"n\">True</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">z.val</span><span class=\"o\">,</span> <span class=\"n\">z.property</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 408689710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702934563
    },
    {
        "content": "<p>This looks like a compiler bug, which probably means it won't be fixed any time soon</p>",
        "id": 408689731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702934574
    },
    {
        "content": "<p>But you should still report it</p>",
        "id": 408689743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702934581
    },
    {
        "content": "<p>There's nothing here that would be meaningfully computable, so I'd suggest marking it with <code>noncomputable</code></p>",
        "id": 408693000,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702937319
    }
]