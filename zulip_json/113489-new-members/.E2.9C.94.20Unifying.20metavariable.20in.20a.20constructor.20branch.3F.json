[
    {
        "content": "<p>I find myself in a situation where I am trying to unify a goal with metavariable with a hypothesis but failed. Here is an MWE that I was able to come up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Operational semantics -/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">valuation</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">cmd</span> <span class=\"n\">where</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">cmd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">valuation</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"kd\">def</span> <span class=\"n\">factorial_loop</span> <span class=\"o\">:</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">valuation</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">attempt_1</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">v'</span><span class=\"o\">:</span><span class=\"n\">valuation</span><span class=\"o\">),</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">v'</span><span class=\"o\">,</span>  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h'</span> <span class=\"c1\">-- causing issue</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">attempt_2</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">v'</span><span class=\"o\">:</span><span class=\"n\">valuation</span><span class=\"o\">),</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">v'</span><span class=\"o\">,</span>  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">v'</span>\n</code></pre></div>\n<p>In my first attempt in <code>attempt_1</code>, <code>apply h'</code> fails to unify the hypothesis and the goal with the following context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"bp\">?</span><span class=\"n\">w</span>\n</code></pre></div>\n<p>As you can see, the goal is almost the same as h', where in the ideal case, <code>v'</code> would substitute <code>?succ.w</code> after the application. But for some reason, lean refuses to unify the goal and <code>h'</code>, is there a specific reason?</p>\n<p>In my second attempt, I try to pull <code>hx</code> upfront before destructing the exists, and it works.</p>",
        "id": 399663602,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698818976
    },
    {
        "content": "<p>The full code is as follows fyi (<del>sorry, I tried to minimze the example, but as soon as I make it simpler, the <code>apply</code> would work out and I cannot reproduce the error</del>) </p>\n<p>I tried using <code>apply h'</code>, and also tried <code>case succ.w</code> to supply <code>v'</code> manually, both won't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Operational semantics -/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.SMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.HashMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">arith</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">arith</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Minus</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">arith</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Times</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">arith</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">arithop</span>\n\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"n\">nat_to_const</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Nat</span> <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">arith.Const</span><span class=\"o\">⟩</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"n\">var_to_const</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">String</span> <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">arith.Var</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"n\">hnat_to_const</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">arith</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">arith.Const</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" + \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arith.Plus</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" - \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arith.Minus</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">95</span> <span class=\"s2\">\" * \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arith.Times</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">arithop</span>\n\n<span class=\"c1\">-- def valuation := Lean.HashMap String Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">OptionZero</span><span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">Option.none</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">valuation</span> <span class=\"o\">:=</span> <span class=\"n\">Finsupp</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">interp</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">arith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">valuation</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arith.Const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arith.Var</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arith.Plus</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">interp</span> <span class=\"n\">e1</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">interp</span> <span class=\"n\">e2</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arith.Minus</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">interp</span> <span class=\"n\">e1</span> <span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"n\">interp</span> <span class=\"n\">e2</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arith.Times</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">interp</span> <span class=\"n\">e1</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">interp</span> <span class=\"n\">e2</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">cmd</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">Assign</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">arith</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Sequence</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">cmd</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">If</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">arith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">then_</span> <span class=\"n\">else_</span> <span class=\"o\">:</span> <span class=\"n\">cmd</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">While</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">arith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">:</span> <span class=\"n\">cmd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">78</span> <span class=\"s2\">\" &lt;- \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cmd.Assign</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">76</span> <span class=\"s2\">\" ;; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cmd.Sequence</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"when\"</span> <span class=\"n\">e</span> <span class=\"s2\">\"then\"</span> <span class=\"n\">then_</span> <span class=\"s2\">\"else\"</span> <span class=\"n\">else_</span> <span class=\"s2\">\"done\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cmd.If</span> <span class=\"n\">e</span> <span class=\"n\">then_</span> <span class=\"n\">else_</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"while\"</span> <span class=\"n\">e</span> <span class=\"s2\">\"loop\"</span> <span class=\"n\">body</span> <span class=\"s2\">\"done\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cmd.While</span> <span class=\"n\">e</span> <span class=\"n\">body</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">arithsec</span>\n<span class=\"kn\">open</span> <span class=\"n\">arithop</span>\n<span class=\"k\">#check</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">&lt;-</span> <span class=\"mi\">3</span> <span class=\"bp\">;;</span> <span class=\"n\">when</span> <span class=\"s2\">\"x\"</span> <span class=\"k\">then</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">&lt;-</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span>  <span class=\"k\">else</span> <span class=\"s2\">\"x\"</span> <span class=\"bp\">&lt;-</span> <span class=\"mi\">3</span> <span class=\"n\">done</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">factorial</span> <span class=\"o\">:=</span>\n  <span class=\"s2\">\"output\"</span> <span class=\"bp\">&lt;-</span> <span class=\"mi\">1</span> <span class=\"bp\">;;</span>\n  <span class=\"n\">while</span> <span class=\"s2\">\"input\"</span> <span class=\"n\">loop</span>\n    <span class=\"s2\">\"output\"</span> <span class=\"bp\">&lt;-</span> <span class=\"s2\">\"output\"</span> <span class=\"bp\">*</span> <span class=\"s2\">\"input\"</span> <span class=\"bp\">;;</span>\n    <span class=\"s2\">\"input\"</span> <span class=\"bp\">&lt;-</span> <span class=\"s2\">\"input\"</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">cmd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">valuation</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvalSkip</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">cmd.Skip</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvalAssign</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">cmd.Assign</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v.update</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">interp</span> <span class=\"n\">e</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvalSeq</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"n\">c1</span> <span class=\"n\">v1</span> <span class=\"n\">c2</span> <span class=\"n\">v2</span><span class=\"o\">,</span>\n    <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">c1</span> <span class=\"n\">v1</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">eval</span> <span class=\"n\">v1</span> <span class=\"n\">c2</span> <span class=\"n\">v2</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">cmd.Sequence</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"n\">v2</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvalIfTrue</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"n\">then_</span> <span class=\"n\">else_</span> <span class=\"n\">v'</span><span class=\"o\">,</span>\n  <span class=\"n\">interp</span> <span class=\"n\">e</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">then_</span> <span class=\"n\">v'</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">cmd.If</span> <span class=\"n\">e</span> <span class=\"n\">then_</span> <span class=\"n\">else_</span><span class=\"o\">)</span>  <span class=\"n\">v'</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvalIfFalse</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"n\">then_</span> <span class=\"n\">else_</span> <span class=\"n\">v'</span><span class=\"o\">,</span>\n  <span class=\"n\">interp</span> <span class=\"n\">e</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">else_</span> <span class=\"n\">v'</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">cmd.If</span> <span class=\"n\">e</span> <span class=\"n\">then_</span> <span class=\"n\">else_</span><span class=\"o\">)</span> <span class=\"n\">v'</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvalWhileTrue</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"n\">body</span> <span class=\"n\">v'</span> <span class=\"n\">v''</span><span class=\"o\">,</span>\n  <span class=\"n\">interp</span> <span class=\"n\">e</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">body</span> <span class=\"n\">v'</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v'</span> <span class=\"o\">(</span><span class=\"n\">cmd.While</span> <span class=\"n\">e</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"n\">v''</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">cmd.While</span> <span class=\"n\">e</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"n\">v''</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvalWhileFalse</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"n\">body</span><span class=\"o\">,</span>\n  <span class=\"n\">interp</span> <span class=\"n\">e</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">cmd.While</span> <span class=\"n\">e</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">):</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">factorial_loop</span> <span class=\"o\">:</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span>\n  <span class=\"n\">while</span> <span class=\"s2\">\"input\"</span> <span class=\"n\">loop</span>\n    <span class=\"s2\">\"output\"</span> <span class=\"bp\">&lt;-</span> <span class=\"s2\">\"output\"</span> <span class=\"bp\">*</span> <span class=\"s2\">\"input\"</span> <span class=\"bp\">;;</span>\n    <span class=\"s2\">\"input\"</span> <span class=\"bp\">&lt;-</span> <span class=\"s2\">\"input\"</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n  <span class=\"n\">done</span>\n<span class=\"kd\">end</span> <span class=\"n\">arithsec</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">factorial_loop_correct</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">valuation</span><span class=\"o\">)</span> <span class=\"n\">out</span><span class=\"o\">,</span>\n  <span class=\"n\">v</span> <span class=\"s2\">\"input\"</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">v</span> <span class=\"s2\">\"output\"</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">out</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"bp\">∃</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"bp\">∧</span> <span class=\"n\">v'</span> <span class=\"s2\">\"output\"</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(((</span><span class=\"n\">fact</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">out</span><span class=\"o\">):</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">out</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">fact</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eval.EvalWhileFalse</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">interp</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">out</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eval.EvalWhileTrue</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">interp</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span>\n    <span class=\"bp\">.</span> <span class=\"n\">repeat</span> <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">interp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n      <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx'</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span> <span class=\"n\">factorial_loop</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">v'</span><span class=\"o\">,</span>  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.update</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.update</span> <span class=\"n\">v</span> <span class=\"s2\">\"output\"</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span> <span class=\"n\">out</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)))</span> <span class=\"s2\">\"input\"</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"bp\">∧</span> <span class=\"n\">v'</span> <span class=\"s2\">\"output\"</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">fact</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n        <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">⟩⟩</span>\n      <span class=\"c1\">-- attempt 1</span>\n      <span class=\"c1\">-- apply h'</span>\n      <span class=\"c1\">-- attempt 2</span>\n      <span class=\"c1\">-- case succ.w =&gt;</span>\n</code></pre></div>",
        "id": 399663799,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698819080
    },
    {
        "content": "<p>Actually, it seems that if I supply exist with the value earlier, the proof be ok</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">factorial_loop_correct</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">valuation</span><span class=\"o\">)</span> <span class=\"n\">out</span><span class=\"o\">,</span>\n  <span class=\"n\">v</span> <span class=\"s2\">\"input\"</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">v</span> <span class=\"s2\">\"output\"</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">out</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"bp\">∃</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"bp\">∧</span> <span class=\"n\">v'</span> <span class=\"s2\">\"output\"</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(((</span><span class=\"n\">fact</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">out</span><span class=\"o\">):</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">out</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">fact</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eval.EvalWhileFalse</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">interp</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">out</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span>\n    <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">v'</span><span class=\"o\">,</span>  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.update</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.update</span> <span class=\"n\">v</span> <span class=\"s2\">\"output\"</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span> <span class=\"n\">out</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)))</span> <span class=\"s2\">\"input\"</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"bp\">∧</span> <span class=\"n\">v'</span> <span class=\"s2\">\"output\"</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">((</span><span class=\"n\">fact</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n      <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">⟩⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">v'</span> <span class=\"c1\">-- supply the value here instead of constructor</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">factorial_loop</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eval.EvalWhileTrue</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">interp</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span>\n    <span class=\"bp\">.</span> <span class=\"n\">repeat</span> <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">interp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n      <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx'</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span> <span class=\"n\">factorial_loop</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fact</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">]</span>\n    <span class=\"n\">ring_nf</span>\n</code></pre></div>",
        "id": 399668190,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698821457
    },
    {
        "content": "<p>This is a more subtle metavariable issue. Every metavariable comes with a local context, and a metavariable can only be assigned a value if that value only refers to local variables in that context.</p>\n<p>In <code>attempt_1</code>, right after <code>constructor</code> you can see the local context for <code>?w</code> in the tactic state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">w</span>\n<span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">valuation</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">valuation</span>\n</code></pre></div>\n<p>Thus, <code>v</code> is the only local variable it's able to reference. Once you get to the <code>apply h'</code> line, this is your local context for the main goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">h.intro</span>\n<span class=\"n\">v</span> <span class=\"n\">v'</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span>\n<span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"bp\">?</span><span class=\"n\">w</span>\n</code></pre></div>\n<p>To do <code>apply h'</code> (or <code>exact h'</code>) this would require assigning <code>?w := v'</code>, which violates the rule about local contexts.</p>",
        "id": 399761695,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698856951
    },
    {
        "content": "<p>One way to help diagnose this sort of issue is using <code>convert h'</code> in place of <code>exact h</code>. This tactic is for doing <code>exact</code>, but leaving equality goals wherever there were differences in the types. In this case we get the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">h.e'_3</span>\n<span class=\"n\">v</span> <span class=\"n\">v'</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span>\n<span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">v'</span>\n</code></pre></div>\n<p>So we can see that it was unable to assign <code>?w := v</code> (since if it could have <code>convert</code> would have closed this goal automatically with <code>rfl</code>).</p>",
        "id": 399761698,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698856952
    },
    {
        "content": "<p>A fix is to move <code>constructor</code> later so that the metavariable has <code>v'</code> in its local context.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">attempt_1</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">v'</span><span class=\"o\">:</span><span class=\"n\">valuation</span><span class=\"o\">),</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">v'</span><span class=\"o\">,</span>  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">update</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">factorial_loop</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h'</span> <span class=\"c1\">-- now ok</span>\n</code></pre></div>\n<p>That's just like your <code>attempt_2</code>, since <code>use</code> is a convenient way to use <code>constructor</code> while simultaneously supplying arguments.</p>",
        "id": 399761787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698856996
    },
    {
        "content": "<p>Now this makes a lot more sense, thanks for the explanations and hints!</p>",
        "id": 399877473,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698912887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Z. Wu</span> has marked this topic as resolved.</p>",
        "id": 399877489,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698912900
    }
]