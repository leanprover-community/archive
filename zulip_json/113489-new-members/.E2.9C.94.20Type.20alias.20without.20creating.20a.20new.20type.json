[
    {
        "content": "<p>I'd like to be able to define some shorthand for a type. For instance something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">alias_nat</span> <span class=\"o\">:=</span> <span class=\"n\">‚Ñï</span>\n</code></pre></div>\n<p>However,  this isn't actually an alias, this is a new type. For example, it doesn't share all of the same type class instances.</p>\n<p>Is there syntax for actual aliases? If not, is there a way to derive all type classes?  (I can't  figure out how to even derive multiple type classes with <code>@[derive _]</code>.</p>",
        "id": 261542473,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637002585
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20a.20type.20alias.20without.20breaking.20typeclass.20synthesis\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/How.20to.20use.20a.20type.20alias.20without.20breaking.20typeclass.20synthesis</a></p>",
        "id": 261542506,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637002606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"457807\">@Ryan Greenblatt</span> See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_space.dual\">docs#normed_space.dual</a> for an example</p>",
        "id": 261544105,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637003304
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The topological dual of a seminormed space `E`. -/</span>\n<span class=\"kd\">@[derive [inhabited, semi_normed_group, semi_normed_space ùïú]</span><span class=\"o\">]</span> <span class=\"kd\">def</span> <span class=\"n\">dual</span> <span class=\"o\">:=</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"bp\">ùïú</span>\n</code></pre></div>",
        "id": 261544117,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637003309
    },
    {
        "content": "<p>If you just need a syntactic alias, you can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">alias_nat</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">‚Ñï</span>\n</code></pre></div>",
        "id": 261544990,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637003746
    },
    {
        "content": "<p><code>abbreviation</code> can work well too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">alias_nat</span> <span class=\"o\">:=</span> <span class=\"n\">‚Ñï</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">alias_nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 261546487,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637004376
    },
    {
        "content": "<p>That's short for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible, inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">alias_nat</span> <span class=\"o\">:=</span> <span class=\"n\">‚Ñï</span>\n</code></pre></div>",
        "id": 261546555,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637004409
    },
    {
        "content": "<p>I think <code>abbreviation</code> works.</p>",
        "id": 261546781,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637004504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457807\">Ryan Greenblatt</span> has marked this topic as resolved.</p>",
        "id": 261546790,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637004506
    },
    {
        "content": "<p>Hello, is there a way to prove mul_one or one_mul without a lemma (or inverted lemma to specific)?  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 261710362,
        "sender_full_name": "YJ",
        "timestamp": 1637098610
    },
    {
        "content": "<p>Can you post this question again in a new thread (right now you're asking about type aliases) and give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> so we can see the types of everything?</p>",
        "id": 261710686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637098789
    },
    {
        "content": "<p>yes of course apologies</p>",
        "id": 261710965,
        "sender_full_name": "YJ",
        "timestamp": 1637098933
    }
]