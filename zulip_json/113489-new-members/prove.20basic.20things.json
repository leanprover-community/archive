[
    {
        "content": "<p>Hello,</p>\n<p>I am trying to learn lean and prove basic things.</p>\n<p>I want to do the following axiom but I don't understand how to do it.<br>\nFor any real <code>a</code> and <code>b</code>, <code>a + b</code> is a real.<br>\n<code>axiom t: ∀ (a b : ℝ), a + b ∈ ℝ -- error</code></p>\n<p>The following axiom:<br>\nEvery real <code>a</code> admits a unique opposite <code>-a</code> such that <code>-a + a = a + (-a) = 0.</code></p>\n<p>The following theorem:<br>\nFor any real <code>a</code>, <code>-(-a) = a</code><br>\nI want to prove it by using the above axiom, substituting <code>a</code> by <code>-a </code>in the equation <code>-a + a = 0 </code>and that the opposite is unique.</p>\n<p>Thanks for your help.</p>",
        "id": 338193405,
        "sender_full_name": "kali",
        "timestamp": 1677438213
    },
    {
        "content": "<p>The same file where you import the reals also gives you definitions for <code>add</code> which provides your closure requirement, and provides an implementation of <code>field</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/field\">docs#field</a> which provides <code>add_left_neg</code></p>",
        "id": 338200927,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677442642
    },
    {
        "content": "<p>I assume your goal is to go from the field axioms to your lemma, yes?</p>",
        "id": 338201182,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677442815
    },
    {
        "content": "<p>Well, the problem is that <code>ℝ</code> is a type, not a set.</p>",
        "id": 338204346,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677444985
    },
    {
        "content": "<p>You can be sure that <code>(a + b) : ℝ</code> by definition of the <code>+</code> operation.</p>",
        "id": 338204392,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677445021
    },
    {
        "content": "<p>I am saying that <code>a + b ∈ ℝ</code> is a syntactic error and <code>(a + b) : ℝ</code> is not a proposition.</p>",
        "id": 338204568,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677445099
    },
    {
        "content": "<p>As for the second question, you cannot say <code>∃ -a</code> literally, but you can say, for example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>which is a proposition and can easily be proved.</p>",
        "id": 338204970,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677445279
    },
    {
        "content": "<p>Do you want a hint for the uniqueness of the opposite?</p>",
        "id": 338205098,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677445343
    },
    {
        "content": "<p>The answer is just <code> ∃!</code>, right?</p>",
        "id": 338206081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677446143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20basic.20things/near/338206081\">said</a>:</p>\n<blockquote>\n<p>The answer is just <code> ∃!</code>, right?</p>\n</blockquote>\n<p>This symbol scares me!</p>",
        "id": 338206350,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677446359
    },
    {
        "content": "<p>I mean, here it would be the last quantifier in the prenex, so I guess I can guess its meaning right, but...</p>",
        "id": 338206449,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677446417
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 338206483,
        "sender_full_name": "Dean Young",
        "timestamp": 1677446453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span>  I know it must already exist but I would like to do it myself.<br>\nI'm just trying to formulate the mathematics of my mathematics book.<br>\nI'm just starting so I have a lot of trouble ^^<br>\nI wanted to start with geometry but after 2 days of not making any progress I decided to start with simpler things.</p>\n<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span>  I know it must already exist but I would like to do it myself.</p>\n<p>This is what I tried to do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">definition</span> <span class=\"n\">opposit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">a</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_opposit</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">opposit</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">opposit_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">opposit</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">is_opposit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">uniq_opposit</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">is_opposit</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">is_opposit</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">opposit_add</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_neg_plus</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">uniq_opposit</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_opposit</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_opposit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 338209819,
        "sender_full_name": "kali",
        "timestamp": 1677449362
    },
    {
        "content": "<p>Lean accepts the theorem but I'm not sure it's really complete.<br>\nI know that lean already knows the basics so I don't know if it's complete or if it's just lean that knows it's true and therefore accepts it.</p>",
        "id": 338209974,
        "sender_full_name": "kali",
        "timestamp": 1677449517
    },
    {
        "content": "<p>I'm suggesting you are going to get farther starting from <code>field</code> and proving the consequences of the field axioms, rather than re-stating the axioms.</p>",
        "id": 338210026,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677449530
    },
    {
        "content": "<p><code>neg_unique</code> should be a theorem rather than an axiom, starting from <code>field</code></p>",
        "id": 338210088,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677449593
    },
    {
        "content": "<p>I'm in second grade and I don't know these things.<br>\nThat's why I don't use the library, I don't understand the math on it.</p>\n<p>I have a lot of difficulty with logic, I try to learn lean to have a support with which to improve myself.</p>",
        "id": 338210182,
        "sender_full_name": "kali",
        "timestamp": 1677449672
    },
    {
        "content": "<p>In my book it is an axiom, probably because the math needed to prove it is not yet available.</p>",
        "id": 338210193,
        "sender_full_name": "kali",
        "timestamp": 1677449698
    },
    {
        "content": "<p>Maybe I'm wrong to want to use lean</p>",
        "id": 338210280,
        "sender_full_name": "kali",
        "timestamp": 1677449764
    },
    {
        "content": "<p>I think you state and prove stuff for <code>ℝ</code> which is the standard model of real numbers.<br>\nYou probably want to do it for an arbitrary type <code>R</code> that satisfies your axioms, right?</p>",
        "id": 338210297,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677449766
    },
    {
        "content": "<p>I'm not sure I understand the question.<br>\nWhat I'm trying to do is only on the real numbers.<br>\nI don't know yet the mathematical objects that allow to generalize all this.<br>\nI'm already struggling with basic mathematics so I'm not trying to get into that stuff yet.</p>\n<p>I could at least try to generalize to make it work with integers</p>",
        "id": 338210491,
        "sender_full_name": "kali",
        "timestamp": 1677449955
    },
    {
        "content": "<p>I mean, you want to make sure that you prove theorems using your axioms only, right?</p>",
        "id": 338210580,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677450004
    },
    {
        "content": "<p>Yes, exactly.<br>\nI don't want it to work because lean is smarter than me</p>",
        "id": 338210627,
        "sender_full_name": "kali",
        "timestamp": 1677450040
    },
    {
        "content": "<p>I think the best path for what you want to do is the Natural Number Game: <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>",
        "id": 338210640,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677450059
    },
    {
        "content": "<p>And then Theorem Proving in Lean...</p>",
        "id": 338210654,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677450070
    },
    {
        "content": "<p>Good!<br>\nThen you should avoid using <code>ℝ</code> because Lean might use properties of real numbers behind your back.</p>",
        "id": 338210678,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677450107
    },
    {
        "content": "<p>I'll take a look thanks.<br>\nI am currently using theorem proving in lean</p>\n<p>In this case I have to define the real numbers myself?<br>\nSo you think that what I have done is incomplete and that lean is doing things to make it correct?</p>",
        "id": 338210973,
        "sender_full_name": "kali",
        "timestamp": 1677450340
    },
    {
        "content": "<p>Forget about the proofs for a while. What <em>theorems</em> do you want to prove?<br>\nI think you want to prove that if you have a structure with your axioms, then something must hold.<br>\nWhat your code actually proves is that if you have the real numbers <code>ℝ</code> with everything that the library already know about real numbers AND your axioms in addition to that, then something must hold.</p>",
        "id": 338211382,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677450700
    },
    {
        "content": "<p>I think you <span class=\"user-mention\" data-user-id=\"591444\">@kali</span> work on meaningful exercises, but you need to change the setting.</p>",
        "id": 338211535,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677450826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span>, not really. Kali hasn't used anything from the library (except the existence of the <code>+</code> and <code>-</code> operations). So, even though it's not a \"safe\" way to do it, so far it's not a problem.</p>",
        "id": 338211588,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677450845
    },
    {
        "content": "<p>Let me describe how I might go about this if you don't want to use anything from the library and you just want to formalize the things from your textbook. Give me a few minutes.</p>",
        "id": 338211640,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677450912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20basic.20things/near/338211588\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span>, not really. Kali hasn't used anything from the library (except the existence of the <code>+</code> and <code>-</code> operations. So, even though it's not a \"safe\" way to do it, so far it's not a problem.</p>\n</blockquote>\n<p>Right... If you inspect the proofs, you can conclude that...</p>",
        "id": 338211665,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677450943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> The theorem quoted above.<br>\nFor any real a, -(-a) = a.<br>\nThis is just the chapter in my book on real numbers that gives some axioms (the opposite of a real number etc) and then gives a proof of the above theorem.<br>\nThen I will try to prove all the other theorems in the book.</p>\n<p>That's exactly it, I want to be sure that the structure is right so that I can be 100% convinced and retain.<br>\nI think that it could help me to become better in mathematics.</p>",
        "id": 338211898,
        "sender_full_name": "kali",
        "timestamp": 1677451144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <br>\nIt's not that I'm against using the library, it would make things easier but it wouldn't really help me to improve. I would just have a black box that I don't understand but that seems to work.</p>\n<p>If I use the already defined reals it is to use them later in exercises that require calculations and because I don't really know how to define them.  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nMaybe I should do something else</p>",
        "id": 338212135,
        "sender_full_name": "kali",
        "timestamp": 1677451336
    },
    {
        "content": "<p>Thank you for all your answers, I really appreciate it <span aria-label=\"hug\" class=\"emoji emoji-1f917\" role=\"img\" title=\"hug\">:hug:</span></p>",
        "id": 338212316,
        "sender_full_name": "kali",
        "timestamp": 1677451503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"591444\">kali</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20basic.20things/near/338210973\">said</a>:</p>\n<blockquote>\n<p>In this case I have to define the real numbers myself?</p>\n</blockquote>\n<p>Here's what I'm suggesting (though I think that NNG is a better start):</p>\n<p>Import <code>mathlib.data.real.basic</code></p>\n<p>That gives you a basic definition of the reals and the field axioms but remarkably few theorems.</p>\n<p>From there, you can  do things like define and prove <code>neg_unique</code> and <code>comm_add</code> and <code>add_eq_zero_iff</code> in terms of the reals.</p>",
        "id": 338212363,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677451540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"591444\">kali</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20basic.20things/near/338211898\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> The theorem quoted above.<br>\nThat's exactly it, I want to be sure that the structure is right so that I can be 100% convinced and retain.<br>\nI think that it could help me to become better in mathematics.</p>\n</blockquote>\n<p>I really like your intention!<br>\nI am just saying that, in order to make it more transparent for yourself, you should do it without connection to <code>ℝ</code> already defined in mathlib.</p>",
        "id": 338212739,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677451909
    },
    {
        "content": "<p>I suggest you <span class=\"user-mention\" data-user-id=\"591444\">@kali</span> just wait for <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> to provide you a skeleton for your exercises.</p>",
        "id": 338212925,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677452054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20basic.20things/near/338212739\">said</a>:</p>\n<blockquote>\n<p>I am just saying that, in order to make it more transparent for yourself, you should do it without connection to <code>ℝ</code> already defined in mathlib.</p>\n</blockquote>\n<p>The basic issue with doing this is that you have to start somewhere, and you certainly don't want to start with constructing the reals, because that's really hard. You <em>could</em> start with restating the field or ring axioms and then proving stuff from there, but mathlib has already done a bunch of that work for you, so why not use it?</p>",
        "id": 338212969,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677452120
    },
    {
        "content": "<p>If you want to follow as closely as possible your textbook, then something like this would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n\n<span class=\"c1\">-- assert a type, two special elements of that type and a bianary function on that type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">constant</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">constant</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"c1\">-- gives access to the notation `+`, `1` and `0`.</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">one</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- add axioms the additive identity and commutativity of addition</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- add axiom for the existence of additive inverses</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">exists_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- `classical.some` is how you get an element out of an existential statement, so</span>\n<span class=\"c1\">-- this allows us to define negation from addition the way is done in textbooks.</span>\n<span class=\"kd\">def</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">exists_neg</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- this gives us access to the `-` notation for `neg`</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">neg</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- this is a lemma which tells use the definitional property of our new function.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_neg</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_neg</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_add</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_neg</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_unique</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">zero_add</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">neg_add</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_neg</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 338213060,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677452186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> <br>\nI use import data.real.basic<br>\nWhen I look at it it seems to give the same thing as mathlib.data.real.basic.<br>\nAre the axioms you are talking about used by default or is it for me to use them instead of defining them?</p>\n<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> <br>\nI had not even tried because it seemed too complicated.<br>\nI'm going to push my limits.<br>\nconstant Real : Type</p>",
        "id": 338213064,
        "sender_full_name": "kali",
        "timestamp": 1677452193
    },
    {
        "content": "<p>Here's how you do it without any reference to mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_my_real</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_add</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">has_neg</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">my_ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_neg_neg</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_my_real</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 338213077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677452205
    },
    {
        "content": "<p>Eric, that already assumes negation is defined and doesn't come from the existence of an additive inverse.</p>",
        "id": 338213110,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677452244
    },
    {
        "content": "<p>What's going on here, is that the first two lines of that code say:</p>\n<blockquote>\n<p>We say a type <code>R</code> satisfies <code>is_my_real R</code> if:</p>\n<ul>\n<li>The <code>+</code> symbol is defined, consuming two <code>R</code>s and producing another</li>\n<li>The <code>-</code> symbol is defined, consuming one <code>R</code>s and producing another</li>\n<li>A <code>0</code> is defined for <code>R</code></li>\n<li>For this <code>R</code>, we have a unique solution for <code>b</code> when <code>a + b = 0</code> and <code>b + a = 0</code>, and that solution is the one that we chose to spell <code>-</code></li>\n</ul>\n</blockquote>",
        "id": 338213202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677452331
    },
    {
        "content": "<p>The <code>theorem</code> line then proceeds to prove the <code>--a = a</code> you wanted, and does so for anything that satisfies your axioms; that way you can be sure you didn't cheat, because the <strong>only</strong> thing you know about <code>R</code> is that it satisfies those axioms.</p>",
        "id": 338213331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677452421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Merci beaucoup !!<br>\nThank you very much!<br>\nI will review everything to understand and move forward from here</p>",
        "id": 338213407,
        "sender_full_name": "kali",
        "timestamp": 1677452522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20basic.20things/near/338212969\">said</a>:</p>\n<blockquote>\n<p>You <em>could</em> start with restating the field or ring axioms and then proving stuff from there, but mathlib has already done a bunch of that work for you, so why not use it?</p>\n</blockquote>\n<p>I suppose <span class=\"user-mention\" data-user-id=\"591444\">@kali</span> works with a book that explicitly states all axioms which are gradually added to the theory they build.</p>",
        "id": 338213494,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677452584
    },
    {
        "content": "<p>If you use Eric's suggestion (also a good approach), just realize that there are axioms left out of what he wrote, so the result won't be provable as is. You need to add other axioms to his <code>is_my_real</code> (like commutativity and associativity of addition, the defining property of <code>-</code> as an additive inverse, etc.).</p>",
        "id": 338213601,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677452657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> I want to do it myself.<br>\nLater I will use what has been done but I would like to understand the basics</p>",
        "id": 338213613,
        "sender_full_name": "kali",
        "timestamp": 1677452668
    },
    {
        "content": "<p>Note that my approach likely more closely matches your textbook in style (e.g., use of <code>axiom</code>) and details, but it is also harder in Lean (because you need to build <code>neg</code> from an existential statement, etc.).</p>",
        "id": 338213746,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677452767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks, I think I prefer the one from <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>  but I will make another version from here too.</p>",
        "id": 338213750,
        "sender_full_name": "kali",
        "timestamp": 1677452772
    },
    {
        "content": "<p>I've realized that my approach of starting with <code>mathlib.data.real.basic</code> does in fact pull in a bunch of theorems.</p>",
        "id": 338213824,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677452844
    },
    {
        "content": "<p>It's surprisingly hard to \"strip down\" mathlib for pedagogy.</p>",
        "id": 338213910,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677452915
    },
    {
        "content": "<p>(I didn't see Jireh's message when sending mine due to bad Internet, sorry!)</p>",
        "id": 338213939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677452949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> Yes, that's exactly it</p>\n<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> It looks a lot like my book (even more detailed).<br>\nThis is exactly what I was looking for.<br>\nI won't be able to start now because it's late and I'm going to bed, but I'm going to get right into it tomorrow</p>",
        "id": 338213979,
        "sender_full_name": "kali",
        "timestamp": 1677452983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> Later I will use it because it looks great but for me it is too much of a black box</p>",
        "id": 338214099,
        "sender_full_name": "kali",
        "timestamp": 1677453057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thank you for your suggestion, I will also use it</p>",
        "id": 338214144,
        "sender_full_name": "kali",
        "timestamp": 1677453103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20basic.20things/near/338213110\">said</a>:</p>\n<blockquote>\n<p>Eric, that already assumes negation is defined and doesn't come from the existence of an additive inverse.</p>\n</blockquote>\n<p>That doesn't seem to be a meaningful distinction to me. My version is just assuming that the name <code>-</code> is given to something arbitrary, and then adds the \"that someone is the unique solution to ...\" as an axiom.</p>",
        "id": 338214150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677453109
    },
    {
        "content": "<p>Great Kali, please ping me if you get stuck and I'll be happy to help. What I would be most likely to recommend is that you use my approach above for the basics, but then once you have proven these foundational results, it might be then that you want to switch into using mathlib (by importing <code>data.real.basic</code> or some such). That way, you can understand exactly what's going on in your textbook, but you don't have to build literally everything from scratch.</p>",
        "id": 338214152,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677453111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"591444\">kali</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20basic.20things/near/338213613\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> I want to do it myself.<br>\nLater I will use what has been done but I would like to understand the basics</p>\n</blockquote>\n<p>I think you're right about wanting to understand the basics, but I'm not sure that leaping into a calculation based on a book written in the language of set theory and trying to formalise it in dependent type theory is the way to do it. Did you take a look at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> ? This won't help you with the real numbers but it might help you to understand more about how Lean works.</p>",
        "id": 338214179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677453123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"591444\">kali</span> <a href=\"#narrow/stream/113489-new-members/topic/prove.20basic.20things/near/338214144\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> Thank you for your suggestion, I will also use it</p>\n</blockquote>\n<p>I would recommend not mixing Jireh's version and mine. Pick whichever one you prefer, and once you understand what's going on you could try the other one.</p>",
        "id": 338214240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677453172
    },
    {
        "content": "<p>Eric, right, but it just doesn't match the way things are generally presented in introductory textbooks. I'm not complaining about your version, just pointing out the distinction. Sorry if it came across wrong.</p>",
        "id": 338214278,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677453214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> That's what I'm trying to do. I intend to use mathlib of course but when it is not a black box anymore.<br>\nI'll let you know if I have any problems and either way I'll put my progress here.<br>\nThank you</p>",
        "id": 338214337,
        "sender_full_name": "kali",
        "timestamp": 1677453261
    },
    {
        "content": "<p>(AFK for a few hours)</p>",
        "id": 338214342,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677453262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, this is what I use to learn lean.<br>\nMy problem is not only with lean but also with mathematics.<br>\nMathlib is complicated because I have to understand lean but I don't understand the mathematics behind it.<br>\nThat's why I want to start from something else.</p>",
        "id": 338214488,
        "sender_full_name": "kali",
        "timestamp": 1677453412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It was to try two different approaches and see the result according to each approach.<br>\nI'm not lazy so I don't mind trying different things. I don't feel like I'm wasting my time as long as I learn something</p>",
        "id": 338214629,
        "sender_full_name": "kali",
        "timestamp": 1677453561
    },
    {
        "content": "<p>Thank you all for your answers, I have to go to bed and I will continue tomorrow.<br>\nGood evening to all</p>",
        "id": 338214737,
        "sender_full_name": "kali",
        "timestamp": 1677453652
    }
]