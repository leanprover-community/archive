[
    {
        "content": "<p>I want to ask how to prove that 0 is less than or equal to 1 under the condition of only partial order. I tried <code>linarith</code> and <code>norm_num</code> without success, and I didn’t get a good solution with <code>apply?</code></p>",
        "id": 387007215,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692859636
    },
    {
        "content": "<p>What is the type of 0 and 1?</p>",
        "id": 387007353,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1692859721
    },
    {
        "content": "<p>In a random partial order, there is no reason that <code>0 \\le 1</code> is true. What are your precise assumptions?</p>",
        "id": 387007398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1692859747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/0.20.5Cleq.201/near/387007353\">said</a>:</p>\n<blockquote>\n<p>What is the type of 0 and 1?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Ray</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.ENorm</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"k\">have</span> <span class=\"n\">m2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">have</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"n\">l4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">l2</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">l3</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">l4</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This is a very long proposition, I have omitted many parts of it, I am still short of these three sorrys, I have a little doubt whether there is something wrong with the structure of my <code>\\bbk</code></p>",
        "id": 387010102,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692861230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/0.20.5Cleq.201/near/387007398\">said</a>:</p>\n<blockquote>\n<p>In a random partial order, there is no reason that <code>0 \\le 1</code> is true. What are your precise assumptions?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It is defined on such a space</p>",
        "id": 387010227,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692861289
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Ray</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.ENorm</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 387010563,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692861472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/0.20.5Cleq.201/near/387010563\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Ray</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.ENorm</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm very shocked, because in an empty file you are right, but in my theorem if you use <code>simp</code> it doesn't work</p>",
        "id": 387011388,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692861894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span> <a href=\"#narrow/stream/113489-new-members/topic/0.20.5Cleq.201/near/387011388\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/0.20.5Cleq.201/near/387010563\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Ray</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.ENorm</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm very shocked, because in an empty file you are right, but in my theorem if you use <code>simp</code> it doesn't work</p>\n</blockquote>\n<p>What frustrates me the most is that I can't find a specific error description <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 387012328,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692862321
    },
    {
        "content": "<p>Do you by any chance have more assumptions on <code>𝕜</code> that introduce independent <code>≤</code> operators?</p>",
        "id": 387012902,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692862628
    },
    {
        "content": "<p>Using <code>simp?</code> shows the lemma you want is <code>zero_le_one</code>. You can try to get an error message by using <code>rw [@zero_le_one 𝕜 _ _ _ _]</code></p>",
        "id": 387013072,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692862698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/0.20.5Cleq.201/near/387012902\">said</a>:</p>\n<blockquote>\n<p>Do you by any chance have more assumptions on <code>𝕜</code> that introduce independent <code>≤</code> operators?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Ray</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.ENorm</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">ProperSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- don't work</span>\n</code></pre></div>\n<p>It's my problem. It seems that there are still some conditions about <code>\\bbk</code>. In fact, I don't understand this very well.</p>",
        "id": 387013255,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692862806
    },
    {
        "content": "<p>So yeah,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">zero_le_one</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">ZeroLEOneClass</span> <span class=\"bp\">𝕜</span>\n</code></pre></div>",
        "id": 387013431,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692862893
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.SubsetProperties</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Ray</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.ENorm</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DenselyOrdered</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">zero_le_one</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"c1\">-- Look for `OrderedSemiring.zeroLEOneClass` - this is the relevant instance</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- So why doesn't it work here?</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">OrderedSemiring</span> <span class=\"bp\">𝕜</span> <span class=\"o\">:=</span> <span class=\"n\">StrictOrderedSemiring.toOrderedSemiring</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">ZeroLEOneClass</span> <span class=\"bp\">𝕜</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">OrderedSemiring.zeroLEOneClass</span> <span class=\"n\">_</span> <span class=\"n\">inst</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">zero_le_one</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  @OrderedSemiring.zeroLEOneClass.{?u.1422} 𝕜 inst</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @ZeroLEOneClass.{?u.1422} 𝕜</span>\n<span class=\"cm\">    (@MonoidWithZero.toZero.{?u.1422} 𝕜</span>\n<span class=\"cm\">      (@Semiring.toMonoidWithZero.{?u.1422} 𝕜 (@OrderedSemiring.toSemiring.{?u.1422} 𝕜 inst)))</span>\n<span class=\"cm\">    (@Semiring.toOne.{?u.1422} 𝕜 (@OrderedSemiring.toSemiring.{?u.1422} 𝕜 inst))</span>\n<span class=\"cm\">    (@Preorder.toLE.{?u.1422} 𝕜</span>\n<span class=\"cm\">      (@PartialOrder.toPreorder.{?u.1422} 𝕜 (@OrderedSemiring.toPartialOrder.{?u.1422} 𝕜 inst))) : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @ZeroLEOneClass.{?u.1422} 𝕜</span>\n<span class=\"cm\">    (@CommMonoidWithZero.toZero.{?u.1422} 𝕜</span>\n<span class=\"cm\">      (@CommGroupWithZero.toCommMonoidWithZero.{?u.1422} 𝕜</span>\n<span class=\"cm\">        (@Semifield.toCommGroupWithZero.{?u.1422} 𝕜</span>\n<span class=\"cm\">          (@Field.toSemifield.{?u.1422} 𝕜 (@NormedField.toField.{?u.1422} 𝕜 inst✝)))))</span>\n<span class=\"cm\">    (@Semiring.toOne.{?u.1422} 𝕜</span>\n<span class=\"cm\">      (@StrictOrderedSemiring.toSemiring.{?u.1422} 𝕜</span>\n<span class=\"cm\">        (@LinearOrderedSemiring.toStrictOrderedSemiring.{?u.1422} 𝕜</span>\n<span class=\"cm\">          (@LinearOrderedRing.toLinearOrderedSemiring.{?u.1422} 𝕜 inst✝³))))</span>\n<span class=\"cm\">    (@Preorder.toLE.{?u.1422} 𝕜</span>\n<span class=\"cm\">      (@PartialOrder.toPreorder.{?u.1422} 𝕜</span>\n<span class=\"cm\">        (@StrictOrderedRing.toPartialOrder.{?u.1422} 𝕜</span>\n<span class=\"cm\">          (@LinearOrderedRing.toStrictOrderedRing.{?u.1422} 𝕜 inst✝³)))) : Prop</span>\n\n<span class=\"cm\">So it turns out `NormedField` gave you a new `0` and `1` that aren't the ones from your `LinearOrderedRing`</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 387014240,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692863255
    },
    {
        "content": "<p>So now the question is if mathlib has a type class for normed fields with a linear order, and that I don't know</p>",
        "id": 387014463,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692863358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/0.20.5Cleq.201/near/387014463\">said</a>:</p>\n<blockquote>\n<p>So now the question is if mathlib has a type class for normed fields with a linear order, and that I don't know</p>\n</blockquote>\n<p>Thank you, I think I'll have to rework the proof <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 387015706,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692863951
    },
    {
        "content": "<p>The issue here is that there is two different <code>&lt;</code> structure on the types, and lean doesn't know that they are compatible. You could try look at some of the covariant_class stuff to maybe just use those assumptions instead of bundled assumptions</p>",
        "id": 387024129,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692867566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span> has marked this topic as resolved.</p>",
        "id": 387030462,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692869529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/0.20.5Cleq.201/near/387024129\">said</a>:</p>\n<blockquote>\n<p>The issue here is that there is two different <code>&lt;</code> structure on the types, and lean doesn't know that they are compatible. You could try look at some of the covariant_class stuff to maybe just use those assumptions instead of bundled assumptions</p>\n</blockquote>\n<p>Yes, I have solved this problem</p>",
        "id": 387030509,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1692869554
    }
]