[
    {
        "content": "<p>I am trying to understand how <code>Tsk.run</code> compiles in the example below. The <code>.functor</code> and <code>.monad</code> branches should evaluate to <code>Either String β</code> right? Or is it because <code>α β : Type u</code> for some <code>u</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Either</span> <span class=\"o\">:=</span> <span class=\"n\">Sum</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tsk</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">failed</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">recovered</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">delayed</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tsk</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Tsk</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Tsk.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">Tsk.monad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tsk.run</span> <span class=\"o\">[</span><span class=\"n\">ei</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">String</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Either</span> <span class=\"n\">String</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">a</span>        <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">failed</span> <span class=\"n\">e</span>      <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">recovered</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">t.run</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">delayed</span> <span class=\"n\">f</span>     <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">())</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">functor</span> <span class=\"n\">t</span> <span class=\"n\">f</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">ei.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t.run</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"n\">t</span> <span class=\"n\">f</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">t.run</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">.</span><span class=\"n\">delayed</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"k\">let</span> <span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Tsk.failed</span> <span class=\"n\">String</span> <span class=\"s2\">\"oops\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">recovered</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Tsk.recovered</span> <span class=\"n\">failed</span> <span class=\"s2\">\"OK:\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{recovered} lean {x}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{y} is awesome\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">z</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mk.run</span>\n</code></pre></div>",
        "id": 362910356,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1685667407
    },
    {
        "content": "<p>Here are some type annotations to try to make it a bit clearer (and I switched <code>ei.map</code> to <code>Functor.map</code>, notated <code>&lt;$&gt;</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Tsk.run</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">Either</span> <span class=\"n\">String</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Tsk</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Either</span> <span class=\"n\">String</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">a</span>        <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">failed</span> <span class=\"n\">e</span>      <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">recovered</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">t.run</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">delayed</span> <span class=\"n\">f</span>     <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">())</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">f</span>   <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">t.run</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">String</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">String</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">f</span>     <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">t.run</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">String</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span>\n                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">String</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 362928202,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685680799
    },
    {
        "content": "<p>It's a bit counterintuitive, but the branches are meant to evaluate to <code>Either String β</code> since the type gets switched out in the <code>inductive</code> declaration for these constructors</p>",
        "id": 362928300,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685680854
    }
]