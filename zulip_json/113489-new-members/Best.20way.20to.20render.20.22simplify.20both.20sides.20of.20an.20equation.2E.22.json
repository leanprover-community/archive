[
    {
        "content": "<p>When trying to prove <code>a = b</code>, you might establish <code>c = d</code>, then subtract <code>e</code> from both sides and simplify, giving the goal.  What’s the standard way to represent that in Lean?  You could use <code>calc</code> mode to turn <code>a</code> into <code>c - e</code>, and then the rest is straight forward, but that first step of “de-simplifying” seems unnatural and unmotivated.  Is that the accepted method?</p>\n<p>In Linear Algebra Done Right, the proof that <code>0 • v = 0</code> starts with <code>0 • v = 0 • v + 0 • v </code>, then subtracts <code>0 • v</code> from both sides and simplifies.  I could start with <code>0 = 0 • v - 0 • v</code>, but that seems unnatural &amp; unmotivated.</p>",
        "id": 359742457,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684521650
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">your_statement</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>do what you want?</p>",
        "id": 359742921,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684521794
    },
    {
        "content": "<p>For these little proofs, I've written things like <code>0 = 0 • v - 0 • v = (0 + 0) • v - 0 • v = 0 • v + 0 • v - 0 • v = 0 • v</code> on the blackboard. I like it because it's a little exercise in getting used to pulling a <code>0 + 0 = 0</code> out of nowhere because it'll be justified by what comes later, and also I like it because purely equational reasoning has a certain charm.</p>",
        "id": 359744751,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684522419
    },
    {
        "content": "<p>Yaël's suggestion is a good tool for putting things into a logical order. You can also try getting comfortable with different <code>congr</code> lemmas, which might help here. There are also the <code>convert</code> and <code>convert_to</code> tactics, which you can use to generate sub-goals when things don't match up completely; however <code>calc</code> usually gives clearer proofs.</p>",
        "id": 359745509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684522678
    },
    {
        "content": "<p>Thanks to both of you!</p>",
        "id": 359748470,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1684523609
    },
    {
        "content": "<p>It’s not used a lot in mathlib, but you may also be interested by <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\">tactic#apply_fun</a></p>",
        "id": 359749489,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684523958
    }
]