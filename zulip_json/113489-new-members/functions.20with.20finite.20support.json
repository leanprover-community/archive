[
    {
        "content": "<p>I want to talk about an object which in my head has either type <code>f : M →. N </code> with <code>A : finset M</code> and <code>support f = a</code> (I don't actually know what I mean by <code>support</code>) or else has type <code>f : A → N</code> the latter doesn't work because A is not a type. I thought about trying to make <code>A</code> a subtype of <code>M</code> with an insteance <code>fintype A</code>, but I want to have <code>m : M</code> and reason about <code>m ∈ A : Prop</code>. Any advice? \"Go read all of this particular file and you'll figure it out\" would be fine.</p>",
        "id": 195907483,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588283925
    },
    {
        "content": "<p>Maybe the answer is \"read fintype.basic\", since fintype.of_finset looks like a good place for me to start.</p>",
        "id": 195907927,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588284187
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/finsupp.html\" title=\"https://leanprover-community.github.io/mathlib_docs/data/finsupp.html\"><code>data.finsupp</code></a></p>",
        "id": 195909022,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588284892
    },
    {
        "content": "<p>I don't think <code>finsupp</code> is really the right thing. <code>finsupp</code> is basically just free module, or direct sum, and requires <code>M</code> to have a zero.</p>",
        "id": 195909285,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588285066
    },
    {
        "content": "<p>I also don't think there are any examples of this really in mathlib, other than by making <code>A</code> the domain of the function. There is <code>data.pfun</code> for partial functions, but the best approach probably depends on what you want to do with it.</p>",
        "id": 195909439,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588285175
    },
    {
        "content": "<p>the big goal is to prove categoricity of dense linear orders without endpoints. (this was the nuke that came to mind for one of Kenny's kata, and it seemed like a good exercise regardless of whether it was appropriate)<br>\nthe small goal is to talk about extending a finitely supported function by one point</p>",
        "id": 195909831,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588285433
    },
    {
        "content": "<p>is pfun supposed to be finsupp but replacing 0 with none?</p>",
        "id": 195909996,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588285540
    },
    {
        "content": "<p>that seems like a step in the right direction, I was about to enrich my target type with a \"zero\" by wrapping it in option and setting <code>0 = none</code></p>",
        "id": 195910087,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588285594
    },
    {
        "content": "<p>Are you doing it only for countable orders then?</p>",
        "id": 195910274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588285735
    },
    {
        "content": "<p>\"Finite\" is not really the condition you need, right?</p>",
        "id": 195910350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588285799
    },
    {
        "content": "<p>Like, it's automatically finite because you've only picked finitely many things so far. So you don't also need to remember it's a <code>finset</code>.</p>",
        "id": 195910415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588285816
    },
    {
        "content": "<p>yeah i just want to do it for countable orders (which should be like 80% of the work of doing it for orders in bijection with an arbitrary ordinal)</p>",
        "id": 195910798,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588286107
    },
    {
        "content": "<p>my plan was to do a mutual induction on two maps <code>forth : M \\to N</code> and <code>back : N \\to M</code></p>",
        "id": 195910837,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588286156
    },
    {
        "content": "<p>I think you will find this tricky, and I'm curious to see what you come up with</p>",
        "id": 195910955,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588286237
    },
    {
        "content": "<p>yeah I agree</p>",
        "id": 195910964,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588286243
    },
    {
        "content": "<p>(my hope is that it ends up being a decent kata)</p>",
        "id": 195910999,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588286275
    },
    {
        "content": "<p>i guess it's time to see if I know how the option monad works...</p>",
        "id": 195911766,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588286798
    },
    {
        "content": "<p>okay, I think this is the API that I want into roption (as in, I think after I know this I don't have to think about the guts of roption)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">pfun</span>\n<span class=\"kn\">open</span> <span class=\"n\">pfun</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">structure</span> <span class=\"n\">safely_applied</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_val</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">safely_apply</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">safely_applied</span> <span class=\"n\">ha</span>\n <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>edit: now it's an MWE instead of an ME</p>",
        "id": 195913459,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588288061
    },
    {
        "content": "<p>I don't get this api at all. The structure <code>safely_applied</code> is useless, you may as well have <code>{val // f a = roption.some val}</code>  as the target type of <code>safely_apply</code>, which is more conventionally written <code>{val // val \\in f a}</code>, and the proof is <code>&lt;(f a).get ha, (f a).get_mem ha&gt;</code></p>",
        "id": 195921075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588294566
    },
    {
        "content": "<p>that is, the <code>safely_apply</code> function is called <code>get</code></p>",
        "id": 195921114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588294637
    },
    {
        "content": "<p>hmm now I realize I don't know how to do what I want with either <code>safely_apply</code> or get. How would you fix this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">partial_embedding</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195925134,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588299172
    },
    {
        "content": "<p>where the problem is that i've asked about the order between two terms of type <code>roption N</code> instead of <code>N</code></p>",
        "id": 195925169,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588299224
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">partial_embedding</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hb</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195925236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588299304
    },
    {
        "content": "<p>I wanted to replace <code>f a</code> with something like <code>get (f a) ha</code> or <code>(safely_apply f a).val</code>, but I didn't seem to understand the error messages when I tried using each of those</p>",
        "id": 195925240,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588299308
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 195925253,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588299333
    },
    {
        "content": "<p>If you don't use dot notation you have to write <code>roption.get (f a) ha</code> or open <code>roption</code></p>",
        "id": 195925308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588299378
    },
    {
        "content": "<p>dot notation is great</p>",
        "id": 195925317,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588299397
    },
    {
        "content": "<p>I'll have to study the definition of roption.get to figure out why my attempt to call <code>.val</code> on my structure failed</p>",
        "id": 195925410,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588299542
    },
    {
        "content": "<p>Okay I think I'm still missing something fundamental. I want to define a term <code>def partial_embedding (f : M →. N) : Prop </code> which morally means \"whenever <code>f a</code> and <code>f b</code> are defined, we have <code>a \\le b \\iff f a \\le f b</code>\"</p>",
        "id": 196028887,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588387396
    },
    {
        "content": "<p>This is what I came up with, and I think it is bad in a way that means I'm missing something fundamental</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">pfun</span>\n<span class=\"kn\">open</span> <span class=\"n\">pfun</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DLO</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DLO</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partial_embedding_at_points</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hb</span> <span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partial_embedding_aux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">rename</span> <span class=\"n\">h</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">rename</span> <span class=\"n\">h</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">partial_embedding_at_points</span> <span class=\"n\">f</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partial_embedding</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">partial_embedding_aux</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 196028888,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588387397
    },
    {
        "content": "<p>(oof I did not mean to have \"press enter to send\" checked)</p>",
        "id": 196028894,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588387429
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">partial_embedding</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">partial_embedding_at_points</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n</code></pre></div>",
        "id": 196029019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588387618
    },
    {
        "content": "<p>oh i didn't know you could leave the type unspecified in a quantifier. that's great!</p>",
        "id": 196029028,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588387663
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">pfun</span>\n<span class=\"kn\">open</span> <span class=\"n\">pfun</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partial_embedding</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hb</span>\n</code></pre></div>",
        "id": 196029066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588387694
    },
    {
        "content": "<p>The next broken bit is this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">embedding_extension</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">partial_embedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"o\">:</span> <span class=\"n\">partial_embedding</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">extension</span> <span class=\"o\">:</span> <span class=\"n\">dom</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">dom</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">supports_x</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_embedding_extension</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→.</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">partial_embedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">dom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">embedding_extension</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>The problem is that the type signature of the second term doesn't compile. The error message looks to me like it says it doesn't know <code>partial_embedding f = partial_embedding f</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">embedding_extension</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hf</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">partial_embedding</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"n\">f</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">partial_embedding</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"n\">f</span>\n</code></pre></div>\n\n\n<p>or maybe like it's upset that it got concrete variables when it expected metavariables?</p>",
        "id": 196029289,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588388066
    }
]