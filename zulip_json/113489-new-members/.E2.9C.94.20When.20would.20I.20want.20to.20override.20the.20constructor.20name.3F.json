[
    {
        "content": "<p>Reading about this feature <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/structures.html#behind-the-scenes\">here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">point</span> <span class=\"o\">::</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n</code></pre></div>\n<p>I can't see why I would ever want to do this. It seems like it just subverts expectations to rename the constructor when all constructors do the same thing. The examples shown in the tutorial seem to just put redundant information in the constructor names.</p>\n<p>Does anyone have an example of when you might do this?</p>",
        "id": 391064584,
        "sender_full_name": "Duncan",
        "timestamp": 1694747614
    },
    {
        "content": "<p>I guess I can see why this would be desirable if you re-export the constructor.</p>",
        "id": 391066489,
        "sender_full_name": "Duncan",
        "timestamp": 1694748503
    },
    {
        "content": "<p>one reason is so that you can attach documentation to the constructor</p>",
        "id": 391067754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694749024
    },
    {
        "content": "<p>it also might not always be natural to think of it as a constructor, instead of just a function with some properties, for example <code>D.lam</code> from <a href=\"#narrow/stream/270676-lean4/topic/Trouble.20with.20Type.20-.3E.20Type.20and.20Type/near/391023545\">my recent example</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ULift.up#doc\">docs#ULift.up</a></p>",
        "id": 391067984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694749114
    },
    {
        "content": "<p><code>And.intro</code> is a constructor with an overridden name, it's a bit more natural than <code>And.mk</code></p>",
        "id": 391068072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694749161
    },
    {
        "content": "<p>You might also have a use in mind for the actual <code>T.mk</code> function, for example if you want to define a smart constructor that does something extra</p>",
        "id": 391068217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694749212
    },
    {
        "content": "<p>and so you make the constructor <code>T.mk'</code> and/or make it <code>private</code></p>",
        "id": 391068258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694749237
    },
    {
        "content": "<p>if you search for <code>mk' ::</code> in mathlib you will find a bunch of examples of this</p>",
        "id": 391068460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694749330
    },
    {
        "content": "<p>IIRC <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.mk#doc\">docs#Rat.mk</a> is a more useful constructor than the default constructor for that structure (oh! It disappeared?? But the default constructor is still <code>mk'</code>?), and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ULift.up#doc\">docs#ULift.up</a> is a much better name for the default constructor for that structure (I've always thought that the definition of <code>ULift</code> was beautiful), so there's two distinct scenarios where it was useful</p>",
        "id": 391092241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694760125
    },
    {
        "content": "<p>It's called <code>mkRat</code> now</p>",
        "id": 391092674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694760321
    },
    {
        "content": "<p>ok thanks for the examples!</p>",
        "id": 391231080,
        "sender_full_name": "Duncan",
        "timestamp": 1694800362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648351\">Duncan</span> has marked this topic as resolved.</p>",
        "id": 391231091,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694800366
    }
]