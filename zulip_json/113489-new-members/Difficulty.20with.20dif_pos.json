[
    {
        "content": "<p>Hello</p>\n<p>I am trying to prove that if a function is injective then it has a left inverse. What I have done so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_left_inverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_left_inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_left_inverse</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">h.choose</span> <span class=\"k\">else</span> <span class=\"n\">default</span><span class=\"o\">)</span>\n  <span class=\"n\">use</span> <span class=\"n\">g</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>  <span class=\"c1\">-- ⊢ g (f x) = x</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The function <code>g</code> is the inverse (I got it from \"mathematics in Lean\").  So now I want to prove <code>g( f x) = x</code>. </p>\n<p>I understood that I should use <code>dif_pos</code> to compute <code>g(f x)</code> but  <code>rw [dif_pos h]</code> does not work here and I do not understand why...</p>\n<p>Thanks for your help !</p>",
        "id": 405429320,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701460584
    },
    {
        "content": "<p>You need to unfold the definition of <code>g</code> first with <code>simp only [g]</code></p>",
        "id": 405430295,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701460956
    },
    {
        "content": "<p>Also, you're going to want to do <code>have h' :</code> instead of <code>have h :</code> because you already have a hypothesis named <code>h</code>.</p>",
        "id": 405430509,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701461038
    },
    {
        "content": "<p><code>have h' :</code>/<code>have h :</code>, you mean, I assume?</p>",
        "id": 405430648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701461091
    },
    {
        "content": "<p>Yeah sorry, I mixed up <code>h</code> et <code>h'</code>,  it should be fixed now.</p>",
        "id": 405430964,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701461233
    },
    {
        "content": "<p>I tried <code>simp only [g]</code> but it does not work (Lean tells me invalid 'simp', proposition expected <code>β → α</code> and I am not sure what is going on) but it seems that using just <code>simp</code> works ? Because if I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- same code as before until have h' : .... (included)</span>\n<span class=\"n\">simp</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>the goal is now <code>⊢ Exists.choose h' = x</code>. </p>\n<p>Thanks, I am making some (slow) progress.</p>",
        "id": 405431594,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701461537
    },
    {
        "content": "<p>Are you on and older version of Lean? This was fixed within the last month I believe.</p>",
        "id": 405432156,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701461819
    },
    {
        "content": "<p>Ho you are right, I just updated Lean and it works now, thanks !</p>",
        "id": 405436164,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701463885
    },
    {
        "content": "<p>I post my solution, now it works (it might be not the best one, any suggestion is welcome) :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_left_inverse</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">h.choose</span> <span class=\"k\">else</span> <span class=\"n\">default</span><span class=\"o\">)</span>\n  <span class=\"n\">use</span> <span class=\"n\">g</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>  <span class=\"c1\">-- ⊢ g (f x) = x</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.choose_spec</span> <span class=\"n\">h'</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h''</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h''.symm</span>\n</code></pre></div>",
        "id": 405443629,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701467642
    }
]