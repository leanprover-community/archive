[
    {
        "content": "<p>For my project, I temporarily switched to a branch of mathlib --- which has now been deleted, hence git would complain.<br>\nI tried to switch to mathlib again, but now my cache is broken. (<code>lake exe cache get</code>) says all files are up to date, but opening VS Code makes it rebuild all of std. How do I fix this? Any help is appreciated.</p>",
        "id": 391652459,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695028774
    },
    {
        "content": "<p>Details: project is at <a href=\"https://github.com/fpvandoorn/sard\">https://github.com/fpvandoorn/sard</a>, updating commit is <a href=\"https://github.com/fpvandoorn/sard/commit/5846591cdc593d3421ea82d0b828c2851215bfbc\">this</a>. Configuration is:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>toolchain</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>cat lean-toolchain <br>\nleanprover/lean4:v4.0.0-rc4</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>lakefile</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>cat lakefile.lean <br>\nimport Lake<br>\nopen Lake DSL</p>\n<p>package «sard» {<br>\n  -- add any package configuration options here<br>\n}</p>\n<p>require mathlib from git<br>\n  \"<a href=\"https://github.com/leanprover-community/mathlib4.git\">https://github.com/leanprover-community/mathlib4.git</a>\"</p>\n<p>@[default_target]<br>\nlean_lib «Sard» {<br>\n  -- add any library configuration options here<br>\n}</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>lake manifest</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>$ cat lake-manifest.json <br>\n{\"version\": 5,<br>\n \"packagesDir\": \"lake-packages\",<br>\n \"packages\":<br>\n [{\"git\":<br>\n   {\"url\": \"<a href=\"https://github.com/EdAyers/ProofWidgets4\">https://github.com/EdAyers/ProofWidgets4</a>\",<br>\n    \"subDir?\": null,<br>\n    \"rev\": \"44e6673a20fc0449d003983d1e1f472df40f7107\",<br>\n    \"opts\": {},<br>\n    \"name\": \"proofwidgets\",<br>\n    \"inputRev?\": \"v0.0.15\",<br>\n    \"inherited\": true}},<br>\n  {\"git\":<br>\n   {\"url\": \"<a href=\"https://github.com/mhuisi/lean4-cli.git\">https://github.com/mhuisi/lean4-cli.git</a>\",<br>\n    \"subDir?\": null,<br>\n    \"rev\": \"21dac2e9cc7e3cf7da5800814787b833e680b2fd\",<br>\n    \"opts\": {},<br>\n    \"name\": \"Cli\",<br>\n    \"inputRev?\": \"nightly\",<br>\n    \"inherited\": true}},<br>\n  {\"git\":<br>\n   {\"url\": \"<a href=\"https://github.com/leanprover-community/mathlib4.git\">https://github.com/leanprover-community/mathlib4.git</a>\",<br>\n    \"subDir?\": null,<br>\n    \"rev\": \"e70f8800f70f89b102ad7469128ace674213e1e5\",<br>\n    \"opts\": {},<br>\n    \"name\": \"mathlib\",<br>\n    \"inputRev?\": null,<br>\n    \"inherited\": false}},<br>\n  {\"git\":<br>\n   {\"url\": \"<a href=\"https://github.com/gebner/quote4\">https://github.com/gebner/quote4</a>\",<br>\n    \"subDir?\": null,<br>\n    \"rev\": \"e75daed95ad1c92af4e577fea95e234d7a8401c1\",<br>\n    \"opts\": {},<br>\n    \"name\": \"Qq\",<br>\n    \"inputRev?\": \"master\",<br>\n    \"inherited\": true}},<br>\n  {\"git\":<br>\n   {\"url\": \"<a href=\"https://github.com/JLimperg/aesop\">https://github.com/JLimperg/aesop</a>\",<br>\n    \"subDir?\": null,<br>\n    \"rev\": \"1a0cded2be292b5496e659b730d2accc742de098\",<br>\n    \"opts\": {},<br>\n    \"name\": \"aesop\",<br>\n    \"inputRev?\": \"master\",<br>\n    \"inherited\": true}},<br>\n  {\"git\":<br>\n   {\"url\": \"<a href=\"https://github.com/leanprover/std4\">https://github.com/leanprover/std4</a>\",<br>\n    \"subDir?\": null,<br>\n    \"rev\": \"524aae5c8000f6e38433ee0ad95bdae3cfa88fee\",<br>\n    \"opts\": {},<br>\n    \"name\": \"std\",<br>\n    \"inputRev?\": \"main\",<br>\n    \"inherited\": true}}]}</p>\n</div></div>",
        "id": 391652526,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695028798
    },
    {
        "content": "<p>Have you tried <code>lake exe cache get!</code>?</p>",
        "id": 391652601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695028809
    },
    {
        "content": "<p>I'll be happy to learn how I'm \"supposed\" to do it --- but AIUI, such documentation hasn't been updated to Lean 4 yet.</p>",
        "id": 391652635,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695028818
    },
    {
        "content": "<p>I'm sure I have, trying again just to be sure...</p>",
        "id": 391652713,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695028839
    },
    {
        "content": "<p>Nope, doesn't help: when opening VS Code, on the first imports line Lean still says it's building std.</p>",
        "id": 391653490,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695029060
    },
    {
        "content": "<p>Btw, I can confirm that my usual <code>git pull; lake exe cache get!; lake build</code> yoga is broken now.  This is what I get after pulling the current <code>master</code> and running <code>lake exe cache get!; lake build</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">:</span> <span class=\"n\">URL</span> <span class=\"n\">has</span> <span class=\"n\">changed</span><span class=\"bp\">;</span> <span class=\"n\">deleting</span> <span class=\"bp\">'./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std'</span> <span class=\"n\">and</span> <span class=\"n\">cloning</span> <span class=\"n\">again</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">3767</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">3767</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">3767</span><span class=\"bp\">/</span><span class=\"mi\">3767</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3767</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">9527</span> <span class=\"n\">ms</span>\n<span class=\"o\">[</span><span class=\"mi\">808</span><span class=\"bp\">/</span><span class=\"mi\">3765</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Data.Stream.Init</span>\n<span class=\"o\">[</span><span class=\"mi\">808</span><span class=\"bp\">/</span><span class=\"mi\">3765</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Free</span>\n<span class=\"o\">[</span><span class=\"mi\">808</span><span class=\"bp\">/</span><span class=\"mi\">3765</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Data.List.Card</span>\n<span class=\"bp\">...</span> <span class=\"n\">etc</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 391654880,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695029425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> Try <code>lake exe cache clean</code> (or <code>lake exe cache clean!</code> if this is not a syntax error, I forget) and then <code>lake exe cache get!</code></p>",
        "id": 391667812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695032748
    },
    {
        "content": "<p>Did that, also doesn't help: <code>lake build</code> output starts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">19</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.Unreachable</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">19</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.TagAttribute</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">79</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Command</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">79</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n<span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">1546</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Util.TermUnsafe</span>\n<span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">1563</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.ByCases</span>\n<span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">1563</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.SeqFocus</span>\n<span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">1563</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Name</span>\n<span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">1563</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Position</span>\n<span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">1563</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Parser</span>\n</code></pre></div>",
        "id": 391684482,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695038832
    },
    {
        "content": "<p>I am never too worried about building Std, but does it start building mathlib at some point?</p>",
        "id": 391752868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695060909
    },
    {
        "content": "<p>Std and proofwidgets are quick to build.</p>",
        "id": 391752897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695060922
    },
    {
        "content": "<p>Kevin, do you mean you never worry about <em>compiling</em> Std? Building is different. And if Std needs building, then Mathlib will too. (Unless somehow only Std oleans are wrong)</p>",
        "id": 391792344,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695080246
    },
    {
        "content": "<p>Oh I've never really understood the difference :-) I just know that sometimes <code>lake build</code> outputs some stuff but finishes quickly</p>",
        "id": 391792702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695080473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> did you solve this issue?  For me, this worked:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># in the `mathlib4` dir, on master, but should work also in a branch</span>\n<span class=\"c1\"># erase files that will be downloaded again later</span>\nrm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>build/\nrm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>lake-packages/\n\n<span class=\"c1\"># in case you want the latest current branch</span>\ngit<span class=\"w\"> </span>pull\n<span class=\"c1\"># remove existing caches, in case they are corrupt</span>\nlake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>clean!\n\n<span class=\"c1\"># with the cache, it also re-downloads what you deleted, takes some time to download the cache</span>\n<span class=\"c1\"># may build and compile some `Cache` stuff</span>\nlake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\n\n<span class=\"c1\"># basically does nothing!</span>\nlake<span class=\"w\"> </span>build\n</code></pre></div>",
        "id": 391844547,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695107499
    },
    {
        "content": "<p>After <code>clean!</code> is there any difference between <code>get</code> and <code>get!</code>?</p>",
        "id": 391846103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695108123
    },
    {
        "content": "<p>I do not think so.  I think (though I am not sure) that <code>clean!</code> removes <em>all</em> caches, while <code>get!</code> only removes the current one and re-downloads it.  I may be wrong.</p>",
        "id": 391846271,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695108182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Thanks for asking. I've found a solution now - but it's different.<br>\nWhen running <code>lake build</code>, building std would always fail after around 600 files. The error (mentioning the occs parameter) pointed towards the solution: my Lean toolchain was too old for the mathlib version. Manually changing the <code>lean-toolchain</code> file to match mathlib fixed it.</p>",
        "id": 391851284,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695110211
    },
    {
        "content": "<p>Is there a way to detect and warn about this situation? (I would've expected an error message - perhaps I'm spoiled from Rust <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> )</p>",
        "id": 391851357,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695110239
    },
    {
        "content": "<p>In general, what's the proper way to update the mathlib version my project depends on? Just running <code>lake update mathlib</code>?</p>",
        "id": 391851378,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695110247
    },
    {
        "content": "<p>Great that you resolved your issue!</p>\n<p>Also, I had missed that you had a problem with a project depending on mathlib.  I think that my solution only applies to working directly on the <code>Mathlib</code> repo, not on a project.</p>",
        "id": 391852518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695110603
    }
]