[
    {
        "content": "<p>Lean4 has an interesting implementation of strongly connected components in Util/SCC.lean that begins like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.SCC</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Very simple implementation of Tarjan's SCC algorithm.</span>\n<span class=\"cm\">  Performance is not a goal here since we use this module to</span>\n<span class=\"cm\">  compiler mutually recursive definitions, where each function</span>\n<span class=\"cm\">  (and nested let-rec) in the mutual block is a vertex.</span>\n<span class=\"cm\">  So, the graphs are small. -/</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Data</span> <span class=\"n\">where</span>\n  <span class=\"n\">index</span><span class=\"bp\">?</span>   <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"n\">lowlink</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"n\">onStack</span>  <span class=\"o\">:</span> <span class=\"n\">Bool</span>       <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"n\">stack</span>     <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">nextIndex</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">data</span>      <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">α</span> <span class=\"n\">Data</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"n\">sccs</span>      <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">StateM</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">getDataOf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">Data</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"k\">match</span> <span class=\"n\">s.data.find</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">d</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>When I read <code>getDataOf</code>, it is unclear to me how this code typechecks properly.<br>\nVSCode seems to have determined somehow that <code>M</code> is an instance of <code>MonadState</code> <br>\nso that <code>get</code> is really <code>MonadState.get</code> and that <code>M</code> is also an instance of <code>Pure</code> so that <code>pure</code> is really <code>Pure.pure</code>.</p>\n<p>Can someone explain this?</p>\n<p>It would be really nice if the VS Code tooling could explain what makes a reference resolve the way it does and why some code typechecks properly.</p>",
        "id": 289917694,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1658113110
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Control/State.html#instMonadStateOfStateT\">Here's the instance definition</a> for <code>StateM</code> being a <code>MonadStateOf</code> (which gives <code>MonadState</code> by another instance). Click \"source\" to the right to see where it is inside the prelude.</p>",
        "id": 289918747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658114523
    },
    {
        "content": "<p>These docs also have lists of instances when you go to a class, so that can help you find where things are actually defined.</p>",
        "id": 289918756,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658114551
    },
    {
        "content": "<blockquote>\n<p>VSCode seems to have determined somehow that <code>M</code> is an instance of <code>MonadState</code></p>\n</blockquote>\n<p>My guess is that the determination is based on <code>abbrev M := StateM (State α)</code></p>",
        "id": 289918771,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658114586
    },
    {
        "content": "<p>It's helpful to know some Haskell to be able to deal with this part of the library, since it's still rather light on documentation, and these are all Haskell-like idioms.</p>",
        "id": 289918829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658114680
    },
    {
        "content": "<p>I think it's just typeclass inference. <code>StateT</code> has an instance of <code>MonadStateOf</code>,  which is <code>MonadState</code> where the state type is set as an output parameter.</p>",
        "id": 289918861,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658114727
    },
    {
        "content": "<p>Oh they beat me to it.</p>",
        "id": 289918871,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658114747
    },
    {
        "content": "<p>The point of <code>StateM</code> is that you can use <code>get</code> to get the \"current\" <code>State α</code> value and then <code>put</code> to change it for code that runs \"after.\" It's a functional programming trick to get something like mutable state.</p>",
        "id": 289918944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658114857
    },
    {
        "content": "<p>There are some spartan trace facilities, like <code>set_option trace.Meta.synthInstance</code> and some other ones discoverable via autocomplete if you type <code>set_option trace.</code></p>",
        "id": 289919007,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658114977
    },
    {
        "content": "<p>Concretely, <code>StateM</code> is a way to concisely write code for functions that have types like <code>σ → α × σ</code>, where <code>σ</code> is the type for some state that you'd otherwise have to thread through everything manually.</p>",
        "id": 289919056,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658115016
    },
    {
        "content": "<p>(Making things more complicated, <code>StateM</code> is defined in terms of <code>StateT</code>, a so-called \"monad transformer,\" where you can compose multiple monad transformers to achieve multiple effects.)</p>",
        "id": 289919069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658115099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris Bailey</span> <a href=\"#narrow/stream/113489-new-members/topic/Puzzled.20by.20MonadState.20and.20Pure/near/289919007\">said</a>:</p>\n<blockquote>\n<p>There are some spartan trace facilities, like <code>set_option trace.Meta.synthInstance</code> and some other ones discoverable via autocomplete if you type <code>set_option trace.</code></p>\n</blockquote>\n<p>Thanks for this very helpful tip!</p>\n<p>With:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">getDataOf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">Data</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"k\">match</span> <span class=\"n\">s.data.find</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">d</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>I get:</p>\n<p><a href=\"/user_uploads/3121/iSMe42yvLSdS5ZIJDw2g-zpV/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iSMe42yvLSdS5ZIJDw2g-zpV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/iSMe42yvLSdS5ZIJDw2g-zpV/image.png\"></a></div><p>When I hover over <code>instMonadState (State α) (M α)</code>, the mouse tooltip shows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">instMonadState</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">instMonadStateOfStateT</span> <span class=\"o\">:</span> <span class=\"n\">MonadState</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>... which corresponds to Kyle's 1st part of his reply!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Puzzled.20by.20MonadState.20and.20Pure/near/289918747\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Control/State.html#instMonadStateOfStateT\">Here's the instance definition</a> for <code>StateM</code> being a <code>MonadStateOf</code> (which gives <code>MonadState</code> by another instance). Click \"source\" to the right to see where it is inside the prelude.</p>\n</blockquote>\n<p>Is there any indication in the output of the 2nd part of his reply?</p>\n<blockquote>\n<p>(which gives <code>MonadState</code> by another instance)</p>\n</blockquote>\n<p>Currently, I program in Scala3 whenever I can. I have fractional knowledge of Haskell, nowhere enough to read Lean4 code through Haskell lenses <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 290000004,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1658166394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"362579\">Nicolas Rouquette</span> has marked this topic as resolved.</p>",
        "id": 290000161,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658166477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"362579\">Nicolas Rouquette</span> has marked this topic as unresolved.</p>",
        "id": 290000183,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658166482
    },
    {
        "content": "<p>Wow! Lean4 vscode is totally awesome!</p>\n<p>I just noticed that with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Then when the Lean Infoview shows this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>I can click on that line and it expands to show nested instance synthesis!</p>\n<p>And sure enough, now I get both parts of <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> 's reply:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">preprocess</span><span class=\"o\">:</span> <span class=\"n\">Bind</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">Bind</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">result</span> <span class=\"n\">Monad.toBind</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">preprocess</span><span class=\"o\">:</span> <span class=\"n\">MonadState</span> <span class=\"bp\">?</span><span class=\"n\">m.1400</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">MonadState</span> <span class=\"bp\">?</span><span class=\"n\">m.1407</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">∨</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">main</span> <span class=\"n\">goal</span> <span class=\"n\">MonadState</span> <span class=\"bp\">?</span><span class=\"n\">m.1407</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newSubgoal</span><span class=\"o\">]</span> <span class=\"n\">MonadState</span> <span class=\"n\">_tc.0</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.globalInstances</span><span class=\"o\">]</span> <span class=\"n\">MonadState</span> <span class=\"bp\">?</span><span class=\"n\">m.1407</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">[</span><span class=\"n\">instMonadState</span><span class=\"o\">]</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.generate</span><span class=\"o\">]</span> <span class=\"kd\">instance</span> <span class=\"n\">instMonadState</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newSubgoal</span><span class=\"o\">]</span> <span class=\"n\">MonadStateOf</span> <span class=\"n\">_tc.0</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.globalInstances</span><span class=\"o\">]</span> <span class=\"n\">MonadStateOf</span> <span class=\"bp\">?</span><span class=\"n\">m.1411</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">instMonadStateOf</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instMonadStateOfStateT</span><span class=\"o\">]</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.generate</span><span class=\"o\">]</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">instMonadStateOfStateT</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newSubgoal</span><span class=\"o\">]</span> <span class=\"n\">Monad</span> <span class=\"n\">Id</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.globalInstances</span><span class=\"o\">]</span> <span class=\"n\">Monad</span> <span class=\"n\">Id</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">Id.instMonadId</span><span class=\"o\">]</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.generate</span><span class=\"o\">]</span> <span class=\"kd\">instance</span> <span class=\"n\">Id.instMonadId</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Monad</span> <span class=\"bp\">?</span><span class=\"n\">m.1427</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">Id.instMonadId</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.resume</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">MonadStateOf</span> <span class=\"bp\">?</span><span class=\"n\">m.1411</span> <span class=\"bp\">?</span><span class=\"n\">m.1412</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">Monad</span> <span class=\"bp\">?</span><span class=\"n\">m.1427</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">MonadStateOf</span> <span class=\"bp\">?</span><span class=\"n\">m.1411</span> <span class=\"bp\">?</span><span class=\"n\">m.1412</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">instMonadStateOfStateT</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.resume</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">MonadState</span> <span class=\"bp\">?</span><span class=\"n\">m.1407</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">MonadStateOf</span> <span class=\"bp\">?</span><span class=\"n\">m.1411</span> <span class=\"bp\">?</span><span class=\"n\">m.1412</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">MonadState</span> <span class=\"bp\">?</span><span class=\"n\">m.1407</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">instMonadState</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">result</span> <span class=\"n\">instMonadState</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Wow, Lean4 is totally awesome!</p>",
        "id": 290000697,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1658166739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"362579\">Nicolas Rouquette</span> has marked this topic as resolved.</p>",
        "id": 290003268,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658168020
    }
]