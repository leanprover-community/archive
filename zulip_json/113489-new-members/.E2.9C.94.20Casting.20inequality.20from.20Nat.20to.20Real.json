[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Metric</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Connectivity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- SimpleGraph.dist is noncomputable</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_connected</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph.Connected</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e.dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">G.dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">G.dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">SimpleGraph.dist_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">SimpleGraph.Connected.dist_triangle</span> <span class=\"n\">V</span> <span class=\"n\">G</span> <span class=\"n\">h_connected</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h_connected.preconnected</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp_all</span><span class=\"o\">,</span>\n    <span class=\"n\">edist_dist</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>I am trying to show that a simple connected graph can be a Group. However, I don't know how to convert the inequality of <code>SimpleGraph.Connected.dist_triangle</code>, stated in Nat, to solve the goal of the same form, but with each number converted to a Real number.<br>\n<code>hint</code> wasn't able to close the result.</p>",
        "id": 405368992,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1701439071
    },
    {
        "content": "<p><code>exact_mod_cast</code> works, after you unfold the <code>dist</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Metric</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Connectivity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- SimpleGraph.dist is noncomputable</span>\n<span class=\"kd\">noncomputable</span> <span class=\"n\">abbrev</span> <span class=\"n\">SimpleGraph.Connected.toMetricSpace</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_connected</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph.Connected</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">V</span> <span class=\"n\">where</span>\n  <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">G.dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">dist_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">SimpleGraph.dist_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">SimpleGraph.Connected.dist_triangle</span> <span class=\"n\">V</span> <span class=\"n\">G</span> <span class=\"n\">h_connected</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span>    <span class=\"c1\">-- added this line and below</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">this</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h_connected.preconnected</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp_all</span>\n  <span class=\"n\">edist_dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_connected</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph.Connected</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h_connected.toMetricSpace</span><span class=\"bp\">;</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">G.dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 405376496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701441473
    },
    {
        "content": "<p>It's often more convenient to write a separate def and lemma than return a subtype; I also made that change above</p>",
        "id": 405376627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701441515
    },
    {
        "content": "<p>Thank you for introducing me to <code>exact_mod_cast</code>! I've come into contact of <code>norm_num</code> before, but didn't know about the more general <code>norm_cast</code> family of tactics.</p>",
        "id": 405379693,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1701442463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667038\">SaNoy SaKnoi</span> has marked this topic as resolved.</p>",
        "id": 405379748,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701442484
    }
]