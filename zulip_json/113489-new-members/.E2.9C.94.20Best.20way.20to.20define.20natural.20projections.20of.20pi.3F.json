[
    {
        "content": "<p>Best way to define natural projections of pi?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proj</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.1</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proj'</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">I.pi</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.1</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proj''</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"n\">i</span>\n\n<span class=\"c1\">-- R2 : Set (∀ i ∈ {1, 2}, ℝ)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Rn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- s = f x as chooice fn</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_R2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Rn</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- pi as parameter</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">proj</span> <span class=\"o\">(</span><span class=\"n\">Rn</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eq_univ_of_univ_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_R2</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n\n<span class=\"c1\">-- pi as type via Elem</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Rn</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">proj'</span> <span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eq_univ_of_univ_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_R2</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n\n<span class=\"c1\">-- s ∈ pi as parameter</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Rn</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">proj''</span> <span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eq_univ_of_univ_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_R2</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p><code> def proj'' (i : ι) : (∀ i, α i) → α i := λ s =&gt; s i </code></p>\n<p>I think this one is short and to the point, while additional details can be added as needed.</p>\n<p>Are there any other suggestions?</p>",
        "id": 361386603,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1685120058
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.eval\">docs#function.eval</a></p>",
        "id": 361388752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685120460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"604291\">MonadMaverick</span> has marked this topic as resolved.</p>",
        "id": 361396010,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685122191
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Rn</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">Function.eval</span> <span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eq_univ_of_univ_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mem_univ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 361398815,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1685122868
    },
    {
        "content": "<p>I think <code>Function.eval 1 '' Rn 2</code> would be even better</p>",
        "id": 361427493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685131239
    }
]