[
    {
        "content": "<p>Dear All,</p>\n<p>in the Lean4 code below, placing the cursor after <code>exact</code> gives <code>Goals accomplished</code> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> in the infoview (besides of course also giving an error):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"c1\">--place cursor anywhere on this line after the first `e`</span>\n</code></pre></div>\n<p>Is this expected?</p>\n<p>The analogous Lean3 code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does not do this.</p>",
        "id": 307512598,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667392601
    },
    {
        "content": "<p>(<code>apply, refine, refine'</code> also show similar behaviour.)</p>",
        "id": 307512911,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667392720
    },
    {
        "content": "<p>I think it's due to the way Lean 4 inserts sorries at parse errors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span>\n  <span class=\"c1\">-- Goals accomplished!</span>\n\n<span class=\"c1\">-- error: expected term (at `#print`)</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem foo : âˆ€ (p : Prop), p :=</span>\n<span class=\"cm\">fun p =&gt; sorryAx p true</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 307513457,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667392887
    },
    {
        "content": "<p>I find it a little concerning that it doesn't report <code>declaration uses 'sorry'</code>, but on the other hand if a file has parse errors you shouldn't trust it at all.</p>",
        "id": 307513742,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667392988
    },
    {
        "content": "<p>Ok, thanks!</p>\n<p>I am a little puzzled by the <code>Goals accomplished</code> response, but what you say clarifies the issue somewhat.</p>",
        "id": 307514440,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667393254
    },
    {
        "content": "<p>I wonder if it would be possible if instead of \"Goals accomplished\" it could say \"No more goals, but contains <code>sorry</code>\". This is a somewhat confusing Lean 4 behavior that makes \"Goals accomplished\" a bit less exciting.</p>",
        "id": 307515514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667393583
    },
    {
        "content": "<p>I agree, not seeing <code>Goals accomplished</code> would be better.  Even simply \"declaration uses <code>sorry</code>\", without mentioning the non-existence of goals would be good!</p>",
        "id": 307517760,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667394264
    },
    {
        "content": "<p>My students hate this.</p>",
        "id": 307555834,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1667403969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> I actually had <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Marmite/near/302553129\">your message</a> in mind, but I was too lazy to find a link to it.</p>",
        "id": 307557587,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667404450
    },
    {
        "content": "<p>Maybe, if one doesn't already exist, it would be worth making a Lean 4 issue with some examples with false \"Goals accomplished\" messages (false in the sense that it's telling me I've accomplished my goals when I don't feel like I have).</p>",
        "id": 307557985,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667404562
    },
    {
        "content": "<p>I haven't try to teach using Lean 4 yet, but indeed I think this behavior would be really really confusing for students.</p>",
        "id": 307591987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667413619
    },
    {
        "content": "<p>8 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22\">#mathlib4 &gt; premature \"goals accomplished\"</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 316463493,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671286029
    }
]