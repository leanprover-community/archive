[
    {
        "content": "<p>I'm trying to prove <code>d/dy |sin(x +iy)|^2 = sinh(2*y)</code>. So far I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_sq_sine</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">))</span>\n                  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sinh</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n                  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cosh</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n    <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- already proved</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">deriv_norm_sq_sine</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">):</span>\n        <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span> <span class=\"o\">)))))</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">norm_sq_sine</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>How do I get lean to evaluate the derivative? The very end of <a href=\"http://this%20section\">https://leanprover-community.github.io/mathematics_in_lean/C10_Differential_Calculus.html#elementary-differential-calculus</a> of the docs just uses <code>by simp</code> for evaluating derivatives, but I need to do more processing after the derivative is evaluated. <br>\n<code>deriv</code> is a def, not a <code>theorem</code> so <code>simp deriv</code> doesn't work.</p>",
        "id": 400836264,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699401654
    },
    {
        "content": "<p>Your statement doesn't compile for me, I think you're missing an import</p>",
        "id": 400837315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699402113
    },
    {
        "content": "<p>If you have an error before the <code>by</code> then everything after it is nonsense</p>",
        "id": 400837344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699402133
    },
    {
        "content": "<p>I missed <code>import Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</code> because VSCode's box text select tool is crap</p>",
        "id": 400838230,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699402681
    },
    {
        "content": "<p>yes <code>deriv_norm_sq_sine</code> will have unsolved goals.</p>",
        "id": 400838308,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699402714
    },
    {
        "content": "<p>current state there is <code>deriv (fun w =&gt; (Real.cos x * Real.sinh w) ^ 2 + (Real.sin x * Real.cosh w) ^ 2) y = Real.sinh (2 * y)</code>, I want to eliminate the <code>deriv (fun w =&gt;</code> and get just a function (expression) of <code>x y</code>.</p>",
        "id": 400838482,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699402808
    },
    {
        "content": "<p>Nicholas, you should try to read the <a href=\"https://leanprover-community.github.io/contribute/style.html\">Mathlib style guide</a> to format your code in a way that is easy to read for other people and would allow you to contribute to Mathlib one day if you want.</p>",
        "id": 400841071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699404113
    },
    {
        "content": "<p>The core issue is that we don't have yet a tactic to get rid of annoying differentiability side conditions. So you currently need to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">normSq</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_sq_sine</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">sinh</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">cosh</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n    <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- already proved</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">deriv_norm_sq_sine</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_sq_sine</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_add</span><span class=\"o\">,</span> <span class=\"n\">deriv_pow''</span><span class=\"o\">,</span> <span class=\"n\">deriv_pow''</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">differentiableAt_cosh.const_mul</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">differentiableAt_sinh.const_mul</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">differentiableAt_sinh.const_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"mi\">2</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">differentiableAt_cosh.const_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 400841177,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699404155
    },
    {
        "content": "<p>The annoying part is the four last lines.</p>",
        "id": 400841208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699404174
    },
    {
        "content": "<p>You could argue that <code>rw [deriv_add, deriv_pow'', deriv_pow'']</code> is also annoying, but this will disappear as well when we'll have a way to take care of the four last lines.</p>",
        "id": 400841289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699404211
    },
    {
        "content": "<p><del>This was easy in Lean 3:</del></p>\n<p>You can use a <code>_</code> wildcard to compute things as you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">normSq</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">normSq_sine</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">sinh</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">cosh</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n    <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- already proved</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">deriv_normSq_sine</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.deriv</span>\n  <span class=\"c1\">-- we're going to compute the derivative, but we don't know what it is yet</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">normSq_sine</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.add</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.pow</span>\n      <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.const_mul</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hasDerivAt_sinh</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.pow</span>\n      <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.const_mul</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hasDerivAt_cosh</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"c1\">-- sinh (2 * y) = ↑2 * (cos x * sinh y) ^ (2 - 1) * (cos x * cosh y) + ↑2 * (sin x * cosh y) ^ (2 - 1) * (sin x * sinh y)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400841296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699404215
    },
    {
        "content": "<p>Someone is working on this differentiability tactic, search Zulip if you are interested.</p>",
        "id": 400841347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699404240
    },
    {
        "content": "<p>Eric, how is this easier than my Lean 4 version?</p>",
        "id": 400841440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699404267
    },
    {
        "content": "<p>It avoids having to first differentiate everything, then show that everything is differentiable. My comment is more \"it is way harder to use the same approach in Lean 4\", not \"it is way harder to use your approach\"</p>",
        "id": 400841546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699404322
    },
    {
        "content": "<p>Hmm, maybe I'm confused and this works just fine after all</p>",
        "id": 400841778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699404421
    },
    {
        "content": "<p>Edited to be Lean 4 above, I was confused by <code>refine</code> not working</p>",
        "id": 400842807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699404878
    },
    {
        "content": "<p>Thank you both.</p>",
        "id": 400844670,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699405609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 400844673,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699405611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, is this spelling slightly more convincing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">deriv_norm_sq_sine</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.deriv</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">normSq_sine</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">with_reducible</span> <span class=\"n\">first</span>\n      <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.add</span>\n      <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.pow</span>\n      <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.const_mul</span>\n      <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">hasDerivAt_sinh</span>\n      <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">hasDerivAt_cosh</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400845867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699406266
    },
    {
        "content": "<p>Sure, this is precisely why there should be a tactic just like the continuity and measurability tactics.</p>",
        "id": 400846007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699406337
    },
    {
        "content": "<p>I think the heart of my claim is that the tactic should be <code>compute_hasDerivAt</code> not <code>differentiability</code></p>",
        "id": 400846062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699406372
    },
    {
        "content": "<p>Oh, can we just register these globally with <code>aesop</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span><span class=\"o\">]</span> <span class=\"n\">HasDerivAt.add</span> <span class=\"n\">HasDerivAt.pow</span> <span class=\"n\">HasDerivAt.const_mul</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">apply</span><span class=\"o\">]</span> <span class=\"n\">hasDerivAt_sinh</span> <span class=\"n\">hasDerivAt_cosh</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">deriv_norm_sq_sine</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">sinh</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">HasDerivAt.deriv</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">normSq_sine</span><span class=\"o\">]</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400846690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699406756
    },
    {
        "content": "<p>They only apply when the goal matches <code>HasDerivAt</code> anyway, so presumably there's little performance impact?</p>",
        "id": 400846759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699406782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20evaluating.20derivatives/near/400846062\">said</a>:</p>\n<blockquote>\n<p>I think the heart of my claim is that the tactic should be <code>compute_hasDerivAt</code> not <code>differentiability</code></p>\n</blockquote>\n<p>I think we need both. It needs to be usable as a simp discharger for simp lemmas that compute <code>deriv</code>.</p>",
        "id": 400850120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699408777
    },
    {
        "content": "<p>I'm toying with the idea that <code>simp</code> should know very little about <code>deriv</code>, and tag only <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasDerivAt.deriv#doc\">docs#HasDerivAt.deriv</a> with <code>simp</code>, and then the discharger can go nuts on the <code>HasDerivAt</code> goal. Maybe there are metavariable or mathematical reasons that this approach isn't a good one</p>",
        "id": 400850531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699408920
    },
    {
        "content": "<p>Of course, your suggestion is definitely a lot better than the nothing we have now!</p>",
        "id": 400850776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699409000
    }
]