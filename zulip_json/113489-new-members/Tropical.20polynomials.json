[
    {
        "content": "<p>Hello all, <br>\nI want to define tropical polynomials with the greater goal of formalizing some tropical geometry.</p>\n<p>I have seen that the tropical semiring is formalized in in Algebra/Tropical/Basic.lean. Is this the correct object?</p>\n<div class=\"codehilite\" data-code-language=\"instance\"><pre><span></span><code>    { instAddMonoidWithOneTropical,\n    instDistribTropical,\n    instAddCommMonoidTropical,\n    instCommMonoidTropical with\n    zero_mul := fun _ =&gt; untrop_injective (by simp [top_add])\n    mul_zero := fun _ =&gt; untrop_injective (by simp [add_top]) }\n</code></pre></div>\n<p>(Line 557 to 563)</p>\n<p>If it is the correct object, could you please guide me on how to use it to define a polynomial ring? I have noticed that there are polynomial-related modules in both \"Algebra\" and \"Data.\" Could you please clarify which one I should use for my purpose?</p>",
        "id": 390036112,
        "sender_full_name": "Linus Sommer",
        "timestamp": 1694266916
    },
    {
        "content": "<p>Are you asking for a Polynomial over a tropical ring, or does \"tropical polynomial\" mean something different?</p>",
        "id": 390037004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694267650
    },
    {
        "content": "<p>If so, I believe you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Tropical#doc\">docs#Tropical</a> as <code>(Tropical R)[X]</code> for some ring <code>R</code>, after <code>open scoped Polynomial</code> for the notation</p>",
        "id": 390037418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694268042
    },
    {
        "content": "<p>If so, I believe you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Tropical#doc\">docs#Tropical</a> as <code>(Tropical R)[X]</code> for some ring <code>R</code>, after <code>open scoped Polynomial</code> for the notation</p>",
        "id": 390037426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694268053
    },
    {
        "content": "<p>Thank you Eric, I was asking about polynomials over a tropical ring.</p>",
        "id": 390039115,
        "sender_full_name": "Linus Sommer",
        "timestamp": 1694269477
    },
    {
        "content": "<p>Working out which ring <code>R</code> you want to use may be tricky though!<br>\nAs for different polynomial modules, they should just contain different theorems about the same definition of polynomial. So you should use whatever you need from both.</p>",
        "id": 390039322,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694269656
    },
    {
        "content": "<p>Unfortunately I get the following error: unknown namespace 'Polynomial'.</p>\n<p>My code looks like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tropical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 390039696,
        "sender_full_name": "Linus Sommer",
        "timestamp": 1694269927
    },
    {
        "content": "<p>If I do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tropical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I get the following error: failed to synthesize instance  Semiring (Tropical R)</p>",
        "id": 390039715,
        "sender_full_name": "Linus Sommer",
        "timestamp": 1694269959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I was planing on using the extended reals .</p>",
        "id": 390039836,
        "sender_full_name": "Linus Sommer",
        "timestamp": 1694270088
    },
    {
        "content": "<p><code>variable {R : Type*}</code> means \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> be a set\", and if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is just a set then <code>Tropical R</code> is also just a set, and you can't take polynomials over a set.</p>",
        "id": 390039993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694270241
    },
    {
        "content": "<p>I don't know what you're doing but if you really want to work with an arbitrary R then you should assume it's something like a totally ordered additive commutative monoid with a maximal element; then <code>Tropical R</code> will be a semiring which is probably the minimal sensible thing you need in order to make polynomials over it.</p>",
        "id": 390040141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694270353
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tropical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 390040190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694270387
    },
    {
        "content": "<p>This also works (now we don't introduce any new sets at all):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.ENNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tropical</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 390040439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694270581
    },
    {
        "content": "<p>I spent some time playing with the different options, I think if you want to use <code>WithTop R</code> you can make it work.<br>\nThe main difficulties are, you can't use negation directly (as there is no negative of the top element), tactics aren't working very well with this type and numerals, so if you want to calculate explicitly you have to awkwardly move back to the reals sometimes.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.OrderSynonym</span>\n\n<span class=\"c1\">-- check that we can treat nonnegative reals with infinity as a semiring</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">Tropical</span>\n<span class=\"c1\">-- check that X^2 + 7 * X does the right thing tropically (min (X + X) (X + 7))</span>\n<span class=\"c1\">-- min (2 * 4) (4 + 3) = 7</span>\n<span class=\"c1\">-- min (2 * 0) (0 + 3) = 0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">trop</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">ℝ</span><span class=\"o\">))[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">trop</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">trop</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">trop_add_def</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">trop_mul_def</span><span class=\"o\">,</span> <span class=\"n\">trop_mul_def</span><span class=\"o\">,</span> <span class=\"n\">untrop_trop</span><span class=\"o\">,</span> <span class=\"n\">untrop_trop</span><span class=\"o\">,</span> <span class=\"n\">untrop_trop</span><span class=\"o\">,</span> <span class=\"n\">untrop_trop</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">WithTop</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">WithTop.coe_le_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">exact</span> <span class=\"n\">WithTop.coe_mono</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">trop</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">ℝ</span><span class=\"o\">))[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">trop</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">trop</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">trop_add_def</span><span class=\"o\">,</span> <span class=\"n\">untrop_trop</span><span class=\"o\">,</span> <span class=\"n\">untrop_one</span><span class=\"o\">,</span>  <span class=\"bp\">←</span> <span class=\"n\">trop_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">WithTop</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">WithTop.coe_zero</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">WithTop.coe_nonneg</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">WithTop.coe_le_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">exact</span> <span class=\"n\">WithTop.coe_mono</span>\n</code></pre></div>",
        "id": 390040876,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694270967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> thank you for your input I will experiment with your recommendations!</p>",
        "id": 390052455,
        "sender_full_name": "Linus Sommer",
        "timestamp": 1694280868
    },
    {
        "content": "<p>Hello,<br>\nHow can I change the variables such that <code>R</code> has the type CommSemiring and <code>f</code> is a polynomial over <code>R</code>?<br>\nAnd how can I change the definition such that I pass something  of type CommSemiring and get (Tropical R)[X]?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.ENNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tropical</span> <span class=\"n\">ENNReal</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">f</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TropicalPolynomialring</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">TropicalPolynomialring</span> <span class=\"n\">ENNReal</span>\n<span class=\"c1\">-- (Tropical ℝ≥0∞)[X] : Type</span>\n</code></pre></div>\n<p>Thank you for your help.</p>",
        "id": 390124282,
        "sender_full_name": "Linus Sommer",
        "timestamp": 1694338971
    },
    {
        "content": "<p>This gives you <code>R</code> as a <code>CommSemiring</code> and <code>f</code> as a polynomial with coefficients in <code>R</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 390124610,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694339214
    },
    {
        "content": "<p>I am not sure that I understand correctly your other question, but if <code>R</code> is a <code>CommSemiring</code>, there is not <code>Semiring</code> instance on <code>Tropical R</code> and hence you cannot take <code>Polynomial</code>s of <code>Tropical R</code>.  This however works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TropicalPolynomialring</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 390125167,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694339600
    },
    {
        "content": "<p>Linus, I do not know what your actual goal is, but I suspect that the definition that I wrote above may not be such a good idea.</p>\n<ul>\n<li>First, it is longer to type <code>TropicalPolynomialring R</code> than <code>(Tropical R)[X]</code>.</li>\n<li>Second, each new definition involves proving (trivial) properties about it, so that it merges well into the existing lemmas.  Recycling the already defined <code>Tropical R</code> might save you some boilerplate.</li>\n<li>Third, with a <code>def</code> you are creating a copy of <code>(Tropical R)[X]</code> that carries none of the instances of the source:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TropicalPolynomialringDef</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">TropicalPolynomialringDef</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"c1\">-- failed</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TropicalPolynomialring</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Tropical</span> <span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">TropicalPolynomialring</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"c1\">-- finds `semiring`</span>\n</code></pre></div>\n<p>So, I suspect that, at best, you may want an <code>abbrev</code>, but likely it might be better to work directly with the given name <code> (Tropical R)[X]</code>.  Possibly, you may want to introduce <code>notation</code> for <code>Tropical</code>, but maybe even that is unclear.</p>\n<p>I hope that this helps!</p>",
        "id": 390129770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694342682
    },
    {
        "content": "<blockquote>\n<p>And how can I change the definition such that I pass something of type CommSemiring and get (Tropical R)[X]?</p>\n</blockquote>\n<p><code>Tropical R</code> is the same underlying type (i.e. set) as <code>R</code> but with a different algebraic structure, so if <code>R</code> is a CommSemiring then <code>Tropical R</code> has no reason to be (addition on <code>Tropical R</code> is coming from an order on <code>R</code>, but you didn't give <code>R</code> an order).</p>",
        "id": 390137787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694347397
    },
    {
        "content": "<p>Linus, you might be interested in the (mathlib3) code I never PRed here: <a href=\"https://github.com/leanprover-community/mathlib/compare/master...pechersky/tropical-polynomial-again\">https://github.com/leanprover-community/mathlib/compare/master...pechersky/tropical-polynomial-again</a> (or another branch <a href=\"https://github.com/leanprover-community/mathlib/compare/master...pechersky/tropical-polynomial\">https://github.com/leanprover-community/mathlib/compare/master...pechersky/tropical-polynomial</a>)<br>\nwith declarations like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">trop_eval_monotone_left</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_monoid_with_top</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.polynomial.eval_tropical</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"o\">:=</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">concave_on_eval_tropical</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">concave_on'</span> <span class=\"n\">R</span> <span class=\"n\">set.univ</span> <span class=\"o\">(</span><span class=\"n\">p.eval_tropical</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390154773,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1694357800
    }
]