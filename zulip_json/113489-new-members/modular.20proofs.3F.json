[
    {
        "content": "<p>Hi; I've messed around with coq a little in the past and am trying to learn lean4 -- so far it's pretty cool! One thing I'm having trouble with is how to make my proofs \"modular\" -- ie, I'm trying to prove an algorithm works the way I think it does, but I don't want to be overly specific about the data it's operating on.</p>\n<p>The way I've been trying to solve this is by creating a class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MyData</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">relationship</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">constraint</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">),</span> <span class=\"n\">relationship</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">not</span> <span class=\"n\">relationship</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"n\">Fn1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span>\n</code></pre></div>\n<p>and then for messing around, I made an Example.lean file with a <code>@[default instance]</code> of <code>MyData (Prod Int Nat)</code>.</p>\n<p>That seems to work okay, but in order to prove theorems on it and stuff, I obviously want to be general and just rely on the \"relationship\" and \"Fn1\" relationships/constraints/functions/etc. So I've written:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">specific</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MyData</span> <span class=\"n\">Foo</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">MyData</span>\n</code></pre></div>\n<p>But the next thing I'd like is to give myself an alias for <code>List (List Foo))</code>; but using <code>def</code> or <code>abbrev</code> then gives me errors  when I use that alias like \"don't know how to synthesise implicit argument\" for <code>Foo</code>, presumably because it's leaving <code>Foo</code> as arbitrary, rather than keeping it linked to the variable I've declared.</p>\n<p>While writing this, googling has led me to try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">specific</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck.allowSectionVars</span> <span class=\"n\">true</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MyData</span> <span class=\"n\">Foo</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">MyData</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"SomeFoo\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Foo</span><span class=\"o\">)</span>\n<span class=\"bp\">```</span>\n\n<span class=\"n\">which</span> <span class=\"n\">seems</span> <span class=\"n\">to</span> <span class=\"n\">work</span> <span class=\"n\">so</span> <span class=\"n\">far</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">seems</span> <span class=\"n\">pretty</span> <span class=\"n\">obscure</span><span class=\"bp\">?</span> <span class=\"n\">Anyway</span><span class=\"o\">,</span> <span class=\"n\">does</span> <span class=\"n\">that</span> <span class=\"n\">all</span> <span class=\"n\">seem</span> <span class=\"n\">sensible</span><span class=\"o\">,</span> <span class=\"n\">or</span> <span class=\"n\">is</span> <span class=\"n\">there</span> <span class=\"n\">a</span> <span class=\"n\">better</span> <span class=\"n\">way</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 404469947,
        "sender_full_name": "Anthony Towns",
        "timestamp": 1701110499
    },
    {
        "content": "<p>Using <code>notation</code> like this is common in mathlib, though be sure to do <code>local notation</code> so that it doesn't escape the <code>section</code> where it makes sense.</p>",
        "id": 404471678,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701111217
    },
    {
        "content": "<p>If you use mathlib's <code>notation3</code> command (which is <code>notation</code> but with some Lean-3-like extensions and a more powerful pretty printer generator), then <code>List (List Foo)</code> will pretty print as <code>SomeFoo</code> too.</p>",
        "id": 404471858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701111278
    },
    {
        "content": "<p>Thanks!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/modular.20proofs.3F/near/404471858\">said</a>:</p>\n<blockquote>\n<p>If you use mathlib's <code>notation3</code> command (which is <code>notation</code> but with some Lean-3-like extensions and a more powerful pretty printer generator), then <code>List (List Foo)</code> will pretty print as <code>SomeFoo</code> too.</p>\n</blockquote>\n<p>At least in emacs/flycheck, it seems to pretty print that way already, so I guess I'll stick with this since the notation3 seems to be in a \"we're not sure we'll keep this\" state...</p>",
        "id": 404639521,
        "sender_full_name": "Anthony Towns",
        "timestamp": 1701179420
    }
]