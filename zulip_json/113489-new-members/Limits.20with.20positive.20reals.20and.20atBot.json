[
    {
        "content": "<p>Hello,<br>\nI have been working on a project which uses a \"Positive Reals\" type and I would now like to<br>\nwork with simple theorem involving limits, in particular \"tending to zero from the right\" which I believe I may achieve with <code>Filter.atBot</code>. But after browsing around the Mathlib docs for a while, I believe I am stuck. I am here to humbly ask for suggestions in how to prove theorems similar to the ones in the mwe below. Thank you.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Instances.Real</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.AtTopBot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Monotone.Basic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">PReal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"‚Ñù+\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PReal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test1</span><span class=\"o\">:</span>\n  <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">Filter.atBot</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Additionally \"With the limit of f for x leading to 0 from the right being defined\"</span>\n<span class=\"c1\">-- I know `lim` is not recommended but I didn't know how else to state this</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">+</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">StrictMono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">+</span><span class=\"o\">):</span>\n  <span class=\"n\">limUnder</span> <span class=\"n\">Filter.atBot</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403131557,
        "sender_full_name": "Daniele Pusceddu",
        "timestamp": 1700473684
    },
    {
        "content": "<p>The <code>‚Ñù+</code> notation is really very ambiguous. It could just as well refer to <code>NNReal</code>.</p>",
        "id": 403179501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700489918
    },
    {
        "content": "<p>My first advice is to reconsider whether you really really want this instead of working with reals.</p>",
        "id": 403179775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700489993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Limits.20with.20positive.20reals.20and.20atBot/near/403179775\">said</a>:</p>\n<blockquote>\n<p>My first advice is to reconsider whether you really really want this instead of working with reals.</p>\n</blockquote>\n<p>I invested a bit too much in it already to revert back to reals.</p>",
        "id": 403181096,
        "sender_full_name": "Daniele Pusceddu",
        "timestamp": 1700490349
    },
    {
        "content": "<p>Here something you can do (but it shows the pain you inflict on yourself with working with PReal):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Instances.Real</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.AtTopBot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Monotone.Basic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">PReal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"‚Ñù&gt;0\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test1</span><span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">atBot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">x</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhdsWithin_of_tendsto_nhds</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Ü¶</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this.continuousAt.tendsto</span> <span class=\"bp\">;</span> <span class=\"n\">ring</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">‚àò</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tendsto_subtype_rng</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">comap_coe_Ioi_nhdsWithin_Ioi</span><span class=\"o\">]</span>\n  <span class=\"n\">change</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hg.comp</span> <span class=\"n\">tendsto_comap</span>\n\n<span class=\"c1\">-- Additionally \"With the limit of f for x leading to 0 from the right being defined\"</span>\n<span class=\"c1\">-- I know `lim` is not recommended but I didn't know how else to state this</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">StrictMono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">atBot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">y</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n    <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403187597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700492273
    },
    {
        "content": "<p>I also took the opportunity to reformat your code to something more standard. You can clear extract a more general lemma here.</p>",
        "id": 403187763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700492314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Limits.20with.20positive.20reals.20and.20atBot/near/403187763\">said</a>:</p>\n<blockquote>\n<p>I also took the opportunity to reformat your code to something more standard. You can clear extract a more general lemma here.</p>\n</blockquote>\n<p>Thank you very much, seeing this helps a lot already.</p>",
        "id": 403190692,
        "sender_full_name": "Daniele Pusceddu",
        "timestamp": 1700493144
    }
]