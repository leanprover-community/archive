[
    {
        "content": "<p>I am trying to prove some theorems about GCD as an exercise, and I am running into an issue with induction proofs on Nat. I have done some reading on well-founded recursion but I am not quite getting it. Any help or hints are appreciated!</p>\n<p>Here is a minimum working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dec</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dec</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dec_always_0</span> <span class=\"o\">:</span> <span class=\"n\">dec</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dec</span><span class=\"o\">]</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"c1\">-- The function dec will return 0 on all inputs, and our proof is straightforward.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dec_by_2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">induction'</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)}</span>\n    <span class=\"n\">dec_by_2</span> <span class=\"o\">(</span><span class=\"n\">Nat.pred</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dec_by_2_always_0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dec_by_2</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">dec_by_2</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Tactic state:</span>\n  <span class=\"c1\">-- n: ℕ</span>\n  <span class=\"c1\">-- n_ih: dec_by_2 n = 0</span>\n  <span class=\"c1\">-- ⊢ dec_by_2 (Nat.pred n) = 0</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How can I prove that we will always get a 0 argument passed into a function whos Nat arguments decrease at every step, even if it not by just 1? Apologies if this is trivial.</p>",
        "id": 405604146,
        "sender_full_name": "Gregory Constantine",
        "timestamp": 1701579740
    },
    {
        "content": "<p>One way of going about this would be to use the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.strong_induction_on#doc\">docs#Nat.strong_induction_on</a> lemma.</p>",
        "id": 405613784,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701588173
    },
    {
        "content": "<p>Another way would be to prove something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dec_by_2</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">dec_by_2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 405613904,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701588291
    },
    {
        "content": "<p>using regular induction, and then prove the theorem you want from that.</p>",
        "id": 405613924,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701588311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20thms.20about.20Nat.20function.20which.20does.20not.20decrease.20by.201/near/405613924\">said</a>:</p>\n<blockquote>\n<p>using regular induction, and then prove the theorem you want from that.</p>\n</blockquote>\n<p>I assume you meant </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dec_eq_dec_plus_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dec_by_2</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">dec_by_2</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">):=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">dec_by_2</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">dec_by_2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">n_ih</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.symm</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dec_by_2_always_0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dec_by_2</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dec_eq_dec_plus_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">n_ih</span>\n  <span class=\"n\">exact</span> <span class=\"n\">n_ih</span>\n</code></pre></div>\n<p>This works! <br>\nI also proved my GCD theorems with strong induction. I still need to do further reading on well-founded recursion, but this topic can be marked as resolved. </p>\n<p>Thanks.</p>",
        "id": 405702273,
        "sender_full_name": "Gregory Constantine",
        "timestamp": 1701641067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"662174\">Gregory Constantine</span> has marked this topic as resolved.</p>",
        "id": 405744345,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701665164
    }
]