[
    {
        "content": "<p>In the code below the rewrite in <code>rank_eq_rank_diagonal</code> fails. Weirdly enough, if I replace the RHS side with the zero matrix it does not fail.<br>\nThe error message says \"motive is not type correct\". In full the error message is below the code. Checking some threads here I found suggest ions to try using: <code>simp_rw</code>: it fails. I also tried <code>erewrite</code>: it also fails.</p>\n<p>The error message for <code>simp_rw</code> after setting <code>set_option trace.simp_lemmas true</code> is <br>\n<code>[simp_lemmas.invalid] LHS of rule derived from '[anonymous]' occurs in RHS</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.hermitian</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.pos_def</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.spectrum</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.diagonal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.rank</span>\n<span class=\"c1\">--import rank_surj_inv</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.star.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span> <span class=\"n\">complex</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">is_R_or_C</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">partial_order</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">star_ordered_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">modified_spectral_theorem</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">A.is_hermitian</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">hA.eigenvector_matrix</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span>\n    <span class=\"o\">(</span><span class=\"n\">matrix.diagonal</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">hA.eigenvalues</span><span class=\"o\">))</span> <span class=\"bp\">⬝</span> <span class=\"n\">hA.eigenvector_matrix_inv</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hA.spectral_theorem</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hA.eigenvector_matrix</span> <span class=\"bp\">⬝</span>  <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">matrix.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hA.eigenvector_matrix_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">matrix.one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">matrix.mul_assoc</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rank_eq_rank_diagonal</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">A.is_hermitian</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A.rank</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">matrix.diagonal</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">hA.eigenvalues</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"o\">:=</span>\n    <span class=\"c1\">-- A.rank = (0: matrix n n ℂ).rank := -- This line makes rewrite work!!</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">modified_spectral_theorem</span> <span class=\"n\">A</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n    <span class=\"n\">A.rank</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">diagonal</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">hA.eigenvalues</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">_a.rank</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">diagonal</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">hA.eigenvalues</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">rank</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A.is_hermitian</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">A.rank</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">diagonal</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">hA.eigenvalues</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">rank</span>\n</code></pre></div>",
        "id": 363353329,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685813438
    },
    {
        "content": "<p>The trick suggested <a href=\"#narrow/stream/287929-mathlib4/topic/Rewrite.20fails.20in.20.60ite.60.20!4.234205\">here</a> to use <code>nth_rewrite 0</code> also does not work. <code>nth_rewrite_lhs 0</code> works.</p>",
        "id": 363356170,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685814643
    },
    {
        "content": "<p>I guess this is because there is an A hiding inside <code>hA.eigenvalues</code> but what if I had another A on the lhs? Why is <code>nth_rewrite</code> not working but <code>nth_rewrite_lhs</code> working?</p>",
        "id": 363356296,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685814698
    }
]