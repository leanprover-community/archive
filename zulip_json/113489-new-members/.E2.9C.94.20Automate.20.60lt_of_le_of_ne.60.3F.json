[
    {
        "content": "<p>Is there a way to do this with just tactics, without explicitly invoking any theorems such as <code>lt_of_le_of_ne'</code>? I was expecting <code>linarith</code> to just do it but apparently not?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hh</span>\n    <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne'</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hh</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 392845274,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695570093
    },
    {
        "content": "<p>You can use  <code> linarith (config := {splitNe := true})</code> hopefully, with a recent enough mathlib. this is disabled by defualt as it would be too slow sometimes, though perhaps we should revisit / warn about this more (it is in the docstring for linarith).</p>",
        "id": 392857708,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695580728
    },
    {
        "content": "<p>If you have a mathlib older than last week and you can't update, then to get <code>splitNe</code> to apply you need to turn not-equals into an actual <code>Ne</code> first</p>",
        "id": 392858138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695581162
    },
    {
        "content": "<p>Here's another way you can set up the case split:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hh</span>\n    <span class=\"n\">cases</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">hh</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>This is essentially what <code>splitNe := true</code> causes <code>linarith</code> to do itself.</p>",
        "id": 392858219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695581240
    },
    {
        "content": "<p>I tried updating Mathlib on Friday (currently using <code>6b391efa6</code>from August 27) but the build failed. Not sure what I'm doing wrong there... The build also tends to take about half a day on my PC, so I'm somewhat reluctant to try it very often.</p>",
        "id": 392859927,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695582609
    },
    {
        "content": "<p>Are you not able to use <code>lake exe cache get</code> to get the precompiled cache?</p>",
        "id": 392860059,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695582744
    },
    {
        "content": "<p>We generally don't build mathlib on our own machines</p>",
        "id": 392860113,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695582769
    },
    {
        "content": "<p>Makes sense. I'll try that, thanks. Guess I'm skipping too much of the \"basic\" documentation all over the place</p>",
        "id": 392860348,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695582853
    },
    {
        "content": "<p>(If you're using mathlib as a dependency, make sure your <code>lean-toolchain</code> file matches the one in <code>lake-packages/mathlib</code>. I generally work inside a mathlib branch, but last I checked this is something you need to do to make sure the downloaded cache will actually be used.)</p>",
        "id": 392860635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695583048
    },
    {
        "content": "<p>Do you know how to get VSCode to show all the files in a Lean project? For me, it only shows the \"actual code\"... I started from \"Mathematics in Lean\" (where it only shows the MIL directory) and replaced the code. Is there some setting for that? Also, is there a way to get the Mathlib version from within the Lean code, like there is <code>Lean.versionString </code> for the Lean version?</p>",
        "id": 392860994,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695583234
    },
    {
        "content": "<p>Unfortunately, it starts building even after running <code>lake exe cache get</code>(assuming that messages like <code>info: [27/3781] Building Std.Lean.HashMap</code>and full CPU usage is what you mean by building). I don't really see how what I did differs from <a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a></p>",
        "id": 392861940,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695584249
    },
    {
        "content": "<p>Something you have to do sometimes is <code>lake exe cache get!</code> (maybe preceded by <code>lake clean</code> just to be sure)</p>",
        "id": 392862433,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695584649
    },
    {
        "content": "<p>I don't know the details, but sometimes there are things that change somewhere in the toolchain where the cache doesn't work quite right.</p>",
        "id": 392862470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695584713
    },
    {
        "content": "<p>That worked, thanks!</p>",
        "id": 392862870,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695585015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> has marked this topic as resolved.</p>",
        "id": 392862878,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695585021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Automate.20.60lt_of_le_of_ne.60.3F/near/392860994\">said</a>:</p>\n<blockquote>\n<p>Do you know how to get VSCode to show all the files in a Lean project? For me, it only shows the \"actual code\"... I started from \"Mathematics in Lean\" (where it only shows the MIL directory) and replaced the code. Is there some setting for that? </p>\n</blockquote>\n<p>This has nothing to do with Lean, this is purely a question about VSCode. You can open settings in VSCode and search for Files: Exclude. Or you can use another way to directly edit the file <code>mathematics_in_lean/.vscode/settings.json</code>. That being said, I recommend that you create your own Lean project instead of dumping random code in your copy of MIL since you may end up break things there and then you'll have a hard time understanding what happens and how to get help.</p>",
        "id": 392863962,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695585924
    }
]