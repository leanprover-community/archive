[
    {
        "content": "<p>I got stuck trying to reprove the 1-step subgroup test the other day.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Deprecated.Subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_step_subgroup_test</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>  <span class=\"bp\">∈</span>  <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">IsSubgroup</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">constructor</span>\n<span class=\"n\">constructor</span>\n<span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">⁻¹</span>  <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The goal is to show that <code> S </code> has the identity of <code> G </code>.  Since I have that <code> s : S </code> I wanted to say that I had its inverse, and then use <code> h3 </code> to get that <code> 1 :S </code>.  Is there some conversion trick to remind Lean that <code>` s : G</code>, or have I made some other egregious error?</p>",
        "id": 361085239,
        "sender_full_name": "Kristaps Balodis",
        "timestamp": 1685026540
    },
    {
        "content": "<p>This is a very inconvenient way of stating it. You should start with s having type G and an assumption also for elements of type G.</p>",
        "id": 361086858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685026918
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">one_step_subgroup_test</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span>  <span class=\"bp\">∈</span>  <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">IsSubgroup</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 361086999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685026938
    },
    {
        "content": "<p>To add to that: you are defining an element of <code>G</code>, which is a term of type <code>G</code>, so the syntax should either state a proposition about that element; e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>\n<p>if you just want to define the element</p>",
        "id": 361088999,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1685027338
    },
    {
        "content": "<p>Here is an idiomatic statement and proof in case you are still stuck</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Deprecated.Subgroup</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_step_subgroup_test</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span>  <span class=\"bp\">∈</span>  <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">IsSubgroup</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">one_mem</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h2</span> <span class=\"n\">hs</span> <span class=\"n\">hs</span>\n<span class=\"k\">have</span> <span class=\"n\">inv_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h2</span> <span class=\"n\">one_mem</span> <span class=\"n\">ha</span>\n<span class=\"o\">{</span> <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">one_mem</span>\n  <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h2</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">inv_mem</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n  <span class=\"n\">inv_mem</span> <span class=\"o\">:=</span> <span class=\"n\">inv_mem</span> <span class=\"o\">}</span>\n</code></pre></div>\n</div></div>",
        "id": 361090357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685027653
    },
    {
        "content": "<p>Thanks!  It took me a little bit to parse everything, but I found that proof very enlightening, I learned a lot about how things work.</p>",
        "id": 361102549,
        "sender_full_name": "Kristaps Balodis",
        "timestamp": 1685030358
    },
    {
        "content": "<p>A couple follow-up questions:</p>\n<p>1) Is the term \"idiomatic\" technical here?  What would make this proof non-idiomatic? </p>\n<p>2) Why did we need <code> import Mathlib.Deprecated.Subgroup </code> as opposed to the other imports I had, and what does \"Deprecated\" mean in this case?</p>",
        "id": 361121869,
        "sender_full_name": "Kristaps Balodis",
        "timestamp": 1685035119
    },
    {
        "content": "<p><code>IsSubgroup</code> lives in <code>Mathlib.Deprecated.Subgroup</code>, as explained at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Deprecated/Subgroup.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Deprecated/Subgroup.html</a> we try to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup#doc\">docs4#Subgroup</a> instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSubgroup#doc\">docs4#IsSubgroup</a> these days, but the deprecated version still lingers around. These things are very similar but packaged up in a different way.<br>\nSo actually Patrick just minimised your imports to only what was needed.</p>",
        "id": 361122483,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1685035280
    },
    {
        "content": "<p>Idiomatic doesn't have a technical definition, but it just means things done in a good style to avoid common issues and fit in with the way the rest of the library is written. For example using the structure notation <code>{blah := blah}</code> can be more readable than using the constructor tactic (though you will see both styles in mathlib depending on the context)</p>",
        "id": 361123024,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1685035422
    }
]