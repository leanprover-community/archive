[
    {
        "content": "<p>Given the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">ty_bool</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_abs</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">t_true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift</span> <span class=\"o\">(</span><span class=\"n\">amt</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">amt</span> <span class=\"mi\">0</span> <span class=\"n\">t1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sizeof_upshift_cutoff</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">}:</span> <span class=\"n\">sizeof</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">):=</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sizeof_upshift</span> <span class=\"o\">{</span><span class=\"n\">amt</span> <span class=\"n\">t</span><span class=\"o\">}:</span> <span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"n\">amt</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sizeof</span> <span class=\"n\">t</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">replacement</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">idx</span> <span class=\"k\">then</span> <span class=\"n\">replacement</span> <span class=\"k\">else</span> <span class=\"n\">t_var</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift</span> <span class=\"mi\">1</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">idx</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"c1\">--using_well_founded {rel_tac := λ _ _, `[exact ⟨_, measure_wf (sizeof psigma.snd)⟩]}</span>\n</code></pre></div>\n<p>I'm trying to indicate that the size of the third argument (the term) decreases. My attempt at using_well_founded is commented at the bottom.</p>\n<p>Thanks.</p>",
        "id": 230705446,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615993670
    },
    {
        "content": "<p>Eventually changing the definition slightly allowed the recursion without a manual well_founded.</p>\n<p>However, in a slightly different version, I am getting this issue again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">recordmap</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">r_nil</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n<span class=\"bp\">|</span> <span class=\"n\">r_cons</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">recordmap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map_vals</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"bp\">→</span><span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">recordmap</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">recordmap</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">recordmap.r_nil</span> <span class=\"o\">:=</span> <span class=\"n\">recordmap.r_nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">recordmap.r_cons</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">recordmap.r_cons</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_vals</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">recordmap</span> <span class=\"n\">ttype</span><span class=\"o\">)):</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">ty_bool</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_abs</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">vals</span><span class=\"o\">:</span> <span class=\"n\">recordmap</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_projection</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">term</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">t1</span> <span class=\"bp\">`</span> <span class=\"bp\">∙</span> <span class=\"bp\">`</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`λ</span><span class=\"o\">:</span><span class=\"bp\">`</span> <span class=\"n\">T</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">is_value</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">t_true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_var</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">&lt;</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"n\">int.to_nat</span><span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_abs</span> <span class=\"n\">T</span> <span class=\"bp\">$</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_record</span> <span class=\"n\">vals</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">map_vals</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">vals</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_projection</span> <span class=\"n\">t</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t_projection</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>In upshift_cutoff, the size of the third argument (term) always decreases, and as such, this recursion is well founded. I'm just not sure how to tell lean that.</p>",
        "id": 231455713,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616499420
    },
    {
        "content": "<p>In case anyone else looks for this:</p>\n<p>Assuming a def with 3 params, and you want to indicate that a property <code>sizeof</code> decreases on the third param, the correct invocation is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span> <span class=\"n\">arg1</span><span class=\"o\">,</span> <span class=\"n\">arg2</span><span class=\"o\">,</span> <span class=\"n\">arg3</span><span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"n\">sizeof</span> <span class=\"n\">arg3</span><span class=\"o\">)⟩],</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231516774,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616522946
    },
    {
        "content": "<p>We could probably use some more examples like this on our <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">well-founded doc page</a>.</p>",
        "id": 231518233,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616523564
    },
    {
        "content": "<p>In the following minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">recordmap</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">map_vals</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"bp\">→</span><span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">recordmap</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">recordmap</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">pair</span><span class=\"o\">,(</span><span class=\"n\">prod.fst</span> <span class=\"n\">pair</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"bp\">$</span> <span class=\"n\">prod.snd</span> <span class=\"n\">pair</span><span class=\"o\">)))</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_record</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">recordmap</span> <span class=\"n\">ttype</span><span class=\"o\">)):</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">vals</span><span class=\"o\">:</span> <span class=\"n\">recordmap</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">term</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_value</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_record</span> <span class=\"n\">vals</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- What is the correct have statement here, to make this well founded?</span>\n  <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">map_vals</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">vals</span><span class=\"o\">)</span>\n\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"n\">sizeof</span> <span class=\"n\">t</span><span class=\"o\">)⟩],</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>How can I prove the t_record case? I tried <code>have  (∀(x:term),((sizeof x) &lt; (sizeof (t_record vals)))), from sorry,</code>,  but lean didn't accept it.</p>",
        "id": 231602897,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616577466
    },
    {
        "content": "<p>I agree <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , I'm finding it somewhat difficult to figure all this out</p>",
        "id": 231603865,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616577984
    },
    {
        "content": "<p>Figured it out: you have to put the have statement inside of the lambda, as such: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">upshift_cutoff</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">t_record</span> <span class=\"n\">vals</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- What is the correct have statement here, to make this well founded?</span>\n  <span class=\"n\">t_record</span> <span class=\"o\">(</span><span class=\"n\">map_vals</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">sizeof</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">t_record</span> <span class=\"n\">vals</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">upshift_cutoff</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">vals</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231617250,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616584662
    },
    {
        "content": "<p>I have a rather complicated recursive function and I'm having trouble getting Lean to accept the recursion. Hoping to get some advice. Below is a fake version that has enough of the same structure to illustrate my issue. When the third case hits, it uses <code>f</code> to select another element. Several facts seem relevant:<br>\n<code>E</code> is a fintype, so I can't keep decreasing forever.<br>\nApplying <code>f</code> will immediately land me in one of the previous non-recursive cases, so in fact, there should only ever be one recursive call.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">my_section</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"kn\">open</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- This mimic real parts of the file</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">--tried: have f (t3 n) &lt; (t3 n), from h n,</span>\n   <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"c1\">--tried: using_well_founded {dec_tac := `[tactic.assumption]}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_section</span>\n</code></pre></div>",
        "id": 267793628,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642025527
    },
    {
        "content": "<p>If you use the fintype derive handler you can prove that <code>E</code> is a fintype rather than adding it as a parameter, unfortunately it doesn't work if <code>N</code> is a parameter, only a variable (parameters aren't really used so much in mathlib for this sort of reason)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">my_section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[derive fintype]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"kn\">open</span> <span class=\"n\">E</span>\n</code></pre></div>",
        "id": 267795031,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642026064
    },
    {
        "content": "<p>Hopefully in your actual proof the <code>&lt;</code> is a partial order (or preorder). In that case, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">my_section</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"kn\">open</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- This mimic real parts of the file</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span>  <span class=\"n\">fintype.preorder.well_founded</span><span class=\"o\">⟩],</span>\n                     <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">tactic.assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I also had to tell Lean w.r.t. what relation the recursion is decreasing and why it is well-founded (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.preorder.well_founded\">docs#fintype.preorder.well_founded</a>)</p>",
        "id": 267795332,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642026204
    },
    {
        "content": "<p>Interesting! I didn't know about <code>derive fintype</code>. Since I didn't want to bother proving it for the purposes of a mwe I just added it as a parameter. Good to know I didn't need to do any work.</p>",
        "id": 267795370,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642026229
    },
    {
        "content": "<p>It is a partial order! Let me go try that and study it a bit to understand it.</p>",
        "id": 267795450,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642026266
    },
    {
        "content": "<p>I was searching everywhere for something like <code>fintype.preorder.well_founded</code> but couldn't get the docs search to turn it up. That's exactly what I need. Thanks!</p>",
        "id": 267795789,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642026498
    },
    {
        "content": "<p>Maybe I'm missing something or the MWE is  too minimal, but if as soon as it hits t3 it goes straight to one of the other cases then you can define a function which will have the same equational properties without worrying about well_founded, or a relation on <code>E</code> at all</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">my_section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[derive fintype]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"bp\">|</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n<span class=\"kn\">open</span> <span class=\"n\">E</span>\n\n<span class=\"c1\">--variable [has_lt (E N)]</span>\n\n<span class=\"c1\">-- This mimic real parts of the file</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"c1\">-- variable (h : ∀ (n : N), f (t3 n) &lt; (t3 n))</span>\n<span class=\"c1\">-- variable (h1 : ∀ (n : N), f (t3 n) = (t1 n) ∨ f (t3 n) = (t2 n))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cs_aux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cs_aux</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">t3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">cs_aux</span> <span class=\"n\">N</span> <span class=\"n\">f</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">my_section</span>\n</code></pre></div>",
        "id": 267795903,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642026573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300396\">Paul Rowe</span> <a href=\"#narrow/stream/113489-new-members/topic/using_well_founded/near/267795789\">said</a>:</p>\n<blockquote>\n<p>I was searching everywhere for something like <code>fintype.preorder.well_founded</code> but couldn't get the docs search to turn it up. That's exactly what I need. Thanks!</p>\n</blockquote>\n<p>I got it by searching for <code>​well_founded_of_fintype</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded_of_fintype\">https://leanprover-community.github.io/mathlib_docs/find/well_founded_of_fintype</a></p>",
        "id": 267796253,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642026721
    },
    {
        "content": "<p>usually if you search for the names of what you want and what you have, separated by an underscore, the search engine will find it.</p>",
        "id": 267796476,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642026765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Interesting idea. It's true that the mwe is much more minimal than the real thing. In fact, it does a few case splits on facts that might be true of the argument. So it might take some work for me to figure out the right aux function.</p>",
        "id": 267796921,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642026939
    },
    {
        "content": "<p>I honestly didn't think about the fact that it should only ever have at most one recursive call until I was writing up the question!</p>",
        "id": 267797023,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642026985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113489-new-members/topic/using_well_founded/near/267796476\">said</a>:</p>\n<blockquote>\n<p>usually if you search for the names of what you want and what you have, separated by an underscore, the search engine will find it.</p>\n</blockquote>\n<p>Yeah, I was trying to do things like that. I must have just missed the right combinations. Thanks for the advice though!</p>",
        "id": 267797145,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1642027080
    }
]