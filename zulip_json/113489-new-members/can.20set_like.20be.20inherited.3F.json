[
    {
        "content": "<p>In Lean 3, if I have a structure type <code>Foo</code> and another type <code>Bar</code> that extends <code>Foo</code>, and <code>Foo</code> has a <code>set_like</code> instance, is there an easy way to extend that <code>set_like</code> instance to cover <code>Bar</code> as well?</p>",
        "id": 342423112,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1679000932
    },
    {
        "content": "<p>I think in mathlib the <code>set_like</code> instances are given from scratch every time. There's not too much boilerplate at least.</p>",
        "id": 342423754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679001221
    },
    {
        "content": "<p>For example, <code>submonoid</code>extends <code>subsemigroup</code> but you have <a href=\"https://github.com/leanprover-community/mathlib/blob/acee671f47b8e7972a1eb6f4eed74b4b3abce829/src/group_theory/submonoid/basic.lean#L129\">https://github.com/leanprover-community/mathlib/blob/acee671f47b8e7972a1eb6f4eed74b4b3abce829/src/group_theory/submonoid/basic.lean#L129</a></p>",
        "id": 342423972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679001311
    },
    {
        "content": "<p>I ended up writing something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">bar_set_like</span> <span class=\"o\">:</span> <span class=\"n\">set_like</span> <span class=\"n\">bar</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b.carrier</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">p__to_foo</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">q__to_foo</span><span class=\"o\">,</span>\n    <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I'm not sure why <code>cases p, cases q, congr'</code> (the proof used by <code>submonoid</code>) wasn't enough.</p>\n<p>I have another type that extends <code>bar</code> and the <code>set_like</code> proof for that is even uglier. I feel like I'm missing an easier proof.</p>",
        "id": 342426175,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1679002256
    },
    {
        "content": "<p>I would recommend that you first prove that <code>Bar.toFoo</code> is injective</p>",
        "id": 342437672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679007467
    },
    {
        "content": "<p>Then the proof will just be <code>toFoo_injective (set_like.coe_injective h)</code></p>",
        "id": 342437786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679007509
    },
    {
        "content": "<p>You could also be lazy and check if <code>tidy</code> works. (Eric's suggestion seems more principled.)</p>",
        "id": 342438710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679007898
    },
    {
        "content": "<p>Usually you need injectivity of <code>Bar.toFoo</code> later anyway (for instance, to transfer other structure), so it's useful to prove it directly</p>",
        "id": 342444350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679010796
    }
]