[
    {
        "content": "<p>I'm working through Functional Programming for Lean.</p>\n<p>I'm trying to rewrite the <a href=\"https://lean-lang.org/functional_programming_in_lean/monads/class.html#general-monad-operations\">implementation</a> of <code>Monad</code> for <code>State</code> more explicitly, in order to better understand it. One of my rewrite steps breaks the definition, and I cannot understand why.</p>\n<p>Here's the original definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">State</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">bind</span> <span class=\"n\">first</span> <span class=\"n\">next</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">first</span> <span class=\"n\">s</span>\n      <span class=\"n\">next</span> <span class=\"n\">x</span> <span class=\"n\">s'</span>\n</code></pre></div>\n<p>Here is a rewritten, still working, implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">context_applied</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">context_applied</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n  <span class=\"n\">bind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">state_og</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value_transfomer</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span>\n      <span class=\"k\">fun</span> <span class=\"n\">context_input</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n        <span class=\"k\">let</span> <span class=\"n\">applied_state</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">state_og</span> <span class=\"n\">context_input</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">context_applied</span><span class=\"o\">,</span> <span class=\"n\">value_applied</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">applied_state</span>\n        <span class=\"o\">(</span><span class=\"n\">value_transfomer</span> <span class=\"n\">value_applied</span><span class=\"o\">)</span> <span class=\"n\">context_applied</span>\n      <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n<p>If I split the final line in two as follows, I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">context_applied</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">context_applied</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n  <span class=\"n\">bind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">state_og</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value_transfomer</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">σ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span>\n      <span class=\"k\">fun</span> <span class=\"n\">context_input</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n        <span class=\"k\">let</span> <span class=\"n\">applied_state</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">state_og</span> <span class=\"n\">context_input</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">context_applied</span><span class=\"o\">,</span> <span class=\"n\">value_applied</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">applied_state</span>\n        <span class=\"k\">let</span> <span class=\"n\">value_transformed</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">value_transfomer</span> <span class=\"n\">value_applied</span><span class=\"o\">)</span>\n        <span class=\"n\">value_transformed</span> <span class=\"n\">context_applied</span>\n      <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n<p>The error is at <code>where</code> and says <code>fields missing: 'map', 'mapConst', 'seq', 'seqLeft'</code></p>\n<p>Why does this happen? </p>\n<p>I'm assuming the earlier versions are relying on some convenience funtionality that is breaking in my final version.</p>",
        "id": 403817433,
        "sender_full_name": "Michael Fishman",
        "timestamp": 1700755977
    }
]