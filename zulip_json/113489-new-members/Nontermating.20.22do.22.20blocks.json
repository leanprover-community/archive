[
    {
        "content": "<p>When reading about the \"do\" notation in the Lean manual, I started experimenting and noticed that you're able to write nonterminating functions without Lean complaining:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">loops</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">while</span> <span class=\"n\">true</span> <span class=\"k\">do</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>Why are you not required to mark this function as \"partial\"?</p>",
        "id": 397979378,
        "sender_full_name": "Ayden Coughlin",
        "timestamp": 1698017460
    },
    {
        "content": "<p>\"partial\" is not a viral marker, it is only used for definitions that are directly recursive, and implies that they cannot be unfolded</p>",
        "id": 397991644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698026238
    },
    {
        "content": "<p>There is a <code>partial</code> involved in defining <code>while</code>, but your code is only calling that definition so you have no direct recursion in your function (i.e. <code>loops</code> does not call itself)</p>",
        "id": 397991716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698026283
    },
    {
        "content": "<p>(the <code>partial</code> is in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Loop.forIn#src\">src#Lean.Loop.forIn</a>)</p>",
        "id": 397991795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698026322
    },
    {
        "content": "<p>I see. Thank you.</p>",
        "id": 398076111,
        "sender_full_name": "Ayden Coughlin",
        "timestamp": 1698064739
    },
    {
        "content": "<p>This concerns me a little bit. How can I be confident that my function terminates if it can depend on partial functions indirectly in this way? Also, are there alternatives to <code>while</code> and similar imperative-style constructs that are not partial (requiring some kind of manual proof of termination)?</p>",
        "id": 398809039,
        "sender_full_name": "Ayden Coughlin",
        "timestamp": 1698376219
    },
    {
        "content": "<p>If you use tail-recursion, then you will have to prove termination manually, or use <code>partial</code></p>",
        "id": 398813014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698378247
    }
]