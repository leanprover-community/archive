[
    {
        "content": "<p>In tactic mode, in my hypothesis, I have something of an application (like <code>f x</code>), and I'd like to do <code>cases</code> on it.<br>\nIn Coq, when I do so, all instances of <code>f x</code> get pattern-matched over. In Lean4, nothing happens.</p>\n<p>I have tried:</p>\n<ol>\n<li>Doing something like <code>let fx := f x</code>, and then rewriting using <code>rw [fx,\\left fx] at hypothesis</code>, but does not work either.</li>\n<li>Doing something like <code>let fx := fx</code>, then <code>let fx_eq : fx = f x := rfl</code> and then <code>cases fx</code>, but it does not work either. Not even <code>fx</code> gets destructed.</li>\n</ol>\n<p>What would be the Lean4 way of performing this step?</p>\n<p>Code below if anyone is interested</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ast</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span>\n<span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span>\n\n\n<span class=\"c1\">-- rewriting</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">rewrite_step_result</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Finish</span>\n<span class=\"bp\">|</span> <span class=\"n\">Next</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">rewrite_step_result</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ast</span>\n<span class=\"kn\">open</span> <span class=\"n\">rewrite_step_result</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">substitute</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"n\">var'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"bp\">=</span> <span class=\"n\">var'</span> <span class=\"k\">then</span> <span class=\"n\">sub</span> <span class=\"k\">else</span> <span class=\"n\">Var</span> <span class=\"n\">var'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">f</span> <span class=\"n\">var</span> <span class=\"n\">sub</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">arg</span> <span class=\"n\">var</span> <span class=\"n\">sub</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">var'</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"bp\">=</span> <span class=\"n\">var'</span> <span class=\"k\">then</span> <span class=\"n\">Lam</span> <span class=\"n\">var'</span> <span class=\"n\">body</span> <span class=\"k\">else</span> <span class=\"n\">Lam</span> <span class=\"n\">var'</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">body</span> <span class=\"n\">var</span> <span class=\"n\">sub</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rewrite_step</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">rewrite_step_result</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"n\">_var</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finish</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">_var</span> <span class=\"n\">_body</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finish</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n    <span class=\"k\">match</span> <span class=\"n\">rewrite_step</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Finish</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">match</span> <span class=\"n\">rewrite_step</span> <span class=\"n\">arg</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Finish</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n        <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Lam</span> <span class=\"n\">var</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Next</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">body</span> <span class=\"n\">var</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finish</span>\n      <span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Next</span> <span class=\"n\">arg'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Next</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">f</span> <span class=\"n\">arg'</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Next</span> <span class=\"n\">f'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Next</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">f'</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_normal</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rewrite_step</span> <span class=\"n\">expr</span> <span class=\"bp\">=</span> <span class=\"n\">Finish</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Next</span> <span class=\"n\">expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n    <span class=\"k\">match</span> <span class=\"n\">rewrite_step</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Finish</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finish</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Next</span> <span class=\"n\">expr'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"n\">expr'</span> <span class=\"n\">n'</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">terminates</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"n\">expr</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Finish</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">looper</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"o\">:=</span>\n  <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">Lam</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">looper_loops</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"n\">looper</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">Next</span> <span class=\"n\">looper</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">eq_refl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">looper_loops_forever</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">rewrite_n_steps</span> <span class=\"n\">looper</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Next</span> <span class=\"n\">looper</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eq_refl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">non_terminating</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ast</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">terminates</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">exists</span> <span class=\"n\">looper</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">terminates</span>\n  <span class=\"n\">intro</span> <span class=\"n\">tl</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span> <span class=\"n\">n</span> <span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">tl</span>\n  <span class=\"k\">have</span> <span class=\"n\">ih'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rewrite_n_steps</span> <span class=\"n\">looper</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Next</span> <span class=\"n\">looper</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">looper_loops_forever</span> <span class=\"n\">n</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih'</span>\n  <span class=\"n\">contradiction</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Typed</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fun</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">tast</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TVar</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TApp</span> <span class=\"o\">:</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TLam</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tast</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">tast</span>\n  <span class=\"kd\">def</span> <span class=\"n\">remove_types</span> <span class=\"o\">:</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ast</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TLam</span> <span class=\"n\">v</span> <span class=\"n\">_ty</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lam</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">remove_types</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TVar</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Var</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TApp</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">remove_types</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">remove_types</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n\n  <span class=\"kn\">namespace</span> <span class=\"n\">Typecheck</span>\n\n    <span class=\"kd\">inductive</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Fail</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Succeed</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">result</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n    <span class=\"kn\">open</span> <span class=\"n\">result</span>\n    <span class=\"kn\">open</span> <span class=\"n\">type</span>\n    <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">result</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TVar</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">match</span> <span class=\"n\">List.lookup</span> <span class=\"n\">v</span> <span class=\"n\">ctx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fail</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Succeed</span> <span class=\"n\">ty</span>\n    <span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TLam</span> <span class=\"n\">v</span> <span class=\"n\">ty</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">List.cons</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"n\">ctx</span>\n      <span class=\"n\">main</span> <span class=\"n\">ctx</span> <span class=\"n\">body</span>\n    <span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TApp</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"k\">match</span> <span class=\"n\">main</span> <span class=\"n\">ctx</span> <span class=\"n\">arg</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Fail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fail</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Succeed</span> <span class=\"n\">arg_ty</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n        <span class=\"k\">match</span> <span class=\"n\">main</span> <span class=\"n\">ctx</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Fail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fail</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Succeed</span> <span class=\"n\">f'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n          <span class=\"k\">match</span> <span class=\"n\">f'</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Fun</span> <span class=\"n\">in_ty</span> <span class=\"n\">out_ty</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n            <span class=\"k\">if</span> <span class=\"n\">in_ty</span> <span class=\"bp\">=</span> <span class=\"n\">arg_ty</span> <span class=\"k\">then</span> <span class=\"n\">Succeed</span> <span class=\"n\">out_ty</span>\n            <span class=\"k\">else</span> <span class=\"n\">Fail</span>\n          <span class=\"o\">)</span>\n          <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fail</span>\n        <span class=\"o\">)</span>\n      <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n\n  <span class=\"kd\">end</span> <span class=\"n\">Typecheck</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">Typecheck</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">stlc_terminate</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tast</span> <span class=\"o\">:</span> <span class=\"n\">tast</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n      <span class=\"n\">main</span> <span class=\"n\">ctx</span> <span class=\"n\">tast</span> <span class=\"bp\">=</span> <span class=\"n\">result.Succeed</span> <span class=\"n\">ty</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">,</span>\n      <span class=\"n\">rewrite_n_steps</span> <span class=\"o\">(</span><span class=\"n\">remove_types</span> <span class=\"n\">tast</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Finish</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ctx</span> <span class=\"n\">tast</span> <span class=\"n\">ty</span> <span class=\"n\">success</span>\n    <span class=\"n\">induction</span> <span class=\"n\">tast</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exists</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rename_i</span> <span class=\"n\">f</span> <span class=\"n\">arg</span> <span class=\"n\">f_ih</span> <span class=\"n\">arg_ih</span>\n      <span class=\"k\">have</span> <span class=\"n\">f_ih_r</span> <span class=\"o\">:=</span> <span class=\"n\">f_ih</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"bp\">.</span> <span class=\"gr\">admit</span>\n      <span class=\"bp\">.</span> <span class=\"n\">unfold</span> <span class=\"n\">main</span> <span class=\"n\">at</span> <span class=\"n\">success</span>\n        <span class=\"c1\">-- Attempt 1</span>\n          <span class=\"c1\">-- cases (main ctx arg)</span>\n        <span class=\"c1\">-- Attempt 2</span>\n          <span class=\"c1\">-- let marg := main ctx arg</span>\n          <span class=\"c1\">-- rewrite [marg] at success</span>\n        <span class=\"c1\">-- Attempt 3</span>\n          <span class=\"c1\">-- let marg := main ctx arg</span>\n          <span class=\"c1\">-- have marg_eq : marg = main ctx arg := rfl</span>\n          <span class=\"c1\">-- rewrite [← marg_eq] at success arg_ih</span>\n          <span class=\"c1\">-- cases marg</span>\n        <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Typed</span>\n\n\n<span class=\"c1\">-- environment eval</span>\n<span class=\"c1\">-- inductive eval_step_result : Type</span>\n\n<span class=\"c1\">-- def eval_step</span>\n</code></pre></div>",
        "id": 401110036,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699520813
    },
    {
        "content": "<p>Did I not see someone pointing out <code>cases h : f x</code> to you in another thread?</p>",
        "id": 401111440,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699521215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I have tried many permutations that were pointed to me, I might have missed that one, let me check</p>",
        "id": 401112683,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699521569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <br>\n<del>still the same problem, <code>f x</code> in the hypotheses (<code>main ctx arg</code> in the code) does not get destructed</del><br>\nBut I get an equality relation on it!!! Thanks<br>\nIs this the expected way to do so in Lean4? Looks a bit verbose (comparable to <code>case_eq</code> in Coq), but if it is, I can make-do with it!</p>",
        "id": 401113158,
        "sender_full_name": "Gabriel Alfour",
        "timestamp": 1699521676
    }
]