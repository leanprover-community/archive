[
    {
        "content": "<p>I was expecting to learn how to prove <code>example {x y : ℕ} {h : x + 1 = y + 2} : x &gt; y := sorry</code> from NNG but it looks like NNG defines <code>&gt;</code> differently from the Lean 3 standard library. Any idea?</p>",
        "id": 199278017,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590876234
    },
    {
        "content": "<p><code>by omega</code> or <code>by linarith</code> should work.</p>",
        "id": 199278790,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590877453
    },
    {
        "content": "<p>hum, not directly, and both are in mathlib, right?</p>",
        "id": 199278928,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590877716
    },
    {
        "content": "<p>why are you asking about mathlib? did you try one of those proofs and it told you it couldn't find the name?</p>",
        "id": 199279378,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590878523
    },
    {
        "content": "<p>yes. Lean 3.</p>",
        "id": 199279419,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590878608
    },
    {
        "content": "<p>are you able to import anything from mathlib?</p>",
        "id": 199279468,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590878651
    },
    {
        "content": "<p>are you in a project where you installed mathlib using <code>leanproject</code>?</p>",
        "id": 199279475,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590878675
    },
    {
        "content": "<p>no, I am trying to prove without mathlib, only using Lean 3 standard definitions.</p>",
        "id": 199279493,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590878755
    },
    {
        "content": "<p>oh, okay, I think that was not clear</p>",
        "id": 199279538,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590878775
    },
    {
        "content": "<p>well you could start by unfolding the definition of <code>&lt;</code></p>",
        "id": 199279545,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590878799
    },
    {
        "content": "<p>the NNG-style proof would probably be an induction</p>",
        "id": 199279546,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590878810
    },
    {
        "content": "<p>(I don't know why anyone would want to do math in lean without mathlib; if you give more context maybe we can be more helpful)</p>",
        "id": 199279554,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590878836
    },
    {
        "content": "<p>I probably don't use <code>&gt;</code> at all in NNG -- all the lemmas are for <code>&lt;</code> and <code>&lt;=</code>. I can believe I defined it differently -- I played around with several definitions and tested them on undergraduates before deciding which one to go with. You can just switch notation off and unfold if you want to see the definition you're playing with.</p>",
        "id": 199279690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590879062
    },
    {
        "content": "<p>But there will probably be a lemma of the form y &lt; x iff y+1 le x and then another one saying you can cancel +1 in an inequality. These both sound like natural lemmas so they'll be in...oh, they might be in mathlib. I have no idea what's in core lean. Core lean wasn't designed for this kind of question</p>",
        "id": 199279756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590879175
    },
    {
        "content": "<p>in fact we're doing our best to take math out of core lean</p>",
        "id": 199279771,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590879216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>  The example looks very simple and my goal is to understand the details. surely mathlb provides tactics like omega and linarith but I want to explore the basics here. Actually, the example came from a very simple exercise that I am trying to show how to formalize in Lean. See the balances in <a href=\"https://www.youtube.com/watch?v=4JpFWfkAtHY&amp;t=2088s\">https://www.youtube.com/watch?v=4JpFWfkAtHY&amp;t=2088s</a> (video in Portuguese).</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4JpFWfkAtHY\" href=\"https://www.youtube.com/watch?v=4JpFWfkAtHY&amp;t=2088s\"><img src=\"https://i.ytimg.com/vi/4JpFWfkAtHY/default.jpg\"></a></div>",
        "id": 199279828,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590879291
    },
    {
        "content": "<p>sure, I think it's fine to not want to use a high-powered tactic for this</p>",
        "id": 199279837,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590879316
    },
    {
        "content": "<p>but not using mathlib is silly</p>",
        "id": 199279838,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590879323
    },
    {
        "content": "<p>If you don't import data.nat.basic from mathlib then you will probably be missing a bunch of random lemmas though</p>",
        "id": 199279842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590879337
    },
    {
        "content": "<p>So you might end up having to reprove them all by induction</p>",
        "id": 199279847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590879354
    },
    {
        "content": "<p>Files like data.nat.basic used to be in core lean before they dumped the maths out into mathlib</p>",
        "id": 199279952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590879489
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_le</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_le_add_iff_le_right</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199280121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590879787
    },
    {
        "content": "<p>Enough of what I wanted was in core</p>",
        "id": 199280123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590879805
    },
    {
        "content": "<p>I use the fact that y&gt;x is definitionally x&lt;y</p>",
        "id": 199280247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590879997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/inequality/near/199279838\">said</a>:</p>\n<blockquote>\n<p>but not using mathlib is silly</p>\n</blockquote>\n<p>sure, if my goal was something more complex and I had some inequalities on my way.. I can understand the value of mathlib.  But that is not the case, it is much more basic stuff that I want to explore.</p>",
        "id": 199280494,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590880516
    },
    {
        "content": "<p>i still don't really understand your goals. what if core lean literally didn't have a definition of the natural numbers? would you still want to avoid mathlib?</p>",
        "id": 199280753,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590880987
    },
    {
        "content": "<p>thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, clear and direct solution as always! ;-)</p>",
        "id": 199282084,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590883661
    },
    {
        "content": "<p>No <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, it is all about the level of abstraction I am focusing on? If Lean didn't have any natural numbers definitions, I guess for that particular problem I would not be able to avoid mathlib. It is not very different from programming and when we believe that it is worth to depend on a library or not. But you are right I should start using mathlib to have also a clue about what it can provide.</p>",
        "id": 199282306,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590884100
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199282837,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590885237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/inequality/near/199280247\">said</a>:</p>\n<blockquote>\n<p>I use the fact that y&gt;x is definitionally x&lt;y</p>\n</blockquote>\n<p>Where is that?</p>",
        "id": 199282930,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590885379
    },
    {
        "content": "<p>I think Kevin just means that he proves <code>x &lt; y</code> and Lean accepts it as a proof of <code>y &gt; x</code>.</p>",
        "id": 199282996,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590885540
    },
    {
        "content": "<p>I found in the core.lean</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">gt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"bp\">...</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">&gt;</span>        <span class=\"o\">:=</span> <span class=\"n\">gt</span>\n</code></pre></div>\n\n\n<p>maybe this is  the definition of <code>y &gt; x</code> as <code>gt y x  := has_lt.lt y x</code></p>",
        "id": 199283476,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1590886509
    },
    {
        "content": "<p>thanks, I think I understand your goal now. probably you want to look at the proofs of the lemmas that kevin invoked in his proof?</p>",
        "id": 199283771,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590887074
    },
    {
        "content": "<p>in mathlib we just try to avoid using <code>&gt;</code> in our theorem statements as much as posisble</p>",
        "id": 199283784,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590887128
    },
    {
        "content": "<p>How can I get  a \\neq p  in a hypothesis h  (or a goal for that matter)  rewritten as p \\neq a?</p>",
        "id": 203681651,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1594621444
    },
    {
        "content": "<p><code>replace h := h.symm</code></p>",
        "id": 203681657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594621464
    },
    {
        "content": "<p><code>apply ne.symm</code></p>",
        "id": 203681666,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594621481
    },
    {
        "content": "<p>ah.   I tried among other things neq.sym.... Thank you</p>",
        "id": 203681684,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1594621510
    },
    {
        "content": "<p>this reminds me to PR the list of names of symbols</p>",
        "id": 203681754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594621568
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/93\">https://github.com/leanprover-community/leanprover-community.github.io/pull/93</a></p>",
        "id": 203681987,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594621955
    },
    {
        "content": "<p>a more tactic-ful answer:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">symmetry</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203703097,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594639398
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_lemma4</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"n\">epos</span> <span class=\"n\">ele1</span> <span class=\"n\">xlt</span> <span class=\"n\">ylt</span>\n  <span class=\"k\">calc</span>\n    <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">abs_mul</span><span class=\"o\">]</span> <span class=\"c1\">--绝对值的乘法</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Does anyone know how this code should be written next?</p>",
        "id": 377205374,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689926298
    },
    {
        "content": "<p>Did you try <code>gcongr</code>?</p>",
        "id": 377208188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689926934
    },
    {
        "content": "<p>or <code>apply?</code></p>",
        "id": 377208243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689926946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/inequality/near/377208188\">said</a>:</p>\n<blockquote>\n<p>Did you try <code>gcongr</code>?</p>\n</blockquote>\n<p>gcongr does not apply to this problem, I used apply? but did not get the appropriate tactic</p>",
        "id": 377208743,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689927068
    },
    {
        "content": "<p>Note there are lemmas mentioned in the text right after this exercise.</p>",
        "id": 377208746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689927069
    },
    {
        "content": "<p>And of course if you are really stuck and simply want the solution then you can find it in the solutions folder.</p>",
        "id": 377209045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689927144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/inequality/near/377208746\">said</a>:</p>\n<blockquote>\n<p>Note there are lemmas mentioned in the text right after this exercise.</p>\n</blockquote>\n<p>Thank you, I only followed the previous part at first!</p>",
        "id": 377209113,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689927166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/inequality/near/377209045\">said</a>:</p>\n<blockquote>\n<p>And of course if you are really stuck and simply want the solution then you can find it in the solutions folder.</p>\n</blockquote>\n<p>Can I ask where I can find the 'solutions folder', which may be of great help to my future studies.</p>",
        "id": 377209437,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689927236
    },
    {
        "content": "<p>I'm sorry we have the bad habit of sometimes putting explanations after the exercise statement. We should go through the whole text and systematically fix that. Until we do that you should make sure to check the sentence after each exercise before working on an exercise.</p>",
        "id": 377209632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689927273
    },
    {
        "content": "<p>If you cloned the repository at <a href=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a> then each chapter folder has a solution subfolder.</p>",
        "id": 377209805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689927324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/inequality/near/377209805\">said</a>:</p>\n<blockquote>\n<p>If you cloned the repository at <a href=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a> then each chapter folder has a solution subfolder.</p>\n</blockquote>\n<p>Thank you, this really helped me a lot!</p>",
        "id": 377210081,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689927401
    },
    {
        "content": "<p>But actually it seems this exercise is missing from the solution file <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> I'll take a look to understand what happened.</p>",
        "id": 377210094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689927408
    },
    {
        "content": "<p>The missing solution now appears in <a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/master/MIL/C03_Logic/solutions/Solutions_S01_Implication_and_the_Universal_Quantifier.lean\">https://github.com/leanprover-community/mathematics_in_lean/blob/master/MIL/C03_Logic/solutions/Solutions_S01_Implication_and_the_Universal_Quantifier.lean</a></p>",
        "id": 377221314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689929850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/inequality/near/377221314\">said</a>:</p>\n<blockquote>\n<p>The missing solution now appears in <a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/master/MIL/C03_Logic/solutions/Solutions_S01_Implication_and_the_Universal_Quantifier.lean\">https://github.com/leanprover-community/mathematics_in_lean/blob/master/MIL/C03_Logic/solutions/Solutions_S01_Implication_and_the_Universal_Quantifier.lean</a></p>\n</blockquote>\n<p>Thank you very much!</p>",
        "id": 377470863,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1689992770
    }
]