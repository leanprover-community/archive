[
    {
        "content": "<p>Given a successful proof \"by infer_instance\", how can I find out where this instance is defined? (In my case, I tried reading the relevant files and searching the API docs, both not successfully.)</p>\n<p>Case in point, I'd like to understand <em>why</em> this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">LocallyCompactSpace</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>and this does not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyCompactSpace</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"c1\">-- error: failed to synthesize instance LocallyCompactSpace E</span>\n    <span class=\"n\">LocallyCompactSpace</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>More specifically, where I'd start to add such an instance.</p>",
        "id": 397818082,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1697866362
    },
    {
        "content": "<p>Use <code>#synth</code> instead.</p>",
        "id": 397818103,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1697866382
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">LocallyCompactSpace</span> <span class=\"n\">E</span>  <span class=\"c1\">-- tells you what instance it finds</span>\n</code></pre></div>",
        "id": 397818148,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1697866437
    },
    {
        "content": "<p>Thank you, works like a charm :-)</p>",
        "id": 397820463,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1697868294
    },
    {
        "content": "<p>You might also want to read 7. Hierarchies in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> which teaches a few other helpful tricks like <code>set_option trace.Meta.synthInstance true</code>, <code>set_option synthInstance.checkSynthOrder false</code>, <code>check Something.mk</code>, <code>whatsnew in</code> etc.</p>\n<p>Particularly, <code>set_option trace.Meta.synthInstance true</code> is very helpful when you are working inside your lemma, there would be blue squiggles under where Lean synthesize instances so you don't have to figure out how to tell <code>#synth</code> what you are working with in a different way.</p>",
        "id": 397821389,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697868975
    }
]