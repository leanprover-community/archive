[
    {
        "content": "<p>the code (from <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> 's book):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">firstThirdFifthSeventh</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"mi\">6</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">firstThirdFifthSeventh'</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">first</span> <span class=\"bp\">←</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">third</span> <span class=\"bp\">←</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"mi\">2</span>\n  <span class=\"k\">let</span> <span class=\"n\">fifth</span> <span class=\"bp\">←</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"mi\">4</span>\n  <span class=\"k\">let</span> <span class=\"n\">seventh</span> <span class=\"bp\">←</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"mi\">6</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">third</span><span class=\"o\">,</span> <span class=\"n\">fifth</span><span class=\"o\">,</span> <span class=\"n\">seventh</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">firstThirdFifthSeventhEq</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">firstThirdFifthSeventh</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span>  <span class=\"bp\">=</span> <span class=\"n\">firstThirdFifthSeventh'</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10163</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10164</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10165</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10166</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10185</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10186</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10163</span> <span class=\"bp\">?</span><span class=\"n\">u.10164</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10165</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10166</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10163</span> <span class=\"bp\">?</span><span class=\"n\">u.10164</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10165</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10166</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10186</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10185</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10186</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10186</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10185</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10186</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10186</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10185</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10186</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10186</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10185</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10186</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10185</span> <span class=\"bp\">?</span><span class=\"n\">u.10186</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10187</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10188</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10163</span> <span class=\"bp\">?</span><span class=\"n\">u.10164</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10165</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.10166</span> <span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>i don't get the failure to unify since these impls are basically the same</p>",
        "id": 404197018,
        "sender_full_name": "Alok Singh (S1'17)",
        "timestamp": 1700972293
    },
    {
        "content": "<p>One way to make the error go away is to make <code>α</code> a type parameter by putting <code>{α : Type*}</code> or something like that in the declaration of each function, instead of letting it be auto-implicit.</p>",
        "id": 404199824,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700974763
    },
    {
        "content": "<p>Oh yikes, autoImplicit uses <code>Type _</code> not <code>Type*</code>?</p>",
        "id": 404228421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700991406
    },
    {
        "content": "<p>I'd guess so, since * is a mathlib thing as far as I understand</p>",
        "id": 404233128,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700993884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337670\">@Alok Singh (S1'17)</span> The issue here is that Lean infers a very general type for the two functions behind the scenes, and then when they're used together, they're too general for Lean to realize that they fit together.</p>\n<p>The simplest thing that gets you unstuck without using lots of features beyond where you are in the book is to constrain the type of <code>m</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">firstThirdFifthSeventhEq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">firstThirdFifthSeventh</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span>  <span class=\"bp\">=</span> <span class=\"n\">firstThirdFifthSeventh'</span> <span class=\"n\">lookup</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 404340838,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1701065160
    },
    {
        "content": "<p>After you make it past section 6.5 on universes, then this next bit may make sense. If not, ask me and I'll do my best.</p>\n<p>Lean's product type is polymorphic over universes, so it has the type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Prod.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In each of those type signatures, it's nested three times, for a total of four universe parameters. The <code>Monad</code> class also has two parameters - one is fixed to be the output universe of the outermost <code>Prod</code>, but the other is left unconstrained. This means that the two function signatures have fully-explicit declarations like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">firstThirdFifthSeventh.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_5</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_3</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_4</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_3</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_4</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">lookup</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The equality type requires that both of its arguments be in the same universe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"n\">a</span><span class=\"bp\">¹✝</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Thus, Lean needs to find universe levels that make these two piles of <code>max</code> equal. I'm actually not sure why it doesn't here - I'll go follow up and see what I can figure out.</p>",
        "id": 404345117,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1701067497
    },
    {
        "content": "<p>it's because <code>max</code> is not injective and lean is conservative about unifying those expressions</p>",
        "id": 404348904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701069286
    },
    {
        "content": "<p>Right :-)</p>",
        "id": 404363213,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1701075337
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"337670\">@Alok Singh (S1'17)</span> - to unpack what's going on is that we can't conclude that <code>max a b = max c d</code> implies <code>a = c</code> or <code>b = d</code>. This means that the system needs help.</p>\n<p>The error message could certainly do with some work.</p>",
        "id": 404363440,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1701075415
    },
    {
        "content": "<p>Thanks all</p>",
        "id": 404451397,
        "sender_full_name": "Alok Singh (S1'17)",
        "timestamp": 1701103765
    }
]