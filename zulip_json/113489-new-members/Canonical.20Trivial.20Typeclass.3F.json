[
    {
        "content": "<p>I'm writing something that is generic over typeclasses. Is there a Canonical Trivial Typeclass that I can use as the default? Something like: <code>class Any (_: Type u)</code>?</p>",
        "id": 359665076,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1684503656
    },
    {
        "content": "<p>Generalizing over type classes doesn't really work very well in lean; is this perhaps an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem?</p>",
        "id": 359667405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684504222
    },
    {
        "content": "<p>It's for <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Restricted.20Monads\">#Is there code for X? &gt; Restricted Monads</a>.</p>",
        "id": 359667923,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1684504345
    },
    {
        "content": "<p>In what way does generalizing over type classes not work well?</p>",
        "id": 359668160,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1684504403
    },
    {
        "content": "<p>Well, your generalization won't work for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_ring\">docs#star_ring</a> for instance</p>",
        "id": 359673689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684505456
    },
    {
        "content": "<p>Because it has too many arguments</p>",
        "id": 359673736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684505463
    },
    {
        "content": "<p>I'm fine with requiring a shim that uncurries the typeclasses.</p>",
        "id": 359675217,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1684505750
    },
    {
        "content": "<p>At that point you could consider uncurrying the typeclasses elsewhere too, and bundle them in the types themselves</p>",
        "id": 359681307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684506969
    },
    {
        "content": "<p>That's what things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Group\">docs#Group</a> are</p>",
        "id": 359681361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684506981
    },
    {
        "content": "<p>I see. I can give that a try.</p>",
        "id": 359688343,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1684508417
    },
    {
        "content": "<p>That pretty much amounts to what Scott suggested in the other thread, of course...</p>",
        "id": 359694598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684509670
    }
]