[
    {
        "content": "<p>Why is one simp insufficient to prove this statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Real.exp</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Differentiable.exp</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>\n<p><code>Differentiable.exp</code> is a simp lemma, so I would have thought simp would automatically invoke it.</p>",
        "id": 397741677,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697818257
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Differentiable.exp#doc\">docs#Differentiable.exp</a> says that <code>Differentiable ℝ fun x =&gt; Real.exp (f x)</code> for all differentiable <code>f</code>, whereas your goal is <code>Differentiable ℝ fun y =&gt; Real.exp y</code> which doesnt have an <code>f</code> in so they are syntactically different. <code>simp</code> only does matching up to syntax, so it won't insert identity functions for instance, which is what we would want to happen implicitly here.<br>\nIn this situation we normally make two lemmas for the library, like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.continuous_exp#doc\">docs#Real.continuous_exp</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.exp#doc\">docs#Continuous.exp</a> one of which is compositional, and one which is just the statement about the literal <code>exp</code> function.</p>",
        "id": 397744983,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697819747
    },
    {
        "content": "<p>One thing you could do in this particular example is write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">Differentiable.exp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but its hard to know that this would be needed without first writing the proof you wrote. Ideally we will at some point have a <code>differentiability</code> tactic that automates these proofs in the same way that we have <code>continuity</code>, but we don't have it yet.</p>",
        "id": 397745586,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697820019
    },
    {
        "content": "<p>I don't necessarily recommend term mode proofs here, but to exemplify what Alex said about composability,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Real.exp</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">Real.differentiable_exp.add_const</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Real.exp</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">differentiable_id.exp.add_const</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>both work (and the autocomplete is pretty good).</p>",
        "id": 397745834,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697820147
    },
    {
        "content": "<p>I believe the way to create the automation Alex is describing is to use <code>aesop</code> (Automated Extensible Search for Obvious Proofs), like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">apply</span><span class=\"o\">]</span>\n  <span class=\"n\">Differentiable.add</span>\n  <span class=\"n\">Differentiable.exp</span>\n  <span class=\"n\">Real.differentiable_exp</span>\n  <span class=\"n\">differentiable_id</span>\n  <span class=\"n\">differentiable_const</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>\n<p><code>aesop</code> is new to Lean 4, and mathlib is not yet making use of it to its fullest extent. We are still learning some lessons about how to tag lemmas with <code>aesop</code> appropriately. I'm just adding this here to showcase that this kind of automation is possible, and lies in the relatively near future.</p>",
        "id": 397750174,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697822272
    },
    {
        "content": "<p>Should I request permission and PR the differentiability tactic which one gets from shamelessly copying <code>continuity</code> (it does basically what Jireh just showed)? I tried this out recently but the discussion about it <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/395025732\">died</a>. There seemed to be some suboptimal things going on with <code>continuity</code> as well, so maybe one should wait. On the other hand, I'm not sure anyone is working on it (or if people are actually using <code>continuity</code> that much)...</p>",
        "id": 397881863,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1697927968
    },
    {
        "content": "<p>YesI think you should definitely PR a <code>differentiability</code> tactic, that would be great!<br>\nI think these tactics are certainly useful enough to be worth writing (especially if the implementation with aesop is short)</p>",
        "id": 397882233,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697928384
    },
    {
        "content": "<p>Can I have PR-permissions then? GitHub username is \"adomasbaliuka\"</p>",
        "id": 397955984,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1697992049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638715\">@Adomas Baliuka</span> Invite sent!</p>",
        "id": 397957246,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697992574
    }
]