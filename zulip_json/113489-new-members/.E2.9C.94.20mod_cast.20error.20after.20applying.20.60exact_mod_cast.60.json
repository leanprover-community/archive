[
    {
        "content": "<p>After using the tactic <code>exact_mod_cast</code>, I am having a mod_cast error with a mismatch in types, specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mod_cast</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.subNatNat</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>where <code>u : ℕ → ℕ</code>. I am not sure how to proceed. Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">BigOperators</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span> <span class=\"n\">Topology</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">NNReal</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">summable_schlomilch_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">strict_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_succ_diff</span> <span class=\"o\">:</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">summable_schlomilch_iff_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">strict_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_succ_diff</span> <span class=\"o\">:</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">using</span> <span class=\"n\">h_nonneg</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_le_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">NNReal.summable_schlomilch_iff</span> <span class=\"n\">hf</span> <span class=\"n\">h_pos</span> <span class=\"n\">strict_mono</span> <span class=\"n\">h_succ_diff</span>\n</code></pre></div>",
        "id": 400477519,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1699256692
    },
    {
        "content": "<p>For future reference, a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> requires imports. Also, please leave the error in rather than putting it in a comment, so we can see it fail immediately</p>",
        "id": 400481087,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699258508
    },
    {
        "content": "<p>And the definition of <code>succ_diff_bounded</code> seems to be missing</p>",
        "id": 400481114,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699258528
    },
    {
        "content": "<p>my bad. The MWE should be working now.</p>",
        "id": 400481876,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1699258877
    },
    {
        "content": "<p>Hmm, I think the issue is in the not very well behaved subtraction on Nat and NNReal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">BigOperators</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span> <span class=\"n\">Topology</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">NNReal</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">summable_schlomilch_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">strict_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_succ_diff</span> <span class=\"o\">:</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">summable_schlomilch_iff_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">strict_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_succ_diff</span> <span class=\"o\">:</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">using</span> <span class=\"n\">h_nonneg</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_le_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">=</span>  <span class=\"o\">((</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">NNReal.summable_schlomilch_iff</span> <span class=\"n\">hf</span> <span class=\"n\">h_pos</span> <span class=\"n\">strict_mono</span> <span class=\"n\">h_succ_diff</span>\n</code></pre></div>",
        "id": 400485383,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699260452
    },
    {
        "content": "<p>And my substep turns out to be provable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">NNReal</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">summable_schlomilch_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">strict_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_succ_diff</span> <span class=\"o\">:</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">summable_schlomilch_iff_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">strict_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_succ_diff</span> <span class=\"o\">:</span> <span class=\"n\">succ_diff_bounded</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">using</span> <span class=\"n\">h_nonneg</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_le_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">=</span>  <span class=\"o\">((</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">k</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">coe_sub_def</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">max_eq_left</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">NNReal.coe_nat_cast</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">sub_nonneg_of_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">norm_cast</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">strict_mono</span> <span class=\"n\">k.zero_le</span> <span class=\"n\">k.lt_succ_self</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">NNReal.summable_schlomilch_iff</span> <span class=\"n\">hf</span> <span class=\"n\">h_pos</span> <span class=\"n\">strict_mono</span> <span class=\"n\">h_succ_diff</span>\n</code></pre></div>",
        "id": 400486246,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699260827
    },
    {
        "content": "<p>Ah so Lean thinks that the subtraction might cause the term to become negative so it casts it into integer instead? Thank you for the help! Is there anywhere where I can learn to interpret the error messages better?</p>",
        "id": 400488058,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1699261462
    },
    {
        "content": "<p>The issue is that Nat and NNReal use what's called \"truncated subtraction\" - if <code>a &lt; b</code>, then <code>a - b</code> is defined as zero. This means the order of coercions and subtraction matters: if you do <code>2 - 3</code> in NNReal and then coerce to Real, you get 0; if you coerce the 2 and 3 to Real first and then do the subtraction, you get -1. So if you want to move the coercion around, you'll get a proof obligation at some point to show that you're not ending up in this pathological situation</p>",
        "id": 400488991,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699261823
    },
    {
        "content": "<p>(I hope that made some sense)</p>",
        "id": 400489006,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699261830
    },
    {
        "content": "<p>As for reading error messages: the issue here is that <code>exact_mod_cast</code> tries its best to normalize the coercions to make the argument match the goal, but doesn't get there</p>",
        "id": 400489264,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699261928
    },
    {
        "content": "<p>And that's because of the subtraction issue</p>",
        "id": 400489314,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699261957
    },
    {
        "content": "<p>Ah, I see. That made perfect sense! Thanks for the help.</p>",
        "id": 400490753,
        "sender_full_name": "Jeremy Toh",
        "timestamp": 1699262502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649373\">Jeremy Toh</span> has marked this topic as resolved.</p>",
        "id": 400490784,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699262516
    }
]