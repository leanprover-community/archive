[
    {
        "content": "<p>In theorem \"irrational_sqrt\",  See the last line ,</p>\n<ol>\n<li>What does \"simp only [get_multiplicity_self]\" do ?</li>\n<li>Why can't we use \"rw [h6]\"</li>\n<li>Can we use tatic  \"refine' @get_multiplicity_self\" ? </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Algebraic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Int.Basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.NonZeroDivisors</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Rat</span> <span class=\"n\">Real</span> <span class=\"n\">multiplicity</span>\n\n<span class=\"c1\">-- 类似定义“无理数”这个映射 ℝ → Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">reflect1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">set1</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">reflect1</span><span class=\"o\">)</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set1</span>\n  <span class=\"c1\">-- x ∉ Set.range ((↑) : ℚ → ℝ) --可以代替上面的3行</span>\n\n<span class=\"c1\">-- #check Rat.cast</span>\n<span class=\"c1\">-- #check (Irrational)</span>\n\n\n\n<span class=\"c1\">-- 定理描述：x是实数，n是自然数，m、y是整数；</span>\n<span class=\"c1\">-- x的n次方等于m；</span>\n<span class=\"c1\">-- x等于某个y不可能；</span>\n<span class=\"c1\">-- n大于0；</span>\n<span class=\"c1\">---&gt;（推出）</span>\n<span class=\"c1\">-- x是无理数</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_nrt_of_notint_nrt</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxr</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n  <span class=\"o\">:</span> <span class=\"n\">Irrational</span> <span class=\"n\">x</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Irrational</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H_x_In_Rat</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H_x_In_Rat</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">X_Rat</span><span class=\"o\">,</span> <span class=\"n\">X_Rat_CanCastTo_Real</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">X_Rat</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">P</span><span class=\"o\">,</span><span class=\"n\">C</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">symm</span> <span class=\"n\">X_Rat_CanCastTo_Real</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"c1\">-- rintro ⟨⟨N, D, P, C⟩, rfl⟩ -- 这一行可以代替上面4行</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cast_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"k\">have</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_nat_ne_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">P</span>\n  <span class=\"k\">have</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pow_ne_zero</span> <span class=\"n\">n</span> <span class=\"n\">c1</span>\n  <span class=\"c1\">-- have c2 : ((D : ℤ) : ℝ) ^ n ≠ 0 := pow_ne_zero _ c1 -- 写个_，让程序自己猜可以用哪个</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_den'</span><span class=\"o\">,</span> <span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"n\">cast_mk</span><span class=\"o\">,</span> <span class=\"n\">div_pow</span><span class=\"o\">,</span> <span class=\"n\">div_eq_iff_mul_eq</span> <span class=\"n\">c2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Int.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdivn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">set</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n    <span class=\"n\">set</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hxr</span> <span class=\"c1\">-- 加上这两行这样比较好读对于新手的我</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Dvd.intro_left</span> <span class=\"n\">c</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.dvd_natAbs</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.coe_nat_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_nat_dvd</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.pow_dvd_pow_iff</span> <span class=\"n\">hnpos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hdivn</span>\n  <span class=\"k\">have</span> <span class=\"n\">D_eq_one</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.gcd_eq_right</span> <span class=\"n\">hdivn</span><span class=\"o\">,</span> <span class=\"n\">C.gcd_eq_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">P</span> <span class=\"n\">C</span> <span class=\"n\">hxr</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">hdivn</span>\n  <span class=\"c1\">-- obtain rfl : D = 1 := by  --这里可以代替上面的3行</span>\n  <span class=\"c1\">--   rw [← Nat.gcd_eq_right hdivn, C.gcd_eq_one]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">absurd</span> <span class=\"n\">hv</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">symm</span> <span class=\"n\">X_Rat_CanCastTo_Real</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_den'</span><span class=\"o\">,</span><span class=\"n\">D_eq_one</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_one</span><span class=\"o\">,</span> <span class=\"n\">divInt_one</span><span class=\"o\">,</span> <span class=\"n\">cast_coe_int</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"bp\">↑</span><span class=\"n\">N</span>\n  <span class=\"c1\">-- refine' hv ⟨N, _⟩ --这里可以代替上面的6行</span>\n  <span class=\"c1\">-- exact this</span>\n  <span class=\"n\">done</span>\n\n\n\n<span class=\"c1\">-- 定理描述：n、p是自然数，m是整数，x是实数</span>\n<span class=\"c1\">-- m不等于0</span>\n<span class=\"c1\">-- p是素数</span>\n<span class=\"c1\">-- x的n次方等于m</span>\n<span class=\"c1\">-- ??一个和最大整除性相关的命题,准确来说，是这样的假设：N模n不等于0。（N从哪里来呢？p^N能整除m，N就是满足条件的最大的那个。）</span>\n<span class=\"c1\">-- --&gt;推出</span>\n<span class=\"c1\">-- x是无理数</span>\n\n<span class=\"c1\">-- def hhh01 {p:ℕ} : Prime p := sorry</span>\n<span class=\"c1\">-- def hhh02 (p:ℕ)(m : ℤ):Int.natAbs p ≠ 1 ∧ m ≠ 0 := sorry</span>\n<span class=\"c1\">-- def hhh03 (p : ℕ)(m : ℤ):=multiplicity (p : ℤ) m</span>\n\n<span class=\"c1\">-- #check (hhh03 3 18) -- PartENat</span>\n<span class=\"c1\">-- #check (hhh02 3 18) -- Int.natAbs ↑3 ≠ 1 ∧ 18 ≠ 0</span>\n<span class=\"c1\">-- #check finite_int_iff.2 (hhh02 3 18) -- Prop</span>\n<span class=\"c1\">-- #check Part.get (hhh03 3 18) ( finite_int_iff.2 (hhh02 3 18) ) --  ℕ</span>\n<span class=\"c1\">-- #eval Part.get (hhh03 3 18) ( finite_int_iff.2 (hhh02 3 18) ) -- 2</span>\n<span class=\"c1\">-- Int.natAbs ?m.3176 ≠ 1 ∧ ?m.3177 ≠ 0 → multiplicity.Finite ?m.3176 ?m.3177</span>\n\n<span class=\"c1\">-- #check multiplicity</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_nrt_of_n_not_dvd_multiplicity</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">hxr</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n    <span class=\"o\">:</span><span class=\"n\">Irrational</span> <span class=\"n\">x</span>\n\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Nat.eq_zero_or_pos</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">hnpos</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">h1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_one</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n    <span class=\"n\">subst</span> <span class=\"n\">hxr</span>\n    <span class=\"c1\">-- simp only [hxr] at hv</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">Int.coe_nat_dvd.1</span> <span class=\"n\">hp.1.not_dvd_one</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">isUnit_iff_dvd_one.1</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicity.one_right</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"c1\">--这一行不太懂，和Part有关。先普通意义上理解hv可推出0≠ 0</span>\n    <span class=\"c1\">-- simp [hxr,  -- 这个可以代替上面的6行</span>\n    <span class=\"c1\">--   multiplicity.one_right (mt isUnit_iff_dvd_one.1 (mt Int.coe_nat_dvd.1 hp.1.not_dvd_one)),</span>\n    <span class=\"c1\">--   Nat.zero_mod] at hv</span>\n  <span class=\"c1\">-- have h4 : irrational_nrt_of_notint_nrt _ _ hxr _ hnpos</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">irrational_nrt_of_notint_nrt</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hxr</span> <span class=\"n\">_</span> <span class=\"n\">hnpos</span>\n  <span class=\"c1\">-- 如果之前有相同结论的命题，可以将这个命题的已满足的参数填进去，</span>\n  <span class=\"c1\">-- 还不满足的用下划线“_”代替，这些下划线代表内容就变成了还须证明的目标，lean自动修改了最终的goal</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"n\">subst</span> <span class=\"n\">m</span>\n  <span class=\"c1\">-- have h4 : Prop := zero_pow hnpos</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y_eq_zero</span>\n    <span class=\"n\">subst</span> <span class=\"n\">y_eq_zero</span>\n    <span class=\"c1\">-- rintro rfl --可以代替上面的2行</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hm</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- 丢两个互相相反的命题，得到False</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hnpos</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.prime_iff_prime_int.1</span> <span class=\"n\">hp.1</span><span class=\"o\">)</span>\n  <span class=\"n\">set</span> <span class=\"n\">h7</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicity.pow'</span> <span class=\"n\">h6</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"n\">h5</span><span class=\"o\">⟩)</span>\n  <span class=\"c1\">-- 这个讲的大概是如果p的M次方整除y，M一开始最大取的是m₁。</span>\n  <span class=\"c1\">-- 当y变大成y的n次方后，M最大可以取就变成了m₁*n</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">h7</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_mod_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hv</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- hv: 0 ≠ 0</span>\n  <span class=\"n\">done</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_sqrt_of_multiplicity_odd</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">Hpv</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n    <span class=\"o\">:</span><span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:=</span> <span class=\"n\">Ne.symm</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:=</span> <span class=\"n\">sq_sqrt</span> <span class=\"o\">(</span><span class=\"n\">Int.cast_nonneg.2</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n    <span class=\"c1\">-- have h2:= sq_sqrt (Int.cast_nonneg.2 &lt;| le_of_lt hm) -- f &lt;| g &lt;| x被解释为f (g x)而不是(f g) x</span>\n    <span class=\"n\">refine'</span> <span class=\"bp\">@</span><span class=\"n\">irrational_nrt_of_n_not_dvd_multiplicity</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"n\">_</span> <span class=\"n\">h1</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">h2</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Hpv</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span>\n    <span class=\"c1\">-- exact @irrational_nrt_of_n_not_dvd_multiplicity _ 2 _ h1 p hp h2 (by rw [Hpv]; exact one_ne_zero)</span>\n    <span class=\"c1\">--这个代替上面的3行</span>\n    <span class=\"n\">done</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_sqrt</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"o\">:</span> <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:=</span> <span class=\"n\">Int.coe_nat_pos.2</span> <span class=\"n\">hp.pos</span>\n  <span class=\"c1\">-- exact @irrational_sqrt_of_multiplicity_odd p h1 p ⟨hp⟩ &lt;| by</span>\n  <span class=\"c1\">--   simp [multiplicity.multiplicity_self</span>\n  <span class=\"c1\">--     (mt isUnit_iff_dvd_one.1 (mt Int.coe_nat_dvd.1 hp.not_dvd_one))]</span>\n  <span class=\"n\">refine'</span> <span class=\"bp\">@</span><span class=\"n\">irrational_sqrt_of_multiplicity_odd</span> <span class=\"n\">p</span> <span class=\"n\">h1</span> <span class=\"n\">p</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">⟩</span> <span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">Int.coe_nat_dvd.1</span> <span class=\"n\">hp.not_dvd_one</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">isUnit_iff_dvd_one.1</span> <span class=\"n\">h2</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicity.multiplicity_self</span> <span class=\"n\">h3</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.Prime.ne_zero</span> <span class=\"n\">hp</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.Prime.multiplicity_self</span> <span class=\"n\">hp</span>\n  <span class=\"c1\">-- rw [h6]</span>\n  <span class=\"c1\">-- refine' @get_multiplicity_self ℕ  _</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get_multiplicity_self</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 404565668,
        "sender_full_name": "chenjulang",
        "timestamp": 1701157913
    },
    {
        "content": "<p>Wating For Help......</p>",
        "id": 404565832,
        "sender_full_name": "chenjulang",
        "timestamp": 1701157983
    },
    {
        "content": "<p>For (2), this is because writing <code>↑</code> directly without explaining what you're coercing to is risky. In the infoview after the <code>have h6</code>, you'll see there's no coercion left in your hypothesis</p>",
        "id": 404569085,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701159353
    },
    {
        "content": "<p>Instead, to match what's in your goal, you'd write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 404569274,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701159431
    },
    {
        "content": "<p>You still can't use <code>rw</code> because of dependent type theory reasons someone else can explain better, but at that point <code>simp only [h6]</code> makes progress</p>",
        "id": 404569494,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701159523
    },
    {
        "content": "<p>Thank you very much</p>",
        "id": 404579267,
        "sender_full_name": "chenjulang",
        "timestamp": 1701163298
    },
    {
        "content": "<p>I will have a try</p>",
        "id": 404579326,
        "sender_full_name": "chenjulang",
        "timestamp": 1701163317
    },
    {
        "content": "<p>Get it! Now I Can understand very step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Algebraic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Int.Basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.NonZeroDivisors</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Rat</span> <span class=\"n\">Real</span> <span class=\"n\">multiplicity</span>\n\n<span class=\"c1\">-- 类似定义“无理数”这个映射 ℝ → Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">reflect1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">set1</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">reflect1</span><span class=\"o\">)</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set1</span>\n  <span class=\"c1\">-- x ∉ Set.range ((↑) : ℚ → ℝ) --可以代替上面的3行</span>\n\n<span class=\"c1\">-- #check Rat.cast</span>\n<span class=\"c1\">-- #check (Irrational)</span>\n\n\n\n<span class=\"c1\">-- 定理描述：x是实数，n是自然数，m、y是整数；</span>\n<span class=\"c1\">-- x的n次方等于m；</span>\n<span class=\"c1\">-- x等于某个y不可能；</span>\n<span class=\"c1\">-- n大于0；</span>\n<span class=\"c1\">---&gt;（推出）</span>\n<span class=\"c1\">-- x是无理数</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_nrt_of_notint_nrt</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxr</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n  <span class=\"o\">:</span> <span class=\"n\">Irrational</span> <span class=\"n\">x</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Irrational</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H_x_In_Rat</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H_x_In_Rat</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">X_Rat</span><span class=\"o\">,</span> <span class=\"n\">X_Rat_CanCastTo_Real</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">X_Rat</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">,</span><span class=\"n\">P</span><span class=\"o\">,</span><span class=\"n\">C</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">symm</span> <span class=\"n\">X_Rat_CanCastTo_Real</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"c1\">-- rintro ⟨⟨N, D, P, C⟩, rfl⟩ -- 这一行可以代替上面4行</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cast_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"k\">have</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_nat_ne_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">P</span>\n  <span class=\"k\">have</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pow_ne_zero</span> <span class=\"n\">n</span> <span class=\"n\">c1</span>\n  <span class=\"c1\">-- have c2 : ((D : ℤ) : ℝ) ^ n ≠ 0 := pow_ne_zero _ c1 -- 写个_，让程序自己猜可以用哪个</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_den'</span><span class=\"o\">,</span> <span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"n\">cast_mk</span><span class=\"o\">,</span> <span class=\"n\">div_pow</span><span class=\"o\">,</span> <span class=\"n\">div_eq_iff_mul_eq</span> <span class=\"n\">c2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Int.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdivn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">set</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n    <span class=\"n\">set</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hxr</span> <span class=\"c1\">-- 加上这两行这样比较好读对于新手的我</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Dvd.intro_left</span> <span class=\"n\">c</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.dvd_natAbs</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.coe_nat_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_nat_dvd</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.pow_dvd_pow_iff</span> <span class=\"n\">hnpos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hdivn</span>\n  <span class=\"k\">have</span> <span class=\"n\">D_eq_one</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.gcd_eq_right</span> <span class=\"n\">hdivn</span><span class=\"o\">,</span> <span class=\"n\">C.gcd_eq_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">D_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">P</span> <span class=\"n\">C</span> <span class=\"n\">hxr</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">hdivn</span>\n  <span class=\"c1\">-- obtain rfl : D = 1 := by  --这里可以代替上面的3行</span>\n  <span class=\"c1\">--   rw [← Nat.gcd_eq_right hdivn, C.gcd_eq_one]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">absurd</span> <span class=\"n\">hv</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">symm</span> <span class=\"n\">X_Rat_CanCastTo_Real</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">num_den'</span><span class=\"o\">,</span><span class=\"n\">D_eq_one</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat_one</span><span class=\"o\">,</span> <span class=\"n\">divInt_one</span><span class=\"o\">,</span> <span class=\"n\">cast_coe_int</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"bp\">↑</span><span class=\"n\">N</span>\n  <span class=\"c1\">-- refine' hv ⟨N, _⟩ --这里可以代替上面的6行</span>\n  <span class=\"c1\">-- exact this</span>\n  <span class=\"n\">done</span>\n\n\n\n<span class=\"c1\">-- 定理描述：n、p是自然数，m是整数，x是实数</span>\n<span class=\"c1\">-- m不等于0</span>\n<span class=\"c1\">-- p是素数</span>\n<span class=\"c1\">-- x的n次方等于m</span>\n<span class=\"c1\">-- ??一个和最大整除性相关的命题,准确来说，是这样的假设：N模n不等于0。（N从哪里来呢？p^N能整除m，N就是满足条件的最大的那个。）</span>\n<span class=\"c1\">-- --&gt;推出</span>\n<span class=\"c1\">-- x是无理数</span>\n\n<span class=\"c1\">-- def hhh01 {p:ℕ} : Prime p := sorry</span>\n<span class=\"c1\">-- def hhh02 (p:ℕ)(m : ℤ):Int.natAbs p ≠ 1 ∧ m ≠ 0 := sorry</span>\n<span class=\"c1\">-- def hhh03 (p : ℕ)(m : ℤ):=multiplicity (p : ℤ) m</span>\n\n<span class=\"c1\">-- #check (hhh03 3 18) -- PartENat</span>\n<span class=\"c1\">-- #check (hhh02 3 18) -- Int.natAbs ↑3 ≠ 1 ∧ 18 ≠ 0</span>\n<span class=\"c1\">-- #check finite_int_iff.2 (hhh02 3 18) -- Prop</span>\n<span class=\"c1\">-- #check Part.get (hhh03 3 18) ( finite_int_iff.2 (hhh02 3 18) ) --  ℕ</span>\n<span class=\"c1\">-- #eval Part.get (hhh03 3 18) ( finite_int_iff.2 (hhh02 3 18) ) -- 2</span>\n<span class=\"c1\">-- Int.natAbs ?m.3176 ≠ 1 ∧ ?m.3177 ≠ 0 → multiplicity.Finite ?m.3176 ?m.3177</span>\n\n<span class=\"c1\">-- #check multiplicity</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_nrt_of_n_not_dvd_multiplicity</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">hxr</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n    <span class=\"o\">:</span><span class=\"n\">Irrational</span> <span class=\"n\">x</span>\n\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Nat.eq_zero_or_pos</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">hnpos</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">h1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_one</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n    <span class=\"n\">subst</span> <span class=\"n\">hxr</span>\n    <span class=\"c1\">-- simp only [hxr] at hv</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">Int.coe_nat_dvd.1</span> <span class=\"n\">hp.1.not_dvd_one</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">isUnit_iff_dvd_one.1</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicity.one_right</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"c1\">--这一行不太懂，和Part有关。先普通意义上理解hv可推出0≠ 0</span>\n    <span class=\"c1\">-- simp [hxr,  -- 这个可以代替上面的6行</span>\n    <span class=\"c1\">--   multiplicity.one_right (mt isUnit_iff_dvd_one.1 (mt Int.coe_nat_dvd.1 hp.1.not_dvd_one)),</span>\n    <span class=\"c1\">--   Nat.zero_mod] at hv</span>\n  <span class=\"c1\">-- have h4 : irrational_nrt_of_notint_nrt _ _ hxr _ hnpos</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">irrational_nrt_of_notint_nrt</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hxr</span> <span class=\"n\">_</span> <span class=\"n\">hnpos</span>\n  <span class=\"c1\">-- 如果之前有相同结论的命题，可以将这个命题的已满足的参数填进去，</span>\n  <span class=\"c1\">-- 还不满足的用下划线“_”代替，这些下划线代表内容就变成了还须证明的目标，lean自动修改了最终的goal</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.cast_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxr</span>\n  <span class=\"n\">subst</span> <span class=\"n\">m</span>\n  <span class=\"c1\">-- have h4 : Prop := zero_pow hnpos</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y_eq_zero</span>\n    <span class=\"n\">subst</span> <span class=\"n\">y_eq_zero</span>\n    <span class=\"c1\">-- rintro rfl --可以代替上面的2行</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hm</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- 丢两个互相相反的命题，得到False</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hnpos</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.prime_iff_prime_int.1</span> <span class=\"n\">hp.1</span><span class=\"o\">)</span>\n  <span class=\"n\">set</span> <span class=\"n\">h7</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicity.pow'</span> <span class=\"n\">h6</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"n\">h5</span><span class=\"o\">⟩)</span>\n  <span class=\"c1\">-- 这个讲的大概是如果p的M次方整除y，M一开始最大取的是m₁。</span>\n  <span class=\"c1\">-- 当y变大成y的n次方后，M最大可以取就变成了m₁*n</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">h7</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_mod_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hv</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hv</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- hv: 0 ≠ 0</span>\n  <span class=\"n\">done</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_sqrt_of_multiplicity_odd</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">Hpv</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">finite_int_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hp.1.ne_one</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n    <span class=\"o\">:</span><span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:=</span> <span class=\"n\">Ne.symm</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:=</span> <span class=\"n\">sq_sqrt</span> <span class=\"o\">(</span><span class=\"n\">Int.cast_nonneg.2</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n    <span class=\"c1\">-- have h2:= sq_sqrt (Int.cast_nonneg.2 &lt;| le_of_lt hm) -- f &lt;| g &lt;| x被解释为f (g x)而不是(f g) x</span>\n    <span class=\"n\">refine'</span> <span class=\"bp\">@</span><span class=\"n\">irrational_nrt_of_n_not_dvd_multiplicity</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"n\">_</span> <span class=\"n\">h1</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">h2</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Hpv</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span>\n    <span class=\"c1\">-- exact @irrational_nrt_of_n_not_dvd_multiplicity _ 2 _ h1 p hp h2 (by rw [Hpv]; exact one_ne_zero)</span>\n    <span class=\"c1\">--这个代替上面的3行</span>\n    <span class=\"n\">done</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irrational_sqrt</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"o\">:</span> <span class=\"n\">Irrational</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:=</span> <span class=\"n\">Int.coe_nat_pos.2</span> <span class=\"n\">hp.pos</span>\n  <span class=\"c1\">-- exact @irrational_sqrt_of_multiplicity_odd p h1 p ⟨hp⟩ &lt;| by</span>\n  <span class=\"c1\">--   simp [multiplicity.multiplicity_self</span>\n  <span class=\"c1\">--     (mt isUnit_iff_dvd_one.1 (mt Int.coe_nat_dvd.1 hp.not_dvd_one))]</span>\n  <span class=\"n\">refine'</span> <span class=\"bp\">@</span><span class=\"n\">irrational_sqrt_of_multiplicity_odd</span> <span class=\"n\">p</span> <span class=\"n\">h1</span> <span class=\"n\">p</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">⟩</span> <span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">Int.coe_nat_dvd.1</span> <span class=\"n\">hp.not_dvd_one</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">isUnit_iff_dvd_one.1</span> <span class=\"n\">h2</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicity.multiplicity_self</span> <span class=\"n\">h3</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.Prime.ne_zero</span> <span class=\"n\">hp</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.Prime.multiplicity_self</span> <span class=\"n\">hp</span>\n  <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">multiplicity_self</span> <span class=\"n\">h3</span> <span class=\"bp\">?</span><span class=\"n\">ha0</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.ofNat_ne_zero.2</span> <span class=\"n\">h5</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h7</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h9</span><span class=\"o\">:=</span> <span class=\"n\">PartENat.get_one</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h9</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span><span class=\"o\">:=</span> <span class=\"n\">Nat.one_mod</span> <span class=\"mi\">0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h8</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h8</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 404581205,
        "sender_full_name": "chenjulang",
        "timestamp": 1701163998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 404583757,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701164854
    }
]