[
    {
        "content": "<p>I want to be able to apply rewrites to expressions under an integral. How do I do that? The below gives </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">Complex.cos</span> <span class=\"bp\">?</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">Complex.sin</span> <span class=\"bp\">?</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Bochner</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"c1\">-- ignoring for the moment any issues of convergence</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n          <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">cexp</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">cos</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">sin</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cos_add_sin_I</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 402122216,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700016612
    },
    {
        "content": "<p>Hmm, <code>simp</code> seems to work here.</p>",
        "id": 402124747,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700017539
    },
    {
        "content": "<p>I would still like to be able to use <code>rw</code> because that tells me what it failed to find when it doesn't work.</p>",
        "id": 402125465,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700017782
    },
    {
        "content": "<p>Just use <code>simp_rw</code> (which is <code>simp only</code> under the hood)?</p>",
        "id": 402127233,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700018513
    },
    {
        "content": "<p><code>rw</code> doesn't tend to work when there is a bound variable, but <code>simp_rw</code> can handle this.</p>\n<p>You can also use <code>conv</code> to navigate to the subexpression. The <code>ext</code> is the key step that enables <code>rw</code> to succeed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Bochner</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Haar.OfBasis</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n          <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">cexp</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">cos</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">sin</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cos_add_sin_I</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ ∫ (x : ℝ), cexp (s * ↑x * I) = ∫ (x : ℝ), cexp (s * ↑x * I * I)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402129759,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700019600
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 402131083,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1700020129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 402131084,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700020132
    }
]