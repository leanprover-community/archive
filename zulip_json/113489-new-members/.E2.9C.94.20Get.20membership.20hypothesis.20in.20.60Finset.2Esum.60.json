[
    {
        "content": "<p>Hi, I am working on graphs and have the following code (I included some context, but the main question is in the <code>let weight</code> line):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Acyclic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">SimpleGraph</span>\n\n<span class=\"c1\">-- A function from all pairs of discinct α values to β.</span>\n<span class=\"kd\">def</span> <span class=\"n\">PairMatrix</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">PairMatrix</span> <span class=\"n\">V</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">Forest</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">IsAcyclic</span> <span class=\"n\">g</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">huv</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">g.Adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">Forest_Adj_DecidablePred</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.val.Adj</span> <span class=\"n\">e.fst</span> <span class=\"n\">e.snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.decPred</span> <span class=\"n\">_</span>\n  <span class=\"k\">let</span> <span class=\"n\">edges</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">pred</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">F.val.Adj</span> <span class=\"n\">e.fst</span> <span class=\"n\">e.snd</span>\n    <span class=\"n\">Finset.filter</span> <span class=\"n\">pred</span> <span class=\"n\">Finset.univ</span>\n  <span class=\"k\">have</span> <span class=\"n\">edges_Adj</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">edges</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F.val.Adj</span> <span class=\"n\">e.fst</span> <span class=\"n\">e.snd</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.mem_filter.mp</span> <span class=\"n\">he</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n  <span class=\"k\">have</span> <span class=\"n\">edges_ne</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">edges</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">e.fst</span> <span class=\"bp\">≠</span> <span class=\"n\">e.snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">he</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">heq</span>\n    <span class=\"n\">apply</span> <span class=\"n\">SimpleGraph.irrefl</span> <span class=\"n\">F.val</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">edges_Adj</span> <span class=\"n\">he</span>\n    <span class=\"n\">rwa</span><span class=\"o\">[</span><span class=\"n\">heq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"c1\">--                                                         vvvvv need h : e ∈ edges F</span>\n  <span class=\"k\">let</span> <span class=\"n\">weight</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">edges</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">edges_ne</span> <span class=\"n\">F</span> <span class=\"n\">e</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">-- Real code does more stuff</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>As you can see, I need the hypothesis that the value being summed is a member of the Finset that is summed over. I have tried to do <code>have : e \\in edges F := by exact?</code> (and also <code>simp[*]</code> and <code>aesop</code>), but none of them can find a prove. Does anyone have a suggestion how I could get rid of this sorry? Thanks!</p>",
        "id": 401959040,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1699958883
    },
    {
        "content": "<p>Something <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=attach#doc\">docs#attach</a></p>",
        "id": 401974375,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699964334
    },
    {
        "content": "<p><code>Finset.attach</code></p>",
        "id": 401974421,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699964353
    },
    {
        "content": "<p>Thanks, that works very well! <code>let weight (F : Forest) := ∑ e in Finset.attach (edges F), M (edges_ne F e (Finset.coe_mem e))</code></p>",
        "id": 401980873,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1699966675
    },
    {
        "content": "<p>You can also use <code>:</code> instead of <code>in</code> to coerce the finset to a type. Then <code>e.1</code> is the value and <code>e.2</code> is the proof (and you can often write <code>e</code> instead of <code>e.1</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">weight</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Forest</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">edges</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">edges_ne</span> <span class=\"n\">F</span> <span class=\"n\">e</span> <span class=\"n\">e.2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402031445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699981870
    },
    {
        "content": "<p>This is even nicer, thanks!</p>",
        "id": 402059705,
        "sender_full_name": "Niklas Mohrin",
        "timestamp": 1699992109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"660493\">Niklas Mohrin</span> has marked this topic as resolved.</p>",
        "id": 402260663,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700060028
    }
]