[
    {
        "content": "<p>Hello i am trying to construct a new Finset out of two Finset i have defined.<br>\nHowever im not sure on how do what i want in lean4.<br>\nConsider this small example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.product</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span>\n</code></pre></div>\n<p>Now i tried to construct a new Finset s4 as :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s1</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">s2</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>so in this example s4 shoud be Finset  <code>{6, 12, 18, 24, 36, 72}</code></p>\n<p>Does somebody know how to write this in lean4.<br>\nThanks in advance :)</p>",
        "id": 365946921,
        "sender_full_name": "HenrikT",
        "timestamp": 1686678300
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">s3.image</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n.1</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"n\">n.2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>should work. (This uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.image#doc\">docs4#Finset.image</a>)</p>",
        "id": 365948413,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686678608
    },
    {
        "content": "<p>Thanks :), it works. Finding the right function in the docs is sometimes quite hard.</p>",
        "id": 365948827,
        "sender_full_name": "HenrikT",
        "timestamp": 1686678719
    },
    {
        "content": "<p>You could also do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">s4'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.image₂</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span>\n</code></pre></div>",
        "id": 365948832,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686678720
    },
    {
        "content": "<p>i get unknown constant Finset.image_2  for the second one</p>",
        "id": 365949501,
        "sender_full_name": "HenrikT",
        "timestamp": 1686678875
    },
    {
        "content": "<p>but the first one works fine</p>",
        "id": 365949538,
        "sender_full_name": "HenrikT",
        "timestamp": 1686678887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span> has marked this topic as resolved.</p>",
        "id": 365949572,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686678898
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.map#doc\">docs4#Finset.map</a> which you can use when you know and can prove your function is injective (as yours is). This should give you some nice consequences if you are interested in the cardinality of your resulting ses.</p>",
        "id": 365949770,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686678947
    },
    {
        "content": "<p>You need to import <code>Mathlib.Data.Finset.NAry</code> for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset#doc\">docs4#Finset</a>.image₂</p>",
        "id": 365949919,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686678972
    },
    {
        "content": "<p>ok thanks i might need that later</p>",
        "id": 365951275,
        "sender_full_name": "HenrikT",
        "timestamp": 1686679303
    }
]