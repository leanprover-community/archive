[
    {
        "content": "<p>From \"/lake-packages/mathlib/Mathlib/Data/Matrix/Basic.lean\"<br>\nI only can find the definition of  \"Matrix.dotProduct\":<br>\n    @[inherit_doc]<br>\n    scoped infixl:72 \" ⬝ᵥ \" =&gt; Matrix.dotProduct<br>\nWhere can I find the exact definition of  \" * \", I cannot find this notion ...</p>",
        "id": 407200399,
        "sender_full_name": "chenjulang",
        "timestamp": 1702287312
    },
    {
        "content": "<p>Waiting...</p>",
        "id": 407200425,
        "sender_full_name": "chenjulang",
        "timestamp": 1702287328
    },
    {
        "content": "<p>I get it , it here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">default_instance</span> <span class=\"mi\">100</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hMul</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">j</span> <span class=\"n\">k</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">matrix.mul</span> <span class=\"n\">HMul.hMul</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_apply</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 407202088,
        "sender_full_name": "chenjulang",
        "timestamp": 1702287901
    },
    {
        "content": "<p>But where is the notion \" * \" defined?</p>",
        "id": 407202140,
        "sender_full_name": "chenjulang",
        "timestamp": 1702287927
    },
    {
        "content": "<p>Wating for help...</p>",
        "id": 407202210,
        "sender_full_name": "chenjulang",
        "timestamp": 1702287954
    },
    {
        "content": "<p>You can just go to definition on the notation like you would with any other function in Lean. You will most likely end up and a built-in file that uses the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HMul#doc\">docs#HMul</a> typeclass (which is strongly related to the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mul#doc\">docs#Mul</a> one in your code above)</p>",
        "id": 407202666,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1702288103
    },
    {
        "content": "<p>oh</p>",
        "id": 407202905,
        "sender_full_name": "chenjulang",
        "timestamp": 1702288199
    },
    {
        "content": "<p>I click into the notion \"*\" and get this from \"/Users/chenjulang/.elan/toolchains/leanprover--lean4---v4.2.0/src/lean/Init/Notation.lean\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binop</span><span class=\"bp\">%</span> <span class=\"n\">HMul.hMul</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>it is a little hard to understand this</p>",
        "id": 407203208,
        "sender_full_name": "chenjulang",
        "timestamp": 1702288309
    },
    {
        "content": "<p>Oh, seems like i get it..</p>",
        "id": 407203729,
        "sender_full_name": "chenjulang",
        "timestamp": 1702288515
    },
    {
        "content": "<p>That is the notion for \"HMul.hMul\" , right?</p>",
        "id": 407203801,
        "sender_full_name": "chenjulang",
        "timestamp": 1702288544
    },
    {
        "content": "<p>Only when there exists a instance of HMul.</p>",
        "id": 407204002,
        "sender_full_name": "chenjulang",
        "timestamp": 1702288598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 407204545,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702288808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Why.20can't.20I.20find.20the.20Matrix.20multiplication.20.3F/near/407200425\">said</a>:</p>\n<blockquote>\n<p>Waiting...</p>\n</blockquote>\n<p>I don't think it's particularly helpful to remind people that you are waiting for help only 16 seconds after you asked the question! Remember, pretty much everyone helping you here is doing so voluntarily, not because its their job to do so.</p>",
        "id": 407211199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702290812
    },
    {
        "content": "<p>(If you ask a question and no one answers it for a few days, it's totally fine to say \"could someone take another look at this\" in case it got missed entirely)</p>",
        "id": 407211508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702290876
    },
    {
        "content": "<p>ok</p>",
        "id": 407211749,
        "sender_full_name": "chenjulang",
        "timestamp": 1702290956
    },
    {
        "content": "<p>Thank you for your attention <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 407212918,
        "sender_full_name": "chenjulang",
        "timestamp": 1702291329
    },
    {
        "content": "<p>This is where <code>*</code> is defined: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L276\">https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L276</a></p>\n<p>The <code>macro_rules</code> is for modifying how Lean processes <code>*</code>.</p>",
        "id": 407273642,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702311324
    },
    {
        "content": "<p>A VS Code trick: both \"go to definition\" and \"go to declaration\" can lead you do different pieces of code that have something to do with a particular notation.</p>",
        "id": 407273804,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702311374
    },
    {
        "content": "<p>Get it</p>",
        "id": 407286526,
        "sender_full_name": "chenjulang",
        "timestamp": 1702315347
    }
]