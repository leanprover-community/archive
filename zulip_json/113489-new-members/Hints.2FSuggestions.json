[
    {
        "content": "<p>I have been trying to prove the simple fact that a prime <code>p</code> less than <code>n</code> is less than <code>n#</code>, which is product of all primes less than or equal to <code>n</code>.   Should be super straight forward one would think (and maybe it is but I haven't seen the light) and could use some guidance.  I would think that I would need to use the proof that <code>{p}</code> is actually prime at this point somehow.  Is there a more straightforward way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Primorial</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\"#\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">primorial</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- Need p ∣ n# first</span>\n<span class=\"c1\">--example (n : Nat) (h : 0 &lt; n#) : p ∣ n# → p ≤ n# := Nat.le_of_dvd h</span>\n\n<span class=\"c1\">-- def primorial (n : ℕ) : ℕ :=</span>\n<span class=\"c1\">--   ∏ p in filter Nat.Prime (range (n + 1)), p</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"bp\">#</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.filter</span> <span class=\"n\">Nat.Prime</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">},</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">primorial</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 347798835,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680934944
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.dvd_prod_of_mem\">docs#finset.dvd_prod_of_mem</a> could help</p>",
        "id": 347800052,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680935674
    },
    {
        "content": "<p>I actually was trying to use that earlier but didn't figure it out. Will give it another go.</p>",
        "id": 347801131,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680936251
    },
    {
        "content": "<p>(the lean 4 version, of course. I wasn't paying enough attention)</p>",
        "id": 347801839,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680936685
    },
    {
        "content": "<p>Why not just prove <code>n&lt;=n#</code>? Then you don't need anything about p at all.</p>",
        "id": 347806043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680938415
    },
    {
        "content": "<p>Did we ever get that there's always a prime between n and 2n? There was a PR about that for ages. Then n&lt;=n# should be easy by strong induction</p>",
        "id": 347806501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680938545
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.bertrand\">docs#nat.bertrand</a></p>",
        "id": 347806882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680938700
    },
    {
        "content": "<p>I guess this isn't really the super straightforward approach though. You can prove that <code>2*2^t&lt;=(2^t)#</code> by induction on t&gt;=3 or whatever using Bertrand and then n&lt;=n# follows. But for this question the elementary approach above will work fine and probably my suggestion, whilst perhaps useful for the library, is just a distraction.</p>",
        "id": 347807208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680938847
    },
    {
        "content": "<p>Elementary approach: I would instead prove that if p&gt;2 is prime then 2p divides p#, then prove that if a&lt;=b then a# divides b#. Those lemmas should see you on your way</p>",
        "id": 347807842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680939085
    },
    {
        "content": "<p>Then if 2&lt;p&lt;n we have 2p divides n# so p&lt;n#, and for 2 you just need that 6 divides 3# so 6&lt;=n#</p>",
        "id": 347808176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680939256
    },
    {
        "content": "<p>(0 &lt; n# is the other thing you need)</p>",
        "id": 347808320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680939325
    },
    {
        "content": "<p>The reason the argument is not completely trivial is that if we replace the set of prime numbers with some random infinite set X and define Xorials the same way then the result is not true, eg if X={2,5,7,...} then 3#=2 is not strictly greater than 2</p>",
        "id": 347808597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680939456
    },
    {
        "content": "<p>Aka you say this is a simple fact but where is your rigorous paper proof? Or do you just have a proof of the form \"for n large this is obvious and for n small check by hand\"?</p>",
        "id": 347808777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680939528
    },
    {
        "content": "<p><code>n#</code> grows really fast compared to <code>n</code>, hence the remark.</p>",
        "id": 347809060,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680939668
    },
    {
        "content": "<p>I don't have much experience with <code>Finset</code> and so that is what was causing me some pain.  Right now I am just trying to figure out how to actually show something divides the primorial.  As mentioned there is <code>dvd_prod_of_mem</code> but that needs a proof that <code>p</code> is in the filtered <code>Finset</code> and I think I need to have an instance of that membership somehow?  Now sure...still trying to figure it out.</p>",
        "id": 347809503,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680939870
    },
    {
        "content": "<p>You definitely need something about there being enough primes, since if you replace the set of primes with a random other set of natural numbers it's not necessarily true</p>",
        "id": 347809690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680939970
    },
    {
        "content": "<p>Yeah that's exactly the kind of \"this is obvious so let's not write down the details\" proof that you can't formalise, because formalisation involves writing down the details. My sketch above should hopefully turn into a rigorous proof which isn't hard to formalise but note that with my X example above it's also true that n# grows really fast with n. Another bad example would be X is all the primes up to 1000 and then skip all the primes up to N=10^10^10^10 and then start again with the remaining primes, then n&lt;=n# is false for n=N-1 and you say \"well obviously the primes don't look like that\" and I say \"yeah but that's the prime number theorem\"</p>",
        "id": 347809756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680940007
    },
    {
        "content": "<p>actually the PNT doesn't even help here since it's an asymptotic statement - it is consistent with your hypothetical</p>",
        "id": 347809845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680940062
    },
    {
        "content": "<p>A number which divides a primorial is necessarily squarefree, but I don't think there is much else you can say about such numbers</p>",
        "id": 347810045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680940149
    },
    {
        "content": "<p>Your original statement sounds very simple though: <code>p &lt; n</code> implies <code>p | n#</code> because <code>p</code> is one of the factors involved in the definition of <code>n#</code></p>",
        "id": 347810203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680940222
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.primorial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">primorial</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">dvd_prod_of_mem</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">mem_filter.2</span> <span class=\"o\">⟨</span><span class=\"n\">mem_range.2</span> <span class=\"bp\">$</span> <span class=\"n\">nat.lt_succ_iff.2</span> <span class=\"n\">hpn</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 347810713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680940515
    },
    {
        "content": "<p>I hope one day I can figure this stuff out as fast.  Thanks, will try and digest what you did here.</p>",
        "id": 347810960,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680940594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> has marked this topic as resolved.</p>",
        "id": 347811387,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680940805
    },
    {
        "content": "<p>But note that p dvd n# only implies p&lt;=n#, not immediately p&lt;n#, which you were talking about earlier</p>",
        "id": 347811455,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680940832
    },
    {
        "content": "<p>Yeah I am aware of that.  I was just trying to get past this hurdle at this point.  Appreciate everyone's comments, thanks again.</p>",
        "id": 347811769,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680940935
    },
    {
        "content": "<p>it's not hard to prove that <code>2 &lt; p &lt;= n</code> implies <code>2 * p | n#</code> by something similar to Yael's proof though</p>",
        "id": 347813913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680941702
    },
    {
        "content": "<p>and for p = 2 the claim p &lt; n# is false</p>",
        "id": 347813992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680941740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  the dollar sign in the middle of the angles brackets is throwing me off.  My understanding is that $ is for not having to have parenthesis when you are nesting them to the right.  When I do a simple substitution of  \"(\"  for the dollar signs and  \")\" at the very end (same amount to balance them), it isn't working.</p>",
        "id": 347814671,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680942016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> has marked this topic as unresolved.</p>",
        "id": 347815042,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680942164
    },
    {
        "content": "<p>Here's the equivalent dollar-less proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.primorial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">primorial</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">dvd_prod_of_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_filter.2</span> <span class=\"o\">⟨</span><span class=\"n\">mem_range.2</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_succ_iff.2</span> <span class=\"n\">hpn</span><span class=\"o\">),</span> <span class=\"n\">hp</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>Probably you tried doing <code>dvd_prod_of_mem _ (mem_filter.2 ⟨mem_range.2 (nat.lt_succ_iff.2 hpn, hp⟩))</code> instead?</p>",
        "id": 347815499,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680942336
    },
    {
        "content": "<p>I tried that and some other variations :)</p>",
        "id": 347815610,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680942370
    },
    {
        "content": "<p>So how did you know dollar sign in the middle would do that? Is it because it closed off a function with an argument?    Seems to be the case.</p>",
        "id": 347815804,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680942464
    },
    {
        "content": "<p>Seems that is how the $ works in general if that is the case.  I had previously assumed it put all the end parenthesis at the very end.</p>",
        "id": 347815995,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680942533
    },
    {
        "content": "<p>Yeah, the dollar sign is basically \"function call, but wrap the rest of the expression in parentheses\". Impossible to search for, sadly</p>",
        "id": 347816544,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680942740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Hints.2FSuggestions/near/347813992\">said</a>:</p>\n<blockquote>\n<p>and for p = 2 the claim p &lt; n# is false</p>\n</blockquote>\n<p>The original claim is true because p &lt; n so n&gt;=3 so n# is a multiple of 6. But it's this sort of technical detail (\"edge cases\") which mathematicians are very keen to brush off as \"needing no proof\" and for which theorem provers demand the details. This is why I tried to come up with a more conceptual argument.</p>",
        "id": 347821421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680944406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> here's Yael's proof unpicked into Lean 4 tactic mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Primorial</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\"#\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">primorial</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"bp\">#</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dvd_prod_of_mem</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pp</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_succ_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp.le</span> <span class=\"c1\">-- dot notation trick</span>\n</code></pre></div>\n<p>When I was learning I found it far easier to write the tactic mode proof first and then, if I wanted the extra exercise, I'd trasnslate it into term mode. After you get better and get the hang of the <code>_</code> tricks you find that you can write the term mode proof directly.</p>",
        "id": 347822273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680944731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, one step at a time. I think another thing limiting me is just me not knowing mathlib as well either. Takes time. Gotta put in the work, no other way around it.</p>",
        "id": 347822873,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680944885
    },
    {
        "content": "<p>And yes, fully agree with you about the details. It is this very reason that I am trying to learn Lean.</p>",
        "id": 347823317,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680945022
    },
    {
        "content": "<p>You <em>don't have to know mathlib</em>. You just have to know the underlying philosophy of mathlib. This is a really important lesson. Got a goal of the form <code>p ∈ range (n + 1)</code>? Rewrite with a lemma called <code>mem_range</code> or <code>mem_range_iff</code>. It will be there. Got a goal of the form <code> p ∈ filter Nat.Prime (range (n + 1))</code>? Rewrite with a lemma called <code>mem_filter</code>. You have to trust that the lemmas you want are there, and because this is what we're striving for, they often are.</p>",
        "id": 347824256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680945334
    }
]