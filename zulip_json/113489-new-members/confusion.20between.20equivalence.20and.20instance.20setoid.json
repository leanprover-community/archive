[
    {
        "content": "<p>I'm currently trying to port SetTheory/Game/Basic.lean to learn, and the theorem </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">PGame.equiv_iff_game_eq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">PGame</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≈</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">⟦</span><span class=\"n\">x</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"n\">y</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.eq'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>is not accepted because there are two possible interpretations for <code>≈</code>. However, these two interpretations are the same: they are the function defined in PGame.lean, and the corresponding instance HasEquiv, deduced from the instance Setoid (defined in Basic.Lean), which is defined using the same equivalence. What should I do in this situation? More generally, how can we determine locally the meaning of notations?</p>",
        "id": 360770796,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1684930198
    },
    {
        "content": "<p>These seems to be a design error in the original file.</p>\n<p>I would suggest removing <code>≈</code> notation from PGame.lean (so remove the <code>scoped infixl:0 \" ≈ \" =&gt; PGame.Equiv</code>) and then move the setoid instance from Game.lean to PGame.lean</p>\n<p>You should be able to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instSetoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">PGame</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">PGame.equiv</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">trans</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>right after the <code>IsEquiv</code> instance that's immediately after the <code>scoped infixl</code></p>",
        "id": 360777443,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684931992
    },
    {
        "content": "<p>Thank you! Is there a way to keep the doc for <code>≈</code>? Now there is no more explanation of the definition when hovering over the symbol.</p>",
        "id": 360780338,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1684932696
    },
    {
        "content": "<p>I don't think so, at least for now (it'd be neat if you could get type-specific documentation for generic notation)</p>",
        "id": 360780776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684932797
    },
    {
        "content": "<p>You should write a porting note that you deleted the scoped notation due to notation overloading, and you can add to the note that this causes the <code>PGame.equiv</code> docstring to not show up on hover</p>",
        "id": 360781095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684932852
    },
    {
        "content": "<p>Other question about notation: Lean4 gets confused sometimes with the notation <code>[[...]]</code> for elements in the quotient, and is not sure of which quotient I'm talking about. Is there a way to indicate locally which quotient it should consider?<br>\nFor the moment I fix this by expliciting which type it is, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">PGame.le_iff_game_le</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">PGame</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"n\">x</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">Game</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">⟦</span><span class=\"n\">y</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.rfl</span>\n</code></pre></div>\n<p>But having to add this for each theorem is a bit cumbersome.</p>",
        "id": 360820226,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1684941269
    },
    {
        "content": "<p>It looks like the definition of quotient notation changed in Lean 4 and there's no porting note, so I'm not sure why</p>",
        "id": 360822354,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684941770
    },
    {
        "content": "<p>It used to take the setoid as an instance argument, but now it takes it as an explicit argument solved by unification</p>",
        "id": 360822442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684941792
    },
    {
        "content": "<p>That explains why you need to give the expected type</p>",
        "id": 360822471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684941798
    },
    {
        "content": "<p>I used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⟦\"</span> <span class=\"n\">arg</span> <span class=\"s2\">\"⟧\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">PGame.setoid</span> <span class=\"n\">arg</span>\n</code></pre></div>\n<p>And it seems to work fine</p>\n<p>Edit: no it does not work in fact.</p>",
        "id": 360822472,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1684941798
    },
    {
        "content": "<p>We probably should fix this. I've left a comment at the PR that introduced the change; <a href=\"https://github.com/leanprover-community/mathlib4/pull/559/files#r1204394250\">https://github.com/leanprover-community/mathlib4/pull/559/files#r1204394250</a></p>",
        "id": 360824379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684942176
    },
    {
        "content": "<p>I can't recall making an explicit definition to use <code>mk</code> over <code>mk'</code> for the notation, but there were quite a few issues with inferring the instance for <code>mk'</code> that there weren't for <code>mk</code>. So let's see if that situation improved.</p>",
        "id": 360828933,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684943237
    },
    {
        "content": "<p>There also seems to be a general design principle that it's better to make your own quotient constructor than use <code>Quotient.mk</code> directly. Maybe we should have <code>Game.mk : PGame -&gt; Game</code> that's defined to be <code>Quotient.mk'</code>?</p>",
        "id": 360829366,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684943341
    },
    {
        "content": "<p>The issue is that <code>Game</code> isn't syntactically the same as <code>Quotient _ PGame</code>, so the square bracket notation doesn't give you a <code>Game</code> per se</p>",
        "id": 360829536,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684943378
    },
    {
        "content": "<p><code>x ≤ y ↔ Game.mk x ≤ Game.mk y</code> isn't so bad</p>",
        "id": 360829626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684943399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> It might also be fine leaving a porting note, because it might be better this way rather than relying on global setoid instances</p>",
        "id": 360830494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684943607
    },
    {
        "content": "<p>In fact, I think this means I can remove the really bad one that <code>Sym2</code> uses finally</p>",
        "id": 360830792,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684943679
    },
    {
        "content": "<p>That's a good point, that <code>Setoid</code> should often not have global instances. I'll leave a porting note that explains the difference and says that we have not yet decided whether to use an instance parameter or not.</p>",
        "id": 360833944,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684944451
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4306\">!4#4306</a></p>",
        "id": 360841491,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684946329
    }
]