[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- Extract an element satisfying a specific condition P wrapped in option.</span>\n<span class=\"c1\">-- How do we know that the element satisfies P?</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pick</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"n\">some</span> <span class=\"n\">x</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"n\">xs</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">pick</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"n\">l</span>\n  <span class=\"k\">match</span> <span class=\"n\">result</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- how to show this?</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 400401652,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699197101
    },
    {
        "content": "<p>If you use the syntax <code>match h : result with</code> then you have the additional fact <code>h : result = some y</code>, which will be necessary for the proof</p>",
        "id": 400404353,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699199611
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>possible solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"n\">l</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">result</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pick</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pick</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">Option.some.injEq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n          <span class=\"n\">subst</span> <span class=\"n\">x</span>\n          <span class=\"n\">assumption</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n          <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">pick</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n    <span class=\"n\">trivial</span>\n</code></pre></div>\n</div></div>",
        "id": 400404473,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699199761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"500038\">@Timo Carlin-Burns</span> Thank you. The original example was too artificial, so I created a more natural example and showed it there as well.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">iimport</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- Extract an element satisfying a specific condition P wrapped in option.</span>\n<span class=\"c1\">-- How do we know that the element satisfies P?</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- pick the first element which satisfy `P` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pick</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"n\">some</span> <span class=\"n\">x</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">pick</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">pick</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons.inl</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp_all</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Option.some.injEq</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons.inr</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp_all</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">Bool.not_eq_true</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400496442,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699264448
    },
    {
        "content": "<p><code>example {a : α} (l : List α) (h : some a = pick P l)</code> seems obvious to me, so I find it hard to accept that such a long proof is needed. Couldn't the proof be shorter?</p>",
        "id": 400496653,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699264495
    },
    {
        "content": "<p>Honestly, your proof does not seem so long.  One way of \"shortening\" proofs, is to spell out to Lean the smaller steps in which to break the proof.  Here is one possibility: I am not sure that it is shorter, but there seems to be less \"thinking\" involved, at least to me!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The next two lemmas inform Lean about the available possibilities in `pick`:</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">pick_empty</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pick_cons</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- Now the example flows a little smoother.</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pick_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n</code></pre></div>",
        "id": 400505594,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699267555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Thanks for your feedback.<br>\nCan't you show this by just one tactic?</p>",
        "id": 400526003,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699275365
    },
    {
        "content": "<p>I find it tedious to do a proof similar to this every time I deal with <code>Option</code>s.</p>",
        "id": 400526107,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699275410
    },
    {
        "content": "<p>If you want to automate this, you can tag the definition with <code>simp</code> and then let <code>aesop</code> take care of the induction branches:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- Extract an element satisfying a specific condition P wrapped in option.</span>\n<span class=\"c1\">-- How do we know that the element satisfies P?</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- pick the first element which satisfy `P` -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>  <span class=\"c1\">-- note the `simp` tag here</span>\n<span class=\"kd\">def</span> <span class=\"n\">pick</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"n\">some</span> <span class=\"n\">x</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">pick</span> <span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">aesop</span>  <span class=\"c1\">-- with the `simp` lemmas in place, `aesop` can take over.</span>\n</code></pre></div>",
        "id": 400605345,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699302403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Thank you!</p>",
        "id": 400938261,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699448189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 400938275,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699448193
    },
    {
        "content": "<p>Another thing you can do is take a look at Loogle, <a href=\"https://loogle.lean-lang.org/?q=%28x+%3A+Type*%29+-%3E+List+x+-%3E+%28x+-%3E+Bool%29+-%3E+Option+x\">search for the type of <code>pick</code></a>, and uncover <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.find%3F#doc\">docs#List.find?</a></p>\n<p>Then you can <a href=\"https://loogle.lean-lang.org/?q=List.find%3F\">search for <code>List.find?</code></a> and see that the name of your theorem is <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/List/Lemmas.html#List.find%3F_some\">docs#List.find?_some</a></p>",
        "id": 401002035,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699468564
    }
]