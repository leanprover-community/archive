[
    {
        "content": "<p>What is a good strategy for Remove One item from a list. My confusion is that the list is not consumed:<br>\nWhere should I post this question? What are best practices for submitting a coding question?<br>\nThis is what I have:<br>\n-- part p1-b<br>\ndef Bag := List Nat<br>\n-- part p1-b</p>\n<p>def member : Nat -&gt; Bag -&gt; Bool<br>\n  | n,[] =&gt; false<br>\n  | n, h::b =&gt;<br>\n    if h=n then true<br>\n    else member n b</p>\n<p>#eval member 2 [1,0,3,2]</p>\n<p>partial def remove_one (n:Nat) (b:Bag) : Bag := <br>\n  if (member n b) then<br>\n    match b with<br>\n    | [] =&gt; []<br>\n    | h :: c =&gt; if h=n then c<br>\n                else remove_one n (c.append [h])<br>\n  else b</p>\n<p>#eval remove_one 1 [1,2,1]<br>\n#eval count 5 (remove_one 5 [2,1,5,4,1])<br>\n#eval count 4 (remove_one 5 [2,1,4,5,1,4])</p>\n<p>example : count 5 (remove_one 5 [2,1,5,4,1]) = 0 := by rfl<br>\nexample : count 5 (remove_one 5 [2,1,4,1]) = 0 := by rfl<br>\nexample : count 4 (remove_one 5 [2,1,4,5,1,4]) = 2 := by rfl</p>",
        "id": 377863581,
        "sender_full_name": "Don Burgess",
        "timestamp": 1690126035
    },
    {
        "content": "<p>This is the right place the post these sorts of questions, feel free to wrap your code around <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> so that it pretty-prints. Here is a solution to your problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- part p1-b</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bag</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"c1\">-- part p1-b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">member</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bag</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"bp\">=</span><span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">true</span>\n  <span class=\"k\">else</span> <span class=\"n\">member</span> <span class=\"n\">n</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">member</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">remove_one</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Bag</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bag</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">member</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"bp\">=</span><span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">c</span>\n      <span class=\"k\">else</span> <span class=\"n\">h</span><span class=\"o\">::(</span><span class=\"n\">remove_one</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bag</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"bp\">=</span><span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">n</span> <span class=\"n\">t</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">remove_one</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">count</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">remove_one</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">])</span>\n<span class=\"k\">#eval</span> <span class=\"n\">count</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">remove_one</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">])</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">remove_one</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">remove_one</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">remove_one</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Your previous function <code>remove_one</code> would not terminate. For example, <code>remove_one 1 [2]</code> would reduce to <code>remove_one 1 ([].append [2])</code>, which is just <code>remove_one 1 [2]</code> again.</p>",
        "id": 377869199,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1690127734
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 377869446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690127805
    },
    {
        "content": "<p>Thank you very much Arthur Adjedj and Mario Carneiro<br>\nYour solution is very elegant</p>",
        "id": 377872390,
        "sender_full_name": "Don Burgess",
        "timestamp": 1690128576
    }
]