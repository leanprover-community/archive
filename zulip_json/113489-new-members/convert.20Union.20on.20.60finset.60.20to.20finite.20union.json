[
    {
        "content": "<p>I'm stuck trying to expand a <code>Union</code> parameterized by a <code>finset</code>; any suggestions ? I can do one direction, but it's very verbose, all hints welcome! A MNWE is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">x_in_fi</span><span class=\"o\">⟩,</span>\n  <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_union</span><span class=\"o\">,</span><span class=\"n\">set.mem_union</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.mem_Union</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h01</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h01</span> <span class=\"k\">with</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">h0</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h1</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 369472488,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1687714843
    },
    {
        "content": "<p>(the 5 lines in the second part can be golfed to <code>exact or.elim h (λ h01, or.elim h01 (λ h, Exists.intro 0 h) (λ h, Exists.intro 1 h)) (λ h, Exists.intro 2 h)</code>, but I would hope that lean can do that expansion all by itself)</p>",
        "id": 369475621,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1687715811
    },
    {
        "content": "<p>There ought to be a tactic for this, but it doesn't seem to have been written yet (it'd be like the ones in algebra/big_operators/norm_num)</p>\n<p>Until then, here's a slightly shorter proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.fin_cases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Union</span><span class=\"o\">,</span> <span class=\"n\">set.mem_union</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_exists_index</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">((</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 369479259,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687716505
    },
    {
        "content": "<p>I think there is an open PR for this which probably just needs reviewing.</p>",
        "id": 369490175,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687720510
    }
]