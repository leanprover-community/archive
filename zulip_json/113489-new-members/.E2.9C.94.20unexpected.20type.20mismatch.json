[
    {
        "content": "<p>I'm running into some unexpected <code>rw</code> failures, which I think are the result of a surprising type mismatch having to do with <code>Denumerable.ofEncodableOfInfinite</code> from mathlib4.  The type mismatch is:</p>\n<p>An attempt at boiling it down to an #MWE is below. Could anyone let me know if I'm doing something obviously wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Denumerable</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Form.nat_injection</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">Form.atom</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.Injective</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Form.infinite</span> <span class=\"o\">:</span> <span class=\"n\">Infinite</span> <span class=\"n\">Form</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Infinite.of_injective</span> <span class=\"n\">Form.atom</span> <span class=\"n\">Form.nat_injection</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Encodable</span> <span class=\"n\">Form</span> <span class=\"n\">where</span>\n  <span class=\"n\">encode</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">atom</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"n\">decode</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Form.atom</span> <span class=\"n\">n</span>\n  <span class=\"n\">encodek</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">f</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Denumerable</span> <span class=\"n\">Form</span> <span class=\"o\">:=</span> <span class=\"n\">Denumerable.ofEncodableOfInfinite</span> <span class=\"n\">Form</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Form</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Denumerable.ofNat</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">Encodable.encode</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">Denumerable.ofNat</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"n\">Encodable.encode</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Denumerable.ofNat_encode</span> <span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq</span>\n</code></pre></div>\n<p>the type mismatch I'm seeing is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Denumerable.ofNat_encode</span> <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Denumerable.ofNat</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Encodable.encode</span> <span class=\"n\">Form</span> <span class=\"n\">Denumerable.toEncodable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Denumerable.ofNat</span> <span class=\"n\">Form</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Encodable.encode</span> <span class=\"n\">Form</span> <span class=\"n\">instEncodableForm</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 343731623,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679503438
    },
    {
        "content": "<p>Yes this error makes sense, because <code>Denumerable.ofEncodableOfInfinite</code> uses a different encoding than the original one (in general; here maybe it is really the same because you used every natural number as an encoding, but Lean won't figure that out by itself)</p>",
        "id": 343733970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679504018
    },
    {
        "content": "<p>OK. Is there any way to prove identities like <code>Denumerable.ofNat Form (Encodable.encode f) = f</code> in this context? Maybe rewrite everything in terms of <code>Encodable.decode</code>?</p>",
        "id": 343737229,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679504803
    },
    {
        "content": "<p>Well it's a bit hard to say since your example is presumably artificial</p>",
        "id": 343737295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679504827
    },
    {
        "content": "<p>Yes, I'm afraid so...</p>",
        "id": 343737353,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679504846
    },
    {
        "content": "<p>I think it's not a good idea to write an <code>instance : Encodable Form</code> if you later intend to create another instance via <code>Denumerable</code></p>",
        "id": 343737474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679504883
    },
    {
        "content": "<p>So maybe the <code>Encodable Form</code> should become just an ordinary <code>def</code>, or be inlined</p>",
        "id": 343737627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679504926
    },
    {
        "content": "<p>OK, sounds worth trying. I'll experiment a bit with that.</p>",
        "id": 343737791,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679504969
    },
    {
        "content": "<p>That does do the trick in the MWE.</p>",
        "id": 343738327,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679505107
    },
    {
        "content": "<p>OK, and in real world too. Thank you!</p>",
        "id": 343739077,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1679505308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577178\">Graham Leach-Krouse</span> has marked this topic as resolved.</p>",
        "id": 343740448,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679505641
    }
]