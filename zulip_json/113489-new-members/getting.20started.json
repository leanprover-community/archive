[
    {
        "content": "<p>Hi, how do I get started with lean? There is plenty of documentation, but it seems to need some bootstrapping. E.g. simple things like building instructions seem to point to the download page which points to the github with points to the download page :O</p>",
        "id": 177562134,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570483276
    },
    {
        "content": "<p>There are installation directions in the readme here: <a href=\"https://github.com/leanprover-community/mathlib\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a></p>",
        "id": 177562795,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570483761
    },
    {
        "content": "<p>Thanks, right now i build and installed it after finding the cmake files in src/<br>\nI also found the <a href=\"https://leanprover.github.io/tutorial/\" target=\"_blank\" title=\"https://leanprover.github.io/tutorial/\">https://leanprover.github.io/tutorial/</a> so I'll try that</p>",
        "id": 177563104,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570484027
    },
    {
        "content": "<p>Is there a good initial proof the check out in the library perhaps?</p>",
        "id": 177563162,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570484049
    },
    {
        "content": "<p>That tutorial is for Lean 2, which hasn't been supported since 2016. If you're really using Lean 2, you're on your own.</p>",
        "id": 177563219,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570484116
    },
    {
        "content": "<p>Ok is there anything for lean 3?</p>",
        "id": 177563294,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570484162
    },
    {
        "content": "<p>Yes, Theorem Proving in Lean is linked here: <a href=\"https://leanprover.github.io/documentation/\" target=\"_blank\" title=\"https://leanprover.github.io/documentation/\">https://leanprover.github.io/documentation/</a> I have no idea where you even found the link to the old version.</p>",
        "id": 177563469,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570484324
    },
    {
        "content": "<p>Somehow Google brought me there</p>",
        "id": 177563596,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570484428
    },
    {
        "content": "<p>it shows up when googling \"lean tutorial\"</p>",
        "id": 177563600,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1570484430
    },
    {
        "content": "<p>Indeed, so is <a href=\"https://leanprover.github.io/introduction_to_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/introduction_to_lean/\">https://leanprover.github.io/introduction_to_lean/</a> the right one?</p>",
        "id": 177564367,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570485080
    },
    {
        "content": "<p>No, that is also out of date. See <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">Theorem Proving in Lean</a>.</p>",
        "id": 177566441,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570486863
    },
    {
        "content": "<p>Btw, how do I interpret the Î  ? Some of these things show up but are not really explained, at least I don't know where.</p>",
        "id": 177566941,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570487271
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#dependent-types\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#dependent-types\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#dependent-types</a></p>",
        "id": 177567470,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1570487621
    },
    {
        "content": "<p>You get started by finding a nice supply of simple questions and then getting stuck 100 times and asking here how to get unstuck :D</p>",
        "id": 177567703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570487806
    },
    {
        "content": "<p>that and TPIL ;)</p>",
        "id": 177567732,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1570487840
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/logic_and_proof/\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/\">Logic &amp; Proof</a> is also good, though it's not just about Lean.</p>",
        "id": 177567818,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570487903
    },
    {
        "content": "<p>Cheat sheet: <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/guide.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/guide.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/guide.html</a></p>",
        "id": 177567831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570487927
    },
    {
        "content": "<p>I like the cheat sheet</p>",
        "id": 177568776,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570488839
    },
    {
        "content": "<p>I saw mentioned that the fundamental arithmetic theorem is proved somewhere in the repo? Where is that?</p>",
        "id": 177568839,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570488877
    },
    {
        "content": "<p>If you're just doing basic logic and learning the basics, it can be helpful. I remember running into an analogous cheat sheet for Coq when I was figuring out the basics of that.</p>",
        "id": 177568852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570488890
    },
    {
        "content": "<p>It looks like the Fundamental theorem of arithmetic is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/prime.lean#L398\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/prime.lean#L398\">here</a>.</p>",
        "id": 177569296,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570489259
    },
    {
        "content": "<p>If by chance you'd prefer to see how one proves that the integers are a unique factorization domain using mathlib, see the discussion on the fundamental theorem of arithmetic in <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>'s <a href=\"https://github.com/leanprover-community/mathlib/blob/140cc05004b98a50778771afe7333b5b919bb595/docs/100-theorems.md#80-the-fundamental-theorem-of-arithmetic\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/140cc05004b98a50778771afe7333b5b919bb595/docs/100-theorems.md#80-the-fundamental-theorem-of-arithmetic\">\"100 theorems\" branch</a>.</p>",
        "id": 177569577,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570489560
    },
    {
        "content": "<p>very interesting; if something mentions irreducible does it mean the prover takes it as a fact?</p>",
        "id": 177570676,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570490708
    },
    {
        "content": "<p>No, <code>irreducible</code> is just a hint to Lean to say \"please don't unfold this definition\" (<code>sorry</code> is used to omit a proof of something - it is not used in mathlib)</p>",
        "id": 177571172,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570491291
    },
    {
        "content": "<p>Are there also some pointers to learn more about the kernel and it's implementation?</p>",
        "id": 177571765,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570491950
    },
    {
        "content": "<p>Mario Carneiro's MSc thesis <a href=\"https://github.com/digama0/lean-type-theory\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory\">https://github.com/digama0/lean-type-theory</a> explains Lean's type theory. As for the kernel, note that it is currently being completely rewritten; we all use Lean 3 but Lean 4 is becoming more usable as time goes on.</p>",
        "id": 177572030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570492241
    },
    {
        "content": "<p>Thanks! Yeah heard lean 4 will integrate LLVM? very interesting</p>",
        "id": 177572364,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570492578
    },
    {
        "content": "<p>I think it might do this already?</p>",
        "id": 177587189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570515719
    },
    {
        "content": "<p>I also found this YouTube series: <a href=\"https://www.youtube.com/watch?v=LIv17t6HRQY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=LIv17t6HRQY\">https://www.youtube.com/watch?v=LIv17t6HRQY</a><br>\nThe audio is low, but it's really clear and explains things that I didn't see clearly explained in the docs. Even simple things like what the := means, are not clear and kind of hidden in the doc.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"LIv17t6HRQY\" href=\"https://www.youtube.com/watch?v=LIv17t6HRQY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=LIv17t6HRQY\"><img src=\"https://i.ytimg.com/vi/LIv17t6HRQY/default.jpg\"></a></div>",
        "id": 177707050,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570623235
    },
    {
        "content": "<p>I definitely agree that a good video can be a lot better than the docs when getting started, I learnt a lot from the demos (videos + code) at lean-together <a href=\"https://lean-forward.github.io/lean-together/2019/\" target=\"_blank\" title=\"https://lean-forward.github.io/lean-together/2019/\">https://lean-forward.github.io/lean-together/2019/</a></p>",
        "id": 177708508,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1570624400
    },
    {
        "content": "<p>The tutorials there specifically!</p>",
        "id": 177708594,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1570624454
    },
    {
        "content": "<p>That is a smooth site, video with slides works great!</p>",
        "id": 177755955,
        "sender_full_name": "Marijn Stollenga",
        "timestamp": 1570654952
    },
    {
        "content": "<p>Hi</p>",
        "id": 177786841,
        "sender_full_name": "Golol",
        "timestamp": 1570693598
    },
    {
        "content": "<p>Are there any fundamental difference between lean and mizar? I'm very excited to get into a proof verifier.</p>",
        "id": 177787199,
        "sender_full_name": "Golol",
        "timestamp": 1570693951
    },
    {
        "content": "<p>What do you mean with \"fundamental\". They are very different in a lot of senses.</p>",
        "id": 177787657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570694436
    },
    {
        "content": "<p>Maybe the only thing that they have in common is that it is generally believed that you can formalize all of mathematics in both of them</p>",
        "id": 177787699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570694464
    },
    {
        "content": "<blockquote>\n<p>The tutorials there specifically!</p>\n</blockquote>\n<p>That is a bit terrifying. I remember helping out several beginners at Lean Together but I don't remember trying to leave behind a coherent trail for others.</p>",
        "id": 177787812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570694534
    },
    {
        "content": "<p>@Golol, Lean is a functional programming language (rather like Haskell), which has a dependent type theory (like Coq, and Agda) which is sufficiently expressive that you can \"do most maths\" in it in a fairly natural way. You can write proofs either in \"term mode\" (like programming) or in \"tactic mode\" (more like a declarative script telling Lean how to manipulate the proof goals). It is being actively developed (Lean 4 is coming along, and the mathematical library, mathlib, is being worked on by lots of people here).</p>",
        "id": 177789261,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570696106
    },
    {
        "content": "<p>I've in the past found <a href=\"https://www.cl.cam.ac.uk/~jrh13/papers/joerg.pdf\" target=\"_blank\" title=\"https://www.cl.cam.ac.uk/~jrh13/papers/joerg.pdf\">https://www.cl.cam.ac.uk/~jrh13/papers/joerg.pdf</a> quite useful as a comparison on the older theorem provers. (Mizar is definitely one of the older ones...) I've never actually used it, so won't attempt a one-paragraph summary. :-)</p>",
        "id": 177789482,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570696342
    },
    {
        "content": "<p>I am new to leanprover (but I am not new to the concepts). I am looking for instructions how to install in Linux and run leanprover on a trivial example. Does that information exist anywhere?</p>",
        "id": 177892139,
        "sender_full_name": "vtrandal",
        "timestamp": 1570786955
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib#installation\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib#installation\">https://github.com/leanprover-community/mathlib#installation</a></p>",
        "id": 177892172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570787019
    },
    {
        "content": "<p>Thank you. About an hour ago I started here <a href=\"https://github.com/leanprover/lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean\">https://github.com/leanprover/lean</a> and cloned the repository as follows<br>\ngit clone <a href=\"https://github.com/leanprover/lean.git\" target=\"_blank\" title=\"https://github.com/leanprover/lean.git\">https://github.com/leanprover/lean.git</a></p>",
        "id": 177892655,
        "sender_full_name": "vtrandal",
        "timestamp": 1570787424
    },
    {
        "content": "<p>I would suggest that you follow Scott's link, even if you are not interested in mathlib. We've had countless experiences with users who don't do this and then have problems down the line.</p>",
        "id": 177892692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570787468
    },
    {
        "content": "<p>If you want to compile from source, there are instructions at <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/make/index.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/doc/make/index.md\">https://github.com/leanprover-community/lean/blob/master/doc/make/index.md</a></p>",
        "id": 177892725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570787510
    },
    {
        "content": "<p>I think there might even be issues with compiling Lean 3 on certain modern compilers, Lean 4 isn't really ready for beginner use, and lean 3 is not being maintained, so if you go your own way then be prepared for frustration.</p>",
        "id": 177892783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570787538
    },
    {
        "content": "<p>Thank you. Yes, I am compiling from source as I always do for just about any project.</p>",
        "id": 177892797,
        "sender_full_name": "vtrandal",
        "timestamp": 1570787553
    },
    {
        "content": "<p>(FYI, <code>leanprover/lean</code> is EOL'd, you should use <code>leanprover-community/lean</code>)'</p>",
        "id": 177892800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570787555
    },
    {
        "content": "<p>I recently compiled lean on a fresh linux install based on those instructions and it went pretty smoothly</p>",
        "id": 177892858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570787619
    },
    {
        "content": "<p>If you know what you're doing then you might want to look at the scripts which are run in the mathlib installation process. We usually use <code>elan</code> for Lean (which is our <code>rustup</code>)</p>",
        "id": 177892859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570787623
    },
    {
        "content": "<p>I recommend using <code>ninja</code> instead of <code>make</code>; there is a note a bit later on the page about adding <code>-G Ninja</code> to the cmake command to make it work</p>",
        "id": 177892984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570787748
    },
    {
        "content": "<p>Perhaps the only other issue you might have is integrating with VS Code (if you're using VS Code); there used to be a problem with Windows users having a space in their usernames</p>",
        "id": 177893040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570787777
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib#installation\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib#installation\">https://github.com/leanprover-community/mathlib#installation</a></p>",
        "id": 177893196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570787950
    },
    {
        "content": "<p>I use only Linux.</p>",
        "id": 177893432,
        "sender_full_name": "vtrandal",
        "timestamp": 1570788138
    },
    {
        "content": "<p>The other advantage of the instructions is that they give you a pre-compiled copy of mathlib. You can of course compile mathlib yourself once you have Lean up and running, but it's about 100 minutes (single core), so usually preferable to avoid doing yourself.</p>",
        "id": 177893774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570788505
    },
    {
        "content": "<p>to clarify scott's parenthetical, lean is multithreaded and very parallelizable so if you have more cores it will scale well</p>",
        "id": 177894307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570789034
    },
    {
        "content": "<p>What is VS Code? I said, \"I use only Linux,\" because I assumed VS Code is a Microsoft thing (VS as in Visual Studio).</p>",
        "id": 177896133,
        "sender_full_name": "vtrandal",
        "timestamp": 1570790902
    },
    {
        "content": "<p><a href=\"https://code.visualstudio.com/download\" target=\"_blank\" title=\"https://code.visualstudio.com/download\">https://code.visualstudio.com/download</a></p>",
        "id": 177896246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570791012
    },
    {
        "content": "<p>You can use it on Linux</p>",
        "id": 177896255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570791028
    },
    {
        "content": "<p>And really, if you simply want to have a look at Lean, compiling everything from source is purely masochistic.</p>",
        "id": 177896274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570791064
    },
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian.md</a> you can find a one line install procedure that allow you to play with Lean after 1 minute wait.</p>",
        "id": 177896305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570791115
    },
    {
        "content": "<p>Thanks, Patrick. I am compiling leanprover from source as a preliminary step to modifying the source code.</p>",
        "id": 177897431,
        "sender_full_name": "vtrandal",
        "timestamp": 1570792232
    },
    {
        "content": "<p>in that case you should definitely use the community edition of lean</p>",
        "id": 177899216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570794085
    },
    {
        "content": "<p>Mario, I probably will do that very soon (when I'm ready for an infrastructure).</p>",
        "id": 177899890,
        "sender_full_name": "vtrandal",
        "timestamp": 1570794806
    },
    {
        "content": "<p>Many thanks to everyone who answered my questions: Kevin, Scott, Patrick, Mario (I hope I did not forget anyone). It's indeed a privilege to be able to ask questions and get help here. Thank you.</p>",
        "id": 177900494,
        "sender_full_name": "vtrandal",
        "timestamp": 1570795427
    },
    {
        "content": "<p>Hello. Windows user here.</p>\n<p>I've gotten Lean up and running already with VS Code. Because I had no idea ahead of time that the plugin would offer to install Lean itself, rather than letting the plugin install <code>elan</code>, I got the binaries ahead of time and pointed the plugin at it instead. So that is all fine and good.</p>\n<p>However, I am having difficulty figuring out how to install the Lean mathlib. Yes, I know that there are install instructions here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md</a>. However, I am reluctant to go all the way with them for the following reasons.</p>\n<p>All the installation instructions are essentially messing around with a Linux shell that I am not familiar with. I am somewhat familiar with the Windows Powershell, but now with the Bash shell and I have no idea what most of these commands do.</p>\n<p>To show why this is an issue...suppose I open that Git Bash shell and run <code>curl https://raw.githubusercontent.com/Kha/elan/master/elan-init.sh -sSf | sh</code>. Will this install <code>elan</code> somewhere even though I already have Lean installed? If I do not do this, will it break one of the future steps?</p>\n<p>Then the instructions say to install Python. I already have several Python 3 versions in my system (such as from Visual Studio's Anaconda install), and do not want to add any more to PATH. Right now the one that I have in PATH is 2.7 which is linked to Emacs. If I change that to 3.7 will it break the Emacs installation?</p>\n<p>At any rate, what I wrote is moot as running <code>curl https://raw.githubusercontent.com/leanprover-community/mathlib-tools/master/scripts/remote-install-update-mathlib.sh -sSf | bash</code> which I anticipate should get the compiled library and put it I-do-not-know-where fails. Even if I put one of the Python 3 version into PATH, it fails to detect it from the shell, offers to install it and when I agree runs into issues with Chocolatey (which is kind of like <code>apt-get</code> for Windows) and aborts after too many errors. At first it asks me to go into administrator mode, but fails from there too with a huge pileup of text. I could paste it here, but I do not think that would get us anywhere constructive.</p>\n<p>I'd like to have some clear instruction on how to install the library starting with cloning the repo and moving from there. I hate the Linux style of installation where I am forced to mess with configuration files by hand and playing around with weird commands. Every time I tried something like that it has been an incredible waste of time to get the tools to work as it is now.</p>\n<p>I already tried just separating the folders inside <code>src</code> from the rest and putting them into the <code>LEAN_PATH</code> environment variable, but that is not working for me even though it seems them in autocomplete. It keeps looking for the <code>init</code> file and there are some errors with line endings apparently.</p>\n<p>What should I do here?</p>",
        "id": 177980938,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570874369
    },
    {
        "content": "<p>Why not just try installing Lean and mathlib following the instructions on the mathlib page (the thing you don't want to do) and just optimistically hope that it doesn't break anything which you've already set up? I'm sure that we would be keen to hear about any breakage (and would fix the scripts if possible). You don't have to understand the command line incantations, you just have to do what you're told. You do this every time you click \"install this thing\" on Windows and it replies \"sure, type in your admin password and I'll sort it out\". Surely every time you install some other software on Windows you don't ask exactly what it is doing? You will have to engage with the command line here, every time you clone a lean project from github you will have to type some incantations on the command line to make the project download the correct version of mathlib and then download all the binary mathlib files which mean you don't have to spend 15 minutes with your CPU on 100% while it compiles. An uncompiled mathlib is very painful. You don't just \"download mathlib\", that's not how it works. You work on a project, and the project has its own mathlib, and this mathlib needs to be compiled or it is painful. That's what all the magic incantations will make easy.</p>",
        "id": 177981217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570874850
    },
    {
        "content": "<p>If you don't want to fiddle with configuration stuff, then Kevin's suggestion of just starting from scratch using the mathlib install instructions are the right idea. Issues always come up due to system configuration when you try to \"save time\" by using what you already have instead of what the scripts are expecting. You <em>can</em> go this route but in that case I wouldn't use any of the scripts, I would use the underlying commands</p>",
        "id": 177981412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570875150
    },
    {
        "content": "<p>While we're here, can we point new users to <em>any</em> example of a simple project (i.e. not the perfectoid project) with mathlib as a dependency (i.e. not mathlib) and clear installation instructions? Is there one kicking around somewhere?</p>",
        "id": 177981488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570875248
    },
    {
        "content": "<p>Oh! Maybe this one <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M40001_lean\">https://github.com/ImperialCollegeLondon/M40001_lean</a> will do for now. This is rather less intimidating.</p>",
        "id": 177981495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570875290
    },
    {
        "content": "<p>I think whatever example project should have some non-trivial mathlib imports, so people can see how that works, I didn't see any in MA0001, maybe <a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1P1-lean\">https://github.com/ImperialCollegeLondon/M1P1-lean</a> is better in that sense (and less mathematically intense than perfectoids)</p>",
        "id": 177981647,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1570875569
    },
    {
        "content": "<p>I added installation instructions to that project (and bumped mathlib to the point where <code>update-mathlib</code> worked). I will resurrect this project this year I guess.</p>",
        "id": 177982441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570876847
    },
    {
        "content": "<p>I even got the project compiling again ;-)</p>",
        "id": 177983955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570879280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I did as you suggested and the installation did go through, almost without a hitch.</p>\n<div class=\"codehilite\"><pre><span></span>leanpkg new my_project\ncd my_project\nleanpkg add leanprover-community/mathlib\nupdate-mathlib\n</pre></div>\n\n\n<p>For some reason the shell is not recognizing the <code>update-mathlib</code> command. But though it took it a while to do what it needs to under the hood in order to go through with the import, the test fragment seems to be working.</p>\n<p>What is <code>update-mathlib</code> supposed to be doing? Is it a problem that I haven't done that step properly?</p>",
        "id": 177984440,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570880155
    },
    {
        "content": "<p>Also it is strange that a library would be harder to install than the language itself. Just what is going on that makes it so complicated?</p>",
        "id": 177984492,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570880246
    },
    {
        "content": "<p>Yup. <code>update-mathlib</code> is a custom script installed by the incantations that you ignore, which takes a project, looks at which version of mathlib it compiles with, and then fetches precompiled binaries from a stash in the cloud and downloads them and puts them in the right place. Saves you 15 minutes of 100% CPU hammering.</p>",
        "id": 177984495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570880253
    },
    {
        "content": "<p>It's not harder to install, you can compile the project yourself without update-mathlib, just make sure your device is plugged into the mains and you have something else to do for 30 minutes, and every time the maintainers decide to bump the version of mathlib you'll have the same problem.</p>",
        "id": 177984544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570880306
    },
    {
        "content": "<p>Well, since it's your own project in this case, it's really every time you decide to bump to the newest version of mathlib, but otherwise yeah.</p>",
        "id": 177984559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570880349
    },
    {
        "content": "<p>You could instead just go into the project and type <code>lean --make</code></p>",
        "id": 177984560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570880350
    },
    {
        "content": "<p>you should get some warnings (because not all proofs are complete) but no errors.</p>",
        "id": 177984563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570880379
    },
    {
        "content": "<p>The extra work is not because installing the library is hard, it's because compiling the library is painful. The extra stuff is to make your life easier.</p>",
        "id": 177984615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570880420
    },
    {
        "content": "<p>Any idea why <code>update-mathlib</code> is not being recognized by the shell? I did follow the instructions exactly as far as I could this time.</p>\n<p>Why would compiling the library be painful? I remember in one of the slides reading that the <code>array</code> data type  is implemented in C++. Does the library have C++ dependencies it needs to compile directly or something?</p>",
        "id": 177984736,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570880666
    },
    {
        "content": "<p>Oh -- you did the incantations? Then it should work. Compiling the library is painful because it is a large amount of Lean code and it's got to the point where it's painful. There are some short proofs that take 20 seconds to compile because mathlib pushes Lean's type class resolution system to its limits.</p>",
        "id": 177984875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570880966
    },
    {
        "content": "<p>Very short Lean files can force the kernel to deal with absolutely gigantic terms, because mathematics is good at bundling stuff like fields up into neat packages but Lean has to deal with what's actually going on.</p>",
        "id": 177984951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570881057
    },
    {
        "content": "<p>Lean 4 might change all this, but Lean 4 is not quite ready.</p>",
        "id": 177984963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570881094
    },
    {
        "content": "<p>(I mean, it's ready to play around with, but there is no tactic framework and no type class resolution system)</p>",
        "id": 177984975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570881115
    },
    {
        "content": "<p>you might have to write <code>./update-mathlib</code> or <code>./update-mathlib.sh</code></p>",
        "id": 177984976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570881115
    },
    {
        "content": "<p>(I assume it's a shell script)</p>",
        "id": 177985018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570881130
    },
    {
        "content": "<p>If Marko has followed the instructions to the letter it should just all work, right? Do you know precisely which line installs the update-mathlib script? Marko could try that one again and report on output.</p>",
        "id": 177985032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570881188
    },
    {
        "content": "<p>The issue isn't C++ dependencies, it is Lean itself. Mathlib is composed of several hundred large lean files, which all need to be run through lean. This involves running a bunch of tactics and each file takes a few seconds to minutes</p>",
        "id": 177985040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570881239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Marko@Lain MINGW64 /e/TheoremProving/lean/my_project (lean-3.4.2)\n$ ./update-mathlib\nbash: ./update-mathlib: No such file or directory\n\nMarko@Lain MINGW64 /e/TheoremProving/lean/my_project (lean-3.4.2)\n$ ./update-mathlib.sh\nbash: ./update-mathlib.sh: No such file or directory\n</pre></div>\n\n\n<p>Indeed, the files are not in the directory just as the errors indicated. On Windows the <code>./</code> prefix means to run the thing in the current dir. I am not sure how it is on Linux.</p>",
        "id": 177985091,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570881280
    },
    {
        "content": "<p>it means that in linux too</p>",
        "id": 177985103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570881302
    },
    {
        "content": "<p>I guess you need to add something to your PATH</p>",
        "id": 177985112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570881320
    },
    {
        "content": "<p>What is the output of <code>curl https://raw.githubusercontent.com/leanprover-community/mathlib-tools/master/scripts/remote-install-update-mathlib.sh -sSf | bash</code> ? That's surely the line that installs update-mathlib :D</p>",
        "id": 177985120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570881358
    },
    {
        "content": "<p>reading the script, it looks like it tells you to run <code>source ~/.profile</code> at the end</p>",
        "id": 177985328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570881614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<blockquote>\n<p>The issue isn't C++ dependencies, it is Lean itself. Mathlib is composed of several hundred large lean files, which all need to be run through lean. This involves running a bunch of tactics and each file takes a few seconds to minutes</p>\n</blockquote>\n<p>If it is like that, then I could have let the VS Code plugin install <code>elan</code> directly rather than running the scripts? Is Python also a real dependency?</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<div class=\"codehilite\"><pre><span></span>$ curl https://raw.githubusercontent.com/leanprover-community/mathlib-tools/master/scripts/remote-install-update-mathlib.sh -sSf | bash\nInstalling python dependencies (at user level)\n/c/Users/Marko/AppData/Local/Programs/Python/Python37-32/Scripts/pip3\nRequirement already up-to-date: setuptools in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (41.4.0)\nYou are using pip version 19.0.3, however version 19.2.3 is available.\nYou should consider upgrading via the &#39;python -m pip install --upgrade pip&#39; command.\nRequirement already up-to-date: toml in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (0.10.0)\nRequirement already up-to-date: PyGithub in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (1.43.8)\nRequirement already up-to-date: certifi in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (2019.9.11)\nRequirement already up-to-date: gitpython in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (3.0.3)\nRequirement already up-to-date: requests in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (2.22.0)\nRequirement already satisfied, skipping upgrade: deprecated in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (from PyGithub) (1.2.6)\nRequirement already satisfied, skipping upgrade: pyjwt in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (from PyGithub) (1.7.1)\nRequirement already satisfied, skipping upgrade: gitdb2&gt;=2.0.0 in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (from gitpython) (2.0.6)\nRequirement already satisfied, skipping upgrade: chardet&lt;3.1.0,&gt;=3.0.2 in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (from requests) (3.0.4)\nRequirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (from requests) (1.25.6)\nRequirement already satisfied, skipping upgrade: idna&lt;2.9,&gt;=2.5 in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (from requests) (2.8)\nRequirement already satisfied, skipping upgrade: wrapt&lt;2,&gt;=1.10 in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (from deprecated-&gt;PyGithub) (1.11.2)\nRequirement already satisfied, skipping upgrade: smmap2&gt;=2.0.0 in c:\\users\\marko\\appdata\\roaming\\python\\python37\\site-packages (from gitdb2&gt;=2.0.0-&gt;gitpython) (2.0.5)\nYou are using pip version 19.0.3, however version 19.2.3 is available.\nYou should consider upgrading via the &#39;python -m pip install --upgrade pip&#39; command.\nFetching the update-mathlib script\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3255  100  3255    0     0   3011      0  0:00:01  0:00:01 --:--:--  3011\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  4961  100  4961    0     0  14421      0 --:--:-- --:--:-- --:--:-- 14421\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   508  100   508    0     0   1439      0 --:--:-- --:--:-- --:--:--  1435\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1241  100  1241    0     0   3760      0 --:--:-- --:--:-- --:--:--  3760\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1078  100  1078    0     0   3053      0 --:--:-- --:--:-- --:--:--  3053\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   493  100   493    0     0   1507      0 --:--:-- --:--:-- --:--:--  1507\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   475  100   475    0     0   1422      0 --:--:-- --:--:-- --:--:--  1422\ninstalling it in $HOME/.mathlib/bin\nmathlib scripts are already added to $PATH in .profile\n</pre></div>\n\n\n<p>Hmmmm...is <code>mathlib scripts are already added to $PATH in .profile</code> the part where the scripts should be located. I'll check it out. Let me try restarting first. Be right back.</p>",
        "id": 177985331,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570881620
    },
    {
        "content": "<p>Just <code>source .profile</code></p>",
        "id": 177985338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570881645
    },
    {
        "content": "<p>Or restarting -- that will hopefully also fix it.</p>",
        "id": 177985365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570881694
    },
    {
        "content": "<p>restarting your shell, that is</p>",
        "id": 177985374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570881713
    },
    {
        "content": "<p>I don't think you have to restart your session</p>",
        "id": 177985415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570881726
    },
    {
        "content": "<p>I am back. I just finished restarting. Either way, it still cannot find <code>update-mathlib</code> unfortunately. To make matters worse, it seems that Lean is not caching the library and it is taking long to typecheck that basic fragment. You can really feel the effort based on how long it takes the shell to react to my typing. So I am going to have to figure out how to do this. Any advice how I can go from here?</p>\n<p>I see that <code>update-mathlib</code> is a Python script so I guess that answers one of my questions.</p>",
        "id": 177985674,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570882157
    },
    {
        "content": "<p>If the issue is as simple as not being able to find the python file then post your PATH variable (in linux it would be something like <code>echo $PATH</code>) and see if you can use the Windows search tools to find a file called <code>update-mathlib</code> somewhere on your system.</p>",
        "id": 177985738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882245
    },
    {
        "content": "<p><code>update-mathlib</code> was installed to <code>~/.mathlib/bin/</code> on my system. Does that directory exist for you? Is the script there?</p>",
        "id": 177985740,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570882248
    },
    {
        "content": "<p>If you just type <code>update-mathlib</code> then the idea is that the OS looks through all the directories in the <code>$PATH</code> system variable and sees if it can find a file called <code>update-mathlib</code> in any of them.</p>",
        "id": 177985757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882304
    },
    {
        "content": "<p>Judging by the output of what you posted above, <code>$HOME/.mathlib/bin</code> would be a good place to start (and Rob confirms that it's there in his).</p>",
        "id": 177985818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> </p>\n<p>Yeah, it is there. Echoing the PATH, it does not seem that .profile is adding the required directories to PATH. Let me try adding it to PATH manually.</p>",
        "id": 177985841,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570882423
    },
    {
        "content": "<p><code>source ~/.profile</code> should add it automatically.</p>",
        "id": 177985890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882446
    },
    {
        "content": "<p>Are you using the terminal which is recommended by the mathlib install instructions, by the way?</p>",
        "id": 177985901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882498
    },
    {
        "content": "<blockquote>\n<p>We recommend that you use git bash and not msys2, since installing the supporting tools (below) causes issues in msys2.</p>\n</blockquote>",
        "id": 177985916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Yes. I am using it from VS Code rather than directly though.</p>",
        "id": 177985966,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570882590
    },
    {
        "content": "<p>As an aside, for some reason the <code>which</code> command got broken in the Powershell by the recent installations. I have no idea what to make of that.</p>",
        "id": 177985981,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570882640
    },
    {
        "content": "<p>I have no idea whether that changes things but it seems to me that we have located the source of the problem.</p>",
        "id": 177985985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882649
    },
    {
        "content": "<p>You could just run <code>update-mathlib</code> directly from that path, e.g. by typing <code>~/.mathlib/bin/update-mathlib</code> from the root of the project folder.</p>",
        "id": 177986030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882723
    },
    {
        "content": "<p>I have absolutely no understanding of path variables in windows nor of which incantations of shells read .profile files but if the python file is there, just run it in the root directory of the project folder [I see from the above that you seem to have a Lean project].</p>",
        "id": 177986050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882798
    },
    {
        "content": "<p>Your project folder should have files in it called things like <code>leanpkg.toml</code> and <code>leanpkg.path</code> and directories <code>_target</code> and <code>src</code> by this point.</p>",
        "id": 177986124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570882881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thank you very much for the help so far.</p>\n<p>I've added it to PATH and have just run <code>update-mathlib</code>. We'll see how it goes. I'll try figuring out why <code>.profile</code> is not working after that.</p>",
        "id": 177986191,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570882960
    },
    {
        "content": "<p>And the output looked good? If so then create a file in src called <code>test.lean</code> and write something like <code>import data.real.basic</code> at the top. It's essential that you used the \"open folder\" command in VS Code and opened the project folder.</p>",
        "id": 177986207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883025
    },
    {
        "content": "<p>If <code>test.lean</code> gives you an error saying it can't find the import, that's bad. If it gives you an error saying \"can't find the <code>import data.real.basi</code>\" and then there is an orange bar at the left side of the window which doesn't go away, that's bad (it means Lean did find data.real.basic but will now spend 2 minutes compiling it). If the orange bar goes away after a few seconds, that's good.</p>",
        "id": 177986276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883116
    },
    {
        "content": "<p>(the reason for the missing c is that when you were typing, Lean was compiling frantically, and the error was the last import that failed)</p>",
        "id": 177986323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  That is what I've been doing.</p>\n<div class=\"codehilite\"><pre><span></span>Marko@Lain MINGW64 /e/TheoremProving/lean/my_project (lean-3.4.2)\n$ &quot;C:/Program Files (x86)/Microsoft Visual Studio/Shared/Anaconda3_64/Scripts/activate&quot;\n/c/Program Files (x86)/Microsoft Visual Studio/Shared/Anaconda3_64/etc/profile.d/conda.sh: line 56: /c/Program: No such file or directory\n\nMarko@Lain MINGW64 /e/TheoremProving/lean/my_project (lean-3.4.2)\n$ conda activate Anaconda3_64\nbash: conda: command not found\n\nMarko@Lain MINGW64 /e/TheoremProving/lean/my_project (lean-3.4.2)\n</pre></div>\n\n\n<p>This is what happens when I try to open a terminal in VS Code right now. It seems there is something left over from the old version of the shell where it is setup to activate the Anaconda distro. Things like this happens when you just plop stuff in. Maybe that is why it did not just work out of the box.</p>",
        "id": 177986328,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570883199
    },
    {
        "content": "<p>You do not need to be opening terminals in VS Code if you have run update-mathlib. Your terminal days are over.</p>",
        "id": 177986339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883227
    },
    {
        "content": "<p>The fact that your OS cannot deal with spaces in path names is not my problem ;-)</p>",
        "id": 177986349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883265
    },
    {
        "content": "<p>It can deal with spaces in path names just fine, I have no idea why you had issues with that. :)</p>\n<p>I made a mistake trying to run <code>update-mathlib</code> in the root. What happened was that it seemed like it has started running something but there was no output. I see now that when I run it in the project folder I actually get some response.</p>\n<div class=\"codehilite\"><pre><span></span>Marko@Lain MINGW64 ~\n$ cd E:/TheoremProving/lean/my_project\n\nMarko@Lain MINGW64 /e/TheoremProving/lean/my_project (lean-3.4.2)\n$ update-mathlib\nInfo: No github section found in &#39;git config&#39;, we will use GitHub with no authentication\nQuerying GitHub...\nDownloading nightly...\nExtracting nightly...\n</pre></div>\n\n\n<p>This should be fine, right? Let me give it a try.</p>",
        "id": 177986562,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570883528
    },
    {
        "content": "<p>Your output in the last thing you pasted had an error caused by a space in a file name.</p>",
        "id": 177986570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883559
    },
    {
        "content": "<p><code>line 56: /c/Program: No such file or directory</code></p>",
        "id": 177986575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883577
    },
    {
        "content": "<p>Yes, the update-mathlib output looks perfect. I am cautiously optimistic.</p>",
        "id": 177986593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883610
    },
    {
        "content": "<p>We do have a Windows machine at home and I actually renamed <code>C:\\Program Files</code> to <code>C:\\Program_Files</code> because I got so sick of that issue</p>",
        "id": 177986648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883701
    },
    {
        "content": "<p>wow, I'm surprised you didn't brick your system doing that</p>",
        "id": 177986718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570883775
    },
    {
        "content": "<p>Oh I haven't explained what I did correctly. I'm sure it would have bricked it. What I did was made a new directory Program_Files right at the start and then installed everything into that.</p>",
        "id": 177986740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883832
    },
    {
        "content": "<p>Oh, lol. I assure you, native Windows programs do not have that issue.</p>\n<p>At any rate, it seems that now the project is loading and typechecking instantly. Great.</p>\n<p>I am going to dig around a bit more to see if I can figure out why <code>.profile</code> is not adding the directory to PATH properly.</p>",
        "id": 177986770,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570883855
    },
    {
        "content": "<p>:D . I'm off for lunch because I can't help with anything else ;-) Happy leaning!</p>",
        "id": 177986828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570883889
    },
    {
        "content": "<p>Ok, I see what is going on.</p>\n<p>(Git shell run directly from the shortcut)</p>\n<div class=\"codehilite\"><pre><span></span>Marko@Lain MINGW64 ~\n$ echo $PATH\n/c/Users/Marko/.elan/bin:/c/Users/Marko/.mathlib/bin:/c/Users/Marko/bin:/mingw64/bin:/usr/local/bin:/usr/bin:/bin:/mingw64/bin:/usr/bin:/c/Users/Marko/bin:/c/emacs-26.2-x8...\n</pre></div>\n\n\n<p>(Git shell run via VS Code)</p>\n<div class=\"codehilite\"><pre><span></span>$ echo $PATH\n/mingw64/bin:/usr/bin:/c/Users/Marko/bin:/c/emacs-26.2-x86_64/bin...\n</pre></div>\n\n\n<p>(Powershell)</p>\n<div class=\"codehilite\"><pre><span></span>PS C:\\Users\\Marko\\.mathlib\\bin&gt; $Env:Path\nC:\\emacs-26.2-x86_64\\bin....\n</pre></div>\n\n\n<p>I replaced the cutoff parts with <code>...</code> by hand. It seems that <code>.profile</code> only gets run when Git Bash is ran via the shortcut. Running it from VS Code will not have the <code>.elan</code> and <code>mathlib</code> directories be added to the PATH variable. That explains that.</p>\n<p>With this I've finally successfully setup the project. I started work on this at 10am and it is nearly 3pm now. It should definitely be a priority for the devs to make it so that one can just clone the repo and point the compiler at the library. Even if it would take 10m to compile, that would still beat having to go through all these hoops.</p>\n<p>I understand that the reason it took so long is partly my fault as I've given into the temptation of trying to save time by not following the instruction properly, but good installation instructions should not produce such temptation in the first place.</p>\n<p>Nonetheless, I let me offer my thanks for helping me with this once again. Cyao.</p>",
        "id": 177987601,
        "sender_full_name": "Marko GrdiniÄ",
        "timestamp": 1570885087
    },
    {
        "content": "<p>it takes closer to an hour to compile</p>",
        "id": 177988116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570885957
    },
    {
        "content": "<p>but I agree that we should have directions on how to compile mathlib yourself</p>",
        "id": 177988131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570886007
    },
    {
        "content": "<p>I guess there is not much to say though; this should work:</p>\n<div class=\"codehilite\"><pre><span></span>leanpkg new my_project\ncd my_project\nleanpkg add leanprover-community/mathlib\nlean --make .target/mathlib/src\n</pre></div>",
        "id": 177988198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570886109
    },
    {
        "content": "<p>you don't even have to clone mathlib first, leanpkg takes care of that</p>",
        "id": 177988207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570886151
    },
    {
        "content": "<p>it's more an issue of getting the tooling environment set up usually</p>",
        "id": 177988255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570886183
    },
    {
        "content": "<p>For what is worth, this is what I did, works nicely and does not require setting up your PATH, etc.</p>",
        "id": 177988380,
        "sender_full_name": "NicolÃ¡s Ojeda BÃ¤r",
        "timestamp": 1570886403
    },
    {
        "content": "<blockquote>\n<p>With this I've finally successfully setup the project. I started work on this at 10am and it is nearly 3pm now. It should definitely be a priority for the devs to make it so that one can just clone the repo and point the compiler at the library. Even if it would take 10m to compile, that would still beat having to go through all these hoops.</p>\n</blockquote>\n<p>Hi, I think you missed a couple of important points. First who do you think are \"devs\" here? Do you mean the creator of Lean? He is a scholar engaged in a ten years research project,  and he wrote <em>everywhere</em> that Lean is not ready for unadventurous users. Taking care of users has never been his job, and it will probably never be. You can have a look at <a href=\"https://leanprover.github.io/documentation/\" target=\"_blank\" title=\"https://leanprover.github.io/documentation/\">https://leanprover.github.io/documentation/</a> for instance, and the FAQ linked there. </p>\n<p>Then there is the user community which you can meet here, and maintains everything at <a href=\"https://github.com/leanprover-community/\" target=\"_blank\" title=\"https://github.com/leanprover-community/\">https://github.com/leanprover-community/</a>, in particular <code>mathlib</code>. We do think Lean is already very nice to use, and we try to help people doing so. There are two kinds of users that are easy to help. Clueless users who blindly follows the instructions, and it works. Power users won't follow any instructions but will read the source code of scripts that clueless users are instructed to run, understand what they do, and do whatever they want (including compiling Lean itself from sources). This also work. Clueless users that refuse to follow instructions are much harder to help, especially when they use an exotic OS. </p>\n<p>That being said, we still have a lot of work to do to improve installation instructions. And I'm sure that Kevin and Mario are happy that they could help you. But complaining that it took too long to satisfy you is probably not the wisest thing to do.</p>",
        "id": 177989032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570887468
    },
    {
        "content": "<p>personally I find 5 hours to troubleshoot and fix a configuration error on an unfamiliar software to be about average</p>",
        "id": 177989291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570887896
    },
    {
        "content": "<p>i'm also running windows and i use the git terminal + leanpkg for setting stuff up. i've found that building mathlib isn't so bad if you only do it once every few months</p>",
        "id": 177990250,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1570889273
    },
    {
        "content": "<p>Do you use only one Lean project?</p>",
        "id": 177990298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570889309
    },
    {
        "content": "<p>yes ;)</p>",
        "id": 177990302,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1570889324
    },
    {
        "content": "<p>We should certainly have instructions for people like you.</p>",
        "id": 177990366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570889403
    },
    {
        "content": "<p>so far, i've installed lean on three windows machines and iirc my process is the following:<br>\n- install git<br>\n- install elan via sebastian's <code>elan-init.sh</code><br>\n- install python3 (i did not have to do any file renaming as suggested in the mathlib windows.md so far)<br>\n- install vscode and the leanprover extension<br>\n- set up dependencies via leanpkg<br>\n- run leanpkg build</p>",
        "id": 177990552,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1570889649
    },
    {
        "content": "<p>I am surprised leanpkg and lean --make is not the default instruction. In some ways distributing binary artifacts via shell script is kind of weird, at least when it comes to compiled languages. Although I totally understand the motivation. I have been using Lean+MinGW for years now with no problems.</p>",
        "id": 177994993,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1570896110
    },
    {
        "content": "<p>It has been a few months since I have recompiled mathlib. I am not at Lean right now, but isn't there an option to do a user-wide install of mathlib? Then it is compile once, use in many projects</p>",
        "id": 177995135,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1570896303
    },
    {
        "content": "<p>Of course, avoiding compilation time is a desirable feature. I wonder if modifications to leanpkg would be welcome at this point? Properly speaking, this should be a responsibility of the package manager</p>",
        "id": 177995257,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1570896484
    },
    {
        "content": "<p>Also, are .olean files even portable across systems? I recall reading that there were issues on ARM regarding this.</p>",
        "id": 177995266,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1570896527
    },
    {
        "content": "<p>There were rumors about that but after writing olean-rs I can't find anything processor dependent in it, and we've been sharing olean files for a while now without issue</p>",
        "id": 177995335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570896607
    },
    {
        "content": "<p>The most likely thing would be <code>int</code>s stored in native byte order</p>",
        "id": 177995356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570896663
    },
    {
        "content": "<p>is ARM big endian? I think not</p>",
        "id": 177995369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570896702
    },
    {
        "content": "<p>it's bi-endian...?</p>",
        "id": 177995416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570896749
    },
    {
        "content": "<p>I think it depends, maybe? I forget</p>",
        "id": 177995423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570896775
    },
    {
        "content": "<p>LGBT processors</p>",
        "id": 177995425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570896781
    },
    {
        "content": "<p>ah, i found the original issue: <a href=\"https://github.com/leanprover/lean/issues/1679\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1679\">https://github.com/leanprover/lean/issues/1679</a></p>",
        "id": 177995830,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1570897338
    },
    {
        "content": "<p>this bug looks amazing</p>",
        "id": 177996569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570898426
    },
    {
        "content": "<p>hi there! i am <em>very</em> new to this, and i was having some difficulty with the installation / the overall setup of lean. right now i'm trying to use it in vscode with the extension, but I'm unsure as to exactly how lean operates - do I simply make a new file with some specified extension or is it more involved?</p>",
        "id": 196825139,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1588882759
    },
    {
        "content": "<p>You make a new project, as we desperately try to flag several times in the installation instructions</p>",
        "id": 196825561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588883008
    },
    {
        "content": "<p>or you clone the tutorial project</p>",
        "id": 196825583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588883024
    },
    {
        "content": "<p>my setup currently lives on my school's unix servers, so i sometimes run into trouble installing things - most recently ive been running into an error \"/tmp/tmp.p0mYwop9QR/elan-init: /lib64/libc.so.6: version `GLIBC_2.18' not found (required by /tmp/tmp.p0mYwop9QR/elan-init)\" when trying to install elan</p>",
        "id": 196826367,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1588883464
    },
    {
        "content": "<p>That's a very bad omen.</p>",
        "id": 196827219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588883950
    },
    {
        "content": "<p>What kind of Unix is that?</p>",
        "id": 196827236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588883958
    },
    {
        "content": "<p>sounds like one which is no longer as young as it once was</p>",
        "id": 196827732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588884239
    },
    {
        "content": "<p>\"school's unix servers\" is likely to be RHEL [some appallingly low number]</p>",
        "id": 196828079,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588884416
    },
    {
        "content": "<p>If it's relevant, I go to Carnegie Mellon and this is my school's Andrew server that I typically do all my work from. Is there no hope other than managing things locally, then?</p>",
        "id": 196828695,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1588884807
    },
    {
        "content": "<p>Well, if you already have the required build tools (cmake for Lean, the rust toolchain for elan) then it should be pretty easy to build your own binaries.</p>",
        "id": 196829169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588885086
    },
    {
        "content": "<p>Though I've never tried building elan</p>",
        "id": 196829196,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588885106
    },
    {
        "content": "<p>Hi all, I am a number theorist and I have recently discovered some of Kevin Buzzard's talks. I have downloaded Lean, played with the natural number game and done some of Patrick Massot's exercises... I wonder where to go now to learn/play/do stuff. For instance, how could I check if basic results about group theory are there (e.g. : finite group of order p^2 is abelian, or \"quotient by the centre is cyclic==&gt; group is abelian), or how/where can I try to prove them? Many thanks!</p>",
        "id": 196902553,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588948437
    },
    {
        "content": "<p>doing exercises on <a href=\"https://www.codewars.com/kata/search/lean?q=&amp;\" title=\"https://www.codewars.com/kata/search/lean?q=&amp;\">codewars</a> is a nice way to learn things</p>",
        "id": 196902766,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588948552
    },
    {
        "content": "<p>you can answer some of your questions by navigating in mathlib to the <code>group_theory</code> folder</p>",
        "id": 196902839,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588948573
    },
    {
        "content": "<p>either by using the <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/sylow.html\" title=\"https://leanprover-community.github.io/mathlib_docs/group_theory/sylow.html\">html docs</a> or in your own VSCode project by going to the \"target\" folder</p>",
        "id": 196902952,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588948646
    },
    {
        "content": "<p>i guess you can also read the code on <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/group_theory\" title=\"https://github.com/leanprover-community/mathlib/tree/master/src/group_theory\">github directly</a></p>",
        "id": 196903059,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588948683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Welcome! Do you have a working Lean setup on your own computer?</p>",
        "id": 196903351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948837
    },
    {
        "content": "<p>Yes, I do. And thanks for the welcome.</p>",
        "id": 196903377,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588948853
    },
    {
        "content": "<p>Once you want to do something serious, the online web editors no longer are good enough</p>",
        "id": 196903378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948854
    },
    {
        "content": "<p>Ok, great</p>",
        "id": 196903390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196903059\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196903059\">said</a>:</p>\n<blockquote>\n<p>i guess you can also read the code on <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/group_theory\" title=\"https://github.com/leanprover-community/mathlib/tree/master/src/group_theory\">github directly</a></p>\n</blockquote>\n<p>Thanks! I will try doing so, then. I have also tried to read a bit about \"compatibility\" with future/past version. Is it true that whatever we're doing in Lean 3 now will need to be redone from scratch in Lean 4?</p>",
        "id": 196903404,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588948870
    },
    {
        "content": "<p>In that case, I would follow the instructions for setting up a new project, add mathlib as dependency, and try to state some of your group theory lemmas</p>",
        "id": 196903427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948891
    },
    {
        "content": "<p>I don't think we'll have to redo things from scratch. But there will be some weeks where we have to solve a lot of technical porting issues.</p>",
        "id": 196903505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948925
    },
    {
        "content": "<p>Luckily we have some very good regex hackers in our community.</p>",
        "id": 196903525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588948942
    },
    {
        "content": "<p>Also I think the day is fast approaching that we get enough parser data from lean core to be able to do better than regex</p>",
        "id": 196903604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588948984
    },
    {
        "content": "<p>Ah ok, good news. I' ll try to set up a new project, although I have not found a documentation about \"basics\"  of group theory (e.g. what's the name for its order?) I suspect it should be at the address suggested by Jalex Stark</p>",
        "id": 196903767,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949045
    },
    {
        "content": "<p>Thanks to both of you for your answers, I'll try my luck!</p>",
        "id": 196903807,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> We just reuse <code>card</code> for the order. Note that you need to add <code>[fintype G]</code> to assume that your group is finite. And then <code>fintype.card G</code> gives you the order of the group.</p>",
        "id": 196904151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588949245
    },
    {
        "content": "<p>If you have any arbitrary group... you need to deal with cardinals <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 196904185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588949264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks! This is precisely the kind of info I'd love to see written somewhere: where should I look exactly, rather than asking everything here? I feel a huge leap between solving Patrick's exercices and opening my project from scartch</p>",
        "id": 196904373,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949340
    },
    {
        "content": "<p>(it reminds me of the first time I tried to type a LaTeX document before discovering the Short Guide To LaTeX...)</p>",
        "id": 196904549,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949412
    },
    {
        "content": "<p>asking here is not super expensive, and learning from answers here will give you intuitions on where to look</p>",
        "id": 196904830,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588949545
    },
    {
        "content": "<p>if you feel bad about using people's time, just commit to start <em>answering</em> questions once you know things :)</p>",
        "id": 196904923,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588949584
    },
    {
        "content": "<p>Indeed, that was my problem. I feel a bit bad in asking stupid things like: where do I start from? As far as I know I should:<br>\n1) Create a new project, and import mathlib (this is OK)<br>\n2) Import \"all\" things which I suspect I might need to speak about finite groups: here I am already puzzled<br>\n3) Learn something about types/classes/structures...: no idea at all.</p>",
        "id": 196905208,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949716
    },
    {
        "content": "<p>For your 3), I find myself skimming chapter 10 of TPiL every couple of weeks and understanding more of it in proportion to how much engineering I've done between readings</p>",
        "id": 196905436,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588949831
    },
    {
        "content": "<p>There isn't a great solution right now for 2), but see the very recent in-progress \"mathematics in Lean\" book: <a href=\"#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial\" title=\"#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial</a></p>\n<p>For 3), the standard source / reference for Lean is still \"Theorem proving in Lean\": <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a></p>",
        "id": 196905446,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588949836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Thanks!</p>",
        "id": 196905717,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588949935
    },
    {
        "content": "<p>(TPiL is short for \"Theorem Proving in Lean\" around here, so my suggestion was essentially the same as Jalex's.)</p>",
        "id": 196905967,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588950036
    },
    {
        "content": "<p>Another stupid question: is it normal that each time I create a new project, some 120 MB get downloaded? I played a bit creating projects and I realise I have used almost a GB for nothing. Not a big deal, per se, just seems a bit odd.</p>",
        "id": 196906067,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588950087
    },
    {
        "content": "<p>Yes, unfortunately. Most of that space is taken up by mathlib's <code>.olean</code> files, which are like the compiled version of the <code>.lean</code> files.</p>",
        "id": 196906501,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588950248
    },
    {
        "content": "<p>i'll add that Hitchhiker's Guide explains stuffs pretty well.</p>",
        "id": 196906716,
        "sender_full_name": "Nam",
        "timestamp": 1588950358
    },
    {
        "content": "<p>Yes, I like that book too. You can find it with the other course materials here: <a href=\"https://lean-forward.github.io/logical-verification/2020/index.html#material\" title=\"https://lean-forward.github.io/logical-verification/2020/index.html#material\">https://lean-forward.github.io/logical-verification/2020/index.html#material</a></p>",
        "id": 196906855,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588950410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> here is some basic group theory being done in Lean: <a href=\"https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/group/level01_extended.lean\" title=\"https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/group/level01_extended.lean\">https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/group/level01_extended.lean</a></p>",
        "id": 196906926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588950454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Ok, thanks. I'll have a look there.</p>",
        "id": 196906931,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588950457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nThanks. So, if I undestand the philosophy right, I should download the project group-theory-game and play there? I also suppose I should rather create an internal folder (say, with my name/initials) to avoid that if everything gets updated on GIT my work disappears?</p>",
        "id": 196907386,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1588950640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196904373\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196904373\">said</a>:</p>\n<blockquote>\n<p>Thanks! This is precisely the kind of info I'd love to see written somewhere: where should I look exactly, rather than asking everything here? I feel a huge leap between solving Patrick's exercices and opening my project from scartch</p>\n</blockquote>\n<p>Maybe I should give more context in the tutorials README (I gave it here, but it's not on GitHub). Currently there is a steady stream of people who want to learn Lean for math. This is great but the self-teaching material that exists is not yet up to this task. As a kind of urgency plaster, I translated the exercises from my first year undergraduate course where I used Lean, simply adding a couple of tactics that allow more efficiency. The course was not about learning Lean, it was about learning how to write rigorous proofs. So it stops very far from the point where you can develop new maths in Lean, and it very carefully avoid painful points, like handling inclusion maps. I simply hoped it would keep people busy for some time, and teach useful stuff while we work on <a href=\"https://github.com/leanprover-community/mathematics_in_lean\" title=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a> that should ultimately contain much more.</p>",
        "id": 196917876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588955382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <br>\nThanks. So, if I undestand the philosophy right, I should download the project group-theory-game and play there? I also suppose I should rather create an internal folder (say, with my name/initials) to avoid that if everything gets updated on GIT my work disappears?</p>\n</blockquote>\n<p>The file I linked to imports other files from that project, so yes you'd be better off downloading the entire project. But nowadays I usually work within a local copy of mathlib.</p>",
        "id": 196919242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588956094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196906067\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196906067\">said</a>:</p>\n<blockquote>\n<p>Another stupid question: is it normal that each time I create a new project, some 120 MB get downloaded? I played a bit creating projects and I realise I have used almost a GB for nothing. Not a big deal, per se, just seems a bit odd.</p>\n</blockquote>\n<p>This is not a stupid question at all. Each time you create a new project, you download mathlib, with its full git history. That's about 37Mo. Then, if you don't already have them, you download <em>compiled</em> mathlib files. After unpacking, this adds about 80 Mo. If you already have those compiled files they are not downloaded but they are copied to your new project folder, which now weights about 120 Mo. This makes sense when you have a couple of projects that depend on different versions of mathlib, that you want to update independently (mathlib moves really fast, and a mathlib update can break your project non-trivially). But it doesn't make sense if you simply want to play with creating Lean projects. There are ways to improve on this, but limited time resources to modify leanproject. The current workflow works nicely for serious users who have a handful of projects that need to be really independent, and for people who want to play with one toy project. So improving this is very low priority. But feel free to contribute if fixing this is important to you. This is much much easier than proving things.</p>",
        "id": 196920372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588956652
    },
    {
        "content": "<p>I'll try and address the git cloning thing in <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/47\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/47\">https://github.com/leanprover-community/mathlib-tools/pull/47</a> - it's a first draft but I am going to eat now</p>",
        "id": 196930840,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1588961507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196919242\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196919242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <br>\nThanks. So, if I undestand the philosophy right, I should download the project group-theory-game and play there? I also suppose I should rather create an internal folder (say, with my name/initials) to avoid that if everything gets updated on GIT my work disappears?</p>\n</blockquote>\n<p>The file I linked to imports other files from that project, so yes you'd be better off downloading the entire project. But nowadays I usually work within a local copy of mathlib.</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 196990676,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589029273
    },
    {
        "content": "<p>people on this thread may like reading <a href=\"https://github.com/leanprover-community/mathlib/wiki/Where-to-start-learning-Lean\" title=\"https://github.com/leanprover-community/mathlib/wiki/Where-to-start-learning-Lean\">this community wiki page</a></p>",
        "id": 196990766,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589029404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196920372\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196920372\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196906067\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196906067\">said</a>:</p>\n<blockquote>\n<p>Another stupid question: is it normal that each time I create a new project, some 120 MB get downloaded? I played a bit creating projects and I realise I have used almost a GB for nothing. Not a big deal, per se, just seems a bit odd.</p>\n</blockquote>\n<p>This is not a stupid question at all. Each time you create a new project, you download mathlib, with its full git history. That's about 37Mo. Then, if you don't already have them, you download <em>compiled</em> mathlib files. After unpacking, this adds about 80 Mo. If you already have those compiled files they are not downloaded but they are copied to your new project folder, which now weights about 120 Mo. This makes sense when you have a couple of projects that depend on different versions of mathlib, that you want to update independently (mathlib moves really fast, and a mathlib update can break your project non-trivially). But it doesn't make sense if you simply want to play with creating Lean projects. There are ways to improve on this, but limited time resources to modify leanproject. The current workflow works nicely for serious users who have a handful of projects that need to be really independent, and for people who want to play with one toy project. So improving this is very low priority. But feel free to contribute if fixing this is important to you. This is much much easier than proving things.</p>\n</blockquote>\n<p>Thanks, this makes everything much clearer. I now really need to start making my hands dirty with some proof, but I'll be back to the forum as soon as I have more questions or comments. I think that this issue of dowloading 120 MB really not crucial for the time being.</p>",
        "id": 196990823,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589029462
    },
    {
        "content": "<blockquote>\n<p>I'll try and address the git cloning thing in <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/47\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/47\">https://github.com/leanprover-community/mathlib-tools/pull/47</a> - it's a first draft but I am going to eat now</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> what is the current status of that effort? I'm about to release version 0.0.6</p>",
        "id": 196992658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589032332
    },
    {
        "content": "<p>Note that there is no problem releasing 0.0.7 in a couple of days if you are not ready.</p>",
        "id": 196992673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589032372
    },
    {
        "content": "<p>Sorry, I kind of forgot about it and it has some test failures I haven't explained - let me just have a quick look again</p>",
        "id": 196993554,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589033703
    },
    {
        "content": "<p>Part of the problem is that it's been literally years since I coded in Python, so everything is hard again :P</p>",
        "id": 196993573,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589033738
    },
    {
        "content": "<p>I should have asked a more specific question. I didn't look at that PR yet because it was flagged as a draft, do you want me to look at it now?</p>",
        "id": 196993853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034057
    },
    {
        "content": "<p>Also you should probably rebase on master before doing anything else on your branch</p>",
        "id": 196993875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034104
    },
    {
        "content": "<p>The current status is \"tests are failing when I enable the new mode and I have no idea why\". I just turned my new flag to default to \"off\" and now the only test that is failing is the one that asserts the new behaviour - so it's definitely my change that is broken - but I was hoping to finish this without having to work out how to run it locally</p>",
        "id": 196994220,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034544
    },
    {
        "content": "<p>In hindsight, quite an optimistic hope</p>",
        "id": 196994236,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034599
    },
    {
        "content": "<p>The error message on Travis suggests you invented some feature of git python</p>",
        "id": 196994302,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034692
    },
    {
        "content": "<p>(fear not, I'll squash away all these ridiculous commits)</p>",
        "id": 196994355,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034739
    },
    {
        "content": "<p>And also that you didn't rebase on master</p>",
        "id": 196994374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034792
    },
    {
        "content": "<p>But this is not a problem at all</p>",
        "id": 196994376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034797
    },
    {
        "content": "<p>This can wait</p>",
        "id": 196994378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034800
    },
    {
        "content": "<p>I'll release 0.0.6 now</p>",
        "id": 196994385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034816
    },
    {
        "content": "<p>Not rebasing isn't a problem if I'm going to squash-merge anyway, right?</p>",
        "id": 196994388,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034820
    },
    {
        "content": "<p>Sure, go for it</p>",
        "id": 196994391,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589034823
    },
    {
        "content": "<p>Oh sorry, I didn't see your new commits.</p>",
        "id": 196994448,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034873
    },
    {
        "content": "<p>Yes, we can clean up history before merging</p>",
        "id": 196994476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034886
    },
    {
        "content": "<p>My actual question is: why do you think you can pass the depth argument to <code>Repo.clone_from</code> like this?</p>",
        "id": 196994498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589034925
    },
    {
        "content": "<p>Its docstring contains the text \"        :param multi_options: See <code>clone</code> method\", and the clone method's docstring contains the text </p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>   :param multi_options: A list of Clone options that can be provided multiple times.  One\n        option per list item which is passed exactly as specified to clone.\n        For example [&#39;--config core.filemode=false&#39;, &#39;--config core.ignorecase&#39;,\n                     &#39;--recurse-submodule=repo1_path&#39;, &#39;--recurse-submodule=repo2_path&#39;\n</code></pre></div>\n\n\n</blockquote>",
        "id": 196994599,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589035070
    },
    {
        "content": "<p>Do you mind if I add \"/venv\" to the .gitignore? I'm finally seeing if I can run the thing myself</p>",
        "id": 196994944,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589035518
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Python</span> <span class=\"mf\">3.8</span><span class=\"o\">.</span><span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">Dec</span>  <span class=\"mi\">7</span> <span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">02</span><span class=\"p\">)</span>\n<span class=\"n\">Type</span> <span class=\"s1\">&#39;copyright&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;credits&#39;</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;license&#39;</span> <span class=\"k\">for</span> <span class=\"n\">more</span> <span class=\"n\">information</span>\n<span class=\"n\">IPython</span> <span class=\"mf\">7.12</span><span class=\"o\">.</span><span class=\"mi\">0</span> <span class=\"o\">--</span> <span class=\"n\">An</span> <span class=\"n\">enhanced</span> <span class=\"n\">Interactive</span> <span class=\"n\">Python</span><span class=\"o\">.</span> <span class=\"n\">Type</span> <span class=\"s1\">&#39;?&#39;</span> <span class=\"k\">for</span> <span class=\"n\">help</span><span class=\"o\">.</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">git</span> <span class=\"kn\">import</span> <span class=\"n\">Repo</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span>  <span class=\"n\">Repo</span><span class=\"o\">.</span><span class=\"n\">clone_from</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://github.com/leanprover-community/tutorials.git&#39;</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"p\">,</span> <span class=\"s1\">&#39;test_target&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;--depth=1&#39;</span><span class=\"p\">])</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">AttributeError</span>                            <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">e474310ae324</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">Repo</span><span class=\"o\">.</span><span class=\"n\">clone_from</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://github.com/leanprover-community/tutorials.git&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test_target&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;--depth=1&#39;</span><span class=\"p\">])</span>\n\n<span class=\"o\">~/.</span><span class=\"n\">pyenv</span><span class=\"o\">/</span><span class=\"n\">versions</span><span class=\"o\">/</span><span class=\"mf\">3.8</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">repo</span><span class=\"o\">/</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"n\">clone_from</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">to_path</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">multi_options</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n   <span class=\"mi\">1015</span>         <span class=\"k\">if</span> <span class=\"n\">env</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n   <span class=\"mi\">1016</span>             <span class=\"n\">git</span><span class=\"o\">.</span><span class=\"n\">update_environment</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">env</span><span class=\"p\">)</span>\n<span class=\"o\">-&gt;</span> <span class=\"mi\">1017</span>         <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_clone</span><span class=\"p\">(</span><span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">to_path</span><span class=\"p\">,</span> <span class=\"n\">GitCmdObjectDB</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">,</span> <span class=\"n\">multi_options</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n   <span class=\"mi\">1018</span>\n   <span class=\"mi\">1019</span>     <span class=\"k\">def</span> <span class=\"nf\">archive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ostream</span><span class=\"p\">,</span> <span class=\"n\">treeish</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\n<span class=\"o\">~/.</span><span class=\"n\">pyenv</span><span class=\"o\">/</span><span class=\"n\">versions</span><span class=\"o\">/</span><span class=\"mf\">3.8</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">8</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">repo</span><span class=\"o\">/</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"n\">_clone</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">odb_default_type</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">,</span> <span class=\"n\">multi_options</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"mi\">952</span>                          <span class=\"n\">v</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">universal_newlines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">add_progress</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">git</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"p\">))</span>\n    <span class=\"mi\">953</span>         <span class=\"k\">if</span> <span class=\"n\">progress</span><span class=\"p\">:</span>\n<span class=\"o\">--&gt;</span> <span class=\"mi\">954</span>             <span class=\"n\">handle_process_output</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">progress</span><span class=\"o\">.</span><span class=\"n\">new_message_handler</span><span class=\"p\">(),</span> <span class=\"n\">finalize_process</span><span class=\"p\">,</span> <span class=\"n\">decode_streams</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"mi\">955</span>         <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"mi\">956</span>             <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">()</span>\n\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;list&#39;</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">&#39;new_message_handler&#39;</span>\n</code></pre></div>",
        "id": 196995922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589036769
    },
    {
        "content": "<p>This has nothing to do with <code>leanproject</code>, this is simply not how <code>Repo.clone_from</code> works (at least the version I have here).</p>",
        "id": 196995940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589036803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196995940\" title=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196995940\">said</a>:</p>\n<blockquote>\n<p>This has nothing to do with <code>leanproject</code>, this is simply not how <code>Repo.clone_from</code> works (at least the version I have here).</p>\n</blockquote>\n<p>Sure, I understand the message; I simply followed what I thought were clear and simple instructions from the docstring :P but nothing is clear and simple when you haven't touched a language for years</p>",
        "id": 196995952,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589036837
    },
    {
        "content": "<p>No problem. I'm very happy when people want to contribute to <code>leanproject</code>, and there is no hurry at all. I released anyway since there was a critical bug since the appearance of an unfortunately named branch in the mathlib repository</p>",
        "id": 196996106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589037056
    },
    {
        "content": "<p>And now I need to leave</p>",
        "id": 196996108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589037062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196990676\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196919242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/196907386\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <br>\nThanks. So, if I undestand the philosophy right, I should download the project group-theory-game and play there? I also suppose I should rather create an internal folder (say, with my name/initials) to avoid that if everything gets updated on GIT my work disappears?</p>\n</blockquote>\n<p>The file I linked to imports other files from that project, so yes you'd be better off downloading the entire project. But nowadays I usually work within a local copy of mathlib.</p>\n</blockquote>\n<p>Thanks!</p>\n</blockquote>\n<p>I am trying to play with the group_game, and I can prove something (for central elements, right and left cosets coincide) but I don't understand the definition of \"central_subgroup\". I am wondering what's the policy: is there a stream to discuss that project in particular, should I throw my question at everyone in the chat? And whom should I show my partial solution to see if it is correct, should I paste it here? Thanks</p>",
        "id": 197263399,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589284110
    },
    {
        "content": "<p>Oh I didn't even write the central subgroup stuff, that was written by <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> who is probably very busy with exams right now.</p>",
        "id": 197263901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589284442
    },
    {
        "content": "<p>and I am very busy with marking them :-/</p>",
        "id": 197263959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589284464
    },
    {
        "content": "<p>But one thing I would definitely recommend is that if you have any questions about this then please don't ask them in this generic thread, start a new topic with title the group theory game or something. You are more likely to get answers that way. Put it in #maths if you like.</p>",
        "id": 197264154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589284608
    },
    {
        "content": "<p>Also, feel free to write your own questions and PR them (or just post working Lean code as <a href=\"https://github.com/ImperialCollegeLondon/group-theory-game/issues\">\"issues\"</a> if you don't have a clue about github). Both Jason and I are busy with other things right now but we should get back to this in June.</p>",
        "id": 197264400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589284750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197263901\">said</a>:</p>\n<blockquote>\n<p>Oh I didn't even write the central subgroup stuff, that was written by <span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> who is probably very busy with exams right now.</p>\n</blockquote>\n<p>Oh, thanks. Very clear, then. I'll do so and I will try to understand how to \"PR\" them.</p>",
        "id": 197264660,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589284909
    },
    {
        "content": "<p>Hi, Filippo<br>\nI defined the <code>center</code> of a group G as the set of elements of G that commutes and then I defined it to be a subgroup by proving all the subgroup axioms.<br>\nTo be honest, I'm not sure if this is a good way to define this myself, I still learning myself!</p>",
        "id": 197266468,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589285974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197266468\">said</a>:</p>\n<blockquote>\n<p>Hi, Filippo<br>\nI defined the <code>center</code> of a group G as the set of elements of G that commutes and then I defined it to be a subgroup by proving all the subgroup axioms.<br>\nTo be honest, I'm not sure if this is a good way to define this myself, I still learning myself!</p>\n</blockquote>\n<p>I see; I have moved the discussion to maths/group theory game-&gt; should we continue there?</p>",
        "id": 197266578,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286023
    },
    {
        "content": "<p>I'm struggling with the Advanced Worlds; specifically, I'm trying to apply some theorem statements to existing hypotheses to get new hypotheses to work with, but I can't figure out the syntax.</p>",
        "id": 197326090,
        "sender_full_name": "edderiofer",
        "timestamp": 1589311639
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>?</p>",
        "id": 197326353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589311734
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span> ! I guess you're playing the natural number game? if you search this chat you may find a lot of discussions relevant to your problems :)</p>",
        "id": 197326403,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311759
    },
    {
        "content": "<p>If you have a more specific question, you can hit the \"new topic\" button, give it an appropriate title, and show us the code you're struggling with</p>",
        "id": 197326446,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311782
    },
    {
        "content": "<p>For instance, in Advanced Multiplication World 4, I do the following:<br>\n<code>induction c with d hd generalizing b,\nsimp,\nintro h,</code><br>\nwhich is fine. Now I want to use eq_zero_or_eq_zero_of_mul_eq_zero to deduce from h that a = 0 â¨ b = 0, but I can't figure out the syntax for it; <code>have g := mul_eq_zero_iff(h),</code> throws an error.</p>",
        "id": 197326458,
        "sender_full_name": "edderiofer",
        "timestamp": 1589311785
    },
    {
        "content": "<p>We need code that compiles, so that we can run it locally and see the same things you're seeing</p>",
        "id": 197326570,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311827
    },
    {
        "content": "<p>otherwise this is a big game of telephone where everybody loses</p>",
        "id": 197326583,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311836
    },
    {
        "content": "<p>Did you read the error?</p>",
        "id": 197326714,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311913
    },
    {
        "content": "<p>Yes, but I don't understand it.</p>",
        "id": 197326732,
        "sender_full_name": "edderiofer",
        "timestamp": 1589311920
    },
    {
        "content": "<p>The errors have lots of useful information in them</p>",
        "id": 197326733,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311920
    },
    {
        "content": "<p>If you want help here, you'll have to produce a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197326829,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311952
    },
    {
        "content": "<p>On Advanced Multiplication World Level 4 of the Natural Number Game,<br>\n<code>induction c with d hd generalizing b,\nsimp,\nintro h,\nhave g := mul_eq_zero_iff(h),</code><br>\nthrows an error on the last line.</p>",
        "id": 197326843,
        "sender_full_name": "edderiofer",
        "timestamp": 1589311960
    },
    {
        "content": "<p>yes, I think you said all of that already</p>",
        "id": 197326884,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589311977
    },
    {
        "content": "<p>Then I'm not sure what you want from me.</p>",
        "id": 197326990,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312033
    },
    {
        "content": "<p>you could either give us a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> or tell us what youre error message is, I think both of those would enable progress</p>",
        "id": 197327065,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312050
    },
    {
        "content": "<p>(did you notice that <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> is a link to a page with a description of what we want?)</p>",
        "id": 197327089,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312062
    },
    {
        "content": "<p>I get the error:</p>\n<p><code>type mismatch at application\n  mul_eq_zero_iff h\nterm\n  h\nhas type\n  a * b = 0 : Prop\nbut is expected to have type\n  mynat : Type\nstate:\n2 goals\na : mynat,\nha : a â  0,\nb : mynat,\nh : a * b = 0\nâ¢ b = 0</code></p>\n<p><code>case mynat.succ\na : mynat,\nha : a â  0,\nd : mynat,\nhd : â (b : mynat), a * b = a * d â b = d,\nb : mynat\nâ¢ a * b = a * succ d â b = succ d</code></p>",
        "id": 197327107,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312070
    },
    {
        "content": "<p><code>mul_eq_zero_iff</code> is a function of several arguments, the first of which is a nat</p>",
        "id": 197327171,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312106
    },
    {
        "content": "<p>try <code>mul_eq_zero_iff _ _ h</code></p>",
        "id": 197327193,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312120
    },
    {
        "content": "<p>That gets me this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">mul_eq_zero_iff</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">â</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">â¨</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">â¢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">case</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">â</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"err\">â¢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">â</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 197327296,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312166
    },
    {
        "content": "<p>from this part of the error <code>function expected at  mul_eq_zero_iff ?m_1 ?m_2</code> you can see that it wants exactly two arguments</p>",
        "id": 197327446,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312265
    },
    {
        "content": "<p>so try one fewer underscore</p>",
        "id": 197327475,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312278
    },
    {
        "content": "<p><code>have g := mul_eq_zero_iff _ h,</code> gets me this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mul_eq_zero_iff</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">â¢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">case</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">â</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"err\">â¢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">â</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 197327609,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312338
    },
    {
        "content": "<p>What do you think this part of the error means?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 197327661,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312374
    },
    {
        "content": "<p>That I need a second mynat as the second input.</p>",
        "id": 197327783,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312428
    },
    {
        "content": "<p><code>have g := mul_eq_zero_iff _ _,</code> compiles, but gives me this set of goals:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">4</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">*</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">â</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">â¨</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">â¢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">â¢</span> <span class=\"n\">mynat</span>\n\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">â¢</span> <span class=\"n\">mynat</span>\n\n<span class=\"n\">case</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">â</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"err\">â¢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">â</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>\n\n\n<p>which isn't what I wanted.</p>",
        "id": 197327850,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312461
    },
    {
        "content": "<p>right, I think you should figure out which specific <code>mynat</code>s to fill in the underscores with</p>",
        "id": 197327940,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312510
    },
    {
        "content": "<p>(it's probably <code>a</code> and <code>b</code> in some order)</p>",
        "id": 197328088,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312578
    },
    {
        "content": "<p>Jalex, you're not helping by keeping answering without a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197328271,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589312657
    },
    {
        "content": "<p>You know that, in the long run, you're not helping him or her.</p>",
        "id": 197328354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589312708
    },
    {
        "content": "<p>I could stop replying, yeah; I guess my fear is that they'll give up on the natural number game</p>",
        "id": 197328392,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312727
    },
    {
        "content": "<p>really my goal is to try to understand why people don't respond gracefully to requests for a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197328450,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312756
    },
    {
        "content": "<p>i don't have a very good model of what's going on in their head</p>",
        "id": 197328523,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312771
    },
    {
        "content": "<p>but also like, I think it <em>is</em> interesting to have discussions with new people about how to read error messages</p>",
        "id": 197328584,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312812
    },
    {
        "content": "<p>maybe we need a natural number game stream to insulate the rest of the server from specificall this sort of interaction</p>",
        "id": 197328667,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312863
    },
    {
        "content": "<p>In my case, I'm not sure how the description I gave:</p>\n<blockquote>\n<p>On Advanced Multiplication World Level 4 of the Natural Number Game,<br>\n<code>induction c with d hd generalizing b,\nsimp,\nintro h,\nhave g := mul_eq_zero_iff(h),</code><br>\nthrows an error on the last line.</p>\n</blockquote>\n<p>doesn't constitute a MWE (or in this case, a MN-WE).</p>",
        "id": 197328826,
        "sender_full_name": "edderiofer",
        "timestamp": 1589312925
    },
    {
        "content": "<p>did you read the definition at the link?</p>",
        "id": 197328920,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312982
    },
    {
        "content": "<p>for us, a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> is something that we can copy-paste into a local Lean instance</p>",
        "id": 197328950,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589312999
    },
    {
        "content": "<p>OK, but how do I get the list of imports if I'm playing the Natural Number Game?</p>",
        "id": 197329068,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313053
    },
    {
        "content": "<p>(and yeah, \"working\" is a strange word, for us it means \"throws the error that i'm interested in getting help with\")</p>",
        "id": 197329076,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313063
    },
    {
        "content": "<p>you could start by including the theorem statement</p>",
        "id": 197329144,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313103
    },
    {
        "content": "<p>I can add some guidance to that link about the natural number game</p>",
        "id": 197329233,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313127
    },
    {
        "content": "<p>That would definitely be helpful.</p>",
        "id": 197329248,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313138
    },
    {
        "content": "<p>okay so what happens if you try to post the theorem statement and your proof script?</p>",
        "id": 197329279,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313159
    },
    {
        "content": "<p>I think it's ~40% likely that if I copy it into my local instance, it will just work, since a lot of the natural number definitions are in core</p>",
        "id": 197329333,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span>  When we say an MWE (Minimum Working Example), we mean something we can copy and paste directly into a local Lean compiler and get the same result. It may not be obvious how to do this if Natural Number Game has been your only exposure to lean. For example, the following does not work because it's just a series of tactics. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>This does count, because I've included the theorem statement and imports (notice that I'm using nat instead of mynat, which is specific to NNG). </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">â</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197329354,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> you're missing <code>import tactic</code></p>",
        "id": 197329523,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313298
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 197329553,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313313
    },
    {
        "content": "<p>The case of the NNG is the easiest actually: you can copy-paste the url, eg <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=1\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=7&amp;level=1</a></p>",
        "id": 197329554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313313
    },
    {
        "content": "<p>The following works (on <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">â</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rwa</span> <span class=\"n\">g</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>but is there a quicker way to perform the last two lines to go from <code>h : a * b = 0</code> to <code>h : a = 0 â¨ b = 0</code>?</p>",
        "id": 197329560,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197329523\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> you're missing <code>import tactic</code></p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">â </span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">â</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197329594,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313339
    },
    {
        "content": "<p>Jalex, I think it would be good idea to mention this url \"trick\" in the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> webpage</p>",
        "id": 197329607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313346
    },
    {
        "content": "<p>you could do <code>rwa mul_eq_zero_iff a b at h,</code></p>",
        "id": 197329615,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313354
    },
    {
        "content": "<p>and then in fact if you replace the a and b with underscores it should figure it out for you</p>",
        "id": 197329703,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313384
    },
    {
        "content": "<p>Ah, OK.</p>",
        "id": 197329720,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313392
    },
    {
        "content": "<p>thanks for the patience here, we really want to help new people and avoid burnout, so we want to make processes to make helping new people more efficient</p>",
        "id": 197329841,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313455
    },
    {
        "content": "<p>What if the theorem I wanted to use was a single-direction implication? You can't use <code>rw</code> then, can you?</p>",
        "id": 197329937,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313489
    },
    {
        "content": "<p>then you want <code>apply</code></p>",
        "id": 197330081,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313548
    },
    {
        "content": "<p>well, <code>apply f</code> works if <code>f : A \\to B</code> and <code>B</code> is the goal</p>",
        "id": 197330190,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span>  This might seem like a silly distinction, but getting in the habit of doing this really does speed up the process of assessing errors when your questions get more complex. It's totally understandable if you're confused this early on. Keep at it, and keep asking questions if you get stuck!</p>",
        "id": 197330272,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313618
    },
    {
        "content": "<p>sometimes I do find myself using a lemma to generate an equality and then <code>rw</code>ing that equality</p>",
        "id": 197330305,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313630
    },
    {
        "content": "<p>I don't know what is explained in the game at this point, but the normal way to write this beginning of proof would be:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">ha&#39;</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>or, even better,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"o\">((</span><span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 197330455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313712
    },
    {
        "content": "<p>where \"normal\" means \"mathlib-approved\"?</p>",
        "id": 197330553,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313748
    },
    {
        "content": "<p>efficiency approved</p>",
        "id": 197330590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197330305\">said</a>:</p>\n<blockquote>\n<p>sometimes I do find myself using a lemma to generate an equality and then <code>rw</code>ing that equality</p>\n</blockquote>\n<p>Technically I think NNG doesn't let you define external lemmas outside of the current tactic proof, so you would have to use a <code>have</code> statement or something.</p>",
        "id": 197330601,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313776
    },
    {
        "content": "<p>I don't think <code>.mp</code> is explained in the game at this point?</p>",
        "id": 197330634,
        "sender_full_name": "edderiofer",
        "timestamp": 1589313792
    },
    {
        "content": "<p>yes when i said \"lemma\" I did mean \"add somethign new to the local context with <code>have</code>\" not \"define something with the <code>lemma</code> keyword\"</p>",
        "id": 197330668,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313820
    },
    {
        "content": "<p>I have no idea what is explained here. I'm too old. I started Lean long before this game was written</p>",
        "id": 197330690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313834
    },
    {
        "content": "<p>I agree that NNG does not want you to use <code>.mp</code></p>",
        "id": 197330745,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313848
    },
    {
        "content": "<p>I learned about <code>.mp</code> by using Lean in VSCode and having it pop out of <code>suggest</code> or <code>library_search</code> sometimes</p>",
        "id": 197330778,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197330668\">said</a>:</p>\n<blockquote>\n<p>yes when i said \"lemma\" I did mean \"add somethign new to the local context with <code>have</code>\" not \"define something with the <code>lemma</code> keyword\"</p>\n</blockquote>\n<p>Cool, just wanted to make that distinction because of the keyword <code>lemma</code>.</p>",
        "id": 197330783,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589313874
    },
    {
        "content": "<p>Patrick, is adding a local hypothesis and using <code>rw</code> really much less efficient than the term mode proof?</p>",
        "id": 197330830,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313902
    },
    {
        "content": "<p>I guess in my mind the only time to care about that much efficiency is if you're putting code into mathlib</p>",
        "id": 197330857,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313918
    },
    {
        "content": "<p>but maybe I am wrong</p>",
        "id": 197330863,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589313921
    },
    {
        "content": "<p>I mostly meant efficiency in writing speed.</p>",
        "id": 197330927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589313961
    },
    {
        "content": "<p>well that's definitely not true if I'm the one writing :P</p>",
        "id": 197331094,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314045
    },
    {
        "content": "<p>I also have another constraint from my teaching use of Lean. The ultimate goal of my course is to teach traditional math writing. Lean is only an intermediate tool. Hence I prefer having only one line of Lean for one sentence on paper. Here you would say: ab = 0 and a neq 0 hence b=0, matching the number of lines of my efficient proof.</p>",
        "id": 197331127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589314060
    },
    {
        "content": "<p>interesting</p>",
        "id": 197331146,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314074
    },
    {
        "content": "<p>Kevin writes a lot of \"literate lean\" where he uses multiple lines of Lean for one line of math</p>",
        "id": 197331221,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314098
    },
    {
        "content": "<p>But on that example, I would not expect my students to write this line, this is too advanced term mode.</p>",
        "id": 197331252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589314119
    },
    {
        "content": "<p>ah okay</p>",
        "id": 197331283,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314140
    },
    {
        "content": "<p>making the math proof move slower seems better than making the lean move faster, for the purpose of teaching first-years</p>",
        "id": 197331337,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314168
    },
    {
        "content": "<p>I guess most people here (including <span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span>) are coming form the perspective of already being fluent in \"terse\" mathematical sentences</p>",
        "id": 197331490,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314225
    },
    {
        "content": "<p>I made a small edit to the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> page. <span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span> do you think the current state of the page would have caused you to post a link?</p>",
        "id": 197331650,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314306
    },
    {
        "content": "<p>If \"Natural Number Game\" were capitalized, definitely.</p>",
        "id": 197331753,
        "sender_full_name": "edderiofer",
        "timestamp": 1589314343
    },
    {
        "content": "<p>haha thanks, fixing that now</p>",
        "id": 197332423,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314597
    },
    {
        "content": "<p>okay, I added a fairly explicit example to <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197332950,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314782
    },
    {
        "content": "<p>Yep, that works.</p>",
        "id": 197333065,
        "sender_full_name": "edderiofer",
        "timestamp": 1589314807
    },
    {
        "content": "<p>edderiofer, I think i recognize your name from /r/math and /r/mathriddles ? Have you seen this pair of <a href=\"https://www.reddit.com/r/mathriddles/comments/ghx09u/a_commutative_ring_cannot_have_exactly_5/\">riddle</a> and <a href=\"https://www.codewars.com/kata/5e8c4b4a968b34002d4b6534\">Codewars question</a>?<br>\nand <a href=\"https://www.reddit.com/r/mathriddles/comments/7f9l7a/let_pq_be_consecutive_primes_greater_than_2_show/?utm_source=share&amp;utm_medium=web2x\">this</a> other <a href=\"https://www.codewars.com/kata/5eb0c7163c435d002f65666e\">pair</a>, where the translation was in the other direction?</p>",
        "id": 197333191,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589314874
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> generation, it would be nice if NNG had a \"MWE button\" that takes the user's text together with the surrounding theorem and the imports and puts it in your clipboard. Since this has to be what is being sent to lean this should not be too difficult</p>",
        "id": 197333395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589314976
    },
    {
        "content": "<p>it's still not perfect because of the mynat issue, but it should be enough for the cognoscenti</p>",
        "id": 197333473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589315025
    },
    {
        "content": "<p>No, I haven't seen either of those pairs, but yes, you probably do recognize me from there.</p>",
        "id": 197333673,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315071
    },
    {
        "content": "<p>cool, I am khanh93 on reddit, though I post a lot less so you may not recognize me</p>",
        "id": 197334183,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315270
    },
    {
        "content": "<p>Yep, definitely don't recognize that username.</p>",
        "id": 197334596,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315442
    },
    {
        "content": "<p>So who's going to post the MWE button feature request to GitHub?</p>",
        "id": 197334652,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315465
    },
    {
        "content": "<p>well I think the biggest problem is that we don't have anyone doing active development on the NNG engine :(</p>",
        "id": 197334726,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315498
    },
    {
        "content": "<p>though I guess the github project is a great place to store these desiderata</p>",
        "id": 197334857,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315532
    },
    {
        "content": "<p>I think this project is the relevant one<br>\n<a href=\"https://github.com/mpedramfar/Lean-game-maker\">https://github.com/mpedramfar/Lean-game-maker</a></p>",
        "id": 197334893,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315551
    },
    {
        "content": "<p>The person to ping is <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span>, I think. Unless he's said he's taking a step back from development.</p>",
        "id": 197334942,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589315571
    },
    {
        "content": "<p>I thought it was this one? <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game\">https://github.com/ImperialCollegeLondon/natural_number_game</a></p>",
        "id": 197334954,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315575
    },
    {
        "content": "<p>I <em>think</em>, though obviously mohammad is the best person to comment, that the latter project is for the content of the game levels and the former is for the engine</p>",
        "id": 197335103,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315637
    },
    {
        "content": "<p>Ah, OK. Well, I'm still stuck on this level, so I think I'll just go off and make food now.</p>",
        "id": 197335210,
        "sender_full_name": "edderiofer",
        "timestamp": 1589315675
    },
    {
        "content": "<p>(I'm hoping \"stuck\" means \"still trying to think of a new idea\" and not \"there was a question I asked that didn't receive any attention, because everyone was talking about the meta problem of how to phrase the question\")</p>",
        "id": 197335237,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589315686
    },
    {
        "content": "<p>Still trying to think of a new idea.</p>",
        "id": 197336205,
        "sender_full_name": "edderiofer",
        "timestamp": 1589316125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197334726\">said</a>:</p>\n<blockquote>\n<p>well I think the biggest problem is that we don't have anyone doing active development on the NNG engine :(</p>\n</blockquote>\n<p>The latest commit was 5 days ago! :(<br>\nIs there any issue with the game? Or do you want some extra features?</p>",
        "id": 197337533,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589316699
    },
    {
        "content": "<p>Hmm. If I could prove that a is the successor of <em>some</em> number, since it's nonzero, this would be a lot easier, I think?</p>",
        "id": 197337664,
        "sender_full_name": "edderiofer",
        "timestamp": 1589316749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337533\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197334726\">said</a>:</p>\n<blockquote>\n<p>well I think the biggest problem is that we don't have anyone doing active development on the NNG engine :(</p>\n</blockquote>\n<p>The latest commit was 5 days ago! :(<br>\nIs there any issue with the game? Or do you want some extra features?</p>\n</blockquote>\n<p>hah, sorry! I was not following closely enough. Now I remember that you recently made it so that progress is saved! I think the work you're doing is very valuable :)</p>",
        "id": 197337759,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589316789
    },
    {
        "content": "<p>The feature request that came up in this thread was \"click a button to generate a MWE that could be copied and pasted into zulip\"</p>",
        "id": 197337826,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589316821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301323\">edderiofer</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337664\">said</a>:</p>\n<blockquote>\n<p>Hmm. If I could prove that a is the successor of <em>some</em> number, since it's nonzero, this would be a lot easier, I think?</p>\n</blockquote>\n<p>try <code>cases a</code></p>",
        "id": 197337860,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589316838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337826\">said</a>:</p>\n<blockquote>\n<p>The feature request that came up in this thread was \"click a button to generate a MWE that could be copied and pasted into zulip\"</p>\n</blockquote>\n<p>so it would have the URL of the current level plus the current proof script, and I guess also the statement of the theorem so that people who don't click the link can follow the discussion</p>",
        "id": 197338076,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589316927
    },
    {
        "content": "<p>Oh, right, I misread what <code>cases a</code> does in this case.</p>",
        "id": 197338190,
        "sender_full_name": "edderiofer",
        "timestamp": 1589316982
    },
    {
        "content": "<p>Is there a quick way to comment out a line?</p>",
        "id": 197338204,
        "sender_full_name": "edderiofer",
        "timestamp": 1589316991
    },
    {
        "content": "<p><code>-- comment</code></p>",
        "id": 197338228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589317011
    },
    {
        "content": "<p>ctrl+/ (or cmd+/ if you're on macOS) should be the keybind for line comment.</p>",
        "id": 197338293,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589317052
    },
    {
        "content": "<p>that's in VSCode, I think in the NNG you just have to type the comment character</p>",
        "id": 197338325,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317072
    },
    {
        "content": "<p>there's also block comments</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">like this</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 197338384,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197338325\">said</a>:</p>\n<blockquote>\n<p>that's in VSCode, I think in the NNG you just have to type the comment character</p>\n</blockquote>\n<p>Oh, you're right. For some reason I thought the web editors supported it too.</p>",
        "id": 197338719,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589317221
    },
    {
        "content": "<p>a lot of web editors have the same keybinding</p>",
        "id": 197338972,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317327
    },
    {
        "content": "<p>I use cmd-/ in jupyter and overleaf</p>",
        "id": 197338990,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317339
    },
    {
        "content": "<p>How do I flip an equality? If I have <code>a * b = 0</code> as a hypothesis, how do I turn it into <code>0 = a * b</code>?</p>",
        "id": 197339007,
        "sender_full_name": "edderiofer",
        "timestamp": 1589317347
    },
    {
        "content": "<p><code>symmetry at h</code></p>",
        "id": 197339109,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317402
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 197339182,
        "sender_full_name": "edderiofer",
        "timestamp": 1589317442
    },
    {
        "content": "<p>btw it's better for the server if we have new questions in new topics.</p>",
        "id": 197339246,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317461
    },
    {
        "content": "<p>mostly so that people later can read old conversations</p>",
        "id": 197339281,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589317483
    },
    {
        "content": "<p>Ah, alright.</p>",
        "id": 197339470,
        "sender_full_name": "edderiofer",
        "timestamp": 1589317572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197333395\">said</a>:</p>\n<blockquote>\n<p>Regarding <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> generation, it would be nice if NNG had a \"MWE button\" that takes the user's text together with the surrounding theorem and the imports and puts it in your clipboard. Since this has to be what is being sent to lean this should not be too difficult</p>\n</blockquote>\n<p>The things that are sent to the Lean server are not limited to what can be seen on the screen. There could be hidden lines. And several of the tactics used in the NNG are redefined to work slightly differently. So it won't really be a <em>minimal working example</em>. It generally won't work. It would need the imports and everything.</p>",
        "id": 197341445,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589318533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197338076\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337826\">said</a>:</p>\n<blockquote>\n<p>The feature request that came up in this thread was \"click a button to generate a MWE that could be copied and pasted into zulip\"</p>\n</blockquote>\n<p>so it would have the URL of the current level plus the current proof script, and I guess also the statement of the theorem so that people who don't click the link can follow the discussion</p>\n</blockquote>\n<p>That's doable, but it will only be useful for Zulip. The user won't be able to actually run the text that's copied into the clipboard. Wouldn't it be confusing for the users who don't use Zulip?</p>",
        "id": 197342140,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589318910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301323\">@edderiofer</span> did you get the answer to your question? I've only just arrived.</p>",
        "id": 197342568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589319120
    },
    {
        "content": "<p>Which of my many questions? :P</p>\n<p>(Yes.)</p>",
        "id": 197343711,
        "sender_full_name": "edderiofer",
        "timestamp": 1589319736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197341445\">said</a>:</p>\n<blockquote>\n<p>The things that are sent to the Lean server are not limited to what can be seen on the screen. There could be hidden lines. And several of the tactics used in the NNG are redefined to work slightly differently. So it won't really be a <em>minimal working example</em>. It generally won't work. It would need the imports and everything.</p>\n</blockquote>\n<p>I know. Unless there is a good reason to hide them (e.g. if the solution is in there), I'm thinking everything in the level file, including any hidden lines, but not the entirety of NNG.</p>",
        "id": 197344145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589319982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197342140\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197338076\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197337826\">said</a>:</p>\n<blockquote>\n<p>The feature request that came up in this thread was \"click a button to generate a MWE that could be copied and pasted into zulip\"</p>\n</blockquote>\n<p>so it would have the URL of the current level plus the current proof script, and I guess also the statement of the theorem so that people who don't click the link can follow the discussion</p>\n</blockquote>\n<p>That's doable, but it will only be useful for Zulip. The user won't be able to actually run the text that's copied into the clipboard. Wouldn't it be confusing for the users who don't use Zulip?</p>\n</blockquote>\n<p>hah, I guess around here we have some kind of bias towards zulip users :) <br>\nThe text that comes out is <em>pretty close</em> to working, which is plenty good if you're using it to talk to people, but maybe is disheartening if you're working on your own. I agree that it's not clear whether there's a version of this that's useful on average over all users.</p>",
        "id": 197344192,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320017
    },
    {
        "content": "<p>So there is the possibility that it's not a perfect MWE but it should get close enough for people to get the gist</p>",
        "id": 197344199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197344199\">said</a>:</p>\n<blockquote>\n<p>So there is the possibility that it's not a perfect MWE but it should get close enough for people to get the gist</p>\n</blockquote>\n<p>unless the people are not yet good at reading error messages</p>",
        "id": 197344248,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320066
    },
    {
        "content": "<p>I think if you want a faithful version of NNG offline you can download the repo and use vscode</p>",
        "id": 197344352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320126
    },
    {
        "content": "<p>oh yeah I forgot that is a thing</p>",
        "id": 197344386,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320152
    },
    {
        "content": "<p>why can't we just use the NNG website?</p>",
        "id": 197344409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589320181
    },
    {
        "content": "<p>but my goal here is to improve the state of affairs over</p>\n<blockquote>\n<p><code>\ninduction b,\napply h1 h2\n</code><br>\nit doesn't work</p>\n</blockquote>",
        "id": 197344422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320190
    },
    {
        "content": "<p>well I think the goal is to make it so that first time posters are more likely to post a complete thing</p>",
        "id": 197344529,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320229
    },
    {
        "content": "<p>having them link us to the NNG website is good</p>",
        "id": 197344553,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320244
    },
    {
        "content": "<p>it also requires me to load a link, which may be more or less complicated if I'm on a phone or something</p>",
        "id": 197344635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320301
    },
    {
        "content": "<p>having inline code is good</p>",
        "id": 197344649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320310
    },
    {
        "content": "<p>but when people type text into NNG all the context is gone. I want some bare minimum of context to understand the question. I have no idea what world 4 level 7 is</p>",
        "id": 197344761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320368
    },
    {
        "content": "<p>I think it'd be more useful to have the NNG website give the user a link to the level they're solving with their code filled in</p>",
        "id": 197345161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589320593
    },
    {
        "content": "<p>Then you get more of the true context (including whatever the level is supposed to be teaching, etc)</p>",
        "id": 197345192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589320630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> while you're here, I pushed a new version of NNG recently, and now I have a FAQ and thanks to Mohammad, save game functionality. You seemed to have some very clear visions for what this game should look like and we recently had a conversation about it; I am hoping I dealt with some of your comments in v1.3.2 but I'd be very happy to hear if you still had more.</p>",
        "id": 197345211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589320643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> as of recently we can actually link directly to that level (this is new as of about last week), so it will be much easier in the future. I don't have any idea either, and when I look in the source code the worlds are called different things to what the users call them which makes life even worse :-)</p>",
        "id": 197345331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589320701
    },
    {
        "content": "<p>Not only that, remember that I am using a modified rw, induction, cases etc, so these things are actually perhaps not appropriate for mwes in the traditional sense.</p>",
        "id": 197345379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589320731
    },
    {
        "content": "<p>My main complaint is about \"raw\" tactic scripts. Even if it doesn't run, seeing <code>theorem foo : ...</code> at the start makes things a lot easier</p>",
        "id": 197345459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589320781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197345331\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> as of recently we can actually link directly to that level (this is new as of about last week), so it will be much easier in the future. I don't have any idea either, and when I look in the source code the worlds are called different things to what the users call them which makes life even worse :-)</p>\n</blockquote>\n<p>We added some text to the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> page telling people to use level links when they post in zulip chat :)<br>\n(I'll think a bit on your other question.)</p>",
        "id": 197345472,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589320788
    },
    {
        "content": "<p>I think there are weird features or hacks you can use to cause some surrounding text to be included if the user copies their text, but not sure if advisable</p>",
        "id": 197345811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589320967
    },
    {
        "content": "<p>An idea I had was to put the theorem statements into the editor together with the proof, but make the first and the last line read-only. So the user can't edit the statement, but  when they want to copy, they can select all of it. Unfortunately, monaco-editor, which is used in the NNG and other places with Lean on the web, doesn't have this option. One way to go around it would be to use another text editor, like Ace editor, which has this function. But that seems to be very difficult. I would need to redefine the Lean syntax and autocompletion and highlighting and everything for a new editor. Besides, this seems to be the only way Ace editor is better. Monaco editor is the web-based version of VS code, which is why things work so well.</p>",
        "id": 197348506,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589322636
    },
    {
        "content": "<p>Maybe just have a button which has the effect of copying the user's text together with the surrounding statement/tactic?</p>",
        "id": 197348680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589322726
    },
    {
        "content": "<p>I wrote some Lean integration for <a href=\"https://codemirror.net/\">CodeMirror</a> for my Observable notebooks which I could try to extract if there's interest.</p>",
        "id": 197348686,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589322733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197348680\">said</a>:</p>\n<blockquote>\n<p>Maybe just have a button which has the effect of copying the user's text together with the surrounding statement/tactic?</p>\n</blockquote>\n<p>Yeah, I'm starting to think adding a button that would copy the content and the statement would be the most efficient way. The main page of NNG has a link to a FAQ page describing why Lean is different than the NNG, so I guess it wouldn't be that confusing for a user when they see it doesn't work.</p>",
        "id": 197349106,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589323054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started/near/197348686\">said</a>:</p>\n<blockquote>\n<p>I wrote some Lean integration for <a href=\"https://codemirror.net/\">CodeMirror</a> for my Observable notebooks which I could try to extract if there's interest.</p>\n</blockquote>\n<p>That might be useful, but I'll go with the simpler approach this time. :)<br>\nIt's on github, right? Why didn't you use monaco-editor?</p>",
        "id": 197349296,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589323199
    },
    {
        "content": "<blockquote>\n<p>It's on github, right? Why didn't you use monaco-editor?</p>\n</blockquote>\n<p>Yes, CodeMirror is on github. I remember thinking that monaco would be too heavy-weight (in terms of file-size) to include, and it also looked to be a lot of work to bundle it properly for my use-case. In the end it wasn't too hard to write a Lean integration for CodeMirror following what was already done for monaco in the lean-web-editor, since the CodeMirror API is fairly simple.</p>",
        "id": 197350520,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589323953
    },
    {
        "content": "<p>That's good to know. My impression was that it would be difficult to use another editor.</p>",
        "id": 197358501,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1589331564
    },
    {
        "content": "<p>I forgot to mention it here. The button is added in the <code>Lean-game-maker</code> repo. It will be there in the next update of the game. It took a while since I was fixing a few bugs.</p>",
        "id": 198495876,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1590182096
    }
]