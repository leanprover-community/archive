[
    {
        "content": "<p>Is there an easy way to access the LHS / RHS of an equation without rewriting it?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>here, I'd like to do something like,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h_rhs</span><span class=\"o\">:</span> <span class=\"n\">hab</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">=</span> <span class=\"n\">hbc</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"k\">calc</span> <span class=\"n\">hab</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"n\">hab</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">hbc</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">h_rhs</span><span class=\"o\">,</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">hbc</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>Is that kind of thing possible, or would I have to go and copy the whole sub-expression?</p>",
        "id": 197148292,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589205328
    },
    {
        "content": "<p>Do you mean something like <code>conv</code>?</p>",
        "id": 197148398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589205363
    },
    {
        "content": "<p>You can define them yourself:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_rhs</span><span class=\"o\">:</span> <span class=\"n\">hab</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"bp\">=</span> <span class=\"n\">hbc</span><span class=\"bp\">.</span><span class=\"n\">rhs</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"k\">calc</span> <span class=\"n\">hab</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"n\">hab</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">hab</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">hbc</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">h_rhs</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">hbc</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">hbc</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197149683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589205904
    },
    {
        "content": "<p>(I had to fix a few math and syntax errors)</p>",
        "id": 197149725,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589205930
    },
    {
        "content": "<p>you should charge extra</p>",
        "id": 197149778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589205949
    },
    {
        "content": "<p>oh wow, I didn't know you could extend the language like that. That's exactly what I was looking for. This is a lot more refactoring-friendly.</p>",
        "id": 197149954,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589206009
    },
    {
        "content": "<p>Every theorem you prove is extending the language in that way, right?</p>",
        "id": 197150011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589206032
    },
    {
        "content": "<p><code>hbc.rhs</code> is just syntax sugar for <code>eq.rhs hbc</code>, because the type of <code>hbc</code> is <code>eq (something)</code></p>",
        "id": 197150083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589206067
    },
    {
        "content": "<p>We should have this in mathlib actually. This is a very natural question</p>",
        "id": 197150099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589206077
    },
    {
        "content": "<p>yeah this is really cool</p>",
        "id": 197150162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589206089
    }
]