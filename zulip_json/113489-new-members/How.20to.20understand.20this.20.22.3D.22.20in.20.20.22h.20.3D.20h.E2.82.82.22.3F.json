[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"n\">h₂</span> <span class=\"bp\">↦</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 405753231,
        "sender_full_name": "chenjulang",
        "timestamp": 1701670597
    },
    {
        "content": "<p>Waiting......</p>",
        "id": 405753336,
        "sender_full_name": "chenjulang",
        "timestamp": 1701670664
    },
    {
        "content": "<p>It's proof irrelevance! <code>i ∈ s</code> is a <code>Prop</code> and any two terms of the same <code>Prop</code> are definitionally equal.</p>",
        "id": 405753410,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701670686
    },
    {
        "content": "<p>Oh</p>",
        "id": 405753467,
        "sender_full_name": "chenjulang",
        "timestamp": 1701670719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"582393\">@Yongyi Chen</span>  Can I change it into the following theorem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span><span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"n\">h5</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Iff.to_eq</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span>  <span class=\"n\">h6</span>\n</code></pre></div>",
        "id": 405755116,
        "sender_full_name": "chenjulang",
        "timestamp": 1701671557
    },
    {
        "content": "<p>But I cannot prove it......</p>",
        "id": 405755141,
        "sender_full_name": "chenjulang",
        "timestamp": 1701671580
    },
    {
        "content": "<p>After some digging, I have found that the syntax <code>(h h₂ : Prop := i ∈ s)</code> means that <code>h</code> and <code>h₂</code> are optional parameters of type <code>Prop</code> with default values <code>i ∈ s</code>. Of course this means the user of the theorem can set <code>h</code> and <code>h₂</code> to whatever <code>Prop</code>s they like, and so <code>h = h₂</code> cannot be proved.</p>",
        "id": 405758439,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701673106
    },
    {
        "content": "<p>like this , Right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">h1</span> <span class=\"c1\">-- h1 : 0 &lt; 1</span>\n<span class=\"k\">#check</span> <span class=\"n\">h2</span> <span class=\"c1\">-- h2 : 0 &lt; 1</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo2</span><span class=\"o\">:</span>  <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 405760275,
        "sender_full_name": "chenjulang",
        "timestamp": 1701673878
    },
    {
        "content": "<p>I don't know what you mean by \"like this.\"</p>",
        "id": 405760427,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701673930
    },
    {
        "content": "<p>If h1 and h2 has the same \"type\" , they are equal</p>",
        "id": 405760519,
        "sender_full_name": "chenjulang",
        "timestamp": 1701673971
    },
    {
        "content": "<p>But these h1 and h2 is not equal. <br>\nSeems like self-defined type such as \"0 &lt; 1\" would work, <br>\nBut System-defined type such as \"N\" cannot work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">h1</span> <span class=\"c1\">-- h1 : ℕ</span>\n<span class=\"k\">#check</span> <span class=\"n\">h2</span> <span class=\"c1\">-- h2 : ℕ</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo3</span><span class=\"o\">:</span>  <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 405761753,
        "sender_full_name": "chenjulang",
        "timestamp": 1701674504
    },
    {
        "content": "<p>You may benefit from reading this chapter of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>: <a href=\"https://lean-lang.org/theorem_proving_in_lean4/dependent_type_theory.html\">https://lean-lang.org/theorem_proving_in_lean4/dependent_type_theory.html</a></p>",
        "id": 405765943,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701676364
    },
    {
        "content": "<p>Alright</p>",
        "id": 405767498,
        "sender_full_name": "chenjulang",
        "timestamp": 1701677042
    }
]