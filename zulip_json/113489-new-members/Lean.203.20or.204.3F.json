[
    {
        "content": "<p>Hello, for simple hobbyist type uses, should I be using version 3 or 4? Thanks</p>",
        "id": 249534749,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1629068595
    },
    {
        "content": "<p>what do you want to be doing? we'll soon be migrating mathlib to lean4 and most development going forwards, but not yet. lean4 is a far better programming language than lean3, though</p>",
        "id": 249535332,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629069647
    },
    {
        "content": "<p>I'm going through \"seven sketches in compositionality\" with a reading group, thought it would be cool if we did some of the exercises in there in something like lean. So i am not wanting to have like a complete library with everything already implemented, but rather we'd do that ourselves as a learning tool. I think like basic sets and arithmetic would be enough for libraries(?)</p>",
        "id": 249535760,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1629070440
    },
    {
        "content": "<p>I'd suggest using Lean 3 for this.  It's nice having mathlib on hand for those things you don't want to reimplement from scratch.  There are also  more Lean 3 learning resources at the moment.</p>\n<p>If you haven't already, I'd also suggest going through some tutorials to get your feet wet before diving into formalizing things from a book.  Seven Sketches in Compositionality is fairly formal, but I think there will still be many technical challenges that will be difficult to overcome without some Lean experience.</p>",
        "id": 249536419,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629071528
    },
    {
        "content": "<p>Great, thank you for the advice. Yes I'll definitely try to go through some tutorials first.</p>",
        "id": 249536864,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1629072173
    },
    {
        "content": "<p>lean 4</p>",
        "id": 253093792,
        "sender_full_name": "Eli  Mazaheri",
        "timestamp": 1631541574
    },
    {
        "content": "<p>Right now the question is the same as \"do you want access to a gigantic mathematics library?\". Note that there is <a href=\"https://github.com/leanprover-community/mathlib4\">mathlib4</a> which is quite like a \"hobby\" project now, it's being used as an experimental manual port, and basic stuff like sets are there by now, but it's of course nothing compared to mathlib := mathlib3</p>",
        "id": 253094152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631541683
    },
    {
        "content": "<p>I am co-running a weekly meeting with a group of math undergrads to learn the basics of Lean. We intent to formalize some easy math things. I notice that the installation <a href=\"https://leanprover-community.github.io/install/windows.html\">link</a> only mentions Lean 4 but Kevin Buzzard's 2023 <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2023\">course</a> uses Lean 3. Which one should I prefer?</p>",
        "id": 394474438,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1696265346
    },
    {
        "content": "<p>Lean 4 definitely.</p>",
        "id": 394474522,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1696265381
    },
    {
        "content": "<p>Kevin Buzzard's 2023 course seems to have been happening before Mathlib was ported to Lean 4.</p>",
        "id": 394474718,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1696265444
    },
    {
        "content": "<p>What does \"Lean 4 is currently released as milestone releases towards a first official release.\" mean <a href=\"https://lean-lang.org/download/\">here</a>? I read it as \"Lean 4 is not yet stable, use at your own risk\"</p>",
        "id": 394475550,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1696265731
    },
    {
        "content": "<p>That sentence is outdated. The first official release happened a few weeks ago.</p>",
        "id": 394475692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696265775
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 394475784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696265811
    },
    {
        "content": "<p>Can I still use projects written in Lean 3 if I use Lean 4 myself? Is it backwards compatible? Last year we went through Kevin Buzzard's formalising-mathematics-2022 and I was going to do the same this year but I can't even get the project with <code>leanproject</code> any more</p>",
        "id": 394478709,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1696266895
    },
    {
        "content": "<p>Nope, there's no backwards compatibility.</p>",
        "id": 394478816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696266929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> is there any reason why you want to use that source rather than one of the official ones listed at <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a>?</p>",
        "id": 394482526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696268267
    },
    {
        "content": "<p>My next course in Jan 2024 will be a lean 4 version of my course. Until I translate it in December I think <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> is an excellent place to start.</p>",
        "id": 394483717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696268664
    },
    {
        "content": "<p>I did not know about those official resources because I think they did not exist a couple of years ago when I first started learning Lean. Thank you for pointing them out to me. MIL looks like an excellent start!</p>",
        "id": 394487554,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1696270200
    },
    {
        "content": "<p>(That came out slightly wrong: even after I've translated my course into Lean 4, <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> will still be an excellent place to start!)</p>",
        "id": 394487914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696270338
    },
    {
        "content": "<p>I miss the party hat in Lean 4! Why is there no more party hat?</p>",
        "id": 394490259,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1696271325
    },
    {
        "content": "<p>Because there is no more <code>begin/end</code> it's apparently now far too confusing to have party hats, because they sometimes appear when you're not done. The issue is with the <code>end</code>, which is no longer there. If you are happy to use a <code>by/tada</code> block like we used to use <code>begin/end</code> blocks then you can use this code written by Mario:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"tada\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getUnsolvedGoals</span>\n  <span class=\"k\">if</span> <span class=\"n\">gs.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">logInfo</span> <span class=\"s2\">\"Goals accomplished üéâ\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Term.reportUnsolvedGoals</span> <span class=\"n\">gs</span>\n    <span class=\"n\">throwAbortTactic</span>\n</code></pre></div>",
        "id": 394490716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696271504
    },
    {
        "content": "<p>PS: I believe the tada emoji ( <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> ) is actually a depiction of a <a href=\"https://en.wikipedia.org/wiki/Party_popper\">party popper</a>, not a hat</p>",
        "id": 394599878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696327424
    },
    {
        "content": "<p>I encountered the problem message \" invalid field 'ltr', the environment does not contain 'Iff.ltr'\". Any idea how to fix it?</p>",
        "id": 395415343,
        "sender_full_name": "Ming Li",
        "timestamp": 1696682089
    },
    {
        "content": "<p>Try <code>.mp</code></p>",
        "id": 395415891,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696682513
    },
    {
        "content": "<p>Though I don't know where you got it in lean 3, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iff.ltr\">docs3#iff.ltr</a> doesn't seem to find it</p>",
        "id": 395416021,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696682607
    },
    {
        "content": "<p>Thanks.<br>\nI am learning codes from  tutorials which used  lean 3.  But I am using lean 4.</p>",
        "id": 395418226,
        "sender_full_name": "Ming Li",
        "timestamp": 1696684141
    },
    {
        "content": "<p>This is obviously a very bad idea. Why aren't you following a Lean 4 tutorial?</p>",
        "id": 395423969,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696688149
    },
    {
        "content": "<p>I did follow lean4 tutorials but for some interesting mathematical results,  I traced back some  in lean 3.</p>",
        "id": 395473834,
        "sender_full_name": "Ming Li",
        "timestamp": 1696729140
    },
    {
        "content": "<p>Could you tell more precisely why tutorial you felt you needed to read in Lean 3 and what are those interesting mathematical results?</p>",
        "id": 395478835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696732601
    },
    {
        "content": "<p>That is quite random. For example,  today I tried an example of MIL in Mathlib4 (not alone in MIL). It gave me an error message \"ambiguous, possible interpretations  _root_.Prime x \". So I have to find a solution on internat, which suggests me to close \"open Nat\" and use \"Nat.Prime\" instead.  Like this, sometimes, the suggestion leads me to lean3...</p>\n<p>By the way, I notice that \"theorem .... := by\"  sometimes ends withoud \"by\", or with \"by {....}\", why? This might be a dumb question, sorry.</p>\n<p>At this moment, I am interested in \"the Schr√∂der-Bernstein Theorem\".  It seems Lean uses the constructive way to prove the result.  I am wondering if it can be done in Lean by non-constructive way as in math.</p>",
        "id": 395503876,
        "sender_full_name": "Ming Li",
        "timestamp": 1696750674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654654\">ming</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.203.20or.204.3F/near/395503876\">said</a>:</p>\n<blockquote>\n<p>That is quite random. For example,  today I tried an example of MIL in Mathlib4 (not alone in MIL). It gave me an error message \"ambiguous, possible interpretations  _root_.Prime x \". So I have to find a solution on internat, which suggests me to close \"open Nat\" and use \"Nat.Prime\" instead.  Like this, sometimes, the suggestion leads me to lean3...</p>\n</blockquote>\n<p>I don't see how that is different in Lean 3 and Lean 4. And I think you truncated the error message, <code>Nat.Prime</code> should be mentioned too.</p>\n<blockquote>\n<p>By the way, I notice that \"theorem .... := by\"  sometimes ends without \"by\", or with \"by {....}\", why? This might be a dumb question, sorry.</p>\n</blockquote>\n<p>I you saw <code>:=</code> without <code>by</code> in MIL you should try to report it since we always expect a tactic proof, so we should be consistent in always including <code>by</code> in the exercise. In general what goes after <code>:=</code> is a proof term that can be either input directly or constructed using a tactic script that begins with <code>by</code>.</p>\n<blockquote>\n<p>At this moment, I am interested in \"the Schr√∂der-Bernstein Theorem\".  It seems Lean uses the constructive way to prove the result.  I am wondering if it can be done in Lean by non-constructive way as in math.</p>\n</blockquote>\n<p>I am not sure which proof you have in mind, but the answer is most probably \"yes\". The reason why your question is confusing it that the proof in MIL is definitely not constructive. I don't think there any constructive proof of this theorem.</p>",
        "id": 395548987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696776199
    },
    {
        "content": "<p>The proof of SBT in my mind is to use the map on the power set  of  f-domain constructed by  composition of f and g and complement of sets has a fixed point.  In this case,  the injections of f and g are not needed. In stead of constructing bijection, it only has existence of the fixed point as a set.  As you said, both are not constructive in sense of Turing machine..</p>",
        "id": 395554548,
        "sender_full_name": "Ming Li",
        "timestamp": 1696780164
    }
]