[
    {
        "content": "<p>I'm trying to prove <code>( y :ℝ ) : (cexp (-y)).im = 0</code>. <code>exp_ofReal_im</code> does (almost) exactly this for <code>( y :ℝ ) : (cexp (y)).im = 0</code> (n.b. no <code>-</code> sign).<br>\nFor this reason <code>exact exp_ofReal_im (-y)</code> does not  work yielding a conversion hell:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">exp_ofReal_im</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">cexp</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-↑</span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>which runs into <a href=\"https://github.com/leanprover/lean4/issues/2831\">https://github.com/leanprover/lean4/issues/2831</a> if I try to do the obvious solution of <code>exact exp_ofReal_im (-↑y)</code>.<br>\nUsing <code>rw [Complex.exp_neg]</code> yields <code>(cexp ↑y)⁻¹.im = 0</code> as the goal state, which doesn't feel any closer.</p>\n<p>Am I stuck here? or is there a different way to convince lean that the negative of a real is still a real?</p>",
        "id": 400703462,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699350757
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 400703795,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699350841
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">exp_ofReal_im</span> <span class=\"o\">(</span><span class=\"bp\">-↑</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think</p>",
        "id": 400704601,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699351025
    },
    {
        "content": "<p>If you click the little button with the arrow that pops up in the top right of the code block when you hover over it, you'll end up on the playground website, and you'll see that the error you hit there is not the one you're asking about</p>",
        "id": 400736630,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699362663
    },
    {
        "content": "<p>I think it can be solved with <code>norm_cast</code>?</p>",
        "id": 400748964,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1699366661
    },
    {
        "content": "<p><code>example (y : ℝ) : (cexp (-y)).im = 0 := by norm_cast</code></p>",
        "id": 400749385,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1699366797
    },
    {
        "content": "<p>This works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Complex.ofReal_neg</span><span class=\"o\">,</span> <span class=\"n\">Complex.exp_ofReal_im</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400750288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699367073
    },
    {
        "content": "<p>In your example, the function <code>cexp</code> is not defined, so Lean can not understand what you want to prove. You can notice that by going to the first error, which is in the lemma statement, not its proof.</p>",
        "id": 400750321,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699367084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 400816864,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699391527
    }
]