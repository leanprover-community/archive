[
    {
        "content": "<p>Hi, I'm trying to prove the following simple result about Fin types</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">only_one</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk_eq_mk</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">r</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>The last \"simp\" there produces the following goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">r</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">r</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>How do I unify <code>r</code> and <code>r✝</code>?</p>\n<p>For the example above, I know that the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Fin.mk_eq_mk.mpr</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 362929806,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1685681833
    },
    {
        "content": "<p>In this case, you can prove it as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 362948923,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685689730
    },
    {
        "content": "<p>In your initial proof, <code>simp</code> does indeed what you want, as you can see from the new <code>r : Fin 1</code> hypothesis.</p>\n<p>I think that the reason for the new hygienic goal is due to the fact that <code>rewrite</code> first creates the new, rewritten declaration and then tries to replace the old one with the new one.  In your situation, the new one is formed, however, since the Type of <code>r</code> is not \"equal\" to the Type after the rewrite, the replace step does not work.  Lean therefore leaves the old declaration <code>r</code> as unreachable, which is what you observe from the <code>r✝</code>.</p>",
        "id": 362951547,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685690527
    },
    {
        "content": "<p>Honestly, I do not really know what kind of \"equality\" is needed for the replacement step to be successful.  In your case, <code>Fin (2 - 1)</code> and <code>Fin 1</code> are defeq and even syntactically equal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- succeeds, so defeq</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>  <span class=\"c1\">-- succeeds, so actually also syntactically equal</span>\n</code></pre></div>\n<p>I really am not sure...</p>",
        "id": 362952512,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685690822
    },
    {
        "content": "<p>I'd like to understand this better -- specifically, the difference between Defeq and propositional inequality, and when I should expect rewrite tactic to work. Is there a good reference for this? From what you mention, it looks like it is generally not possible to reuse theorems like <code>Fin.coe_fin_one (a: Fin 1) : a = 0</code>.</p>\n<p>Here are some experiments I have been doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span> <span class=\"c1\">-- preserves old declaration</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">b</span> <span class=\"c1\">-- preserves old declaration</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span>  <span class=\"c1\">-- does not preserve old declaration. Are all values of type Prop \"equal\"?</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h0</span>  <span class=\"c1\">-- rewrites m to n everywhere.</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Could you explain what is going on here?</p>",
        "id": 363147446,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1685734285
    },
    {
        "content": "<p>I think the relevant difference here is \"appears in the type of something else in your context\" vs not. If you rewrite something in the local context but something else was already referring to it, you need to make the substitution in multiple places simultaneously</p>",
        "id": 363183422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685747425
    },
    {
        "content": "<p>That's a hard (maybe impossible?) problem in general; <code>rw</code> certainly can't do it, and <code>cases</code> only works if one side of the equality is a free variable.</p>",
        "id": 363183661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685747548
    },
    {
        "content": "<p>Okay, I get it. Thank you!</p>",
        "id": 363207043,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1685765171
    }
]