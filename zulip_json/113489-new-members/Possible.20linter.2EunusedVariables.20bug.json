[
    {
        "content": "<p>I got a wrong positive of linter.unusedVariables; a reduced working example is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sor</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Game</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Game.residual</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">G.T</span><span class=\"o\">):</span> <span class=\"n\">Game</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">G.T</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">sew</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">∈</span> <span class=\"n\">G.T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">G.residual</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">T</span><span class=\"o\">):</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eqPre</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"bp\">∀</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">G.residual</span> <span class=\"o\">(</span><span class=\"n\">sor</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">T</span><span class=\"o\">):</span>\n  <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">Game.residual</span> <span class=\"o\">(</span><span class=\"n\">Game.residual</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">G.T</span><span class=\"o\">))</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">sew</span> <span class=\"n\">f</span> <span class=\"c1\">--this line causes \"unused variable 'str'\", although str is used</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">x</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sor</span> <span class=\"n\">str</span> <span class=\"o\">}</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sor</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 401429971,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1699645647
    },
    {
        "content": "<p>Should I maybe post this somewhere else?</p>",
        "id": 401831876,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1699903871
    },
    {
        "content": "<p>Here is fine, let's see if I can drum up some more eyes on your question by observing that changing the line to <code>have str := sew f</code> makes the warning go away even though it's data.</p>\n<p>Note that your definition <code>sor</code> is marked as a <code>theorem</code> by you, but its conclusion is not a true-false statement, it's data. If you put <code>#lint</code> at the bottom of your code you'll see this issue is flagged. I suspect that sorrying data (which is what you're doing here) is causing the linter to be confused. If you actually fill in a definition of <code>sor</code> does the problem go away?</p>",
        "id": 401832904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699904328
    },
    {
        "content": "<p>If I try to unsorry your data then I get type mismatch errors. I am going to go with \"sorrying data confuses the linter\" as a response to your question, but perhaps others can be more precise. But don't sorry data anyway :-)</p>",
        "id": 401833226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699904488
    },
    {
        "content": "<p>Oh, I used this universal sorry function only to reduce this to a minimal working example, but I have a much more complicated sorry-free example</p>",
        "id": 401833314,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1699904524
    },
    {
        "content": "<p>I'll try to produce a minimal working example without sorrying data</p>",
        "id": 401833345,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1699904540
    },
    {
        "content": "<p>Okay, this was easily fixed and not the issue (see the edit)</p>",
        "id": 401833481,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1699904632
    },
    {
        "content": "<p>I think the linter is complaining that you never use the <em>value</em> of <code>str</code>, just its type. Quite whether it should be complaining is a question for someone else, but again if you change <code>let</code> to <code>have</code> then the code still compiles and the linter stops complaining.</p>",
        "id": 401834967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699905306
    },
    {
        "content": "<p>I don't think this is the case in my nonreduced example (there, changing \"let\" to \"have\" leads to a failure of the proof). Although this is probably not really helpful, I'll add the file here, however without the imported ones:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">BorelDet.build_strategies</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DiscreteTopology</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">DTree</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Player</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">winningPos</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">G.T</span><span class=\"o\">)(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Strategy</span> <span class=\"o\">(</span><span class=\"n\">G.residual</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"n\">Player.zero</span><span class=\"o\">),</span> <span class=\"n\">s.winning</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">winningPos_Iff_exQS</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">winningPos</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:=</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">G.T</span><span class=\"o\">)(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">QuasiStrategy</span> <span class=\"o\">(</span><span class=\"n\">G.residual</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"n\">Player.zero</span><span class=\"o\">),</span> <span class=\"n\">s.winning</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists_congr</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">existsWinning_Iff_exQuasiWinning</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">waitingPre</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Player</span><span class=\"o\">):</span> <span class=\"n\">PreStrategy</span> <span class=\"n\">G.T</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">++</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">∈</span> <span class=\"n\">G.T</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">winningPos</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">++</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"o\">}</span>\n  <span class=\"n\">valid</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">ha.left</span>\n<span class=\"kd\">def</span> <span class=\"n\">waitingQuasi</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Player</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">waitingPre</span> <span class=\"n\">G</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">extQ</span> <span class=\"n\">G.hT</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">QuasiStrategy.castWinning</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">G'</span><span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">=</span><span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">QuasiStrategy</span> <span class=\"n\">G.T</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">QuasiStrategy</span> <span class=\"n\">G'.T</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">winning</span> <span class=\"bp\">↔</span> <span class=\"n\">s.winning</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">waitingQuasi.eqPre</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Player</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬∃</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Strategy</span> <span class=\"n\">G.T</span> <span class=\"n\">p.swap</span><span class=\"o\">,</span> <span class=\"n\">s.winning</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">waitingQuasi</span> <span class=\"n\">G</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtree</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">waitingPre</span> <span class=\"n\">G</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtree</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">waitingPre</span> <span class=\"n\">G</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">preIsQuasi</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hp</span> <span class=\"n\">hs</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hc</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">waitingPre</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n  <span class=\"k\">have</span> <span class=\"n\">tpeq</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">G.residual</span> <span class=\"n\">hs.fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">T</span><span class=\"o\">):</span>\n    <span class=\"n\">G.residual</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G.residual</span> <span class=\"n\">hs.fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">residual</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">G.residual</span> <span class=\"n\">hs.fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">tpeq</span> <span class=\"n\">h</span><span class=\"o\">])</span>\n    <span class=\"o\">((</span><span class=\"n\">winningPos_Iff_exQS</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd.choose</span>\n  <span class=\"k\">let</span> <span class=\"n\">_str</span> <span class=\"o\">:=</span> <span class=\"n\">QuasiStrategy.sew</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">wstr</span> <span class=\"o\">:=</span> <span class=\"n\">QuasiStrategy.sew.winning</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"c1\">--TODO rename back after linter bug is fixed</span>\n    <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">QuasiStrategy.castWinning</span> <span class=\"o\">(</span><span class=\"n\">tpeq</span> <span class=\"n\">_</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"o\">((</span><span class=\"n\">winningPos_Iff_exQS</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd.choose_spec</span><span class=\"o\">)</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">List.reverseRecOn</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">b</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">existsWinning_Iff_exQuasiWinning.mpr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">_str</span> <span class=\"o\">}</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">List.reverseRecOn</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">c</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">existsWinning_Iff_exQuasiWinning.mpr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">_str.firstMove</span><span class=\"bp\">;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">QuasiStrategy.firstMove.isWinning</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">wstr</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">[</span><span class=\"n\">position.change</span><span class=\"o\">,</span> <span class=\"n\">Player.swap_swap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span>\n    <span class=\"k\">have</span> <span class=\"n\">hs'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.snd</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:=</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:=</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.prefix_append</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hs'.right</span>\n    <span class=\"n\">use</span> <span class=\"n\">hs'.left</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">existsWinning_Iff_exQuasiWinning.mpr</span>\n    <span class=\"k\">let</span> <span class=\"n\">str'</span><span class=\"o\">:</span> <span class=\"n\">QuasiStrategy</span> <span class=\"o\">((</span><span class=\"n\">G.residual</span> <span class=\"o\">(</span><span class=\"n\">G.T.isTree</span> <span class=\"n\">hs.fst</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">residual</span> <span class=\"n\">hs.fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"n\">Player.one</span>\n      <span class=\"o\">:=</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">_str</span>\n    <span class=\"n\">use</span> <span class=\"n\">str'.firstMove</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">QuasiStrategy.firstMove.isWinning</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">QuasiStrategy.castWinning</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">wstr</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">waitingPre.winsClosed</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">G.payoff</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">waitingPre</span> <span class=\"n\">G</span> <span class=\"n\">Player.zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">winning</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"o\">[</span><span class=\"n\">Player.payoff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">closure_eq_iff_isClosed.mpr</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mem_closure_iff_nhds_basis</span> <span class=\"o\">(</span><span class=\"n\">isBasis_basic_open</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hsu</span><span class=\"o\">⟩:</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">↾</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">++</span><span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ne_nil_has_last</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">List.length</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpy</span><span class=\"o\">:</span> <span class=\"n\">position</span> <span class=\"n\">y</span> <span class=\"n\">Player.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">position.change</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:=</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:=</span><span class=\"n\">Player.one</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hsu</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">,</span> <span class=\"n\">Nat.even_add_one</span><span class=\"o\">]</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↾</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">extend_sub</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hsu</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hT</span><span class=\"o\">,</span> <span class=\"n\">nwin</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">waitingPre</span> <span class=\"n\">G</span> <span class=\"n\">Player.zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtree_is_compat</span> <span class=\"n\">hpy</span> <span class=\"n\">ha</span>\n\n  <span class=\"n\">by_contra</span> <span class=\"n\">hfa</span><span class=\"bp\">;</span> <span class=\"n\">simp_rw</span><span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_and'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfa</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nwin</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">hT</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">existsWinning_Iff_exQuasiWinning.mpr</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">Game.voidStrategy</span> <span class=\"n\">_</span> <span class=\"n\">Player.zero</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a'</span> <span class=\"n\">ha'</span><span class=\"bp\">;</span> <span class=\"n\">specialize</span> <span class=\"n\">hfa</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">++</span><span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span><span class=\"bp\">++</span><span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">basic_open_iff_restr</span><span class=\"o\">,</span> <span class=\"n\">basic_open_iff_restr.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hsu</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">x.length</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">x.length</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">append_restrict</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↾</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x.length</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">a'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]),</span> <span class=\"n\">hx</span><span class=\"o\">])</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">[</span><span class=\"n\">Player.payoff</span><span class=\"o\">,</span> <span class=\"n\">Game.residual</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">,</span> <span class=\"n\">iff_true</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hpy</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">Nat.even_add_one</span><span class=\"o\">,</span> <span class=\"n\">hpy</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ha'</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"n\">hfa</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">gale_stewart_prec</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">G.payoff</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"bp\">¬∃</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Strategy</span> <span class=\"n\">G.T</span> <span class=\"n\">Player.one</span><span class=\"o\">,</span> <span class=\"n\">s.winning</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">waitingQuasi</span> <span class=\"n\">G</span> <span class=\"n\">Player.zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">winning</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">[</span><span class=\"n\">PreStrategy.winning</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">waitingQuasi.eqPre</span> <span class=\"n\">h'</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">waitingPre.winsClosed</span> <span class=\"n\">h</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">gale_stewart</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">G.payoff</span><span class=\"o\">):</span> <span class=\"n\">determined</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Strategy</span> <span class=\"n\">G.T</span> <span class=\"n\">Player.one</span><span class=\"o\">,</span> <span class=\"n\">s.winning</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Player.one</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">determined_Iff_quasiDetermined.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">Player.zero</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">gale_stewart_prec</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 401835632,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1699905577
    },
    {
        "content": "<p>yeah there's definitely something beyond my pay grade going on.</p>",
        "id": 401836038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699905702
    },
    {
        "content": "<p>Okay, then I guess I'll wait for a linter expert. Anyways, thank you</p>",
        "id": 401836346,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1699905789
    },
    {
        "content": "<p>A bunch of experts have the new members stream muted because it's mostly beginner questions. Your question is definitely not a beginner question so you could ask again in <a class=\"stream\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4\">#std4</a> , which (I believe) is the repo where the relevant linter is defined.</p>",
        "id": 401836856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699905963
    },
    {
        "content": "<p>For future readers: Reposted as <a href=\"#narrow/stream/348111-std4/topic/linter.2EunusedVariables.20bug/near/401839285\">https://leanprover.zulipchat.com/#narrow/stream/348111-std4/topic/linter.2EunusedVariables.20bug/near/401839285</a></p>",
        "id": 401840817,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1699907783
    },
    {
        "content": "<p>It's not in <a class=\"stream\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4\">#std4</a>, it's in core. But also, quoting myself from a <a href=\"https://github.com/leanprover/lean4/issues/2088#issuecomment-1794100609\">similar issue</a>:</p>\n<blockquote>\n<p>In general, issues with <code>unusedVariables</code> linter are usually not actually linter issues but rather the most obvious sign that there is a bug in elaboration and/or the info tree generation, which generate the correct term but with the wrong auxiliary info.</p>\n</blockquote>\n<p>In this case, it's almost certainly a bug in <code>let</code> / <code>have</code> / general elaboration, or <code>induction'</code></p>",
        "id": 401865331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699919691
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">()</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 401868242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699920882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651332\">@Sven Manthe</span>, might you be able to open bug report on the Lean repository, using Mario's minimisation?</p>",
        "id": 401899313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699933394
    },
    {
        "content": "<p>Done (<a href=\"https://github.com/leanprover/lean4/issues/2873\">https://github.com/leanprover/lean4/issues/2873</a>)</p>",
        "id": 401929385,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1699950000
    }
]