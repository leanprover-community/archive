[
    {
        "content": "<p>Hi, I installed Lean and the VSCode extension following the instructions on <a href=\"https://leanprover-community.github.io/install/macos.html\">https://leanprover-community.github.io/install/macos.html</a>. When writing proofs with VSCode, it often happens that I start typing, e.g., a tactic name, and then realize that I would like to check again the current proof state, because maybe I don't remember which hypothesis I wanted to refer. However, by that time, the Lean source code does not parse, and the Lean Infoview box doesn't display any helpful information. I need to either delete what I've written, or complete it somehow to have the information back. It's not terrible, but it wastes my focus. Is there a way to keep the Infoview frozen while the source code doesn't parse?</p>",
        "id": 354042497,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1682712458
    },
    {
        "content": "<p>Are you using Lean 3? If so, you can click the pause <span aria-label=\"pause\" class=\"emoji emoji-23f8\" role=\"img\" title=\"pause\">:pause:</span> button in the Info View.</p>",
        "id": 354042732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682712541
    },
    {
        "content": "<p>(Not sure if Lean 4 already has that.)</p>",
        "id": 354042761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682712554
    },
    {
        "content": "<p>Thanks for your answer. Yes, I am using Lean 3 and that button works for me. Though it's not ideal, it still means that I have to do that in advance and it requires an explicit action on my side, both to lock and to unlock (BTW, does it have a keyboard shortcut? It would be better then having to click with the mouse already). I was hoping for something more automatical.</p>",
        "id": 354043344,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1682712781
    },
    {
        "content": "<p>There isn't a default keybind, but you can bind a key to it if you click the gear in the bottom left of VS Code, select Keyboard Shortcuts, and then search for \"Lean: Info View: Toggle Updating\".</p>",
        "id": 354044818,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1682713325
    },
    {
        "content": "<p>Coq IDE doesn't update proof state as you type, and instead you need to update it explicitly after each line. I personally find it more natural, because it allows me to watch the current proof state while typing the next tactic. It will be nice if we can have such option in Lean 4.</p>",
        "id": 354047907,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1682714392
    },
    {
        "content": "<p>Currently (in Lean 3) the people who dislike update-as-you-type feature need to toggle updating two times after each proof line (once to see the new proof state, and again to freeze the infoview again).</p>",
        "id": 354048423,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1682714609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/Freeze.20the.20Lean.20Infoview.20while.20typing/near/354048423\">said</a>:</p>\n<blockquote>\n<p>Currently (in Lean 3) the people who dislike update-as-you-type feature need to toggle updating two times after each proof line (once to see the new proof state, and again to freeze the infoview again).</p>\n</blockquote>\n<p>In Lean 4 you can keep the view paused as there is an 'update' button you can click when appropriate. It doesn't appear to have a corresponding command so it cannot be bound to a key, but it would be pretty easy to add such a command.</p>",
        "id": 354050847,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682715542
    },
    {
        "content": "<p>I sometimes add <code>--</code> at the beginning of a line that I am typing to comment out the line and prevent lean from updating too much.  Lean still elaborates, before it realizes that nothing has changed.</p>\n<p>The advantage over the pause button is that this is something that can be done \"after the fact\".</p>",
        "id": 354097304,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1682726577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Freeze.20the.20Lean.20Infoview.20while.20typing/near/354097304\">said</a>:</p>\n<blockquote>\n<p>I sometimes add <code>--</code> at the beginning of a line that I am typing to comment out the line and prevent lean from updating too much.  Lean still elaborates, before it realizes that nothing has changed.</p>\n</blockquote>\n<p>That's an interesting idea. Combined with the key combination that toggles the comment on the current line (Shift-Command-7 by default on Mac) gives a relatively good approximation of what I wanted. Thanks!</p>",
        "id": 354316509,
        "sender_full_name": "Giovanni Mascellani",
        "timestamp": 1682765626
    },
    {
        "content": "<p>I've also been trying to figure out the best keyboard workflow for Lean in VSCode.   </p>\n<p>With Lean, sometimes I wish for something like F9 in excel, for \"recalcate all formulas\".  I'm going to experiment with the \"update\" button.  I get frustrated by the fact that typing often destroys the context display, so I've also hit on the trick of putting in a <code>sorry</code> as the final tactic then commenting lines while they are being edited.  On windows, ctrl-/ toggles a comment.  On the other hand, since the infoview is dependent on the cursor location, I sometimes find myself moving character-by-character to see the feedback at different locations, and this is harder with explicit refresh.  I'm used to REPL environments in scripting languages where there's an explicit key stroke to evaluate each new statement or command, but I can see how REPL may not be well suited for Lean.</p>",
        "id": 358880402,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1684288375
    }
]