[
    {
        "content": "<p>On a lean file with no imports, I get an error with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_have2</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The error appears as a red line under the h1 term and says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h₁</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PropLean</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>In a lean file from the Mathematics in Lean repo, I can enter the same theorem as above, and there is no issue. The proof state after the 'have' tactic is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">stu</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"n\">pq</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The stuff on top is from some variable declarations earlier in the file, but the point is the added context to the 'have' tactic appears with the given name. Here are the imports from the MIL file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">MIL.Common</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n</code></pre></div>\n<p>When the <code>have : t :=</code> tactic is discussed in tutorials I don't remember encountering the option of putting extra context before the colon. Given the description it makes sense why it wouldn't be allowed (and anyway its the equivalent of an implication after the colon). However I wondered if it was possible and tried it in MIL and it seemed to work. Then when I used it outside of MIL I couldn't figure out what was going wrong. Can anyone explain why this happens? I assume there is something being imported from mathlib that allows you to do something you wouldn't be able to otherwise. If that's the case, is there a way to know which tactics have been adjusted/have different behavior due to imports and what those behaviors are? Thanks.</p>",
        "id": 395803730,
        "sender_full_name": "Andreas Gittis",
        "timestamp": 1696910675
    },
    {
        "content": "<p>Your <code>have</code> syntax makes no sense. I'm not sure why it would ever work</p>",
        "id": 395811047,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696916161
    },
    {
        "content": "<p>Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395811156,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696916223
    },
    {
        "content": "<p>The syntax that works in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> seems to have the intention to make <code>have ( h: p1 ) : p2 := by ...</code> to mean <code>have : p1 -&gt; p2 := by intro h ...</code>, mimicking the syntax for <code>theorem</code>s.</p>",
        "id": 395811990,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696916808
    },
    {
        "content": "<p>But throughout <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> there is no such usage taught and although <code>MIL.Common</code> modifies binder, pi types, it doesn't seem to be intentionally making this syntax work.</p>",
        "id": 395812861,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696917415
    },
    {
        "content": "<p>The extension may be coming from Mathlib? <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Have.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Have.lean</a></p>",
        "id": 395813087,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696917568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Behavior.20of.20'have'.20tactic.20changing.20with.20imports/near/395811156\">said</a>:</p>\n<blockquote>\n<p>Try</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Well no it would have to be an implication from the context to the goal of the malformed <code>have</code> statement. Also I'm not trying to prove the theorem or write the <code>have</code> tactic, just to understand the discrepancy.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113489-new-members/topic/Behavior.20of.20'have'.20tactic.20changing.20with.20imports/near/395811990\">said</a>:</p>\n<blockquote>\n<p>The syntax that works in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> seems to have the intention to make <code>have ( h: p1 ) : p2 := by ...</code> to mean <code>have : p1 -&gt; p2 := by intro h ...</code>, mimicking the syntax for <code>theorem</code>s.</p>\n</blockquote>\n<p>Yes that seems to be exactly what it's doing, and it works for numerous inputs to the context as well.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113489-new-members/topic/Behavior.20of.20'have'.20tactic.20changing.20with.20imports/near/395812861\">said</a>:</p>\n<blockquote>\n<p>But throughout <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> there is no such usage taught and although <code>MIL.Common</code> modifies binder, pi types, it doesn't seem to be intentionally making this syntax work.</p>\n</blockquote>\n<p>So I guess in an arbitrary Lean project the standard built-in tactics can be modified to do anything? Or other basic things about Lean can be changed so that the behavior of a built-in tactic changes unexpectedly, and a-priori there's not a clear way to know which tactics have been ultimately affected?</p>",
        "id": 395816817,
        "sender_full_name": "Andreas Gittis",
        "timestamp": 1696919804
    },
    {
        "content": "<p>The same tactic could have different behavior in raw Lean 4, Mathlib and the tutorial, but 3-layer is the max of it. People change tactic behaviors to make them feel natural to their audiences using meta-programming. It's a source of power and also confusion.</p>",
        "id": 395818229,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696920622
    },
    {
        "content": "<p>The behaviour of <code>rw</code> and <code>induction</code> is different in the natural number game to the behaviour in Lean/mathlib/etc for pedagogical reasons</p>",
        "id": 395819424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696921256
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Have</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test_have2</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> seems to work.</p>",
        "id": 395834355,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696927278
    },
    {
        "content": "<p>As well as an additional attempt to add a name to the preposition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_have3</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">my_p</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395834511,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696927327
    },
    {
        "content": "<p>I think this is a deliberate feature like <code>let f (x : A) : A := x ^ 2</code> which I think is also legal</p>",
        "id": 395834871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696927458
    },
    {
        "content": "<p><code>import Mathlib.Tactic</code> is a fairly safe import to add to any code you write to get all the mathlib-specific features</p>",
        "id": 395834987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696927508
    },
    {
        "content": "<p>Though maybe this version of <code>have</code> belongs in Std?</p>",
        "id": 395834999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696927516
    },
    {
        "content": "<p>I think it's in core?</p>",
        "id": 395835025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696927530
    },
    {
        "content": "<p>the only thing mathlib adds is <code>have</code>-without-<code>:=</code></p>",
        "id": 395835064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696927547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622464\">Andreas Gittis</span> <a href=\"#narrow/stream/113489-new-members/topic/Behavior.20of.20'have'.20tactic.20changing.20with.20imports/near/395803730\">said</a>:</p>\n<blockquote>\n<p>On a lean file with no imports, I get an error with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_have2</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n</blockquote>\n<p>I can't replicate this. I think this behavior might have changed, so possibly your lean version is out of date relative to the one in MIL</p>",
        "id": 395835653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696927761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113489-new-members/topic/Behavior.20of.20'have'.20tactic.20changing.20with.20imports/near/395818229\">said</a>:</p>\n<blockquote>\n<p>The same tactic could have different behavior in raw Lean 4, Mathlib and the tutorial, but 3-layer is the max of it. People change tactic behaviors to make them feel natural to their audiences using meta-programming. It's a source of power and also confusion.</p>\n</blockquote>\n<p>Okay thanks. I think I will  be doing pretty much everything in Mathlib anyway, but it's good to know.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Behavior.20of.20'have'.20tactic.20changing.20with.20imports/near/395835653\">said</a>:</p>\n<blockquote>\n<p>I can't replicate this. I think this behavior might have changed, so possibly your lean version is out of date relative to the one in MIL</p>\n</blockquote>\n<p>It looks like my MIL Lean is version 4.0.0-nightly-2023-08-23, and the other is version 4.0.0-nightly-2023-04-20. I assumed whenever I used VS Code the version of Lean was consistent, which is definitely not the case - every directory I look at has a different version. When I changed to a new directory the error went away. So it looks like the different <code>have</code> behavior was a result of different Lean versions (sorry about that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ) but it is possible for tactics to have different behaviors in different projects. Thanks everyone who responded.</p>",
        "id": 395933091,
        "sender_full_name": "Andreas Gittis",
        "timestamp": 1696960987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"622464\">@Andreas Gittis</span> For reproducibility, the lean version used by your project is specified in the <code>lean-toolchain</code> file. It is recommended to bump that to the latest (e.g. by copying the <code>lean-toolchain</code> of the mathlib4 repo) periodically. (Unfortunately there is not yet a tool that will do the bumping automatically. cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , <code>elan update stable</code> will download the latest stable but it doesn't actually put it in the <code>lean-toolchain</code>, right?)</p>",
        "id": 395940425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696963203
    },
    {
        "content": "<p>oh wait, <code>elan update stable</code> actually downloads <code>v3.51.1</code>, that's not latest... (ah, it does <code>v4.1.0</code> after <code>elan self update</code>)</p>",
        "id": 395940877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696963300
    },
    {
        "content": "<p>The syntax (the example with <code>my_p</code>) seems to work out-of-the-box on <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a> without Mathlib import (or locally with <code>leanprover/lean4:v4.2.0-rc1</code>), so it's implemented in Lean itself.</p>",
        "id": 396009613,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697000915
    },
    {
        "content": "<p>Syntax-wise it's parsed by this line in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Term.lean\">Lean.Parser.Term</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">haveIdLhs</span>    <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">binderIdent</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">hygieneInfo</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">letIdBinder</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optType</span>\n</code></pre></div>\n<p>where <code>letIdBinder</code> can have <code>bracketedBinder</code> which are the familiar <code>(h₁ : ((p ∧ ¬q) ∨ (q ∧ ¬p)))</code> in <code>theorem</code>s and <code>optType</code> is the optional type spec (i.e. <code>:</code> + the proposition statement of type <code>Prop</code> here).</p>\n<p>And the elaboration is inherited somehow I assume.</p>",
        "id": 396012181,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697002335
    }
]