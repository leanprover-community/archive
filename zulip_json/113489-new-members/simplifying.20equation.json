[
    {
        "content": "<p>hey, all! here's a mwe of my current code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">τ</span><span class=\"o\">],</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n\n  <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>basically, what I want to do right now is to simplify this giant expression </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But i'm unsure about how to tell lean to do this. can someone help me on this?</p>",
        "id": 340465660,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1678310069
    },
    {
        "content": "<p>what i want to do right now is to show that the elements on the right side essentially cancel out...</p>",
        "id": 340465771,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1678310111
    },
    {
        "content": "<p>MWE:</p>",
        "id": 340468592,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678311199
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">τ</span><span class=\"o\">],</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340471522,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678312404
    },
    {
        "content": "<p>This will get you to a simpler expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--set φ := (1 + real.sqrt(5)) / 2,</span>\n  <span class=\"c1\">--set τ := (1 - real.sqrt(5)) / 2,</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">],</span>\n  <span class=\"c1\">--simp[φ, τ],</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">--rw [mul_comm],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340472876,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678312895
    },
    {
        "content": "<p>I really like the problem you are working on! Here is some progress. Only easy goals should be remaining:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">is_n_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_n_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">fib</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">],</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"n\">convert_to</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert_to</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">four_sqrt_five_not_zero</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">four_sqrt_five_not_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340476191,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678314322
    },
    {
        "content": "<p>I few calls to <code>library_search</code> and the proof is almost done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">is_n_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_n_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">fib</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt5_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>  <span class=\"c1\">-- note how much the expression got simplified on this line</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_lt_iff.mpr</span> <span class=\"n\">is_n_zero</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_lt_iff.mpr</span> <span class=\"n\">is_n_zero</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340477396,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678314881
    },
    {
        "content": "<p>Main theorem proved:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">is_n_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_n_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">fib</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt5_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt5_mul_sqrt5</span> <span class=\"o\">:</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>  <span class=\"c1\">-- Note how much the expression got simplified on this line!</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">sqrt5_mul_sqrt5</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">zero_lt_iff</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">sqrt5_mul_sqrt5</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">zero_lt_iff</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340480322,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678316348
    },
    {
        "content": "<p>It was fun! Let us know whether you managed to prove <code>binet_lemma</code> on your own.</p>",
        "id": 340480494,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678316425
    },
    {
        "content": "<p>Re <code>binet_lemma</code> : a random hypothesis that <code>0 &lt; n</code> and a random natural subtraction <code>n - 1</code> are kind of screaming at you, saying \"don't use <code>n</code>, use <code>m := n - 1</code> and instead just claim that for all naturals <code>m</code> we have <code>x^{m+1}=x*fib(m+1)+fib(m)</code>\". It will be easier to work with!</p>",
        "id": 340480616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678316491
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340481273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678316810
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt5_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">field_simp</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">],</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340482388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678317395
    },
    {
        "content": "<p>It's the same proof, it's just a bit less clunky without the n!=0 thing.</p>",
        "id": 340482422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678317420
    },
    {
        "content": "<p>woah o__o u guys are good...<br>\nthanks for the help! i have a lot to learn :)</p>",
        "id": 340491172,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1678321982
    },
    {
        "content": "<p>Kevin's advice applies somewhat more broadly, for instance it may be more convenient in Lean to prove statements like <code>a = b * c</code> rather than <code>a/c = b</code> with hypothesis <code>c ≠ 0</code>. There are similar patterns elsewhere in mathlib too, for example the statement that \"deleting an element from a <code>finset s</code> reduces its cardinality by one\" is phrased as <code>a ∈ s → (s.erase a).card + 1 = s.card</code>, rather than, say, <code>a ∈ s → (s.erase a).card = s.card - 1</code>. (See <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/card.html#finset.card_erase_add_one\">https://leanprover-community.github.io/mathlib_docs/data/finset/card.html#finset.card_erase_add_one</a>)</p>\n<p>edit: Oops, now that I've written this, I see that in fact both statements about deleting an element are in mathlib (<a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/card.html#finset.card_erase_of_mem\">https://leanprover-community.github.io/mathlib_docs/data/finset/card.html#finset.card_erase_of_mem</a>). Still, for some purposes the subtraction-free one may be preferable.</p>\n<p>Tactics like <code>ring</code> and <code>linarith</code> are intended to save us from having to do unnecessary algebra simplification, but they aren't able to do things that require extra hypotheses to be applied.</p>",
        "id": 340497740,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1678326493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340481273\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 340505469,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678332293
    },
    {
        "content": "<p>this code doesn't work in Lean 4, what must I change in order for it to work?</p>",
        "id": 340505509,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678332317
    },
    {
        "content": "<p>I understand it has to start with, in L4,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but then how does the induction get expressed?</p>",
        "id": 340515031,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678339090
    },
    {
        "content": "<p>There appear to be zero instances of induction like this in mathlib4</p>",
        "id": 340516613,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678340002
    },
    {
        "content": "<p>making some progress</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 340521033,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678342693
    },
    {
        "content": "<p>OK I did it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>but how can I put the rw, simp and ring of the succ proof on different lines? And does this conform to mathlib4 style?</p>",
        "id": 340525823,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678344996
    },
    {
        "content": "<p>now how do I write the actual formula proof in Lean 4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n  <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt5_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span><span class=\"o\">}</span> <span class=\"c1\">-- ???</span>\n</code></pre></div>",
        "id": 340532214,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678347762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Parcly Taxel</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340525823\">said</a>:</p>\n<blockquote>\n<p>OK I did it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>but how can I put the rw, simp and ring of the succ proof on different lines? And does this conform to mathlib4 style?</p>\n</blockquote>\n<p>mathlib style:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">binet_lemma</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">phi</span><span class=\"o\">]</span>\n    <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 340533555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678348294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340482388\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt5_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">field_simp</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">],</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>trying to port this to Lean 4…</p>",
        "id": 340536979,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678349587
    },
    {
        "content": "<p>whee I did the main formula</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n    <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt5_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span>\n  <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">]</span>\n    <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>the braces in <code>{ field_simp, norm_num, ring, }</code> and elsewhere are just grouping in Lean 3, right?</p>",
        "id": 340545258,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678352173
    },
    {
        "content": "<p>the braces are used to focus a subgoal, in Lean 4 the language is whitespace sensitive and we use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">some_tactic_that_leaves_several_goals</span>\n<span class=\"bp\">.</span> <span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"n\">goal</span> <span class=\"mi\">1</span>\n  <span class=\"n\">more</span> <span class=\"n\">of</span> <span class=\"n\">this</span> <span class=\"n\">proof</span>\n<span class=\"bp\">.</span> <span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"n\">goal</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>for this</p>",
        "id": 340545495,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678352256
    },
    {
        "content": "<p><code>norm_num</code> is not needed for the first subproof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n    <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt5_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span>\n  <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">]</span>\n    <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 340545766,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678352333
    },
    {
        "content": "<p>is putting several short tactics on one line with ; correct mathlib4 style?</p>",
        "id": 340545973,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678352398
    },
    {
        "content": "<p>yes, it's fine</p>",
        "id": 340546391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678352520
    },
    {
        "content": "<p>you can use it to group lemmas</p>",
        "id": 340546537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678352551
    },
    {
        "content": "<p>you should not use it for goal management though, you should always use <code>\\.</code> after a tactic which produces multiple goals</p>",
        "id": 340546614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678352575
    },
    {
        "content": "<p>since <code>ring</code> is a closing tactic, I think you are probably dealing with multiple subgoals after the <code>rw</code>, in which case it should be written</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">binet_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n    <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">sqrt5_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span>\n  <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">,</span> <span class=\"n\">binet_lemma</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">·</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">·</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 340546899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678352653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340546899\">said</a>:</p>\n<blockquote>\n<p>since <code>ring</code> is a closing tactic, I think you are probably dealing with multiple subgoals after the <code>rw</code></p>\n</blockquote>\n<p>of course I was dealing with multiple subgoals</p>",
        "id": 340548136,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678353006
    },
    {
        "content": "<p>after the <code>rw</code> there is the first subgoal that is just algebraic simplification of the inductive step,<br>\nand then two other subgoals <code>succ.phi</code> for which I must prove that the two constants satisfy the <code>phi</code> relation</p>",
        "id": 340548476,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678353100
    },
    {
        "content": "<p><code>⊢ (1 - Real.sqrt 5) / 2 * ((1 - Real.sqrt 5) / 2) = (1 - Real.sqrt 5) / 2 + 1</code> and the one where <code>-</code> is replaced with <code>+</code></p>",
        "id": 340548709,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678353154
    },
    {
        "content": "<p>oh, and even <code>Nat.succ_eq_add_one</code> in the <code>rw</code> isn't needed!</p>",
        "id": 340549120,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678353269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Parcly Taxel</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340548136\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340546899\">said</a>:</p>\n<blockquote>\n<p>since <code>ring</code> is a closing tactic, I think you are probably dealing with multiple subgoals after the <code>rw</code></p>\n</blockquote>\n<p>of course I was dealing with multiple subgoals</p>\n</blockquote>\n<p>the purpose of the <code>\\.</code> is to make it clear to readers that don't have lean in front of them (like me, looking at zulip) what the structure of the proof is. <code>rw</code> can spit out multiple goals, it is not syntactically obvious how many your proof produces</p>",
        "id": 340553405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678354451
    },
    {
        "content": "<p>why doesn't this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cassini_identity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">add_pow_two</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 340571831,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678359038
    },
    {
        "content": "<p>After the first two <code>fib</code> rewrites I have on the RHS <code>↑(fib n✝ + fib (n✝ + 1)) ^ 2</code></p>",
        "id": 340571975,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678359081
    },
    {
        "content": "<p>so I suppose I can expand this, but I can't</p>",
        "id": 340572026,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678359100
    },
    {
        "content": "<p>I realise I need to coerce the inner <code>fib</code>s to integers somehow since <code>add_pow_two</code> only works on semirings – or should I?</p>",
        "id": 340573056,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678359394
    },
    {
        "content": "<p>You want to match <code>Int.ofNat (fib n✝ + fib (n✝ + 1)) ^ 2</code> right?</p>",
        "id": 340573238,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678359455
    },
    {
        "content": "<p>yeah, so I can then apply the IH</p>",
        "id": 340573304,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678359480
    },
    {
        "content": "<p>It actually is <code>(Int.ofNat (fib n✝ + fib (n✝ + 1))) ^ 2</code> unfortunately.</p>",
        "id": 340573392,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678359497
    },
    {
        "content": "<p>now what? <code>\\N</code> <em>is</em> a semiring</p>",
        "id": 340573579,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678359547
    },
    {
        "content": "<p>I suggest we change the place where we go from <code>ℕ</code> to <code>ℤ</code>.</p>",
        "id": 340573718,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678359589
    },
    {
        "content": "<p>but putting <code>(fib (n + 1) ^ 2 : ℤ)</code> at the proof start doesn't work</p>",
        "id": 340574453,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678359778
    },
    {
        "content": "<p>I get a \"failed to synthesize instance\" error</p>",
        "id": 340575097,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678359943
    },
    {
        "content": "<p>I assume you are working with the following definition of Fibonacci numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340576108,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678360210
    },
    {
        "content": "<p>I think we can express your theorem in terms of <code>ℕ</code> only.</p>",
        "id": 340576713,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678360351
    },
    {
        "content": "<p>so I would have two theorems like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cassini_identity_even</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cassini_identity_odd</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n  <span class=\"n\">_</span>\n</code></pre></div>\n<p>how do I do mutual induction now?</p>",
        "id": 340578631,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678360860
    },
    {
        "content": "<p>Lemme try it without mutual induction.</p>",
        "id": 340578732,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678360891
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cassini_identity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 340579010,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678360971
    },
    {
        "content": "<p>now <code>rw [...\\l ih]</code> works, but how do I handle the modulo? I suspect I would have to use <code>cases</code> for this, but what is the syntax?</p>",
        "id": 340580708,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678361467
    },
    {
        "content": "<p>Wip:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cassini_identity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">%</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">m_even</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">m_even</span><span class=\"o\">]</span>\n      <span class=\"n\">norm_num</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 340580990,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678361565
    },
    {
        "content": "<p>oh, <code>by_cases</code></p>",
        "id": 340581016,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678361575
    },
    {
        "content": "<p>Disclaimer: I don't know if my approach will be easier in the end.</p>",
        "id": 340581129,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678361609
    },
    {
        "content": "<p>Update: It looks like too much work. I am quitting for now.</p>",
        "id": 340582591,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678362029
    },
    {
        "content": "<p>Simpler idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cassini_identity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">add_sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>but how to get Lean to understand that if n is even, n+1 is odd so I can simplify <code>if Even (Nat.succ n) then 2 else 0</code>?</p>",
        "id": 340587021,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678363202
    },
    {
        "content": "<p>does <code>simpa [parity_simps]</code> work?</p>",
        "id": 340588696,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678363698
    },
    {
        "content": "<p><code>parity_simps</code> is a custom simp set for dealing with parity related questions, it should help with problems like this, in any case lemmas in this file will help <a href=\"https://github.com/leanprover-community/mathlib4/blob/69108c782429c57637807f32d923e34c195ec823/Mathlib/Data/Nat/Parity.lean\">https://github.com/leanprover-community/mathlib4/blob/69108c782429c57637807f32d923e34c195ec823/Mathlib/Data/Nat/Parity.lean</a></p>",
        "id": 340589040,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678363821
    },
    {
        "content": "<p>maybe doing <code>rw [if_neg]</code> first will be easier</p>",
        "id": 340589102,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678363853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340589102\">said</a>:</p>\n<blockquote>\n<p>maybe doing <code>rw [if_neg]</code> first will be easier</p>\n</blockquote>\n<p>Here's my plan, which involves not using the IH until the equation is simplified enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n\n<span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">F</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I need a way to \"cancel the same thing from both sides of an equation\"</p>",
        "id": 340607556,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678368964
    },
    {
        "content": "<p>Oh, and how can I turn <code>a = b</code> into <code>a + c - c = b</code> and specify what <code>c</code> is, <em>and</em> distribute coercions, if I go down the route below?</p>",
        "id": 340616218,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678370954
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cassini_identity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n    <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">]</span> <span class=\"c1\">-- ...</span>\n</code></pre></div>",
        "id": 340617061,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678371136
    },
    {
        "content": "<p>I think the formulation immediately above with internal <code>\\Z</code> coercions in the statement is <em>absolutely necessary</em>, since if the (-1)^n term in Cassini's identity is represented with <code>\\N</code>-only constructs it won't be true for half the integers because of the way <code>\\N</code>-subtraction floors out at 0</p>",
        "id": 340620101,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678371860
    },
    {
        "content": "<p>Yes, any mathematical statement involving subtraction of naturals should be formalised via coercion to integers, because natural subtraction as thought of by lean is not what mathematicians mean by subtraction. Similarly anything involving division should first be coerced into rationals.</p>",
        "id": 340637409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678375589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340576713\">said</a>:</p>\n<blockquote>\n<p>I think we can express your theorem in terms of <code>ℕ</code> only.</p>\n</blockquote>\n<p>right, I'm not trusting this now</p>",
        "id": 340640558,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678376290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Parcly Taxel</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340640558\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340576713\">said</a>:</p>\n<blockquote>\n<p>I think we can express your theorem in terms of <code>ℕ</code> only.</p>\n</blockquote>\n<p>right, I'm not trusting this now</p>\n</blockquote>\n<p>I mean, in the way I wrote it, flooring at 0 never happened, but it is likely that my formulation would lead to an overcomplicated proof.</p>",
        "id": 340640999,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678376380
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Cassini_and_Catalan_identities\">https://en.wikipedia.org/wiki/Cassini_and_Catalan_identities</a> on this page I see a proof by induction, and when I pasted <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20equation/near/340617061\">this</a> in I intended to follow said proof, which involves adding a <code>a-a</code> term</p>",
        "id": 340641480,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678376493
    },
    {
        "content": "<p>Yeah, that's better to be done in integers.</p>",
        "id": 340642093,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678376609
    },
    {
        "content": "<p>You can start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to avoid problems with coercion. I mean, not for the \"production version\", but for prototyping your proof.</p>",
        "id": 340642697,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678376739
    },
    {
        "content": "<p>hey, this works! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span>       <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cassini_identity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n    <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">,</span> <span class=\"n\">fib</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 340646034,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678377484
    },
    {
        "content": "<p>Turns out negative numbers were a great idea.</p>",
        "id": 340646483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678377582
    }
]