[
    {
        "content": "<p>The following code fails at the second line of the Monad definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Category</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.FullyFaithful</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.ReflectsIso</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v₁</span> <span class=\"n\">u₁</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Monad</span> <span class=\"kd\">extends</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">η'</span> <span class=\"o\">:</span> <span class=\"mi\">𝟭</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">to_functor</span> <span class=\"c1\">-- this is OK</span>\n  <span class=\"n\">μ'</span> <span class=\"o\">:</span> <span class=\"n\">to_functor</span> <span class=\"bp\">⋙</span> <span class=\"n\">to_functor</span> <span class=\"bp\">⟶</span> <span class=\"n\">to_functor</span> <span class=\"c1\">-- how can this line fail?</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">to_functor.map</span> <span class=\"o\">(</span><span class=\"n\">NatTrans.app</span> <span class=\"n\">μ'</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"n\">left_unit'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">η'.app</span> <span class=\"o\">(</span><span class=\"n\">to_functor.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"n\">right_unit'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">to_functor.map</span> <span class=\"o\">(</span><span class=\"n\">η'.app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>\n<p>I can't seem to get the second line to work; how can I do so?</p>",
        "id": 342553123,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679057810
    },
    {
        "content": "<p>This is the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Category</span> <span class=\"bp\">?</span><span class=\"n\">m.654</span>\n</code></pre></div>",
        "id": 342553247,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679057845
    },
    {
        "content": "<p>Is this the best solution?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Monad</span> <span class=\"kd\">extends</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">to_functor</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span>\n  <span class=\"n\">η'</span> <span class=\"o\">:</span> <span class=\"mi\">𝟭</span> <span class=\"n\">_</span> <span class=\"bp\">⟶</span> <span class=\"n\">to_functor</span>\n  <span class=\"n\">μ'</span> <span class=\"o\">:</span> <span class=\"n\">to_functor</span> <span class=\"bp\">⋙</span> <span class=\"n\">to_functor</span> <span class=\"bp\">⟶</span> <span class=\"n\">to_functor</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">to_functor.map</span> <span class=\"o\">(</span><span class=\"n\">NatTrans.app</span> <span class=\"n\">μ'</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"n\">left_unit'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">η'.app</span> <span class=\"o\">(</span><span class=\"n\">to_functor.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"n\">right_unit'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">to_functor.map</span> <span class=\"o\">(</span><span class=\"n\">η'.app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>",
        "id": 342560494,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679059444
    },
    {
        "content": "<p>nvm, found an ideal fix</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Monad</span> <span class=\"kd\">extends</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">η'</span> <span class=\"o\">:</span> <span class=\"mi\">𝟭</span> <span class=\"n\">_</span> <span class=\"bp\">⟶</span> <span class=\"n\">toFunctor</span>\n  <span class=\"n\">μ'</span> <span class=\"o\">:</span> <span class=\"n\">toFunctor</span> <span class=\"bp\">⋙</span> <span class=\"n\">toFunctor</span> <span class=\"bp\">⟶</span> <span class=\"n\">toFunctor</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">toFunctor.map</span> <span class=\"o\">(</span><span class=\"n\">NatTrans.app</span> <span class=\"n\">μ'</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"n\">left_unit'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">η'.app</span> <span class=\"o\">(</span><span class=\"n\">toFunctor.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"n\">right_unit'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">toFunctor.map</span> <span class=\"o\">(</span><span class=\"n\">η'.app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">μ'.app</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>",
        "id": 342563498,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679060083
    }
]