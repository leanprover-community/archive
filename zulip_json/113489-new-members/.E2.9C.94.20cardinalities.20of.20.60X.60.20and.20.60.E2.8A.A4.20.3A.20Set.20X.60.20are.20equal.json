[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set.ncard</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- how to show this...?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401755330,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699879578
    },
    {
        "content": "<p><code>Set.ncard (⊥ : Set X)</code> is easy to handle....</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.bot_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">Set.ncard_empty</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 401756513,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699879979
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ncard_univ#doc\">docs#Set.ncard_univ</a> perhaps?</p>",
        "id": 401756792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699880069
    },
    {
        "content": "<p>We don't use <code>⊤</code> for <code>Set</code></p>",
        "id": 401756825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699880085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thank you very much!!!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set.ncard</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.ncard_univ</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 401756986,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1699880154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 401757007,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699880159
    },
    {
        "content": "<p>Also,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set.ncard</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Set.ncard</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw_search</span> <span class=\"n\">says</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Set.top_eq_univ</span><span class=\"o\">,</span> <span class=\"n\">Set.ncard_univ</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Set.Nat.card_coe_set_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 401757186,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699880216
    },
    {
        "content": "<p>I think <code>Set.ncard_univ</code> should probably be <code>simp</code>?</p>",
        "id": 401758269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699880560
    },
    {
        "content": "<p>Ah, I guess it's consistent with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_univ#doc\">docs#Finset.card_univ</a> which also isn't</p>",
        "id": 401758381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699880592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20cardinalities.20of.20.60X.60.20and.20.60.E2.8A.A4.20.3A.20Set.20X.60.20are.20equal/near/401758381\">said</a>:</p>\n<blockquote>\n<p>Ah, I guess it's consistent with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_univ#doc\">docs#Finset.card_univ</a> which also isn't</p>\n</blockquote>\n<p>this one has always been annoying to me</p>",
        "id": 401762174,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699881944
    },
    {
        "content": "<p>We've <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/set.2Ecard_to_finset_univ/near/266504268\">had this discussion before</a>, and you even opened PR <a href=\"https://github.com/leanprover-community/mathlib3/pull/7230\">mathlib3#7230</a>, but I think that we decided that it's not good switching between <code>Finset.card</code> and <code>Fintype.card</code> without intending it.</p>",
        "id": 401835957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699905675
    }
]