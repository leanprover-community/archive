[
    {
        "content": "<p>Is there a way to reset the instance cache when writing definitions in term mode? I'm wondering if there's a cleaner way to write this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">comp_dec</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">is_true</span> <span class=\"n\">is_false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">cantor</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span>         <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">p_dec</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">p_zero</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">cons</span> <span class=\"n\">zero</span><span class=\"o\">,</span>\n      <span class=\"n\">p_one</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">cons</span> <span class=\"n\">one</span><span class=\"o\">,</span>\n      <span class=\"n\">p_zero_dec</span> <span class=\"o\">:=</span> <span class=\"n\">comp_dec</span> <span class=\"n\">p_dec</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">zero</span><span class=\"o\">),</span>\n      <span class=\"n\">p_one_dec</span> <span class=\"o\">:=</span> <span class=\"n\">comp_dec</span> <span class=\"n\">p_dec</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">one</span><span class=\"o\">),</span>\n      <span class=\"n\">ite_prop_dec</span> <span class=\"o\">:=</span> <span class=\"n\">p_zero_dec</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ε</span> <span class=\"n\">n</span> <span class=\"n\">p_zero</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"k\">in</span>\n  <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">p_zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ε</span> <span class=\"n\">n</span> <span class=\"n\">p_zero</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›))</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">::</span> <span class=\"bp\">@</span><span class=\"n\">ε</span> <span class=\"n\">n</span> <span class=\"n\">p_zero</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n    <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">::</span> <span class=\"bp\">@</span><span class=\"n\">ε</span> <span class=\"n\">n</span> <span class=\"n\">p_one</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n</code></pre></div>\n<p>(The type <code>cantor</code> is an alias for <code>stream bit</code>, where <code>bit</code> is an enumerated type with values of <code>zero</code> or <code>one</code>.)</p>\n<p>This function performs a limited search of the Cantor space, and you can see that it involves a lot of passing around <code>decidable</code> and <code>decidable_pred</code> instances. I'm wondering if there's a way to avoid that... like an equvalent of <code>resetI</code> but for term mode. This would allow me to get rid of <code>comp_dec</code>, which I think is only necessary because Lean doesn't know that the function being composed is decidable.</p>",
        "id": 293332309,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660436889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> The usual solution is <code>by exactI</code>, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ite_prop_dec</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">p_zero_dec</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">n</span> <span class=\"n\">p_zero</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p_zero</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">n</span> <span class=\"n\">p_zero</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">::</span> <span class=\"n\">ε</span> <span class=\"n\">n</span> <span class=\"n\">p_zero</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">::</span> <span class=\"n\">ε</span> <span class=\"n\">n</span> <span class=\"n\">p_one</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I can't check if this works since this isn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> including the definition of <code>cantor</code>)</p>",
        "id": 293335103,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660440957
    },
    {
        "content": "<p>all good, I'll give it a try!</p>",
        "id": 293335154,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660440993
    },
    {
        "content": "<p>nice, it doesn't even require the <code>ite_prop_dec</code> anymore</p>",
        "id": 293335429,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660441393
    },
    {
        "content": "<p>thanks!</p>",
        "id": 293335430,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1660441400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> has marked this topic as resolved.</p>",
        "id": 293335436,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660441410
    }
]