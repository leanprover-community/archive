[
    {
        "content": "<p>How does one proof a lemma like this :-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">hpointfive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">ha</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n  <span class=\"n\">exact</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 400432416,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1699229005
    },
    {
        "content": "<p>What's your maths proof? \"It's obvious\" is not allowed.</p>",
        "id": 400435673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699231359
    },
    {
        "content": "<p>Here's mine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hpointfive</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- turn 0.5 into a fraction</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"c1\">-- clear denominators</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"c1\">-- turn it into a question about naturals</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"c1\">-- now prove that 1 != y * 2 by contradiction. Suppose it is y * 2</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- In the library we already have a proof that 1 isn't even</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.not_even_one</span>\n  <span class=\"c1\">-- but we're assuming 1 = y * 2</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- so 1 is even, contracting the fact that it isn't</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 400436527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699231844
    },
    {
        "content": "<p>off-topic: <code>not_even_one</code> is one of my favourite lemma names in mathlib.</p>",
        "id": 400437107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699232196
    },
    {
        "content": "<p>Thank you! But if we have some random rational numbers, say <code>math (a/b) \\neq (c: \\N )</code>  where  (a and b are in their reduced form and b \\neq 1 ); then we need to invoke some lemma about prime factorizations? Or is there some tactic that we can use?</p>",
        "id": 400438150,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1699232761
    },
    {
        "content": "<p>After reducing it to a question about naturals you can use <code>omega</code>, which existed in Lean 3 but still hasn't been ported to Lean 4. However I've heard that it's on the way.</p>",
        "id": 400438669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699233073
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">13</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- clear denominators</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"c1\">-- turn it into a question about naturals</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"c1\">-- omega should take it from here but we don't have it yet.</span>\n  <span class=\"c1\">-- So prove 13 ≠ y * 8 by contradiction</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">∣</span> <span class=\"mi\">13</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Here's a workaround for now.</p>",
        "id": 400439274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699233425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"575824\">Michael Wahlberg</span> has marked this topic as resolved.</p>",
        "id": 400439799,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699233741
    },
    {
        "content": "<p>Here's another way which generalizes and doesn't use number theory. You just need to find two consecutive integers your number falls between.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hpointfive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n</code></pre></div>\n<p>(You can also use <code>linarith</code> instead of the last 2 lines, but it's slower.</p>",
        "id": 401284043,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1699589748
    },
    {
        "content": "<p>This is better than my approach because it can also be used to prove e.g. that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is not an integer.</p>",
        "id": 401300758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699601116
    }
]