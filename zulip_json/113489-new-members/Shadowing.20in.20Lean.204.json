[
    {
        "content": "<p>As an exercise, I'm redefining <code>Complex</code>.  In Lean 3, <code>import tactic</code> didn't import <code>Complex</code>, but in Lean 4, <code>import Mathlib.Tactic</code> does.  So I just put my new <code>Complex</code> in a namespace.  However, <code>notation \"ℂ\" =&gt; Complex\n</code> doesn't seem to follow the same shadowing rules, as now when I try <code>z : ℂ</code> I get an error that ℂ is ambiguous.  Here's an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">LADR</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Complex</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℂ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Complex</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">},</span> <span class=\"n\">z.re</span> <span class=\"bp\">=</span> <span class=\"n\">w.re</span> <span class=\"bp\">→</span> <span class=\"n\">z.im</span> <span class=\"bp\">=</span> <span class=\"n\">w.im</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Complex</span>\n<span class=\"kd\">end</span> <span class=\"n\">LADR</span>\n</code></pre></div>\n<p>How can I hide or shadow the existing  ℂ, or otherwise get  ℂ to refer to my Complex class?</p>",
        "id": 383727174,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1691692977
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">2000</span><span class=\"o\">)</span> <span class=\"s2\">\"ℂ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Complex</span>\n</code></pre></div>",
        "id": 383728628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691693347
    },
    {
        "content": "<p>Not exactly answering your question but maybe you can just import <code>Mathlib.Tactic.Common</code> instead</p>",
        "id": 383728803,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691693400
    }
]