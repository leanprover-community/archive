[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (or whomever runs NNG) I just want to point you to this PA.SE where a user was very confused about Lean syntax since it was very different from the NNG.  See the answer and comment.  <a href=\"https://proofassistants.stackexchange.com/questions/2587/what-do-i-need-to-import-from-mathlib-to-make-induction-a-with-d-hd-work/2589#2589\">https://proofassistants.stackexchange.com/questions/2587/what-do-i-need-to-import-from-mathlib-to-make-induction-a-with-d-hd-work/2589#2589</a></p>\n<blockquote>\n<p>Yeah it's definitely very confusing to play a game specifically to learn lean, and then it sets a series of traps that mean what you learn is different from actually using lean.</p>\n</blockquote>\n<p>I don't know the full answer.  Maybe it would be good to use <code>rewrite</code> instead of <code>rw</code>, use <code>induction'</code> or just adopt the new induction syntax, etc.  Or if you do keep it separate, maybe some accessible note stating all the differences.  Anyway, food for thought.</p>",
        "id": 406180719,
        "sender_full_name": "Jason Rute",
        "timestamp": 1701821011
    },
    {
        "content": "<p>I don't think that mathematicians can see the point of the ascii art so I don't want to switch to Lean induction. Switching to <code>induction'</code> and <code>rewrite</code> is probably what I want to do, but these are so long to type. Is there any way that we can somehow integrate \"click on tactic to make it magically appear in infoview\" or have some drop-down menu for choosing a tactic or something? I think that something like this would be a nice solution. <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> ?</p>",
        "id": 406181605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701821476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span></p>",
        "id": 406204479,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1701830731
    },
    {
        "content": "<p>I agree that point and click for tactics would be nice. But it really does not save a lot of time because you would probably still have to switch back to the keyboard to enter the arguments of the tactic.</p>",
        "id": 406213786,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1701833584
    },
    {
        "content": "<p>Maybe the error message when typing <code>induction ... with...</code> could be improved to point to <code>induction'</code>?</p>",
        "id": 406214322,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1701833767
    },
    {
        "content": "<p>Pretty soon, Lean core will fix <code>induction</code> so that it is doing the nice thing.</p>",
        "id": 406255933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701851315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> How about a final world, in which people learn the differences between NNG-tactics and \"real-world-Lean\" tactics?</p>",
        "id": 406256036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701851356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/NNG.20syntax.20different.20from.20Lean's/near/406181605\">said</a>:</p>\n<blockquote>\n<p>Is there any way that we can somehow integrate \"click on tactic to make it magically appear in infoview\" or have some drop-down menu for choosing a tactic or something? I think that something like this would be a nice solution.</p>\n</blockquote>\n<p>We discussed something similar once and decided this wouldn't be a feature we'd want to invest the time to implement. However, the code is open-source and I'm very happy to help anybody interested in navigating the code base :)</p>",
        "id": 406273301,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1701857482
    },
    {
        "content": "<p>FWIW, I think I once added paragraphs to some in-game-tactic-docs explaining the changes NNG makes, but I see that it only survived for <code>rfl</code>.</p>",
        "id": 406273439,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1701857533
    },
    {
        "content": "<p>I have been working on <a href=\"#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405360088\">point-and-click tactics for Lean</a> and would be interested in adding them to the NNG once they are polished enough. For tactics that require arguments, a drop-down list with suggestions (as demonstrated in the third gif) could be used to avoid the back and forth between the textbox and the user interface. (I noticed that sub-expression selection by shift-clicking doesn't work currently in the NNG, but perhaps this has something to do with the <code>LocationsContext</code>?)</p>",
        "id": 406277424,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701859128
    },
    {
        "content": "<p>That would certainly be cool! Once they are for example in Std, I assume it should be easy to add. If the selection already doesn't work at <a href=\"https://live.lean-lang.org\">https://live.lean-lang.org</a> (or <a href=\"http://lean.math.hhu.de\">lean.math.hhu.de</a>) then that should be fixed in <a href=\"https://live.lean-lang.org\">lean4web</a>, which is used in the games. I never selected subexpressions, so I'm not sure how to test this - I also don't observe anything happening shift-clicking an a random file in vscode. If you write a issue for this bug at lean4web, I'll look at it eventually.</p>",
        "id": 406287978,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1701863053
    },
    {
        "content": "<p>I tested a bit more and it looks like sub-expression selection works on the Lean Web Editor after all, it's just that the highlighting doesn't persist in the way that I'm used to (which is fine).</p>",
        "id": 406328928,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701876261
    },
    {
        "content": "<p>I'm the person who was confused. I did manage to get past the issue. I tried to dump a bunch of beginner questions onto the proof assistant stack exchange as I went, to make the path a bit more obvious. Anyways, the NNG and the stack exchange were enough to get me to the point where I can prove the CHSH inequality over random strategies ( <a href=\"https://gist.github.com/Strilanc/2e9778537f810df54063e2b79685642c\">https://gist.github.com/Strilanc/2e9778537f810df54063e2b79685642c</a> ). It's not an elegant proof, but it passes.</p>\n<p>Something maybe interesting is that I wanted to use Rat for the probabilities, but found it impossible to prove basic things with Rat because of the GCD monster that appears when operating on them. I ended up defining my own un-normalized Odds struct instead, despite the fact it required me to prove transitive ordering on that class which was very difficult for me.</p>\n<p>An obstacle I still keep running into is that there is a lot of variation in what methods are present for the various types. A particular annoyance is methods that are unnecessarily one-way instead of two-way. For example, Nat.succ_le_succ <em>could</em> work with rewrite, but instead its inverse direction has a different name Nat.le_of_succ_le_succ .</p>",
        "id": 406335408,
        "sender_full_name": "Craig Gidney",
        "timestamp": 1701878110
    },
    {
        "content": "<p>why would GCD appear when proving things using Rat?</p>",
        "id": 406335724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701878199
    },
    {
        "content": "<p>you shouldn't be unfolding the definitions</p>",
        "id": 406335775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701878213
    },
    {
        "content": "<p>Also there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.succ_le_succ_iff#doc\">docs#Nat.succ_le_succ_iff</a></p>",
        "id": 406336113,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1701878300
    },
    {
        "content": "<p>The GCD appears when I use induction on them and it pulls apart the definition, revealing the normalization. I completely buy that I'm doing it wrong.</p>\n<p>Thanks for pointing out the method. I did look for it but did not find it. I was looking in the files that visual studio code's go-to-definition sent me into, instead of on the website, though.</p>",
        "id": 406338893,
        "sender_full_name": "Craig Gidney",
        "timestamp": 1701879099
    },
    {
        "content": "<p>Yeah, using induction on a rational doesn't seem like it has useful behavior. Probably there are other ways to achieve what you were doing with it</p>",
        "id": 406341091,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701879813
    },
    {
        "content": "<p>The proof slowly improves as I find things in mathlib. nlinarith seems to solve most of the trivial stuff that was tripping me up with rationals. Down from 500 lines to 200 lines: <a href=\"https://gist.github.com/Strilanc/a4ee34e3a93db5dcb420a03517253491\">https://gist.github.com/Strilanc/a4ee34e3a93db5dcb420a03517253491</a></p>",
        "id": 407119018,
        "sender_full_name": "Craig Gidney",
        "timestamp": 1702252160
    },
    {
        "content": "<p>I'm curious Craig, why did you want to do induction on rationals, and what would you ideally have had? In the sense of -- what proof 'ideas', in English, would have led to induction on rationals?</p>",
        "id": 407779589,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702489451
    },
    {
        "content": "<p>Maybe there's a good alternative induction theorem to define on rationals that would capture what you want :)</p>",
        "id": 407779644,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702489484
    },
    {
        "content": "<p>Why do you make &lt;= <code>Bool</code>-valued? You're proving theorems so your life would be much easier if it were <code>Prop</code>-valued; you are constantly coercing from Bool to Prop this way. And why is probability Q-valued rather than R-valued?</p>",
        "id": 408021477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702579248
    }
]