[
    {
        "content": "<p>Hello - after doing some of the Natural Number Game, I thought that I would install Lean locally and try to work through some of the exercises locally. However the following proof gives me an error for using an unknown tactic - what am I doing wrong here? Any advice would be appreciated <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">odd</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">not_exists.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">ih</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401887747,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1699928261
    },
    {
        "content": "<p>It's <code>induction'</code> instead of <code>induction</code> if you want that <code>with</code> clause. (NNG uses its own versions of tactics)</p>",
        "id": 401888086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699928354
    },
    {
        "content": "<p>Thanks! Been trying to migrate from lean3 to lean4 so having to relearn things is fun haha</p>",
        "id": 401888238,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1699928401
    },
    {
        "content": "<p>If you do <code>induction x</code> by itself, then in VS Code the code action lightbulb pops up</p>\n<p><a href=\"/user_uploads/3121/1n18JDmhbMJE3xTZaD-HrfbW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1n18JDmhbMJE3xTZaD-HrfbW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/1n18JDmhbMJE3xTZaD-HrfbW/image.png\"></a></div><p>Clicking it, you can select \"generate an explicit pattern match for 'induction'\" and then it creates a skeleton for a structured proof.</p>\n<p><a href=\"/user_uploads/3121/PJUqvUkuaYuRuI6K8wvKFsj6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PJUqvUkuaYuRuI6K8wvKFsj6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PJUqvUkuaYuRuI6K8wvKFsj6/image.png\"></a></div><p>Each sub-proof can then be indented:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">odd</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">not_exists.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401891315,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699929363
    },
    {
        "content": "<p>For <code>induction</code>, the <code>with</code> clause is for all the pattern matches, which is why you were getting an error in your original version. The <code>induction'</code> tactic is the \"Lean 3 compatibility mode\" tactic.</p>",
        "id": 401891419,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699929417
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Would this be the correct syntax for Lean4 then?</p>",
        "id": 401896497,
        "sender_full_name": "Husnain Raza",
        "timestamp": 1699931910
    },
    {
        "content": "<p>Yeah that's right. But I don't think that the Lean 4 game engine supports fancy syntax like that (at least in the default mode where the user types in one line per tactic) so we just decided to hack the induction tactic so that it worked in the same way as lean 3. Other hacks: NNG4 cases is Lean 4 cases', NNG4 rw is weaker than Lean 4 rw because Lean 4 rw tries rfl after the rewrite, so closes goals unexpectedly.</p>",
        "id": 402037349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699984099
    }
]