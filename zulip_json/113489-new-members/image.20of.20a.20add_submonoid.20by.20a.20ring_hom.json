[
    {
        "content": "<p>Apparently, mathlib doesn't know about quotients of graded rings by homogeneous ideals, and <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> and I need that… <br>\nI am struggling with <code>add_monoid_class</code> : I want to define the image of an <code>add_submonoid</code> by a <code>ring_hom_map</code>, but what works below is strange , because of the <code>apply</code> without which I couldn't make it work…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.graded_algebra.homogeneous_ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.quotient</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">σ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_submonoid_class</span> <span class=\"n\">σ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝒜</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">graded_quot</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">graded_ring</span> <span class=\"bp\">𝒜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hI</span><span class=\"o\">:</span> <span class=\"n\">ideal.is_homogeneous</span> <span class=\"bp\">𝒜</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_submonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span>  <span class=\"n\">add_submonoid.map</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">),</span>\n<span class=\"o\">⟨</span><span class=\"bp\">𝒜</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">add_mem</span> <span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">zero_mem</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 343805919,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679529013
    },
    {
        "content": "<p>It's just a syntax issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">graded_quot</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">graded_ring</span> <span class=\"bp\">𝒜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hI</span><span class=\"o\">:</span> <span class=\"n\">ideal.is_homogeneous</span> <span class=\"bp\">𝒜</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_submonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_submonoid.map</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"bp\">𝒜</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">add_mem</span> <span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">zero_mem</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 343806191,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679529212
    },
    {
        "content": "<p>or maybe I misunderstood the issue?</p>",
        "id": 343806393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679529357
    },
    {
        "content": "<p>Oh I think I did misunderstand. Are you looking for some function that takes some term of a type with an <code>add_submonoid_class</code> instance, and returns an actuall <code>add_submonoid</code>? I couldn't find such a thing, but maybe I didn't look hard enough (it it should certainly exist)</p>",
        "id": 343806920,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679529684
    },
    {
        "content": "<p>Are we just missing a coercion here?</p>",
        "id": 343807483,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679530044
    },
    {
        "content": "<p>or maybe the <code>add_submonoid.map</code> should be generalized? I suppose <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> might be a good person to ask?</p>",
        "id": 343807633,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679530181
    },
    {
        "content": "<p>I'll take a look at this tomorrow</p>",
        "id": 343809687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679531981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/image.20of.20a.20add_submonoid.20by.20a.20ring_hom/near/343807633\">said</a>:</p>\n<blockquote>\n<p>or maybe the <code>add_submonoid.map</code> should be generalized? I suppose <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> might be a good person to ask?</p>\n</blockquote>\n<p>My intuition says adding a coercion is useful in more cases than generalizing <code>map</code>, but there's no technical objection to doing either. We might have to be careful that <code>coe_sort</code> doesn't get overambitious, i.e. we don't want to end up following a coercion path along the lines of <code>σ → add_submonoid_class →add_submonoid → set_like → Type</code> instead of <code>σ → set_like → Type</code>.</p>",
        "id": 343920552,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1679565182
    },
    {
        "content": "<p>I don't thing generalizing <code>add_submonoid.map</code> would be very useful</p>",
        "id": 343922219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679565530
    },
    {
        "content": "<p>Because it still has to generate an <code>add_submonoid</code></p>",
        "id": 343922277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679565539
    },
    {
        "content": "<p>The <code>add_submonoid_class -&gt; add_submonoid</code> coercion is probably ok, but it opens a simpNF can of worms</p>",
        "id": 343922444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679565573
    },
    {
        "content": "<p>Because now we need lemmas translating between <code>a_submodule.to_add_submonoid</code> vs <code>coe a_submodule</code>, <code>coe a_subalgebra.to_submodule</code> vs <code>coe a_subalgebra</code>, etc</p>",
        "id": 343922696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679565633
    },
    {
        "content": "<p>Regarding your original question, it works fine without <code>apply</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">graded_quot</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">graded_ring</span> <span class=\"bp\">𝒜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hI</span><span class=\"o\">:</span> <span class=\"n\">ideal.is_homogeneous</span> <span class=\"bp\">𝒜</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">add_submonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_submonoid.map</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"bp\">𝒜</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">add_mem</span><span class=\"o\">,</span> <span class=\"n\">zero_mem</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 343923434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679565818
    },
    {
        "content": "<p>You just needed to fix the type errors due to the wrong number of arguments to <code>add_mem</code></p>",
        "id": 343923488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679565832
    },
    {
        "content": "<p>Thank you — and sorry.<br>\nWhat had confused me here, is that <code>library_search</code> suggested <code>exact add_mem</code>, which does not work. My impression was because of the “curly braced” implicit arguments which had to be given again. I see now how to do that. Thanks again.</p>",
        "id": 344181132,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679643706
    }
]