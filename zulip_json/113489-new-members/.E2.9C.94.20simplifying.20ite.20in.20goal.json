[
    {
        "content": "<p>I have an ite statement in the goal, where I have the proof of the condition, but I don't know how to unwrap the ite statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.OrderOfElement</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Dynamics.PeriodicPts</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Dynamics.FixedPoints.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">ℤ</span><span class=\"o\">]:</span> <span class=\"n\">addOrderOf</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- unfold to follow the trail of definitions, delete later</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">addOrderOf</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.minimalPeriod</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.periodicPts</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.IsPeriodicPt</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.IsFixedPt</span>\n  <span class=\"n\">dsimp</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">add_left_iterate</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">lt_self_iff_false</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">]</span> <span class=\"c1\">-- this works but doesn't use h</span>\n</code></pre></div>\n<p>This is the state after the initialization of <code>h</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">G</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">AddGroup</span> <span class=\"n\">ℤ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Nat.find</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Is there a way to convert the goal to replace <code>if h : ∃ n &gt; 0, (fun x =&gt; 1 + x)^[n] 0 = 0 then Nat.find h else 0</code> to <code>0</code> using <code>h</code>? I am aware that <code>dsimp; simp</code> clears the goal, but I want to know how to replace the conditional in general.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Nat.find</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>This doesn't seem to work because <code>Nat.find</code> is protected.</p>",
        "id": 403914789,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1700811374
    },
    {
        "content": "<p>This isn't the normal if-then-else, but the dependent one (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dite#doc\">docs#dite</a>), so I would have expected <code>dif_neg</code> to work. And indeed you can <code>apply dif_neg</code>, but somehow your <code>h</code> doesn't fit. Maybe different types? At the phone, so hard to check</p>",
        "id": 403922938,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700815212
    },
    {
        "content": "<p>BTW <code>[AddGroup \\Z]</code> is not what you want here, this means \"introduce an arbitrary new additive group structure on the integers\".</p>",
        "id": 403923849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700815573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/simplifying.20ite.20in.20goal/near/403922938\">said</a>:</p>\n<blockquote>\n<p>This isn't the normal if-then-else, but the dependent one (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dite#doc\">docs#dite</a>), so I would have expected <code>dif_neg</code> to work. And indeed you can <code>apply dif_neg</code>, but somehow your <code>h</code> doesn't fit. Maybe different types? At the phone, so hard to check</p>\n</blockquote>\n<p>Thank you, I was barking up the wrong branching function. The following definition of <code>h</code> works:<br>\n<code>have h: ¬∃ n &gt; 0, (fun x =&gt; (1: ℤ) + x)^[n] 0 = 0 := by simp</code><br>\nwhere <code>(1: Z)</code> is a necessary cast to Int, discovered after hovering over the two defined functions (they look the same in the output, but different when highlighted)</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I intended to assure myself when reading the function that \"yes, Z satisfies AddGroup\" to save myself from having to search through and rediscover that a tactic is applicable because of AddGroup. Is there a better way to express this in the assumptions?</p>",
        "id": 403936557,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1700820331
    },
    {
        "content": "<p>the full, ungolfed proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.OrderOfElement</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Dynamics.PeriodicPts</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Dynamics.FixedPoints.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">ℤ</span><span class=\"o\">]:</span> <span class=\"n\">addOrderOf</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- unfold to follow the trail of definitions, delete later</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">addOrderOf</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.minimalPeriod</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.periodicPts</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.IsPeriodicPt</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.IsFixedPt</span>\n  <span class=\"n\">dsimp</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">dif_neg</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 403936705,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1700820383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"667038\">@SaNoy SaKnoi</span> There is no need to tell Lean that <code>ℤ</code> is an <code>AddGroup</code>, it already knows it. All the theorem that require <code>AddGroup</code> (or similar assumptions) will apply automatically.</p>",
        "id": 403938461,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700821093
    },
    {
        "content": "<p>I see. I'll put it  in the comments then. Thank you again!</p>",
        "id": 403938684,
        "sender_full_name": "SaNoy SaKnoi",
        "timestamp": 1700821177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667038\">SaNoy SaKnoi</span> has marked this topic as resolved.</p>",
        "id": 403938718,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700821188
    },
    {
        "content": "<p>If you want to convince yourself it's there, you can use <code>#synth AddGroup \\Z</code></p>",
        "id": 403962154,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700830361
    }
]