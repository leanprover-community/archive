[
    {
        "content": "<p>How do I inductively define a map out of a list?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_the_elements</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sequence</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">sequence</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sum_the_elements</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 355579680,
        "sender_full_name": "Dean Young",
        "timestamp": 1683138817
    },
    {
        "content": "<p>I want to modify the example to produce a function which sums the elements.</p>",
        "id": 355579816,
        "sender_full_name": "Dean Young",
        "timestamp": 1683138849
    },
    {
        "content": "<p>is there a particular rreason you are not matching on nil and cons but instead on append?</p>",
        "id": 355579996,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683138902
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.sum#doc\">docs4#List.sum</a> will sum the elements of a list.</p>",
        "id": 355580350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683139007
    },
    {
        "content": "<p>Notice that <code>List.foldl</code> in its definition is a way to recurse where the last element is summed last.</p>",
        "id": 355580664,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683139096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  for my purposes I want something that appends at the end of the list and not the beginning.</p>",
        "id": 355582701,
        "sender_full_name": "Dean Young",
        "timestamp": 1683139694
    },
    {
        "content": "<p>Right but why is that relevant to yourr sum function? It is commutative anyways</p>",
        "id": 355582778,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683139732
    },
    {
        "content": "<p>I was just interested in learning how it works I think.</p>\n<p>But I can't even seem to get this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">fdfd</span> <span class=\"n\">fdfd2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">fdfd2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fdfd</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>lean seems to think that fdfd is a proposition.</p>",
        "id": 355583371,
        "sender_full_name": "Dean Young",
        "timestamp": 1683139938
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this example is taken from the tutorial, but my lean thinks that nil is supposed to be a proposition.</p>",
        "id": 355584712,
        "sender_full_name": "Dean Young",
        "timestamp": 1683140363
    },
    {
        "content": "<p>this is lean 4 by the way</p>",
        "id": 355584802,
        "sender_full_name": "Dean Young",
        "timestamp": 1683140396
    },
    {
        "content": "<p>No, the issue with your code is that <code>cons</code> and <code>nil</code> are not top leve identifiers so you have to do  one of <code>List.cons</code> <code>.cons</code> (note the dot) <code>fdfd :: fdfd2</code> and <code>[]</code> or open the List namespace which is most likely what happened in the example</p>",
        "id": 355584816,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683140399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"559197\">Kind Bubble</span> <a href=\"#narrow/stream/113489-new-members/topic/defining.20a.20map.20out.20of.20a.20list/near/355584802\">said</a>:</p>\n<blockquote>\n<p>this is lean 4 by the way</p>\n</blockquote>\n<p>I know^^</p>",
        "id": 355584879,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683140405
    },
    {
        "content": "<p>Is opening the List namespace recommendable? Does that just tell Lean to use the terminology from the list section of documentation?</p>",
        "id": 355585740,
        "sender_full_name": "Dean Young",
        "timestamp": 1683140667
    },
    {
        "content": "<p>So, there are actually two ways of opening the List name space, you can <code>open List</code> which basically takes all identifiers frrom the List namespace and makes them directly accessible or you can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">function...</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">List</span>\n</code></pre></div>\n<p>which actually adds function to the List namespace so you can later do <code>List.function</code> or even use <code>xs.function</code> where <code>xs</code> is a List. The second is (obviously) interesting if you wish to extend the functions directly available on List. The first is interesting if you want to just use functionality from a namespace. However given the fact that you can even use the <code>[]</code> and <code>::</code> syntax to match on a list I see no reason to do the <code>open List</code> thing. I would usually use it when for example writing a Lean metaproogramm to <code>open Lean</code> so you don't have to prefix literally every line with <code>Lean.</code></p>",
        "id": 355586277,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683140826
    },
    {
        "content": "<p>I think it has another issue though, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">jkljkl</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">jkljkl</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">jkljkl</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">jkljkl</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">44</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">expected</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.6367</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.6392</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.6398</span>\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">45</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n</code></pre></div>",
        "id": 355591579,
        "sender_full_name": "Dean Young",
        "timestamp": 1683142412
    },
    {
        "content": "<p>You've only shown us three lines, and your error is on line 44</p>",
        "id": 355591934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683142525
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 355591948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683142530
    },
    {
        "content": "<p>oh thanks, that made me realize that I had defined </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">p</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">transitivity</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>which is no good!</p>",
        "id": 355592444,
        "sender_full_name": "Dean Young",
        "timestamp": 1683142684
    },
    {
        "content": "<p>If you're not familiar yet with Lean 4's regular syntax, I would strongly recommend against defining your own syntax that remotely resembles something that is builtin</p>",
        "id": 355592552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683142727
    },
    {
        "content": "<p>Ok -- and thanks for your help.<br>\n<span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  thanks!</p>",
        "id": 355592881,
        "sender_full_name": "Dean Young",
        "timestamp": 1683142825
    }
]