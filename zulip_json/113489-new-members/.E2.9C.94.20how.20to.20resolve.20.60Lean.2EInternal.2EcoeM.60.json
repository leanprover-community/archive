[
    {
        "content": "<p>I end up with expressions involving <code>Lean.Internal.coeM</code> when I'm trying to use <code>List.finRange</code>. My very rough understanding is that this is somehow necessary coercing one broad type into another? Or something? Anyway, how should I \"remove\" it when I'm trying to write a proof?</p>",
        "id": 403805045,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700751424
    },
    {
        "content": "<p>In particular, how would I prove something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">Lean.Internal.coeM</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>? It feels like something <code>simp</code> should do, I would hope, but I don't know...</p>",
        "id": 403805520,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700751601
    },
    {
        "content": "<p>You can use <code>simp [Lean.Internal.coeM]</code> to get rid of it (which may well result in something else unreadable too, but if you keep doing that you should eventually end up with something you can actually make sense of</p>",
        "id": 403805659,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700751631
    },
    {
        "content": "<p>For your example to be readable we'd need a lot more detail on what <code>k</code> is etc (<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please!)</p>",
        "id": 403805770,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700751657
    },
    {
        "content": "<p>A mwe, for instance saying that a list of coefficients of a polynomial is as long as the degree of the polynomial. I thought that <code>List.length_map</code> would instantly turn the LHS into <code>(List.finRange P.natDegree).length</code>, but this <code>coeM</code> creeps in there somehow and it gets stuck.</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Degree.Definitions</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">length_coeffList</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">List.finRange</span> <span class=\"n\">P.natDegree</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">P.coeff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">P.natDegree</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Giving it <code>simp [Lean.Internal.coeM]</code> (which does indeed apply the <code>Length.list_map</code> that I wanted) leaves me with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">α</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"bp\">∘</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">CoeT.coe</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">P</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 403819057,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700756699
    },
    {
        "content": "<p>Why not just start with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.length_map#doc\">docs#List.length_map</a> using <code>rw</code>?</p>",
        "id": 403830131,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1700761213
    },
    {
        "content": "<p>That does pretty much the same thing as simp. Both give a coeM term I'm unable to work with any further.</p>",
        "id": 403831075,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700761537
    },
    {
        "content": "<p>That does pretty much the same thing as simp. Both give a coeM term I'm unable to work with any further.</p>",
        "id": 403831110,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700761553
    },
    {
        "content": "<p>Oh I see, this is induced by the <code>Monad</code> instance on <code>List</code>.</p>",
        "id": 403839434,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1700764559
    },
    {
        "content": "<p>IMO <code>coeM</code> is just broken; regular coercions do not insert <code>coe</code>, so nor should  this monad coercion</p>",
        "id": 403839737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700764660
    },
    {
        "content": "<p>How does this happen? Is this some kind of confusion over what <code>map</code> I'm trying to use or something? I tried <code>set_option pp.all true</code> and learned absolutely nothing <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> or maybe more practically: how do I avoid this coercion happening?</p>",
        "id": 403849112,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700769265
    },
    {
        "content": "<p>I tried changing <code>{α : Type*}</code> to <code>{α : Type}</code> in hopes it was some universe problem, but that didn't help</p>",
        "id": 403849140,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700769297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448405\">@Alex Meiburg</span> What you're running into is that <code>List.finRange</code> gives a <code>List (Fin _)</code>, but you're mapping <code>P.coeff</code> over it, which expects a <code>Nat</code>. The fact that <code>List</code> is a monad triggers a feature that inserts a <code>List (Fin _) -&gt; List Nat</code> coercion derived from the <code>Fin _ -&gt; Nat</code> coercion.</p>\n<p>If you're more careful with matching up your types, you can avoid this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Degree.Definitions</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">length_coeffList</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">List.finRange</span> <span class=\"n\">P.natDegree</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P.coeff</span> <span class=\"n\">n.val</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">P.natDegree</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403850671,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700770484
    },
    {
        "content": "<p>ooooh. Alright, I can now interpret what's going on. Thank you!</p>",
        "id": 403850917,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1700770696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 403855557,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700774271
    }
]