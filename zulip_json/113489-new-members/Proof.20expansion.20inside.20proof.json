[
    {
        "content": "<p>hi,<br>\nassuming we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then in the new proof we use the zero_add for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"bp\">...</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>how could we expand / add the zero_add proof inside the new proof to get something like below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"bp\">...</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">zero_add</span><span class=\"o\">:</span>\n<span class=\"kd\">begin</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 351624566,
        "sender_full_name": "Marcin Tomaszewski",
        "timestamp": 1682083351
    },
    {
        "content": "<p>Please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 351624717,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682083387
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"bp\">...</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 351626029,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682083662
    },
    {
        "content": "<p>thanks</p>",
        "id": 351694837,
        "sender_full_name": "Marcin Tomaszewski",
        "timestamp": 1682098989
    },
    {
        "content": "<p>(deleted: Sorry, I accidentally sent the message)</p>",
        "id": 351712847,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1682104193
    }
]