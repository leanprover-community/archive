[
    {
        "content": "<p>What is large elimination? What is subsingleton elimination? Why do we care about these? What do they have to do with proof irrelevance? What's so good about proof irrelevance anyway?</p>",
        "id": 196007956,
        "sender_full_name": "Ken Lee",
        "timestamp": 1588366024
    },
    {
        "content": "<p>Some inductive propsition have a recursor that can make elements of a Type e.g. <code>eq</code>, <code>true</code>, <code>false</code>, <code>and</code>, <code>acc</code>. Others can only make a Prop, e.g. <code>exists</code> and <code>or</code>. eliminating into Type is call large elemination. If large elimination was allowed on <code>or</code> then the iota reduction rule would be inconsistent because of proof irrelevance, your function could return different values for <code>or.inl x</code> and <code>or.inr y</code>, even though <code>or.inl x.= or.inr y</code>. The Props with large elimination don't have this problem.</p>",
        "id": 196012582,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588368819
    },
    {
        "content": "<p>This is basically because they would be a subsingleton anyway, even if they were types. They only have one constructor, and all arguments are either props or are mentioned in the type of the output. There is a more precise rule for this somewhere.</p>",
        "id": 196012775,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588368920
    },
    {
        "content": "<p>I think other people can answer what is so good about proof irrelevance better than me, but one example is that <code>subtype.ext</code> would not hold without it.</p>",
        "id": 196012885,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588368978
    },
    {
        "content": "<p><a href=\"https://lean-forward.github.io/logical-verification/2018/41_notes.html\" title=\"https://lean-forward.github.io/logical-verification/2018/41_notes.html\">https://lean-forward.github.io/logical-verification/2018/41_notes.html</a> might be helpful</p>",
        "id": 196013729,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588369493
    },
    {
        "content": "<p>Thanks Chris. I will have a read</p>",
        "id": 196015004,
        "sender_full_name": "Ken Lee",
        "timestamp": 1588370392
    }
]