[
    {
        "content": "<p>I have a problem trying to prove this statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hxy</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx_C</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Complex.cpow_add</span> <span class=\"n\">y</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">hx_C</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hcontra</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hcontra</span>\n  <span class=\"k\">have</span> <span class=\"n\">conc</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">conc</span> <span class=\"n\">hcontra</span><span class=\"o\">)</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>h'' should be the opposite of h' but the coercions disappear in the h'' statement.  How do I force them to stay?</p>",
        "id": 397881526,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1697927476
    },
    {
        "content": "<p>Also I would like to keep x y z as Real numbers. I recognize it would be easier to convert them at the start, but I would like to see where this path leads.</p>",
        "id": 397881582,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1697927539
    },
    {
        "content": "<p>I <em>think</em> what's happening has to do with your <code>have conc</code> line. Specifically, you have <code>have conc : x ^ (y + 1) ≠ x ^ y * x ^ 1 → ↑x ^ (↑y + 1) ≠ ↑x ^ ↑y * ↑x ^ 1 := by simp</code> -- the up arrow is telling Lean \"coerce x to make this thing type check\", but Lean doesn't know where you mean for x to live -- it is perfectly happy for x to stay in \\R, because your equation then still type checks. So your conc ends up being some trivial statement.</p>",
        "id": 397882256,
        "sender_full_name": "Julian Berman",
        "timestamp": 1697928430
    },
    {
        "content": "<p>If you want to manually insert coercions, you should use a type ascription <code>(↑x : ℂ)</code> as well as an arrow (actually you don't even need the arrow even most of the time when you do that).</p>",
        "id": 397882315,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697928492
    },
    {
        "content": "<p>If you change to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hxy</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx_C</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Complex.cpow_add</span> <span class=\"n\">y</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">hx_C</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hcontra</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hcontra</span>\n  <span class=\"k\">have</span> <span class=\"n\">conc</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">conc</span> <span class=\"n\">hcontra</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>now the <code>contradiction</code> will indeed close your goal -- and you're left indeed with trying to now prove <code>conc</code> really holds for lifting that from R to C</p>",
        "id": 397882319,
        "sender_full_name": "Julian Berman",
        "timestamp": 1697928495
    },
    {
        "content": "<p>If you use <code>Real.rpow_add_one</code>, you don't need to go into complex numbers at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Real.rpow_add_one</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397883028,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1697929327
    }
]