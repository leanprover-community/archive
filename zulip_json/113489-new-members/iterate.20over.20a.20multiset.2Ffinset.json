[
    {
        "content": "<p>If I want to take a <code>multiset</code> (or a <code>finset</code> or a <code>set</code> for that matter), and I wish to match on this in a similar way to a list, i.e.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">my_multiset</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>how would I go about doing this?</p>",
        "id": 196720163,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588817282
    },
    {
        "content": "<p>in short, you can't, at least not using <code>match</code></p>",
        "id": 196720349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817503
    },
    {
        "content": "<p>You can write custom recursion principles, but they don't interact with <code>match</code> which is reserved for pattern matching on <code>inductive</code> types</p>",
        "id": 196720407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817562
    },
    {
        "content": "<p>what are you trying to do?</p>",
        "id": 196720420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817594
    },
    {
        "content": "<p>What I'm trying to do is implement an algorithm that performs a specified action for each element in a multiset (really it's underlying set)</p>",
        "id": 196720526,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588817741
    },
    {
        "content": "<p>In this case, adjoining all of the roots of a polynomial to a field</p>",
        "id": 196720534,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588817756
    },
    {
        "content": "<p>Given one element, I know what to do, but I don't know how to get elements out of the <code>multiset</code> I have</p>",
        "id": 196720604,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588817804
    },
    {
        "content": "<p>You can use <code>multiset.fold</code>, but keep in mind that the operation you fold must be commutative</p>",
        "id": 196720678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817918
    },
    {
        "content": "<p>Ok, but there is no way to convert a <code>finset</code> to a list containing the elements in that <code>finset</code>? (say I don't care about the order)</p>",
        "id": 196722033,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588819694
    },
    {
        "content": "<p>Well you might not care about the order, but somebody else might care.</p>",
        "id": 196722400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588820199
    },
    {
        "content": "<p>you can, but not computably (at least in general)</p>",
        "id": 196722533,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588820374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/iterate.20over.20a.20multiset.2Ffinset/near/196722533\" title=\"#narrow/stream/113489-new-members/topic/iterate.20over.20a.20multiset.2Ffinset/near/196722533\">said</a>:</p>\n<blockquote>\n<p>you can, but not computably (at least in general)</p>\n</blockquote>\n<p>So, if I were to decide I'm willing to give up on computation, how would I go about it?</p>",
        "id": 196722752,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588820652
    },
    {
        "content": "<p>in your case, \"adjoin all the roots of a polynomial to a field\" does not literally mean, extract the roots of said polynomial as a multiset of some unspecified type, and then do this operation of adjoining each one of them to a field</p>",
        "id": 196722808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588820740
    },
    {
        "content": "<p>firstly the roots do not exist</p>",
        "id": 196722810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588820744
    }
]