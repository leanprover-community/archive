[
    {
        "content": "<p>I have the following MWE that implements the transition rule below for a simplified lambda calculus (tried to strip away as much as I could). But there seems to be something that Lean doesn't like with the way I've defined <code>generic_ext_prod</code> since I keep getting a dependent elimination failure in the <code>irrelevant</code> theorem. I was under the impression this can happen when you use functions in the indices of inductive types, but I'm not using any here. Any advice on how I could reformulate it to get it to work? Or maybe there's something in the proof I can do, I haven't had any luck so far.</p>\n<p><a href=\"/user_uploads/3121/hO8028Z5oABTZOOlE1PR2epy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hO8028Z5oABTZOOlE1PR2epy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hO8028Z5oABTZOOlE1PR2epy/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TyOperator</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator</span> <span class=\"bp\">→</span> <span class=\"n\">TyOperator</span> <span class=\"bp\">→</span> <span class=\"n\">TyOperator</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TyOperator.subst</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">τ_opₗ</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ty.prod</span> <span class=\"o\">(</span><span class=\"n\">τ_opₗ.subst</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ_op</span><span class=\"bp\">ᵣ.</span><span class=\"n\">subst</span> <span class=\"n\">τ</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₁</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₂</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Ty.prod</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">projₗ</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Ty.prod</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₁</span>\n  <span class=\"bp\">|</span> <span class=\"n\">proj</span><span class=\"bp\">ᵣ</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Ty.prod</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generic_ext</span>\n      <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"n\">ρ'</span> <span class=\"n\">τ_out</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">τ_op</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">τ_out</span> <span class=\"bp\">=</span> <span class=\"n\">τ_op.subst</span> <span class=\"n\">ρ'</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">ρ'</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">τ_op.subst</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ_out</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"bp\">Γ</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"n\">τ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Transition</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generic_ext_prod</span>\n      <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"n\">ρ'</span>  <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">τ_opₗ</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">ρ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">Ty.prod</span> <span class=\"o\">(</span><span class=\"n\">τ_opₗ.subst</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ_op</span><span class=\"bp\">ᵣ.</span><span class=\"n\">subst</span> <span class=\"n\">ρ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n      <span class=\"n\">Transition</span> <span class=\"o\">(</span><span class=\"n\">Expr.generic_ext</span> <span class=\"o\">(</span><span class=\"n\">TyOperator.prod</span> <span class=\"n\">τ_opₗ</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">e'</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"n\">Expr.pair</span> <span class=\"o\">(</span><span class=\"n\">Expr.generic_ext</span> <span class=\"n\">τ_opₗ</span> <span class=\"n\">rfl</span> <span class=\"n\">e'</span> <span class=\"o\">(</span><span class=\"n\">Expr.projₗ</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Expr.generic_ext</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span> <span class=\"n\">rfl</span> <span class=\"n\">e'</span> <span class=\"o\">(</span><span class=\"n\">Expr.proj</span><span class=\"bp\">ᵣ</span> <span class=\"n\">e</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"n\">e₁</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Transition</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Transition.irrelevant</span>\n  <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">τ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"n\">tr'</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">⟶</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tr</span> <span class=\"bp\">=</span> <span class=\"n\">tr'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">tr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generic_ext_prod</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">tr'</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">generic_ext_prod</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395593863,
        "sender_full_name": "sgcs",
        "timestamp": 1696814299
    },
    {
        "content": "<p>Just got back around to trying to get this to work again. Forgot I didn't give the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dependent</span> <span class=\"n\">elimination</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">equation</span>\n  <span class=\"n\">TyOperator.subst</span> <span class=\"n\">ρ'</span><span class=\"bp\">✝¹</span> <span class=\"n\">τ_opₗ</span><span class=\"bp\">✝¹</span> <span class=\"bp\">=</span> <span class=\"n\">TyOperator.subst</span> <span class=\"n\">ρ'</span><span class=\"bp\">✝</span> <span class=\"n\">τ_opₗ</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>Is there some way I can tell Lean that <code>TyOperator.subst</code> is injective and that <code>ρ'✝¹ = ρ'✝</code> and  <code>τ_opₗ✝¹ = τ_opₗ✝</code>? Would it help if I used an inductive type to define the substitution instead of a function?</p>",
        "id": 398142889,
        "sender_full_name": "sgcs",
        "timestamp": 1698088497
    },
    {
        "content": "<p>OK, using an inductive type seems to get it to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TyOperator</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator</span> <span class=\"bp\">→</span> <span class=\"n\">TyOperator</span> <span class=\"bp\">→</span> <span class=\"n\">TyOperator</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TyOperator.Subst</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">TyOperator</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span>\n      <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"n\">τₗ'</span> <span class=\"n\">τ</span><span class=\"bp\">ᵣ'</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ_opₗ</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">Subst</span> <span class=\"n\">τ</span> <span class=\"n\">τ_opₗ</span> <span class=\"n\">τₗ'</span> <span class=\"bp\">→</span>\n      <span class=\"n\">Subst</span> <span class=\"n\">τ</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span> <span class=\"n\">τ</span><span class=\"bp\">ᵣ'</span> <span class=\"bp\">→</span>\n      <span class=\"n\">Subst</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">TyOperator.prod</span> <span class=\"n\">τ_opₗ</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ty.prod</span> <span class=\"n\">τₗ'</span> <span class=\"n\">τ</span><span class=\"bp\">ᵣ'</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₁</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₂</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Ty.prod</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">projₗ</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Ty.prod</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₁</span>\n  <span class=\"bp\">|</span> <span class=\"n\">proj</span><span class=\"bp\">ᵣ</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Ty.prod</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generic_ext</span>\n      <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"n\">ρ'</span> <span class=\"n\">τ_in</span> <span class=\"n\">τ_out</span><span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">τ_op</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">TyOperator.Subst</span> <span class=\"n\">ρ</span> <span class=\"n\">τ_op</span> <span class=\"n\">τ_in</span> <span class=\"bp\">→</span>\n      <span class=\"n\">TyOperator.Subst</span> <span class=\"n\">ρ'</span> <span class=\"n\">τ_op</span> <span class=\"n\">τ_out</span> <span class=\"bp\">→</span>\n      <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">ρ'</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ_in</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ_out</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"bp\">Γ</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"n\">τ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Transition</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generic_ext_prod</span>\n      <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"n\">ρ'</span> <span class=\"n\">τ_inₗ</span> <span class=\"n\">τ_in</span><span class=\"bp\">ᵣ</span> <span class=\"n\">τ_outₗ</span> <span class=\"n\">τ_out</span><span class=\"bp\">ᵣ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">τ_opₗ</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">sₗ</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator.Subst</span> <span class=\"n\">ρ</span> <span class=\"n\">τ_opₗ</span> <span class=\"n\">τ_inₗ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sₗ'</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator.Subst</span> <span class=\"n\">ρ'</span> <span class=\"n\">τ_opₗ</span> <span class=\"n\">τ_outₗ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᵣ</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator.Subst</span> <span class=\"n\">ρ</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span> <span class=\"n\">τ_in</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᵣ'</span> <span class=\"o\">:</span> <span class=\"n\">TyOperator.Subst</span> <span class=\"n\">ρ'</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span> <span class=\"n\">τ_out</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">ρ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">Ty.prod</span> <span class=\"n\">τ_inₗ</span> <span class=\"n\">τ_in</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">Transition</span> <span class=\"o\">(</span><span class=\"n\">Expr.generic_ext</span> <span class=\"o\">(</span><span class=\"n\">TyOperator.prod</span> <span class=\"n\">τ_opₗ</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TyOperator.Subst.prod</span> <span class=\"n\">sₗ</span> <span class=\"n\">s</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TyOperator.Subst.prod</span> <span class=\"n\">sₗ'</span> <span class=\"n\">s</span><span class=\"bp\">ᵣ'</span><span class=\"o\">)</span> <span class=\"n\">e'</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"n\">Expr.pair</span> <span class=\"o\">(</span><span class=\"n\">Expr.generic_ext</span> <span class=\"n\">τ_opₗ</span> <span class=\"n\">sₗ</span> <span class=\"n\">sₗ'</span> <span class=\"n\">e'</span> <span class=\"o\">(</span><span class=\"n\">Expr.projₗ</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Expr.generic_ext</span> <span class=\"n\">τ_op</span><span class=\"bp\">ᵣ</span> <span class=\"n\">s</span><span class=\"bp\">ᵣ</span> <span class=\"n\">s</span><span class=\"bp\">ᵣ'</span> <span class=\"n\">e'</span> <span class=\"o\">(</span><span class=\"n\">Expr.proj</span><span class=\"bp\">ᵣ</span> <span class=\"n\">e</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"n\">e₁</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Transition</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Transition.irrelevant</span>\n  <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">τ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"n\">tr'</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">⟶</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tr</span> <span class=\"bp\">=</span> <span class=\"n\">tr'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">tr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generic_ext_prod</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">tr'</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">generic_ext_prod</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_all</span>\n</code></pre></div>\n<p>I think using a function is a bit more intuitive for me personally though, is there a way to get that approach working for future reference?</p>",
        "id": 398145647,
        "sender_full_name": "sgcs",
        "timestamp": 1698090046
    }
]