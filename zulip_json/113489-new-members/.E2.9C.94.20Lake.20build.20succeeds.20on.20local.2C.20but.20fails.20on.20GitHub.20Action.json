[
    {
        "content": "<p>Lake build succeeds on local, but fails on GitHub Action. Here is the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[526/649] Building Examples.Says\nerror: &gt; LEAN_PATH=./lake-packages/proofwidgets/build/lib:./lake-packages/Cli/build/lib:./lake-packages/mathlib/build/lib:./lake-packages/Qq/build/lib:./lake-packages/aesop/build/lib:./lake-packages/std/build/lib:./build/lib LD_LIBRARY_PATH=./build/lib /home/runner/.elan/toolchains/leanprover--lean4---v4.0.0/bin/lean -DrelaxedAutoImplicit=false ./././Examples/Says.lean -R ././. -o ./build/lib/Examples/Says.olean -i ./build/lib/Examples/Says.ilean -c ./build/ir/Examples/Says.c\nerror: stdout:\n./././Examples/Says.lean:24:2: error: Tactic `aesop?` produced `intro a₁ a₂ a apply hgfinj simp_all only [comp_apply]`,\nbut was expecting it to produce `  intro a₁ a₂ a\n  apply hgfinj\n  simp_all only [comp_apply]`!\nerror: external command `/home/runner/.elan/toolchains/leanprover--lean4---v4.0.0/bin/lean` exited with code 1\nError: Process completed with exit code 1.\n</code></pre></div>\n<p>How can I solve this problem?</p>\n<p>The Repository where the problem is happening.: <a href=\"https://github.com/lean-ja/tactic-cheetsheet\">https://github.com/lean-ja/tactic-cheetsheet</a></p>",
        "id": 397292910,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697629118
    },
    {
        "content": "<p>Are you very sure that the repo contains the state you are running locally? Did you run <code>lake build</code>locally, or are you looking at the VS code editor output?</p>",
        "id": 397294796,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697629745
    },
    {
        "content": "<p>I must admit that <code>lake build</code> works locally here for me too</p>",
        "id": 397294851,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697629768
    },
    {
        "content": "<p>Ah, the difference is merely in the indentation of the expected output. Weren't there some discussion around multi-line <code>try</code> statements here recently?</p>",
        "id": 397295191,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697629887
    },
    {
        "content": "<p>The toolchain is outdated, it might be the cause</p>",
        "id": 397296959,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697630429
    },
    {
        "content": "<p>If it still doesn't go away, maybe try disabling <code>actions/cache</code> to see if it's caused by cache.</p>",
        "id": 397297318,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697630539
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 397475504,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697711277
    },
    {
        "content": "<blockquote>\n<p>The toolchain is outdated, it might be the cause</p>\n</blockquote>\n<p>I updated the toolchain, but it didn't work.</p>\n<blockquote>\n<p>If it still doesn't go away, maybe try disabling actions/cache to see if it's caused by cache.</p>\n</blockquote>\n<p>I tried this, but it didnt work...</p>",
        "id": 397476303,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697711603
    },
    {
        "content": "<p>It's a new error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./././</span><span class=\"n\">Examples</span><span class=\"bp\">/</span><span class=\"n\">Says.lean</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"n\">output</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"kd\">begin</span> <span class=\"k\">with</span> <span class=\"bp\">'</span><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span><span class=\"bp\">'</span><span class=\"o\">:</span> <span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">a</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hgfinj</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.2.0-rc3/bin/lean` exited with code 1</span>\n</code></pre></div>",
        "id": 397480026,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697712895
    },
    {
        "content": "<p>The error messages have indeed changed with the update. But I don't know how to solve it.</p>",
        "id": 397480612,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697713156
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Function</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQR</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hRS</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">hRS</span> <span class=\"o\">(</span><span class=\"n\">hQR</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"n\">hP</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hgfinj</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Injective</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">a</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hgfinj</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> works on <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a> .</p>",
        "id": 397481547,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697713533
    },
    {
        "content": "<p>Yes,  my code sample works fine on lean4 web...</p>",
        "id": 397481994,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697713709
    },
    {
        "content": "<p>Why this code does not work on Github action...?</p>",
        "id": 397482280,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697713826
    },
    {
        "content": "<p>The error is reproducible if unindent or remove all code from <code>intro</code> to <code>simp_all</code></p>",
        "id": 397487487,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697715767
    },
    {
        "content": "<p>Since it is about pretty printing and line breaks, my hypothesis would be that the pretty printer assumes a different line length for wrapping in the different environments somehow? But <code>lake build | cat</code> also failed, so it's not just whether stdout is a terminal or not (which makes a difference with some other tools I have seen)</p>",
        "id": 397491874,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697717375
    },
    {
        "content": "<p>The cause is that the output of <code>aesop?</code> begins with <code>Try this:</code> and line break without a space, but <code>says</code> expects <code>Try this: </code> which has a space: </p>\n<p><a href=\"/user_uploads/3121/IYdkTURC8nlNMDVwtYbLkEGO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/IYdkTURC8nlNMDVwtYbLkEGO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/IYdkTURC8nlNMDVwtYbLkEGO/image.png\"></a></div><p><a href=\"/user_uploads/3121/RLme8a1AmN-3vR_XbTouH9Oi/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RLme8a1AmN-3vR_XbTouH9Oi/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RLme8a1AmN-3vR_XbTouH9Oi/image.png\"></a></div>",
        "id": 397492746,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697717714
    },
    {
        "content": "<p>Well, at least this is part of the cause. The other part is CI somehow unidented these lines, caused a raw <code>aesop? says</code></p>",
        "id": 397493146,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697717855
    },
    {
        "content": "<p>BTW I noticed the repo committed a <code>lakefile.olean</code> which should not be committed, but it's unrelated to the issue.</p>",
        "id": 397493480,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697717978
    },
    {
        "content": "<blockquote>\n<p>BTW I noticed the repo committed a lakefile.olean which should be committed,</p>\n</blockquote>\n<p>oh, thanks</p>",
        "id": 397499479,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697720086
    },
    {
        "content": "<p>should <em>not</em> be committed :-)</p>",
        "id": 397528393,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697728865
    },
    {
        "content": "<p>I don't know how to solve this problem.<br>\nI'm thinking of removing the file from CI.</p>",
        "id": 397677121,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697797177
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Function</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQR</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hRS</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">hRS</span> <span class=\"o\">(</span><span class=\"n\">hQR</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"n\">hP</span><span class=\"o\">))</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">says.verify</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hgfinj</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Injective</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">a</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hgfinj</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>gives an error. this could be fixed in Aesop, but I think it would be better to make <code>says</code> more flexible with respect to stripping the initial <code>Try this</code></p>",
        "id": 397679705,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697797919
    },
    {
        "content": "<p>Thank you. I will try to set <code>set_option says.verify false</code>!</p>",
        "id": 397698236,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697804504
    },
    {
        "content": "<p>where is the documentation of set_option ?</p>",
        "id": 397702631,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697806142
    },
    {
        "content": "<p>I just search <code>register_option</code> in Mathlib. I don't know if there is a place to collect their docs.</p>",
        "id": 397703823,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697806527
    },
    {
        "content": "<p>I want the doc of all options of set_option...</p>",
        "id": 397704126,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697806637
    },
    {
        "content": "<p>try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"k\">#help</span> <span class=\"n\">option</span>\n</code></pre></div>",
        "id": 397705838,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697807168
    },
    {
        "content": "<blockquote>\n<p>Thank you. I will try to set set_option says.verify false!</p>\n</blockquote>\n<p>Still I got a same error!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./././</span><span class=\"n\">Examples</span><span class=\"bp\">/</span><span class=\"n\">Says.lean</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"n\">output</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"kd\">begin</span> <span class=\"k\">with</span> <span class=\"bp\">'</span><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span><span class=\"bp\">'</span><span class=\"o\">:</span> <span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">a</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hgfinj</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>my commit: <a href=\"https://github.com/lean-ja/tactic-cheetsheet/commit/f872d4c4fb9c940a0093c4916e092fa935b15eb1\">https://github.com/lean-ja/tactic-cheetsheet/commit/f872d4c4fb9c940a0093c4916e092fa935b15eb1</a></p>",
        "id": 397708204,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697807929
    },
    {
        "content": "<p>You could try setting <code>says.no_verify_in_CI</code> to true</p>",
        "id": 397708984,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697808170
    },
    {
        "content": "<p>For context, here is the logic of whether to verify:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">verify</span> <span class=\"o\">:=</span> <span class=\"n\">says.verify.get</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getOptions</span><span class=\"o\">)</span> <span class=\"bp\">||</span>\n    <span class=\"bp\">!</span><span class=\"n\">says.no_verify_in_CI.get</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getOptions</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.getEnv</span> <span class=\"s2\">\"CI\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span>\n</code></pre></div>",
        "id": 397709158,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697808229
    },
    {
        "content": "<p>CI passed! Thank you very much!!!</p>",
        "id": 397710204,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1697808571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 397710245,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697808585
    },
    {
        "content": "<blockquote>\n<p>I think it would be better to make says more flexible with respect to stripping the initial Try this</p>\n</blockquote>\n<p>Maybe like this: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7803\">https://github.com/leanprover-community/mathlib4/pull/7803</a></p>",
        "id": 397711650,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697809036
    },
    {
        "content": "<p>That PR is merged, so once you bump your mathlib dependncy, you can try again, <span class=\"user-mention\" data-user-id=\"626349\">@Asei Inoue</span> .</p>",
        "id": 397761743,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697828354
    }
]