[
    {
        "content": "<p>Starting at <a href=\"https://leanprover.github.io/programming_in_lean/#01_Introduction.html\">https://leanprover.github.io/programming_in_lean/#01_Introduction.html</a> <br>\nI click the blue `Try it yourself' buttons.  The system responds, in differing amounts of time, with Done. Not sure how, or whether, to proceed.</p>",
        "id": 213770813,
        "sender_full_name": "TimP",
        "timestamp": 1603106329
    },
    {
        "content": "<p>Ah, that editor is out of date</p>",
        "id": 213770952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603106407
    },
    {
        "content": "<p>We suggest <a href=\"https://leanprover-community.github.io/lean-web-editor/\">https://leanprover-community.github.io/lean-web-editor/</a> if you want an online editor</p>",
        "id": 213771021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603106470
    },
    {
        "content": "<p>But I think it still works. When I press the \"try it yourself\" button, the right side pane fills with the code from the snippet, and you can edit that code (it's a text editor)</p>",
        "id": 213771160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603106579
    },
    {
        "content": "<p>If you make a modification, errors should show up on the left gutter, and lots of things have hovers</p>",
        "id": 213771215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603106642
    },
    {
        "content": "<p>It works in some sense, but does not output anything other than Done! So the Hello World only outputs Done. It would be good to update to remove this stumbling block for the hesitant adopter.</p>",
        "id": 214035604,
        "sender_full_name": "TimP",
        "timestamp": 1603278343
    },
    {
        "content": "<p>The bottom panel only shows compilation status. The hello world should be in an information thing in the gutter</p>",
        "id": 214036205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603278784
    },
    {
        "content": "<p>(again, it's out of date, although I don't think that book has specifically been updated to use the new stuff, seeing as it's unfinished/abandoned)</p>",
        "id": 214036266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603278839
    },
    {
        "content": "<p>A newer resource for CS minded folks is the <a href=\"https://raw.githubusercontent.com/blanchette/logical_verification_2020/master/hitchhikers_guide.pdf\">hitchhiker's guide to logical verification</a></p>",
        "id": 214036398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603278931
    },
    {
        "content": "<p>in any case, we don't have any access to change that particular site, we can only hope that SEO favors <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>",
        "id": 214036496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603278996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355878\">@TimP</span></p>",
        "id": 214036551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603279049
    },
    {
        "content": "<p>I am really new to lean, and working through §2 here <a href=\"https://leanprover-community.github.io/mathematics_in_lean/basics.html\">https://leanprover-community.github.io/mathematics_in_lean/basics.html</a> <br>\nI am stuck with this one: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">neg_eq_of_add_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Of course I would like to say: starting from hypothesis h, add -a on the left and use this lemma sub_self mentioned above in the chapter. What is the syntax to achieve this? Thanks!</p>",
        "id": 224095960,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611691944
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> nice to see you here!</p>",
        "id": 224096103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611692008
    },
    {
        "content": "<p>Small tip: you can use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to format your code on Zulip</p>",
        "id": 224096132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611692022
    },
    {
        "content": "<p>You can go two ways. You can work on the hypothesis <code>h</code>. Or you can work \"backward\" on the goal.<br>\nThere is a lemma <code>add_left_cancel</code> that could help with backwards reasoning.</p>",
        "id": 224096541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611692194
    },
    {
        "content": "<p>For a forward step, you could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224096819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611692293
    },
    {
        "content": "<p>There are ways of doing this in 1 step. But that's maybe not very enlightening right now.</p>",
        "id": 224096864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611692322
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 224097175,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611692476
    },
    {
        "content": "<p>For working backwards from the goal, you can do something like,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_eq_of_add_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">neg_add_cancel_left</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">my_ring</span>\n</code></pre></div>",
        "id": 224097179,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611692477
    },
    {
        "content": "<p>Beware the exercise asks to do it only with the lemmas discussed before. So we need to know the list of allowed lemmas (that I don't remember).</p>",
        "id": 224097812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611692780
    },
    {
        "content": "<p>good point, I updated what I wrote to only use lemmas in the tutorial, it got way shorter too <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 224099411,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611693550
    }
]