[
    {
        "content": "<p>Hi all,<br>\nI'm trying to prove that the following function is continuously differentiable (smooth) as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ruffle</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">-</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">I</span>\n</code></pre></div>\n<p>And am almost done, except for two small subclaims I need to prove. Firstly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Seems to be less straightforward than what I expected. (Note the function is ℝ → ℂ). How do I account for the coersion here?</p>\n<p>Similarly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">I</span>\n</code></pre></div>\n<p>I'm just trying to <code>apply ContDiff.smul</code>, but it's not recognizing the <code>I</code> as a valid function. Any tips or fixes?</p>\n<p>Thanks!</p>",
        "id": 408004442,
        "sender_full_name": "Riyaz Ahuja",
        "timestamp": 1702573272
    },
    {
        "content": "<p>Please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 408007444,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702574162
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Analysis</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coer_diff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_sin_diff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 408008966,
        "sender_full_name": "Riyaz Ahuja",
        "timestamp": 1702574652
    },
    {
        "content": "<p>For the second:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span>  <span class=\"n\">Complex</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coer_diff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_sin_diff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ContDiff.mul</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">contDiff_const</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ContDiff.mul</span> <span class=\"n\">contDiff_const</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Complex.ofReal_ofNat</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Complex.ofReal_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Complex.ofReal_sin</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">coer_diff.comp</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ContDiff.sin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ContDiff.mul</span> <span class=\"n\">contDiff_const</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">contDiff_id</span>\n</code></pre></div>\n<p>(note that in your mwe, it treated π as a variable)</p>",
        "id": 408011593,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702575623
    },
    {
        "content": "<p>for the first, I just spammed <code>apply?</code> and clicked things and got to this proof <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coer_diff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">IsBoundedLinearMap.contDiff</span> <span class=\"bp\">?</span><span class=\"n\">hf</span>\n  <span class=\"n\">refine</span> <span class=\"n\">IsLinearMap.with_bound</span> <span class=\"bp\">?</span><span class=\"n\">hf.hf</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">hf.h</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">hf.hf.map_add</span><span class=\"o\">,</span> <span class=\"n\">map_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">hf.hf.map_smul</span> <span class=\"o\">}</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 408011927,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702575735
    },
    {
        "content": "<p>I tried that but clicked the wrong things</p>",
        "id": 408013278,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702576204
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ofRealClm#doc\">docs#ofRealClm</a> help?</p>",
        "id": 408021381,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702579210
    },
    {
        "content": "<p>or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.contDiff#doc\">docs#ContinuousLinearMap.contDiff</a> (plus <code>continuity</code>)?</p>",
        "id": 408021527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702579276
    },
    {
        "content": "<p>Shirley it's not called that anymore :)</p>",
        "id": 408021791,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702579390
    },
    {
        "content": "<p>I found it in an old thread and didn't grok that it was Lean 3 :-) Fixed now.</p>",
        "id": 408022294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702579635
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coer_diff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ContinuousLinearMap.contDiff</span> <span class=\"n\">ofRealClm</span>\n</code></pre></div>",
        "id": 408022485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702579698
    },
    {
        "content": "<p>indeed both of those things help :-)</p>",
        "id": 408022510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702579714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"642696\">@Riyaz Ahuja</span>  Why do you use <code>Complex.sin</code> only to feed it a real number coerced into a complex number. You could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">smul_sin_diff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ContDiff.smul</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">contDiff_const</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ContDiff.smul</span> <span class=\"n\">contDiff_const</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ContDiff.sin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ContDiff.mul</span> <span class=\"n\">contDiff_const</span>\n  <span class=\"n\">exact</span> <span class=\"n\">contDiff_id</span>\n</code></pre></div>",
        "id": 408027306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702581411
    },
    {
        "content": "<p>And then you can try to impress your professor by compressing it down to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">smul_sin_diff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">contDiff_const.smul</span> <span class=\"o\">(</span><span class=\"n\">contDiff_const.mul</span> <span class=\"n\">contDiff_id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sin</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">contDiff_const</span>\n</code></pre></div>",
        "id": 408027604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702581534
    }
]