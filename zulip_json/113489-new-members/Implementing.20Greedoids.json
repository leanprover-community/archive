[
    {
        "content": "<p>Hello, I was working on greedoids for a relatively short period, based on the book referenced below.<br>\nHere is the repository I'm working on: <a href=\"https://github.com/qawbecrdtey/greedoid-mathlib4/tree/greedoid\">https://github.com/qawbecrdtey/greedoid-mathlib4/tree/greedoid</a><br>\nI thought it'd be nice to get helps and feedbacks to successfully contribute it to mathlib.</p>\n<p>KORTE, Bernhard; LOVÁSZ, László; SCHRADER, Rainer. Greedoids. Springer Science &amp; Business Media, 2012.</p>",
        "id": 365412309,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1686530738
    },
    {
        "content": "<p>Cool, thanks for sharing. <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> has also worked on matroids  for a while in mathlib 3 (<a href=\"https://github.com/apnelson1/lean-matroids\">https://github.com/apnelson1/lean-matroids</a>), but maybe soon in mathlib 4 also. I don't know how much overlap between your projects there is but it would be great to get this sort of thing into mathlib</p>",
        "id": 365560005,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686575884
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> also has ported it (via mathport at least) which I caught via GitHub stalking :) -- looks like there's some further detail here: <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20on.20external.20projects\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/mathport.20on.20external.20projects</a></p>",
        "id": 365704582,
        "sender_full_name": "Julian Berman",
        "timestamp": 1686614215
    },
    {
        "content": "<p>By the way, the new file is in directory Combinatorics/Greedoid, for those who want to check it out. It has thousand lines and many sorries..</p>",
        "id": 365735862,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1686630866
    },
    {
        "content": "<p>Saying it that way is not going to convince anyone to look at it. People want to see a short file, with no sorries, along with a promise that an interesting theorem has been proved (possibly many files and thousands of lines downstream). If you can arrange that you will be drowning in <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"> (<code>bors merge</code>) and <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span> (<code>bor delegate</code>). :-)</p>",
        "id": 365744209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686634269
    },
    {
        "content": "<p>Thanks for the feedback, I'll spend more time on those!</p>",
        "id": 365750580,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1686636628
    },
    {
        "content": "<p>(removed, duplicate of above)</p>",
        "id": 365751809,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1686637005
    },
    {
        "content": "<p>[[resolved]]<br>\nI got stuck while working on the project, so I ask here about it. (If this is not a nice place to ask, please notice me so that I can ask there.)<br>\n<a href=\"https://github.com/qawbecrdtey/greedoid-mathlib4/blob/2ad3f06ef74fced18722bb23e8daced037590f0a/Mathlib/Combinatorics/Greedoid/Basic.lean#L219\">context</a><br>\nSo I'm wiring a proof for <code>hereditary_language_lemma</code>, and I have a single <code>sorry</code> on proof of that.<br>\nThe next step is to set a maximal list <code>w'</code> in <code>Lang</code> which is a postfix of <code>w</code>. If the maximal list <code>w'</code> is <code>w</code> itself, then we're done, and if not, then that will lead to a counterexample by the property <code>h</code>, showing that <code>w'</code> is actually not maximal.<br>\nI'm not sure how to go to the next step from here. I wish I could get some help.</p>",
        "id": 369946152,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1687851971
    },
    {
        "content": "<p>Currently the definition of greedoid is available with only one theorem <a href=\"https://github.com/qawbecrdtey/greedoid-mathlib4/blob/b4b7b5fcc6520663bf9626ccbb1297fd904fb16b/Mathlib/Combinatorics/Greedoid/Basic.lean#L570C20-L570C20\"><code>weakerExchangeAxiom_exchangeAxiom</code></a> containing sorry. (Actually two <a href=\"https://github.com/qawbecrdtey/greedoid-mathlib4/blob/b4b7b5fcc6520663bf9626ccbb1297fd904fb16b/Mathlib/Combinatorics/Greedoid/Basic.lean#L525\">(1)</a> <a href=\"https://github.com/qawbecrdtey/greedoid-mathlib4/blob/b4b7b5fcc6520663bf9626ccbb1297fd904fb16b/Mathlib/Combinatorics/Greedoid/Basic.lean#L490\">(2)</a>, which are helper functions for the theorem)<br>\nThe next step is to define rank and closure functions and prove its related theorems properly, as shown after the <a href=\"https://github.com/qawbecrdtey/greedoid-mathlib4/blob/b4b7b5fcc6520663bf9626ccbb1297fd904fb16b/Mathlib/Combinatorics/Greedoid/Basic.lean#L1078\">definition of <code>Greedoid</code></a></p>",
        "id": 371633592,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1688278065
    },
    {
        "content": "<p>I am moving theorems from <a href=\"https://github.com/qawbecrdtey/greedoid-mathlib4/blob/greedoid/Mathlib/Combinatorics/Greedoid/Basic.lean\">fork</a> to <a href=\"https://github.com/leanprover-community/mathlib4/tree/greedoid-predefs\">branch</a> under <code>Mathlib/Combinatorics/SetFamily</code>.<br>\nI'm splitting the sinlge file to multiple files, and I'd like to ask a few questions on design of structures and file paths.</p>\n<ol>\n<li>\n<p><code>Language</code> is defined as <code>Set (List \\alpha)</code> in <code>Mathlib/Computability/Language.lean</code>. This sure is a nice definition for language, but I only need <code>Finset (List \\alpha)</code> with additional instances to work further. Should I narrow the definition of predefined <code>Language</code> with a finite restriction, or would it be okay to define a new <code>Language</code> with <code>Finset</code> and instances?</p>\n</li>\n<li>\n<p>I am currently making files under <code>Mathlib/Combinatorics/SetFamily/(Accessible, Bases, ExchangeAxiom, to be added...).lean</code>. Please tell and give advice if this is not a nice choice.</p>\n</li>\n</ol>",
        "id": 374035629,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1689010058
    },
    {
        "content": "<p>It may be easiest to use Set plus a Set.Finite assumption where needed</p>",
        "id": 374037425,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1689010477
    },
    {
        "content": "<p><del>What does it mean for a 'Set plus a Set'?</del> I just realized that 'Set.Finite'<br>\nThanks for the advice! The project might get a bit complicated than expected though..</p>",
        "id": 374037697,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1689010546
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/greedoid-predefs\">The greedoid is now defined</a> (again, with no sorries up to definition of the structure).<br>\nThis version has separated files and more comments.<br>\nNext step is to define rank and closure of greedoids.<br>\nI know that <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> is almost done with formalizing matroids, according to <a href=\"#narrow/stream/287929-mathlib4/topic/Matroids.20in.20mathlib.20-.20feedback.3F/near/377143033\">this thread</a>.<br>\nSince these two structures are highly related and the matroid is almost ready for takeoff while mine is not, it would be nice to take his opinion for me to continue afterwards. So please leave your comments if you don't mind.<br>\nP.S. The main structure is defined <a href=\"https://github.com/leanprover-community/mathlib4/blob/greedoid-predefs/Mathlib/Data/Greedoid/Basic.lean\">here</a>.</p>",
        "id": 377794487,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1690108185
    },
    {
        "content": "<p>Nice job!</p>\n<p>My main question about the code is why so much needs to happen before the definition. (Disclaimer: I don't know very much about greedoids). <br>\nFrom what I can see, a greedoid is can be defined in at least two different ways that turn out to be equivalent : via a set system, and via a language.  You could just pick one of these ways (say, a set system), and then implement all the language stuff afterwards, proving that a  Greedoid (as defined via a set system) gives rise to a language, with these properties.... </p>\n<p>And then you can have a constructor for a greedoid in terms of a language obeying the language axioms, whose mathematical content would be tantamount to your <code>FromLanguageToSystem</code>-type lemmas. This approach means that the definition of a greedoid itself contains less data, and also has the advantage that it only gives O(n) interface lemmas where n is the number of different ways to get a greedoid, rather than O(n^2). </p>\n<p>In my matroid code, I do something similar. I make an arbitrary choice in defining a matroid in terms of bases (which I can do right at the beginning of the code), but then develop the API for independent sets and  give constructors via the independence axioms later. </p>\n<p>With regards to how your greedoids code and matroids fit together: it is true that finite matroids are a special case of greedoids, but the way I've written things my matroids can be infinite, so neither object strictly generalizes the other. I don't know how quickly the theory of greedoids diverges from matroid theory, but I get the sense that the API overlap is likely not too large for practical purposes. </p>\n<p>I've thought a little in the past about what the right common generalization of such objects would be; they are both set systems, but in fact matroids are a special case of 'q-matroids', which are systems of points in more general lattices. I think for the moment it would make sense to have them as separate objects in mathlib; maybe a future refactor can unify them.</p>",
        "id": 377830750,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1690117497
    },
    {
        "content": "<p>First of all, thanks for your response!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/113489-new-members/topic/Implementing.20Greedoids/near/377830750\">말함</a>:</p>\n<blockquote>\n<p>My main question about the code is why so much needs to happen before the definition. (Disclaimer: I don't know very much about greedoids).<br>\nFrom what I can see, a greedoid is can be defined in at least two different ways that turn out to be equivalent : via a set system, and via a language.  You could just pick one of these ways (say, a set system), and then implement all the language stuff afterwards, proving that a  Greedoid (as defined via a set system) gives rise to a language, with these properties....</p>\n</blockquote>\n<p>You're right. When I started the project after reading the lean book, I thought the most easiest way to relate languages and systems was to directly relate them in a structure. And it turns out that it's not, I'll change the definition to use 'finite' set systems, and then extend it for other structures. There are only few (if any) resources on infinite greedoids, so it should be okay to formalize it only in the finite case for now.</p>\n<blockquote>\n<p>I've thought a little in the past about what the right common generalization of such objects would be; they are both set systems, but in fact matroids are a special case of 'q-matroids', which are systems of points in more general lattices. I think for the moment it would make sense to have them as separate objects in mathlib; maybe a future refactor can unify them.</p>\n</blockquote>\n<p>If that's the case, I'll focus on implementing greedoids solely. There definitely is a section which merges both concepts, but let's think about those difficult stuffs later..</p>\n<p>Thanks again for your feedback!</p>",
        "id": 377856178,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1690124042
    }
]