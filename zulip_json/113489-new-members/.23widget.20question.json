[
    {
        "content": "<p>Hi guys! Recently, I've been working with <code>#widget</code> and I wonder if there is a <code>get()</code> function in <code>@leanprover/infoview</code> for extracting the string form of the initial tactic state of a specific structure/theorem/lemma/... ? For example, if I have a theorem like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean4</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">myTheorem</span> <span class=\"o\">:</span> <span class=\"n\">someType</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Below is the initial tactic state of <code>myTheorem</code> shown in the infoview:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">someType</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">someType</span>\n</code></pre></div>\n<p>Is there any function that can extract the string form of the initial tactic state in the infoview from a specific theorem/structure/lemma/... ?</p>",
        "id": 381590480,
        "sender_full_name": "Louis Liu",
        "timestamp": 1691090620
    },
    {
        "content": "<p>I usually ignore questions from people who don't use their real names, but I've just discovered that you're an undergrad on my Discord so, whilst I have no idea what the answer to your question is, I'm currently watching you sharing geogebra pictures in VS Code and I think this is pretty awesome, so hopefully someone will answer this question (and did you say you have another question?)</p>",
        "id": 383610389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691671364
    },
    {
        "content": "<p>wait, you can show geogebra pictures in VS Code?? How?</p>",
        "id": 383636523,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691676259
    },
    {
        "content": "<p>I've seen it with my own eyes!</p>",
        "id": 383691359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691685335
    },
    {
        "content": "<p>You just ask an undergraduate to do it</p>",
        "id": 383691396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691685347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"617128\">@Deep0Thinking</span> there is no <code>get</code> function, instead the current tactic state is passed to the widget component as a prop. In lieu of documentation we have demos that exhibit this functionality, e.g. <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/cf2e6e09166e1e8d791f8435bf1e3769da2d5b86/ProofWidgets/Demos/Venn.lean\">Venn</a>.</p>",
        "id": 383725856,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1691692668
    },
    {
        "content": "<p>Thank you so much for your response! I do have another question:</p>\n<p>Hi guys! I am currently working on a <code>#widget</code> program and am seeking a strategy to access the user's Lean file, because I want my program able to read the code from a Lean file, based on the specified file path and parse the code into Geogebra script. I've attempted to import the <code>fs</code> library in my widget's js file, but encountered issues due to dev environment restrictions within the widget. Could anyone provide suggestions or any alternative method to achieve this?</p>",
        "id": 383820731,
        "sender_full_name": "Louis Liu",
        "timestamp": 1691727477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"617128\">@Deep0Thinking</span> This sounds very interesting. Is the code you want to read in the same Lean file as the one from which you are invoking the widget?</p>",
        "id": 383901419,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1691749328
    },
    {
        "content": "<p>I think your mental model is wrong here, <span class=\"user-mention\" data-user-id=\"617128\">@Deep0Thinking</span>; your widget should be taking arguments / receiving messages from the Lean code, rather than reading in the lean source</p>",
        "id": 383904290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691749765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao Tadipatri</span> <a href=\"#narrow/stream/113489-new-members/topic/.23widget.20question/near/383901419\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"617128\">Deep0Thinking</span> This sounds very interesting. Is the code you want to read in the same Lean file as the one from which you are invoking the widget?</p>\n</blockquote>\n<p>Yes, indeed! I initially wanted my <code>#widget</code> program to read the tactic state directly from the infoview, so that the program can be invoked dynamically (can provide real-time feedback as user change their cursor position in the Lean file). However, I couldn't find an infoview API function to achieve this (I think it's because I'm not well-acquainted with the infoview API <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>). Therefore I'm currently using an alternative (inefficient but easy) strategy to achieve my goal -- letting my <code>#widget</code> program able to read the source code from the Lean file that contains it.</p>",
        "id": 384006329,
        "sender_full_name": "Louis Liu",
        "timestamp": 1691767231
    },
    {
        "content": "<p>Have you looked at examples like <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Demos/Venn.lean\">https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Demos/Venn.lean</a>?</p>",
        "id": 384007532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691767412
    },
    {
        "content": "<p>It looks like you want <code>with_panel_widgets </code></p>",
        "id": 384007818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691767449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.23widget.20question/near/384007818\">said</a>:</p>\n<blockquote>\n<p>It looks like you want <code>with_panel_widgets </code></p>\n</blockquote>\n<p>Absolutely! That's exactly what I was looking for! Thank you so much for providing that to me!!! <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span></p>",
        "id": 384017791,
        "sender_full_name": "Louis Liu",
        "timestamp": 1691769104
    }
]