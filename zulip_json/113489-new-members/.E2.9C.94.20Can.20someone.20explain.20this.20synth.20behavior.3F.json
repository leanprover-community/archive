[
    {
        "content": "<p>So I was just playing around this last week and I wrote two definitions of category. One is a typeclass on the type of morphisms, and the other is a typeclass on the type of objects. I proved that I could sort of get from an instance of one to an instance of the other. The actual instance definitions are pretty hard to read since I had never tried to actually reason with the HEq type before now, but lean accepts them. </p>\n<p>In the code below, I have replaced my actual instance code with sorries, all of the synth checks produce what you would expect</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category'''</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">dom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">cod</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">dom</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">comp_dom</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">cod_comp</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">cod</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">dom_right_neutral</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">dom</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">comp</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">cod_left_neutral</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">cod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">cod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">comp_preserves_dom</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">dom</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dom</span> <span class=\"n\">b</span>\n  <span class=\"n\">comp_preserves_cod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">dom</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">cod</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"n\">a</span>\n  <span class=\"n\">comp_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">dom</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">dom</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">cod</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">→</span>\n  <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comp_preserves_dom</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">g</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">comp</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comp_preserves_cod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Category'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">id_lunit</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">id_runit</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">comp_assoc</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"kn\">open</span> <span class=\"n\">Category'</span> <span class=\"n\">Category'''</span>\n<span class=\"kd\">def</span> <span class=\"n\">Mor</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)[</span><span class=\"n\">Category'</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"bp\">×</span><span class=\"n\">β</span> <span class=\"bp\">↦</span> <span class=\"n\">Hom</span> <span class=\"n\">a.fst</span> <span class=\"n\">a.snd</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">cat'_to_cat'''</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)[</span><span class=\"n\">Category'</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category'''</span> <span class=\"o\">(</span><span class=\"n\">Mor</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Obj</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category'''</span> <span class=\"n\">β</span><span class=\"o\">]:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">dom</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">cat'''_to_cat'</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category'''</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category'</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"n\">type_to_cat'</span> <span class=\"o\">:</span> <span class=\"n\">Category'</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span>\n  <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"n\">id_lunit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">id_runit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">comp_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category'''</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Category'</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Category'''</span> <span class=\"o\">(</span><span class=\"n\">Mor</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Category'</span> <span class=\"o\">(</span><span class=\"n\">Obj</span> <span class=\"o\">(</span><span class=\"n\">Mor</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>However when you replace the sorries with my instances, the final line fails to synthesize an instance for (Obj (Mor (Type u)), but everything else seems to not complain.</p>\n<p>Unsorried version here: <a href=\"https://gist.github.com/zackkenyon/6b97d27ed0f38b26cef1313af5cec3a9\">https://gist.github.com/zackkenyon/6b97d27ed0f38b26cef1313af5cec3a9</a></p>\n<p>(apologies for the long-winded proofs)</p>",
        "id": 389045354,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693858126
    },
    {
        "content": "<p>Maybe <code>#check</code> your definitions to make sure that Lean didn't specialize the universe levels to something unexpected? It's good practice to be explicit with <code>Type u</code> rather than <code>Type _</code>, since that <code>_</code> can even stand for a constant level like <code>0</code>.</p>",
        "id": 389046114,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693858767
    },
    {
        "content": "<p>The body of a definition is taken into account when solving for universe levels, which might explain why it's ok with <code>sorry</code></p>",
        "id": 389046214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693858828
    },
    {
        "content": "<p>ok, going for walk now, will check when I get back</p>",
        "id": 389046382,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693858957
    },
    {
        "content": "<p>There's a <code>variable {α:Type} [Category''' α]</code> instead of a <code>variable {α:Type _} [Category''' α]</code>, which causes <code>cat'''_to_cat'</code> to become specialized (you can check by moving your mouse over <code>cat'''_to_cat'</code> in VS Code to see its type).</p>",
        "id": 389047047,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693859473
    },
    {
        "content": "<p>Aha! Thank you.</p>",
        "id": 389055039,
        "sender_full_name": "zack kenyon",
        "timestamp": 1693863874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622388\">zack kenyon</span> has marked this topic as resolved.</p>",
        "id": 389058848,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693864984
    }
]