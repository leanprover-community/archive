[
    {
        "content": "<p>I'm finding myself writing some awkward definitions like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">BProvable</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Form</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">BProof</span> <span class=\"bp\">Γ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>Basically because I need a proposition expressing that <code>BProof Γ f</code> is inhabited. What bothers me is the useless <code>True</code>, and the need to pack and unpack tuples when proving things about <code>BProvable</code>. Is there a more idiomatic way of doing this?</p>",
        "id": 339422224,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677869826
    },
    {
        "content": "<p>Perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">BProvable</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Form</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">BProof</span> <span class=\"bp\">Γ</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339422645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677869982
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nonempty#doc\">docs4#Nonempty</a></p>",
        "id": 339422678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677869993
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 339422764,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677870007
    },
    {
        "content": "<p>I assume that you have <code>BProof Γ f : Type</code>, which is why you need to do this?</p>",
        "id": 339422830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677870032
    },
    {
        "content": "<p>Yes, that's correct.</p>",
        "id": 339423954,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677870375
    },
    {
        "content": "<p>You might also find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nonempty.map#doc\">docs4#Nonempty.map</a> useful</p>",
        "id": 339424193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677870457
    },
    {
        "content": "<p>I have some transformations on proofs where that would be nice to have. Thanks twice!</p>",
        "id": 339425876,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677870999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577178\">Graham Leach-Krouse</span> has marked this topic as resolved.</p>",
        "id": 339426050,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677871060
    }
]