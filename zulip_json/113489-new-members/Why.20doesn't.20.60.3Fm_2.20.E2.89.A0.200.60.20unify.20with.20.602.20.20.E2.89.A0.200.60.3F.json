[
    {
        "content": "<p>Why does the following give me an error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.gcd</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_right_inj'</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Shouldn't it be able to deduce that the type is <code>nat</code>?  Or is there something else going wrong?</p>",
        "id": 328312726,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1676573703
    },
    {
        "content": "<p>Does the proof go through if you help it along, like with <code>@two_ne_zero \\N _ _ _</code> (for some number of underscores)?</p>",
        "id": 328313221,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676573863
    },
    {
        "content": "<p>Yes it does, thanks for the tip!  I thought the problem was in <code>mul_right_inj'</code>, but I see it's in <code>two_ne_zero</code>.</p>",
        "id": 328313893,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1676574045
    },
    {
        "content": "<p>I think the problem is that both of those lemmas are generic, so lean finds it hard to figure out their types simultaneously</p>",
        "id": 328321321,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676576389
    }
]