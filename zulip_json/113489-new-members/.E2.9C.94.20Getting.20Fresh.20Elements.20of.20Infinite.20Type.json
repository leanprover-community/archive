[
    {
        "content": "<p>If I have a type alpha satisfying infinite alpha, and I have a list alpha, how can I get an element of type alpha which isn't in the list? I have heard about a \"fresh monad\" but am not sure what it is or whether it will help.</p>",
        "id": 340452366,
        "sender_full_name": "Ramneet Singh",
        "timestamp": 1678305346
    },
    {
        "content": "<p>Do you need this new element to be computable in any way? (Are you writing a program you're wanting to execute?) Monads are a solution to this, but if you don't need that there should be a mathlib theorem that proves the existence of such an element and you can use the axiom of choice.</p>",
        "id": 340452984,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678305530
    },
    {
        "content": "<p>In particular, <code>(infinite.exists_not_mem_finset l.to_finset).some</code> where <code>l</code> is your list. (Disclaimer: I didn't test this)</p>",
        "id": 340453171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678305588
    },
    {
        "content": "<p>It was <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> and we resolved it.</p>",
        "id": 340459909,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678307886
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> ! I am trying to certify a grammar transformation  (and getting fresh symbols is part of the transformation) so it is desirable for the new element to be computable. But perhaps you need more than just the infinite restriction on alpha for that? I'm also exploring a different way by making the type a sum type that <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> suggested.</p>",
        "id": 340460364,
        "sender_full_name": "Ramneet Singh",
        "timestamp": 1678308085
    },
    {
        "content": "<p>You could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable\">docs#encodable</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> to find the first natural number whose decoding is <code>some a</code> for <code>a</code> not in your list</p>",
        "id": 340460964,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678308308
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> ! This is great.</p>",
        "id": 340463089,
        "sender_full_name": "Ramneet Singh",
        "timestamp": 1678309201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 340468406,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678311128
    }
]