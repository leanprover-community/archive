[
    {
        "content": "<p>So I’m messing around with some typeclasses and I encountered this extremely weird error, with a minimal reproducer below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">AddGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Neg</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">AddGroup</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddOrder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_is_nonneg</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">TotalOrderedRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">AddOrder</span> <span class=\"n\">α</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TotalOrderedRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">neg_is_nonneg</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">ha</span> <span class=\"c1\">-- Works</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">neg_is_nonneg.mpr</span> <span class=\"n\">ha</span> <span class=\"c1\">-- failed to synthesize instance AddOrder ?m.448</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>This is really confusing to me — I thought that Lean would be able to infer that <code>α</code> is the desired type here. Am I doïng something silly or is this a bug? I’m using the latest Nightly of Lean 4.</p>",
        "id": 385986073,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1692391287
    },
    {
        "content": "<p>(note, the typeclasses have been simplified, e.g. <code>Ring</code> extending from <code>Add</code>, a necessary precondition for this error to occur, is representative of it extending from <code>Semiring</code> which extends from <code>Add</code>)</p>",
        "id": 385986285,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1692391419
    },
    {
        "content": "<p>Looks maybe the same as &lt;<a href=\"https://github.com/leanprover/lean4/issues/2183\">https://github.com/leanprover/lean4/issues/2183</a>&gt;?<br>\nI’m not experiënced enough in Lean to tell <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 385986784,
        "sender_full_name": "Sabrina Jewson",
        "timestamp": 1692391651
    },
    {
        "content": "<p>Did this work in lean 3?</p>",
        "id": 386264870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692571030
    }
]