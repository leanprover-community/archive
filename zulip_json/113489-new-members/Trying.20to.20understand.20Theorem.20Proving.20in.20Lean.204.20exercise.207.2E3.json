[
    {
        "content": "<p>I'm attempting to do question 3 in chapter 7 of Theorem Proving in Lean 4 and I'm having a lot of trouble even understanding the question. My understanding of inductive types is that they represent all  of the possibilites of what can be a something of a specific type, and you can define how these things are corresponding to your own intuitive idea of what  that is. So for example a List can be empty, or it can be populated with an arbitrary amount of elements of any type, which the inductive definition of List says. And then I can define the properties of Lists corresponding to my intuition of what I'm trying to define in the case of when a list is empty, and recursively when its populated. But what exactly is the type that I'm being asked to construct in 7.3?  I first define it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Calc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Calc</span>\n</code></pre></div>\n<p>which would be that Calc.const/var or <a href=\"http://Calc.plus/times\">Calc.plus/times</a> take either just n or n and m to produce a \"Calc\" according to the rules I set in the 'evaluator' definition. But I'm struggling to understand what it's asking me to do to \"Recursively define a function that evaluates any such term with respect to an assignment of values to the variables.\" This makes me think to make a definition that takes two natural numbers and somehow turns them into things of type Calc. So then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Calc_eval</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>but here I'm confused. If a is zero, then what exactly am I even trying to say about Calc? Calc.const 0 would just be the <br>\n natural number zero, Calc.var 0 would be creating a new variable with name 0, Calc.add 0 x would be x, etc, but I don't know how exactly I can articulate that here. Can I use cases on the Calc itself that I'm trying to output somehow so that I can explicitly tell it what the Calc is supposed to evaluate to in each instance? Is this even how the function is supposed to go? Is it supposed to take into a Calc and then return the natural numbers that it is 'encoded' with so that it would instead be something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Calc_eval</span> <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"bp\">=&gt;</span> <span class=\"c\">/-</span><span class=\"cm\"> somehow extract the value associated with 'const' here. Calc.const a ? -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"bp\">=&gt;</span> <span class=\"c\">/-</span><span class=\"cm\"> initialze a variable? variable (n: Nat)? Doesn't seem to be very happy about me trying to do this. -/</span>\n</code></pre></div>\n<p>Or is it supposed to take in an (a b : Calc)  and then produce another Calc, like a lot of the other definitions do. What would that even be at all without the natural number inputs as shown in the function itself? I'm pretty confused on this one and I'd appreciate some guidance. Thanks for your time.</p>",
        "id": 325228205,
        "sender_full_name": "debord",
        "timestamp": 1675273941
    },
    {
        "content": "<p>You want something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Calc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span>  <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n</code></pre></div>",
        "id": 325253999,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675280942
    },
    {
        "content": "<p>Huh, I never got the idea that plus and times would be operating on Calc as well. I suppose that gives more context as to what 'const' and 'var' are, so that we can use Calc to add and multiply on a number and a variable  that we somehow assign to. That makes me think we need two constructors for var, like var_init and var_call or something, where <code>Calc.var_init 1 5</code> would initialize the variable named 1 to the number 5 and <code>Calc.var_call 1</code> would then be a kind of substitute for <code>Calc.var.const 5</code>. I cannot figure out at all how to implement this. Or is it that an expression like <code>Calc.plus (Calc.const 1) (Calc.var 1)</code> should evaluate to \"1 + n\"? But then what is var at all? I really wish I could make a new variable with <code>variable (n : Nat)</code> in the evaluator definition but I can't seem to do that without an error.</p>\n<p>Edit: This is now my best attempt with this which doesn't work at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Calc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Calc_eval</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Calc.const</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Calc.const</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Calc.const</span> <span class=\"n\">b</span>\n    <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Calc.const</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Calc.const</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Calc.const</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Calc.const</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Calc.const</span> <span class=\"o\">((</span><span class=\"n\">Nat.succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I still have no real clue what the question is even asking with \"Recursively define a function that evaluates any such term with respect to an assignment of values to the variables.\" Evaluates naturals into Calcs? If so then you have to match the cases of a natural number, zero and successor, and then do something to produce the four cases of a Calc in each case of a Nat. Trying to do the next exercise after makes me realize that I just have no clue how this inductive type thing works actually, at least when it comes to defining my own.</p>",
        "id": 325321913,
        "sender_full_name": "debord",
        "timestamp": 1675318212
    },
    {
        "content": "<p>Try filling in the <code>sorry</code> placeholders below. In the definition of <code>eval</code>, the function <code>v : Nat → Nat</code> is an assignment of the natural numbers to the variables of <code>Calc</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Calc</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Calc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">#eval eval v1 (const 3) -- output: 3</span>\n<span class=\"cm\">#eval eval v1 (var 6)   -- 4</span>\n<span class=\"cm\">#eval eval v1 (plus (const 3) (var 6))  -- 7</span>\n<span class=\"cm\">#eval eval v1 (times (const 3) (var 6)) -- 12</span>\n<span class=\"cm\">#eval eval v1 (times (plus (const 2) (const 3)) (var 6)) -- 20</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span> <span class=\"n\">Calc</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Data</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- output: 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">6</span><span class=\"o\">)</span>   <span class=\"c1\">-- 4</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">6</span><span class=\"o\">))</span>  <span class=\"c1\">-- 7</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"c1\">-- 12</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"c1\">-- 20</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Data</span>\n</code></pre></div>\n</div></div>",
        "id": 325457438,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1675359602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"581787\">debord</span> <a href=\"#narrow/stream/113489-new-members/topic/Trying.20to.20understand.20Theorem.20Proving.20in.20Lean.204.20exercise.207.2E3/near/325321913\">said</a>:</p>\n<blockquote>\n<p>Trying to do the next exercise after makes me realize that I just have no clue how this inductive type thing works actually, at least when it comes to defining my own.</p>\n</blockquote>\n<p>These resources will help you:</p>\n<ul>\n<li><a href=\"https://avigad.github.io/lamr/propositional_logic.html\">Chapter 4</a> of <a href=\"https://avigad.github.io/lamr/index.html\">\"Logic and Mechanized Reasoning\"</a></li>\n<li><a href=\"https://github.com/avigad/lamr/blob/main/LAMR/Examples/implementing_propositional_logic/examples.lean\">Implementing propositional logic</a></li>\n<li><a href=\"https://github.com/avigad/lamr/blob/b2795a17fb01b7e45aaa1940d4c4200f46800e16/LAMR/Util/Propositional/Syntax.lean#L267-L268\">A definition of partial truth assignments</a></li>\n</ul>",
        "id": 325463667,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1675361260
    },
    {
        "content": "<p>I'd start with thinking about <code>var</code> as another label for <code>const</code>, and getting <code>eval</code> working.</p>\n<p>As an exercise, you might then want to think about assigning all the <code>var</code>s as above. Then you can get fancy with labeled <code>var</code>s. E.g., you might think about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Calc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span>  <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">assign</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 325465095,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675361668
    },
    {
        "content": "<p>If you want to get really fancy, you can then think about error handling, which leads to monads and such...</p>",
        "id": 325465249,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675361711
    },
    {
        "content": "<p>The non-monadic version of <code>assign</code> above just updates <code>var</code> if the labels match, and leaves them alone if not...</p>",
        "id": 325465354,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675361744
    },
    {
        "content": "<p>I don't have a CS background but I got a good understanding of questions like this from reading the beginning of Adam Chlipala's book and translating the Coq to Lean (this was one of the first lean exercises I ever did)</p>",
        "id": 325507428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675375873
    },
    {
        "content": "<p>I first tried to attack the problem with Arien's approach, as it most closely corresponded to my initial idea, but <code>assign</code> proved to be a pretty tough function. I like Bulhwi's approach as well, but my issue with it is that it makes it so that Calc can only be evaluated in terms of another function. This makes Calc more general, but my idea of Calc was just a two-function calculator that works on constants and variables and nothing more. While browsing through the Lean library, I found <code>List.get!</code> and had the realization that the nth number in a list could be <code>var n</code>. So that I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Calc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.get</span><span class=\"bp\">!</span> <span class=\"n\">l</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">l</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">l</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">l</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">l</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Calc.const</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Calc.var</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"c1\">-- produces an error</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Calc.var</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"c1\">-- 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Calc.plus</span> <span class=\"o\">(</span><span class=\"n\">Calc.const</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Calc.var</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"c1\">-- 6</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Calc.times</span> <span class=\"o\">(</span><span class=\"n\">Calc.plus</span> <span class=\"o\">(</span><span class=\"n\">Calc.const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Calc.const</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Calc.const</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"c1\">-- 25</span>\n</code></pre></div>\n<p>This seems to be in line with what I was looking for. Took me a couple days but I think this is it. Thank you friends for your guidance and help, and especially for the references and resources. Now to figure out the type of propositional formulas...</p>",
        "id": 325653157,
        "sender_full_name": "debord",
        "timestamp": 1675436807
    },
    {
        "content": "<p>Ah, yes, my version of <code>assign</code> has recursion issue for Lean.</p>",
        "id": 325705644,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675451358
    },
    {
        "content": "<p>My naive solution runs into issues, and my less naive solution also runs into issues:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Calc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span>  <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Calc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isLeaf</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">assign</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">l'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">l</span> <span class=\"bp\">==</span> <span class=\"n\">l'</span> <span class=\"k\">then</span> <span class=\"n\">var</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.isLeaf</span> <span class=\"c1\">-- Lean isn't buying this...</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"s2\">\"a\"</span> <span class=\"mi\">6</span><span class=\"o\">))</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"s2\">\"a\"</span> <span class=\"mi\">2</span>  <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"s2\">\"a\"</span> <span class=\"mi\">6</span><span class=\"o\">)))</span>\n<span class=\"kd\">end</span> <span class=\"n\">Calc</span>\n</code></pre></div>",
        "id": 325709470,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675452686
    },
    {
        "content": "<p>I'm going to guess here is that I haven't proven <code>Calc</code> is a DAG?</p>",
        "id": 325729474,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675460649
    },
    {
        "content": "<p>I confused myself: this works just fine...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Calc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span>  <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Calc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">assign</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">l'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">l</span> <span class=\"bp\">==</span> <span class=\"n\">l'</span> <span class=\"k\">then</span> <span class=\"n\">var</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"s2\">\"a\"</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"c1\">-- 18</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"s2\">\"a\"</span> <span class=\"mi\">2</span>  <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"s2\">\"a\"</span> <span class=\"mi\">6</span><span class=\"o\">)))</span> <span class=\"c1\">-- 6</span>\n<span class=\"kd\">end</span> <span class=\"n\">Calc</span>\n</code></pre></div>",
        "id": 325730512,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675461132
    },
    {
        "content": "<p>After <span class=\"user-mention\" data-user-id=\"454439\">@shimsw20</span> and I read Chapter 1 of <em><a href=\"https://doi.org/10.1017/9781108778756\">Mathematical Logic and Computation</a></em> by Jeremy Avigad, I came up with another solution. But I think this makes things much more complicated.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Another solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Const</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"𝑐\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Const.mk</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"𝑣\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Var.mk</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Data</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Const</span> <span class=\"n\">Data</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Data.const</span> <span class=\"n\">c.index</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Var</span> <span class=\"n\">Data</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">Data.var</span> <span class=\"n\">v.index</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Model</span> <span class=\"n\">where</span>\n  <span class=\"n\">univ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Const</span> <span class=\"bp\">→</span> <span class=\"n\">univ</span>\n  <span class=\"n\">plus</span>  <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"bp\">→</span> <span class=\"n\">univ</span> <span class=\"bp\">→</span> <span class=\"n\">univ</span>\n  <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"bp\">→</span> <span class=\"n\">univ</span> <span class=\"bp\">→</span> <span class=\"n\">univ</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"|\"</span> <span class=\"bp\">𝔄</span> <span class=\"s2\">\"|\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Model.univ</span> <span class=\"bp\">𝔄</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Data</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"bp\">𝔄</span> <span class=\"o\">:</span> <span class=\"n\">Model</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"bp\">|𝔄|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|𝔄|</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">𝔄.</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"bp\">𝑐</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"bp\">𝑣</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">𝔄.</span><span class=\"n\">plus</span>  <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"bp\">𝔄</span> <span class=\"n\">σ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"bp\">𝔄</span> <span class=\"n\">σ</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">𝔄.</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"bp\">𝔄</span> <span class=\"n\">σ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"bp\">𝔄</span> <span class=\"n\">σ</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"bp\">𝔄₀</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">where</span>\n  <span class=\"n\">univ</span>  <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">const</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Const</span> <span class=\"bp\">↦</span> <span class=\"n\">c.index</span>\n  <span class=\"n\">plus</span>  <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span>\n  <span class=\"n\">times</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">σ₀</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">↦</span> <span class=\"n\">v.index</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"bp\">𝔄₀</span> <span class=\"n\">σ₀</span> <span class=\"o\">(</span><span class=\"bp\">𝑐</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- output: 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"bp\">𝔄₀</span> <span class=\"n\">σ₀</span> <span class=\"o\">(</span><span class=\"bp\">𝑣</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"c1\">-- 4</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"bp\">𝔄₀</span> <span class=\"n\">σ₀</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"bp\">𝑐</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝑣</span> <span class=\"mi\">6</span><span class=\"o\">))</span>  <span class=\"c1\">-- 7</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"bp\">𝔄₀</span> <span class=\"n\">σ₀</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"bp\">𝑐</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝑣</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"c1\">-- 12</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"bp\">𝔄₀</span> <span class=\"n\">σ₀</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"bp\">𝑐</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝑐</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝑣</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"c1\">-- 20</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Data</span>\n</code></pre></div>\n</div></div>\n<p><strong>Reference</strong></p>\n<p>Avigad, Jeremy. “Fundamentals.” In <em>Mathematical Logic and Computation</em>, 1–27. Cambridge: Cambridge University Press, 2022. doi:10.1017/9781108778756.002.</p>",
        "id": 328821209,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1676818859
    }
]