[
    {
        "content": "<p>I'm doing an exercise in the \"Mathematics in Lean\" book, where I have to prove that the infimum operator for a lattice is associative. I wish to create a hypothesis stating x \\inf y &lt;= x. How do I do so?</p>",
        "id": 378568120,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1690309122
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">\\</span><span class=\"n\">inf</span> <span class=\"n\">y</span> <span class=\"bp\">\\</span><span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">[</span><span class=\"n\">insert</span> <span class=\"n\">proof</span> <span class=\"n\">here</span><span class=\"bp\">;</span> <span class=\"n\">I</span> <span class=\"n\">would</span> <span class=\"n\">start</span> <span class=\"kd\">by</span> <span class=\"n\">trying</span> <span class=\"bp\">`</span><span class=\"n\">exact</span><span class=\"bp\">?`</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 378570403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690309657
    },
    {
        "content": "<p>Got it, thanks. I was expecting the declaration to be similar to <code>have h2 := min_le_left a b</code>, but this works too. Speaking of which, could you tell me why min_le_left takes explicit arguments, while its infimum version is purely implicit?</p>",
        "id": 378571824,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1690309995
    },
    {
        "content": "<p>It might be something to do with one of them being an explicit structure field whereas the other one was made afterwards. What are the exact declarations you're asking about? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=min_le_left#doc\">docs#min_le_left</a> ?</p>",
        "id": 378582585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690312559
    },
    {
        "content": "<p>I think we just don't have clear rules on implicit vs explicit, and as a result it's somewhat random depending on who wrote it and when</p>",
        "id": 378588785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690314394
    },
    {
        "content": "<p>IMHO, we should change <code>Lattice</code> lemmas to use more explicit arguments.</p>",
        "id": 378660783,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690345710
    },
    {
        "content": "<p>BTW, in Lean 4 you can pass implicit arguments using <code>inf_le_left (a := x) (b := y)</code></p>",
        "id": 378660891,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690345762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Passing.20implicit.20arguments.20explicitly/near/378660783\">said</a>:</p>\n<blockquote>\n<p>IMHO, we should change <code>Lattice</code> lemmas to use more explicit arguments.</p>\n</blockquote>\n<p>In fact I believe we should go the other way around</p>",
        "id": 378798986,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690377634
    },
    {
        "content": "<p>I barely ever explicitate the arguments to any lemma with a <code>≤</code> conclusion.</p>",
        "id": 378799145,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690377663
    },
    {
        "content": "<p>The many underscores that my proof terms inherit because of this are just noise.</p>",
        "id": 378799393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690377714
    },
    {
        "content": "<p>As you can see, two very active Lean users have opposite opinions on this question...</p>",
        "id": 378810181,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690379495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Passing.20implicit.20arguments.20explicitly/near/378582585\">said</a>:</p>\n<blockquote>\n<p>It might be something to do with one of them being an explicit structure field whereas the other one was made afterwards. What are the exact declarations you're asking about? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=min_le_left#doc\">docs#min_le_left</a> ?</p>\n</blockquote>\n<p>I was talking about this one: <code>min_le_left.{u} {α : Type u} [inst✝ : LinearOrder α] (a b : α) : min a b ≤ a</code><br>\nBut anyways, I got my question(s) answered, so all's good</p>",
        "id": 379067391,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1690448844
    }
]