[
    {
        "content": "<p>I am stuck on the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Polynomial.Pochhammer</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">BinomialSemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Multiplication by factorials is injective -/</span>\n  <span class=\"n\">inj_smul_factorial</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">n.factorial</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">n.factorial</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n  <span class=\"sd\">/-- All Pochhammer evaluations are divisible by the suitable factorials -/</span>\n  <span class=\"n\">exist_binomial_coeffs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">n.factorial</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.eval</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">pochhammer</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">multichoose</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BinomialSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">BinomialSemiring.exist_binomial_coeffs</span> <span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">factorial_mul_multichoose_eq_pochhammer</span> <span class=\"o\">[</span><span class=\"n\">BinomialSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.factorial</span> <span class=\"bp\">*</span> <span class=\"n\">multichoose</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.eval</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">pochhammer</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If I use <code>unfold multichoose</code> I get the goal <code>↑(Nat.factorial n) * Exists.choose (_ : ∃ x, ↑(Nat.factorial n) * x = Polynomial.eval r (pochhammer R n)) =  Polynomial.eval r (pochhammer R n)</code> and I don't know how to collapse the left side.</p>",
        "id": 386638440,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1692718685
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists.choose_spec#doc\">docs#Exists.choose_spec</a> help?</p>",
        "id": 386638930,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692718864
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">factorial_mul_multichoose_eq_pochhammer</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BinomialSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.factorial</span> <span class=\"bp\">*</span> <span class=\"n\">multichoose</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.eval</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">pochhammer</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">BinomialSemiring.exist_binomial_coeffs</span> <span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span>\n</code></pre></div>",
        "id": 386639260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692718983
    },
    {
        "content": "<p>The only thing you know about the output of <code>Exists.choose</code> is <code>Exists.choose_spec</code>. Even if you proved the exists statement with \"let x=37 and now show that this works\" Lean forgets that x=37 (because this showed up in a proof).</p>",
        "id": 386639472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692719055
    },
    {
        "content": "<p>It worked!  Thank you very much.</p>",
        "id": 386640321,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1692719331
    },
    {
        "content": "<p>In mathlib the usual practice would be defining this class with fields</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">multichoose</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"n\">factorial_mul_multichoose</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">n.factorial</span> <span class=\"bp\">*</span> <span class=\"n\">multichoose</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">pochhammer</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 386958507,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692829380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>  Should that code go in the part with <code>class BinomialSemiring</code> ?</p>",
        "id": 386973198,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1692841086
    },
    {
        "content": "<p>Okay, I see now.  That is quite nice, since it gets rid of the non-computable part.</p>",
        "id": 386974185,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1692841886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20prove.20things.20about.20Exists.2Echoose.20terms.3F/near/386958507\">said</a>:</p>\n<blockquote>\n<p>In mathlib the usual practice would be defining this class with fields</p>\n</blockquote>\n<p>To elaborate a little more: if there's a _unique_ choice of <code>multichoose</code>, then you'd use the above. If there's no unique choice, then the noncomputable version might still be preferred</p>",
        "id": 387038501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692872210
    }
]