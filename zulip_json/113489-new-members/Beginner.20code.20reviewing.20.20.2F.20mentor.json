[
    {
        "content": "<p>Is it appropriate to post code for review here ?<br>\nOr is there a better place somewhere for code critique</p>\n<p>For instance, I am not sure of the style of the proof of the second example (from the wonderful \"<a href=\"https://leanprover-community.github.io/mathematics_in_lean/C02_Basics.html#more-examples-using-apply-and-rw\">math in lean</a>\" material)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">aux</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span> <span class=\"n\">neg_add_cancel_right</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span>  <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_neg_cancel_right</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">,</span> <span class=\"n\">add_neg_cancel_right</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 385275086,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1692128099
    },
    {
        "content": "<p>One thing is, you can use strict indentation to emphasize that multiple goals have been introduced and to focus on them one at a time. Another is that <code>exact</code> emphasizes that a goal has been closed. I find this makes it easier to follow the proof structure. (This is coming from another beginner.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 385277233,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692129206
    },
    {
        "content": "<p>You can do it without subtraction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">min_le_left</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">min_le_right</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rcases</span> <span class=\"n\">min_choice</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">min_le_left</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">min_le_right</span>\n</code></pre></div>",
        "id": 385278633,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1692129842
    },
    {
        "content": "<p>This is the perfect place to ask for code review. It makes our life a little easier if you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (including imports, open namespaces, variables, ...), so it would be nice if you did that in the future <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 385279137,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692130105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Buster</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20code.20reviewing.20.20.2F.20mentor/near/385277233\">said</a>:</p>\n<blockquote>\n<p>One thing is, you can use strict indentation to emphasize that multiple goals have been introduced and to focus on them one at a time. Another is that <code>exact</code> emphasizes that a goal has been closed. I find this makes it easier to follow the proof structure. (This is coming from another beginner.)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think you have to fill all the arguments (possibly ywith <code>_</code>) when using exact.<br>\nSo that would give an extra <code>_</code> at the end in my case </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 385291362,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1692136699
    }
]