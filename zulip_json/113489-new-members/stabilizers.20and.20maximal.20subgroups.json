[
    {
        "content": "<p>Note though, we already have pointwise stabilizers by group actions: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.Stabilizer.submonoid#doc\">docs#MulAction.Stabilizer.submonoid</a></p>",
        "id": 383062983,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691523982
    },
    {
        "content": "<p>As for <code>Subgroup.IsMaximal</code>, can you just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCoatom#doc\">docs#IsCoatom</a> ?</p>",
        "id": 383063554,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691524131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/permission.20to.20push.20to.20GitHub/near/383062983\">said</a>:</p>\n<blockquote>\n<p>Note though, we already have pointwise stabilizers by group actions: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.Stabilizer.submonoid#doc\">docs#MulAction.Stabilizer.submonoid</a></p>\n</blockquote>\n<p>I believe that is the stabilizer of a single point. A pointwise stabilizer is the intersection of point stabilizers.</p>",
        "id": 383064702,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691524488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/permission.20to.20push.20to.20GitHub/near/383063554\">said</a>:</p>\n<blockquote>\n<p>As for <code>Subgroup.IsMaximal</code>, can you just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCoatom#doc\">docs#IsCoatom</a> ?</p>\n</blockquote>\n<p><code>Ideal.IsMaximal</code> is precisely a wrapper of <code>IsCoatom</code>. Is that not the way to go?</p>",
        "id": 383065218,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691524635
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 383065392,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691524684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258845\">Peiran Wu</span> <a href=\"#narrow/stream/113489-new-members/topic/permission.20to.20push.20to.20GitHub/near/383064702\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/permission.20to.20push.20to.20GitHub/near/383062983\">said</a>:</p>\n<blockquote>\n<p>Note though, we already have pointwise stabilizers by group actions: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.Stabilizer.submonoid#doc\">docs#MulAction.Stabilizer.submonoid</a></p>\n</blockquote>\n<p>I believe that is the stabilizer of a single point. A pointwise stabilizer is the intersection of point stabilizers.</p>\n</blockquote>\n<p>That's <code>⨅ a : G, MulAction.Stabilizer.submonoid G a</code>. (Oh and sorry, I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.Stabilizer#doc\">docs#MulAction.Stabilizer</a> is actually the subgroup)</p>",
        "id": 383066410,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691524942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258845\">Peiran Wu</span> <a href=\"#narrow/stream/113489-new-members/topic/permission.20to.20push.20to.20GitHub/near/383065218\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/permission.20to.20push.20to.20GitHub/near/383063554\">said</a>:</p>\n<blockquote>\n<p>As for <code>Subgroup.IsMaximal</code>, can you just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCoatom#doc\">docs#IsCoatom</a> ?</p>\n</blockquote>\n<p><code>Ideal.IsMaximal</code> is precisely a wrapper of <code>IsCoatom</code>. Is that not the way to go?</p>\n</blockquote>\n<p>I would say it's only the way to go if it's worth developing a separate API. In the case of <code>Ideal</code>, it's worth it because we want it to be a class so that we can have type class inference.</p>",
        "id": 383066828,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691525056
    },
    {
        "content": "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/permission.20to.20push.20to.20GitHub\">#new members &gt; permission to push to GitHub</a> by <span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span>.</p>",
        "id": 383066969,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691525094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/stabilizers.20and.20maximal.20subgroups/near/383066410\">said</a>:</p>\n<blockquote>\n<p>That's <code>⨅ a : G, MulAction.Stabilizer.submonoid G a</code>. (Oh and sorry, I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.Stabilizer#doc\">docs#MulAction.Stabilizer</a> is actually the subgroup)</p>\n</blockquote>\n<p>Yes, that's the definition I have as well, along with several simp lemmas. I'm just laying some ground work so that I won't have to keep writing down the indexed infimum</p>",
        "id": 383068115,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691525415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/stabilizers.20and.20maximal.20subgroups/near/383066828\">said</a>:</p>\n<blockquote>\n<p>I would say it's only the way to go if it's worth developing a separate API. In the case of <code>Ideal</code>, it's worth it because we want it to be a class so that we can have type class inference.</p>\n</blockquote>\n<p>I see.  I do have plan to use the maximality of subgroups and minimality of normal subgroups extensively, with a distant goal of formalizing the O'Nan-Scott theorem on the classification of permtutation groups. But I'm happy to hold off doing this bit and see if we actually need it.</p>",
        "id": 383069059,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691525681
    },
    {
        "content": "<p>Just accepted the invitation. Thanks! <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span></p>",
        "id": 383069692,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691525858
    },
    {
        "content": "<p>Great! Sorry, I wasn't trying to deter you from doing useful things, I just wanted to make sure you were sufficiently familiar with the library to know these things existed. If you feel these things are necessary, feel free to PR them. As for maximality, I would say the key question to ask is this: \"do we need to be able to use type class inference to conclude a subgroup is maximal\"? If not, then I suspect <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCoatom#doc\">docs#IsCoatom</a> is the preferred way to go about this.</p>",
        "id": 383078026,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691528398
    },
    {
        "content": "<blockquote>\n<p>As for maximality, I would say the key question to ask is this: \"do we need to be able to use type class inference to conclude a subgroup is maximal\"? If not, then I suspect <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCoatom#doc\">docs#IsCoatom</a> is the preferred way to go about this.</p>\n</blockquote>\n<p>To expand on this, the typical example is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.Quotient.field#doc\">docs#Ideal.Quotient.field</a> where the typeclass systems needs the maximality. I'm not sure this would be particularly useful for subgroups, but maybe it could be for maximal normal subgroups, in which case one gets a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSimpleGroup#doc\">docs#IsSimpleGroup</a>. Even then, I'm no group theorist so I can't tell how often this is used.</p>",
        "id": 383090853,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691532826
    },
    {
        "content": "<p>That's all understood Jireh; no worries. I didn't realise the subtlety surrounding the necessity of type class inference.</p>",
        "id": 383091959,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691533324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/stabilizers.20and.20maximal.20subgroups/near/383090853\">said</a>:</p>\n<blockquote>\n<p>I'm not sure this would be particularly useful for subgroups, but maybe it could be for maximal normal subgroups, in which case one gets a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSimpleGroup#doc\">docs#IsSimpleGroup</a>.</p>\n</blockquote>\n<p>Thanks for the elaboration. In fact, given your example, this will be particularly useful for subgroups, since a transitive group action is <em>primitive</em> iff the point stabilizer is a maximal subgroup! Primitive permutation groups are the \"simple groups\" of permutation group theory.</p>",
        "id": 383092324,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691533512
    },
    {
        "content": "<p>And primitivity was my original motivation for adding <code>Subgroup.IsMaximal</code></p>",
        "id": 383092489,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691533583
    },
    {
        "content": "<p>The fact that the world \"primitive\" pops up makes me realize that you should absolutely talk to <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> about all of the work he's done (outside of mathlib for now) around group actions and permutation groups.</p>",
        "id": 383092861,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691533797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258845\">Peiran Wu</span> <a href=\"#narrow/stream/113489-new-members/topic/stabilizers.20and.20maximal.20subgroups/near/383092324\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/stabilizers.20and.20maximal.20subgroups/near/383090853\">said</a>:</p>\n<blockquote>\n<p>I'm not sure this would be particularly useful for subgroups, but maybe it could be for maximal normal subgroups, in which case one gets a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSimpleGroup#doc\">docs#IsSimpleGroup</a>.</p>\n</blockquote>\n<p>Thanks for the elaboration. In fact, given your example, this will be particularly useful for subgroups, since a transitive group action is <em>primitive</em> iff the point stabilizer is a maximal subgroup! Primitive permutation groups are the \"simple groups\" of permutation group theory.</p>\n</blockquote>\n<p>I think that's a bit different, because you probably wouldn't want the typeclass system to do that for you, right? Or do you have a potential instance in mind?</p>",
        "id": 383093131,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691533931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/stabilizers.20and.20maximal.20subgroups/near/383093131\">said</a>:</p>\n<blockquote>\n<p>I think that's a bit different, because you probably wouldn't want the typeclass system to do that for you, right? Or do you have a potential instance in mind?</p>\n</blockquote>\n<p>Well my current research involves particular families of maximal subgroups of the symmetric/alternating groups, and the corresponding primitive actions. But I'm not going to be formalising my research yet. I'll need to think more about this.</p>",
        "id": 383094819,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691534711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/stabilizers.20and.20maximal.20subgroups/near/383092861\">said</a>:</p>\n<blockquote>\n<p>The fact that the world \"primitive\" pops up makes me realize that you should absolutely talk to <span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> about all of the work he's done (outside of mathlib for now) around group actions and permutation groups.</p>\n</blockquote>\n<p>That's very interesting. He seems quite active here on Zulip; it'd be great to find out more about what he's done.</p>",
        "id": 383095298,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691534941
    },
    {
        "content": "<p>Indeed, I have formalized a great deal of primitive group actions, Jordan's theorem,  the intransitive maximal subgroups of An and Sn, Iwasawa's primitivity criterion... I now need to translate this to lean4...</p>",
        "id": 383157533,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691561268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113489-new-members/topic/stabilizers.20and.20maximal.20subgroups/near/383157533\">said</a>:</p>\n<blockquote>\n<p>Indeed, I have formalized a great deal of primitive group actions, Jordan's theorem,  the intransitive maximal subgroups of An and Sn, Iwasawa's primitivity criterion... I now need to translate this to lean4...</p>\n</blockquote>\n<p>Oh that's great. Are you looking to add some of this into mathlib after porting it to Lean 4? I would be interested in contributing to the porting and merging as well. It would be nice to have it in mathlib, so I and potentially some of the other permutation group theorists here at St Andrews can expand on the work.</p>",
        "id": 383197629,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1691571554
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 403193649,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1700494022
    }
]