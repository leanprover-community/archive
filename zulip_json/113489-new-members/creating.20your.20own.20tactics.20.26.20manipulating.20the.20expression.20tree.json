[
    {
        "content": "<p>Hi all,</p>\n<p>Suppose I have a setup like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span>\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span>\n</code></pre></div>\n<p>How might I refer to the expression trees of A and B in tactic mode? I expect it would be something like EXP(A).1.1. </p>\n<p>What I'm looking for is a \"complete\" tactic language, I guess - as powerful as it would ever need to be.</p>\n<p>Secondly, how do I create my own tactics? I have only used tactics.</p>",
        "id": 340049163,
        "sender_full_name": "Dean Young",
        "timestamp": 1678178911
    },
    {
        "content": "<p>I recommend reading <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a>, and watching the videos linked there. Be aware that the way tactics are written is somewhat different in lean 4, but understanding the basic concepts of how expressions are formed should be pretty transferable. You can always go to the definition of an existing tactic and study how it works.</p>",
        "id": 340074141,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678185922
    },
    {
        "content": "<p>You can get the expression tree of the name <code>A</code> as <code> `(A) </code></p>",
        "id": 340122711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678199215
    },
    {
        "content": "<p>A simple test might look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">the_expr</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">the_expr.to_raw_fmt</span>\n</code></pre></div>",
        "id": 340123028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678199305
    },
    {
        "content": "<p>Where can I find the documentation behind expression trees in Lean 4? I want to be able to access the branches of the tree and to know how many branches there are at the top node, and the height, for instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span>\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span>\n<span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">first_branch</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">let</span> <span class=\"n\">second_branch</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">let</span> <span class=\"n\">height</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">let</span> <span class=\"n\">how_many_daughters</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 340231820,
        "sender_full_name": "Dean Young",
        "timestamp": 1678230297
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs4#Lean.Expr</a>  is the main type of expressions, I don't know of specific functions like height, I'm not sure how actually useful they are in practice. And the branching really depends on the sort of object at the top, e.g. a constant doesn't branch, a function application branches twice etc. The inductive type here controls the structure rather than being an arbitrary tree</p>",
        "id": 340317629,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678270684
    },
    {
        "content": "<p>I think that <code>Q(...)</code> is the lean 4 replacement for <code> `(...) </code></p>",
        "id": 340395620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678289858
    },
    {
        "content": "<p>And you can't just put <code>let</code> at the top level of a lean file like that</p>",
        "id": 340395718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678289884
    }
]