[
    {
        "content": "<p>hi i'm trying to prove <a href=\"https://en.wikipedia.org/wiki/Bernoulli%27s_inequality\">Bernoulli's inequality</a> in lean.</p>\n<p>this is what I got so far, getting into trouble handling the nat-&gt;real coercion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"c1\">-- allow proofs by contradiction</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">noncomputable theory</span> <span class=\"c1\">-- don't fuss about the reals being noncomputable</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">infi1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_ineq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- what now</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">infi1</span>\n</code></pre></div>\n<p>by the end of the proof, h3 looks alot like the goal, just need to prove h4. I failed to find the right coercion dance to solve h4, would appreciate some help :^)</p>",
        "id": 315107761,
        "sender_full_name": "Guy",
        "timestamp": 1670693209
    },
    {
        "content": "<p>Does <code>norm_cast</code> help?</p>",
        "id": 315107936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670693284
    },
    {
        "content": "<p>Maybe <code>exact_mod_cast h3</code>?</p>",
        "id": 315107956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670693297
    },
    {
        "content": "<p>Also, you should change your assumption <code>[h : x ≥ -1]</code> to <code>(h : x ≥ -1)</code> since you can't use typeclass inference there.</p>",
        "id": 315108041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670693346
    },
    {
        "content": "<p>thanks for the ( ) tip. norm_cast doesn't do apparent help unfortunately. the main issue (i think?) is the split from <code>↑(d + 1)</code> to <code>↑d + 1</code></p>",
        "id": 315108660,
        "sender_full_name": "Guy",
        "timestamp": 1670693656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514808\">@Guy</span> your message would get a lot more eyes on it if you posted it in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> rather than in the teaching stream. You can probably move the message, or maybe you have to ask a moderator to do so.</p>",
        "id": 315108786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670693728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  thanks for the tip, may I just repost?</p>",
        "id": 315108940,
        "sender_full_name": "Guy",
        "timestamp": 1670693804
    },
    {
        "content": "<p>Yeah that would work.</p>",
        "id": 315109130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670693903
    },
    {
        "content": "<p>[reposting from Lean for teaching]</p>\n<p>hi i'm trying to prove <a href=\"https://en.wikipedia.org/wiki/Bernoulli%27s_inequality\">Bernoulli's inequality</a> in lean.</p>\n<p>this is what I got so far, getting into trouble handling the nat-&gt;real coercion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"c1\">-- allow proofs by contradiction</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">noncomputable theory</span> <span class=\"c1\">-- don't fuss about the reals being noncomputable</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">infi1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_ineq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- what now</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">infi1</span>\n</code></pre></div>\n<p>by the end of the proof, h3 looks alot like the goal, just need to prove h4. I failed to find the right coercion dance to solve h4, would appreciate some help :^)</p>\n<p>For example, I couldn't figure out how to prove some key points:</p>\n<ul>\n<li><code>↑(d+1) = ↑d+1</code></li>\n<li><code>↑d ≥ 0</code></li>\n</ul>",
        "id": 315109441,
        "sender_full_name": "Guy",
        "timestamp": 1670694074
    },
    {
        "content": "<p>Here's your proof so far, following the recommended style guide:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_ineq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- you shouldn't be writing tactics when you have two open goals;</span>\n  <span class=\"c1\">-- use brackets to focus on an individual goal.</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- two goals again</span>\n    <span class=\"o\">{</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As for your questions, I'm not really sure what you're asking. \"h3 looks a lot like the goal\" -- yeah but h3 isn't the goal. \"just need to prove h4\" -- no -- you also need to prove that h3 and h4 are enough. Lean wants to see all the details, or at least be pushed in the right direction. Which step are you planning on working on next?</p>",
        "id": 315109670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670694206
    },
    {
        "content": "<p>Oh and you shouldn't really be using <code>≥</code> -- tactics and lemmas are expecting to see <code>≤</code>. Here's another rewrite (also fixing the issue Johan mentioned in the other thread):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_ineq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- base case</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive step</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- two goals again</span>\n    <span class=\"o\">{</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 315109909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670694339
    },
    {
        "content": "<p><code>↑(d+1) = ↑d+1</code> is provable with <code>norm_cast</code> or <code>push_cast</code>; <code>0 ≤ ↑d</code> is provable with <code>library_search</code> which finds <code>exact nat.cast_nonneg d</code>.</p>",
        "id": 315110321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670694594
    },
    {
        "content": "<p>first of all thanks for the format crash course, will definitely follow it from now.</p>\n<p>I didn't quite understand some of what you wrote:</p>\n<blockquote>\n<p>-- no -- you also need to prove that h3 and h4 are enough</p>\n</blockquote>\n<p>but why?<br>\nh3 says <code>a ≤ b</code><br>\nh4 says <code>b ≤ c</code><br>\ngoal is <code>a ≤ c</code><br>\nso.. that?</p>",
        "id": 315110609,
        "sender_full_name": "Guy",
        "timestamp": 1670694781
    },
    {
        "content": "<p>again, if I could only prove:</p>\n<ul>\n<li><code>↑(d+1) = ↑d+1</code></li>\n<li><code>↑d ≥ 0</code></li>\n</ul>\n<p>I think (n)linarith should get it?</p>",
        "id": 315110785,
        "sender_full_name": "Guy",
        "timestamp": 1670694892
    },
    {
        "content": "<p>sorry i missed your buttom message</p>",
        "id": 315110949,
        "sender_full_name": "Guy",
        "timestamp": 1670694967
    },
    {
        "content": "<blockquote>\n<p>so.. that?</p>\n</blockquote>\n<p>Right! That has a name, so you can either apply the term, or you can apply a tactic which knows that fact. But it's not vacuously true -- you have to make it happen. </p>\n<p>Aah, right: so indeed <code>linarith</code> will do it (that's the tactic), or you could do it directly (and much more quickly, although we're only talking milliseconds probably) using <code>le_trans</code> (that's the term).</p>",
        "id": 315111037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670695018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514808\">Guy</span> <a href=\"#narrow/stream/113489-new-members/topic/coercion.20in.20inequalities/near/315110785\">said</a>:</p>\n<blockquote>\n<p>again, if I could only prove ...</p>\n</blockquote>\n<p>then add a <code>have </code>statement that says those things, prove them with <code>sorry</code>, and come back to them when you've proved the rest</p>",
        "id": 315111383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670695218
    },
    {
        "content": "<p>by the way, in case you want spoilers, here is bernoulli's inequality in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_power/lemmas.html#one_add_mul_le_pow\">https://leanprover-community.github.io/mathlib_docs/algebra/group_power/lemmas.html#one_add_mul_le_pow</a></p>",
        "id": 315111899,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670695500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> that's smart regardless, thanks!</p>",
        "id": 315112101,
        "sender_full_name": "Guy",
        "timestamp": 1670695620
    },
    {
        "content": "<p>so I proved <code>↑(d+1) = ↑d+1</code>, now I can't rewrite it at h5 for some reason? getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>latest version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_ineq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- base case</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive step</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- two goals again</span>\n    <span class=\"o\">{</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 315113977,
        "sender_full_name": "Guy",
        "timestamp": 1670696812
    },
    {
        "content": "<p>I epected it to rewrite the goal at least to <code>1 + (↑d + 1) * x ≤ (1 + ↑d * x) * (1 + x)</code></p>",
        "id": 315114037,
        "sender_full_name": "Guy",
        "timestamp": 1670696864
    },
    {
        "content": "<p>What does vscode show when you hover over the arrows (in <code>h4</code> and the goal) in the infoview?</p>",
        "id": 315114044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670696870
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 315114137,
        "sender_full_name": "Guy",
        "timestamp": 1670696909
    },
    {
        "content": "<p>Put your mouse over the <code>↑</code>s in vscode</p>",
        "id": 315114161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670696925
    },
    {
        "content": "<p>oh i see, h4 is coe ℕ ℕ</p>",
        "id": 315114232,
        "sender_full_name": "Guy",
        "timestamp": 1670696986
    },
    {
        "content": "<p>and in h5 it's registered as coe ℕ ℝ</p>",
        "id": 315114291,
        "sender_full_name": "Guy",
        "timestamp": 1670697005
    },
    {
        "content": "<p>Exactly! So the <code>h4</code> you stated wasn't the one you wanted</p>",
        "id": 315114381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670697030
    },
    {
        "content": "<p>do I fix h4 then? how?</p>",
        "id": 315114391,
        "sender_full_name": "Guy",
        "timestamp": 1670697048
    },
    {
        "content": "<p>Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 315114393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670697051
    },
    {
        "content": "<p>nice that worked! thanks!!!</p>",
        "id": 315114435,
        "sender_full_name": "Guy",
        "timestamp": 1670697092
    },
    {
        "content": "<p>Instead of <code>norm_cast</code> you could also try <code>simp?</code> or <code>library_search</code>, which would tell you if there's a lemma that you could try <code>rw</code>ing by; then you wouldn't need <code>h4</code> at all</p>",
        "id": 315114565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670697146
    },
    {
        "content": "<p>almost there! this is my final version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bernoulli_ineq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- base case</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive step</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- two goals again</span>\n    <span class=\"o\">{</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.cast_succ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"bp\">↑</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the state at the sorry is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n<span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span>\n<span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Question is:</p>\n<ul>\n<li>is there an elegant way to eliminate <code>1</code>, <code>↑d * x </code> and <code>x</code>? want to be left to prove <code>0 ≤ ↑d * x ^ 2</code></li>\n<li>is there a more elegant way to do the rewrite chain at the end of h6?</li>\n</ul>",
        "id": 315115771,
        "sender_full_name": "Guy",
        "timestamp": 1670698005
    },
    {
        "content": "<p>Surely <code>nlinarith</code> took over a while ago with this lemma? Your <code>h5</code> should be <code>0 &lt;= (d : \\R)</code>, I don't know if <code>nlinarith</code> works with <code>&gt;=</code>. I would avoid all <code>&gt;=</code>, Lean's tactics and terms are not designed for it.</p>",
        "id": 315116149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670698284
    },
    {
        "content": "<p>rewritten h5 as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.cast_nonneg</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>nlinarith still doesn't get it.</p>",
        "id": 315116603,
        "sender_full_name": "Guy",
        "timestamp": 1670698567
    },
    {
        "content": "<p>Your <code>h5</code> doesn't mean what you think it means. The up-arrow means \"coerce to a random place\" and if you leave Lean to guess then it will just coerce from the naturals to the naturals. </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.cast_nonneg</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">pow_two</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n</div></div>\n<p>Tactics like <code>nlinarith</code> and <code>linarith</code> are designed to do this stuff for you.</p>",
        "id": 315116652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670698633
    },
    {
        "content": "<p>```have : 0 ≤ ↑d * x^2, nlinarith````<br>\nnice</p>\n<p>ok I learned alot now, thank you! will also visit the complex number game later for sure.</p>",
        "id": 315116985,
        "sender_full_name": "Guy",
        "timestamp": 1670698841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514808\">Guy</span> has marked this topic as resolved.</p>",
        "id": 315117221,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670698968
    }
]