[
    {
        "content": "<p>I am really stuck on problem 5 in chapter 8 of Theorem Proving in Lean 4, and I would be grateful for any suggestions or hints.</p>\n<p>Here's a simplifed example of how I get stuck.  Let a <code>CTree</code> be a binary tree where the leaf nodes are either black or red, and each leaf is associated with a <code>Nat</code>.  Let <code>sum</code> be the sum over all the leaves.  Let <code>simpColor</code> replace a tree which consists of two red leaves or two black leaves with a single colored leaf whose value is the sum.  </p>\n<p>I want to prove that <code>sum simpColor t = sum t</code> for all <code>t : CTree</code>.    </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">CTree</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">CTree</span>\n  <span class=\"bp\">|</span> <span class=\"n\">red</span>   <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">CTree</span>\n  <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">:</span> <span class=\"n\">CTree</span> <span class=\"bp\">→</span> <span class=\"n\">CTree</span> <span class=\"bp\">→</span> <span class=\"n\">CTree</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CTree</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">CTree</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sum</span> <span class=\"n\">t₁</span> <span class=\"bp\">+</span> <span class=\"n\">sum</span> <span class=\"n\">t₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simpColor</span> <span class=\"o\">:</span> <span class=\"n\">CTree</span> <span class=\"bp\">→</span> <span class=\"n\">CTree</span>\n  <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">red</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">red</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">black</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">black</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">black</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t</span>                          <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>I think I can just match the tree according to the cases in <code>simpColor</code> and verify this holds for each part.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">simpColor_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">CTree</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">simpColor</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span>\n    <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">red</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">red</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">black</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">black</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">t1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>  <span class=\"c1\">--- this case fails</span>\n</code></pre></div>\n<p>However, the last case fails.  I assume this is becuase the last case overmatches, and when we get to that branch, lean doesn't know we aren't in the first two branches.   That is, it tries to prove <code>simpColor t1  = t1</code> for a generic <code>t1 : CTree</code>, not for the specific <code>t1</code> which is known not to be in the first two cases.   Is there some way to match on the cases in a function definition rather than the cases in an inductive type?  </p>\n<p>Alternatively,  instead of doing a match on <code>t </code>,  I can <code>rw [simpColor]</code>, and this puts a big match statement in my equality.  If there was some tactic which enabled me to rewrite</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"o\">(</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span>  <span class=\"n\">x1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t1</span>\n    <span class=\"bp\">...</span>\n   <span class=\"bp\">|</span>  <span class=\"n\">xn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tn</span>  <span class=\"o\">)</span>\n</code></pre></div>\n<p>as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">x1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">t1</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">xn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">tn</span>\n</code></pre></div>\n<p>then I could make progress.  Is there something like that?</p>\n<p>My last idea is to tediously enumerate the refinement of all the cases invovled in the definition of <code>sum</code> and <code>simpColor</code>.  I get something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">simpColor_eq2</span>\n        <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">CTree</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">simpColor</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span>\n    <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">t₁</span><span class=\"o\">,</span> <span class=\"n\">t₂</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">s1</span><span class=\"o\">,</span>         <span class=\"n\">branch</span> <span class=\"n\">s2</span> <span class=\"n\">s3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>  <span class=\"c1\">---  Weirdly this case fails</span>\n        <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span>            <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"n\">n₁</span><span class=\"o\">,</span>     <span class=\"n\">red</span> <span class=\"n\">n₂</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"n\">n₁</span><span class=\"o\">,</span>   <span class=\"n\">black</span> <span class=\"n\">n₂</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"n\">n₁</span><span class=\"o\">,</span>     <span class=\"n\">black</span> <span class=\"n\">n₂</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"n\">n₁</span><span class=\"o\">,</span>   <span class=\"n\">red</span> <span class=\"n\">n₂</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">black</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- Weirdly this case fails</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">CTree</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">simpColor</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">branch</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>However, there is one case which doesn't work.  I can't tell why, to my eye the matcher should easily resolve this case.  So maybe my hypothesis about why the previous version doesn't work is wrong, and this points to the real problem.</p>\n<p>I appreciate any insights you can give.  Thank you</p>",
        "id": 357697710,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1683838800
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">simpColor_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">CTree</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">simpColor</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span>\n    <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">red</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">red</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">black</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">black</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">t1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">simpColor</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 357702779,
        "sender_full_name": "David Renshaw",
        "timestamp": 1683840987
    },
    {
        "content": "<p>( <code>aesop</code> also works after the <code>rw[simpColor]</code>. I got the idea to use <code>split</code> from <code>aesop?</code>.)</p>",
        "id": 357702891,
        "sender_full_name": "David Renshaw",
        "timestamp": 1683841057
    },
    {
        "content": "<p>simpler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">simpColor_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">CTree</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">simpColor</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">simpColor</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 357703334,
        "sender_full_name": "David Renshaw",
        "timestamp": 1683841264
    },
    {
        "content": "<p>very tricky, thank you</p>",
        "id": 357714195,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1683846927
    },
    {
        "content": "<p>It is still mysterious that we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span> <span class=\"c1\">--- not accepted</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span> <span class=\"c1\">--- accepted</span>\n</code></pre></div>\n<p>Does anybody have an explanation? By the way, <code>| branch _ (branch _ _) =&gt; simp only [simpColor]</code> works.</p>",
        "id": 357867518,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1683897481
    },
    {
        "content": "<p>Yes, I also noticed the mysterious case works with <code>simp [simpColor]</code>.  The actual problem 8.5 has some more details, where we are evaluating over an expression tree</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>and the <code>eval</code> function also takes a function <code>v</code> which assigns values to variables.  In that case, the analogous theorem looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">simpConst_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simpConst</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">e</span>\n      <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">simpConst</span><span class=\"o\">]</span>\n        <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>  <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">plus</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">simpConst</span><span class=\"o\">]</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">times</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">simpConst</span><span class=\"o\">]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">simpConst</span><span class=\"o\">]</span>\n        <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>  <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">plus</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">simpConst</span><span class=\"o\">]</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">times</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">simpConst</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>All the lines with a <code>simp</code> didn't work with a <code>rfl</code> and all of those lines involving matching the right expression.  So I guess there is some limitation of <code>rfl</code> in this setup which prevents noticing the patterns on the right term?</p>",
        "id": 359325576,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1684396351
    }
]