[
    {
        "content": "<p>Hello,</p>\n<p>I am trying to work on sets, how do I do that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">S_T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">T</span> <span class=\"n\">S_T</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">s_t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s_t</span><span class=\"o\">⟩</span> <span class=\"c1\">-- &lt;--</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_t</span> <span class=\"o\">:</span> <span class=\"n\">S_T</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s_t</span>\n</code></pre></div>\n<p>Thanks</p>",
        "id": 340545906,
        "sender_full_name": "tica",
        "timestamp": 1678352375
    },
    {
        "content": "<p>You likely want to use <code>variable</code> ins place of constant, and there should already be a <code>has_mem</code> instance so there shouldn't be a need to define another one in the same way</p>",
        "id": 340546161,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678352442
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s_t</span>\n</code></pre></div>\n<p>should work fine</p>",
        "id": 340546354,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678352510
    },
    {
        "content": "<p>What is the difference between using a constant and a variable in this case?<br>\nI don't understand why it works with a variable but not a constant</p>",
        "id": 340550413,
        "sender_full_name": "tica",
        "timestamp": 1678353626
    },
    {
        "content": "<p>It doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variable</span> <span class=\"n\">S_T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S_T</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_t'</span> <span class=\"o\">:</span> <span class=\"n\">S_T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t'</span> <span class=\"bp\">∈</span> <span class=\"n\">s_t'</span> <span class=\"c1\">-- &lt;-</span>\n</code></pre></div>",
        "id": 340551118,
        "sender_full_name": "tica",
        "timestamp": 1678353843
    },
    {
        "content": "<p>What are you trying to accomplish by writing <code>variable S_T : set T</code>, and having both <code>S_T</code> and <code>s_t</code>?</p>",
        "id": 340551464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678353933
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Plane</span> <span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">Point</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">existence_of_two_points</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Plane</span><span class=\"o\">):</span> <span class=\"bp\">∃</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">p1</span> <span class=\"bp\">≠</span> <span class=\"n\">p2</span> <span class=\"bp\">∧</span> <span class=\"n\">p1</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">p2</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">Line</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Point</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">):</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 340556046,
        "sender_full_name": "tica",
        "timestamp": 1678355171
    },
    {
        "content": "<p>There is another active thread here (search for <span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span> ) where it is explained how to avoid constants and axioms (which we try to avoid) when setting this sort of thing up.</p>",
        "id": 340556753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678355388
    },
    {
        "content": "<p>I suppose you mean this topic <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20declare.20unique.20constants\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20declare.20unique.20constants</a></p>\n<p>What is the difference between a variable and a constant?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 340579015,
        "sender_full_name": "tica",
        "timestamp": 1678360973
    },
    {
        "content": "<p>A <code>variable</code> is just an additional argument to following definitions/theorems.</p>\n<p>A <code>constant</code> is something that you are postulating to exist globally. 99% of the time, it doesn't make sense to do this unless you are adding exotic set theory axioms or something.</p>",
        "id": 340580874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678361524
    },
    {
        "content": "<p>Or if you had a theorem that you didn't know how to prove but wanted to assume it was true anyways, you could add it as a <code>constant</code> (or <code>axiom</code>).</p>",
        "id": 340581119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678361606
    },
    {
        "content": "<p>Ok thanks.<br>\nSo I rewrote it like that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Plane</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">existance_of_two_points</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">points</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">points</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n<span class=\"c1\">--(incidence (a b : Point) : ∃! l : Line, a ∈ l.points ∧ b ∈ l.points)</span>\n<span class=\"o\">(</span><span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">L'</span><span class=\"o\">:</span> <span class=\"n\">Line</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">L'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How to use the <code>Line</code> structure in the <code>Line</code> structure?<br>\nI think it's not possible because it's not defined yet, how do you do it then?</p>",
        "id": 340599620,
        "sender_full_name": "tica",
        "timestamp": 1678366996
    },
    {
        "content": "<p>If you're adding fields to a structure containing \"axioms\" about equality of that structure itself, you might want a quotient type</p>",
        "id": 340634033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678374869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  It's not that I want to but I was told above to use a structure instead of an axiom.<br>\nWould you do this differently than with a structure?</p>",
        "id": 340635321,
        "sender_full_name": "tica",
        "timestamp": 1678375170
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">pre_line</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pre_line_setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">pre_line</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">L</span> <span class=\"n\">L'</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span><span class=\"o\">,</span> <span class=\"c1\">-- your condition here</span>\n  <span class=\"n\">eqv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">pre_line_setoid</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340636429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678375406
    },
    {
        "content": "<p>But I think your condition is wrong; it allows the \"line\" consisting of every point, and therefore says that every line is equal to every other line</p>",
        "id": 340637614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678375632
    },
    {
        "content": "<p>You want to define a structure that contains <code>Line</code> and <code>Point</code> types as arguments, and has some additional axioms for these two types. <br>\nWe had a very <a href=\"#narrow/stream/113488-general/topic/Structure.20defined.20for.20Desarguesian.20proj.20plane\">similar discussion</a> recently about the Desarguesian plane, I'd look there for some ideas on how to write this down.</p>",
        "id": 340638271,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678375786
    },
    {
        "content": "<p>I'm not sure <code>quotient</code> is capturing the right thing here, since <code>incidence</code> is supposed to be part of the conditions of what constitutes a plane.</p>",
        "id": 340639187,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678375988
    },
    {
        "content": "<p>Here's a suggestion in the context of what's been discussed here, but be sure to check out the discussion Floris linked to.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Plane</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">Point</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">existence_of_two_points</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">L'</span> <span class=\"bp\">∈</span> <span class=\"n\">lines</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">L'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340639340,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678376029
    },
    {
        "content": "<p>I made a slight change where <code>Point</code> is the type of points in its entirety -- there's usually no need to have a <code>set Point</code> since you can use <code>subtype</code> (for example, if <code>s : set nat</code> you can write <code>Plane s</code> and <code>s</code> will be coerced to a type)</p>",
        "id": 340639559,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678376072
    },
    {
        "content": "<p>That doesn't typecheck, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>; it tries to talk about membership of one point in another</p>",
        "id": 340642062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678376603
    },
    {
        "content": "<p>Oops, that should be <code>set (set Point)</code></p>",
        "id": 340642845,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678376764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nI use the book: <a href=\"https://www.amazon.com/Foundations-Geometry-2nd-Gerard-Venema/dp/0136020585\">https://www.amazon.com/Foundations-Geometry-2nd-Gerard-Venema/dp/0136020585</a><br>\nThis is how a line is described (as I understand it)<br>\nThe code does not compile.<br>\nI tried to add the instance <code>has_mem</code> without success.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pre_line</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">Point</span> <span class=\"o\">(</span><span class=\"n\">pre_line</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pre_line_setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">pre_line</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">L</span> <span class=\"n\">L'</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span><span class=\"o\">,</span> <span class=\"c1\">-- your condition here</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">pre_line_setoid</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340643743,
        "sender_full_name": "tica",
        "timestamp": 1678376978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I'll take a look, thanks</p>",
        "id": 340643844,
        "sender_full_name": "tica",
        "timestamp": 1678377000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I am not sure I understand how to use your solution.<br>\nI did this (I still have the problem with <code>has_mem</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Plane</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">Point</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">existence_of_two_points</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">L'</span> <span class=\"bp\">∈</span> <span class=\"n\">lines</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">L'</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">L'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lies_on</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Plane</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"bp\">∈</span> <span class=\"n\">P.lines</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">point</span> <span class=\"bp\">∈</span> <span class=\"n\">line</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">external</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Plane</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"bp\">∈</span> <span class=\"n\">P.lines</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">point</span> <span class=\"bp\">∉</span> <span class=\"n\">line</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parallel</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Plane</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">line1</span> <span class=\"n\">line2</span> <span class=\"bp\">∈</span> <span class=\"n\">P.lines</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">¬∃</span> <span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">lies_on</span> <span class=\"n\">point</span> <span class=\"n\">line1</span> <span class=\"bp\">∧</span> <span class=\"n\">lies_on</span> <span class=\"n\">point</span> <span class=\"n\">line2</span>\n</code></pre></div>",
        "id": 340647610,
        "sender_full_name": "tica",
        "timestamp": 1678377828
    }
]