[
    {
        "content": "<p>Hi everyone,<br>\nI'm trying to prove this proposition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"n\">nat.gcd</span> <span class=\"mi\">6</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there any way to prove this statement by simply unfolding as many times as needed? For example if I run <code>#eval</code> on the statement,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">nat.gcd</span> <span class=\"mi\">6</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>I get <code>2</code> as expected. I tried with tactics like simpl and refl, but they don't really help. I imagine that I might also just be completely misunderstanding the inner workings of eval, so if anyone could clarify or provide some resources that could help me, that would be amazing.</p>",
        "id": 351292868,
        "sender_full_name": "Roberto Pettinau",
        "timestamp": 1681989903
    },
    {
        "content": "<p><code>gcd</code> can't be unfolded by <code>rfl</code> because it uses well-founded recursion</p>",
        "id": 351293258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681989989
    },
    {
        "content": "<p>In general <code>#eval</code> is useless at telling you whether something will be easy to prove</p>",
        "id": 351293366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681990018
    },
    {
        "content": "<p>But <code>norm_num</code>, which is a tactic that does something completely different to <code>#eval</code> under the hood, could help you</p>",
        "id": 351294998,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681990413
    },
    {
        "content": "<p>Thanks to both for the help, <code>norm_num</code> worked in this case. Is there a reason why there's not a general tactic for definitions of this form?</p>",
        "id": 351297730,
        "sender_full_name": "Roberto Pettinau",
        "timestamp": 1681991042
    },
    {
        "content": "<p><code>norm_num</code> is meant to be a general-purpose evaluator for numerical functions like this. By the way, there's <code>#norm_num</code> that you can use instead of <code>#eval</code> to see what it evaluates things to, like <code>#norm_num nat.gcd 6 2</code>.</p>",
        "id": 351298752,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681991222
    },
    {
        "content": "<p>A difference between <code>#eval</code> and <code>#norm_num</code> is that <code>#norm_num</code> generates a proof that the result is equal, but <code>#eval</code> does not.</p>",
        "id": 351298973,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681991274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611417\">Roberto Pettinau</span> has marked this topic as resolved.</p>",
        "id": 351341651,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682000526
    }
]