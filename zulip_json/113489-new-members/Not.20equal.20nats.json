[
    {
        "content": "<p>Is there a more succinct way to prove  that 2 natural numbers are not equal? This is what I've done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Axiom 2.3</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">zero_is_not_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ'</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">zero</span>\n\n<span class=\"c1\">-- Axiom 2.4</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">succ_elim</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ'</span><span class=\"o\">}:</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">three_not_eq_two</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">succ_elim</span> <span class=\"o\">(</span><span class=\"n\">succ_elim</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_is_not_succ</span> <span class=\"n\">zero</span> <span class=\"n\">h2</span>\n  <span class=\"n\">qed</span>\n</code></pre></div>\n<p>But I don't see that scaling very well to cases like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">big_neq</span> <span class=\"o\">:</span> <span class=\"mi\">200</span> <span class=\"bp\">≠</span> <span class=\"mi\">199</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">???</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_is_not_succ</span> <span class=\"n\">zero</span> <span class=\"n\">h2</span>\n  <span class=\"n\">qed</span>\n</code></pre></div>\n<p>I've been trying to build something like foldl with <code>succ_elim</code> but couldn't find a way to do it.</p>",
        "id": 386274354,
        "sender_full_name": "GabrielT",
        "timestamp": 1692578311
    },
    {
        "content": "<p>If it is specific natural numbers, then you can use <code>by decide</code> as the problem is decidable.</p>",
        "id": 386285549,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692583069
    },
    {
        "content": "<p>Also note that your first axiom is a theorem in the library: <code>Nat.succ_ne_zero</code> in the linbrary. The second can be proved too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_elim</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 386286834,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692583662
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">big_neq</span> <span class=\"o\">:</span> <span class=\"mi\">200</span> <span class=\"bp\">≠</span> <span class=\"mi\">199</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>would be the usual way to do this.</p>",
        "id": 386287631,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1692584044
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> and <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>! I'll check those out. Btw, I've been trying to write Terence Tao's Analysis 1 book in lean just for fun (and learning). I was trying to define everything from scratch and got curious how you would normally solve something like that, should've probably mentioned that</p>",
        "id": 386288809,
        "sender_full_name": "GabrielT",
        "timestamp": 1692584592
    },
    {
        "content": "<p>It is more idiomatic in Lean to define natural numbers as an inductive type. The axioms are consequences of the inductive definition.</p>\n<p>A bunch of examples related to what you are trying is at <a href=\"https://github.com/siddhartha-gadgil/proofs-and-programs-2023/blob/main/PnP2023/Lec_01_11/NatLe.lean\">https://github.com/siddhartha-gadgil/proofs-and-programs-2023/blob/main/PnP2023/Lec_01_11/NatLe.lean</a> and as docs at <a href=\"https://math.iisc.ac.in/~gadgil/proofs-and-programs-2023/doc/PnP2023/Lec_01_11/NatLe.html\">https://math.iisc.ac.in/~gadgil/proofs-and-programs-2023/doc/PnP2023/Lec_01_11/NatLe.html</a><br>\nIn particular you can see how <code>repeat</code> and <code>first</code> can be used in similar situations.</p>",
        "id": 386289682,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692585005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638674\">@GabrielT</span>  I'm on my phone so didn't test it in Lean, but I'd expect this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">three_not_eq_two</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>The cases tactic knows about constructors and their injectivity.</p>",
        "id": 386292267,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692586344
    },
    {
        "content": "<p>oh nice! that worked beautifully <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 386295321,
        "sender_full_name": "GabrielT",
        "timestamp": 1692588216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> yes, I defined it inductively <a href=\"https://github.com/gabriel128/analysis_in_lean/pull/1/files#diff-81023a9288ace0a16002f75395faf42e1020e962b663c600c8add2529bdd3189L7\">https://github.com/gabriel128/analysis_in_lean/pull/1/files#diff-81023a9288ace0a16002f75395faf42e1020e962b663c600c8add2529bdd3189L7</a>  I only copied a small portion of what I had  just to get the minimal reproducible instance.</p>",
        "id": 386296013,
        "sender_full_name": "GabrielT",
        "timestamp": 1692588606
    },
    {
        "content": "<p>I got an idea from what <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> shared and ended up solving it like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Axiom 2.3</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">zero_is_not_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ'</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">zero</span>\n\n<span class=\"c1\">-- Axiom 2.4</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">succ_elim</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ'</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne_succ_intro</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ'</span><span class=\"o\">}:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span>\n  <span class=\"n\">apply</span> <span class=\"n\">succ_elim</span>\n  <span class=\"n\">qed</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"not_eq\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">zero_is_not_succ</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">ne_succ_intro</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">three_not_eq_two</span> <span class=\"o\">:</span> <span class=\"mi\">500</span> <span class=\"bp\">≠</span> <span class=\"mi\">39</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">not_eq</span>\n  <span class=\"n\">qed</span>\n</code></pre></div>\n<p>thanks all for the help!</p>",
        "id": 386353590,
        "sender_full_name": "GabrielT",
        "timestamp": 1692612628
    },
    {
        "content": "<p>You should probably not be adding new <code>axiom</code>s on top of an inductive type</p>",
        "id": 386353746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692612698
    },
    {
        "content": "<p>Both axioms are true as theorems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Axiom 2.3</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_is_not_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ'</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n\n<span class=\"c1\">-- Axiom 2.4</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_elim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ'</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Natu.succ.inj</span>\n</code></pre></div>",
        "id": 386354624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692612875
    },
    {
        "content": "<p>I only did it because that's presented as an axiom in Terence Tao's book, but I get your point. It was actually straight forward to prove, I might transform the rest of the axioms to lemmas</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">succ_elim</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ'</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 386354682,
        "sender_full_name": "GabrielT",
        "timestamp": 1692612897
    },
    {
        "content": "<p>Note that Lean generates that lemma for you as <code>Natu.succ.inj</code>, which is how I prove it above.</p>",
        "id": 386355139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692613039
    },
    {
        "content": "<p>yeah I was going to ask you that, where does  <code>inj</code> come from? is that documented somewhere?</p>",
        "id": 386355364,
        "sender_full_name": "GabrielT",
        "timestamp": 1692613105
    },
    {
        "content": "<p>If you're going to follow an axiomatic presentation, I recommend avoiding <code>inductive</code> and doing <em>everything</em> axiomatically. Otherwise you're using a mixture of the axioms from the source and the axioms that lean gives you, and you have the worst of both worlds (doesn't follow the source material or guarantee soundness).</p>",
        "id": 386355577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692613163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638674\">GabrielT</span> <a href=\"#narrow/stream/113489-new-members/topic/Not.20equal.20nats/near/386355364\">said</a>:</p>\n<blockquote>\n<p>yeah I was going to ask you that, where does  <code>inj</code> come from? is that documented somewhere?</p>\n</blockquote>\n<p>It's generated by the <code>inductive</code> keyword (using a proof like yours), I'm afraid I don't know where it's documented</p>",
        "id": 386355883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692613229
    },
    {
        "content": "<p>You can <code>#print Natu.succ.inj</code> to see the proof</p>",
        "id": 386355918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692613240
    },
    {
        "content": "<p>yeah I've been trying to avoid using <code>inductive</code> and defined induction as an axiom</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">math_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">ℕ'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hzero</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">zero</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>which is what the book does. However I might probably have used some things that use inductive behind the scenes</p>",
        "id": 386358536,
        "sender_full_name": "GabrielT",
        "timestamp": 1692614033
    },
    {
        "content": "<p>If you use <code>axiom ℕ' : Type</code> as well then you should be clear of any accidental use of <code>inductive</code></p>",
        "id": 386359494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692614388
    }
]