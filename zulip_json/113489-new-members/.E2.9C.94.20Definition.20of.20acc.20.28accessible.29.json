[
    {
        "content": "<p>Theorem Proving in Lean section 8.4 says \"According to its definition, acc r x is equivalent to ∀ y, r y x → acc r y. \"  However, this does not uniquely define <code>acc</code>.  For example, on the integers where <code>r</code> is the standard <code>&lt;</code>, an <code>acc &lt; x</code> that is true for all <code>x</code> satisfies the above proposition, as does one that is <code>false</code> for all <code>x</code>.  I'm assuming the <code>false</code> is what is intended here.  Is there another way I should be thinking of <code>acc</code>?</p>",
        "id": 292007405,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1659619880
    },
    {
        "content": "<p><code>false</code> is not valid for all <code>x</code> because <code>acc r 0</code> (as <code>∀ y, y &lt; 0, acc r y</code> vacuously).</p>",
        "id": 292008562,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659620437
    },
    {
        "content": "<p>Also, doesn't <code>acc</code> stand for Ascending Chain Condition?</p>",
        "id": 292008589,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659620452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Definition.20of.20acc.20.28accessible.29/near/292008562\">said</a>:</p>\n<blockquote>\n<p><code>false</code> is not valid for all <code>x</code> because <code>acc r 0</code> (as <code>∀ y, y &lt; 0, acc r y</code> vacuously).</p>\n</blockquote>\n<p>That's true for the natural numbers  ℕ, but here I'm talking about the integers ℤ.</p>",
        "id": 292008788,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1659620533
    },
    {
        "content": "<p>Ah yes sorry. The fact that it's an inductive definition means that it's the smallest relation respecting this property, so indeed it is <code>false</code> everywhere.</p>",
        "id": 292009288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659620737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Definition.20of.20acc.20.28accessible.29/near/292009288\">said</a>:</p>\n<blockquote>\n<p>Ah yes sorry. The fact that it's an inductive definition means that it's the smallest relation respecting this property, so indeed it is <code>false</code> everywhere.</p>\n</blockquote>\n<p>Thanks a lot, that makes sense and is very helpful.  How does one define \"smallest relation\" in this context?  For example, what if one relation is true on a subset S and false on a subset T, and another relation is opposite?  Or can you prove that the \"infinite and\" of all relations satisfying the definition also satisfies the definition, and call that the smallest relation?</p>",
        "id": 292010023,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1659621016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Definition.20of.20acc.20.28accessible.29/near/292008589\">said</a>:</p>\n<blockquote>\n<p>Also, doesn't <code>acc</code> stand for Ascending Chain Condition?</p>\n</blockquote>\n<p><code>acc</code> in lean stands for the accessibility relation</p>",
        "id": 292011410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659621594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Definition.20of.20acc.20.28accessible.29/near/292010023\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Definition.20of.20acc.20.28accessible.29/near/292009288\">said</a>:</p>\n<blockquote>\n<p>Ah yes sorry. The fact that it's an inductive definition means that it's the smallest relation respecting this property, so indeed it is <code>false</code> everywhere.</p>\n</blockquote>\n<p>Thanks a lot, that makes sense and is very helpful.  How does one define \"smallest relation\" in this context?  For example, what if one relation is true on a subset S and false on a subset T, and another relation is opposite?  Or can you prove that the \"infinite and\" of all relations satisfying the definition also satisfies the definition, and call that the smallest relation?</p>\n</blockquote>\n<p>It's the intersection of all relations satisfying the definition</p>",
        "id": 292011590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659621655
    },
    {
        "content": "<p>the structure of inductive types ensures that the set of fixed points of the operator is closed under intersection</p>",
        "id": 292011749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659621719
    },
    {
        "content": "<p><code>acc</code> has a history of at least 23 years in Coq, and it has always been called <a href=\"https://github.com/coq/coq/blame/b239b208eb9a66037b0c629cf7ccb6e4b110636a/theories/Init/Wf.v#L26\">the accessibility predicate</a>.</p>",
        "id": 292013970,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659622763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> has marked this topic as resolved.</p>",
        "id": 292017102,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659624206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Definition.20of.20acc.20.28accessible.29/near/292010023\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Definition.20of.20acc.20.28accessible.29/near/292009288\">said</a>:</p>\n<blockquote>\n<p>Ah yes sorry. The fact that it's an inductive definition means that it's the smallest relation respecting this property, so indeed it is <code>false</code> everywhere.</p>\n</blockquote>\n<p>Thanks a lot, that makes sense and is very helpful.  How does one define \"smallest relation\" in this context?  For example, what if one relation is true on a subset S and false on a subset T, and another relation is opposite?  Or can you prove that the \"infinite and\" of all relations satisfying the definition also satisfies the definition, and call that the smallest relation?</p>\n</blockquote>\n<p>When you define an inductive in Lean, it autogenerates a recursion lemma, which sort of encodes this minimality property. The one for <code>acc</code> translates into English as follows: if you have a predicate that, whenever true for all values less than <code>x</code>, is true for <code>x</code>, and if <code>y</code> is accessible, then the predicate is true for <code>y</code>.</p>",
        "id": 292357917,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659930503
    },
    {
        "content": "<p>You can prove that <code>¬ acc (&lt;) x</code> on integers, by applying this recursor on the false predicate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">int.not_acc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">acc.rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">sub_one_lt</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 292357927,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659930528
    },
    {
        "content": "<p>If you want a less type-theoretic understanding of the accessibility predicate: <code>acc r x</code> means that there's no infinite <code>r</code>-decreasing sequence starting at <code>x</code>.</p>",
        "id": 292357957,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659930593
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 292358033,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659930685
    },
    {
        "content": "<p>Relevant: <a href=\"https://github.com/leanprover-community/mathlib/pull/15927\">#15927</a></p>",
        "id": 292360206,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659933748
    },
    {
        "content": "<p>Also relevant: <a href=\"https://github.com/leanprover-community/mathlib/pull/15931\">#15931</a></p>",
        "id": 292408644,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659968603
    }
]