[
    {
        "content": "<p>Hi, My name is Joel. I'm a professional Haskell developer, and have been growing my interest in Lean and mathematics in general.</p>",
        "id": 328717884,
        "sender_full_name": "Joel McCracken",
        "timestamp": 1676748905
    },
    {
        "content": "<p>as I study deeper topics in CS and PLT especially, I run into problems where my lack of training in proving things is limiting my ability to understand the material. So, I've been working on that. I'm slowly working through Velleman's <em>How to Prove It,</em> but I naturally wish I had a way to check my proofs, as I have no idea if my proof is correct (or not). </p>\n<p>What I'd like to do is use Lean for this, but I've been having some trouble getting started with it and understanding how bits and pieces fit together. So, as a way to resolve that, I started looking at the learning resources for lean, with the goal of starting with some simpler proofs and building from there. So, I started reading <a href=\"https://leanprover.github.io/logic_and_proof/index.html\">https://leanprover.github.io/logic_and_proof/index.html</a></p>\n<p>However, I found that one of the very first examples: <br>\n<a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.nat.prime%0Aopen%20nat%0A%0Atheorem%20sqrt_two_irrational%20%7Ba%20b%20%3A%20%E2%84%95%7D%20(co%20%3A%20gcd%20a%20b%20%3D%201)%20%3A%0A%20%20a%5E2%20%E2%89%A0%202%20*%20b%5E2%20%3A%3D%0Aassume%20h%20%3A%20a%5E2%20%3D%202%20*%20b%5E2%2C%0Ahave%202%20%E2%88%A3%20a%5E2%2C%0A%20%20by%20simp%20%5Bh%5D%2C%0Ahave%202%20%E2%88%A3%20a%2C%0A%20%20from%20prime.dvd_of_dvd_pow%20prime_two%20this%2C%0Aexists.elim%20this%20%24%0Aassume%20(c%20%3A%20nat)%20(aeq%20%3A%20a%20%3D%202%20*%20c)%2C%0Ahave%202%20*%20(2%20*%20c%5E2)%20%3D%202%20*%20b%5E2%2C%0A%20%20by%20simp%20%5Beq.symm%20h%2C%20aeq%5D%3B%0A%20%20%20%20simp%20%5Bpow_succ'%2C%20mul_comm%2C%20mul_assoc%2C%20mul_left_comm%5D%2C%0Ahave%202%20*%20c%5E2%20%3D%20b%5E2%2C%0A%20%20from%20mul_left_cancel'%20dec_trivial%20this%2C%0Ahave%202%20%E2%88%A3%20b%5E2%2C%0A%20%20by%20simp%20%5Beq.symm%20this%5D%2C%0Ahave%202%20%E2%88%A3%20b%2C%0A%20%20from%20prime.dvd_of_dvd_pow%20prime_two%20this%2C%0Ahave%202%20%E2%88%A3%20gcd%20a%20b%2C%0A%20%20from%20dvd_gcd%20%E2%80%B92%20%E2%88%A3%20a%E2%80%BA%20%E2%80%B92%20%E2%88%A3%20b%E2%80%BA%2C%0Ahave%202%20%E2%88%A3%20(1%20%3A%20%E2%84%95)%2C%0A%20%20by%20simp%20*%20at%20*%2C%0Ashow%20false%2C%20from%20absurd%20%E2%80%B92%20%E2%88%A3%201%E2%80%BA%20dec_trivial\">https://leanprover-community.github.io/lean-web-editor/#code=import%20data.nat.prime%0Aopen%20nat%0A%0Atheorem%20sqrt_two_irrational%20%7Ba%20b%20%3A%20%E2%84%95%7D%20(co%20%3A%20gcd%20a%20b%20%3D%201)%20%3A%0A%20%20a%5E2%20%E2%89%A0%202%20*%20b%5E2%20%3A%3D%0Aassume%20h%20%3A%20a%5E2%20%3D%202%20*%20b%5E2%2C%0Ahave%202%20%E2%88%A3%20a%5E2%2C%0A%20%20by%20simp%20%5Bh%5D%2C%0Ahave%202%20%E2%88%A3%20a%2C%0A%20%20from%20prime.dvd_of_dvd_pow%20prime_two%20this%2C%0Aexists.elim%20this%20%24%0Aassume%20(c%20%3A%20nat)%20(aeq%20%3A%20a%20%3D%202%20*%20c)%2C%0Ahave%202%20*%20(2%20*%20c%5E2)%20%3D%202%20*%20b%5E2%2C%0A%20%20by%20simp%20%5Beq.symm%20h%2C%20aeq%5D%3B%0A%20%20%20%20simp%20%5Bpow_succ'%2C%20mul_comm%2C%20mul_assoc%2C%20mul_left_comm%5D%2C%0Ahave%202%20*%20c%5E2%20%3D%20b%5E2%2C%0A%20%20from%20mul_left_cancel'%20dec_trivial%20this%2C%0Ahave%202%20%E2%88%A3%20b%5E2%2C%0A%20%20by%20simp%20%5Beq.symm%20this%5D%2C%0Ahave%202%20%E2%88%A3%20b%2C%0A%20%20from%20prime.dvd_of_dvd_pow%20prime_two%20this%2C%0Ahave%202%20%E2%88%A3%20gcd%20a%20b%2C%0A%20%20from%20dvd_gcd%20%E2%80%B92%20%E2%88%A3%20a%E2%80%BA%20%E2%80%B92%20%E2%88%A3%20b%E2%80%BA%2C%0Ahave%202%20%E2%88%A3%20(1%20%3A%20%E2%84%95)%2C%0A%20%20by%20simp%20*%20at%20*%2C%0Ashow%20false%2C%20from%20absurd%20%E2%80%B92%20%E2%88%A3%201%E2%80%BA%20dec_trivial</a></p>\n<p>does not currently work (this is the second example here <a href=\"https://leanprover.github.io/logic_and_proof/introduction.html#interactive-theorem-proving\">https://leanprover.github.io/logic_and_proof/introduction.html#interactive-theorem-proving</a>), I really don't understand the error message from the lean-web-editor. Was mathlib updated with backwards incompatible changes on the web editor or something?  Can I change that? If not, can I find out which versions I need and set them up locally?</p>\n<p>So, I guess I'm looking for some general guidance. Where do I start on this Journey?</p>\n<p>Additionally, from what I read, while its clear that lean 4 is not backwards compatible with lean 3, based upon what I read here <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">https://leanprover.github.io/lean4/doc/lean3changes.html</a>, it seems that it should be relatively straightforward to translate anything written about lean 3 to lean 4?</p>",
        "id": 328719437,
        "sender_full_name": "Joel McCracken",
        "timestamp": 1676749972
    },
    {
        "content": "<p>Just to answer your question about the errors in the proof, here's something I got working with some renamings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sqrt_two_irrational</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">co</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">nat.prime.dvd_of_dvd_pow</span> <span class=\"n\">prime_two</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"n\">exists.elim</span> <span class=\"n\">this</span> <span class=\"bp\">$</span>\n<span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aeq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq.symm</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">aeq</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">mul_left_cancel₀</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq.symm</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">nat.prime.dvd_of_dvd_pow</span> <span class=\"n\">prime_two</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">dvd_gcd</span> <span class=\"o\">‹</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">›,</span>\n<span class=\"k\">have</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">absurd</span> <span class=\"o\">‹</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span><span class=\"o\">›</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 328720514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676750681
    },
    {
        "content": "<p>One problem is that there's now both <code>prime</code> and <code>nat.prime</code>, so I needed to fully qualify <code>nat.prime.dvd_of_dvd_pow</code>. The second is that <code>mul_left_cancel'</code> seems to have been renamed to <code>mul_left_cancel₀</code>.</p>",
        "id": 328720585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676750726
    },
    {
        "content": "<p>I'm not sure which version of Lean &amp; mathlib the textbook Logic and Proof is expecting, but in principle you can set up a project locally on your computer with exactly the right versions to follow along with the textbook.</p>",
        "id": 328720719,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676750821
    },
    {
        "content": "<p><a href=\"https://mathlib-changelog.org/\">Here's one resource</a> to keep with with all of mathlib's backwards incompatible changes, for example <a href=\"https://mathlib-changelog.org/theorem/mul_left_cancel\">https://mathlib-changelog.org/theorem/mul_left_cancel</a>'</p>",
        "id": 328720847,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676750896
    },
    {
        "content": "<p>If you haven't done it already, as a very first step you could do <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">#nng</a></p>",
        "id": 328720957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676750993
    },
    {
        "content": "<p>Ah, thank you!</p>",
        "id": 328721410,
        "sender_full_name": "Joel McCracken",
        "timestamp": 1676751305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> is on this server and they've been thinking about their book and Lean!</p>",
        "id": 328722640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676752007
    },
    {
        "content": "<p>Oh cool, well <span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> if you did that I would certainly enjoy it =) I've been considering putting my proofs up on github when I get them.</p>",
        "id": 328725243,
        "sender_full_name": "Joel McCracken",
        "timestamp": 1676753754
    },
    {
        "content": "<p>Joel, you  could be a guinea pig for a project I'm working on.  You can find it <a href=\"https://djvelleman.github.io/HTPIwL/\">here</a>.</p>",
        "id": 328726784,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676754852
    },
    {
        "content": "<p>Oh sweet, yeah I'll totally do it. Are you open to any contributions? I was hoping to also verify some of the earlier proofs, for example these were long enough that I started to feel uncertain that I had done them correctly: <a href=\"/user_uploads/3121/pQ4bLNt7ME1iDDbS2eRHDtgh/Screen-Shot-2023-02-18-at-4.36.54-PM.png\">Screen-Shot-2023-02-18-at-4.36.54-PM.png</a> (from section 1.4 page 43)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pQ4bLNt7ME1iDDbS2eRHDtgh/Screen-Shot-2023-02-18-at-4.36.54-PM.png\" title=\"Screen-Shot-2023-02-18-at-4.36.54-PM.png\"><img src=\"/user_uploads/3121/pQ4bLNt7ME1iDDbS2eRHDtgh/Screen-Shot-2023-02-18-at-4.36.54-PM.png\"></a></div>",
        "id": 328729011,
        "sender_full_name": "Joel McCracken",
        "timestamp": 1676756363
    },
    {
        "content": "<p>Ah, ok, so it seems that your recommendation is to do it by hand until section 3.2. OK, I can do that</p>",
        "id": 328729364,
        "sender_full_name": "Joel McCracken",
        "timestamp": 1676756588
    },
    {
        "content": "<p>Eventually you will be able to do proofs like that, but they're probably not the best ones to start with.</p>",
        "id": 328729953,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676757012
    },
    {
        "content": "<p>A couple of warnings:</p>\n<ol>\n<li>This is a work in progress.  There may be glitches, and things may change.</li>\n<li>My focus is on teaching math, not teaching Lean.  So there's lots of stuff about Lean that isn't covered, and the Lean proofs look pretty different from the proofs that most Lean users write.</li>\n</ol>\n<p>I'd really appreciate any feedback you can give me.</p>",
        "id": 328732423,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676758810
    },
    {
        "content": "<p>ok, will do! I really like your book, it has helped me get past some points I've been struggling with for a long time. I'll definitely be working though this lean adaptation of your book. Thanks!</p>",
        "id": 328733684,
        "sender_full_name": "Joel McCracken",
        "timestamp": 1676759648
    }
]