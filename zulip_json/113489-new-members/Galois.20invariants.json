[
    {
        "content": "<p>Hi, everyone! <br>\nI was trying to play with the Galois theory in mathlib3. I found that my thoughts are deeply based on set theory, as a result, I'm confused at the follow problem:<br>\nI was trying to formalize the following kind of theorems in Lean, namely 'Let K be a field, K^alg denotes its algebraic closure.  If x \\in K^alg is an elements satisfies some condition, then x falls in K'. However, the type of <code>x</code> is <code>x : algebraic_closure K</code>. So it does not make sense to state <code>x  : K</code>. I wonder what is the best way to state this theorem? I find that I can use <code>intermediate_field K {x} = ⊥</code>. Is there other ways to deal with it?</p>\n<p>More background: the final goal I was trying to do is the following theorem <br>\n'Let C_p be the completion of the algebraic closure of Q_p, the Galois action of Gal(Q_p^alg / Q_p) extends continuous to C_p. For any finite extension K/Q_p, the fixed subfield of Gal(Q_p^alg / K) in C_p is K itself.' <br>\nThe proof argues with an arbitrary fixed elements x \\in C_p and shows it falls in K. So my plan is to prove a lemma <code>∀ x : C_p, ... →  intermediate_field K {x} = ⊥ </code>, where <code>...</code> represents 'x fixed by Gal(Q_p^alg / K)'. My problem is how should the final theorem be stated and how to use  this to lemma to deduce the final theorem?</p>",
        "id": 366710461,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1686898477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> has formalised <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">C</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> plus its Galois action but the work hasn't hit mathlib yet. But we don't have the computation of the fixed field (which is delicate, it needs some of the theory of deeply ramified extensions as far as I know, although all of the pieces should be there to make this a tractable project).</p>\n<p>As for stating the theorem, I would use a type for a base p-adic field, another type for an algebraic closure, a third type for the completion, and then you get a map from intermediate subfields of the alg closure to intermediate subfields of the completion, and you would state the theorems as being properties of this map.</p>",
        "id": 366712436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686898953
    },
    {
        "content": "<p>I wouldn't say this is a problem of type theory. Even in set theory field extension are not inclusions. You should use the map from the \"small\" field to the \"big\" one.</p>",
        "id": 366712596,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686898995
    },
    {
        "content": "<p>Note that you may be tempted to say \"everything lives in the algebraic closure\" and then use subfields of it, but this is going to make you suffer: for example, even if <code>ℚ</code> is inside <code>ℂ</code>, there is no way <code>ℚ[X]/(x^2+1)</code> is a subfield of <code>ℂ</code> (of course there is a \"canonical\" injective morphism, but you don't want to write it down every time).</p>",
        "id": 366713471,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686899189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"611077\">@Jiang Jiedong</span> one mathlib-idiomatic way of making the statement would look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Padics.PadicNumbers</span> <span class=\"c1\">-- p-adic numbers</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span> <span class=\"c1\">-- algebraic closures</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Galois</span> <span class=\"c1\">-- Galois theory</span>\n\n<span class=\"c1\">-- let p be a prime</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)]</span>\n\n<span class=\"c1\">-- let K be a field, finite-dimensional over Q_p</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module.Finite</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Let Kbar be an algebraic closure of K</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Kbar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">Kbar</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">Kbar</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosure</span> <span class=\"n\">K</span> <span class=\"n\">Kbar</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">not_in_mathlib</span>\n<span class=\"c1\">-- Some sorried stuff until Maria Ines' work makes it into mathlib4:</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Cp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- completion of Kbar (the hard part is extending the norm</span>\n<span class=\"c1\">-- to get the metric to complete with)</span>\n\n<span class=\"c1\">-- Cp is a field</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">Cp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Cp is a Kbar-algebra and hence a K-algebra</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">Kbar</span> <span class=\"n\">Cp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Galois action extends canonically</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DistribMulAction</span> <span class=\"o\">(</span><span class=\"n\">Kbar</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">Kbar</span><span class=\"o\">)</span> <span class=\"n\">Cp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">not_in_mathlib</span>\n\n<span class=\"c1\">-- canonical injection, probably in mathlib already but I couldn't find it immediately</span>\n<span class=\"c1\">-- Filling in sorries should be a nice exercise, and perhaps some thought should be given</span>\n<span class=\"c1\">-- about the correct generality of this construction</span>\n<span class=\"kd\">def</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">Kbar</span> <span class=\"bp\">→</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">K</span> <span class=\"n\">Cp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">L</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">Kbar</span> <span class=\"n\">Cp</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">L</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">algebraMap_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IntermediateField</span> <span class=\"c1\">-- for `fixingSubgroup`</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Jiedong</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">Kbar</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Kbar</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">Kbar</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fixingSubgroup</span> <span class=\"n\">L</span>\n  <span class=\"c1\">-- Theorem: the subset of C_p fixed by H is no bigger than L</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Cp</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Proof: hard exercise</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 366726636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686902259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Galois.20invariants/near/366712596\">said</a>:</p>\n<blockquote>\n<p>I wouldn't say this is a problem of type theory. Even in set theory field extension are not inclusions. You should use the map from the \"small\" field to the \"big\" one.</p>\n</blockquote>\n<p>Thank you! You are right, I should not think every finite extension K of Q_p as a subset of C_p, instead I should choose a specific field map from K into C_p, and state the theorem as the Galois invariant is the image of K. (as long as I show that the completion of algebraic closure of K is isomorphic to C_p so that the Galois action extends to C_p)</p>",
        "id": 366745475,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1686906097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thank you so much for you help !!! Your code definitely clears my thoughts. I've already written something about how to extend the norm to Q_p bar. And another key ingredient is to formalize the so called Krasner's lemma and Ax-Sen's lemma, which is exactly the reason I ask this question.</p>",
        "id": 366747668,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1686906561
    },
    {
        "content": "<p>You should check with  María Inés, you are probably redoing her work (at least a part of her work).</p>",
        "id": 366748106,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686906664
    },
    {
        "content": "<p>Which isn't necessarily a problem of course. It's a great way to learn Lean. (-;</p>",
        "id": 366764759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686909981
    },
    {
        "content": "<p>My understanding is that Maria Ines didn't do Krasner yet but it's certainly accessible. I don't know how much we have about differents and discriminants of extensions of local fields though, that might be something which needs developing. I know we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>f</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">ef=n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> but I'm not sure we have much more.</p>",
        "id": 366784156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686913468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Galois.20invariants/near/366748106\">said</a>:</p>\n<blockquote>\n<p>You should check with  María Inés, you are probably redoing her work (at least a part of her work).</p>\n</blockquote>\n<p>Oh thank you for your advice. My original plan was to write about C_p in lean3 not so seriously (leaving many sorries) for now,  as an exercise to learn Lean. I want to write more seriously in Lean4 in the future and I will certainly discuss with María Inés about it in the future. I think it may requires more comprehensive development in  fundamental  theorems in number theory (e. g. theory of valuations under Galois extensions, ramification groups, ...) first before a comprehensive theory of C_p.</p>",
        "id": 366807252,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1686917989
    },
    {
        "content": "<p>Hi! My definition of C_p is <a href=\"https://github.com/mariainesdff/local_fields/blob/main/src/Cp_def.lean\">here</a>, and the Galois action is defined <a href=\"https://github.com/mariainesdff/local_fields/blob/main/src/galois_action.lean\">here</a>, but as Kevin pointed out, we still have not computed the fixed field. <br>\nThere are definitely goals related to C_p that are still missing but accessible (for example, that C_p is algebraically closed and that Q_p^alg is not complete). In any case, I would be happy to discuss at any point!</p>",
        "id": 366821308,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1686920310
    }
]