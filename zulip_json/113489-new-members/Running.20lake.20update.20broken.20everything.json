[
    {
        "content": "<p>Hi, I'm newer to Lean and CS in general. I'm a mathematician, so getting up and running with simple things like Bash and Git was a struggle. I have a project, which I used to present for a class, and I have been continuing to use it as I work on learning and developing some new graph theory.</p>\n<p>I wanted to work on a functional analysis project, so I needed to update my copy of Mathlib. I think that the correct way to do this is run <code>lake update</code> in the terminal. I don't know if I was supposed to do something with Git first. This stopped everything from working, and the problem is fixed when I revert back to a previous commit using <code>git log --oneline</code> to identify the previous commit I want to revert to, and <code>git revert ____</code> to do this. I tried running <code>lake update</code> again and I have the same issue. I've attached an image of my Lean Infoview when I try to open IntervalIntegral.lean. For others, like Lebesgue.lean, it simply says \"processing stopped\".</p>\n<p>If anyone can help me update Mathlib, that would be fantastic. : )<br>\n<a href=\"/user_uploads/3121/4RqPPkQLpl_64obfROWMro3Z/Screenshot-161.png\">Screenshot-161.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4RqPPkQLpl_64obfROWMro3Z/Screenshot-161.png\" title=\"Screenshot-161.png\"><img src=\"/user_uploads/3121/4RqPPkQLpl_64obfROWMro3Z/Screenshot-161.png\"></a></div>",
        "id": 368355943,
        "sender_full_name": "Alexander Byard",
        "timestamp": 1687379569
    },
    {
        "content": "<p>It seems likely that you updated mathlib but not version of lean4 that corresponds to it</p>",
        "id": 368357032,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687379923
    },
    {
        "content": "<p>Try making sure that the lean-toolchain file in your project matches the one in <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/lean-toolchain\">https://github.com/leanprover-community/mathlib4/blob/master/lean-toolchain</a> for the mathlib commit you're on</p>",
        "id": 368357177,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687379974
    },
    {
        "content": "<p>They are the same.</p>",
        "id": 368357849,
        "sender_full_name": "Alexander Byard",
        "timestamp": 1687380190
    },
    {
        "content": "<p>Could it be an issue with how I ran <code>lake update</code>?</p>\n<p><a href=\"/user_uploads/3121/PPI6vk4G1mhwoReox6hftcKv/Screenshot-162.png\">Screenshot-162.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PPI6vk4G1mhwoReox6hftcKv/Screenshot-162.png\" title=\"Screenshot-162.png\"><img src=\"/user_uploads/3121/PPI6vk4G1mhwoReox6hftcKv/Screenshot-162.png\"></a></div>",
        "id": 368358940,
        "sender_full_name": "Alexander Byard",
        "timestamp": 1687380573
    },
    {
        "content": "<p>This is the most recent time I ran <code>lake update</code>. The stuff above it is a previous commit</p>",
        "id": 368359113,
        "sender_full_name": "Alexander Byard",
        "timestamp": 1687380617
    },
    {
        "content": "<p>Did you run <code>lake exe cache get</code> after running <code>lake update</code> and copying the <code>lean-toolchain</code> file?</p>",
        "id": 368359304,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687380674
    },
    {
        "content": "<p>I did not run <code>lake exe cache get</code>. Should I do this? My <code>lean-toolchain</code> file is currently the same as the one sent by <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> .</p>",
        "id": 368359739,
        "sender_full_name": "Alexander Byard",
        "timestamp": 1687380819
    },
    {
        "content": "<blockquote>\n<p>Should I do this?</p>\n</blockquote>\n<p>Not without ensuring lean has stopped first</p>",
        "id": 368360764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687381163
    },
    {
        "content": "<p>(i.e. by closing vscode and running it from a regular command line)</p>",
        "id": 368360792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687381173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Is it also an issue that I ran <code>lake update</code> in vscode?</p>",
        "id": 368361099,
        "sender_full_name": "Alexander Byard",
        "timestamp": 1687381258
    },
    {
        "content": "<p>No, that part is fine</p>",
        "id": 368361153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687381276
    },
    {
        "content": "<p>Okay, let me try it.</p>",
        "id": 368361191,
        "sender_full_name": "Alexander Byard",
        "timestamp": 1687381288
    },
    {
        "content": "<p>I run <code>lake exe cache get</code> in a separate terminal after vscode has closed. It returns <code>error: no such file or directory (error code: 2)\n  file: .\\lakefile.lean</code></p>",
        "id": 368361547,
        "sender_full_name": "Alexander Byard",
        "timestamp": 1687381399
    },
    {
        "content": "<p>You need to be in the directory of your project</p>",
        "id": 368362203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687381607
    },
    {
        "content": "<p>I think I see why one might think that <code>lake update</code> would be the right thing to do. We have this:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4#updating-mathlib4\">https://github.com/leanprover-community/mathlib4#updating-mathlib4</a>,</p>\n<blockquote>\n<p><code>lake update; curl -L https://raw.githubusercontent.com/leanprover-community/mathlib4/master/lean-toolchain -o lean-toolchain; lake exe cache get</code></p>\n</blockquote>\n<p>which is really about updating \"mathlib4 as a dependency of my other non-mathlib4 project\", not \"update mathlib4 for its own sake\"<br>\nand also this:<br>\n<a href=\"https://github.com/leanprover/lake#adding-dependencies\">https://github.com/leanprover/lake#adding-dependencies</a></p>\n<blockquote>\n<p>To update <code>mathlib</code> after this, you will need to run <code>lake update</code> -- other commands do not update resolved dependencies.</p>\n</blockquote>\n<p>The thing that has always worked for me to update mathlib4 (for its own sake) is <code>git pull; lake exe cache get</code>. That is most like this section in our collective READMEs:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4#build-instructions\">https://github.com/leanprover-community/mathlib4#build-instructions</a></p>\n<p>Perhaps we need better clarity around what \"update\" means to whom.</p>",
        "id": 368404000,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1687403172
    },
    {
        "content": "<p>In some sense, no \"regular user\" of mathlib should ever be running <code>lake update</code> within mathlib. That is really only useful for regular contributors who are doing housekeeping chores (i.e. preparing a PR that bumps dependencies).</p>\n<p>I wonder if we can discourage this?</p>\n<p>I agree with Yakov's assessment about the documentation in aggregate being confusing. Nevertheless both times there is an instruction to <code>lake update</code> it is in the context of a downstream project that depends on mathlib. (And hence it is correct!) Perhaps in our own README it is slightly unobvious by the time you reach the bottom of the page that you are still in the <a href=\"https://github.com/leanprover-community/mathlib4#using-mathlib4-as-a-dependency\">Using mathlib as a dependency</a> section.</p>",
        "id": 368422750,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687411674
    },
    {
        "content": "<p><code>lake update</code> could check if you have write access to the (remote of the) repository you are running in :-)</p>",
        "id": 368422888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687411717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Running.20lake.20update.20broken.20everything/near/368422750\">said</a>:</p>\n<blockquote>\n<p>In some sense, no \"regular user\" of mathlib should ever be running <code>lake update</code> within mathlib. That is really only useful for regular contributors who are doing housekeeping chores (i.e. preparing a PR that bumps dependencies).</p>\n<p>I wonder if we can discourage this?</p>\n</blockquote>\n<p>You could have mathlib's lakefile use exact commits in its <code>require</code> statements. That way <code>lake update</code> will not do anything unless the file is edited. To update a library, a maintainer could then remove the exact commit (or change to a branch), run <code>lake update</code>, and then copy the new commit from the <code>lake-manifest</code> back to the lakefile to fix it to the new version.</p>",
        "id": 369089650,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687589034
    },
    {
        "content": "<p>Alternatively, Lake could get a new package configuration option (e.g., <code>forceUpdateOnly</code>) that would print an error on a bare <code>lake update</code> and require instead <code>lake update --force</code> (which most new users would not accidently type).</p>",
        "id": 369089881,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687589121
    },
    {
        "content": "<p>I like the second option!</p>\n<p>Perhaps I should try implementing that myself sometime, as a <code>lake</code> learning exercise.</p>",
        "id": 369095083,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687591036
    },
    {
        "content": "<p>Adding a flag that is, essentially, <code>--are-you-sure-youre-running-the-right-command</code> sounds like an unorthodox solution to me. If the underlying issue is that the readme is too confusing, the dependency part could be moved to a different file. Alternatively, as I believe has been mentioned before, Lake <code>update</code> could be renamed to <code>upgrade</code> to emphasize its code breaking nature. And ideally no command should be necessary at all to add a new dependency from the lakefile to the manifest.</p>",
        "id": 369115834,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687597195
    },
    {
        "content": "<p>How about mentioning \"manifest\" explicitly in commands that change it? Say, <code>lake update-manifest</code>. By the way, I agree with the point about new dependencies.</p>",
        "id": 369116604,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1687597371
    },
    {
        "content": "<p>Or be more Nix-like and call it <code>lake recreate-manifest</code></p>",
        "id": 369118713,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1687597868
    },
    {
        "content": "<p>I agree either <code>upgrade</code> or <code>update-manifest</code> are slightly better.</p>\n<p>I think this is a pretty serious issue, when you keep in mind all the \"new users\" (particularly students) who are going to break their Lean setups by typing something innocuous/appealing sounding.</p>",
        "id": 369127043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687599861
    }
]