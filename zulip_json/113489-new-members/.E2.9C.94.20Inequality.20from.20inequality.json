[
    {
        "content": "<p>Is there an existing theorem expressing the inference <code>a ≠ b</code> from <code>f a ≠ f b</code>?</p>\n<p>I have a proof here using classical reasoning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">congrArgDual</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span>\n  <span class=\"n\">byContradiction</span>\n    <span class=\"k\">fun</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"n\">dn</span> <span class=\"n\">h₁</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">f</span> <span class=\"n\">h₂</span>\n    <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">h₀</span> <span class=\"n\">h₄</span>\n</code></pre></div>",
        "id": 262830335,
        "sender_full_name": "Hungry Applicative",
        "timestamp": 1637956272
    },
    {
        "content": "<p>I don't think you need classical reasoning - maybe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">congrArgDual</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">f</span> <span class=\"n\">h₁</span>\n    <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">h₀</span> <span class=\"n\">h₄</span>\n</code></pre></div>",
        "id": 262830459,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1637956414
    },
    {
        "content": "<p>That's much better. Thanks! I am completely new to atp. Have you come across a similar theorem before? It seems generally useful.</p>",
        "id": 262831130,
        "sender_full_name": "Hungry Applicative",
        "timestamp": 1637956976
    },
    {
        "content": "<p>In mathlib it's called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_of_apply_ne\">docs#ne_of_apply_ne</a></p>",
        "id": 262831297,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637957147
    },
    {
        "content": "<p>And the reverse direction is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.ne\">docs#function.injective.ne</a></p>",
        "id": 262869128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638013635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459806\">Hungry Applicative</span> has marked this topic as resolved.</p>",
        "id": 262922738,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638097723
    },
    {
        "content": "<p>Hi,<br>\nHow can I fix this error?<br>\nunknown identifier 'succ'</p>\n<p>lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=<br>\nbegin [nat_num_game]<br>\n  rw h,<br>\n  refl,<br>\nend</p>",
        "id": 267361607,
        "sender_full_name": "Parivash",
        "timestamp": 1641739957
    },
    {
        "content": "<p><code>open mynat</code> on a separate line before <code>lemma example3</code></p>",
        "id": 267361673,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641740066
    },
    {
        "content": "<p>Thanks,<br>\nHow can I add file to lean path?</p>",
        "id": 267364414,
        "sender_full_name": "Parivash",
        "timestamp": 1641744194
    },
    {
        "content": "<p>can you open a new thread instead of asking this in an inappropritetely-named one?</p>",
        "id": 267366212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641746942
    }
]