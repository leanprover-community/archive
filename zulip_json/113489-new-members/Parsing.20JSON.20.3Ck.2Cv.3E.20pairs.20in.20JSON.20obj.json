[
    {
        "content": "<p>I'm trying to parse JSON to an AST. I don't want to auto generate the parser with <code>FromJson</code> because I expect I'll need to tweak the parser and to give specific error messages to make sure it matches another implementation.  Currently I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json.Parser</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Primitive</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Primitive</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PrimitiveLit</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Primitive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">If</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span><span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span><span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GetAttr</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Attr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">HasAttr</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Attr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Record</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span> <span class=\"n\">Record</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wrong</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_json_expr_str</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{ </span><span class=\"se\">\\\"</span><span class=\"s2\">And</span><span class=\"se\">\\\"</span><span class=\"s2\"> : { </span><span class=\"se\">\\\"</span><span class=\"s2\">left</span><span class=\"se\">\\\"</span><span class=\"s2\">: {</span><span class=\"se\">\\\"</span><span class=\"s2\">Lit</span><span class=\"se\">\\\"</span><span class=\"s2\">: {</span><span class=\"se\">\\\"</span><span class=\"s2\">Bool</span><span class=\"se\">\\\"</span><span class=\"s2\">: true}}, {</span><span class=\"se\">\\\"</span><span class=\"s2\">right</span><span class=\"se\">\\\"</span><span class=\"s2\">: {</span><span class=\"se\">\\\"</span><span class=\"s2\">Lit</span><span class=\"se\">\\\"</span><span class=\"s2\"> : {</span><span class=\"se\">\\\"</span><span class=\"s2\">Bool</span><span class=\"se\">\\\"</span><span class=\"s2\">: true} } } } }\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_json_expr</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Json.parse</span> <span class=\"n\">my_json_expr_str</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">json_to_expr</span> <span class=\"o\">(</span><span class=\"n\">json</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">json</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.null</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.Wrong</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.bool</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.PrimitiveLit</span> <span class=\"o\">(</span><span class=\"n\">Primitive.Bool</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.num</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n.exponent</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.PrimitiveLit</span> <span class=\"o\">(</span><span class=\"n\">Primitive.Int</span> <span class=\"n\">n.mantissa</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.Wrong</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.str</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.PrimitiveLit</span> <span class=\"o\">(</span><span class=\"n\">Primitive.String</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.arr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.Wrong</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.obj</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span> <span class=\"c1\">-- Can't figure out how to process this case</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Lean.RBNode.leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.Wrong</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.Wrong</span>\n</code></pre></div>\n<p>I'd like to do something like iterate through all <code>&lt;key, value&gt;</code> pairs in the <code>Json.obj</code> to make sure the keys are expected and then assuming they are, call different functions processing the value depending on the key. If I knew what all the keys were I see I could call <code>getObjVal</code>for each key, but I can't seem to find a way to iterate through the keys.</p>",
        "id": 346028455,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1680286990
    },
    {
        "content": "<p>I have a work around, but it looks like it will lead to pretty awful code:</p>\n<p>Fix my JSON and define some helpers for unwrapping <code>Except</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_json_expr_str</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{ </span><span class=\"se\">\\\"</span><span class=\"s2\">And</span><span class=\"se\">\\\"</span><span class=\"s2\"> : { </span><span class=\"se\">\\\"</span><span class=\"s2\">left</span><span class=\"se\">\\\"</span><span class=\"s2\">: {</span><span class=\"se\">\\\"</span><span class=\"s2\">Lit</span><span class=\"se\">\\\"</span><span class=\"s2\">: {</span><span class=\"se\">\\\"</span><span class=\"s2\">Bool</span><span class=\"se\">\\\"</span><span class=\"s2\">: true}}, </span><span class=\"se\">\\\"</span><span class=\"s2\">right</span><span class=\"se\">\\\"</span><span class=\"s2\">: {</span><span class=\"se\">\\\"</span><span class=\"s2\">Lit</span><span class=\"se\">\\\"</span><span class=\"s2\"> : {</span><span class=\"se\">\\\"</span><span class=\"s2\">Bool</span><span class=\"se\">\\\"</span><span class=\"s2\">: true} } } } \"</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_json_expr</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Json.parse</span> <span class=\"n\">my_json_expr_str</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ErrorStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">Lean.ToJson</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unwrap_except</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">e.isOk</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option.get</span><span class=\"bp\">!</span> <span class=\"n\">e.toOption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Json.bool</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Define new funcs to check that all and any keys in the map match one of my key words:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_and_helper</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"And\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_and</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">Lean.RBNode</span> <span class=\"n\">String</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">contains_and</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.RBNode.any</span> <span class=\"n\">is_and_helper</span> <span class=\"n\">node</span>\n  <span class=\"k\">let</span> <span class=\"n\">contains_nothing_but_and</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.RBNode.all</span> <span class=\"n\">is_and_helper</span> <span class=\"n\">node</span>\n  <span class=\"n\">contains_and</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">contains_nothing_but_and</span>\n</code></pre></div>\n<p>Use a massive match statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">json_to_expr</span> <span class=\"o\">(</span><span class=\"n\">json</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">json</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.null</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.Wrong</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.bool</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.PrimitiveLit</span> <span class=\"o\">(</span><span class=\"n\">Primitive.Bool</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.num</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n.exponent</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.PrimitiveLit</span> <span class=\"o\">(</span><span class=\"n\">Primitive.Int</span> <span class=\"n\">n.mantissa</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.Wrong</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.str</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.PrimitiveLit</span> <span class=\"o\">(</span><span class=\"n\">Primitive.String</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.arr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.Wrong</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lean.Json.obj</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">is_and</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:=</span> <span class=\"n\">unwrap_except</span> <span class=\"o\">((</span><span class=\"n\">unwrap_except</span> <span class=\"o\">(</span><span class=\"n\">json.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"And\"</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"left\"</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"n\">unwrap_except</span> <span class=\"o\">((</span><span class=\"n\">unwrap_except</span> <span class=\"o\">(</span><span class=\"n\">json.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"And\"</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"right\"</span><span class=\"o\">)</span>\n      <span class=\"n\">Expr.And</span> <span class=\"o\">(</span><span class=\"n\">json_to_expr</span> <span class=\"n\">lhs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">json_to_expr</span> <span class=\"n\">rhs</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.Wrong</span> <span class=\"c1\">-- Continue for every keyword</span>\n</code></pre></div>\n<p>Any pointers on how I can do this more cleanly?</p>",
        "id": 346056579,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1680296648
    },
    {
        "content": "<p>I doubt <code>unwrap_expect</code> is a sensible approach here</p>",
        "id": 346057177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680296887
    },
    {
        "content": "<p>Do you really want invalid json to be treated as bool literals for false?</p>",
        "id": 346057262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680296916
    },
    {
        "content": "<p>You would do much better to propagate the exception, and declare <code>json_to_expr (json : Lean.Json) : Except String Expr</code></p>",
        "id": 346057336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680296952
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:=</span> <span class=\"n\">unwrap_except</span> <span class=\"o\">((</span><span class=\"n\">unwrap_except</span> <span class=\"o\">(</span><span class=\"n\">json.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"And\"</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"left\"</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"n\">unwrap_except</span> <span class=\"o\">((</span><span class=\"n\">unwrap_except</span> <span class=\"o\">(</span><span class=\"n\">json.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"And\"</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"right\"</span><span class=\"o\">)</span>\n      <span class=\"n\">Expr.And</span> <span class=\"o\">(</span><span class=\"n\">json_to_expr</span> <span class=\"n\">lhs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">json_to_expr</span> <span class=\"n\">rhs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>would become something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"n\">json.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"And\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"left\"</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"n\">json.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"And\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"right\"</span><span class=\"o\">)</span>\n      <span class=\"n\">return</span> <span class=\"n\">Expr.And</span> <span class=\"o\">(</span><span class=\"n\">json_to_expr</span> <span class=\"n\">lhs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">json_to_expr</span> <span class=\"n\">rhs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 346057495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680297013
    },
    {
        "content": "<p>(assuming <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Json.getObjVal?#doc\">docs4#Lean.Json.getObjVal?</a> is the type I think it is)</p>",
        "id": 346057530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680297039
    },
    {
        "content": "<p>Thanks, I'll clean that up! Is there a better solution to the <code>contains_and &amp;&amp; contains_nothing_but_and</code> pattern? Seems like this will get very verbose for more than a few key words</p>",
        "id": 346057656,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1680297092
    },
    {
        "content": "<p>Hmm,  I'm getting <code>invalid use of </code>(&lt;- ...)<code>, must be nested inside a 'do' expression</code></p>",
        "id": 346058257,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1680297329
    },
    {
        "content": "<p>You need a <code>do</code> after the <code>=&gt;</code></p>",
        "id": 346060524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680298407
    },
    {
        "content": "<p>You probably need a <code>pure</code> or <code>return</code> before <code>Expr.and</code> too</p>",
        "id": 346060551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680298425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"604246\">Andrew Wells</span> <a href=\"#narrow/stream/113489-new-members/topic/Parsing.20JSON.20.3Ck.2Cv.3E.20pairs.20in.20JSON.20obj/near/346057656\">said</a>:</p>\n<blockquote>\n<p>Thanks, I'll clean that up! Is there a better solution to the <code>contains_and &amp;&amp; contains_nothing_but_and</code> pattern? Seems like this will get very verbose for more than a few key words</p>\n</blockquote>\n<p>One answer would be to choose a more natural json representation, such as <code>{\"_kind\": \"and\", \"left\": ..., \"right\":... }</code></p>",
        "id": 346060701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680298492
    }
]