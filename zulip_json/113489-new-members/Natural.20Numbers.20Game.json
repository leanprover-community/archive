[
    {
        "content": "<p>Two questions:</p>\n<p>I've defined the following helper because it turned out to be necessary. My first question will end up being \"why was this necessary?\".</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_comm&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Then I'm trying to prove:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- done the case a=0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm&#39;</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"n\">h_1</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<ol>\n<li>Why did I have to define <code>add_comm'</code> to get the <code>rw (add_comm' b a) at h_1</code> to stick? I couldn't simply rewrite by <code>add_comm b a</code>.</li>\n<li>How can I make the recursive call to <code>eq_zero_of_add_right_eq_self h1</code>? I'm getting \"unknown identifier\" at the moment.</li>\n</ol>",
        "id": 190592377,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584184177
    },
    {
        "content": "<p>I don't think playing the natural number game off-line is so well supported. Your first issue is probably a conflict between mathlib's add_comm and the one Kevin crafted for the game. The second issue is simply not what proofs by induction look like in Lean. This should be all explained if you play the game online;</p>",
        "id": 190592716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584184845
    },
    {
        "content": "<p>Can you post code which compiles? i.e. let's assume I have got a local copy of the game. Can you give me something I can cut and paste, with the imports and opens you're using? You shouldn't need to define add_comm' and if I can't easily reproduce your errors it's hard to help (I've just spent a few minutes trying and I've failed)</p>",
        "id": 190593377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584185733
    },
    {
        "content": "<p>The code which demonstrates \"I have to use <code>add_comm'</code>\" is as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"kn\">definition</span> <span class=\"c1\">-- Imports the natural numbers.</span>\n<span class=\"kn\">import</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"c1\">-- definition of addition</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"mi\">0</span> <span class=\"n\">n_n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">a</span> <span class=\"n\">b_n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b_n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">b_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">succ_add</span> <span class=\"n\">a_n</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">a_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_succ</span> <span class=\"n\">b</span> <span class=\"n\">a_n</span><span class=\"o\">),</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_comm&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- this is used for antisymmetry of ≤</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm&#39;</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190593486,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584185989
    },
    {
        "content": "<p>The natural number game tries very hard to stop notation leaking through, this looks like your problem. The natural number game was written precisely because Lean's <code>induction</code> tactic was very poor with regards to leaking notation. You are seeing precisely the problems which I saw my users see when they were trying to write the game themselves.  <code>injection f</code> is not a natural-number-game-sanctioned tactic and it looks like you have managed to create a hypothesis h_1 which mentions <code>add a b</code>. You should <code>change &lt;write what h_1 should actually say, i.e. change add to +&gt; at h_1</code>. Notation leakage is a big problem if you try to do things yourself, and I don't explain this sort of thing at all in NNG.</p>",
        "id": 190593487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584185991
    },
    {
        "content": "<p>OK, thanks very much</p>",
        "id": 190593531,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186012
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- leakage</span>\n  <span class=\"n\">change</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span> <span class=\"c1\">-- fixed</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190593587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186051
    },
    {
        "content": "<p>See how much easier it is if you post fully working code?</p>",
        "id": 190593589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186061
    },
    {
        "content": "<p>I would have been able to solve it in 1 minute not 10 ;-)</p>",
        "id": 190593601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186073
    },
    {
        "content": "<p>The underlying issue going on here is that there is something called definitional equality, which means \"two things are equal because they have the same definition\", and there is something called syntactic equality, which means \"two things are equal if they are literally exactly the same string of symbols\".</p>",
        "id": 190593654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/190593601\" title=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/190593601\">said</a>:</p>\n<blockquote>\n<p>I would have been able to solve it in 1 minute not 10 ;-)</p>\n</blockquote>\n<p>Sorry, yes - this is true</p>",
        "id": 190593660,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186198
    },
    {
        "content": "<p><code>rw</code> only works with syntactic equality. <code>add a b</code> is definitionally equal to <code>a + b</code> but not syntactically equal to it.</p>",
        "id": 190593661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186200
    },
    {
        "content": "<p>Ah, OK - I was misled by Agda's <code>rewrite</code>, which doesn't care</p>",
        "id": 190593665,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186226
    },
    {
        "content": "<p>The <code>change</code> tactic can be used to change anything to something definitionally equal. It works on hypotheses and goals.</p>",
        "id": 190593668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186238
    },
    {
        "content": "<p>(both my problems in this thread appear to be that Agda has given me in-built assumptions about how Lean works)</p>",
        "id": 190593727,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186337
    },
    {
        "content": "<p>Oh that's interesting about Agda. The whole <code>[nat_num_game]</code> stuff is my attempt to stop notation being leaked like this, but as you can see it's a pretty difficult task. Because basically I'm trying to teach mathematicians to rewrite, leakage is a killer. Lean's inbuilt <code>induction</code> tactic always returns the exact constructors used to define the type, and when <code>mynat</code> is defined, we don't have access to notation.</p>",
        "id": 190593730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186346
    },
    {
        "content": "<p>Hence <code>induction</code> by default will give <code>mynat.zero</code> and <code>mynat.succ</code>, and already <code>mynat.zero</code> is enough to stop <code>zero_add</code> working, because <code>0</code> is notation, but it's notation for <code>has_zero.zero</code>, which is defeq to <code>mynat.zero</code>. <code>rw</code> can see through notation, but it's the <code>mynat.zero</code> not being <code>has_zero.zero</code> which causes no end of confusion to maths undergrads.</p>",
        "id": 190593835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186423
    },
    {
        "content": "<p>The <code>[nat_num_game]</code> monad modifies certain core tactics by basically doing all of those <code>change</code>s to get things back to the canonical notation needed for the rws to work and look good, but it's not a \"whatever the user does, fix stuff up\" thing, it's literally just explicitly modifying the behaviour of certain core tactics like <code>induction</code> and <code>cases</code>.</p>",
        "id": 190593888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186522
    },
    {
        "content": "<p>Maybe I should write up some notes for experts (sorry for not realising earlier that you had a lot of background knowledge, there are so many people around nowadays asking questions about the game and I forget who knows what).</p>",
        "id": 190593900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186594
    },
    {
        "content": "<p>I broke several of the cardinal rules about how to ask for help, it's hardly your fault :P</p>",
        "id": 190593943,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186634
    },
    {
        "content": "<p>Thanks very much</p>",
        "id": 190593950,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584186651
    },
    {
        "content": "<p>I think one thing that's interesting about the community here was that I am a mathematician and I had the idea about the game when trying to get undergrads to just write Lean files to prove stuff like this about a home-rolled nat, and then when I realised there was this notational leakage issue I asked for help and the community stepped in fixed it by showing me how to make my own tactic monad, and then when I realised that mathematicians weren't going to be downloading lean I asked for help and the community stepped in again with all this web framework stuff, there are all these people in the background without whom it would never have got off the ground. This is why this chatroom is such a cool place to be.</p>",
        "id": 190594111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584186877
    },
    {
        "content": "<p>The online NNG is a great learning tool, but there are a number of things that work in a different way than in a local Lean installation. Even <code>rw</code> for example; it does not close a goal in NNG, but otherwise it does so. It might be a good idea to collect such changes in a \"disclaimer\" list for this and other such games that are bound to spring up, although with Lean 4 in the works this may not be the best time.</p>",
        "id": 190606866,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584208726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259186\">@Daniel Keys</span></p>\n<p>There was this thread not too long ago when I was trying to do the same thing and found quite a few differences between NNG and my local Lean installation.</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/188937541\" title=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/188937541\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/zero.20versus.200/near/188937541</a></p>",
        "id": 190633206,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584254079
    },
    {
        "content": "<p>Also <a href=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189001740\" title=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189001740\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189001740</a> later in the thread.</p>\n<p>The list of changes is <a href=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189002663\" title=\"#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189002663\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/zero.20versus.200/near/189002663</a></p>\n<p>Basically just Kevin's answers to my questions :)</p>",
        "id": 190633263,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584254174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span>  Sure, these are good in their own right. What I meant, though, was that the online game pages could themselves host an additional summary page, more or less formal, of changes made to the usual tactics. Given the work that the game designer logs in anyway, it is a little unfair to ask them for any extra bit. It would save us (the players) from some later surprises though, although figuring stuff out is eventually part of the bigger game.</p>",
        "id": 190647644,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584279770
    },
    {
        "content": "<p>The game designer is going to make it to the end of term (one week away) and then hopefully sit down and deal with the many issues which have arisen with the natural number game since Christmas, so any suggestions about how to improve it are welcome :-)</p>",
        "id": 190647699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584279848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Many will probably agree that a cool way this designer could use some of their time would be having the real number gem (sorry, I literally had a typing mistake...I meant game) up and running. Sure enough they know how to take the good decisions by themselves though!-:)</p>",
        "id": 190648144,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584280735
    },
    {
        "content": "<p>real number game, group theory game, integer game, rational number game, logic game. They're all on my todo list :-)</p>",
        "id": 190648155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584280771
    },
    {
        "content": "<p>I, for one, am hoping to write the representation theory game, and then do it :P</p>",
        "id": 190648425,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584281281
    },
    {
        "content": "<p>mul_left_cancel is the first proof I'm kinda getting stuck on. Gonna keep trying though.</p>",
        "id": 193539518,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586496743
    },
    {
        "content": "<p>It seems to be the one everyone gets stuck on.</p>",
        "id": 193539676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586497004
    },
    {
        "content": "<p>It's hard to know if I'm on the right track or not</p>",
        "id": 193540237,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586497938
    },
    {
        "content": "<p>I don't know if it helps, but most people say that once they are on the right track they are done immediately...</p>",
        "id": 193540246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586497979
    },
    {
        "content": "<p>Here's what goals I end up with:</p>\n<div class=\"codehilite\"><pre><span></span>case mynat.succ\na c b_n : mynat,\nb_ih : a ≠ 0 → a * b_n = a * c → b_n = c\n⊢ a ≠ 0 → a * succ b_n = a * c → succ b_n = c\n</pre></div>",
        "id": 193540428,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586498272
    },
    {
        "content": "<p>And I'm not sure if there's somehow a straightforward way to go from b_ih to the goal</p>",
        "id": 193540479,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586498326
    },
    {
        "content": "<p>Nope, there isn't, at least with your current proof state. Consider the hint given at that level to try <code>revert b</code> before induction <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 193540771,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586498759
    },
    {
        "content": "<p>Oh, to get the forall?</p>",
        "id": 193540830,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586498812
    },
    {
        "content": "<p>I should have taken that advice more literally</p>",
        "id": 193540863,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586498852
    },
    {
        "content": "<p>What's the general strategy if I'm given a goal that I know is false?</p>",
        "id": 193541162,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586499286
    },
    {
        "content": "<p>backtrack</p>",
        "id": 193541263,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586499438
    },
    {
        "content": "<p>Unless your hypothesis are contradictory</p>",
        "id": 193541868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586500422
    },
    {
        "content": "<p>then your goal isn't false, is it</p>",
        "id": 193541956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586500555
    },
    {
        "content": "<p>Depends how literally you interpret the statement</p>",
        "id": 193542031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586500629
    },
    {
        "content": "<p>Hi, I'm having trouble in the natural number game, to be precise advanced multiplication world.<br>\nFor example I proved the first level like this:</p>\n<p>theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=</p>\n<p>cases b with n,<br>\nintro h,<br>\ncc,<br>\nintros ha hn,<br>\ncases a with a,<br>\ncc,<br>\napply succ_ne_zero _,</p>\n<p>So I \"understand\" most of my proof (and by that I mean I expected cc to be able to close the goals when I used it, even though I can't inspect what exactly it did).<br>\nBut I'm puzzled about the last line - I didn't expect the proof to be complete after this (for lean).<br>\nCould someone explain why?</p>",
        "id": 193558086,
        "sender_full_name": "undef",
        "timestamp": 1586516155
    },
    {
        "content": "<p>To understand what happened here you need to know something about definitional equality, which is not something I emphasize in NNG</p>",
        "id": 193558255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586516313
    },
    {
        "content": "<p>Is there a way to inspect the state of lean with more granularity?</p>",
        "id": 193558362,
        "sender_full_name": "undef",
        "timestamp": 1586516403
    },
    {
        "content": "<p>I expected that I would have to tell lean to use <code>ha</code> and <code>hn</code> to finish the proof.</p>",
        "id": 193558512,
        "sender_full_name": "undef",
        "timestamp": 1586516517
    },
    {
        "content": "<p>Sorry, real life intervened</p>",
        "id": 193560144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586518297
    },
    {
        "content": "<p>When you tried to apply succ_ne_zero Lean tried to convince itself that your goal was of the form succ X ne 0 by definition</p>",
        "id": 193560227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586518365
    },
    {
        "content": "<p>And to see through this you have to know what is true by definition and what is true because of a theorem</p>",
        "id": 193560246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586518395
    },
    {
        "content": "<p>For example add_succ is true by definition and succ_add is not</p>",
        "id": 193560277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586518427
    },
    {
        "content": "<p>Thank you, I will investigate that!</p>",
        "id": 193560507,
        "sender_full_name": "undef",
        "timestamp": 1586518684
    },
    {
        "content": "<p><code>ha</code> and <code>hn</code> are equivalent to true, they are not very useful hypotheses - it holds vacuously that <code>succ n \\neq 0</code> - your conclusion in your current goals is similar (1 + k) * (1 + n) cannot possibly be 0 for <code>k n \\in mathbb{N}</code>, no matter what the context contains; what Kevin alluded to with definitional equality is something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">ha</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>       <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>     <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">succ</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"n\">apply</span> <span class=\"n\">succ_ne_zero</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>Note that <code>change X with Y</code> only works when <code>X</code> is defeq with <code>Y</code> - so I just make some explicit rewrites, rather than leave Lean compute these from definitions.</p>",
        "id": 193560878,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1586519085
    },
    {
        "content": "<p>Maybe I should add that the last conclusion before <code>apply succ_ne_zero _</code> is now <code>succ ((a + 1) * n + a)</code>, which fits the lemma \"more obviously\".</p>",
        "id": 193560987,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1586519213
    },
    {
        "content": "<p>I didn't know the change command, but I like it as it is much more explicit!<br>\nThank you very much.</p>",
        "id": 193561805,
        "sender_full_name": "undef",
        "timestamp": 1586520028
    },
    {
        "content": "<p>I don't think that mathematicians are interested in the difference between definitional equality and \"normal equality\", whatever that means, but what is going on here is that <code>a + 1</code> is <em>by definition</em> <code>a + succ 0</code> which is <em>by definition</em> <code>succ (a + 0)</code> which is <em>by definition</em> <code>succ a</code>. It is not a coincidence that you have to prove <code>zero_add</code> in NNG and you don't have to prove <code>add_zero</code> -- in fact <code>add_zero</code> can be thought of as an axiom, defined when addition is defined. But <code>zero_add</code> needs to be proved by induction. This way of thinking about <code>+</code> is extremely asymmetric and very counter-intuitive to a mathematician's model of addition, so I don't stress this at all. The <code>change</code> tactic changes a goal to a <em>definitionally</em> equal goal so it is in some sense a very  unmathematical tactic -- it will change <code>a + 0</code> to <code>a</code> but it won't change <code>0 + a</code> to <code>a</code>.</p>",
        "id": 193562220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586520386
    },
    {
        "content": "<p>There is still some mathematical content in saying that a + 0 = a by definition while 0 + a = a is a theorem (if you define addition by induction on the second argument).</p>",
        "id": 193562276,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520475
    },
    {
        "content": "<p>It's so basic that your mind blurs the distinction, but this game is about setting up the foundations of natural numbers, so you can't say this is unmathematical.</p>",
        "id": 193562332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520510
    },
    {
        "content": "<p>To Gauss, the naturals were a commutative semiring and this did not need to be questioned.</p>",
        "id": 193562375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586520560
    },
    {
        "content": "<p>This distinction becomes unmathematical once the foundations are done, because you don't want to care about the foundational details after they have been taken care of.</p>",
        "id": 193562382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520571
    },
    {
        "content": "<p>But NNG is all about foundations.</p>",
        "id": 193562407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520597
    },
    {
        "content": "<p>That's why I initially thought people would not like it. But clearly I was wrong.</p>",
        "id": 193562471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586520619
    },
    {
        "content": "<p>I was in some sense surprised too, but this is what bubbled to the top when I started showing undergraduates this stuff.</p>",
        "id": 193562507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586520675
    },
    {
        "content": "<p>I somehow got the web version of Lean stuck without using <code>repeat</code> now, on le_succ_of_le. I just copy-pasted the code from the end and changed the ??? to <code>(succ c)</code></p>",
        "id": 193582056,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586532776
    },
    {
        "content": "<p>why does <code>a ≤ b ∧ ¬b ≤ a</code> accept a hypothesis of <code>a &lt; b</code>?</p>",
        "id": 193696148,
        "sender_full_name": "Nam",
        "timestamp": 1586670390
    },
    {
        "content": "<p>those two are defeq</p>",
        "id": 193696174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670435
    },
    {
        "content": "<p>the connective is “and”.</p>",
        "id": 193696175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586670436
    },
    {
        "content": "<p>oh, they are defeq. i see.</p>",
        "id": 193696178,
        "sender_full_name": "Nam",
        "timestamp": 1586670458
    },
    {
        "content": "<p>well, they don't have to be defeq but I would guess that they are for nat</p>",
        "id": 193696179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670462
    },
    {
        "content": "<p>I thought a &lt;= b is defeq with succ a &lt; b</p>",
        "id": 193696219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586670491
    },
    {
        "content": "<p>actually they aren't for nat</p>",
        "id": 193696220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670498
    },
    {
        "content": "<p>but maybe they are for mynat or whatever NNG uses?</p>",
        "id": 193696222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586670509
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/lt_not_used.lean#L5\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/lt_not_used.lean#L5\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/lt_not_used.lean#L5</a><br>\nthe file is called \"not used\" though.</p>",
        "id": 193696277,
        "sender_full_name": "Nam",
        "timestamp": 1586670659
    },
    {
        "content": "<p>They're defeq in nng</p>",
        "id": 193696674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586671340
    },
    {
        "content": "<p>Hello there,</p>\n<p>I was making my way through level 6 of inequality when I stumbled on something that has me a bit confused. I was able to finish the level, but the following code that I used to do so bothers me.</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">cases</span> <span class=\"n\">hab</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">uhab</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hba</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uhab</span> <span class=\"n\">at</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span> <span class=\"n\">at</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span> <span class=\"n\">at</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">uhba</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"c1\">--why does this work???</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">uhab</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uhab</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>I apologize in advance for my uninformative variable names. Why is it that <code>have h := eq_zero_of_add_right_eq_self </code> expects an expression of the form (a b : mynat), but <code>have h2 := add_right_eq_zero</code> expects a proposition? More specifically, why can't I write <code>have h := eq_zero_of_add_right_eq_self uhba</code> without lean whining like I did with <code>have h2 := add_right_eq_zero h1</code>?</p>",
        "id": 195112491,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672230
    },
    {
        "content": "<p>What is the statement of the theorem you're proving?</p>",
        "id": 195112662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672303
    },
    {
        "content": "<p><code>theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=</code></p>",
        "id": 195112734,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672348
    },
    {
        "content": "<p>If my understanding of what I learned in proposition world is correct, lean treats implications like <code>eq_zero_of_add_right_eq_self</code> as functions from proofs to proofs, so why can't I write <code>have h := eq_zero_of_add_right_eq_self uhba</code> and obtain <code>h := c + d = 0</code> as a result?</p>",
        "id": 195113139,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672558
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_of_add_right_eq_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 195113290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672619
    },
    {
        "content": "<p>so</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 195113367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672665
    },
    {
        "content": "<p>Aah! But</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">add_right_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 195113442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672718
    },
    {
        "content": "<p>exactly!</p>",
        "id": 195113492,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672730
    },
    {
        "content": "<p>The brackets are different. Does this answer your question? I guess the difference between the () and {} brackets aren't explained in the game.</p>",
        "id": 195113515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672744
    },
    {
        "content": "<p>Ah I see! I don't recall the difference ever being explained in game, and I've completed everything except what's left of inequality world and power world</p>",
        "id": 195113603,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672810
    },
    {
        "content": "<p>It's because the idiot who designed this stupid game decided to make the numeral inputs explicit in the definition of <code>eq_zero_of_add_right_eq_self</code></p>",
        "id": 195113615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672818
    },
    {
        "content": "<p>what is the difference between {} and () then?</p>",
        "id": 195113723,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587672876
    },
    {
        "content": "<p>With () brackets, Lean expects you to tell it the input. With {} brackets Lean decides it will guess from the context.</p>",
        "id": 195113780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672910
    },
    {
        "content": "<p>It seems to me that in my model solutions, I never use <code>eq_zero_of_add_right_eq_self</code> at all, so I could just change the brackets and it wouldn't break anything.</p>",
        "id": 195113949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673003
    },
    {
        "content": "<p>Ah thanks, this clarifies a lot of confusion I've had throughout the game so far. I couldn't figure out why different theorems were so inconsistent in what they expected as input.</p>",
        "id": 195113968,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587673017
    },
    {
        "content": "<p>I tried to make it so that the inputs were always \"the things which the user would guess\" because I wanted to avoid having to explain the different kinds of brackets.</p>",
        "id": 195114026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673054
    },
    {
        "content": "<p>I was going to take a look at the natural number game tomorrow, there are some other issues which people pointed out recently. Probably tomorrow evening there will be a new version where this issue works better.</p>",
        "id": 195114230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673166
    },
    {
        "content": "<p>Thanks for the comment :-)</p>",
        "id": 195114328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673207
    },
    {
        "content": "<p>Thanks! Also thanks in general for creating this game. I've learned more about lean in the two days I've been playing it than in the two weeks I spent trying to decipher the resources on the github. You've created something really neat</p>",
        "id": 195114482,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587673321
    },
    {
        "content": "<p>We're working on a sequel: <a href=\"https://github.com/ImperialCollegeLondon/real-number-game\" title=\"https://github.com/ImperialCollegeLondon/real-number-game\">https://github.com/ImperialCollegeLondon/real-number-game</a></p>",
        "id": 195114571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673356
    },
    {
        "content": "<p>: O</p>",
        "id": 195114594,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587673371
    },
    {
        "content": "<p>I was going to take a good look at that tomorrow too -- my co-author has been doing everything</p>",
        "id": 195114599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587673374
    },
    {
        "content": "<p>Level 15 of inequality world says, \"By default, the definition of a &lt; b in Lean, once ≤ is defined, is this: <code>a &lt; b := a ≤ b ∧ ¬ (b ≤ a)</code>\". Why doesn't lean simply define a &lt; b as <code>a &lt; b := ¬ (b ≤ a)</code>? Is it for the convenience of easily obtaining  a ≤ b from a &lt; b?</p>",
        "id": 195124015,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587678752
    },
    {
        "content": "<p>I think it is because all relation <code>≤ </code> are not total !  For example,   the relation <code>  ⊆  </code> on subset of a set <code> X </code>.  If we take  <code> X = { 0,1}</code>  and the relation  <code>  ⊆  </code>on the subset of  <code>X</code> we  have   <code>¬  {1} ≤ {0} </code> and you don't want to tell that <code> {0} &lt; {1} </code> ! It's ok for the relation where all element are comparable.</p>",
        "id": 195126900,
        "sender_full_name": "orlando",
        "timestamp": 1587680606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/195114571\" title=\"#narrow/stream/113489-new-members/topic/Natural.20Numbers.20Game/near/195114571\">said</a>:</p>\n<blockquote>\n<p>We're working on a sequel: <a href=\"https://github.com/ImperialCollegeLondon/real-number-game\" title=\"https://github.com/ImperialCollegeLondon/real-number-game\">https://github.com/ImperialCollegeLondon/real-number-game</a></p>\n</blockquote>\n<p>Do you know when this will be ready? Using Lean to gamify undergrad math is a fantastic idea</p>",
        "id": 195133403,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587686016
    },
    {
        "content": "<p>Level 7 of inequality world says \"Note that you can do things like have h2 := add_right_eq_zero _ _ h1 if h1 : a + c = 0.\"  What exactly do the underscores do here? The level doesn't give any more details beyond that note, and this is my first time seeing them in the game.</p>",
        "id": 195135060,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587687564
    },
    {
        "content": "<p>The underscores mean that Lean should try and infer those arguments, in this case add_right_eq_zero has type</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>but we can see that if we apply add_right_eq_zero with <code>a c h1</code> as arguments where <code>h1</code> has type <code>a+c = 0</code> then the first two arguments (<code>a</code> and <code>c</code>) aren't strictly needed, theres only one possible thing they can be given the type of <code>h1</code>  for everything to make sense, so the underscores tell lean to work out those arguments automatically.</p>",
        "id": 195135336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587687839
    },
    {
        "content": "<p>In this case theres not a huge amount of savings (you only have to type one character anyway), generally it saves us from having to retype long complicated terms sometimes,  which can also improve readability, or from having to remember which way round arguments go. And it can make it easier to change variable names later or copy lines to different contexts.</p>",
        "id": 195135440,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587687946
    },
    {
        "content": "<p>But I think this is a bit confusing actually, as in the latest version of the natural number game the arguments for add_right_eq_zero are always implicit (this was changed only recently) so depending on which version is live for you it may be that you never needed to type <code>add_right_eq_zero a c h1</code>.</p>",
        "id": 195135819,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587688387
    },
    {
        "content": "<p>Looks like this is PR <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/pull/69/\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/pull/69/\">https://github.com/ImperialCollegeLondon/natural_number_game/pull/69/</a></p>",
        "id": 195135904,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587688460
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 195139111,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587692717
    }
]