[
    {
        "content": "<p>Hello all; I recently completed my <a href=\"https://github.com/ykonstant1/InfinitePrimes/\">first big exercise</a> for Lean 4 practice : a proof of the infinitude of primes completely from scratch, using only <code>Nat</code> lemmas from Core for the four operations, and using only the <code>propext</code> axiom. I wanted to practice writing terms directly, so I made minimal use of tactics.</p>\n<p>The linked README contains a hastily written overview, but the source is somewhat tagliatelle code, so if you have any pointers on how to organize/structure it, please let me know.  In particular, I'd like some directions on how to create good doc-strings.</p>\n<p>Also, I am not sure what to do about licenses and the like; do I need to use a specific license, or none at all?  This is an exercise written by an amateur, so people should not mimic it ( <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> ) but what is the general practice?</p>",
        "id": 391235213,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694801856
    },
    {
        "content": "<p>We generally license Lean code with the Apache license because this is the license which Lean uses.</p>",
        "id": 391236025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694802076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Infinite.20primes.20.3A.20an.20exercise.20in.20basic.20Lean/near/391236025\">said</a>:</p>\n<blockquote>\n<p>We generally license Lean code with the Apache license because this is the license which Lean uses.</p>\n</blockquote>\n<p>Great, so I will use the same.</p>",
        "id": 391244152,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694804662
    },
    {
        "content": "<p>Why don't you express the main result in terms of the \"official\" <code>NatPrime</code> definition?<br>\nIt should be approximately zero extra work and much better presentability of your result!</p>",
        "id": 391250931,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694807275
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 391253339,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694808192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Infinite.20primes.20.3A.20an.20exercise.20in.20basic.20Lean/near/391250931\">said</a>:</p>\n<blockquote>\n<p>Why don't you express the main result in terms of the \"official\" <code>NatPrime</code> definition?<br>\nIt should be approximately zero extra work and much better presentability of your result!</p>\n</blockquote>\n<p>I do not know yet about what exists in the database, I wanted to implement everything myself.  I used the <code>Prime</code> definition I did because it is the right generalization in other domains, it is harder to prove decidability for it (making it a worthier challenge), and I wanted to prove as many equivalences as I could for primality.  I use all the equivalent definitions in an essential way.</p>",
        "id": 391260414,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694810732
    },
    {
        "content": "<p>I mean, you can keep everything you have but add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">main_result</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">NatPrime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>for sake of the average reader.</p>",
        "id": 391263596,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694812080
    },
    {
        "content": "<p>It's actually spelled <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Prime#doc\">docs#Nat.Prime</a></p>",
        "id": 391263726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694812127
    },
    {
        "content": "<p>The project doesn't import Mathlib.</p>",
        "id": 391263929,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694812180
    },
    {
        "content": "<p>Speaking of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Prime#doc\">docs#Nat.Prime</a> vs decidable definitions, I wrote an extremely amateurish characterization of primes:<br>\n<a href=\"https://github.com/madvorak/lean4-exercises/blob/main/PrimeTesting.lean\">https://github.com/madvorak/lean4-exercises/blob/main/PrimeTesting.lean</a></p>",
        "id": 391264241,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694812287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/113489-new-members/topic/Infinite.20primes.20.3A.20an.20exercise.20in.20basic.20Lean/near/391260414\">said</a>:</p>\n<blockquote>\n<p>I used the <code>Prime</code> definition I did because it is the right generalization in other domains</p>\n</blockquote>\n<p>You can have a look at how Mathlib does it. In particular <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Prime#doc\">docs#Nat.Prime</a> is defined in Mathlib as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Units</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The underlying value in the base `Monoid`. -/</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"sd\">/-- The inverse value of `val` in the base `Monoid`. -/</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"sd\">/-- `inv` is the right inverse of `val` in the base `Monoid`. -/</span>\n  <span class=\"n\">val_inv</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"n\">inv</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"sd\">/-- `inv` is the left inverse of `val` in the base `Monoid`. -/</span>\n  <span class=\"n\">inv_val</span> <span class=\"o\">:</span> <span class=\"n\">inv</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Irreducible</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `p` is not a unit -/</span>\n  <span class=\"n\">not_unit</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">IsUnit</span> <span class=\"n\">p</span>\n  <span class=\"sd\">/-- if `p` factors then one factor is a unit -/</span>\n  <span class=\"n\">isUnit_or_isUnit'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">IsUnit</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">IsUnit</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Irreducible</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 391269003,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694814492
    },
    {
        "content": "<p>Thank you for the suggestions!</p>",
        "id": 391277171,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694818134
    }
]