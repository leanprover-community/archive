[
    {
        "content": "<p>So, I have constructed a  partition on a particular type and created a map from this type to natural numbers such that all elements of a partition map to the same element. How can one  lift this map, from sets of the partition to a natural number, i.e </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Setoid.Partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Archimedean</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DeletedIntegerSpace</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℝ+\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DeletedIntegerSpace</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">modified_Ioo</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span> <span class=\"bp\">|</span> <span class=\"n\">a.1</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Ioo</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DIT_partition</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">modified_Ioo</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--I have proved this theorem already so don't worry about it</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">DIT_partition_is_partition</span> <span class=\"o\">:</span> <span class=\"n\">Setoid.IsPartition</span> <span class=\"n\">DIT_partition</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.toNat</span> <span class=\"bp\">⌊</span><span class=\"n\">x.x</span><span class=\"bp\">⌋</span>\n<span class=\"c1\">--I want to construct this map f' : Type: modified_Ioo → ℕ</span>\n<span class=\"c1\">--more  specifically  I have to prove the above function is injective</span>\n</code></pre></div>",
        "id": 401986914,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1699968682
    },
    {
        "content": "<p>If you add <code>import Mathlib.Data.Real.Archimedean</code> your code should work (note that <code>f</code> must be a <code>noncomputable def</code> here also).<br>\nThis imports both <code>Mathlib.Data.Real.Basic</code> which you need for <code> ℝ</code> to mean the reals, but also the definition of a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FloorRing#doc\">docs#FloorRing</a>, and the instance that says that the reals are such a structure, so that we can use the floor notation</p>",
        "id": 402027348,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699980569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"498381\">Suryansh Shrivastava</span> has marked this topic as resolved.</p>",
        "id": 402164126,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700033657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"498381\">Suryansh Shrivastava</span> has marked this topic as unresolved.</p>",
        "id": 402164147,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700033662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Lifting.20of.20maps/near/402027348\">said</a>:</p>\n<blockquote>\n<p>If you add <code>import Mathlib.Data.Real.Archimedean</code> your code should work (note that <code>f</code> must be a <code>noncomputable def</code> here also).<br>\nThis imports both <code>Mathlib.Data.Real.Basic</code> which you need for <code> ℝ</code> to mean the reals, but also the definition of a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FloorRing#doc\">docs#FloorRing</a>, and the instance that says that the reals are such a structure, so that we can use the floor notation</p>\n</blockquote>\n<p>Oh I didn't realise my code didn't work! I had just imported Mathlib in my original code so made a mistake while writing the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 402164817,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1700033938
    },
    {
        "content": "<p>Should I look into first lifting the map to <code>Setoid \\R+</code>  and the quotient the map?</p>",
        "id": 402245244,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1700056306
    },
    {
        "content": "<p>I don't understand which map you are trying to construct sorry, can you explain some more</p>",
        "id": 402267285,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700061658
    },
    {
        "content": "<p>I want to construct the map f of type <code>f : @Elem (Set ℝ+) DIT_partition → ℕ</code> which is  derived from my original map <code>g : ℝ+ → ℕ := λ x =&gt; Int.toNat ⌊x.x⌋</code>  and this map is well defined because all the elements of a partition map to the same element. My apologies, I  made a wrong statement about this map being a lift</p>",
        "id": 402296220,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1700070022
    },
    {
        "content": "<p>In my original project, I made a partition topology from the DIT_partition mentioned above and wanted to prove that  DIT_Topology is <br>\n second countable space, and it requires me to get a function from DIT_Partition to Naturals and to prove the fact that it is injective.</p>",
        "id": 402297094,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1700070376
    }
]