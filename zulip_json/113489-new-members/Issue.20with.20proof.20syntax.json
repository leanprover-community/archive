[
    {
        "content": "<p>I've been trying to work out an example in <strong>S05 Proving Facts about Algebraic Structures</strong> from <em>Mathematics in Lean</em></p>\n<p>Here's what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">MIL.Common</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_inf</span>\n        <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n          <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span>\n        <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span>\n          <span class=\"k\">calc</span>\n            <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n              <span class=\"n\">apply</span> <span class=\"n\">le_inf</span>\n              <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span>\n                <span class=\"k\">calc</span>\n                  <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span>\n                  <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_sup_left</span>\n              <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span>\n                <span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">sup_comm</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n            <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">sup_comm</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sup_le</span>\n    <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_inf</span>\n      <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n        <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span>\n      <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span>\n        <span class=\"k\">calc</span>\n          <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_sup_left</span>\n    <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_inf</span>\n      <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n        <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span>\n      <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span>\n        <span class=\"k\">calc</span>\n          <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_sup_left</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">h₁</span>\n</code></pre></div>\n<p>There don't seem to be any issues with the proofs of <code>h₁</code> or <code>h₂</code>, but there probably is something wrong with them. The last three lines aren't highlighted and I get an error that <code>h₁</code> is an unresolved goal.</p>",
        "id": 397877947,
        "sender_full_name": "Mike",
        "timestamp": 1697922703
    },
    {
        "content": "<p>I think the entire proof layout is broken and the Lean parser is completely confused (I am certainly confused when reading your code).</p>",
        "id": 397878809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697923810
    },
    {
        "content": "<p>Do you think you ever finished the proof of <code>h₁</code>?</p>",
        "id": 397878823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697923858
    },
    {
        "content": "<p>I recommend commenting out the whole \"proof\" of <code>h₁</code>, replace it with <code>sorry</code>, try to fix the rest of the proof and then come back to actually proving <code>h₁</code>.</p>",
        "id": 397878909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697923971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  You're right! The proof of <code>h₁</code> wasn't finished. I got it to work by breaking it apart and moving <code>h₁</code> and <code>h₂</code> into their own lemmas. When I did that, the syntax highlighting started working correctly again. The proof was sort of on the right track, but it needed some work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lemma_h1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_inf</span>\n      <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n        <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span>\n      <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span>\n        <span class=\"k\">calc</span>\n          <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">apply</span> <span class=\"n\">le_inf</span>\n            <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span>\n              <span class=\"k\">calc</span>\n                <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span>\n                <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_sup_right</span>\n            <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span>\n              <span class=\"k\">calc</span>\n                <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span>\n                <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">sup_comm</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">]</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">sup_comm</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">absorb2</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sup_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lemma_h2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sup_le</span>\n  <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_inf</span>\n    <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n      <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span>\n    <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span>\n        <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_sup_left</span>\n  <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_inf</span>\n    <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n      <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span>\n    <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span>\n        <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_sup_right</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lemma_h1</span>\n    <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lemma_h2</span>\n</code></pre></div>\n<p>What was the most confusing earlier is that VS Code didn't show any issues with the proofs of either <code>h₁</code> or <code>h₂</code>, so, it did look like it was finished. There weren't any syntax errors highlighted, and the \"by\" wasn't underlined in red (this also happens with Lean 4 Web).  Lean Infoview didn't show any issues, either. Then what I was doing with them was really simple, so it seemed like it should have worked.</p>\n<p>The solution provided is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sup_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">absorb2</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sup_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">inf_assoc</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sup_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">absorb1</span><span class=\"o\">,</span> <span class=\"n\">sup_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but it's too compact. It's way above my Lean4 fluency level.</p>",
        "id": 397952297,
        "sender_full_name": "Mike",
        "timestamp": 1697988342
    },
    {
        "content": "<p>Are you aware that you can move your cursor through the rw call to see the intermediate states?</p>",
        "id": 397952551,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697988533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> Thanks! That helps!</p>",
        "id": 397952747,
        "sender_full_name": "Mike",
        "timestamp": 1697988709
    },
    {
        "content": "<p>Mike, a very important difference between your proof and the solution is that the solution is chaining equalities, it features no inequalities. So you could try to rewrite it as a single calc command, without inequality.</p>",
        "id": 397961593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697996671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  You're right that the proof I gave is really sub-optimal! I mostly just care about figuring out how to make the syntax work...</p>\n<p>Here's a really simple example of something that's giving me problems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">StrictOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">small_lemma</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems like it should work with something like <code>rw [sub_eq_add_neg]</code>, but I cannot get it to recognize the grouping <code>b*c</code> and <code>a*c</code>. Looking at the solution to the examples, I know I don't need to use <code>small_lemma</code>, but I still would like to know how to get something simple like that to work.</p>",
        "id": 397962129,
        "sender_full_name": "Mike",
        "timestamp": 1697997406
    },
    {
        "content": "<p>Your lemma has <code>(-a) * c</code>, not <code>-(a * c)</code>, so you need to deal with that first</p>",
        "id": 397962682,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697998081
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">StrictOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">small_lemma</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397962746,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697998124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> Thank you!!</p>",
        "id": 397964217,
        "sender_full_name": "Mike",
        "timestamp": 1697999900
    },
    {
        "content": "<p>You can see where the brackets are in your code by hovering over operators in the infoview</p>",
        "id": 397969264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698005358
    }
]