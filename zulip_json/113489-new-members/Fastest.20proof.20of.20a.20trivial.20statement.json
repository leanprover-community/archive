[
    {
        "content": "<p>I have code of the following form all around my code base (pure Lean 4, no mathlib):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">pred_n_eq_one</span>  <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The fastest way to prove that for me is <code>calc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span> <span class=\"n\">n_eq_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">calc</span>\n        <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">n_eq_2</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">calc</span>\n          <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">n_eq_2.symm</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pred_le</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>There has to be a simpler (and shorter, but chiefly simpler) way to prove this.  What am I missing?  Simple <code>simp</code> and <code>simp_arith</code> invocations do not work.</p>",
        "id": 385745191,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692303712
    },
    {
        "content": "<p>Something starting with <code>cases n</code>?</p>",
        "id": 385760781,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1692310200
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">_h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n   <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 385760835,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692310214
    },
    {
        "content": "<p>Where can I find some explanation of how this works?  I have not encountered this use for <code>match</code> in TPIL so far, and it simplifies things so much that I cannot help but feel extremely frustrated.</p>",
        "id": 385762253,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692311175
    },
    {
        "content": "<p>I should say this proof is a bit of a trick, and while its good to understand how it works its not a proof style I use myself that often. Match is explained in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html\">https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html</a>, the key point is that from the hypotheses the pattern matcher is smart enough to work out that the other possible ways of constructing a natural dont work, by definition of sub.</p>",
        "id": 385762863,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692311597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Fastest.20proof.20of.20a.20trivial.20statement/near/385762863\">said</a>:</p>\n<blockquote>\n<p>I should say this proof is a bit of a trick, and while its good to understand how it works its not a proof style I use myself that often. Match is explained in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html\">https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html</a>, the key point is that from the hypotheses the pattern matcher is smart enough to work out that the other possible ways of constructing a natural dont work, by definition of sub.</p>\n</blockquote>\n<p>Thank you very much for your feedback.</p>",
        "id": 385762925,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692311642
    },
    {
        "content": "<p>And please don't feel frustrated, that wasn't my intention. But a big part of learning any programming langauge (or indeed anything) is to get a good handle on the fundamentals, before moving on to more advanced / esoteric features</p>",
        "id": 385762977,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692311650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Fastest.20proof.20of.20a.20trivial.20statement/near/385762977\">said</a>:</p>\n<blockquote>\n<p>And please don't feel frustrated, that wasn't my intention. But a big part of learning any programming langauge (or indeed anything) is to get a good handle on the fundamentals, before moving on to more advanced / esoteric features</p>\n</blockquote>\n<p>Following that thought, is my code above about the shortest/simplest \"elementary\" proof of the theorem that doesn't use such tricks?</p>",
        "id": 385763411,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692311906
    },
    {
        "content": "<p>My suggestion of using cases is kind of in between: either n is 0 and then the assumption fails, or it is a successor and then the assumption simplifies and you can conclude using subst or something.</p>",
        "id": 385763688,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1692312083
    },
    {
        "content": "<p>Scratch this - missed the 'no mathilb' part</p>\n<p><del>Here's a much shorter proof that doesn't use any tricks</del></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.eq_add_of_sub_eq</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_sub_eq_succ</span> <span class=\"n\">hn</span><span class=\"o\">))</span> <span class=\"n\">hn</span>\n</code></pre></div>",
        "id": 385764553,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1692312638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/113489-new-members/topic/Fastest.20proof.20of.20a.20trivial.20statement/near/385763411\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Fastest.20proof.20of.20a.20trivial.20statement/near/385762977\">said</a>:</p>\n<blockquote>\n<p>And please don't feel frustrated, that wasn't my intention. But a big part of learning any programming langauge (or indeed anything) is to get a good handle on the fundamentals, before moving on to more advanced / esoteric features</p>\n</blockquote>\n<p>Following that thought, is my code above about the shortest/simplest \"elementary\" proof of the theorem that doesn't use such tricks?</p>\n</blockquote>\n<p>Well its a bit hard to measure shortest / simplest, and by not using any of std or mathlib you place a lot of restrictions on what you can use, the material built in to lean is mostly just what is required to build lean itself and some very fundamental tactics.<br>\nMaybe a clearer version of my proof above is osmething like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 385764980,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692312868
    },
    {
        "content": "<p>Thank you very much for your responses, everyone; I learned a lot!</p>",
        "id": 385865337,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1692349267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Fastest.20proof.20of.20a.20trivial.20statement/near/385760835\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">_h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n   <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">a</span>\n</code></pre></div>\n</blockquote>\n<p>By the way there is an even more amusing way to write that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">_h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n   <span class=\"k\">let</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 385973328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692385978
    },
    {
        "content": "<p>what language feature is this!?</p>",
        "id": 385974017,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692386230
    },
    {
        "content": "<p>it's the same language feature as the one already demonstrated, because <code>let pat := e1; e2</code> macro expands to <code>match e1 with | pat =&gt; e2</code></p>",
        "id": 385978633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692388106
    }
]