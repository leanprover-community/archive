[
    {
        "content": "<p>Mathlib defines a <code>PythagoreanTriple</code> property, I now want to define a <code>PythogoreanTriples</code> type based on it (analog to <code>Nat.Prime</code> and <code>Nat.Primes</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">PythagoreanTriple</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PythagoreanTriples</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n  <span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">PythagoreanTriple</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PythagoreanTriples</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">PythagoreanTriples.mk</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span>\n<span class=\"c1\">-- def c : PythagoreanTriples := ⟨3, 4, 5⟩</span>\n</code></pre></div>\n<p><code>def a</code> and <code>def b</code> work, but <code>def c</code> raises and error. How can I make <code>def c</code> work?</p>",
        "id": 396067436,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697023975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654733\">Markus Schmaus</span> has marked this topic as unresolved.</p>",
        "id": 396068053,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697024192
    },
    {
        "content": "<p>A simpler example is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Two</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Two</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">⟩</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>This might be a question for #lean4 in that minimized state</p>",
        "id": 396074539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697025925
    }
]