[
    {
        "content": "<p>Hi all,</p>\n<p>Possibly basic question incoming. I'm trying to prove a simple lemma about multiplicative subgroups of prime fields, but am running into an inference issue. My code is below. </p>\n<p>Lean fails to compile even the lemma statement, complaining that it <code>failed to synthesize type class instance for fintype ↥G</code>. Shouldn't the latter be implied by <code>fintype kˣ</code>?</p>\n<p>Also, if I remove the latter assumption (i.e. delete the line <code>[fintype kˣ]</code>), then Lean complains in <code>hn</code> that <code>fintype.card kˣ</code> doesn't apply (again due to it being unable to find the <code>fintype</code> instance). Shouldn't this be implied by the fact that <code>k</code> is a field and is <code>fintype</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_subgroup_of_units_of_prime_field_of_prime_pow_order</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">k</span><span class=\"bp\">ˣ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hn_prime</span><span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">t</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">k</span><span class=\"bp\">ˣ</span><span class=\"o\">):</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sylow.exists_subgroup_card_pow_prime</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340424937,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678297028
    },
    {
        "content": "<p>Basic questions are fine in this stream! There's a difference between \"I can see that <code>fintype kˣ</code> implies <code>fintype ↥G</code> and \"Lean can see that <code>fintype kˣ</code> implies <code>fintype ↥G</code> without any hints\". It would be great if you could edit your post to make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (i.e. add in the imports to make it compile out of the box), then it's easier to help you.</p>",
        "id": 340427992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678297797
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.fintype\">docs#units.fintype</a> ?</p>",
        "id": 340428165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678297842
    },
    {
        "content": "<p>OK so the instance is there but it needs decidable equality on <code>k</code>. Try typing <code>open_locale classical</code> before your lemma? Then finiteness of k will imply finiteness of the units of k (or it should do, at least). The issue is probably that the default finiteness hypotheses on types are constructive, and probably there are weird constructively finite sets with not-provably-constructively-finite subsets (just don't get me started). If you switch on classical maths mode then hopefully your problems will go away (but I'm too lazy to check because I can't just cut and paste your code without having to do extra work myself ;-) )</p>",
        "id": 340428636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678297975
    },
    {
        "content": "<p>Sorry about the missing imports! I've edited the post to add them. Using <code>open_locale classical</code> works to eliminate those errors! Could you elaborate a little bit on what <code>open_locale classical</code> does? Does it put us in the <code>classical</code> namespace?</p>",
        "id": 340431852,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678298963
    },
    {
        "content": "<p>The typeclass inference system wants to find an instance of <code>[decidable_eq k]</code> in order to make things work. This means that it's asking for an <em>algorithm</em> to determine whether two elements of <code>k</code> are equal or not. The reason it wants an algorithm for this is that then given an explicit bijection k &lt;-&gt; {1,2,3,...,n} it can work out an explicit bijection k^* &lt;-&gt; {1,2,3,...,n-1}. The command <code>open_locale classical</code> puts the law of the excluded middle into the typeclass system, which says \"here is an algorithm which for any two elements of k tells us that they're equal or not equal, and the algorithm is that it's an axiom of mathematics so just stop pestering me about this issue\", and this suffices. It's just all constructivist nonsense.</p>",
        "id": 340436585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678300309
    },
    {
        "content": "<p>If you had used a nonconstructive version of finiteness like <code>set.finite</code> then this wouldn't be an issue, but the rule of thumb is that you should stick to the constructive version really. In fact the actual rule of thumb is that you should not use <code>open_locale classical</code> but add to your theorem a hypothesis <code>[decidable_eq k]</code>, i.e. \"assume there's an algorithm which the finiteness machine wants\", and then your proof would probably still go through and the constructivists would still be happy.</p>",
        "id": 340437083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678300452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"596810\">Pratyush Mishra</span> has marked this topic as resolved.</p>",
        "id": 340446313,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678303342
    },
    {
        "content": "<p>That was very helpful, thank you!</p>",
        "id": 340446365,
        "sender_full_name": "Pratyush Mishra",
        "timestamp": 1678303357
    }
]