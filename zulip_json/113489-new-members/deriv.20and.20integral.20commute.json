[
    {
        "content": "<p>Hi! I have a function of two variables <code>f x y</code> and I need to use the fact that the integral and derivative wrt different variables commute (by linearity). That is, <code>∀ x, deriv (fun u =&gt; ∫ y, f u y) x = ∫ y, deriv (fun u =&gt; f u y) x</code>.</p>\n<p>I couldn't find this so I'm trying to write it myself. I thought it might be done using <code>ContinuousLinearMap.flip_apply</code>, and so I tried to first rewrite it using <code>integralCLM</code>. However for the derivative I could only find <code>deriv_clm_apply</code>, which doesn't seem to get me much closer.</p>\n<p>I'm a bit stuck, would someone be able to help? Here my attempt below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Mul</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.FDeriv.Mul</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Bochner</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Haar.OfBasis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hZ</span> <span class=\"o\">:</span> <span class=\"n\">CompleteSpace</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf_int</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Integrable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hf_deriv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hf_int_deriv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Integrable</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∫</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">L1.integralCLM</span> <span class=\"o\">((</span><span class=\"n\">hf_int</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toL1</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">integral_def</span><span class=\"o\">,</span> <span class=\"n\">hZ</span><span class=\"o\">,</span> <span class=\"n\">hf_int</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">L1.integral_def</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_clm_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rotate_left</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">differentiableAt_const</span> <span class=\"n\">_</span>\n  <span class=\"bp\">.</span> <span class=\"n\">refine</span> <span class=\"n\">Differentiable.differentiableAt</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"c1\">-- Differentiable ℝ fun u =&gt; Integrable.toL1 (f u) _</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">integral_def</span><span class=\"o\">,</span> <span class=\"n\">hZ</span><span class=\"o\">,</span> <span class=\"n\">hf_int_deriv</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">L1.integral_def</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ↑L1.integralCLM (deriv (fun u =&gt; Integrable.toL1 (f u) _) x) =</span>\n  <span class=\"c1\">-- ↑L1.integralCLM (Integrable.toL1 (fun y =&gt; deriv (fun u =&gt; f u y) x) _)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400813157,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1699389812
    },
    {
        "content": "<p>Ah, I realised that maybe I need to define <code>derivCLM</code>, which is going to require a topology on the subtype of differentiable functions that I'm considering (in order to use <code>deriv_add</code>)</p>",
        "id": 400819227,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1699392744
    },
    {
        "content": "<p>Have you had a look at the results in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Calculus/ParametricIntegral.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Calculus/ParametricIntegral.html</a> ?</p>",
        "id": 400820506,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1699393369
    },
    {
        "content": "<p>No, I didn't find this! It looks like it might do what I need. Thanks!!</p>",
        "id": 400820791,
        "sender_full_name": "Jack Valmadre",
        "timestamp": 1699393529
    }
]