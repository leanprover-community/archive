[
    {
        "content": "<p>I'm new to Lean and I'm a bit confused when I come across an exercise while reading the official documentation of Lean 4. <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span><br>\nHere is the exercise:<br>\n<strong>Using the analogy between types and arithmetic, write a function that turns multiplication by two into a sum. In other words, it should have type Bool × α → α ⊕ α.</strong><br>\nWhat puzzles me the most is why there is  a Bool in the type.<br>\nSource: <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/polymorphism.html\">The last exercise on this Page</a></p>",
        "id": 370315469,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1687938796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627821\">Trapped Beast</span> has marked this topic as resolved.</p>",
        "id": 370315854,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687938869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627821\">Trapped Beast</span> has marked this topic as unresolved.</p>",
        "id": 370316127,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687938927
    },
    {
        "content": "<p><code>Bool</code> is a type with <em>two</em> terms.</p>",
        "id": 370324230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687940403
    },
    {
        "content": "<p>(Mesopotamian shepherds discovered decategorification (=replacing things with their isomorphism classes, aka counting), but categorification (=coming up with an interesting element from the isomorphism class, aka as deciding that <code>Bool</code> is the best type with two terms) remains difficult.)</p>",
        "id": 370324880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687940513
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Minkowski.20space.20and.20hyperbolic.20geometry\">#new members &gt; Minkowski space and hyperbolic geometry</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 370325075,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687940542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/an.20exercise.20in.20documentation/near/370324230\">said</a>:</p>\n<blockquote>\n<p><code>Bool</code> is a type with <em>two</em> terms.</p>\n</blockquote>\n<p>I understand a little bit, but can you give a specific answer to this question? Thank you so much. <span aria-label=\"rose\" class=\"emoji emoji-1f339\" role=\"img\" title=\"rose\">:rose:</span></p>",
        "id": 371645663,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1688283487
    },
    {
        "content": "<p>what is the question?</p>",
        "id": 371647758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688284293
    },
    {
        "content": "<p>do you understand what the possible terms of <code>Bool × α</code> are? And the possible terms of <code>α ⊕ α</code>?</p>",
        "id": 371648016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688284371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/an.20exercise.20in.20documentation/near/371647758\">said</a>:</p>\n<blockquote>\n<p>what is the question?</p>\n</blockquote>\n<p>The question is ：<strong>Using the analogy between types and arithmetic, write a function that turns multiplication by two into a sum. In other words, it should have type Bool × α → α ⊕ α.</strong></p>",
        "id": 372891076,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1688648840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/an.20exercise.20in.20documentation/near/371648016\">said</a>:</p>\n<blockquote>\n<p>do you understand what the possible terms of <code>Bool × α</code> are? And the possible terms of <code>α ⊕ α</code>?</p>\n</blockquote>\n<p>Yes，I think I have understood the concept of prod and sum type.</p>",
        "id": 372893268,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1688649276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/an.20exercise.20in.20documentation/near/371647758\">said</a>:</p>\n<blockquote>\n<p>what is the question?</p>\n</blockquote>\n<p>Can you just give me a meaningful function whose type is <code>Bool × α → α ⊕ α</code>? Thanks a lot.</p>",
        "id": 372894664,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1688649544
    },
    {
        "content": "<p>Can you <em>just</em> explain what you have tried so far?</p>",
        "id": 372895310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688649664
    },
    {
        "content": "<p>How do <em>you</em> define a function in Lean?</p>",
        "id": 372895402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688649682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627821\">Trapped Beast</span> <a href=\"#narrow/stream/113489-new-members/topic/an.20exercise.20in.20documentation/near/372893268\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/an.20exercise.20in.20documentation/near/371648016\">said</a>:</p>\n<blockquote>\n<p>do you understand what the possible terms of <code>Bool × α</code> are? And the possible terms of <code>α ⊕ α</code>?</p>\n</blockquote>\n<p>Yes，I think I have understood the concept of prod and sum type.</p>\n</blockquote>\n<p>That wasn't the question. Suppose <code>a : α</code>. Can you give something whose type is <code>Bool × α</code>?</p>",
        "id": 372895991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688649787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/an.20exercise.20in.20documentation/near/372895310\">said</a>:</p>\n<blockquote>\n<p>Can you <em>just</em> explain what you have tried so far?</p>\n</blockquote>\n<p>There is a similar question in the document: Using the analogy between types and arithmetic, write a function that distributes products over sums. In other words, it should have type α × (β ⊕ γ) → (α × β) ⊕ (α × γ).</p>\n<p>My definition is as follows：<br>\ndef mulToSum {α β γ : Type} (ori : α × (β ⊕ γ)) : (α × β) ⊕ (α × γ) :=<br>\n  match ori with<br>\n  | (a,Sum.inl b) =&gt; Sum.inl (a,b)<br>\n  | (a,Sum.inr c) =&gt; Sum.inr (a,c)</p>\n<p>I just can't image a function whose type is  Bool × α → α ⊕ α.</p>",
        "id": 372896727,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1688649915
    },
    {
        "content": "<p>Why don't you try writing a similar <code>match</code> expression?</p>",
        "id": 372898068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688650158
    },
    {
        "content": "<p>Please post your best attempt at writing that function. You can use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> (check this link <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>) to format code on zulip.</p>",
        "id": 372898312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688650203
    },
    {
        "content": "<p>I tried the following: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mulIsSum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"o\">:</span><span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">mul</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">val</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">val</span>\n</code></pre></div>\n<p>But unlike <code>α × (β ⊕ γ) → (α × β) ⊕ (α × γ)</code>, I couldn't find a realistic example for this function.Especially,how can such a function represent \"turns multiplication by two into a sum\"?</p>",
        "id": 372900303,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1688650541
    },
    {
        "content": "<p>This isn't exactly the type that you were given in the question...</p>",
        "id": 372900720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688650615
    },
    {
        "content": "<p>Do you see how <code>α × (β ⊕ γ) → (α × β) ⊕ (α × γ)</code> looks very similar to <code>a * (b + c) = (a * b) + (a * c)</code>?</p>\n<p>In the same way <code>Bool × α → α ⊕ α</code> looks very similar to <code>2 * a = a + a</code>.</p>",
        "id": 372901198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688650694
    },
    {
        "content": "<p>Compare <code>Bool</code> to <code>Unit ⊕ Unit</code></p>",
        "id": 372901219,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688650699
    },
    {
        "content": "<p>That's all that this question is trying to teach you.</p>",
        "id": 372901291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688650708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/an.20exercise.20in.20documentation/near/372900720\">said</a>:</p>\n<blockquote>\n<p>This isn't exactly the type that you were given in the question...</p>\n</blockquote>\n<p>Ah, I was wrong. Sorry for wasting your time. <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 372901605,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1688650763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/an.20exercise.20in.20documentation/near/372901198\">said</a>:</p>\n<blockquote>\n<p>Do you see how <code>α × (β ⊕ γ) → (α × β) ⊕ (α × γ)</code> looks very similar to <code>a * (b + c) = (a * b) + (a * c)</code>?</p>\n<p>In the same way <code>Bool × α → α ⊕ α</code> looks very similar to <code>2 * a = a + a</code>.</p>\n</blockquote>\n<p>Thanks again, I understand this time.</p>",
        "id": 372905382,
        "sender_full_name": "Trapped Beast",
        "timestamp": 1688651466
    }
]