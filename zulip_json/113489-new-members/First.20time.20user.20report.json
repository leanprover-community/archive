[
    {
        "content": "<p>Seldom can one approach a piece of software with fresh eyes. I was aware of lean before and used the z3 solver, MILP solvers, SAT solvers.<br>\nToday i decided to spend half a day to get a feel for this.<br>\nHere are somethings i encountered:</p>\n<ul>\n<li>There was no registration free channel to get in touch with the community.</li>\n<li>some zulip chanel descriptions are so long that i can't figure out to how to read it</li>\n<li>the new members channel could be split up, into seperate channels introduction and whatever else there is going on such as discussing beginner questions. I can't figure out how to read the entire channel description</li>\n<li>The distinction and incompatibilities between lean4 and lean3 is not clearly communicated. Now that i know that there is a differenrence i still can't easily tell whether stuff i find here <a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/zfc/basic.html\">https://leanprover-community.github.io/mathlib_docs/set_theory/zfc/basic.html</a> or <a href=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a> are meant to be used with lean3 or lean4 or both. A simple suggestion would be to color code resources, with distinct colors for 3 and 4 where ever possible but i see that that might be difficult for external sources</li>\n<li>It might be a good idea to have a bot send a message to new members which links all the reference neatly laid out by 3 vs 4 and purpose. This message could also contain encouraging words, suggestions how to get started. </li>\n<li>There is no lean3 channel which would contrast with an lean4 channel making it obvious both are active and maintained</li>\n<li>It is is not obvious where to ask questions as an user and especially as a new user</li>\n<li>the community, welcoming, thoughtful and thinking ahead however i imagine it must be frustrating to see the same questions come up again and again</li>\n<li>The linked tutorial material is frustratingly incomplete <a href=\"https://leanprover.github.io/reference/programming.html\">https://leanprover.github.io/reference/programming.html</a> and not very apporachable if you have a specific question</li>\n<li>in my case i wanted to create a tupple of set, functions ... which have some basic property, define some trivial examples and see whether Lean recognizes that those do or do not conform with the defintions<br>\nHere is my genuine attempt to do something:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span> <span class=\"c1\">-- hopefully imports the right thing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.set_theory.zfc.basic</span> <span class=\"c1\">-- when things upper or lower case, it is not obvious to me how to find the correct import path for stuff</span>\n\n<span class=\"c1\">-- i went with a structure because the other examples of custom types were all inductive types which is not what i want, i think. Class might have also been interesting but the documentation went over my head and it didn't seem to be acknowledged in every documentation.</span>\n<span class=\"kd\">structure</span> <span class=\"n\">isosystem</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">T1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">T2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">T3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Uk</span> <span class=\"o\">:</span> <span class=\"n\">T.funs</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.prod</span> <span class=\"o\">{(</span><span class=\"n\">tp</span><span class=\"o\">,</span> <span class=\"n\">tf</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">×</span> <span class=\"n\">T</span> <span class=\"bp\">|</span> <span class=\"n\">tf</span> <span class=\"bp\">≥</span> <span class=\"n\">tp</span> <span class=\"o\">}</span> <span class=\"n\">Set.prod</span> <span class=\"n\">Uk</span> <span class=\"n\">X</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">funs</span> <span class=\"n\">X</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nu</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.prod</span> <span class=\"n\">T</span> <span class=\"n\">Set.prod</span> <span class=\"n\">X</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">funs</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- And input-state-output system is a hept-tupple of</span>\n<span class=\"c1\">-- a time set which is subset of the real numbers</span>\n<span class=\"c1\">-- an input set</span>\n<span class=\"c1\">-- a state set</span>\n<span class=\"c1\">-- an output set</span>\n<span class=\"c1\">-- a set of input signals which are functions T to U</span>\n<span class=\"c1\">-- a state transition function a larger and a smaller time, an input signal and a state to a new state</span>\n<span class=\"c1\">-- an output function which maps a time, a state and an input to an output</span>\n\n<span class=\"c1\">-- As you see i have no idea what i am doing.</span>\n\n<span class=\"c1\">-- In addition i would define some properties state of the transition function and when a system is linear or when a system is time invariant.</span>\n</code></pre></div>\n<p>I didn't manage to accomplish that and you wouldn't help if you implemented that for me. It was an experiment to get a feel for lean and lean did not convince me that it could be useful for me in the near future or that i could meaningfully contribute somewhere. I'll keep an open mind about lean and i hope that these observation are interesting.</p>",
        "id": 343806377,
        "sender_full_name": "Joh-Tob Schäg",
        "timestamp": 1679529339
    },
    {
        "content": "<blockquote>\n<p>There was no registration free channel to get in touch with the community.</p>\n</blockquote>\n<p>You could send an email, but it's true that most methods will require you to do some kind of identification</p>\n<blockquote>\n<p>some zulip chanel descriptions are so long that i can't figure out to how to read it</p>\n</blockquote>\n<p>This is a zulip issue I suppose; you can see full channel descriptions at <a href=\"#streams\">https://leanprover.zulipchat.com/#streams</a></p>\n<blockquote>\n<p>the new members channel could be split up</p>\n</blockquote>\n<p>We don't really have much of an introduction channel. Feel free to use the new members channel for either purpose</p>\n<blockquote>\n<p>The distinction and incompatibilities between lean4 and lean3 is not clearly communicated</p>\n</blockquote>\n<p>Right now, everything which doesn't explicitly say it is for lean 4 is for lean 3. Mathlib docs are lean 3, leanprover-community/mathlib is lean 3. Stuff about lean 4 has a 4 in the name somewhere</p>\n<blockquote>\n<p>It might be a good idea to have a bot send a message to new members</p>\n</blockquote>\n<p>I don't really think that's a good idea, as it would be the same message every time. You can't pin messages in zulip, so it is not well suited for this kind of information. For frequently asked questions, we usually use linkifiers which go to github wiki pages, e.g. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>, <a href=\"https://github.com/leanprover-community/mathlib4/wiki\">#port-guide</a>.</p>\n<blockquote>\n<p>There is no lean3 channel which would contrast with an lean4 channel</p>\n</blockquote>\n<p><em>All</em> channels which don't have a 4 in the name are assumed to be about lean 3 by default. That includes <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a>, <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a> , <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> which are the most heavily trafficked streams.</p>\n<blockquote>\n<p>It is is not obvious where to ask questions as an user and especially as a new user</p>\n</blockquote>\n<p><a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> </p>\n<blockquote>\n<p>the community, welcoming, thoughtful and thinking ahead however i imagine it must be frustrating to see the same questions come up again and again</p>\n</blockquote>\n<p>Sure, but you can't really \"fix\" this. If you write a bunch of documentation on everything then people will ask how to find things in the documentation. Personally I prefer just to respond to direct questions even if the questions have been asked before.</p>\n<blockquote>\n<p>The linked tutorial material is frustratingly incomplete </p>\n</blockquote>\n<p>True. Everything is a work in progress and even though there are a decent number of lean users it pales in comparison with even relatively obscure \"regular\" programming languages, because proofs are hard. This is a collaborative effort, so if you see something that you can help with please do.</p>",
        "id": 343808252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679530711
    },
    {
        "content": "<p>Regarding your final question: Note that the casing convention changed from lean 3 to lean 4. If you see everything in <code>snake_case</code> then it's probably lean 3 and if most things are in <code>TitleCase</code> then it is lean 4. <code>import Mathlib.Data.Real.Basic</code> looks like a line from a lean 4 file while <code>import set_theory.zfc.basic</code> is a lean 3 import (no <code>Mathlib.</code>). The corresponding lean 4 import line would be <code>import Mathlib.SetTheory.ZFC.Basic</code></p>",
        "id": 343808444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679530897
    },
    {
        "content": "<p>you should use the lean 3 mathlib docs (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/real\">docs#real</a>) for info about lean 3, including the necessary imports, and the mathlib4 docs (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real#doc\">docs4#Real</a>) for lean 4 mathlib. In each case you will get information on imports, but you can construct the lean 4 name mechanically from the lean 3 name by putting the import in title case and prepending <code>Mathlib.</code>.</p>",
        "id": 343808653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679531066
    },
    {
        "content": "<p>Thank you for your detailed response. Your answer is a gold mine for insight. While your explanatation are sensible they are not necessarily obvious. By sending a message i meant a direct message not message in a public channel. There already is an welcome bot which greeted me with this:<br>\n@_<strong>Welcome Bot|100007</strong> <a href=\"#narrow/pm-with/100007,214000-pm/near/161177926\">said</a>:</p>\n<blockquote>\n<p>Hello, and welcome to Zulip!</p>\n<p>This is a private message from me, Welcome Bot. Here are some tips to get you started:</p>\n<ul>\n<li>Download our <a href=\"/apps\">Desktop and mobile apps</a></li>\n<li>Customize your account and notifications on your <a href=\"#settings\">Settings page</a></li>\n<li>Type <code>?</code> to check out Zulip's keyboard shortcuts</li>\n</ul>\n<p>The most important shortcut is <code>r</code> to reply.</p>\n<p>Practice sending a few messages by replying to this conversation. If you're not into keyboards, that's okay too; clicking anywhere on this message will also do the trick!</p>\n</blockquote>\n<p>Maybe that message can be customized? I don't use Zulip much.</p>",
        "id": 343809062,
        "sender_full_name": "Joh-Tob Schäg",
        "timestamp": 1679531419
    },
    {
        "content": "<p>Unfortunately it cannot. I believe there is an open issue about this</p>",
        "id": 343809111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679531497
    },
    {
        "content": "<p>Here's my best guess at what you wanted to write for that code example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"sd\">/-- An input-state-output system with input `U`, state `X` and output `Y` -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ISOSystem</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"sd\">/-- a time set which is subset of the real numbers -/</span>\n  <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Real</span>\n  <span class=\"sd\">/-- a set of input signals which are functions T to U -/</span>\n  <span class=\"n\">Uk</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"sd\">/-- a state transition function a larger and a smaller time, an input signal and a state to a new state -/</span>\n  <span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">tp</span> <span class=\"n\">tf</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">tp</span> <span class=\"bp\">≤</span> <span class=\"n\">tf</span> <span class=\"bp\">→</span> <span class=\"n\">Uk</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n  <span class=\"sd\">/-- an output function which maps a time, a state and an input to an output -/</span>\n  <span class=\"n\">nu</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n</code></pre></div>",
        "id": 343809525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679531848
    }
]