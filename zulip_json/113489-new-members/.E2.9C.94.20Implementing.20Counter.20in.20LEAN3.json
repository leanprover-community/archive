[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">signal</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sig_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AND</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">∧</span> <span class=\"n\">AND</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OR</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">∨</span> <span class=\"n\">OR</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">XOR</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">::</span><span class=\"n\">h2</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">XOR</span> <span class=\"o\">((</span><span class=\"n\">h1</span> <span class=\"bp\">≠</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fold_array_aux</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n                    <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat.zero</span>     <span class=\"n\">h</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">acc</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">cout</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a.read</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">a.read</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">acc.snd</span> <span class=\"k\">in</span>\n    <span class=\"n\">fold_array_aux</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc.fst.write</span> <span class=\"n\">i</span> <span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">cout</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fold_array</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"k\">in</span>\n  <span class=\"n\">fold_array_aux</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">acc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zip_array</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a.read</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">b.read</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">full_adder_imp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Cin</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">XOR</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">],</span>\n            <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">AND</span> <span class=\"o\">[</span><span class=\"n\">Cin</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">],</span>\n            <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">AND</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">XOR</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Cin</span><span class=\"o\">],</span> <span class=\"n\">OR</span> <span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">full_n_adder_imp</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cin</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">fold_array</span> <span class=\"o\">(</span><span class=\"n\">full_adder_imp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zip_array</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk_array</span> <span class=\"n\">n</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">Cin</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n_mem_imp</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">sig_n</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">signal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sig_n</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.zero</span> <span class=\"o\">:=</span> <span class=\"n\">I</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">S</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"k\">then</span> <span class=\"n\">D</span> <span class=\"n\">y</span>\n                    <span class=\"k\">else</span> <span class=\"n\">n_mem_imp</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sig_n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">MEM</span> <span class=\"o\">:=</span> <span class=\"n\">n_mem_imp</span> <span class=\"o\">(</span><span class=\"n\">mk_array</span> <span class=\"n\">n</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ADDER</span> <span class=\"n\">WITH</span> <span class=\"n\">PREV</span> <span class=\"n\">MEM</span><span class=\"bp\">???</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"n\">MEM</span>\n</code></pre></div>\n<p>Hello everyone, I have defined a memory implementation and a full-adder. The memory implementation takes an initial memory value I, a data signal D, which for every t has a specific value, and then a set signal S. </p>\n<p>The thing is, I want to define a counter, using this memory implementation and the full-adder. Somehow I need to define a memory variable, and then add the value at time 0 of this memory value with 1 using the adder, and then pass the resulting value back into D at time 1. This has to be repeated and I just can't seem to figure out how to create this type of recursion.</p>\n<p>Is there anyone that could give me some advise on this matter?</p>",
        "id": 369534659,
        "sender_full_name": "Zahir Bingen",
        "timestamp": 1687743573
    },
    {
        "content": "<p>It might help to create an auxiliary function <code>pc' {n : ℕ} : sig_n n × bool</code>, outputting the result and the extra memory, then just define <code>pc = pc'.1</code>.</p>",
        "id": 370119222,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687881507
    },
    {
        "content": "<p>You want something like the state monad.</p>",
        "id": 370130717,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687883493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"618701\">Zahir Bingen</span> has marked this topic as resolved.</p>",
        "id": 370609000,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688002023
    }
]