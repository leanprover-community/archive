[
    {
        "content": "<p>Hello</p>\n<p>How would one prove that the minimal polynomial of a matrix and the corresponding linear map are the same? Unfolding the definitions leads to some scary definitions. In mathlib the statement seems to be there for charpoly at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_algebra.charpoly.to_matrix\">docs#linear_algebra.charpoly.to_matrix</a>. The proof at <a href=\"https://github.com/leanprover-community/mathlib/blob/2ed2c6310e6f1c5562bdf6bfbda55ebbf6891abe/src/linear_algebra/charpoly/to_matrix.lean#L37\">proof</a> is .... well .... well beyond my mathlib understanding capabilities. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>What I tried is doing unfolds till I reached the goals shown in the image below. If somehow I can say the yellow parts and the green parts are the same then it should work right? But I am guessing that is probably not the best approach.</p>\n<p><a href=\"/user_uploads/3121/UUov-zwn0IcRqUBKHYuki5D-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UUov-zwn0IcRqUBKHYuki5D-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/UUov-zwn0IcRqUBKHYuki5D-/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.spectrum</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.charpoly.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.charpoly.coeff</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.charpoly.to_matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.charpoly.minpoly</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_linear_equiv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">linear_map</span> <span class=\"n\">module.End</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">--[nonempty n]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">is_alg_closed</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mat_minpoly_is_linmap_minpoly</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">to_lin'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"c1\">-- unfold minpoly, unfold to_lin', unfold to_matrix', dsimp,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">root_minpoly_is_root_minpoly</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_root</span> <span class=\"n\">μ</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">to_lin'</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">is_root</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 358942373,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684318238
    },
    {
        "content": "<p>The green parts will follow with some effort from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_is_integral\">docs#map_is_integral</a> I think</p>",
        "id": 358945953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684319262
    },
    {
        "content": "<p>Though you'll need to first rewrite<code>to_lin'</code> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.to_lin_alg_equiv%27\">docs#matrix.to_lin_alg_equiv'</a></p>",
        "id": 358946162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684319312
    },
    {
        "content": "<p>The yellow parts will follow from <code>polynomial.aeval_alg_hom</code></p>",
        "id": 358946555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684319430
    },
    {
        "content": "<p>In general unfolding definitions leads to scary things. Have you tried to use the API as in the normal mathematical proof?</p>",
        "id": 358948713,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684320065
    },
    {
        "content": "<p>If you find that certains lemmas are missing we can add them</p>",
        "id": 358948793,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684320093
    },
    {
        "content": "<p>I mean, the standard math proof is that one divides the other, that is irreducible and both are monic, so OK</p>",
        "id": 358949031,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684320162
    },
    {
        "content": "<p>The divisibility comes from something being an algebra iso and property of evaluation. I am pretty sure everything is there</p>",
        "id": 358949168,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684320201
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> . Thanks for your suggestions. <br>\nSo I took a look at the lemmas associated with minpoly and applied some of  them. I now need to prove that the minpoly of the matrix evaluated at the linear map is zero. I don't know if this is a reduction of the problem or not? Any suggestions or thoughts for that one:</p>\n<p>I to a look at the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/minpoly.aeval\">docs#minpoly.aeval</a> located here <a href=\"https://github.com/leanprover-community/mathlib/blob/20d5763051978e9bc6428578ed070445df6a18b3/src/field_theory/minpoly/basic.lean#L60\">proof</a>. I think we come round to the same problem that was ealier i.e. polynomials evaluated with the other type. So matrix polynomial evaluated with linear_map or vice versa. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">to_lin'</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">degree_lt_wf.min</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">p.monic</span> <span class=\"bp\">∧</span> <span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"n\">A</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"mi\">0</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.spectrum</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.charpoly.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.charpoly.coeff</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.charpoly.to_matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.charpoly.minpoly</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_linear_equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.basis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">linear_map</span> <span class=\"n\">module.End</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">--[nonempty n]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">is_alg_closed</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mat_minpoly_is_linmap_minpoly</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">is_domain</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">to_lin'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">minpoly.eq_of_irreducible_of_monic</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">minpoly.irreducible</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_integral</span><span class=\"o\">,</span>\n  <span class=\"n\">rotate</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">minpoly.monic</span> <span class=\"n\">is_integral</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Here we need to prove : ⇑(aeval (⇑to_lin' A)) (minpoly R A) = 0.</span>\n  <span class=\"n\">delta</span> <span class=\"n\">minpoly</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"c1\">-- The goal now becomes</span>\n<span class=\"c\">/-</span><span class=\"cm\"> ⇑(aeval (⇑to_lin' A))</span>\n<span class=\"cm\">    (degree_lt_wf.min (λ (p : polynomial R), p.monic ∧ eval₂ (algebra_map R (matrix n n R)) A p = 0) hx) =</span>\n<span class=\"cm\">  0 -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 359014555,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684337452
    },
    {
        "content": "<p><code>polynomial.aeval_alg_hom</code> should help here</p>",
        "id": 359015243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684337631
    },
    {
        "content": "<p>Also, <code>[is_domain (matrix n n R)]</code> is a _very_ strong assumption, that forces either <code>n &lt; 2</code> or <code>subsingleton R</code></p>",
        "id": 359015388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684337662
    },
    {
        "content": "<p>Here's a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mat_minpoly_is_linmap_minpoly</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">to_lin'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">to_lin_alg_equiv'</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">minpoly</span><span class=\"o\">,</span> <span class=\"n\">minpoly</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">polynomial.aeval_def</span><span class=\"o\">,</span> <span class=\"n\">aeval_alg_equiv</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.coe_alg_hom</span><span class=\"o\">,</span>\n    <span class=\"n\">add_equiv_class.map_eq_zero_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dif_ctx_congr</span> <span class=\"o\">(</span><span class=\"n\">is_integral_alg_equiv</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 359020062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684338949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/minpoly.20for.20mat.20same.20minpoly.20for.20lin/near/358948793\">said</a>:</p>\n<blockquote>\n<p>If you find that certains lemmas are missing we can add them</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19030\">#19030</a></p>",
        "id": 359022068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684339474
    },
    {
        "content": "<p>With that PR, the proof is just <code>minpoly_alg_equiv to_lin_alg_equiv' A</code> or similar</p>",
        "id": 359023309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684339803
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19036\">#19036</a> adds the requested result (and three other analogous ones)</p>",
        "id": 359453920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684430284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"497480\">@MohanadAhmed</span>, maybe these new lemmas now help with your eigenvalue work. <code>simp</code> should close the goal now.</p>",
        "id": 359606110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684491089
    },
    {
        "content": "<p>Yes they will help I was working around them by going through the has_eigenvalue definition.</p>\n<p>So root of charpoly is equivalent to has_eigenvalue is equivalent to root of minpoly of the endomorphism to_lin: A</p>\n<p>Now I think I can cut some of the middle man work</p>",
        "id": 359611441,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684492259
    },
    {
        "content": "<p><a href=\"https://github.com/MohanadAhmed/lean-matrix-cookbook/blob/master/src/matrix_cookbook/mat_eigs_lib.lean\">https://github.com/MohanadAhmed/lean-matrix-cookbook/blob/master/src/matrix_cookbook/mat_eigs_lib.lean</a></p>",
        "id": 359611563,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1684492283
    }
]