[
    {
        "content": "<p>Hello, I have a specific polynomial and I would like to prove it is always greater than 0, given a restriction in the domain. Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_le_poly</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- ring_nf,</span>\n  <span class=\"c1\">-- nlinarith,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What is the nicest approach to prove something like this?</p>\n<p>The function is indeed always greater than 0 if x is greater than 0: <a href=\"/user_uploads/3121/f-5nlMSw_gibnK1si102OsVx/Screen-Capture_select-area_20230221124106.png\">Screen-Capture_select-area_20230221124106.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/f-5nlMSw_gibnK1si102OsVx/Screen-Capture_select-area_20230221124106.png\" title=\"Screen-Capture_select-area_20230221124106.png\"><img src=\"/user_uploads/3121/f-5nlMSw_gibnK1si102OsVx/Screen-Capture_select-area_20230221124106.png\"></a></div><p><code>ring_nf</code> does some factorization that maybe helps. <code>nlinarith</code> can't resolve this one unfortunately.</p>\n<p>Thanks in advance! :)</p>",
        "id": 329168935,
        "sender_full_name": "Aron Erben",
        "timestamp": 1676980040
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_le_poly</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">x_vs_one</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">convert_to</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_cub</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">pow_nonneg</span> <span class=\"n\">h</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_sqr</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sq_le_one_iff</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">x_vs_one</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">one_sub_x_sqr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sub_nonneg.mpr</span> <span class=\"n\">x_sqr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_nonneg</span> <span class=\"n\">x_cub</span> <span class=\"n\">one_sub_x_sqr</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">convert_to</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 329172487,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676981142
    },
    {
        "content": "<p>See my proof above. The main idea is to treat your polynomial as <code>x ^ 3 + (1 - x ^ 2)</code> when <code>x ≤ 1</code> and as <code>x ^ 2 * (x - 1) + 1</code> otherwise.</p>",
        "id": 329175633,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676982049
    },
    {
        "content": "<p>Thank you, that helps a lot already! So the general way to solve these is to do a case-analysis (if possible) and to factor out where possible and try to find clever properties for each term. </p>\n<p>Out of curiosity: Does <code>by_cases</code> imply that this makes use of <code>classical.choice</code>? If yes, is there a constructive proof?</p>",
        "id": 329176257,
        "sender_full_name": "Aron Erben",
        "timestamp": 1676982243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20polynomial.20always.20greater.20than.20zero/near/329176257\">said</a>:</p>\n<blockquote>\n<p>Does <code>by_cases</code> imply that this makes use of <code>classical.choice</code>?</p>\n</blockquote>\n<p>Yes. You can type <code>#print axioms zero_le_poly</code> and you will see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">propext</span>\n<span class=\"n\">quot.sound</span>\n<span class=\"n\">classical.choice</span>\n</code></pre></div>",
        "id": 329176894,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676982416
    },
    {
        "content": "<p>The statement itself uses <code>classical.choice</code>, so there is no hope of a choice-free proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_le_poly</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">zero_le_poly</span>  <span class=\"c1\">-- uses `classical.choice` as above</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">one</span> <span class=\"c1\">-- also uses choice!</span>\n</code></pre></div>",
        "id": 329177030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676982453
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">tactic#by_cases</a> (in Lean 3) uses <code>classical.choice</code> if it can't find an alternative. On the natural numbers, <code>by_cases : x &lt; 4</code> would <em>not</em> use choice.</p>",
        "id": 329177250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676982501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> very insightful!</p>",
        "id": 329177347,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676982537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20polynomial.20always.20greater.20than.20zero/near/329176257\">said</a>:</p>\n<blockquote>\n<p>So the general way to solve these is to do a case-analysis (if possible) and to factor out where possible and try to find clever properties for each term. </p>\n</blockquote>\n<p>Are we talking about situation where you already have a proof idea, i.e., something you could sketch on a blackboard?</p>",
        "id": 329177705,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676982624
    },
    {
        "content": "<p>I was hoping there would be a sum-of-squares proof. There is a theorem that says that there should always be one but I forget the algorithm</p>",
        "id": 329178204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676982784
    },
    {
        "content": "<p>Wow! I want to know more about the theorem!</p>",
        "id": 329178467,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676982875
    },
    {
        "content": "<p>aha, in this case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>3</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x^3-x^2+1=(x-1)^2(x+1)+x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></p>",
        "id": 329178680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676982952
    },
    {
        "content": "<p>What is the intuition behind always existing a sum-of-squares proof for nonnegativity of polynomials?<br>\nAnd how does it (the theorem statement) deal with domain restrictions?</p>",
        "id": 329179267,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676983149
    },
    {
        "content": "<p>I think the idea is to turn it into a sum of squares that is positive everywhere, and an extra term that is positive on the domain?</p>",
        "id": 329179427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676983203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20polynomial.20always.20greater.20than.20zero/near/329178680\">said</a>:</p>\n<blockquote>\n<p>aha, in this case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>3</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x^3-x^2+1=(x-1)^2(x+1)+x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></p>\n</blockquote>\n<p>So the proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_le_poly</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n  <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 329180010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676983362
    },
    {
        "content": "<p>One line for the human and one for the computer.</p>",
        "id": 329180157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676983407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20polynomial.20always.20greater.20than.20zero/near/329177250\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">tactic#by_cases</a> (in Lean 3) uses <code>classical.choice</code> if it can't find an alternative. On the natural numbers, <code>by_cases : x &lt; 4</code> would <em>not</em> use choice.</p>\n</blockquote>\n<p>Is this because there is a <code>nat.decidable_lt</code> that is not marked with <code>noncomputable</code> but <code>real.decidable_lt</code> is?</p>",
        "id": 329180579,
        "sender_full_name": "Aron Erben",
        "timestamp": 1676983510
    },
    {
        "content": "<p>Oh, I forgot the latter exists. The more accurate description is \"<code>by_cases</code> uses a <code>decidable</code> instance if it can find one (and doesn't care if its <code>noncomputable</code>), otherwise it uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.dec\">docs#classical.dec</a> (or one of the other names for that instance)\"</p>",
        "id": 329180779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676983573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20polynomial.20always.20greater.20than.20zero/near/329178204\">said</a>:</p>\n<blockquote>\n<p>I was hoping there would be a sum-of-squares proof. There is a theorem that says that there should always be one but I forget the algorithm</p>\n</blockquote>\n<p>Very interesting! If you remember, could you point me to a resource to read up on this, I'm probably going to try to use this for my non-MWE.</p>",
        "id": 329180792,
        "sender_full_name": "Aron Erben",
        "timestamp": 1676983577
    },
    {
        "content": "<p>it also goes by the name \"Positivstellensatz\"</p>",
        "id": 329181045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676983653
    },
    {
        "content": "<p><a href=\"https://www.princeton.edu/~aaa/Public/Teaching/ORF523/S16/ORF523_S16_Lec15.pdf\">https://www.princeton.edu/~aaa/Public/Teaching/ORF523/S16/ORF523_S16_Lec15.pdf</a></p>",
        "id": 329181061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676983657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> has marked this topic as resolved.</p>",
        "id": 329666404,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677144517
    }
]