[
    {
        "content": "<p>I am new to lean(4).  Can one search for a function by specifying its signature (as for Haskell with <a href=\"http://hoogle.com\">hoogle.com</a>)?  <br>\nFor example, is there a function reading a character, with signature Char -&gt; Nat  or Char -&gt; Option Nat ?</p>",
        "id": 371855511,
        "sender_full_name": "Sergey Cherkis",
        "timestamp": 1688354649
    },
    {
        "content": "<p>In mathlib4 there is an implementation of a <code>#find</code> command that does this, so you can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Find</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>which returns</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n  <span class=\"n\">Char.toNat</span><span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n  <span class=\"n\">String.count</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n  <span class=\"n\">Lean.Xml.Parser.hexDigitToNat</span><span class=\"o\">:</span> <span class=\"n\">Lean.Xml.Parser.LeanChar</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n  <span class=\"n\">String.csize</span><span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 371995546,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688388951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Find.20a.20function.20by.20its.20signature/near/371995546\">said</a>:</p>\n<blockquote>\n<p>In mathlib4 there is an implementation of a <code>#find</code> command that does this, so you can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Find</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>which returns</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n  <span class=\"n\">Char.toNat</span><span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n  <span class=\"n\">String.count</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n  <span class=\"n\">Lean.Xml.Parser.hexDigitToNat</span><span class=\"o\">:</span> <span class=\"n\">Lean.Xml.Parser.LeanChar</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">LeanProject.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n  <span class=\"n\">String.csize</span><span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you!  And what is an idiomatic way of converting <code>'4':Char</code> into <code>4:Nat</code>  or into <code>(some 4):Option Nat</code> ?</p>",
        "id": 372157430,
        "sender_full_name": "Sergey Cherkis",
        "timestamp": 1688433386
    },
    {
        "content": "<p>Hmm there should be some string parsing functions that parse strings representing naturals into Nats. I don't know the names right now, but something in the parser namespace like parseNat or something would be a good place to start</p>",
        "id": 372398624,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688497951
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.toNat%21#doc\">docs#String.toNat!</a> It seems</p>",
        "id": 372405970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688500444
    },
    {
        "content": "<p>There’s also a <code>String.toNat?</code></p>",
        "id": 372406079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688500482
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Syntax.decodeNatLitVal%3F#doc\">docs#Lean.Syntax.decodeNatLitVal?</a> is the function that decodes natural number literals for the Lean 4 language, which includes things like <code>0xFF</code></p>",
        "id": 372416018,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688505080
    }
]