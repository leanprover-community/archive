[
    {
        "content": "<p>I'm trying to prove some identities using Lucas and Fibonacci numbers on natural numbers and integers. I have defined both inductively, but am finding that rewrites that work on the <code>nat</code> case fail for <code>int</code>s. The error message I get is pretty minimal and unhelpful. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">fib_Z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"err\">%</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"k\">else</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">luc_N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">luc_N</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">luc_N</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">luc_Z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">luc_N</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"err\">%</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">luc_N</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"k\">else</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">luc_N</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--Minimal working examples</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">luc_Z</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">luc_Z</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">luc_N</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">luc_N</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">--a little more context</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">l0</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">luc_Z</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fib_Z</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib_Z</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">fib_Z</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">luc_Z</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195614533,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588102409
    },
    {
        "content": "<p>The <code>rw</code> tactic takes a hypothesis <code>h</code> of the form <code>X = Y</code> and replaces all <code>X</code>'s by <code>Y</code>'s in the goal. The error <code>failed</code> means \"I have no idea what you're talking about\".</p>",
        "id": 195629590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588109323
    },
    {
        "content": "<p>For your first two proofs <code>simp, refl</code> works for me. Your second has a subgoal <code>luc_Z 0 = fib_Z (-1) + fib_Z 1</code> which isn't true, the LHS is 2 and the RHS is 0, its true with nat subtraction <code>0-1=0</code> but not for ints.</p>",
        "id": 195633747,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588111502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195629590\" title=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195629590\">said</a>:</p>\n<blockquote>\n<p>The <code>rw</code> tactic takes a hypothesis <code>h</code> of the form <code>X = Y</code> and replaces all <code>X</code>'s by <code>Y</code>'s in the goal. The error <code>failed</code> means \"I have no idea what you're talking about\".</p>\n</blockquote>\n<p>I see. There were other times where I could get away with things like <code>rw nat.fib</code> but I guess I shouldn't count on <code>rw</code> know that when I give it <code>luc_Z</code> I actually mean \"see that the argument I gave this thing is one of its constructors and give me that value\"?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195633747\" title=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195633747\">said</a>:</p>\n<blockquote>\n<p>For your first two proofs <code>simp, refl</code> works for me. Your second has a subgoal <code>luc_Z 0 = fib_Z (-1) + fib_Z 1</code> which isn't true, the LHS is 2 and the RHS is 0, its true with nat subtraction <code>0-1=0</code> but not for ints.</p>\n</blockquote>\n<p>Right, I keep forgetting about nat subtraction. Would the solution be to re-index  so that when I do cases on my <code>int</code> I don't end up with a negative nat?</p>",
        "id": 195924620,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588298566
    }
]