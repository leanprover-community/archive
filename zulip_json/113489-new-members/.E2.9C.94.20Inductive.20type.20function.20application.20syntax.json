[
    {
        "content": "<p>Aloha,</p>\n<p>In the MWE below, how should the function <code>bar</code> be applied to two points of an instance of <code>baz</code>. I'm getting the error, as indicated at the bottom, when I try <code>#check bar (my_baz.a my_baz.b)</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">points</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">lines</span>  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lines</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">points</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_baz</span> <span class=\"o\">:</span> <span class=\"n\">f.baz</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">my_baz.a</span> <span class=\"n\">my_baz.b</span><span class=\"o\">)</span> <span class=\"c1\">-- ERROR HERE</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>The error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">my_baz.a</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 345467210,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1680109961
    },
    {
        "content": "<p>Remove the brackets. But also you're trying to feed in elements of <code>P</code>, not elements of <code>foo P L</code>, so you need to insert a constructor there (and if you say \"but there's only one obvious injection <code>P -&gt; foo P L</code>\", I say \"what about <code>foo P P</code>?\").</p>",
        "id": 345469309,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680110522
    },
    {
        "content": "<p>So what you want is <code>bar (foo.points my_baz.a) (foo.points my_baz.b)</code>.</p>",
        "id": 345469531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680110568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 345746781,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680197832
    }
]