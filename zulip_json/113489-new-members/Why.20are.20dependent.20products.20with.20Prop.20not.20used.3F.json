[
    {
        "content": "<p>Why is this dependent product not allowed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I can see this is becaus in the definition of Sigma, <code>β</code> is a function to <code>Type v</code>, but why can't it be <code>Sort</code> instead to allow this?</p>\n<p>I know <code>∃ n : ℕ, Even n</code> does exactly this, I'm just curious why the other way doesn't work.</p>",
        "id": 402660246,
        "sender_full_name": "Nir Paz",
        "timestamp": 1700215396
    },
    {
        "content": "<p>If you want to keep using <code>Prop</code>, you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PSigma#doc\">docs#PSigma</a> instead. The drawback is that this has a more complicated universe level:</p>\n<blockquote>\n<p>The reason this is not the default is that this type lives in the universe <code>Sort (max 1 u v)</code>, which can cause problems for universe level unification, because the equation <code>max 1 u v = ?u + 1</code> has no solution in level arithmetic. <code>PSigma</code> is usually only used in automation that constructs pairs of arbitrary types.</p>\n</blockquote>",
        "id": 402660731,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700215536
    },
    {
        "content": "<p>Ah, thanks! can't believe I didn't see it</p>",
        "id": 402661432,
        "sender_full_name": "Nir Paz",
        "timestamp": 1700215745
    },
    {
        "content": "<p>You can also stick in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PLift#doc\">docs#PLift</a> around the prop.</p>\n<p>But there's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype#doc\">docs#Subtype</a> for this combination, with notation <code>{n : ℕ // Even n}</code></p>",
        "id": 402661608,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700215811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"565854\">Nir Paz</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20are.20dependent.20products.20with.20Prop.20not.20used.3F/near/402660246\">said</a>:</p>\n<blockquote>\n<p>I know <code>∃ n : ℕ, Even n</code> does exactly this, I'm just curious why the other way doesn't work.</p>\n</blockquote>\n<p>This turns out to be not exactly the same, because it's in <code>Prop</code> rather than <code>Type</code>. One consequence is that, while it's a dependent product, there are strong limitations on when you can do projections.</p>",
        "id": 402662349,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700215980
    },
    {
        "content": "<p>Oh I didn't think of that, and I spent a while grappling with invalid projection errors on <code>∃</code>. It seems silly that the error is marked at the theorem itself and not the line with the projection, so you can just keep going with the proof not noticing anything is wrong.</p>",
        "id": 402665066,
        "sender_full_name": "Nir Paz",
        "timestamp": 1700216781
    }
]