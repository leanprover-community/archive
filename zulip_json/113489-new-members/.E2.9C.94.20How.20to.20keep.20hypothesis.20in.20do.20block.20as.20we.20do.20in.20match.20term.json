[
    {
        "content": "<p>Here is an example. I defined a function to check the index and then check the arguments first. But I can not keep the hypothesis given by the check in the following command. How can I do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">check_index</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span>\n  <span class=\"k\">then</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">()</span>\n  <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"index out of range\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_list</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">α</span><span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">check_index</span> <span class=\"n\">l</span> <span class=\"n\">i</span>  <span class=\"c1\">-- I hope I and write 'h : check_index l i'</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"c1\">-- I can not get h from the previous check</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_list2</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">α</span><span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">check_index</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"c1\">-- I use h: to keep the hypothesis</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">check_index</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>  <span class=\"c1\">-- here I can get the hypothesis</span>\n    <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.elim</span>\n    <span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 404989927,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1701310202
    },
    {
        "content": "<p>You can return a proof from <code>check_index</code>. The <code>Except</code> type doesn't accept proposition directly, hence <code>PLift</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">check_index</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span>\n  <span class=\"k\">then</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"s2\">\"index out of range\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_list</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">check_index</span> <span class=\"n\">l</span> <span class=\"n\">i</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_list2</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">α</span><span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">check_index</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 404990675,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701310440
    },
    {
        "content": "<p>Thank you, it is what I want.</p>",
        "id": 404992546,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1701310979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 404992554,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701310982
    }
]