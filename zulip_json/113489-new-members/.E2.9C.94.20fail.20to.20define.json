[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FiniteDimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Dual</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Metric</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epigraph</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span>  <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span>  <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span> <span class=\"bp\">≤</span> <span class=\"n\">p.2</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>An error occurred: <code>failed to synthesize instance\n  Membership (EuclideanSpace ℝ n) (Type ?u.76)</code>, does anyone know why?</p>",
        "id": 387823231,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1693294046
    },
    {
        "content": "<p><code>p</code> is already a pair of a term in <code>EuclideanSpace ℝ n</code> and a real number.  I suspect that the condition with <code>∈</code> is an unwanted remnant of set-theoretic reasoning.</p>",
        "id": 387823619,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693294208
    },
    {
        "content": "<p>My guess is that <code>p</code> already satisfies what you think that condition is and you can simply remove it.</p>",
        "id": 387823687,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693294247
    },
    {
        "content": "<p>Ah, I see that you have an <code>{s : Set (EuclideanSpace ℝ n)}</code> in your variables: did you mean <code>p.1 ∈ s</code> instead?</p>",
        "id": 387823879,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693294334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/fail.20to.20define/near/387823879\">said</a>:</p>\n<blockquote>\n<p>Ah, I see that you have an <code>{s : Set (EuclideanSpace ℝ n)}</code> in your variables: did you mean <code>p.1 ∈ s</code> instead?</p>\n</blockquote>\n<p>Thanks, that's what I mean! It is correct to change it to <code>p.1 \\in s</code></p>",
        "id": 387824902,
        "sender_full_name": "tsuki  hao",
        "timestamp": 1693294782
    },
    {
        "content": "<p>Lean verifies that it type-checks.  I'll leave it to you to figure out if it is what you mean!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 387825038,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693294835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631681\">tsuki  hao</span> has marked this topic as resolved.</p>",
        "id": 387825408,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693294984
    }
]