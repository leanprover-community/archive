[
    {
        "content": "<p>Hey folks, i am currently trying to proof this theorem, that for a given graph G and vertices a b c, if there is a path of length m from a to b and a path of length n from b to c, then there is also a path of length m+n from a to c.<br>\nI formalized this as shown below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"n\">where</span>\n  <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">natSucc</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_arith</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reachSuccT</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">G.E</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reachNT</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">reachNT</span> <span class=\"n\">G</span> <span class=\"n\">m</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"n\">reachSuccT</span> <span class=\"n\">G</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pathAdd</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">reachNT</span> <span class=\"n\">G</span> <span class=\"n\">m</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">reachNT</span> <span class=\"n\">G</span> <span class=\"n\">n</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">reachNT</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reachNT</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hl</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natSucc</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reachNT</span><span class=\"o\">]</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hl</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hl1</span><span class=\"o\">,</span> <span class=\"n\">hl2</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I tried to proof this by induction. The zero case works just fine. However in the succ case i always get stuck and dont know how to proceed.<br>\nI always get some kind of contradiction like <code>reachSuccT G w w</code> which does not hold for any G in general.<br>\nAny suggestions what i am doing wrong/what is missing</p>\n<p>Thanks in advance :)</p>",
        "id": 366826444,
        "sender_full_name": "HenrikT",
        "timestamp": 1686921250
    },
    {
        "content": "<p>Do you need <code>generalizing G</code> or something like that on the <code>induction</code>?</p>",
        "id": 366826955,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686921343
    },
    {
        "content": "<p>it should work for any G</p>",
        "id": 366827145,
        "sender_full_name": "HenrikT",
        "timestamp": 1686921374
    },
    {
        "content": "<p>i cant find any information about a <code> generalizing </code>keyword for Lean4. Is it described anywhere ?</p>",
        "id": 366828261,
        "sender_full_name": "HenrikT",
        "timestamp": 1686921568
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#induction\">https://leanprover-community.github.io/mathlib_docs/tactics.html#induction</a> is for lean 3, but lean 4 is similar</p>",
        "id": 366831017,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686922019
    },
    {
        "content": "<p>ok thanks ill look into it</p>",
        "id": 366832476,
        "sender_full_name": "HenrikT",
        "timestamp": 1686922289
    },
    {
        "content": "<p>ok i solved it using a generalization on <code>v</code></p>",
        "id": 366846229,
        "sender_full_name": "HenrikT",
        "timestamp": 1686924746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span> has marked this topic as resolved.</p>",
        "id": 366846248,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686924750
    }
]