[
    {
        "content": "<p>Personally, I almost wish proof assistants would <em>always</em> include the brackets.  I can never remember the default associativity of any binary operation and am always failing to rewrite because I got it wrong.</p>",
        "id": 303084758,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665283970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/303076630\">said</a>:</p>\n<blockquote>\n<p>I don't think lean 3 supports nonassociative operators</p>\n</blockquote>\n<p>I would be very disappointed in any proof assistant that doesn't support nonassociative operators.  I can think of oodles of infix binary operators that I think should be nonassociative, starting with <code>=</code>.</p>",
        "id": 303085012,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665284220
    },
    {
        "content": "<p>I see that in Lean 3, <code>=</code> is left-associative.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">variable</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">P</span>\n</code></pre></div>\n<p>Ugh.</p>",
        "id": 303085406,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665284558
    },
    {
        "content": "<p>lean 4 has nonassociative operators, although I'm not so sure about using them because I noticed that the parse failure can sometimes trigger a surprising fallback behavior</p>",
        "id": 303088198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665287457
    },
    {
        "content": "<p>The way to write them in lean 3 is <code>notation:p x:p+1 `foo` y:p+1 := foo x y</code> for some choice of <code>p</code></p>",
        "id": 303088531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665287540
    },
    {
        "content": "<p>How do I parse that?</p>",
        "id": 303093862,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665294230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> you can just hover over a + or any other infix operator in the infoview to see how it's associating, you have instant visual feedback in VS Code</p>",
        "id": 303107817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665306227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> You can tell Lean to print parentheses always:<code>set_option pp.parens true</code>.</p>",
        "id": 303151113,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1665333192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/303107817\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"381187\">Mike Shulman</span> you can just hover over a + or any other infix operator in the infoview to see how it's associating, you have instant visual feedback in VS Code</p>\n</blockquote>\n<p>When I hover over <code>+</code> I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_add.add</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 303385690,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665478799
    },
    {
        "content": "<p>He means in the info view.</p>",
        "id": 303385778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665478829
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3l1O1-sZXi6MhKDAqNFA12wp/assoc.gif\">assoc.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3l1O1-sZXi6MhKDAqNFA12wp/assoc.gif\" title=\"assoc.gif\"><img src=\"/user_uploads/3121/3l1O1-sZXi6MhKDAqNFA12wp/assoc.gif\"></a></div>",
        "id": 303386038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665478948
    },
    {
        "content": "<p>Observe how part of the expression turns blue, indicating that addition is left-associative.</p>",
        "id": 303386075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665478982
    },
    {
        "content": "<p>My infoview doesn't do that.</p>",
        "id": 303387808,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665479675
    },
    {
        "content": "<p>That's probably because the natural number game uses an ancient version of Lean and mathlib.</p>",
        "id": 303391043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665480980
    },
    {
        "content": "<p>At least you know that when working on a real project you won't have this issue.</p>",
        "id": 303391079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665481003
    },
    {
        "content": "<p>I'm not talking about the NNG now, I actually have vs code running locally.</p>",
        "id": 303391136,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665481031
    },
    {
        "content": "<p>(Although I would much prefer to use Emacs...)</p>",
        "id": 303393169,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665481873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> Which version of the Lean extension do you have in VScode?</p>",
        "id": 303398382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484159
    },
    {
        "content": "<p>And which version of Lean are you running in that project? <code>#eval lean.version</code></p>",
        "id": 303398420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484176
    },
    {
        "content": "<p>Lean extension is 0.16.55, Lean version is <code>(3, (46, 0))</code>.</p>",
        "id": 303398654,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484279
    },
    {
        "content": "<p>Ooh, maybe you need something like <code>import tactic</code> at the top? I'm just guessing.</p>",
        "id": 303398700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484307
    },
    {
        "content": "<p>Because those version numbers seem pretty up to date</p>",
        "id": 303398802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484342
    },
    {
        "content": "<p>I don't know exactly which part of mathlib you need to import to make the widget stuff work...</p>",
        "id": 303398851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484369
    },
    {
        "content": "<p>At the moment I'm not using any of mathlib.</p>",
        "id": 303398944,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484410
    },
    {
        "content": "<p>Understood. I'm afraid it might not work without mathlib.</p>",
        "id": 303398999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484441
    },
    {
        "content": "<p>The libraries that I import in my code can affect what sort of information my editor can display?</p>",
        "id": 303399067,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484460
    },
    {
        "content": "<p>That seems like a weird sort of level-mixing.</p>",
        "id": 303399142,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484489
    },
    {
        "content": "<p>Sure, if you import a library about Young tableaus, you might want to explain to your editor how to display them.</p>",
        "id": 303399193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484507
    },
    {
        "content": "<p>Or if you setup category theory, you might want to implement a widget for diagram chasing.</p>",
        "id": 303399241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484525
    },
    {
        "content": "<p>Sure, but those are domain-specific.  Bracketing is something that applies to all infix operators in the world.</p>",
        "id": 303399373,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484581
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/interactive_expr.html#widgets-used-for-tactic-state-and-term-mode-goal-display\">https://leanprover-community.github.io/mathlib_docs/tactic/interactive_expr.html#widgets-used-for-tactic-state-and-term-mode-goal-display</a> is the relevant file I believe.</p>",
        "id": 303399374,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665484582
    },
    {
        "content": "<p>The default tactic state is pure text, the widgets override it with the additional nested expression information</p>",
        "id": 303399433,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665484623
    },
    {
        "content": "<p>One could definitely make the argument that this should be in core now though!</p>",
        "id": 303399514,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665484665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381187\">Mike Shulman</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/303399373\">said</a>:</p>\n<blockquote>\n<p>Sure, but those are domain-specific.  Bracketing is something that applies to all infix operators in the world.</p>\n</blockquote>\n<p>Agreed. So you would expect it to be implemented in the standard library. But in the case of Lean 3, by historical accident, mathlib is the standard library. In Lean 4 this will all be done with more modular packages.</p>",
        "id": 303399527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484673
    },
    {
        "content": "<p>Seeing as that file imports none of mathlib, you could simply copy it to your project I guess</p>",
        "id": 303399640,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665484705
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean</a> is the file that Mike wants. It is extremely convenient to be able to override what is that file, and I use this possibility in my teaching or in the sphere eversion project. But indeed the basic version could be in the core library now that is stabilized (in the beginning it was convenient to have that file in mathlib for fast iteration).</p>",
        "id": 303404222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665486763
    },
    {
        "content": "<p>Thanks!  I don't suppose any of this works for Emacs?</p>",
        "id": 303466446,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665503020
    },
    {
        "content": "<p>I don't know anything about emacs. I know some of it works for vim.</p>",
        "id": 303467787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665503443
    },
    {
        "content": "<p>It doesn't work for emacs unfortunately, or at least it didn't last time I tried.</p>",
        "id": 303470546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665504355
    },
    {
        "content": "<p>I wish the emacs package (for both Lean3 and 4) got more love :(</p>",
        "id": 303470798,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665504434
    },
    {
        "content": "<p>I think we need to coordinate slightly better (at least emacs + vim) to find some ways to reduce duplication</p>",
        "id": 303486169,
        "sender_full_name": "Julian Berman",
        "timestamp": 1665509506
    },
    {
        "content": "<p>I don't have a ton of Lean time myself at the minute but when we were learning about implementing widgets for neovim was probably a decent time to try to do it for both with possibly only a bit more effort but that would have involved learning enough about <code>lean-mode</code> that made it not happen</p>",
        "id": 303486417,
        "sender_full_name": "Julian Berman",
        "timestamp": 1665509590
    },
    {
        "content": "<p>And some things would likely be useful for both -- e.g. porting <code>tailwind.css</code> to something usable in a terminal is something we only partially did, and I don't know whether there's a decent way to do so that'd work for both editors but certainly we should think about those things -- or think about thinking about them :P</p>",
        "id": 303486565,
        "sender_full_name": "Julian Berman",
        "timestamp": 1665509649
    },
    {
        "content": "<p>Sorry, tachyons, not tailwind, too many css frameworks on the mind.</p>",
        "id": 303486665,
        "sender_full_name": "Julian Berman",
        "timestamp": 1665509704
    },
    {
        "content": "<p>A hacky but (presumably) simple solution would be to display widgets in an external browser window.</p>",
        "id": 303487975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665510163
    },
    {
        "content": "<p>yeah -- I put a link to a thing for neovim which does so in <a href=\"https://github.com/Julian/lean.nvim/issues/59\">https://github.com/Julian/lean.nvim/issues/59</a></p>",
        "id": 303488302,
        "sender_full_name": "Julian Berman",
        "timestamp": 1665510275
    },
    {
        "content": "<p>who knows how much brain is left for lean 3 from folks but maybe that's even possible to share with emacs if we somehow do it in the language server (like have the language server process drive the browser window) but that's random speculating without rethinking about it</p>",
        "id": 303488497,
        "sender_full_name": "Julian Berman",
        "timestamp": 1665510348
    }
]