[
    {
        "content": "<p>Stupid question: I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">I</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n  <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">normSq_nonneg</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>with <code>exact normSq_nonneg (Complex.sin (↑x + I * ↑y))</code> suggested by library search, I get the errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">41</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">elaborator'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">50</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">elaborator'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">13</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">7</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>normSq_nonneg</code> sure looks like it is the theorem that I want to use. <br>\nWhy does this cause a timeout? Giving it 10x longer to compute didn't help.</p>",
        "id": 400468586,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699251453
    },
    {
        "content": "<p>Very strangely </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">I</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"o\">)</span>  <span class=\"o\">)</span>\n  <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">normSq_nonneg</span> <span class=\"o\">(</span><span class=\"n\">Complex.sin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">I</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>works fine</p>",
        "id": 400468930,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699251706
    },
    {
        "content": "<p>I get <code>unknown constant 'Complex.sin'</code> compiling your example, are you on the latest mathlib?</p>",
        "id": 400469330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699251944
    },
    {
        "content": "<p>Probably because it's having trouble figuring out what the target type for the coercion is</p>",
        "id": 400469442,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699251984
    },
    {
        "content": "<p>the import should be <code>import Mathlib.Data.Complex.Exponential</code></p>",
        "id": 400469470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699252005
    },
    {
        "content": "<p>Hmm, seems to be the conversion that causes it to fail. removing the up arrows causes it to work</p>",
        "id": 400469477,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699252009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663331\">Nicholas Wilson</span> has marked this topic as resolved.</p>",
        "id": 400469574,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699252077
    },
    {
        "content": "<p>Looking at the log it seems to be a very sad situation, it tries to unify <code>sin (↑x + Complex.I * ↑y) =?= sin (?x + Complex.I * ?y)</code> which fails because the metavariable <code>?x</code> is nonassignable (for some reason?), and then it tries to resolve this by unfolding <code>sin</code> and then of course it hits the same issue later in a bigger term, so it keeps unfolding and so on until it runs out of juice</p>",
        "id": 400470034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699252326
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dontUnfoldMe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dontUnfoldMe</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">dontUnfoldMe</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dontUnfoldMe_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">dontUnfoldMe</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dontUnfoldMe</span><span class=\"o\">,</span> <span class=\"n\">dontUnfoldMe_eq</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dontUnfoldMe_eq</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dontUnfoldMe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">14</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dontUnfoldMe_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">14</span> <span class=\"o\">[]</span> <span class=\"c1\">-- fast</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dontUnfoldMe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">14</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dontUnfoldMe_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">14</span> <span class=\"o\">[]</span> <span class=\"c1\">-- slow</span>\n</code></pre></div>",
        "id": 400471409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699253233
    },
    {
        "content": "<p>Nice! the problem mostly stems from the fact that <code>library_search</code> suggested the version with the coercions. <br>\nPerhaps it could be made to not produce coercions unless absolutely necessary? <br>\nAnyway thanks for the investigation!</p>",
        "id": 400472497,
        "sender_full_name": "Nicholas Wilson",
        "timestamp": 1699253827
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2831\">lean4#2831</a></p>",
        "id": 400472566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699253869
    },
    {
        "content": "<p>The coercion arrows are inserted by the coercion delaborator, it's usually better to have them to indicate that a coercion was inserted (otherwise the proof state is a bit confusing when you have to explicitly manipulate the coercion functions). I thought there there was an option to turn them off but apparently not, there is <code>set_option pp.coercions false</code> but this makes the coercion functions be shown explicitly as function applications</p>",
        "id": 400473008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699254088
    },
    {
        "content": "<p>You were lucky in this case that just removing the arrows caused lean to insert them in the right place - that's not necessarily going to be the case in more complex situations</p>",
        "id": 400486809,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699261060
    }
]