[
    {
        "content": "<p>Is there a tactic (or a nice way) to prove the theorem? This is giving me the feeling that I'm missing some tools for dealing with pattern matches and inductive types...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">TS</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">t1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">t2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">t3</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s3</span>\n<span class=\"kn\">open</span> <span class=\"n\">TS</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TS.isT</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"n\">t1</span> <span class=\"bp\">|</span> <span class=\"n\">t2</span> <span class=\"bp\">|</span> <span class=\"n\">t3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"c1\">-- return  \"t_n\" with the same suffix number as input</span>\n<span class=\"kd\">def</span> <span class=\"n\">TS.numToT</span> <span class=\"o\">:</span> <span class=\"n\">TS</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">TS</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">s3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t3</span>\n    <span class=\"bp\">|</span> <span class=\"n\">t_n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t_n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">numToT_isT</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">TS</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ts.numToT.isT</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">isT</span><span class=\"o\">,</span> <span class=\"n\">numToT</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">simp</span>\n    <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"n\">hh</span> <span class=\"n\">hhh</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">ts</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hh</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hhh</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hhh</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hh</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hhh</span>\n</code></pre></div>",
        "id": 389964741,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1694217129
    },
    {
        "content": "<p>Here's how I'd probably do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">numToT_isT</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">TS</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ts.numToT.isT</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ts</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">isT</span><span class=\"o\">,</span> <span class=\"n\">numToT</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 389964928,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694217301
    },
    {
        "content": "<p>You can also do <code>cases ts &lt;;&gt; simp!</code> to have <code>simp</code> unfold definitions automatically.</p>",
        "id": 389964961,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694217330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Thanks! Is there a list of tactics somewhere? I've never seen <code>simp!</code>despite reading the \"tactics\" section of \"Theorem Proving in Lean\" and also the cheatsheet...</p>",
        "id": 389965467,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1694217719
    },
    {
        "content": "<p>Is there some insight behind unrolling definitions <em>after</em> case analysis? My first instinct currently is \"first, unroll all my definitions\", unless I have theorems about some of those definitions already.</p>",
        "id": 389965659,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1694217839
    },
    {
        "content": "<p>It seems to have been overlooked in the Lean 4 documentation... I learned it in Lean 3. <code>simp!</code> is short for <code>simp (config := {autoUnfold := true})</code></p>",
        "id": 389965872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694217969
    },
    {
        "content": "<p>For unfolding definitions, you're going to need to simp afterwards anyway, so you may as well wait. I also figure it is a bit more efficient since then <code>simp</code> doesn't waste any time trying to simplify the <code>match</code> expressions before you actually give it a concrete value for <code>ts</code>.</p>",
        "id": 389966007,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694218084
    },
    {
        "content": "<p>Oh, this works too accidentally:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">numToT_isT</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">TS</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ts.numToT.isT</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ts</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 389966075,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694218122
    },
    {
        "content": "<p>In your definition of <code>isT</code>, make sure to use <code>True</code> and <code>False</code> instead of <code>true</code> and <code>false</code>. The first are <code>Prop</code>s, and the second are <code>Bool</code>s. There's a mechanism to coerce <code>Bool</code>s to <code>Prop</code>s automatically</p>",
        "id": 389966214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694218206
    },
    {
        "content": "<p>With that changed, <code>cases ts &lt;;&gt; trivial</code> would work.</p>",
        "id": 389966249,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694218233
    },
    {
        "content": "<p>I was actually unsure if I want <code>Prop</code>or <code>Bool</code> there. My (actual) use-case might involve using those \"isT\"-decision as data, so I should use <code>Bool</code>? I also just noticed that it still lets me prove the theorem without coercion, so even more reason.</p>",
        "id": 389966672,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1694218547
    },
    {
        "content": "<p>I gather there's no \"list of all common tactics\" though?</p>",
        "id": 389966743,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1694218584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20by.20cases.20on.20pattern.20matches/near/389965467\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>  Thanks! Is there a list of tactics somewhere? I've never seen <code>simp!</code>despite reading the \"tactics\" section of \"Theorem Proving in Lean\" and also the cheatsheet...</p>\n</blockquote>\n<p>I saw this <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md\">comprehensive list</a> in another thread.</p>",
        "id": 389976677,
        "sender_full_name": "Pedro SÃ¡nchez Terraf",
        "timestamp": 1694224064
    },
    {
        "content": "<p>I have a question inspired by <em>Mathematics in Lean</em>. In the chapter on Hierarchies, S01_Basics<br>\nwe are not asked to prove the lemma at the bottom, but I am still curious about how to<br>\ndo it.</p>\n<p>(sorry for the length of the post, but the example involved a lot of definitions.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroupâ</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">Î±</span> <span class=\"n\">where</span>\n<span class=\"sd\">/-- Addition is associative -/</span>\n  <span class=\"n\">add_assocâ</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"n\">AddSemigroupâ</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semigroupâ</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">Î±</span> <span class=\"n\">where</span>\n<span class=\"sd\">/-- Multiplication is associative -/</span>\n  <span class=\"n\">mul_assocâ</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoidâ</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroupâ</span> <span class=\"n\">Î±</span><span class=\"o\">,</span> <span class=\"n\">AddZeroClass</span> <span class=\"n\">Î±</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"n\">AddMonoidâ</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Monoidâ</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroupâ</span> <span class=\"n\">Î±</span><span class=\"o\">,</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">Î±</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommSemigroupâ</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroupâ</span> <span class=\"n\">Î±</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"n\">AddCommSemigroupâ</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">CommSemigroupâ</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroupâ</span> <span class=\"n\">Î±</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommMonoidâ</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoidâ</span> <span class=\"n\">Î±</span><span class=\"o\">,</span> <span class=\"n\">AddCommSemigroupâ</span> <span class=\"n\">Î±</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"n\">AddCommMonoidâ</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">CommMonoidâ</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoidâ</span> <span class=\"n\">Î±</span><span class=\"o\">,</span> <span class=\"n\">CommSemigroupâ</span> <span class=\"n\">Î±</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddGroupâ</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoidâ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Neg</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg_add</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"n\">AddGroupâ</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">Groupâ</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoidâ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv_mul</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">â»Â¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroupâ</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddGroupâ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoidâ</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"n\">AddCommGroupâ</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">CommGroupâ</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Groupâ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">CommMonoidâ</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nsmulâ</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">â</span> <span class=\"bp\">â</span> <span class=\"n\">M</span> <span class=\"bp\">â</span> <span class=\"n\">M</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">nsmulâ</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zsmulâ</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Neg</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">â¤</span> <span class=\"bp\">â</span> <span class=\"n\">M</span> <span class=\"bp\">â</span> <span class=\"n\">M</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nsmulâ</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">nsmulâ</span> <span class=\"n\">n.succ</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zsmul_aux</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroupâ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">â¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">zsmulâ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">zsmulâ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">zsmulâ</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zsmulâ</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The issue is that we have to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">â¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nsmulâ</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">nsmulâ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"k\">match</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nsmulâ</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">nsmulâ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nsmulâ</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">nsmulâ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I can't get anywhere with the<br>\n<code>match a * b, m with</code> statement.</p>\n<p>I would like to try something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zsmul_aux</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroupâ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">â¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">zsmulâ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">zsmulâ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">zsmulâ</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zsmulâ</span><span class=\"o\">]</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span> <span class=\"n\">somehow</span> <span class=\"n\">handle</span> <span class=\"n\">the</span> <span class=\"n\">positive</span> <span class=\"n\">case</span> <span class=\"n\">here</span><span class=\"o\">,</span> <span class=\"k\">then</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span> <span class=\"n\">shomehow</span> <span class=\"n\">handle</span> <span class=\"n\">the</span> <span class=\"n\">negative</span> <span class=\"n\">case</span> <span class=\"n\">here.</span>\n</code></pre></div>\n<p>But this does not work. Does anyone know how to finish this proof?<br>\nis using <code>simp only [zsmulâ]</code> a mistake?</p>",
        "id": 402762323,
        "sender_full_name": "Mike",
        "timestamp": 1700249201
    },
    {
        "content": "<p>Surely you can't just do cases on <code>a * b</code>: if <code>a * b</code> is positive then you still don't know whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a&lt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> so you can't figure out what the RHS says. You will surely need to case on both <code>a</code> and <code>b</code>, and in each case figure out whether <code>a * b</code> is &gt;=0 or &lt; 0 (or alternatively do cases on all three of a, b, a*b and then use False.elim to delete the cases which can't occur). </p>\n<p>Stepping back a bit, perhaps this is a more helpful thing to say. Lean is a cool puzzle game, but it doesn't prove theorems for you. You have to know the proof already. Do you know the maths proof of what you're trying to prove here? The first line you wrote is \"let's first deal with the case where ab&gt;=0\". What's the next line of your proof? If you don't know it, then your problem is not a Lean problem, your problem is figuring out the maths proof. The Lean comes later.</p>",
        "id": 402763553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700249697
    },
    {
        "content": "<p>That's cool that you can print LaTeX here.</p>\n<p>The proof isn't that difficult, and the result isn't even interesting. I'm just trying to get the syntax, and more generally the way to \"think in Lean4\". Like you said, it's just a bunch of cases. However, the Lean Infoview isn't giving useful information here. I'm just trying to learn.</p>\n<p>I asked on here, because I can't find the answer quickly from the manual...</p>",
        "id": 402774940,
        "sender_full_name": "Mike",
        "timestamp": 1700252765
    },
    {
        "content": "<p>Oh you are asking about the syntax? This would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zsmul_aux</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroupâ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">â¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">zsmulâ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">zsmulâ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">zsmulâ</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zsmulâ</span><span class=\"o\">]</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402785030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700257787
    },
    {
        "content": "<p>Here's what I have started in a \"potential\" proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zsmul_aux</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroupâ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">â¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">zsmulâ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">zsmulâ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">zsmulâ</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zsmulâ</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">â¤</span> <span class=\"n\">a</span> <span class=\"bp\">â§</span> <span class=\"mi\">0</span> <span class=\"bp\">â¤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">â¨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">â¤</span> <span class=\"n\">a</span> <span class=\"bp\">â§</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">â¨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">â§</span> <span class=\"mi\">0</span> <span class=\"bp\">â¤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">â¨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">â§</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">lt_or_ge</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">right</span>\n      <span class=\"n\">right</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_ge</span> <span class=\"n\">b</span> <span class=\"mi\">0</span>\n      <span class=\"n\">case</span> <span class=\"n\">h.h.inl</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">right</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n      <span class=\"n\">case</span> <span class=\"n\">h.h.inr</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">left</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_ge</span> <span class=\"n\">b</span> <span class=\"mi\">0</span>\n      <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">right</span>\n        <span class=\"n\">left</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n      <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">left</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h0</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"o\">â¨</span><span class=\"n\">zero_le_a</span><span class=\"o\">,</span> <span class=\"n\">zero_le_b</span><span class=\"o\">â©</span>\n    <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">â¤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_nonneg</span>\n      <span class=\"n\">exact</span> <span class=\"n\">zero_le_a</span>\n      <span class=\"n\">exact</span> <span class=\"n\">zero_le_b</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>To finish up the proof of <code>case inl</code>, we have to show:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nsmulâ</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">nsmulâ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nsmulâ</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">nsmulâ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nsmulâ</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">nsmulâ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">inst</span><span class=\"bp\">â</span><span class=\"o\">:</span> <span class=\"n\">AddCommGroupâ</span> <span class=\"n\">A</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">â¤</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">zero_le_a</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">â¤</span> <span class=\"n\">a</span>\n<span class=\"n\">zero_le_b</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">â¤</span> <span class=\"n\">b</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">â¤</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">â¤</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>What should I do here? It would be nice to know how to get Lean4 to recognize that <code>match n, m</code> will match with <code>Int.ofNat n, a</code> (since we showed that <code>h2: 0 â¤ n</code>). Is this on the right track? Am I way off?</p>\n<p>Thanks for any help!</p>",
        "id": 402785226,
        "sender_full_name": "Mike",
        "timestamp": 1700257894
    },
    {
        "content": "<p>If you are asking how I would do this proof, then I would definitely not be launching straight into it. I would plan it first. I would first prove the nsmul version, as warm-up (which presumably needs some induction). I would then make a design decision about whether I was going to prove  the three other subcases individually or try and push through some trick with signs and reduce to the nsmul case (i.e. proving that zsmul (-n) is the same as -nsmul (n) etc). I would build up a bunch of useful API. I wouldn't rush in, there is an art to this stuff. Do you want to work with -n or -1-n ? This needs some thought. </p>\n<p>As for your goal, I would have put <code>set n := a * b with hn</code> rather than just the bare <code>set</code>, and then I would do <code>rw hn</code> and then <code>exact?</code> to find the name of the lemma which says a&gt;=0 and b&gt;=0 implies ab&gt;=0. It'll be called <code>mul_nonneg</code> or some such thing.</p>",
        "id": 402786188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700258405
    },
    {
        "content": "<p>Let me quote <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> here:</p>\n<blockquote>\n<p>You are not asked to replace those sorries with proofs. If you insist on doing it then you will probably want to state and prove several intermediate lemmas about <code>nsmulâ</code> and <code>zsmulâ</code>.</p>\n</blockquote>",
        "id": 402786752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700258624
    },
    {
        "content": "<p>Thank <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> !<br>\nYour answers show me why it was left out of the tutorial. It seems like a big part of learning to \"think in Lean4\" is that you have to think much more strategically than usual. I've spent hours trying to figure out how to do something the wrong way, and then when I read the solutions given in the text, I realize that all I needed to do was perform some mathematical trick. I'm such a noob I usually assume there's some Lean4 magic that will do what I want, but I just don't know it yet...</p>\n<p>Also, how did you write in LaTeX on here?</p>",
        "id": 402787290,
        "sender_full_name": "Mike",
        "timestamp": 1700258903
    },
    {
        "content": "<p>Use <code>$$</code> where you would use <code>$</code>.</p>",
        "id": 402787602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700259073
    },
    {
        "content": "<p>And I'm sorry I didn't keep the proofs of those lemmas when I wrote that chapter. I knew I didn't want reader to waste time on that, but I should have known that some people would do it anyway. I remember I wrote those proofs, but then I simply deleted them <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>.</p>",
        "id": 402787792,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700259154
    },
    {
        "content": "<p>Mike is volunteering to fill them in though :-)</p>\n<p>Mike one very frustrating thing about working with integers at this super-basic level is that it's not much fun, because the second constructor Int.negSucc is mathematically quite pathological, the function from the naturals to the integers sending x to -1-x doesn't have many nice properties. I think that I would first prove that <code>zsmulâ (Int.negSucc n) m = -nsmulâ (n + 1) a</code>, apply this everywhere, decide how to deal with the issue that <code>(Int.negSucc n) * (Int.ofNat m)</code> might either be a <code>negSucc</code> or an <code>ofNat</code> depending on whether <code>m</code> = 0 or not so this is more case splits, yuk, this really is a messy business. In fact that fact that I don't even know which case I'm in pushes me over the edge, I'm not doing it this way, I've changed my mind.</p>\n<p>I think I would take the more mathematically sensible approach and avoid Int.negSucc completely. I would concoct some lemma saying that every integer a is either Int.ofNat p or -(Int.ofNat p) and I would do a case split on this. I would show that <code>zsmulâ (-Int.ofNat p) m = -nsmul_1 p m</code> and then I'd split into the four cases a&gt;=0, a&lt;=0 and b&gt;=0, b&lt;=0 (forget negSucc, it's a pain to deal with) and do each case by juggling signs. I'd prove them all as four separate lemmas and then wrap everything together so I get several short proofs instead of one long one.</p>",
        "id": 402789384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700259950
    },
    {
        "content": "<p>Clearly it wasn't that complicated when I wrote it. But I didn't want to have several intermediate lemmas distracting readers.</p>",
        "id": 402789546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700260023
    },
    {
        "content": "<p>Another approach is to just look in std or wherever all this will be actually done, to see how they did it.</p>",
        "id": 402789676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700260083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The pdf is an excellent intro to Lean4. There's just a ton of material to learn.</p>\n<p>I'm kind of obsessed with this problem because I'd like to know how to prove results that rely on pattern matching. For example, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zsmul_of_neg</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroupâ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">â¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">zsmulâ</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">zsmulâ</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zsmulâ</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">m</span>\n    <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Is there a way to use <code>cases lt_or_ge a 0</code> and then, for example, in the <code>lt</code> case, to have Lean4 know that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">zsmulâ</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">nsmulâ</span> <span class=\"n\">a</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>(because it's matching on <code>-a</code>)<br>\n?</p>",
        "id": 402797540,
        "sender_full_name": "Mike",
        "timestamp": 1700264227
    },
    {
        "content": "<p>That doesn't even typecheck, right?</p>",
        "id": 402805217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700268043
    },
    {
        "content": "<p>Why don't you go through some more of the book and come back to this when you're ready for it? You're right, there is a lot to learn!</p>",
        "id": 402805340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700268097
    }
]