[
    {
        "content": "<p>Could someone write an example proof by contradiction in Lean for the statement:<br>\nGiven that p is a natural number, then p^2 = 3 q^2 implies that p is a multiple of 3.</p>\n<p>Response from Chat GPT:</p>\n<p><a href=\"https://chat.openai.com/share/d22b0f24-56d8-4c35-8e93-a125d8592ea8\">https://chat.openai.com/share/d22b0f24-56d8-4c35-8e93-a125d8592ea8</a></p>",
        "id": 378578951,
        "sender_full_name": "Don Burgess",
        "timestamp": 1690311633
    },
    {
        "content": "<p>Have you managed to <em>state</em> the problem in lean? That's always a good place to start.</p>",
        "id": 378589582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690314625
    },
    {
        "content": "<p>just curious, why are you trying to do it by contradiction? it seems quite simple directly (but i haven't tried it so don't quote me).<br>\nhere's the problem statement if it helps, i can take a shot at it in a bit. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex₁</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378592483,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690315468
    },
    {
        "content": "<p>You <em>could</em> ask ChatGPT to prove it Lean. It will do it Lean 3, but I will get you started.</p>",
        "id": 378598846,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690317285
    },
    {
        "content": "<p>Proof by contradiction is a natural way to prove this. If p isn't a multiple of 3 then it has remainder 1 or 2 mod 3, so its square has remainder 1 mod 3 by a simple algebraic calculation and you're done. You need the theory of division with remainder but nothing else. In contrast the proof using that 3 is prime (which of course generalises to all prime numbers) is deeper because you need that if p divides ab then it divides a or b. To prove this (irreducibles are prime) has a little content (but of course we have it in mathlib). Also it's slightly harder to prove this claim constructively because it's a theorem of the form X implies Y or Z and the constructivists get a bit edgy with statements of this form.</p>",
        "id": 378602430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690318519
    },
    {
        "content": "<p>Thank you very much for your suggestions.</p>\n<p>One of my frustrations as a newbie is that when I apply a solution from lean3 I seem to get lost in the syntax of lean 4</p>",
        "id": 378603538,
        "sender_full_name": "Don Burgess",
        "timestamp": 1690318916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  wake up call that my math is super rusty and I should have probably tried the proof :)</p>",
        "id": 378613424,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690322950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634891\">Don Burgess</span> <a href=\"#narrow/stream/113489-new-members/topic/Example.20Proof/near/378603538\">said</a>:</p>\n<blockquote>\n<p>Thank you very much for your suggestions.</p>\n<p>One of my frustrations as a newbie is that when I apply a solution from lean3 I seem to get lost in the syntax of lean 4</p>\n</blockquote>\n<p>specifically which syntactic elements? Also new but I had the same issue because a lot of resources are for lean3; I <em>think</em> i've overcome most of the lean3 -&gt; lean4 confusion so maybe i can help :D</p>",
        "id": 378613678,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690323042
    },
    {
        "content": "<p>Finally a question on Zulip that is just basic enough that I can actually be useful!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- The theorem</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">p_squared_multiple_of_3_implies_p_multiple_of_3</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_divides_p_squared</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"c1\">-- We introduce the following notation</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span>\n\n  <span class=\"c1\">-- We can write p = 3k + r for some k and r</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_eq_3k_plus_r</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_add_mod</span> <span class=\"n\">p</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">-- We use this to rewrite our goal</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p_eq_3k_plus_r</span><span class=\"o\">]</span>\n\n  <span class=\"c1\">-- Calculate p^2 = 9k^2 + 6kr + r^2 = 3 (3k^2 + 2kr) + r^2</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_squared_eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p_eq_3k_plus_r</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">ring</span>\n\n  <span class=\"c1\">-- Our assumption of 3 ∣ p^2 implies 3 ∣ r^2</span>\n  <span class=\"k\">have</span> <span class=\"n\">remainder</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.dvd_add_right</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_right</span> <span class=\"mi\">3</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">p_squared_eq</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h_divides_p_squared</span>\n\n  <span class=\"c1\">-- We know that r is at most 2</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_lt</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">-- so r must be either 0, 1 or 2.</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">r</span>\n\n  <span class=\"c1\">-- if r = 0, then 3 ∣ p and we are done</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_mul_right</span> <span class=\"mi\">3</span> <span class=\"n\">k</span>\n\n  <span class=\"c1\">-- if r = 1, then 3 ∣ 1^2 which is false (contradiction)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">contradiction</span>\n\n  <span class=\"c1\">-- if r = 2, then 3 ∣ 2^2 which is false (contradiction)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">contradiction</span>\n\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 378643736,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690335947
    },
    {
        "content": "<p>Instead of writing one long proof you might want to consider writing several little lemmas each with short proofs which just all slot together.</p>",
        "id": 378694061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690357292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Example.20Proof/near/378694061\">said</a>:</p>\n<blockquote>\n<p>Instead of writing one long proof you might want to consider writing several little lemmas each with short proofs which just all slot together.</p>\n</blockquote>\n<p>I have tried to simplify to proof, so it is easier follow. Would you still recommend splitting the theorem up into to shorter lemmas? </p>\n<p>I guess the <code>have : remainder</code> could have been a lemma on its own as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">square_of_remainder_is_multiple</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_divides_p_squared</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378957010,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690409725
    },
    {
        "content": "<p>I am very impressed with the responsiveness and helpfulness of this community. <br>\nThank you Peter Hansen for the example proof -- very well done.<br>\nChat GPT's proof started out well but seemed to end wrong.<br>\nChat GPT's lean3 proof appeared nonsensical to me. <br>\n<span class=\"user-mention\" data-user-id=\"450939\">@Peter Hansen</span></p>",
        "id": 379546264,
        "sender_full_name": "Don Burgess",
        "timestamp": 1690557752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"450939\">@Peter Hansen</span> looking again at your proof I think it's fine. I was misled by the length, which is to a large extent caused by the helpful comments :-) Often proofs with many <code>have</code>s in benefit from being split up.</p>",
        "id": 379554161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690559089
    }
]