[
    {
        "content": "<p>Does anyone know how to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 401004529,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1699469597
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sqrt_eq_iff_sq_eq#doc\">docs#Real.sqrt_eq_iff_sq_eq</a> (I searched for <code>Real.sqrt</code> in the documentation and looked at what lemmas were there)</p>",
        "id": 401006032,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699470144
    },
    {
        "content": "<p>Let me moogle this for you: <a href=\"https://www.moogle.ai/search/raw?q=real%20power%20injectivity\">https://www.moogle.ai/search/raw?q=real%20power%20injectivity</a></p>",
        "id": 401006446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699470278
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.rpow_left_injOn#doc\">docs#Real.rpow_left_injOn</a> seems especially promising</p>",
        "id": 401006520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699470319
    },
    {
        "content": "<p>Actually your power is a Nat one, so <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pow_left_inj#doc\">docs#pow_left_inj</a> is better</p>",
        "id": 401006965,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699470515
    },
    {
        "content": "<p>One annoyance with <code>Real.sqrt_eq_iff_sq_eq</code> is that it's for natural number exponentiation instead of real number exponentiation...</p>\n<p>In a soon-to-come version of Lean, <code>y ^ 2</code> should elaborate with the natural number exponentiation rather than with real number exponentiation.</p>\n<p>Until then, you can use a hack to make it elaborate that way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- See issue lean4#2220</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">↔</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sqrt_eq_iff_sq_eq</span> <span class=\"n\">_</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ 0 ≤ 3</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 401007033,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699470546
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Real.sqrt_eq_iff_sq_eq</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>works without the trick about powers.</p>",
        "id": 401007579,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699470800
    },
    {
        "content": "<p>My suggestion using the more general lemma would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_left_inj</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">positivity</span>\n</code></pre></div>\n<p>which is longer but could be useful with more general goals.</p>",
        "id": 401007664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699470843
    },
    {
        "content": "<p>Anyway, the lesson to learn os that the result must already be in the library, in a form or another.</p>",
        "id": 401007745,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699470872
    },
    {
        "content": "<p>Moogle is back and we can ask: <a href=\"https://www.moogle.ai/search/raw?q=square%20equal%20iff%20square%20root%20equal\">https://www.moogle.ai/search/raw?q=square%20equal%20iff%20square%20root%20equal</a></p>",
        "id": 401013093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699473193
    },
    {
        "content": "<p>which turns up Real.sqrt_eq_iff_sq_eq</p>",
        "id": 401013121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699473213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as resolved.</p>",
        "id": 401032800,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699481964
    }
]