[
    {
        "content": "<p>I am working through the examples and  exercises in Theorem Proving in Lean 4 chapter 7 on inductive types.  There is a proof of <code>zero_add</code> about halfway through which looks reasonable and syntactic to me, but which doesn't parse when I put it in my buffer.  </p>\n<p>Is there some weird setting I accidently toggled?</p>\n<p>Note if I change the <code>rfl</code> on the fist line of the calc block to a <code>by rfl</code> then it works fine.  I guess there's something related to term mode vs tactic mode?</p>\n<p><a href=\"/user_uploads/3121/XKuOQJXCNSSYppUarqnlzOgu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XKuOQJXCNSSYppUarqnlzOgu/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XKuOQJXCNSSYppUarqnlzOgu/image.png\"></a></div>",
        "id": 355579875,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1683138865
    },
    {
        "content": "<p>Can you post code rather than a screenshot? See <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for more details. I can't cut and paste a screenshot so I'm less likely to think about your question.</p>",
        "id": 355582870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683139771
    },
    {
        "content": "<p>Sure, here is the code, which is generated from the \"copy\" button in a code block in TPIL4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- try it</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.recOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n   <span class=\"n\">n</span>\n   <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"k\">from</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n               <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">])</span>\n<span class=\"kd\">end</span> <span class=\"n\">Hidden</span>\n</code></pre></div>",
        "id": 355583155,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1683139871
    },
    {
        "content": "<p>I think the syntax for <code>calc</code> has changed a little bit in the meantime, and now the <code>_</code> has to line up with the previous equation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.recOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n   <span class=\"n\">n</span>\n   <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"k\">from</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">_</span>          <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 355584579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683140311
    },
    {
        "content": "<p>But changing <code>rfl</code> to <code>by rfl</code> also fixes it -- does that surprise you Kyle?</p>",
        "id": 355585565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683140611
    },
    {
        "content": "<p>Yep, Lean is a source of mysteries</p>",
        "id": 355587157,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683141115
    },
    {
        "content": "<p>(My guess: <code>rfl</code> by itself could theoretically take arguments, but <code>by rfl</code> cannot, which forces the <code>_</code> to be part of the next equation.)</p>",
        "id": 355587363,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683141175
    },
    {
        "content": "<p>(Hmm, but <code>by exact rfl</code> works too...)</p>",
        "id": 355587487,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683141216
    },
    {
        "content": "<p>Awesome, thanks.  If it makes sense I'll submit an errata pull request for the book.</p>",
        "id": 355602155,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1683145915
    }
]