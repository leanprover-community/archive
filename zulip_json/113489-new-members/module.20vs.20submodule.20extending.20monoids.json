[
    {
        "content": "<p><code>module</code> does <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/module/basic.lean#L51-52\">NOT extend</a> <code>add_comm_group</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext, protect_proj]</span> <span class=\"kd\">class</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Yet submodule <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/module/submodule/basic.lean#L42\">DOES extend</a> <code>add_submonoid</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v.</span>\n</code></pre></div>\n<p>Why this difference?</p>",
        "id": 365635798,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686591738
    },
    {
        "content": "<p>The \"don't extend things with different number of parameters\" rule only applies to <code>class</code> not <code>structure</code></p>",
        "id": 365635896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686591767
    },
    {
        "content": "<p>And Martin, the reason is that Lean doesn't do type class inference on structures, only on <code>class</code>es. So the issue I mentioned in the other thread never arises.</p>",
        "id": 365636503,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686591915
    },
    {
        "content": "<p>Ah thanks to both of you!</p>\n<p>So why don't we want type class inference on <code>submodules</code>?  i.e. why is <code>submodule</code> a structure when <code>module</code> is a class?  I guess <code>submodule.module</code> is the most useful structure, and <code>submodule</code> itself isn't used much?</p>\n<p>Any guidance on when to use <code>structure</code> and when <code>class</code>?</p>",
        "id": 365637806,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686592279
    },
    {
        "content": "<p>What would you want <code>example : submodule ℝ (ℝ × ℝ) := by apply_instance</code> to find?</p>",
        "id": 365644138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686593888
    },
    {
        "content": "<p><code>class</code> should be used when <code>by apply_instance</code> makes sense, and it only makes sense when there's only one reasonable thing for it to produce</p>",
        "id": 365644285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686593933
    },
    {
        "content": "<p>By comparison,  <code>example : module ℝ (ℝ × ℝ) := by apply_instance</code> has an obvious answer; it finds the module defined by <code>c • (x, y) = (c • x, c • y)</code></p>",
        "id": 365644757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686594054
    },
    {
        "content": "<p>Ah, because the carrier isn't a type, but rather a field.</p>",
        "id": 365646405,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686594435
    },
    {
        "content": "<p>(Sorry, \"field\" in the sense of programming, not abstract algebra.  :) )</p>",
        "id": 365646542,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686594472
    },
    {
        "content": "<p>Yes, note that <code>submodule R M</code> is the <em>type</em> of <code>R</code>-submodules of an <code>R</code>-module <code>M</code>, not a specific submodule. For that, a term of that type, namely<code>S : submodule R M</code>, is what you want.</p>",
        "id": 365650077,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686595377
    },
    {
        "content": "<p>However, note that submodules can themselves be viewed as modules via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.module\">docs#submodule.module</a>. In doing this, the <em>term</em> <code>S : submodule R M</code> is promoted to a <em>type</em> <code>↥S</code> (where the arrow comes from a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_to_sort\">docs#has_coe_to_sort</a> instance).</p>",
        "id": 365650595,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686595518
    },
    {
        "content": "<p>This is somewhat backwards compared to the way textbooks usually introduce subobjects. A textbook generally says \"a submodule is a subset which is also a module with the inherited operations\", and then the book proves a lemma of the form: \"a subset closed under <code>+</code> and <code>•</code> and containing <code>0</code> is a submodule\". In Lean, we completely reverse this, and I think it's actually more sensible (because a term of type <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a> always carries around a reference to the ambient type, as it should).</p>",
        "id": 365651308,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686595711
    },
    {
        "content": "<p>I agree.  In practice, it's much more common to use the conditions to show your subset is indeed a subspace, rather than the other way around.  At least from my hazy memory from years ago.  :)</p>",
        "id": 365651782,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686595852
    },
    {
        "content": "<p>Next question: why does <code>subsemigroup</code> take a magma and not a group?  It seems it's possible to construct a <code>subsemigroup</code> where the operation isn't associative, and therefore isn't actually a semigroup?</p>",
        "id": 365651980,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686595909
    },
    {
        "content": "<p>Is this like the module/vector space distinction, where once we define a module, no other definition is needed for a vector space, because it's just a restriction on <code>R</code> and doesn't change the <code>module</code> stuff?</p>",
        "id": 365652302,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1686595984
    },
    {
        "content": "<p>Indeed, it's just because we think of subsemigroups as the more common use case, and thus they should inherit the name as opposed to submagma.</p>",
        "id": 365652352,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686595998
    }
]