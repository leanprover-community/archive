[
    {
        "content": "<p>I was trying to define HashMap using <code>Std.mkHashMap</code> but it's unable to derive Hashable instance for the type which makes sense because I haven't  suggested the type. I am not sure how I should do it.</p>\n<p>I know it should be something like the following (from FPIL) just for String</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Hashable</span> <span class=\"n\">for</span> <span class=\"n\">Pos</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Hashable</span><span class=\"o\">,</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">NonEmptyList</span>\n</code></pre></div>\n<p>But I don't know how to use this knowledge, any help would be great, thanks!</p>",
        "id": 408714040,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702947024
    },
    {
        "content": "<p>I tried doing <code>deriving instance BEq, Hashable for String</code> it returns an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Hashable</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 408736939,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702955031
    },
    {
        "content": "<p>If you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, then it will be easier for others to help you</p>",
        "id": 408870944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702979174
    },
    {
        "content": "<p>I'm trying to make a hashmap using eval</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Std.mkHashMap</span>\n</code></pre></div>",
        "id": 408871163,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979225
    },
    {
        "content": "<p>I'm not sure if there is another working example</p>",
        "id": 408871405,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979278
    },
    {
        "content": "<p>it might help to include relevant imports, did you try writing that in its own file?</p>",
        "id": 408871541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702979299
    },
    {
        "content": "<p>yes, the only thing I imported is <code>Std</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filterNoise</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">filterChars</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ch</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">ch</span>\n  <span class=\"k\">let</span> <span class=\"n\">filterString</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">charList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">str.toList</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filterMap</span> <span class=\"n\">filterChars</span>\n    <span class=\"n\">charList.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"n\">String.push</span>\n  <span class=\"n\">lst.map</span> <span class=\"n\">filterString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseLine</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">line.splitOn</span> <span class=\"s2\">\" \"</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">filterNoise</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Std.mkHashMap</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">String.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ch</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">ch</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">':'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">','</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">';'</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">' '</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ch</span>\n<span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ex.splitOn</span> <span class=\"s2\">\" \"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is the file I am trying to implement</p>",
        "id": 408871849,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979362
    },
    {
        "content": "<p>(note that <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is a link that tells you to, among other things, include relevant imports)</p>",
        "id": 408871852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702979362
    },
    {
        "content": "<p>I don't know how to use a HashMap</p>",
        "id": 408872010,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979395
    },
    {
        "content": "<p>What type of map are you trying to create?</p>",
        "id": 408872053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702979402
    },
    {
        "content": "<p><code>String -&gt; String</code></p>",
        "id": 408872147,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979415
    },
    {
        "content": "<p>Then tell Lean that via <code>(mkHashMap : HashMap String String)</code></p>",
        "id": 408872402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702979467
    },
    {
        "content": "<p>so key is <code>String</code> and value is <code>String</code></p>",
        "id": 408872413,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979467
    },
    {
        "content": "<p>Or you can pass those as arguments directly to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.mkHashMap#doc\">docs#Std.mkHashMap</a></p>",
        "id": 408872608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702979502
    },
    {
        "content": "<p>like this : <code>#eval Std.mkHashMap String String</code> ?</p>",
        "id": 408872801,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979527
    },
    {
        "content": "<p>oh ok</p>",
        "id": 408873072,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979576
    },
    {
        "content": "<p><code>mkHashMap (Î± := String) (Î² := String)</code></p>",
        "id": 408873214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702979592
    },
    {
        "content": "<p>The arguments are implicit (in <code>{}</code>), so you can't write them the usual way and have to pass them by name</p>",
        "id": 408873406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702979624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Std.2EHashMap/near/408873214\">said</a>:</p>\n<blockquote>\n<p><code>mkHashMap (Î± := String) (Î² := String)</code></p>\n</blockquote>\n<p>Thanks I'm sorry for the stupid question, this makes it clearer</p>",
        "id": 408873498,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Std.2EHashMap/near/408872402\">said</a>:</p>\n<blockquote>\n<p>Then tell Lean that via <code>(mkHashMap : HashMap String String)</code></p>\n</blockquote>\n<p>But this spelling is arguably more idiomatic anyway</p>",
        "id": 408873754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702979674
    },
    {
        "content": "<p>so when I do <code>#eval Std.mkHashMap (Î± := String) (Î² := String)</code> I get the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expression</span>\n  <span class=\"n\">Std.mkHashMap</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span>\n<span class=\"n\">but</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Lean.MetaEval</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">synthesized</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"kd\">instance</span> <span class=\"n\">instructs</span> <span class=\"n\">Lean</span> <span class=\"n\">on</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">display</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">recall</span> <span class=\"n\">that</span> <span class=\"n\">any</span> <span class=\"n\">type</span>\n</code></pre></div>",
        "id": 408874068,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979719
    },
    {
        "content": "<p>and doing this <code>#eval Std.mkHashMap : Std.HashMap String String</code> results in the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Hashable</span> <span class=\"bp\">?</span><span class=\"n\">m.724</span>\n</code></pre></div>",
        "id": 408874558,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702979788
    },
    {
        "content": "<p>The first error says Lean doesn't know how to print a hashmap, you'll probably need to iterate over its elements to print it (but the command successfully constructed a hashmap)</p>",
        "id": 408876796,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702980122
    },
    {
        "content": "<p>The second one is probably due to lack of parentheses</p>",
        "id": 408877141,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702980164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Std.2EHashMap/near/408876796\">said</a>:</p>\n<blockquote>\n<p>The first error says Lean doesn't know how to print a hashmap, you'll probably need to iterate over its elements to print it (but the command successfully constructed a hashmap)</p>\n</blockquote>\n<p>ok <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 408877153,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702980166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Std.2EHashMap/near/408877141\">said</a>:</p>\n<blockquote>\n<p>The second one is probably due to lack of parentheses</p>\n</blockquote>\n<p>so I don't where to add the parantheses but thanks! I'll use the first way right now</p>",
        "id": 408877958,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702980280
    },
    {
        "content": "<p>I was thinking of <code>#eval (Std.mkHashMap : Std.HashMap String String)</code></p>",
        "id": 408878464,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1702980364
    },
    {
        "content": "<p>note that the syntax for type ascription is <code>(expr : type)</code>, the parentheses are a mandatory part of the syntax</p>",
        "id": 408878818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702980423
    },
    {
        "content": "<p>ok so it seems like I am able to make a HashMap and insert elements to it.<br>\nIs there a way to generate an equivalent of what a <code>show</code> instance in Haskell for HashMaps in Lean?</p>",
        "id": 408880169,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702980630
    },
    {
        "content": "<p>that's what the error message is suggesting</p>",
        "id": 408880249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702980647
    },
    {
        "content": "<p>the easiest method is <code>deriving Repr</code> on the type</p>",
        "id": 408880402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702980676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Std.2EHashMap/near/408880402\">said</a>:</p>\n<blockquote>\n<p>the easiest method is <code>deriving Repr</code> on the type</p>\n</blockquote>\n<p>something like this <code>deriving instance Repr for Std.HashMap String String</code> ?</p>",
        "id": 408882914,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702981082
    },
    {
        "content": "<p>unrelated but a tiny stupid question : How does one do qualified imports in Lean?</p>",
        "id": 408933958,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702992484
    },
    {
        "content": "<p>This does not exist</p>",
        "id": 408934196,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1702992575
    },
    {
        "content": "<p>oh ok, thanks I did not know that</p>",
        "id": 408934238,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702992594
    },
    {
        "content": "<p>qualified how?</p>",
        "id": 408934346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702992620
    },
    {
        "content": "<p>like in haskell I use qualified imports to shorten names : <code>import qualified Data.List as L</code><br>\nso I want to import only HashMap from Std and shorten it to <code>HMap</code> (just an example) how would I do that?</p>",
        "id": 408934718,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702992751
    },
    {
        "content": "<p>that's kind of what I needed qualified imports for</p>",
        "id": 408934759,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702992772
    },
    {
        "content": "<p>in lean namespaces and imports are not connected</p>",
        "id": 408935340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702992998
    },
    {
        "content": "<p>you would do that using <code>open</code> instead of <code>import</code></p>",
        "id": 408935369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702993015
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Std</span> <span class=\"kn\">renaming</span> <span class=\"n\">HashMap</span> <span class=\"bp\">â†’</span> <span class=\"n\">HMap</span>\n<span class=\"k\">#check</span> <span class=\"n\">HMap</span>\n</code></pre></div>",
        "id": 408935525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702993073
    },
    {
        "content": "<p>Oh cool! Thanks!</p>",
        "id": 408936028,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702993265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ðŸ¦€ (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Std.2EHashMap/near/408882914\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Std.2EHashMap/near/408880402\">said</a>:</p>\n<blockquote>\n<p>the easiest method is <code>deriving Repr</code> on the type</p>\n</blockquote>\n<p>something like this <code>deriving instance Repr for Std.HashMap String String</code> ?</p>\n</blockquote>\n<p>btw this didn't work</p>",
        "id": 408936069,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1702993285
    },
    {
        "content": "<p>this is a bit of abuse of the repr class since it's supposed to be an actual lean expression (more or less), but you can do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">Î²</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap</span> <span class=\"n\">Î±</span> <span class=\"n\">Î²</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">bracket</span> <span class=\"s2\">\"{\"</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">joinSep</span> <span class=\"o\">(</span><span class=\"n\">m.toList.map</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{repr a} â†¦ {repr b}\"</span><span class=\"o\">)</span> <span class=\"s2\">\", \"</span><span class=\"o\">)</span> <span class=\"s2\">\"}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Std.mkHashMap.insert</span> <span class=\"s2\">\"hi\"</span> <span class=\"s2\">\"there\"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">insert</span> <span class=\"s2\">\"something\"</span> <span class=\"s2\">\"else\"</span>\n<span class=\"c1\">-- {\"something\" â†¦ \"else\", \"hi\" â†¦ \"there\"}</span>\n</code></pre></div>",
        "id": 408937453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702993704
    }
]