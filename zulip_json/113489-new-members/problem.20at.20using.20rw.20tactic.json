[
    {
        "content": "<p>Hi all, I dont know why lean flagged an error when I trying to using rw tactic with conmutativaProducto definition if it is a equality apparently . Im trying to use m n implicit and explicit arguments like integers and error persists despite p and (m+n) are integers too. Where is the error and how can it be corrected? I know that this definition is already in mathlib but I would prefer to demonstrate this example using this simple definition that I think is not bad. your help please</p>\n<p>\\lean <br>\ndef conmutativaProducto (m n : ℤ) := m * n = n * m <br>\nexample (m n p : ℤ) : (m + n) * p = m * p + n * p :=<br>\nbegin <br>\n  calc (m + n) * p = p * (m + n) : by {rw conmutativaProducto (m + n) p}<br>\n  ... = p * m + p * n : by <br>\nend</p>",
        "id": 363121386,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1685727175
    },
    {
        "content": "<p>when I change the word def by lemma it worked but why with def not? definitions are sentences that no need be proved or rw only works with theorems and lemmas and if need works rw with def is there a way?</p>",
        "id": 363143229,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1685732956
    },
    {
        "content": "<p>Please read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. :-)</p>",
        "id": 364437072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686197179
    },
    {
        "content": "<p>Note that your <code>conmutativaProducto</code> is the <em>statement</em> the multiplication is commutative on the integers, not a proof of this fact! So you certainly can't rewrite by it (or use it for anything useful.)</p>",
        "id": 364437134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686197226
    },
    {
        "content": "<p>You need to write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">conmutativaProducto</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;</span><span class=\"n\">proof</span><span class=\"bp\">-</span><span class=\"n\">goes</span><span class=\"bp\">-</span><span class=\"n\">here</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 364437173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686197266
    },
    {
        "content": "<p>notice the different position of <code>:</code> and <code>:=</code> relative to what you have written!</p>",
        "id": 364437231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686197284
    }
]