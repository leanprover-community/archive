[
    {
        "content": "<p>I used a Lean file with \"import Mathlib\", and repeatedly different non-well-typed statements led to Lean using 100% CPU and seemingly not terminating (for at least some minutes). Moreover, removing the relevant line did not stop this Lean process, and adding it back in increased the CPU usage by another 100%. The only way to stop it seemed to be to kill the Lean process externally.<br>\nReplacing the import Mathlib by importing only the parts I needed resolved the issue. I could reproduce this behavior both on Manjaro and Linux Mint. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> suggested I report it here. Here is a minimal working example (the last line causing the problems), but I also have different examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ATree</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"n\">isTree</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">ATree</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">T.carrier</span>\n</code></pre></div>",
        "id": 392272225,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1695284652
    },
    {
        "content": "<p>In my very brief experience of using <code>import Mathlib</code>, very long compilation times were normal but settled down eventually (as long as I didn't modify anything within Mathlib itself and only used it in my own code)</p>",
        "id": 392274790,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695285550
    },
    {
        "content": "<p><code>import Mathlib</code> is not the problem, that compiles super-quickly in Lean 4 (assuming you've got your project set up correctly with a fully-compiled mathlib). I need to add <code>variable (A : Type)</code> to make this a full MWE but Lean hangs on the instance for me.</p>",
        "id": 392275044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695285621
    },
    {
        "content": "<p>With just <code>import Mathlib.Data.Set.Basic</code> I get the expected error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>application type mismatch\n  CoeFun (ATree A) (Set (List A))\nargument\n  Set (List A)\nhas type\n  Type : Type 1\nbut is expected to have type\n  outParam (ATree A → Sort ?u.427) : Type ?u.427\n</code></pre></div>",
        "id": 392275321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695285723
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeFun#doc\">docs#CoeFun</a> doesn't make any sense here</p>",
        "id": 392276276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695286027
    },
    {
        "content": "<p>I think there must be a bad coercion instance somewhere</p>",
        "id": 392276930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695286238
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Heyting.Regular</span>\n</code></pre></div>\n<p>is the bad import.</p>",
        "id": 392277175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695286326
    },
    {
        "content": "<p>How did you find that so quickly?</p>",
        "id": 392277229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695286337
    },
    {
        "content": "<p>blind luck</p>",
        "id": 392277242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695286344
    },
    {
        "content": "<p>I copied the entire <code>Mathlib.lean</code> as imports to the file and then bisected. The big problem with this approach is that when you finally get it down to one import, that import file is not the problem because it imports 5 other files which import 25 other files etc etc, so the search has only just begun. So I bisected down to that import, and then replaced it with its only import and the problem went away and I was like \"wooah, it must be my birthday or something\"</p>",
        "id": 392277520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695286444
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Heyting.Regular.instCoeRegular#doc\">docs#Heyting.Regular.instCoeRegular</a> is the bad instance</p>",
        "id": 392277566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695286463
    },
    {
        "content": "<p>In that <code>attribute [-instance] Heyting.Regular.instCoeRegular</code> makes the problem go away</p>",
        "id": 392277690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695286519
    },
    {
        "content": "<p>The instance looks harmless though</p>",
        "id": 392277715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695286526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/import.20Mathlib.20leads.20to.20Lean.20not.20terminating/near/392277242\">said</a>:</p>\n<blockquote>\n<p>blind luck</p>\n</blockquote>\n<p>Oh, the correct answer is actually \"problem happens to be in a leaf file\" (which might also explain why it wasn't spotted before)</p>",
        "id": 392278007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695286643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/import.20Mathlib.20leads.20to.20Lean.20not.20terminating/near/392277715\">said</a>:</p>\n<blockquote>\n<p>The instance looks harmless though</p>\n</blockquote>\n<p>Shouldn't it be marked as <code>CoeHead</code> or <code>CoeTail</code> or something? It clearly is not harmless...</p>",
        "id": 392310342,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695298817
    },
    {
        "content": "<p>yes, it should be a <code>CoeOut</code></p>",
        "id": 392311397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695299248
    },
    {
        "content": "<p>Even without that instance, it takes 3+ seconds to fail, which is kinda unfortunate. It's quite sad that all coercions take 1-2 seconds to fail, even if they are clearly nonsense, like between <code>Set (List A) =?= sorryAx (ATree A → Sort ?u.535) true T</code></p>",
        "id": 392312067,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695299509
    },
    {
        "content": "<p>The failure takes almost a thousand steps, each costing 0-30ms.</p>",
        "id": 392312342,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695299607
    },
    {
        "content": "<p>Floris you're old enough to remember when attempting to coerce from Int to Nat in Lean 3 would time out; hopefully now, like then, we'll be able to solve these problems.</p>",
        "id": 392312535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695299674
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7293\">#7293</a></p>",
        "id": 392313029,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695299885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/import.20Mathlib.20leads.20to.20Lean.20not.20terminating/near/392312535\">said</a>:</p>\n<blockquote>\n<p>Floris you're old enough to remember when attempting to coerce from Int to Nat in Lean 3 would time out; hopefully now, like then, we'll be able to solve these problems.</p>\n</blockquote>\n<p>I hope so. This is causing quite a lot of issues.</p>",
        "id": 392313293,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695300004
    },
    {
        "content": "<p>And of course we should write Lean 4 linters guarding against bad coercions like the one above.</p>",
        "id": 392313428,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695300063
    },
    {
        "content": "<p>Is the problem that Lean is trying to coerce to <code>Set (List A)</code>, so it tries to find <code>Regular (Set (List A))</code>, which it thinks it can get from <code>Regular (Regular (Set (List A)))</code>...?</p>",
        "id": 392329809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695305400
    },
    {
        "content": "<p>I am quite sure that was exactly what was happening.</p>",
        "id": 392384461,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695324825
    },
    {
        "content": "<p>We had linters in Lean 3 against such coercions (although I forgot which of <code>Foo A -&gt; A</code> or <code>A -&gt; Bar A</code> was problematic).</p>",
        "id": 392384600,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695324875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/import.20Mathlib.20leads.20to.20Lean.20not.20terminating/near/392277520\">said</a>:</p>\n<blockquote>\n<p>I copied the entire <code>Mathlib.lean</code> as imports to the file and then bisected. The big problem with this approach is that when you finally get it down to one import, that import file is not the problem because it imports 5 other files which import 25 other files etc etc, so the search has only just begun.</p>\n</blockquote>\n<p>Perhaps we should have (a script that generates) a version of <code>Mathlib.lean</code> with the imports topologically sorted. So that <code>A.lean</code> comes after <code>B.lean</code> if <code>A</code> imports <code>B</code>. Might be a useful first step towards a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>-ifier.</p>",
        "id": 392460889,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1695369367
    }
]