[
    {
        "content": "<p>I am trying to generate a random bitvec using the mathlib <code>control.random</code> however my lack of knowledge with monads is giving me a hard time trying to make it happen. I basically need to generate something random and print it to get myself started:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">control.random</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">random_bitvec</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>however that will not return me the inner generated number, i think it was not generated yet with that code so it should be maybe something more as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">random</span><span class=\"o\">(</span><span class=\"n\">bitvec</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>however i was not able to make it work yet. any help or code reference will be very appreciated. thanks.</p>",
        "id": 294278037,
        "sender_full_name": "Alfredo Garcia",
        "timestamp": 1660919418
    },
    {
        "content": "<p>I think in Lean 3  (this is Lean 3, right?), that <code>#eval</code> only runs deterministic pure code, so you can’t have a function which is random in there.  However, <code>main : IO unit</code> (which can be run from the command line) does allow nondeterministic code.  Also, tactics can be nondeterministic (but shouldn’t be for any kind of tactic you intend to use permanently in a proof).</p>\n<p>It would help if you explain the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem, namely what are you trying to use a random number generator for in Lean?</p>",
        "id": 294334295,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660931411
    },
    {
        "content": "<p><a href=\"https://agentultra.github.io/lean-for-hackers/\">https://agentultra.github.io/lean-for-hackers/</a> Is a good resource for how to write code in Lean 3 which runs like normal software, including having IO and non-deterministic effects.  It explains the IO monad too.  (I however wouldn’t use their hack for random numbers.  I think there are better ways to get random numbers in the IO monad, although I’m not 100% sure.)</p>",
        "id": 294335140,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660931708
    },
    {
        "content": "<p>Also all of this is easier in Lean 4, since Lean 4 is intended as a real programming language.</p>",
        "id": 294335608,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660931848
    },
    {
        "content": "<p>For lean 4: <a href=\"https://leanprover.github.io/functional_programming_in_lean\">https://leanprover.github.io/functional_programming_in_lean</a></p>",
        "id": 294336072,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660931989
    },
    {
        "content": "<p>hey there, thank you for the response. i am basically doing some cryptography experiments, proving some basic stuff and creating some example algorithms so is mostly just for learning purposes.<br>\ni am aware lean4 is easier for this kind of stuff but as i am also interested in mathlib, so i am working with lean3 which is harder for some of my purposes. </p>\n<p>thank you for the lean for hackers link, i think that will help.</p>",
        "id": 294344649,
        "sender_full_name": "Alfredo Garcia",
        "timestamp": 1660935347
    },
    {
        "content": "<p>Just to note, since you mentioned cryptography, you can’t prove anything about a nondeterministic <code>meta</code> function in Lean.  And this makes sense since you can’t even prove <code>my_random_nat = my_random_nat</code>.  (Now you could prove something about a deterministic random number generator which say takes a key and returns both a psuedo-random value and a new key.)</p>",
        "id": 294351757,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660938374
    },
    {
        "content": "<p>Oh, it looks like Lean does have deterministic pseudo-randomness which you can use inside pure functions.  See the discussion in  <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/random.20number.20generator\">#Is there code for X? &gt; random number generator</a></p>",
        "id": 294352874,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660938873
    },
    {
        "content": "<p>that is almost exactly what i was looking for, thank you very much :)</p>",
        "id": 294354575,
        "sender_full_name": "Alfredo Garcia",
        "timestamp": 1660939505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"476482\">Alfredo Garcia</span> has marked this topic as resolved.</p>",
        "id": 294354600,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660939516
    },
    {
        "content": "<p>The way you use it is that you first make a generator using a seed.  The every time you need a random number you use, say, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rand_nat\">docs#rand_nat</a> giving it the generator as an input.  You get a new generator as an output.  And you should only ever use a generator once.  Every function you write which has a random effect, should take an input generator and return a new generator.</p>",
        "id": 294354735,
        "sender_full_name": "Jason Rute",
        "timestamp": 1660939563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> has marked this topic as resolved.</p>",
        "id": 294354954,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660939648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20random.20number.20generator/near/294334295\">said</a>:</p>\n<blockquote>\n<p>I think in Lean 3  (this is Lean 3, right?), that <code>#eval</code> only runs deterministic pure code, so you can’t have a function which is random in there. </p>\n</blockquote>\n<p>I believe you can run <code>tactic A</code> and <code>io A</code> actions in lean 3 <code>#eval</code> just fine</p>",
        "id": 294400988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660978629
    }
]