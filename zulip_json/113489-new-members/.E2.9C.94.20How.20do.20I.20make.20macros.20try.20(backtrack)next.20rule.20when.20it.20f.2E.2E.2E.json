[
    {
        "content": "<p>I'm trying to automate my proofs with macros, and here is a MWE of what I'm trying to overcome:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ind</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">prop</span><span class=\"o\">:</span> <span class=\"n\">ind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">Case1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span>  <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">ind.A</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Case2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">ind.A</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"doit\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">prop.Case2</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">prop.Case1</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n<span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"wrapper\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">repeat</span> <span class=\"n\">doit</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sample</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">ind.A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">wrapper</span>\n</code></pre></div>\n<p>The macro <code>wrapper</code> and <code>doit</code> won't work out for <code>sample</code> because I put <code>apply prop.Case2</code> before <code>apply prop.Case1</code>, and the proof of <code>sample</code> will stuck with a goal of <code>⊢ False</code> in its current form.<br>\nIs there a way I could ask <code>doit</code> or <code>wrapper</code> to try next rule when it is \"obvious\" that certain path will fail? e.g. is there something I can append after the <code>&lt;;&gt; simp</code> to fail the tactic application so that it moves on to the next branch but does nothing if the goal is proved?</p>",
        "id": 399480998,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698751780
    },
    {
        "content": "<p>try?</p>",
        "id": 399498181,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698752776
    },
    {
        "content": "<p><code>try (doit |wrapper)</code></p>",
        "id": 399498269,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698752810
    },
    {
        "content": "<p>It looks like it works on <code>sample</code> fine? Do you have an example where it fails</p>",
        "id": 399498920,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698753059
    },
    {
        "content": "<p>sorry my bad, it turns out that I missed out one <code>import</code> line, which is the <code>import Mathlib.Data.Finsupp.Defs</code>, the full file is as follows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Defs</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ind</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">prop</span><span class=\"o\">:</span> <span class=\"n\">ind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">Case1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span>  <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">ind.A</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Case2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">ind.A</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"doit\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">prop.Case2</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">prop.Case1</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n<span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"wrapper\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">repeat</span> <span class=\"n\">doit</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sample</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">ind.A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">wrapper</span>\n</code></pre></div>",
        "id": 399515380,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698756940
    },
    {
        "content": "<p>I see, the issue is that the first succeeds, but with the import simp doesn't fail as it \"makes progress\" but leaves you with a false goal</p>",
        "id": 399516152,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698757203
    },
    {
        "content": "<p>One thing you can do is put <code> &lt;;&gt; done</code> after the <code>simp</code>s, that way the line fails if simp didn't finish it</p>",
        "id": 399516279,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698757234
    },
    {
        "content": "<p>But if you want them to make partial progress but somehow know which one is more promising that seems much harder</p>",
        "id": 399516430,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698757276
    },
    {
        "content": "<p>Right, I see. I think for now, being able to fail out of a branch is good enough for me. Thanks!</p>",
        "id": 399520745,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698758760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20make.20macros.20try.20.28backtrack.29next.20rule.20when.20it.20fails.3F/near/399498269\">said</a>:</p>\n<blockquote>\n<p><code>try (doit |wrapper)</code></p>\n</blockquote>\n<p>Yeah, I tried <code>try</code>, but it seems that <code>try</code> won't fail out of the partial progress case. Thanks for the suggestion!</p>",
        "id": 399521408,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698758937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Zwu</span> has marked this topic as resolved.</p>",
        "id": 399521446,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698758949
    },
    {
        "content": "<p>Maybe you are looking for this: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Backtrack.html\">backtrack tactic</a></p>",
        "id": 399986645,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698944606
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> It's part of the tactic macro framework that each macro expansion is tried one at a time until one succeeds. What you're linking to is a \"meta tactic\" (vs an \"interactive tactic\"), which is code that other tactics themselves can run.)</p>",
        "id": 399993255,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698947049
    },
    {
        "content": "<p>Oh okay, got it</p>",
        "id": 399994523,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698947571
    },
    {
        "content": "<p>I feel like <code>aesop</code> might be another option?</p>",
        "id": 400058051,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698982615
    }
]