[
    {
        "content": "<p>I'm doing the \"Mathematics in Lean\" (<a href=\"https://github.com/leanprover-community/mathematics_in_lean.git\">https://github.com/leanprover-community/mathematics_in_lean.git</a>). In Basics/SO3, there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ....</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- apply?</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sq_nonneg</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>being presented as an example that should just work. However, I get the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">sq_nonneg</span> <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">instOfNat</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>If I try to \"make the 2 a <code>Nat</code>\", it still doesn't work with error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">sq_nonneg</span> <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 382352204,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691325569
    },
    {
        "content": "<p>There is an issue where lean 4 wants to interpret powers as coming from the same type (i.e, a real to a real rather than a real to a nat), if you add the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>above the lemma it should hopefully fix it, but we should also fix this example in the book somehow</p>",
        "id": 382354690,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691326245
    },
    {
        "content": "<p>Thanks! Why does it still not work if I explicitly say <code>(2 : Nat)</code>?</p>",
        "id": 382355892,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691326572
    },
    {
        "content": "<p>Also, the <code>macro_rules</code> just a applies a macro to (\"locally\")  everything? Wow, that's some scary stuff</p>",
        "id": 382356761,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691326815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20mismatch.20.60sq_nonneg.60/near/382355892\">said</a>:</p>\n<blockquote>\n<p>Thanks! Why does it still not work if I explicitly say <code>(2 : Nat)</code>?</p>\n</blockquote>\n<p>Well as you saw Lean does treat 2 as a natural in that case, but it really wants to interpret the exponent as a real number so it then inserts a coercion (the up arrow) which is the natural map from the naturals to the reals, so that it ends up with the real exponential function instead.<br>\nMaybe its worth noting that the map which takes natural exponents is defined in any monoid by simply multiplying several times, but the real exponential function is defined in terms of <code>exp</code> so they are really quite different even though you can show these two different versions of exponentiating are the same they won't be equal by definition so you'll have to apply some lemma to translate one to the other.</p>",
        "id": 382368795,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691330204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20mismatch.20.60sq_nonneg.60/near/382356761\">said</a>:</p>\n<blockquote>\n<p>Also, the <code>macro_rules</code> just a applies a macro to (\"locally\")  everything? Wow, that's some scary stuff</p>\n</blockquote>\n<p>Indeed the Lean 4 macro system is very powerful, which is very useful as it means you can modify / extend the system using macros in many ways (for instance if you wanted to use the <code>^</code> notation for something completely different you could). But it does come with some hazards if you aren't sure what macros are being applied in your file. You should always be able to right click and go to the definition of any symbol.</p>",
        "id": 382372799,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691331417
    },
    {
        "content": "<p>That said I'm actually a bit confused how you are seeing the error you are seeing</p>",
        "id": 382372859,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691331431
    },
    {
        "content": "<p>I can't reproduce it, how are you opening the mathematics in lean project?</p>",
        "id": 382372912,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691331446
    },
    {
        "content": "<p>Ehm... I \"just\" downloaded it from GitHub (f5252520) and then opened it in VSCodium...  not sure how I can find out more about my configuration. The Mathematics_in_lean repo seems to copy <code>mathlib</code> into a git-submodule. This submodule has version <code>758b7d6b1</code></p>",
        "id": 382381827,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691333841
    },
    {
        "content": "<p>Strange, that sounds like the right version and everything, did you install lean using elan?</p>",
        "id": 382447695,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691360232
    },
    {
        "content": "<p>I think so... The installation was a bit confusing (the default installer that the VSCode extension wanted to use didn't work and I tried a few things at random until something ended up working) so I'm not sure how it's all really set up. I wouldn't even know how to \"uninstall\" it to start again. Any suggestions how I can find out what my setup is? (It sounds weird to begin with, that the way some real number definition works should depend on how I installed things?)</p>",
        "id": 382449781,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691361977
    },
    {
        "content": "<p>Not so much how you have installed things, but if you have a different version of lean to the one intended for use with that project that could explain how we are seeing a difference here.</p>",
        "id": 382449877,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691362059
    },
    {
        "content": "<p>If you open a terminal and type <code>elan toolchain list</code> what happens?</p>",
        "id": 382449890,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691362076
    },
    {
        "content": "<p>Sorry, I'll have to get back to it tomorrow to test this. Thanks a lot for the help so far!</p>",
        "id": 382450015,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691362193
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">list</span>\n<span class=\"n\">nightly</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">07</span><span class=\"bp\">-</span><span class=\"mi\">12</span>\n</code></pre></div>",
        "id": 382605398,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691410471
    },
    {
        "content": "<p>Yeah that looks ok to me, weird, are you opening the folder <code>mathematics_in_lean</code> in vscode, with the open folder button in the file menu (or starting vscode from that folder itself)</p>",
        "id": 382638727,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691416557
    },
    {
        "content": "<p>I think \"open folder button\". Not quite clear what difference that might make. Is there a way to get the versions of everything \"as types or something\" within the lean environment? (If there isn't, there probably should be...)</p>",
        "id": 382705352,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691427772
    },
    {
        "content": "<p>Well which version of lean will be run by the vscode extension is picked up from the lean-toolchain file in the root directory of the folder you open, so if you open a folder that doesn't contain a lean-toolchain file it will use the elan default instead (which is probably a different version of lean in your case)</p>",
        "id": 382728977,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691433485
    },
    {
        "content": "<p>Any idea what else I could do to find out what's wrong? There should really be some way to get the lean version (and mathlib version) within the Lean code itself, as pretty much all programming language allow you to do.</p>",
        "id": 383679290,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691683072
    },
    {
        "content": "<p>Wait -- you're still not up and running?</p>",
        "id": 383690840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691685230
    },
    {
        "content": "<p>Can you send a screenshot showing the error, with the file explorer open?</p>",
        "id": 383691216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691685308
    },
    {
        "content": "<p>Thanks again for the help! I found the issue when re-checking everything (using <code>git stash</code>). <br>\nThe issue was that I imported <code>Mathlib.Analysis.SpecialFunctions.Log.Base</code> into the file, which wasn't intended (and seems to redefine <code>^</code>).</p>",
        "id": 383835925,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1691734505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">ab</span> has marked this topic as resolved.</p>",
        "id": 383835951,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691734524
    }
]