[
    {
        "content": "<p>I try to write golang ast in lean, but something went wrong.<br>\nWhen I write something like this. It seems lean cannot find out <code>IfStmt.body</code>'s type.<br>\nAny suggests on this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Ident</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">IfStmt</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Stmt</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Stmt</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ifstmt</span> <span class=\"o\">:</span> <span class=\"n\">IfStmt</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stmt</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/uzrzjzu5yY1POvKb-iTwKola/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uzrzjzu5yY1POvKb-iTwKola/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/uzrzjzu5yY1POvKb-iTwKola/image.png\"></a></div>",
        "id": 378343071,
        "sender_full_name": "ptrl",
        "timestamp": 1690263395
    },
    {
        "content": "<p>definitions can't be used until they are defined</p>",
        "id": 378343584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690263625
    },
    {
        "content": "<p>if you want to define <code>Stmt</code> and <code>IfStmt</code> mutually you need a <code>mutual</code> block</p>",
        "id": 378343653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690263654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/I.20try.20to.20write.20golang.20ast.20in.20lean4.2C.20but.20something.20went.20wrong/near/378343653\">said</a>:</p>\n<blockquote>\n<p>if you want to define <code>Stmt</code> and <code>IfStmt</code> mutually you need a <code>mutual</code> block</p>\n</blockquote>\n<p>Thanks a lot!<br>\n<code>mutual</code> block works fine! But it seems we cannot use <code>structure</code> in mutual block, can we?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- expr</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Ident</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"c1\">-- statement</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Stmt</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ifstmt</span> <span class=\"o\">:</span> <span class=\"n\">IfStmt</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stmt</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IfStmt</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stmt</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IfStmt</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 378349304,
        "sender_full_name": "ptrl",
        "timestamp": 1690265713
    },
    {
        "content": "<p>yes, I think that <code>structure</code>s have to be non-recursive</p>",
        "id": 378350499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690266110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456598\">ptrl</span> has marked this topic as resolved.</p>",
        "id": 378350977,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690266270
    }
]