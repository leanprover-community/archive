[
    {
        "content": "<p>How do you close goals like these?<br>\n<code>lemma junk (m : ℕ)  (hm1 : m ≠ 0) : (↑(m - 1) : ℝ) = m - 1 </code><br>\nAlso, how can I write this without using the up-arrow?</p>",
        "id": 324843179,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1675150111
    },
    {
        "content": "<p>Does the goal <code>(↑(m - 1) : ℝ) = m - 1</code> compile? It seems to be that the left side is a real number and the right side is a natural number.</p>",
        "id": 324844802,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1675150883
    },
    {
        "content": "<p>The RHS will be <code>↑m - 1</code> after coercion, so no problem.</p>",
        "id": 324848195,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675152356
    },
    {
        "content": "<p><code>nat.cast_sub $ nat.succ_le_iff.2 $ pos_iff_ne_zero.2 hm1</code> should do.</p>",
        "id": 324848443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675152477
    },
    {
        "content": "<p><code>nat.cast_sub $ nat.succ_le_iff.2 $ pos_iff_ne_zero.2 hm1</code> proves it for <code>↑m - ↑1</code>, not <code>↑m - 1</code></p>",
        "id": 324852594,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675154075
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">junk</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span><span class=\"n\">nat.cast_one</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.cast_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_le_iff</span><span class=\"o\">,</span> <span class=\"n\">pos_iff_ne_zero</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 324852895,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675154196
    },
    {
        "content": "<blockquote>\n<p>Also, how can I write this without using the up-arrow?</p>\n</blockquote>\n<p><code>((m - 1 : ℕ) : ℝ)</code></p>",
        "id": 324853641,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675154489
    },
    {
        "content": "<p>If you're not looking for an efficient proof but instead a quickly written proof, for this I'd notice how <code>m - 1</code> would simplify if <code>m</code> were of the form <code>m'.succ</code>. This suggests we can do cases on <code>m</code> and then simplify everything.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">junk</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">hm1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hm1</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 324889360,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675165430
    },
    {
        "content": "<p>Thank you for your responses! They were very helpful.<br>\nWhere can I learn more about proofs using the <code>$</code> symbol? Is it good/bad practice to use them?</p>",
        "id": 324975771,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1675187123
    },
    {
        "content": "<p><code>nat.cast_sub $ nat.succ_le_iff.2 $ pos_iff_ne_zero.2 hm1</code> is syntax for<br>\n<code>nat.cast_sub (nat.succ_le_iff.2 (pos_iff_ne_zero.2 hm1))</code></p>",
        "id": 324976101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675187213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407577\">Andre Hernandez-Espiet (Rutgers)</span> has marked this topic as resolved.</p>",
        "id": 324987921,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675190475
    }
]