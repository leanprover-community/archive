[
    {
        "content": "<p>I get no autocomplete in Lean4 in VS Code. Has it just not been implemented yet? I relied on autocomplete in Lean3 to find relevant theorems.</p>",
        "id": 395755614,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1696881018
    },
    {
        "content": "<p>Auto-complete does not work with imports yet but it definitely works with lemma names.</p>",
        "id": 395755682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696881062
    },
    {
        "content": "<p>lemma names from the current namespace?</p>",
        "id": 395756030,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1696881267
    },
    {
        "content": "<p>This is a little hacky, but it does produce a form of  \"autocomplete\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic.imp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">FuzzyMatching</span>\n\n<span class=\"sd\">/--  A syntax that allows strings to be printed without surrounding them by guillemets `«...»`. -/</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">write_me_output_stx</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">Parser.Category.write_me_output_stx</span><span class=\"kd\">]</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"import \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">write_me_output_stx</span>\n\n<span class=\"sd\">/-- `imp &lt;string&gt;` tries to find a file matching `Mathlib.&lt;string&gt;`.</span>\n<span class=\"sd\">It prints a list of candidates, taking the names from `Mathlib.lean`.</span>\n<span class=\"sd\">If there is only one candidate, it suggests `import Mathlib.&lt;uniqueCandidate&gt;` as a `Try this`.</span>\n\n<span class=\"sd\">Using `imp! &lt;string&gt;` uses fuzzy-matching, rather than exact matching. -/</span>\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">commandImp</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"imp\"</span> <span class=\"n\">fz</span><span class=\"o\">:(</span><span class=\"s2\">\"!\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">na</span><span class=\"o\">:(</span><span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">inp</span> <span class=\"o\">:=</span> <span class=\"n\">na.getId.toString</span>\n  <span class=\"k\">let</span> <span class=\"n\">dat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.FS.lines</span> <span class=\"s2\">\"Mathlib.lean\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">String.drop</span> <span class=\"bp\">·</span> <span class=\"mi\">15</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">cands</span> <span class=\"o\">:=</span> <span class=\"n\">dat.filter</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">fz.isSome</span> <span class=\"k\">then</span> <span class=\"n\">fuzzyMatch</span> <span class=\"k\">else</span> <span class=\"n\">String.isPrefixOf</span><span class=\"o\">)</span> <span class=\"n\">inp</span>\n  <span class=\"k\">match</span> <span class=\"n\">cands.toList</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">tk</span> <span class=\"s2\">\"no available imports\"</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">imp</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">impS</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.moduleNameOfFileName</span> <span class=\"o\">(</span><span class=\"s2\">\"Mathlib/\"</span> <span class=\"bp\">++</span> <span class=\"n\">imp.replace</span> <span class=\"s2\">\".\"</span> <span class=\"s2\">\"/\"</span> <span class=\"bp\">++</span> <span class=\"s2\">\".lean\"</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">write_me_output_stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">write_me_output_stx</span><span class=\"bp\">|</span> <span class=\"kn\">import</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">impS</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n      <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n        <span class=\"n\">Std.Tactic.TryThis.addSuggestion</span> <span class=\"n\">stx</span> <span class=\"n\">imp</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"bp\">&lt;|</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"n\">cl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">commandImp</span><span class=\"bp\">!</span><span class=\"kd\">]</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"imp!\"</span> <span class=\"n\">na</span><span class=\"o\">:(</span><span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">na</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic.imp</span>\n\n<span class=\"c1\">--  Here is how it works: typing</span>\n<span class=\"n\">imp</span> <span class=\"n\">Data.ENat</span>\n<span class=\"c1\">-- produces</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Data.ENat.Basic</span>\n<span class=\"cm\">Data.ENat.Lattice</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- typing</span>\n<span class=\"n\">imp</span> <span class=\"n\">Data.ENat.L</span>\n<span class=\"c1\">--  produces</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this: import Mathlib.Data.ENat.Lattice</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">imp</span><span class=\"bp\">!</span> <span class=\"n\">DtaENB</span>\n<span class=\"c1\">--  fuzzy matching!  produces</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this: import Mathlib.Data.ENat.Basic</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 395760595,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696884174
    },
    {
        "content": "<p>Damiano, you are not answering Vasily, are you?</p>",
        "id": 395760750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696884257
    },
    {
        "content": "<p>Ah, I was answering your \"Auto-complete does not work with imports yet\"...</p>",
        "id": 395760793,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696884295
    },
    {
        "content": "<p>Yes, I understand.</p>",
        "id": 395760821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696884305
    },
    {
        "content": "<p>This is nice, but we really need proper support from the Lean server.</p>",
        "id": 395760853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696884326
    },
    {
        "content": "<p>Actually, I had this command a while ago, since I wanted it, so I thought of posting it here.</p>",
        "id": 395760869,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696884342
    },
    {
        "content": "<p>(In case others find it useful before proper support arrives!)</p>",
        "id": 395760986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696884419
    },
    {
        "content": "<p>Is there a lean4 issue for this autocomplete? It so, it would maybe be a good place to keep Damiano's workaround.</p>",
        "id": 395761518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696884773
    },
    {
        "content": "<p>I looked at the issues, but I could not find one about autocomplete imports.  I remember the issue coming up a few times on Zulip, though.</p>",
        "id": 395762740,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696885589
    },
    {
        "content": "<p>There's no issue in the Lean 4 repository for import auto-completion, but feel free to create one.</p>",
        "id": 395823660,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1696923249
    },
    {
        "content": "<p>I just found out that there is a fuzzy-match algorithm in Lean, so I added fuzzy-matching capabilities to the auto-complete above!  Now, if you type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">imp</span><span class=\"bp\">!</span> <span class=\"bp\">&lt;</span><span class=\"n\">string</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>you will get real-time fuzzy-matching of <code>&lt;string&gt;</code> against all files in Mathlib and a <code>Try this: import ...</code> whenever there is a unique file fuzzy-matching your input.</p>",
        "id": 395949997,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696966913
    },
    {
        "content": "<p>Users might expect <code>imp?</code> due to <code>simp?</code> etc.</p>",
        "id": 396096292,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697032969
    },
    {
        "content": "<p>It seems that I have to change to <code>IO.FS.lines \"lake-packages/mathlib/Mathlib.lean\"</code> to use it, and why is <code>Try this</code> not clickable?</p>\n<p><a href=\"/user_uploads/3121/boO_n_Hq7NcljtAee-WCYVEj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/boO_n_Hq7NcljtAee-WCYVEj/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/boO_n_Hq7NcljtAee-WCYVEj/image.png\"></a></div>",
        "id": 396098731,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697033598
    },
    {
        "content": "<p>I don't think it's a good idea to invest more time in this workaround. I trust Marc to bring us the right solution in a not too distant future.</p>",
        "id": 396104389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697035212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>, changing the <code>!</code> to <code>?</code> is no issue at all!  Your other suggestion is easy to implement, but I only wrote this command thinking that it would help locate a single import and propose to import that one.</p>\n<p>Anyway, as Patrick already mentioned, I had not intended this to be particularly robust or long-lived: it is a very short hack, while we wait for proper auto-complete support!</p>",
        "id": 396118826,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697039451
    },
    {
        "content": "<p>In fact, I would say that users should expect <code>Ctrl-Space</code>, rather than having to call a command!</p>",
        "id": 396119028,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697039510
    },
    {
        "content": "<p>I fiddled with it a bit and got a clickable list:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic.imp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">FuzzyMatching</span> <span class=\"n\">System</span>\n\n<span class=\"sd\">/-- Infer module name of source file name. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">moduleNameOfFileName</span> <span class=\"o\">(</span><span class=\"n\">fname</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rootDir</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fname</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.realPath</span> <span class=\"n\">fname</span>\n  <span class=\"k\">let</span> <span class=\"n\">rootDir</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">rootDir</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">rootDir</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">rootDir</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.currentDir</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">rootDir</span> <span class=\"bp\">←</span> <span class=\"n\">realPathNormalized</span> <span class=\"n\">rootDir</span>\n  <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">rootDir.toString.endsWith</span> <span class=\"n\">System.FilePath.pathSeparator.toString</span> <span class=\"k\">then</span>\n    <span class=\"n\">rootDir</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rootDir.toString</span> <span class=\"bp\">++</span> <span class=\"n\">System.FilePath.pathSeparator.toString</span><span class=\"o\">⟩</span>\n  <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">rootDir.toString.isPrefixOf</span> <span class=\"n\">fname.normalize.toString</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"input file '{fname}' must be contained in root directory ({rootDir})\"</span>\n  <span class=\"c1\">-- NOTE: use `fname` instead of `fname.normalize` to preserve casing on all platforms</span>\n  <span class=\"k\">let</span> <span class=\"n\">fnameSuffixComponents</span> <span class=\"o\">:=</span> <span class=\"n\">fname.withExtension</span> <span class=\"s2\">\"\"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">components.drop</span> <span class=\"o\">(</span><span class=\"n\">rootDir.components.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">modName</span>    <span class=\"o\">:=</span> <span class=\"n\">fnameSuffixComponents.foldl</span> <span class=\"n\">Name.mkStr</span> <span class=\"n\">Name.anonymous</span>\n  <span class=\"n\">pure</span> <span class=\"n\">modName</span>\n\n<span class=\"sd\">/--  A syntax that allows strings to be printed without surrounding them by guillemets `«...»`. -/</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">write_me_output_stx</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">Parser.Category.write_me_output_stx</span><span class=\"kd\">]</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"import \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">write_me_output_stx</span>\n\n<span class=\"sd\">/-- `imp &lt;string&gt;` tries to find a file matching `Mathlib.&lt;string&gt;`.</span>\n<span class=\"sd\">It prints a list of candidates, taking the names from `Mathlib.lean`.</span>\n<span class=\"sd\">If there is only one candidate, it suggests `import Mathlib.&lt;uniqueCandidate&gt;` as a `Try this`.</span>\n\n<span class=\"sd\">Using `imp! &lt;string&gt;` uses fuzzy-matching, rather than exact matching. -/</span>\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">commandImp</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"imp\"</span> <span class=\"n\">fz</span><span class=\"o\">:(</span><span class=\"s2\">\"!\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">na</span><span class=\"o\">:(</span><span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">inp</span> <span class=\"o\">:=</span> <span class=\"n\">na.getId.toString</span>\n  <span class=\"k\">let</span> <span class=\"n\">dat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.FS.lines</span> <span class=\"s2\">\"lake-packages/mathlib/Mathlib.lean\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">String.drop</span> <span class=\"bp\">·</span> <span class=\"mi\">15</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">cands</span> <span class=\"o\">:=</span> <span class=\"n\">dat.filter</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">fz.isSome</span> <span class=\"k\">then</span> <span class=\"n\">fuzzyMatch</span> <span class=\"k\">else</span> <span class=\"n\">String.isPrefixOf</span><span class=\"o\">)</span> <span class=\"n\">inp</span>\n\n  <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"n\">cands.toList.forM</span> <span class=\"k\">fun</span> <span class=\"n\">imp</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">impS</span> <span class=\"bp\">←</span> <span class=\"n\">moduleNameOfFileName</span> <span class=\"o\">(</span><span class=\"s2\">\"lake-packages/mathlib/Mathlib/\"</span> <span class=\"bp\">++</span> <span class=\"n\">imp.replace</span> <span class=\"s2\">\".\"</span> <span class=\"s2\">\"/\"</span> <span class=\"bp\">++</span> <span class=\"s2\">\".lean\"</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">write_me_output_stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">write_me_output_stx</span><span class=\"bp\">|</span> <span class=\"kn\">import</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">impS</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n      <span class=\"n\">Std.Tactic.TryThis.addSuggestion</span> <span class=\"n\">stx</span> <span class=\"n\">imp</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">commandImp</span><span class=\"bp\">!</span><span class=\"kd\">]</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"imp!\"</span> <span class=\"n\">na</span><span class=\"o\">:(</span><span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">na</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic.imp</span>\n\n<span class=\"n\">imp</span><span class=\"bp\">!</span> <span class=\"n\">Ring</span>\n</code></pre></div>\n</div></div>\n<p>But I'm mostly struggled with the path prefix \"lake-packages/mathlib\" issue (I hacked my way through it but unsatisfied), do you have any idea why?</p>",
        "id": 396119890,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697039752
    },
    {
        "content": "<p>Sure, better not to invest more time in this, but I was curious of the implementation so I fiddled with it a bit.</p>",
        "id": 396120194,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697039838
    },
    {
        "content": "<p>I understand: the reason I wrote this, was mostly to teach myself something about meta-programming, syntax and dealing with files in Lean.</p>",
        "id": 396120319,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697039880
    },
    {
        "content": "<p>Now you have taught me (the interesting combination) <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 396120476,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697039919
    },
    {
        "content": "<p>On my computer, this line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">dat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.FS.lines</span> <span class=\"s2\">\"lake-packages/mathlib/Mathlib.lean\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">String.drop</span> <span class=\"bp\">·</span> <span class=\"mi\">15</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>introduces <code>lake-packages/mathlib/</code> which upsets the command.  If I use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">dat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.FS.lines</span> <span class=\"s2\">\"Mathlib.lean\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">String.drop</span> <span class=\"bp\">·</span> <span class=\"mi\">15</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>instead, then I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">imp</span><span class=\"bp\">!</span> <span class=\"n\">Ring</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this: import BigOperators.Ring</span>\n<span class=\"cm\">Try this: import BigOperators.RingEquiv</span>\n<span class=\"cm\">Try this: import Category.BoolRing</span>\n<span class=\"cm\">Try this: import Category.ModuleCat.ChangeOfRings</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 396121763,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697040232
    },
    {
        "content": "<p>(I removed both occurrences of <code>lake-packages/mathlib/</code>)</p>",
        "id": 396122042,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697040278
    },
    {
        "content": "<p>On my Mac without them it just keeps complaining </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"n\">Mathlib.lean</span>\n</code></pre></div>\n<p>So I need both of them to make it work:</p>\n<p><a href=\"/user_uploads/3121/fToeNXNnHWSWIvBiapLg_K0g/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fToeNXNnHWSWIvBiapLg_K0g/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/fToeNXNnHWSWIvBiapLg_K0g/image.png\"></a></div>",
        "id": 396122516,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697040407
    },
    {
        "content": "<p>Ok, I think that this is all the more reasons for preferring a more robust solution!  Anyone should feel free to modify and use the code above, but I wouldn't even have guessed that what you reported could have been an issue...</p>",
        "id": 396123893,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697040788
    },
    {
        "content": "<p>By the way, Scott opened an issue for autocompletion of imports: <a href=\"https://github.com/leanprover/lean4/issues/2655\">Lean4 issue #2655</a>.</p>",
        "id": 396161355,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697056620
    }
]