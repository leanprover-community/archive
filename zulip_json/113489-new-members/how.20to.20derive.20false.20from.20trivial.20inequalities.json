[
    {
        "content": "<p>I am trying to derive false from two trivial hypothesis. Would anybody be able to point me to the right tactic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">Bitvec.toNat</span> <span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w</span>\n<span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Bitvec.toNat</span> <span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 367494993,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687145371
    },
    {
        "content": "<p>Does <code>linarith</code> work?</p>",
        "id": 367496389,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687146263
    },
    {
        "content": "<p>linarith gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">LinearOrder</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 367496639,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687146418
    },
    {
        "content": "<p>I am trying to use <code>exact absurd h₁ h₂</code>, but for this to work, I would like to turn h₁ into <code>h₁: Bitvec.toNat C + i &lt;= w</code></p>",
        "id": 367496738,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687146480
    },
    {
        "content": "<p>I am not yet sure how to do that.</p>",
        "id": 367496796,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687146490
    },
    {
        "content": "<p>Either <code>Nat.le_of_lt h₁</code> or <code>h₁.le</code> should work (though I'm not sure about the second one in Lean 4)</p>",
        "id": 367496917,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687146589
    },
    {
        "content": "<p>They both work in Lean 4.</p>",
        "id": 367497018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687146622
    },
    {
        "content": "<p>I'd guess <code>exact absurd h₁.le h₂</code> might work. If it doesn't, an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> might help.</p>",
        "id": 367497053,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687146653
    },
    {
        "content": "<p>It does, indeed!</p>",
        "id": 367497258,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687146780
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 367497266,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687146782
    },
    {
        "content": "<p>Note that <code>h₁.le</code> works because it is shorthand for <code>LT.lt.le h₁</code></p>",
        "id": 367497425,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687146883
    },
    {
        "content": "<p>I guess as a step to understand this better, I am trying too simplify h₁ first and then trivially apply absurd.</p>",
        "id": 367497617,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687146981
    },
    {
        "content": "<p>To get something in the form of<br>\n<code>rw [LT.lt.le] h₁; exact absurd h₁ h₂</code>, but this does not seem to work.</p>",
        "id": 367497684,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687147037
    },
    {
        "content": "<p><code>rw</code> doesn't work here because <code>LT.lt.le</code> is a one way implication, and <code>rw</code> only works with <code>=</code> and <code>↔</code> statements. You could instead directly write <code>exact absurd (LT.lt.le h₁) h₂</code> (this is equivalent to what Kyle Miller suggested). You could also define a new hypothesis with<br>\n<code>have h3 : Bitvec.toNat C + i ≤ w := LT.lt.le h₁; exact absurd h3 h2</code>.</p>",
        "id": 367498040,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687147248
    },
    {
        "content": "<p>Cool. That is super helpful. Thank you.</p>",
        "id": 367498335,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687147378
    },
    {
        "content": "<p>I guess I now learned a little piece of lean code.</p>",
        "id": 367498384,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687147406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20derive.20false.20from.20trivial.20inequalities/near/367496639\">said</a>:</p>\n<blockquote>\n<p>linarith gives me:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">LinearOrder</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Can you provide a MWE for this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bitvec.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">Bitvec.toNat</span> <span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Bitvec.toNat</span> <span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>works fine and I'd like to understand why linarith isn't working for you</p>",
        "id": 367659843,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687184723
    }
]