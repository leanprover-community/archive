[
    {
        "content": "<p>I just discovered <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MoveAdd#doc\">docs#MoveAdd</a>, and the documentation claims that <code>move_oper</code> supports <code>and</code>. However I can't make it work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">move_oper</span> <span class=\"n\">HAnd.hAnd</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Besides<code>HAnd.hAnd</code> I also tried <code>And.and</code>, <code>And.intro</code>, <code>and</code>, and maybe one or two more, but nothing works. Is it possible to make this tactic work?</p>",
        "id": 403812521,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1700754113
    },
    {
        "content": "<p>Does putting round brackets around the name work?</p>",
        "id": 403812716,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700754176
    },
    {
        "content": "<p>I'm on mobile, so I won't be able to help until tomorrow, but it should work.</p>",
        "id": 403812772,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700754196
    },
    {
        "content": "<p>Actually, this line</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/test/MoveAdd.lean#L64\">https://github.com/leanprover-community/mathlib4/blob/master/test/MoveAdd.lean#L64</a></p>\n<p>Suggests that it should \"just work\"...</p>",
        "id": 403812987,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700754278
    },
    {
        "content": "<p>Your goal is parsing as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>this is one of the reasons why its good to use iff for props</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 403813059,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700754315
    },
    {
        "content": "<p>Turning off notation we can see that the and symbol actually means <code>And</code> not <code>HAnd.hand</code>, and indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span> <span class=\"c1\">-- toggle this to see</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">move_oper</span> <span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works</p>",
        "id": 403813231,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700754376
    },
    {
        "content": "<p>I'm glad that this works, since it might be the first \"real world\" use of <code>move_oper</code> that isn't about addition or multiplication!</p>",
        "id": 403814961,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700755126
    },
    {
        "content": "<p>Also, once I'm back at a computer, I'll update the docs to specify exactly what to type to get <code>move_oper</code> working: right now, it mentions <code>HAdd.hAdd</code> twice, uses <code>and</code> instead of <code>And</code> and I'm not sure if the <code>min/max</code> are correct either.</p>",
        "id": 403817218,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700755885
    },
    {
        "content": "<p>One curious note: <code>move_oper And</code> arranges the terms left-associative, which makes sense for <code>+</code>, while the standard for <code>∧</code> is right-associative. I will look into <code>move_oper And</code> and see how helpful it is with the kind of proofs, I'm currently encountering.</p>",
        "id": 403820462,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1700757313
    },
    {
        "content": "<p><code>move_oper</code> was really written thinking of moving additions.  Since immediately there were questions about multiplication, I decided to do it operation-agnostic.  Once I had it agnostic, I thought of adding support for more operations that are associative and commutative.  Thus, <code>and</code> was really an after-thought.  An early version supported inf and sup, but since it required a new import, I removed it.</p>",
        "id": 403840057,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700764767
    },
    {
        "content": "<p>Anyway, making <code>and</code> associate differently is probably a tiny change.</p>",
        "id": 403840131,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700764796
    },
    {
        "content": "<p>What I'm really interested in is moving <code>∃</code> and statements of the form <code>a' = a</code>, such that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_eq_left#doc\">docs#exists_eq_left</a> can be used, <code>move_oper And</code> is a start. Now that I know it works, I will have a look at the code and see if I can figure out how it works and if I can adapt it.</p>",
        "id": 403859483,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1700777376
    },
    {
        "content": "<p>I don't remember how much <code>move_oper</code> enters into binders.  My recollection is \"not much\", especially since I do not think that you can name explicitly the bound variables: they may only be accessible via metavariables and relations among them.</p>",
        "id": 403860331,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700778103
    },
    {
        "content": "<p>If you have a specific example where <code>move_oper</code> might work, but does not, please post it and I will see what can be done about it.</p>",
        "id": 403860402,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700778144
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8606\">#8606</a> corrects the doc-strings and adds tests to show how to use <code>move_oper</code> for operations other than <code>+</code> and <code>*</code>.</p>",
        "id": 403906479,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700807189
    },
    {
        "content": "<p>I'll take a look at associating <code>and/or</code> differently, though this is a change that affects the actual internals.</p>",
        "id": 403906650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700807281
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8607\">#8607</a> adds support for left-associative operations.  In the PR, it is only turned on for <code>And/Or</code>.</p>",
        "id": 403917080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700812479
    }
]