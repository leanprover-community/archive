[
    {
        "content": "<p>Hi! It's me (again)!</p>\n<p>This time I'm trying to recursively prove a property on a <code>Relation.ReflTransGen</code> and I'm stuck with showing termination with head induction (instead of the default tail induction).</p>\n<p>In the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I'll use <code>GE.ge</code> as the relation in question to show the basic structure of my proof, so the example might look a bit dumb. Anyway, I believe this problem is not specific to one relation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">GEs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"n\">GE.ge</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mn'</span> <span class=\"o\">:</span> <span class=\"n\">GEs</span> <span class=\"n\">m</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GEs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span> <span class=\"kn\">open</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"k\">in</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">mn'</span> <span class=\"n\">using</span> <span class=\"n\">head_induction_on</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"n\">mm'</span> <span class=\"n\">m'n'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">m'</span> <span class=\"n\">f</span>\n    <span class=\"n\">refine</span> <span class=\"n\">head</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"n\">m'n'</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_le_sub_right</span> <span class=\"n\">mm'</span> <span class=\"n\">n'</span>\n</code></pre></div>\n<p>This gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">test</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">test</span> <span class=\"n\">m'n'</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">test</span> <span class=\"n\">m'n'</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<ul>\n<li>I'm not sure if <code>cases mn' using head_induction_on with</code> is the right way to tell lean that I want to use head induction on this one, but it seems to typecheck anyway.</li>\n<li>My intuition is that in the <code>head mm' m'n'</code> case, <code>m'n'</code> is \"smaller than\" <code>mn'</code> (the former is then passed to <code>test</code>), so we should be able to prove termination... But how?</li>\n</ul>\n<p>Thanks a lot!</p>",
        "id": 363410884,
        "sender_full_name": "rami3l",
        "timestamp": 1685845900
    },
    {
        "content": "<p>Every time I encountered such problems, I always resorted to using <code>Type</code>s instead of <code>Prop</code>s, and the termination check \"just worked\".<br>\nHowever this does make me feel bad because I miss all the niceties in <code>mathlib</code>... Am I doing something wrong?</p>",
        "id": 373060101,
        "sender_full_name": "rami3l",
        "timestamp": 1688694587
    },
    {
        "content": "<p>Okay, it looks like <code>induction _ generalizing _ with</code> can be used instead of <code>match</code>/<code>cases</code> when there's no mutual recursion: <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20How.20to.20show.20termination.20here.3F/near/366288337\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20How.20to.20show.20termination.20here.3F/near/366288337</a></p>",
        "id": 373065580,
        "sender_full_name": "rami3l",
        "timestamp": 1688697573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"615361\">@rami3l</span> Yeah, induction is the way to go here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mn'</span> <span class=\"o\">:</span> <span class=\"n\">GEs</span> <span class=\"n\">m</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GEs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">mn'</span> <span class=\"n\">using</span> <span class=\"n\">head_induction_on</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"n\">mm'</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">m'</span> <span class=\"n\">f</span>\n    <span class=\"n\">refine</span> <span class=\"n\">head</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">ih</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_le_sub_right</span> <span class=\"n\">mm'</span> <span class=\"n\">n'</span>\n</code></pre></div>",
        "id": 373228605,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688739843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks a lot!</p>\n<p>I think I can close this thread now (but it seems that I have no permission to do so)...</p>",
        "id": 373427590,
        "sender_full_name": "rami3l",
        "timestamp": 1688808594
    },
    {
        "content": "<p>Please don't close threads. It breaks things like linkifiers and serves no useful purpose.</p>",
        "id": 373494068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688825215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Now that we are here, would you mind having a look at how to show termination in another pretty self-contained example? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Denotational</span>\n\n<span class=\"c1\">-- https://plfa.github.io/Denotational/#values</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"sd\">/-- No information is provided about the computation. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">Value</span>\n<span class=\"sd\">/-- A single input-output mapping, from the first term to the second. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n<span class=\"sd\">/-- A function that maps inputs to outputs according to both terms. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bot</span> <span class=\"n\">Value</span> <span class=\"n\">where</span> <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">bot</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"n\">Value</span> <span class=\"n\">where</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">conj</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ⇾ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Value.fn</span>\n\n<span class=\"sd\">/-- `Sub` adapts the familiar notion of subset to the `Value` type. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Sub</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"bp\">⊥</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">conjL</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sub</span> <span class=\"n\">w</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sub</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">⊔</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">conjR₁</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">Sub</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">⊔</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">conjR₂</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">Sub</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">⊔</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">Sub</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">Sub</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"n\">v'</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">Sub</span> <span class=\"n\">w</span> <span class=\"n\">w'</span> <span class=\"bp\">→</span> <span class=\"n\">Sub</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">⇾</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v'</span> <span class=\"bp\">⇾</span> <span class=\"n\">w'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">⇾</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">⊔</span> <span class=\"n\">w'</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">v</span> <span class=\"bp\">⇾</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">⇾</span> <span class=\"n\">w'</span><span class=\"o\">))</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"s2\">\" ⊑ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sub</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">Sub</span> <span class=\"n\">Sub</span> <span class=\"n\">Sub</span> <span class=\"n\">where</span> <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">trans</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">conj_sub₁</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊔</span> <span class=\"n\">v</span> <span class=\"bp\">⊑</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">⊑</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">conjL</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">conjR₁</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">conjR₁</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">conj_sub₁</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">conjR₂</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">conjR₂</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">conj_sub₁</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">conj_sub₁</span> <span class=\"n\">h</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">fail to show termination for</span>\n<span class=\"cm\">  Denotational.conj_sub₁</span>\n<span class=\"cm\">with errors</span>\n<span class=\"cm\">argument #3 was not used for structural recursion</span>\n<span class=\"cm\">  failed to eliminate recursive application</span>\n<span class=\"cm\">    conj_sub₁ h</span>\n\n<span class=\"cm\">structural recursion cannot be used</span>\n\n<span class=\"cm\">failed to prove termination, use `termination_by` to specify a well-founded relation</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Again, changing <code>Prop</code> to <code>Type</code> just works, but I doubt if there is a more idiomatic way of doing this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 375427276,
        "sender_full_name": "rami3l",
        "timestamp": 1689385388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"615361\">@rami3l</span> The answer again is to use <code>induction</code>, though this one needs another trick because the <code>induction</code> tactic doesn't want to apply to <code>h</code> directly due to the indices to <code>Sub</code> not being variables. You can use the <code>generalize</code> tactic to replace <code>u ⊔ v</code> with a fresh variable and to generate an equality for it, and then <code>induction</code> carries through. There's also some syntax in <code>induction</code> where you can give a tactic that should run in all cases first.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">conj_sub₁</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊔</span> <span class=\"n\">v</span> <span class=\"bp\">⊑</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊑</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊔</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">subst_vars</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conjL</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conjR₁</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">conjR₁</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conjR₂</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">conjR₂</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">h'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 375468050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689407268
    },
    {
        "content": "<p>Oh, I guess you can put <code>try cases hx</code> into that too to eliminate some cases, and then it's looking a lot like your recursive version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">conj_sub₁</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊔</span> <span class=\"n\">v</span> <span class=\"bp\">⊑</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊑</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊔</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conjL</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conjR₁</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">conjR₁</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conjR₂</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">conjR₂</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 375468214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689407316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks a lot! You made my day! <span aria-label=\"congratulations\" class=\"emoji emoji-3297\" role=\"img\" title=\"congratulations\">:congratulations:</span></p>",
        "id": 375489046,
        "sender_full_name": "rami3l",
        "timestamp": 1689413352
    },
    {
        "content": "<p>on this one, I wonder if anything was refactored on the structural recursion or if it's another case where backwards-chaining is not sufficient to solve the goal.</p>\n<p>Do we happen to have traces for this case?</p>",
        "id": 382333007,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1691320378
    }
]