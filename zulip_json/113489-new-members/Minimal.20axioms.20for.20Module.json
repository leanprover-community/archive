[
    {
        "content": "<p><code>Group</code> has <code>.ofLeftAxioms</code> and <code>.ofRightAxioms</code> to define a group structure<br>\non a type with the minimum proof obligations.  Is there something similar for <code>Module</code>, so I don't have to define all of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?</p>",
        "id": 405431922,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701461703
    },
    {
        "content": "<p>Ideally just define:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">smul</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">v</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">v</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 405432121,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701461797
    },
    {
        "content": "<p>It might be a nice exercise to make such a constructor if one isn't already there.</p>",
        "id": 405432166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701461826
    },
    {
        "content": "<p>I guess all the helper function needs to generate is <code>smul_zero</code> and <code>zero_smul</code>.</p>",
        "id": 405432753,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701462126
    },
    {
        "content": "<p>I had a similar exercise in a summer camp we had for lean with a handrolled vector space type in lean3: <a href=\"https://github.com/Julian-Kuelshammer/summer_maths_it_camp/blob/main/src/solutions/sheet03.lean\">https://github.com/Julian-Kuelshammer/summer_maths_it_camp/blob/main/src/solutions/sheet03.lean</a></p>",
        "id": 405433595,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1701462567
    },
    {
        "content": "<p>And I guess those aren't true when we have an <code>AddCommMonoid</code>, but only when we have <code>AddCommGroup</code>?  I think the standard proof uses <code>a • 0 = a • 0 + a • 0</code>, and you need <code>neg</code> to cancel?</p>",
        "id": 405433696,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701462607
    },
    {
        "content": "<p>Ah there's <code>Module.ofCore</code>.</p>",
        "id": 405434690,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701463126
    },
    {
        "content": "<p>Perhaps we should move that into a <code>MinimalAxioms</code> file to match the others?</p>",
        "id": 405514082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701506971
    },
    {
        "content": "<p>Also, the others are called <code>ofMinimalAxioms</code>, except for <code>Group</code> where they're called <code>ofLeftAxioms</code> and <code>ofRightAxioms</code>.  Would people be open to a PR that moved <code>Module.ofCore</code> to a <code>MinimalAxioms</code> file and renamed it <code>ofMinimalAxioms</code>?</p>",
        "id": 405883899,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701712824
    },
    {
        "content": "<p>This would be a breaking change, in the sense that users who were depending on <code>ofCore</code> would need a new <code>include</code>, as well as to rename their call.  How do we handle breaking changes?  Are they ok on master?</p>",
        "id": 405889523,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701714946
    },
    {
        "content": "<p>mathlib master has breaking changes all the time. So that's not an issue</p>",
        "id": 405889838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701715058
    },
    {
        "content": "<p>Is there a starter guide for developing <code>mathlib4</code>?  I forked, cloned, then did:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">;</span> <span class=\"n\">lake</span> <span class=\"n\">update</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n</code></pre></div>\n<p>but the cache get fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">3979</span><span class=\"bp\">/</span><span class=\"mi\">3979</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">files</span> <span class=\"n\">were</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">cache.</span>\n<span class=\"n\">This</span> <span class=\"n\">usually</span> <span class=\"n\">means</span> <span class=\"n\">that</span> <span class=\"n\">your</span> <span class=\"kn\">local</span> <span class=\"n\">checkout</span> <span class=\"n\">of</span> <span class=\"n\">mathlib4</span> <span class=\"n\">has</span> <span class=\"n\">diverged</span> <span class=\"k\">from</span> <span class=\"n\">upstream.</span>\n<span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">push</span> <span class=\"n\">your</span> <span class=\"n\">commits</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">branch</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">mathlib4</span> <span class=\"n\">repository</span><span class=\"o\">,</span> <span class=\"n\">CI</span> <span class=\"n\">will</span> <span class=\"n\">build</span> <span class=\"n\">the</span> <span class=\"n\">oleans</span> <span class=\"n\">and</span> <span class=\"n\">they</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">available</span> <span class=\"n\">later.</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>\n<p>What am I doing wrong?</p>",
        "id": 405895769,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701717327
    },
    {
        "content": "<p>Then, when I start VS Code, it takes forever to rebuild imports, then errors out.</p>",
        "id": 405895858,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701717363
    },
    {
        "content": "<p>Where did you see you need to run <code>lake update</code>?</p>",
        "id": 405898672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701718474
    },
    {
        "content": "<p>I didn't, I guessed.  :)  Should I skip that?</p>",
        "id": 405898734,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701718499
    },
    {
        "content": "<p>Yes.</p>",
        "id": 405899160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701718688
    },
    {
        "content": "<p>You can also skip removing the <code>.lake</code> folder if you just cloned.</p>",
        "id": 405899194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701718707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Minimal.20axioms.20for.20Module/near/405895769\">said</a>:</p>\n<blockquote>\n<p>Is there a starter guide for developing <code>mathlib4</code>? </p>\n</blockquote>\n<p>I forgot to answer that part: the answer is meant to be <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>. If this isn't good enough then please tell us.</p>",
        "id": 405900266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701719145
    },
    {
        "content": "<p>Ah cool thanks.</p>",
        "id": 405901728,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701719773
    },
    {
        "content": "<p>The video tutorial for creating a PR is for mathlib3.  I'm watching it now, I'll let you know if I notice any significant differences.</p>",
        "id": 405902777,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701720160
    },
    {
        "content": "<p>Although the title of the video does have OBSOLETE.  :)</p>",
        "id": 405902868,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701720191
    },
    {
        "content": "<p>It uses <code>lakeproject</code>, and is also about configuring <code>git</code> and <code>VS code</code>, not just about the PR part.  Since there's no replacement video, maybe just remove that link?  Or link to github's docs on creating a PR?</p>",
        "id": 405903566,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701720471
    },
    {
        "content": "<p>I will remove that sentence, and hope someone can record an updated video.</p>",
        "id": 405903771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701720549
    },
    {
        "content": "<p>Woohoo, my first pull request for Mathlib4!</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8853\">https://github.com/leanprover-community/mathlib4/pull/8853</a></p>",
        "id": 406378753,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1701893663
    }
]