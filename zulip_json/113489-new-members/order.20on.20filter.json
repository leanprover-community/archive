[
    {
        "content": "<p>Why is the order on filter reverse inclusion instead of just inclusion?</p>",
        "id": 135489142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539110168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> will know. I +1 this question, it throws me off every time</p>",
        "id": 135489824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539110759
    },
    {
        "content": "<p>I just assumed it was because the set of subsets of X embeds into the set of filters on X via principal filters, and the smaller the subset the bigger the filter.</p>",
        "id": 135490958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539111713
    },
    {
        "content": "<p>interesting</p>",
        "id": 135491024,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539111759
    },
    {
        "content": "<p>Here is one way to look at it: the identity function is continuous on topologies when the topologies are <code>dom &lt;= cod</code>. In other words, the poset of topologies is embedded in the category of topological spaces by the functor <code>T -&gt; (X,T)</code></p>",
        "id": 135491228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539111937
    },
    {
        "content": "<p>If you try to do the same thing with filters, the replacement for \"continuous\" is <code>tendsto</code>, and in order to keep the <code>&lt;=</code> relation going the same way we have to reverse the order of filters</p>",
        "id": 135491311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539111993
    },
    {
        "content": "<p>That is, <code>tendsto id L1 L2</code> iff <code>L2 ‚äÜ L1</code></p>",
        "id": 135491420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539112084
    },
    {
        "content": "<p>I am reading <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C08_Topology.html#filters\">#mil</a> and would like to understand the relation between  filter bases and topological bases: are they one-to-one corresponding \"in some sense\"? Correct me please if I am worng. For a function on types/sets, given filter/topological bases,  Tendsto of the function is defined, depending on bases.  While a type is a topological space,  by taking neighborhoods atTop from topological space, one gets the definition of continuity.  Given a topological base, a filter can be formed (uniquly?) so that continuity is well defined..?  How about the other around?</p>",
        "id": 397898101,
        "sender_full_name": "Ming Li",
        "timestamp": 1697942185
    },
    {
        "content": "<p>Filters and topologies on a type are not in one-one correspondence, so you shouldn't expect filter bases and topological bases to be in one-one correspondence in any meaningful way</p>",
        "id": 397916551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697956965
    },
    {
        "content": "<p>Thanks. So, in Mathlib, the filter is induced from the topology so that it is dealing topological properties through filtters.  Even without topologies,  Tendsto is still defined via filters and is meaningful in 'computer' sense. Right?</p>",
        "id": 397926228,
        "sender_full_name": "Ming Li",
        "timestamp": 1697963409
    },
    {
        "content": "<p>Both continuity and <code>tendsto</code> are not properties of a topology/filter, they are properties of two topologies and a function. Continuity is really a property of two topologies, a function, and a point. You can see the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto#doc\">docs#Filter.Tendsto</a> for yourself and see what inputs it needs to make it meaningful.</p>",
        "id": 397929307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697966450
    },
    {
        "content": "<p>Continuity and  <code>tendsto</code> rely on neighborhorhoods of a point and its image under the function, which are given from topologies. So continuity in Mathlib is induced from topologies and the function but is cannonical so that it is indepdent of filters.  Right?</p>",
        "id": 397948146,
        "sender_full_name": "Ming Li",
        "timestamp": 1697984535
    },
    {
        "content": "<p>I'm not sure what you mean by \"independent of filters\". Here is what is true:</p>\n<ol>\n<li>Given a topology on X, for every x you can build the <em>neighborhood filter at <code>x</code></em> called <code>nhds x</code>. This filter consists of all sets which contain an open set containing <code>x</code>. </li>\n<li>Then a function between topological spaces <code>f : X -&gt; Y</code> is continuous at <code>x</code> if and only if <code>tendsto f (nhds x) (nhds (f x))</code>. So, while <code>tendsto</code> is a statement only about filters, continuity is a statement about tendsto involving neighborhood filters, so it invokes the topology.</li>\n<li>If you forget the topology for a moment, you can go backwards. Suppose that for each <code>x : X</code> you have a filter <code>F x : Filter X</code>. From this, you can define a collection of sets by <code>U : Set X</code> is in this collection if, for every <code>x</code> in <code>U</code>, <code>U</code> lies in <code>F x</code>. Then this collection forms a topology on <code>X</code>, and with respect to this topology, <code>nhds x = F x</code> for all <code>x : X</code>.</li>\n</ol>\n<p>The constructions in (1), i.e., the construction of neighborhood filters from a topology, and (3), i.e., the construction of a topology from a filter associated to every point, are inverses of each other.</p>",
        "id": 397953872,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697990031
    },
    {
        "content": "<p>This is almost true, but you need an extra axiom to be able to build out a topology from a set of filters. This axiom is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eventually_mem_nhds#doc\">docs#eventually_mem_nhds</a> which says that a neighborhood of <code>x</code> has to also be a neighborhood of points close enough to <code>x</code></p>",
        "id": 397957462,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1697992631
    },
    {
        "content": "<p>Your (1) and (3) are the answer for my  question about one to one correspondence in pointwise sense. Will the topology formed by a filter in (3) be exactly the one in (1)?  What if given another filter?  I learned topology in mathematics but not filter.</p>",
        "id": 397958179,
        "sender_full_name": "Ming Li",
        "timestamp": 1697992846
    },
    {
        "content": "<p>Specifically, to make a topology out of an indexed family of filters you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.mkOfNhds#doc\">docs#TopologicalSpace.mkOfNhds</a>, and then to check that the topology is what you wanted (i.e., your family coincides with the neighborhoods in the topology you obtain) you have to use something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.nhds_mkOfNhds#doc\">docs#TopologicalSpace.nhds_mkOfNhds</a> (you need to show that your family satisfies two conditions, which are always indeed satisfies by neighborhoods in a topology but of course not always satisfied by an arbitrary collections of filters).</p>",
        "id": 397959044,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697993723
    },
    {
        "content": "<p>Ah right, you can always define a topology from a family of filters, but then the neighborhood filters my not be equal to the filter you gave</p>",
        "id": 397960564,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1697995415
    },
    {
        "content": "<p>And yes, when restricted to the families of filter which satisfy the extra \"locality\" axiom, you get a true bijection between topologies and families of filters</p>",
        "id": 397960650,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1697995515
    },
    {
        "content": "<p>Ah yes, thanks. I forgot this condition was required to make the map bijective. I constructed the topology in my head and saw.that it worked, but didn't bother to check that the maps were inverses.</p>",
        "id": 397962866,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697998291
    },
    {
        "content": "<p>Ah great, thanks to all! Corresponding from a topology to a family of filters is exactly  \"independent of filters\" in local sense. Usually, the convergence induced by the family of filters might be non-topological one so that it includes ones in measure sense. Right?</p>",
        "id": 397980532,
        "sender_full_name": "Ming Li",
        "timestamp": 1698018841
    },
    {
        "content": "<p>Sure, you can have non-topological ones. The simplest example would be convergence at infinity. For instance, given a sequence <code>a : ‚Ñï ‚Üí ‚Ñù</code> and <code>L : ‚Ñù</code>, <code>Filter.Tendsto f Filter.atTop (ùìù L)</code> says exactly that the sequence converges to <code>L</code> as <code>n</code> goes to <code>‚àû</code>. But here, <code>Filter.atTop</code> represents the \"as <code>n</code> goes to <code>‚àû</code>\" bit, and this is not a topological filter‚Ä†, it is a filter defined in terms of the order structure on <code>‚Ñï</code>.</p>\n<p>‚Ä† It <em>is</em> possible to view <code>Filter.atTop</code> as <code>Filter.comap (‚Üë) (ùìù ‚àû)</code> from the Alexandroff (i.e., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OnePoint#doc\">docs#OnePoint</a>) compactification of <code>‚Ñï</code>, but it is certainly not defined this way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">OnePoint</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">comap</span> <span class=\"o\">((</span><span class=\"bp\">‚Üë</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">OnePoint</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"bp\">‚àû</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comap_coe_nhds_infty</span><span class=\"o\">,</span> <span class=\"n\">coclosedCompact_eq_cocompact</span><span class=\"o\">,</span>\n    <span class=\"n\">cocompact_eq_cofinite</span><span class=\"o\">,</span> <span class=\"n\">Nat.cofinite_eq_atTop</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 398118357,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698077587
    }
]