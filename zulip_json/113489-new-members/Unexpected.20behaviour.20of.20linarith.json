[
    {
        "content": "<p>Hi everyone! I was doing the last piece of the tutorial project. In exercise 0072, I met a subgoal that I thought <code>linarith</code> would solve but actually not.<br>\nThe subgoal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">is_sup</span> <span class=\"n\">A</span> <span class=\"n\">x</span>\n<span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">hu</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>If I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"n\">specialize</span> <span class=\"n\">hu</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>lean will show the following message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linarith</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">contradiction</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_sup</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>But don't <code>h_2</code> and <code>ᾰ</code> form a contradiction detectable by <code>linarith</code>? However, if I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"n\">specialize</span> <span class=\"n\">hu</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"n\">by_contradiction</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n          <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>lean returns</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">is_sup</span> <span class=\"n\">A</span> <span class=\"n\">x</span>\n<span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hu</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"n\">n</span>\n<span class=\"n\">hyp</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and a further line of <code>linarith</code> could solve the goal from here. I am very confused. What causes the different behaviour of <code>linarith</code> in the above two cases? What should I be careful about when I use <code>linarith</code>?</p>",
        "id": 352046996,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1682250090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"611077\">@Jiang Jiedong</span> There are some pretty printer options set in the tutorial that can lead to confusing situations like this.</p>\n<p>To set them to their default values, try putting <code>set_option pp.beta false</code> and <code>set_option pp.coercions true</code> on lines right before the <code>theorem</code>/<code>lemma</code>/<code>example</code> you are proving.</p>",
        "id": 352051505,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682251468
    },
    {
        "content": "<p>I am expecting you have some beta-reducible lambda expressions in one of your hypotheses. You can do <code>dsimp only at h</code> (for example) to do lambda calculus simplifications at the hypothesis <code>h</code>, if it's indeed the case there are lambdas in your expression.</p>",
        "id": 352051721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682251522
    },
    {
        "content": "<p>Thank you! <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  After I put  <code>set_option pp.beta false</code> and <code>set_option pp.coercions true</code>, the goal changed to<code> (λ (n : ℕ), x - 1 / (↑n + 1)) n ≤ u n</code>, which can be solved by <code>linarith</code> after a line of <code>dsimp only</code>. I don't understand about lambda expressions and beta-reductions. There is so much to learn :)</p>",
        "id": 352102954,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1682271822
    },
    {
        "content": "<p><code>λ (n : ℕ), x - 1 / (↑n + 1)</code> can be read as the function <code>n ↦ x - 1 / (n + 1)</code> in more normal mathematical notation, where the up-arrow in the original (based on the context) means \"this natural number should be interpreted as a real number\"</p>",
        "id": 352103343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682271959
    },
    {
        "content": "<p>Oh I see, <code>dsimp</code> evaluates the function <code>λ (n : ℕ), x - 1 / (↑n + 1)</code> at <code>n</code>, which <code>linarith</code> failed to do. Thank you very much!</p>",
        "id": 352105364,
        "sender_full_name": "Jiang Jiedong",
        "timestamp": 1682273022
    },
    {
        "content": "<p>Yep, and this sort of symbolic evaluation is known as \"beta reduction\"</p>",
        "id": 352107168,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682273827
    },
    {
        "content": "<p>For what it's worth, here are the most important \"Greek letter reduction\" codes: <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">https://leanprover.github.io/reference/expressions.html#computation</a></p>",
        "id": 352125245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682286626
    }
]