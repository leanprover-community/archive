[
    {
        "content": "<p>is the palindrome proposition in hitchhiker's guide... wrong? how would it work with even-length palindromes?</p>",
        "id": 196701355,
        "sender_full_name": "Nam",
        "timestamp": 1588801028
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">palindrome</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">palindrome</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">palindrome</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">sandwich</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"n\">palindrome</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">palindrome</span> <span class=\"o\">([</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 196701402,
        "sender_full_name": "Nam",
        "timestamp": 1588801052
    },
    {
        "content": "<p>[] has even length</p>",
        "id": 196701453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588801074
    },
    {
        "content": "<p>ahhh, i see where i got it wrong now. the <code>sandwich</code> constructor sandwiching a <strong>list</strong></p>",
        "id": 196701599,
        "sender_full_name": "Nam",
        "timestamp": 1588801134
    },
    {
        "content": "<p>i read it wrongly to be two lists sandwiching an element</p>",
        "id": 196701630,
        "sender_full_name": "Nam",
        "timestamp": 1588801148
    },
    {
        "content": "<p>Kevin, for a mathematician, your mastery of C.S. topics is astonishing.</p>",
        "id": 196728093,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1588828721
    },
    {
        "content": "<p>Once I remember an undergraduate asking me if zero was an even number</p>",
        "id": 196746018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588843686
    },
    {
        "content": "<p>The alternative being that the predicate only made sense on positive integers</p>",
        "id": 196746043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588843711
    },
    {
        "content": "<p>The Ancient Greeks didn't like division by 1, I'm told. They would write things like \"if n = 1, then m; otherwise m / n\".</p>",
        "id": 196911096,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1588952229
    },
    {
        "content": "<p>Thereby allowing division by 0? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 196911997,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1588952630
    },
    {
        "content": "<p>Division by what now?</p>",
        "id": 196915441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588954119
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span>\n<span class=\"n\">def</span> <span class=\"n\">diff_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">action</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">diff_list</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>#. why is the body of the first <code>def</code>, erm, kinda weird? it is a function type.<br>\n#. <code>diff_list</code> has one argument, why do we call it with 2 (a list, and the initial state)? is this the first argument (\\sigma) in <code>action</code>?</p>",
        "id": 197091538,
        "sender_full_name": "Nam",
        "timestamp": 1589161497
    },
    {
        "content": "<p><code>action</code> is defining a type, which is a function type in this case</p>",
        "id": 197091659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589161758
    },
    {
        "content": "<p>the type of <code>action</code> is <code>action : Type -&gt; Type -&gt; Type</code></p>",
        "id": 197091662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589161773
    },
    {
        "content": "<p><code>diff_list</code> has one argument, but the result is an <code>action</code>, which is itself a function, expecting an argument of its own (the sigma, as you say)</p>",
        "id": 197091710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589161821
    },
    {
        "content": "<p>so the first <code>def</code> is like a typedef in C?</p>",
        "id": 197092841,
        "sender_full_name": "Nam",
        "timestamp": 1589163680
    },
    {
        "content": "<p>is there a keyword for that? say, <code>alias</code>?</p>",
        "id": 197092849,
        "sender_full_name": "Nam",
        "timestamp": 1589163699
    },
    {
        "content": "<p><code>def</code> is like <code>typedef</code> indeed. There is no separate keyword, as in DTT the operations of making a type and making a term are the same</p>",
        "id": 197097988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589170092
    }
]