[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> rw [c] -/</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> dsimp [c] -/</span>\n    <span class=\"n\">simp</span> <span class=\"c1\">-- this works</span>\n</code></pre></div>\n<p>What's the correct way to do this?</p>",
        "id": 396393371,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697159475
    },
    {
        "content": "<p>Something stupid like this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 396393533,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697159558
    },
    {
        "content": "<p>To make it closer to my scenario:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.floor</span> <span class=\"o\">((</span><span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"c1\">-- complicated things</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"c1\">-- ??</span>\n</code></pre></div>\n<p>I don't want to expand <code>g</code>'s definition because it's quite complicated. I want to expand <code>f</code> first so that <code>f x</code> gets replaced with <code>x</code>, but I can't figure out a way to do that.</p>",
        "id": 396397218,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697161281
    },
    {
        "content": "<p>It seems a little annoying to rewrite using the definitions of <code>let</code>s compared to top-level declarations... The reason <code>rw [f]</code> would work if you had <code>def f := ...</code> is because of a feature called \"equational lemmas\", where a lemma <code>theorem f._eq_ (n : ℕ) : f n = n</code> is generated alongside your definition which <code>rw</code> and <code>simp</code> automatically look for when you try <code>rw [f]</code>.</p>",
        "id": 396399138,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697162308
    },
    {
        "content": "<p>I wonder if there's a tactic which generates a hypothesis that a <code>let</code> equals its definition. So here <code>hf : \\all n, f n = n</code></p>",
        "id": 396399194,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697162342
    },
    {
        "content": "<p>if you want <code>f</code> to be expanded everywhere, I think you could try <code>letI f</code> instead of <code>let f</code>. The I stands for \"inline\" and it automatically substitutes the definition of <code>f</code> inline whenever it is referenced</p>",
        "id": 396399797,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697162527
    },
    {
        "content": "<p>ah! maybe <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md#unfold_let\"><code>unfold_let</code></a> would work?</p>",
        "id": 396400061,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697162634
    },
    {
        "content": "<p>Oh wow, yes <code>unfold_let</code> works perfectly, thanks.</p>",
        "id": 396400253,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697162696
    },
    {
        "content": "<p>You can also use <code>set a := 1 with h</code> to get a named hypothesis which is helpful</p>",
        "id": 396400343,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697162730
    },
    {
        "content": "<p>Ah, that's how to do the \"equational lemma\" thing then.</p>",
        "id": 396400539,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697162798
    },
    {
        "content": "<p>I just tested <code>letI</code> and it didn't seem to make a difference so I guess it doesn't do what I thought <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 396401194,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697163074
    },
    {
        "content": "<p>I thought <code>letI</code> was about instances?</p>",
        "id": 396402485,
        "sender_full_name": "Chris Wong",
        "timestamp": 1697163740
    },
    {
        "content": "<p>Ah, they changed it from Lean 3 to 4 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 396402637,
        "sender_full_name": "Chris Wong",
        "timestamp": 1697163834
    },
    {
        "content": "<p>Another related question, is <code>funext</code> within <code>conv</code> removed in Lean 4? Or not ported?</p>",
        "id": 396403374,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697164175
    },
    {
        "content": "<p>Is there any way to rewrite this in Lean 4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- rw [add_zero] -- fails</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">funext</span> <span class=\"c1\">-- fails</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 396403591,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697164282
    },
    {
        "content": "<p>looks like <code>ext</code> instead of <code>funext</code> works?</p>",
        "id": 396403726,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697164344
    },
    {
        "content": "<p>Oh thanks a lot</p>",
        "id": 396404044,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697164511
    },
    {
        "content": "<p>That will save me a lot of time <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 396404065,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697164520
    },
    {
        "content": "<p><code>simp_rw [add_zero]</code> also works if the challenge is rewriting under binders</p>",
        "id": 396404214,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697164594
    },
    {
        "content": "<p>Oh so <code>simp_rw</code> goes inside binders as well</p>",
        "id": 396404299,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697164645
    },
    {
        "content": "<p>Nice. I finally proved my result after like a few hours..</p>",
        "id": 396404334,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697164662
    },
    {
        "content": "<p>To turn off this \"expand all <code>let</code>s\" behavior, you can use <code>dsimp (config := { zeta := false }) only [f]</code> which will not unfold g</p>",
        "id": 396492231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697198589
    },
    {
        "content": "<p>There is a thread somewhere petitioning to make this the default</p>",
        "id": 396492322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697198633
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/simp.20unfolding.20let.20bindings\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/simp.20unfolding.20let.20bindings</a></p>",
        "id": 396493252,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697198986
    },
    {
        "content": "<p>Should I just open a core lean4 issue?</p>",
        "id": 396493270,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697198999
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2682\">lean4#2682</a></p>",
        "id": 396505241,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697203364
    }
]