[
    {
        "content": "<p>I am using Fin n -&gt; A as my vector type. I want to write a function to convert from  FinVec  Option A, and I want to convert it into a FinVec A, with a default FinVec if any of the indices are none.</p>\n<p>I have working code that does it by converting to a vector using Vector.mOfFn, which gives Option Vector Nat, and then converting back to a function. I was wondering if there was some way I could do it without converting to a Vector.</p>\n<p>Here is the MWE which converts to Vector:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Vector.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">optfn_or_default</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Vector.mOfFn</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">getD</span> <span class=\"n\">default</span>\n  <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">optfn_or_default</span> <span class=\"n\">f1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">optfn_or_default</span> <span class=\"n\">f2</span>\n</code></pre></div>",
        "id": 394523827,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1696287001
    },
    {
        "content": "<p>That function looks a lot like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Traversable#doc\">docs#Traversable</a>. I wonder if such an instance is viable in Lean (functions cannot be Traversable in general, as the argument may be infinite, but that doesn't apply to <code>Fin _ -&gt; .</code>).</p>",
        "id": 394561692,
        "sender_full_name": "Chris Wong",
        "timestamp": 1696310346
    },
    {
        "content": "<p>I have a traversable instance for <code>Fin</code>-indexed functions in my computer project from last year. Let me dig it up.</p>",
        "id": 394584258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696321448
    },
    {
        "content": "<p>Is it generalizable to Fintype too? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 394596528,
        "sender_full_name": "Chris Wong",
        "timestamp": 1696326168
    },
    {
        "content": "<p>Actually, it's not quite a <code>Traversable</code> instance that I've got, but pretty sure it's what Jesse wants:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Vector</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Vector</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"s2\">\" ::ᵥ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vector.cons</span>\n\n<span class=\"sd\">/-- Apply a monadic function to each component of a vector, returning a vector inside the monad. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mapM</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">β</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">xs.head</span>\n    <span class=\"k\">let</span> <span class=\"n\">t'</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">mapM</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">xs.tail</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Vector</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Range</span>\n<span class=\"kn\">import</span> <span class=\"n\">TheFileAbove</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Enumeration of types</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Enum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">enum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">enum_nodup</span> <span class=\"o\">:</span> <span class=\"n\">enum.Nodup</span>\n  <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">enum.length</span>\n  <span class=\"n\">enum_index</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">enum.get</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Enum</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">enum</span> <span class=\"o\">:=</span> <span class=\"n\">List.finRange</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">enum_nodup</span> <span class=\"o\">:=</span> <span class=\"n\">List.nodup_finRange</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.length_finRange</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">n.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">enum_index</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">toString</span> <span class=\"bp\">$</span> <span class=\"n\">Enum.enum.map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">toString</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">Enum.enum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">Enum.index</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_isEmpty_of_nonempty</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">))⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Monad</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- TODO: Generalise to dependent types</span>\n<span class=\"sd\">/-- Return a random function from random results for each input. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pi</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">l.toList.get</span> <span class=\"o\">⟨</span><span class=\"n\">Enum.index</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">Vector.mapM</span> <span class=\"n\">r</span> <span class=\"o\">⟨</span><span class=\"n\">Enum.enum</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Monad</span>\n</code></pre></div>",
        "id": 394600567,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696327678
    },
    {
        "content": "<p>I think I have a PR with PiFin.mapM</p>",
        "id": 394629477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696337692
    },
    {
        "content": "<p><del>docs3#pi_fin.mmap</del></p>",
        "id": 394629638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696337747
    }
]