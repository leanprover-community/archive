[
    {
        "content": "<p>Hi, where can ask questions getting started with Lean4 on Debian, VSCode , tutorial, Paperproof ?</p>\n<p>I got everything installed and in VSCode I can see tiny standalone theorems in infoview and Paperproof, but when I try the <code>mathematics_in_lean tutorial</code> project, I get</p>\n<ol>\n<li>many minutes of build times ( up to 8 CPUS @ 90+% and  &gt;1GB RAM on each task (maybe partly shared?)<br>\nwhen I view MIL's <code>Common.lean</code>:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Common.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1438</span><span class=\"bp\">/</span><span class=\"mi\">1676</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Polynomial.BigOperators</span>\n</code></pre></div>\n<p>2.<br>\nErrors loading files. (I don't know if this is a funny way of saying \"file didn't finish building yet\" per <a href=\"https://github.com/leanprover-community/mathlib4/pull/1\">#1</a>, or a different problem.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Common.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"bp\">`$</span><span class=\"n\">HOME</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake</span> <span class=\"n\">print</span><span class=\"bp\">-</span><span class=\"n\">paths</span> <span class=\"n\">Init</span> <span class=\"n\">Paperproof</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span> <span class=\"n\">MIL.Common</span><span class=\"bp\">`</span> <span class=\"n\">failed</span><span class=\"o\">:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">MIL</span><span class=\"bp\">/</span><span class=\"n\">Common.leann</span>\n</code></pre></div>\n<p>I started this comment when I thought the build was stalled, but now I'm at  <code>info: [1630/1676] Building Mathlib.FieldTheory.Finite.Basic</code> so maybe if I keep waiting longer I'll be fine?</p>\n<p>I'm not sure what actions in VSCode cause the system to throw away build work so far and start over when I re-visit a .lean file.</p>",
        "id": 394694747,
        "sender_full_name": "M R",
        "timestamp": 1696360513
    },
    {
        "content": "<p>For 1, you missed <code>lake exe cache get</code></p>",
        "id": 394694833,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696360553
    },
    {
        "content": "<p>Oh, thank you!  I did notice that command on a doc page today, but  but I guess I thought it wasn't necessary yet in my context.</p>\n<p>Do I need to do all the <code>lake</code> commands in the same directory, or does the tool share packages/caches across my entire logged in user?</p>",
        "id": 394695230,
        "sender_full_name": "M R",
        "timestamp": 1696360714
    },
    {
        "content": "<p><code>lake exe cache get</code> downloaded a lot and completed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span> <span class=\"bp\">$</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache</span>\n<span class=\"n\">leantar</span> <span class=\"n\">is</span> <span class=\"n\">too</span> <span class=\"n\">old</span><span class=\"bp\">;</span> <span class=\"n\">downloading</span> <span class=\"n\">more</span> <span class=\"n\">recent</span> <span class=\"n\">version</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">3796</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">3796</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">3796</span><span class=\"bp\">/</span><span class=\"mi\">3796</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3796</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">38609</span> <span class=\"n\">ms</span>\n</code></pre></div>\n<p>and re-running in the same dir appears to maintain the existing cache (good):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3796</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">34144</span> <span class=\"n\">ms</span>\n</code></pre></div>\n<p>but then when I ran  <code>lake exe cache get</code>again in <code>mathematics_in_lean/</code>  subdir (because I'm not sure what the scope of the cache/build is), I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Downloading</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.17</span><span class=\"bp\">/</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Unpacking</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.17</span><span class=\"bp\">/</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">3225</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">128</span><span class=\"bp\">/</span><span class=\"mi\">3225</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">%</span><span class=\"o\">]</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">connect</span> <span class=\"n\">to</span> <span class=\"n\">lakecache.blob.core.windows.net</span> <span class=\"n\">port</span> <span class=\"mi\">443</span> <span class=\"n\">after</span> <span class=\"mi\">15279</span> <span class=\"n\">ms</span><span class=\"o\">:</span> <span class=\"n\">Couldn't</span> <span class=\"n\">connect</span> <span class=\"n\">to</span> <span class=\"n\">server</span>\n</code></pre></div>\n<p>and the error message keeps repeating until I quit.</p>\n<p>Maybe that's transient connectivity / firewall / quota enforcement...</p>",
        "id": 394696618,
        "sender_full_name": "M R",
        "timestamp": 1696361356
    },
    {
        "content": "<p>Yeah, I'd try it again in a little bit</p>",
        "id": 394696782,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696361423
    },
    {
        "content": "<p>yeah that error doesn't look lean-related. Different projects use different versions of mathlib so you need to download binaries on a per-project basis. Mathlib has about 10 releases per day.</p>",
        "id": 394696820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696361436
    },
    {
        "content": "<blockquote>\n<p>Oh, thank you! I did notice that command on a doc page today, but but I guess I thought it wasn't necessary yet in my context.</p>\n</blockquote>\n<p>It's not necessary, if you're prepared to spend many minutes of build time :-)</p>",
        "id": 394696994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696361514
    },
    {
        "content": "<p>Something is still wrong with my <code>cache</code>, so I'm leaving <code>mathematics_in_lean</code> compiling <code>Common.lean</code> in  the background all day.<br>\nI switched to <code>Theorem Proving in Lean</code> and the \"Try It\" button  + <code>import Paperproof</code> is working to execute and visualize those examples. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span><br>\nThanks for the guidance.</p>",
        "id": 394704117,
        "sender_full_name": "M R",
        "timestamp": 1696364844
    },
    {
        "content": "<p>if you want to retry cache after an aborted attempt, it might help to run <code>lake exe cache clean</code></p>",
        "id": 394713913,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696368655
    },
    {
        "content": "<p>I think <code>lake clean</code> is even more likely to work (I don't know what the difference is but I've switched to <code>lake clean</code> now always)</p>",
        "id": 394716721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696370394
    },
    {
        "content": "<p>Cache clean specifically purges ~/.cache/mathlib which is usually (and hopefully) not inside the project folder.</p>",
        "id": 394724811,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696375740
    },
    {
        "content": "<p>And clean just removes stuff like lake_packages and build?</p>",
        "id": 394757219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696393904
    },
    {
        "content": "<p>That's my understanding</p>",
        "id": 394773364,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696403521
    },
    {
        "content": "<p>There was a bad release of lake at some point that broke <code>cache</code> (requiring <code>lake clean</code> as a workaround); perhaps MIL doesn't yet have the mathlib change that fixes the issue</p>",
        "id": 394786704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696408272
    },
    {
        "content": "<p>Oh maybe that's why I elevated <code>lake clean</code> in my mental model of what to do when things go wrong</p>",
        "id": 394823104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696420234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> which mathlib change are you talking about?</p>",
        "id": 394833185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696423738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"656115\">@M R</span> what is <code>Paperproof</code> in the title of this thread?</p>",
        "id": 394833575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696423854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Starting.3A.20Debian.2C.20VSCode.20.2C.20Lean4.20.2C.20tutorial.2C.20Paperproof/near/394833185\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> which mathlib change are you talking about?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/2444\">lean4#2444</a> introduced new files that should be cached, and <a href=\"https://github.com/leanprover-community/mathlib4/pull/7291\">#7291</a> started caching them. In the meantime, the fact that <code>.hash</code> files weren't cached lead to trouble and <code>lake exe cache get</code> didn't work well. I think neither is included in MIL's toolchain though.</p>",
        "id": 394833941,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696423969
    },
    {
        "content": "<p><a href=\"https://github.com/Paper-Proof/paperproof\">https://github.com/Paper-Proof/paperproof</a> by <span class=\"user-mention\" data-user-id=\"480079\">@Evgenia Karunus</span> and <span class=\"user-mention\" data-user-id=\"599399\">@Anton Kovsharov</span>.</p>",
        "id": 394834174,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696424049
    },
    {
        "content": "<p>Was this ever mentioned here?</p>",
        "id": 394836389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696424683
    },
    {
        "content": "<p><code>mathematics_in_lean</code> works pretty well in gitpod, so I was probably just holding it wrong on my local machine. (Unless the gitpod experience is using a fixed good snapshot, and I was using a damaged latest version).</p>\n<p>I haven't tried adding Paperproof to the gitpod yet (because I'm running gitpod with Lean on a browser on my phone! <span aria-label=\"mind blown\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"mind blown\">:mind_blown:</span> )</p>\n<p>I'll try local setup again later, after I run out of free gitpod hours, if I'm not ready to pay. </p>\n<p><a href=\"https://leanprover-community.github.io/mathematics_in_lean/C01_Introduction.html#getting-started\">https://leanprover-community.github.io/mathematics_in_lean/C01_Introduction.html#getting-started</a></p>",
        "id": 394842421,
        "sender_full_name": "M R",
        "timestamp": 1696426481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Starting.3A.20Debian.2C.20VSCode.20.2C.20Lean4.20.2C.20tutorial.2C.20Paperproof/near/394836389\">said</a>:</p>\n<blockquote>\n<p>Was this ever mentioned here?</p>\n</blockquote>\n<p>Not here, but one of the authors posted about it on HN: <a href=\"https://news.ycombinator.com/item?id=37583022\">https://news.ycombinator.com/item?id=37583022</a></p>",
        "id": 394880387,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696438292
    },
    {
        "content": "<p>I don't think Paperproof can work in Gitpod, since the PaperProof VSCode Extension is not available in the \"VSCode for Web\" variant that Gitpod uses. (The .lean library seems to work, but there's no way to see the output diagram.)</p>\n<p>I'll try again on my local machine at a future point in time, and try to make my local machine setup look the same as the Gitpod workspace.</p>",
        "id": 395085714,
        "sender_full_name": "M R",
        "timestamp": 1696525505
    }
]