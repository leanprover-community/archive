[
    {
        "content": "<p>I am getting a weird <code>application type mismatch</code> message, where both the actual and expected type are the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">tmp13</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">tmp10</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">tmp10</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">))</span>\n      <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)))</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"n\">List.get</span> <span class=\"n\">xs</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">))</span>\n      <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)))</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"n\">List.get</span> <span class=\"n\">xs</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Here is the relevant code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tmp10.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">as.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">tmp3</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">tmp9</span> <span class=\"n\">n</span> <span class=\"n\">as.length</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">tmp7</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">as.get</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Eq.subst</span>\n      <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">xs.get</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n      <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">tmp13</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">tmp10</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>What I am trying to prove is <code>List.reverse_aux2</code> which is already part of Mathlib, but I wanted to have a go myself as an exercise. Therefore this question is not about how to prove the theorem, but how to interpret the weird error message.</p>",
        "id": 371328954,
        "sender_full_name": "Kuba",
        "timestamp": 1688169999
    },
    {
        "content": "<p>can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? The code above doesn't run. Put <code>by convert</code> in front of your proof to get more detailed information about the part that Lean is stuck on.</p>",
        "id": 371330073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688170531
    },
    {
        "content": "<p>Sorry, here is all you should need (no imports required, I only used stuff that is part of Init):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tmp1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tmp2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">tmp1</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp6.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">as.length</span> <span class=\"bp\">+</span> <span class=\"n\">bs.length</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_add</span> <span class=\"n\">bs.length</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">tmp6</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"o\">(</span>\n      <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_succ</span> <span class=\"n\">as.length</span> <span class=\"n\">bs.length</span><span class=\"o\">)</span> <span class=\"o\">(</span>\n        <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_add</span> <span class=\"n\">as.length</span> <span class=\"n\">bs.length</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp7.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">as.length</span> <span class=\"bp\">&lt;=</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">tmp6</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_right</span> <span class=\"n\">as.length</span> <span class=\"n\">bs.length</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp9</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp14</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.trans</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.add_comm</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_sub</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_sub</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp13.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">as.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.trans</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.succ_sub_succ</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tmp14</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">tmp14</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp10.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">as.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">tmp3</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">tmp9</span> <span class=\"n\">n</span> <span class=\"n\">as.length</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">tmp7</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">as.get</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Eq.subst</span>\n      <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">xs.get</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n      <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">tmp13</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">tmp10</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 371331153,
        "sender_full_name": "Kuba",
        "timestamp": 1688171038
    },
    {
        "content": "<p>I tried using the <code>convert</code> tactic. Since 'convert' is part of Mathlib, I cloned and tried building it on my machine (not sure whether that was successful). However, I can't import it into the file that contains my failing code, I get: <code>unknown package 'Mathlib'</code>.</p>",
        "id": 372421645,
        "sender_full_name": "Kuba",
        "timestamp": 1688508547
    },
    {
        "content": "<p>You shouldn't manually clone mathlib, rather you need to add a dependency on mathlib inside your <code>lakefile.lean</code> by adding the lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n</code></pre></div>\n<p>just before the default target</p>",
        "id": 372429737,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688514216
    },
    {
        "content": "<p>Then run <code>lake update</code>, <code>lake exe cache get</code></p>",
        "id": 372429759,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688514240
    },
    {
        "content": "<p>Thank you for the help with importing Mathlib, it works now.</p>\n<p>I inserted <code>by convert</code> before the proof and this is what I got (code+infoview contents in the comments):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Convert</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tmp2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">tmp1</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp6.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">as.length</span> <span class=\"bp\">+</span> <span class=\"n\">bs.length</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_add</span> <span class=\"n\">bs.length</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">tmp6</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"o\">(</span>\n      <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_succ</span> <span class=\"n\">as.length</span> <span class=\"n\">bs.length</span><span class=\"o\">)</span> <span class=\"o\">(</span>\n        <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_add</span> <span class=\"n\">as.length</span> <span class=\"n\">bs.length</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp7.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">as.length</span> <span class=\"bp\">&lt;=</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">tmp6</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_right</span> <span class=\"n\">as.length</span> <span class=\"n\">bs.length</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp9</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp14</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.trans</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.add_comm</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_sub</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_sub</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp13.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">as.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.trans</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.succ_sub_succ</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tmp14</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">tmp14</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp10.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">as.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">tmp3</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">tmp9</span> <span class=\"n\">n</span> <span class=\"n\">as.length</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">tmp7</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">as.get</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Eq.subst</span>\n      <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">xs.get</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n      <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">tmp13</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">tmp10</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">α : Type u</span>\n<span class=\"cm\">⊢ ∀ (as bs : List α) (n : Nat) (h : n &lt; List.length as),</span>\n<span class=\"cm\">  List.get (List.reverseAux as bs)</span>\n<span class=\"cm\">      { val := List.length as - 1 - n, isLt := (_ : List.length as - 1 - n &lt; List.length (List.reverseAux as bs)) } =</span>\n<span class=\"cm\">    List.get as { val := n, isLt := h }</span>\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  Nat.lt_of_succ_lt_succ h</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  h</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.1775 : Sort ?u.1766</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Nat.succ m &lt; Nat.succ (List.length xs) : Prop</span>\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">unknown free variable '_uniq.1808'</span>\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mistmatch, alternative has type</span>\n<span class=\"cm\">  (fun y =&gt;</span>\n<span class=\"cm\">      List.get (List.reverseAux xs (x :: bs))</span>\n<span class=\"cm\">          { val := y, isLt := (_ : y &lt; List.length (List.reverseAux xs (x :: bs))) } =</span>\n<span class=\"cm\">        List.get xs { val := m, isLt := (_ : m &lt; List.length xs) })</span>\n<span class=\"cm\">    (List.length (x :: xs) - 1 - Nat.succ m) : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ?m.1576 (x :: xs) bs (Nat.succ m) h : Sort ?u.1547</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>which is not that helpful.</p>",
        "id": 372432757,
        "sender_full_name": "Kuba",
        "timestamp": 1688515939
    },
    {
        "content": "<p>\"<code>_uniq.1808</code>\" points to a bug somewhere (maybe the <code>convert</code> tactic? maybe from some interaction between <code>convert</code> and <code>match</code>?)</p>",
        "id": 372433708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688516380
    },
    {
        "content": "<p>Do you mean a bug in my code, or in the Mathlib?</p>",
        "id": 372433881,
        "sender_full_name": "Kuba",
        "timestamp": 1688516457
    },
    {
        "content": "<p>mathlib or Lean</p>",
        "id": 372433970,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688516501
    },
    {
        "content": "<p>though it could be your code too</p>",
        "id": 372434057,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688516531
    },
    {
        "content": "<p>Why is the second case of the match <code>()</code>? That's <code>Unit</code>, but it looks like the goal is an equality</p>",
        "id": 372434117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688516567
    },
    {
        "content": "<p>It is just a stub, I have not done the other cases yet.</p>",
        "id": 372434357,
        "sender_full_name": "Kuba",
        "timestamp": 1688516686
    },
    {
        "content": "<p>You'd better put <code>sorry</code> rather than something that's type incorrect then</p>",
        "id": 372434743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688516865
    },
    {
        "content": "<p>Here is a corrected version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Convert</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tmp2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">tmp1</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp6.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">as.length</span> <span class=\"bp\">+</span> <span class=\"n\">bs.length</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_add</span> <span class=\"n\">bs.length</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">tmp6</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"o\">(</span>\n      <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_succ</span> <span class=\"n\">as.length</span> <span class=\"n\">bs.length</span><span class=\"o\">)</span> <span class=\"o\">(</span>\n        <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_add</span> <span class=\"n\">as.length</span> <span class=\"n\">bs.length</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp7.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">as.length</span> <span class=\"bp\">&lt;=</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">tmp6</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_right</span> <span class=\"n\">as.length</span> <span class=\"n\">bs.length</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp9</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp14</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.trans</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.add_comm</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_sub</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_sub</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp13.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">as.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.trans</span>\n  <span class=\"o\">(</span><span class=\"n\">Eq.subst</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.succ_sub_succ</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tmp14</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">tmp14</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp10.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">as.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">as.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">tmp3</span> <span class=\"n\">as.length</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">tmp9</span> <span class=\"n\">n</span> <span class=\"n\">as.length</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">tmp7</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">as.get</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Eq.subst</span>\n      <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.reverseAux</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">xs.get</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n      <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">tmp13</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">tmp10</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span>\n\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  Nat.lt_of_succ_lt_succ h</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  h</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  n &lt; List.length as : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Nat.succ m &lt; Nat.succ (List.length xs) : Prop</span>\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">unknown free variable '_uniq.1850'</span>\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mistmatch, alternative has type</span>\n<span class=\"cm\">  (fun y =&gt;</span>\n<span class=\"cm\">      List.get (List.reverseAux xs (x :: bs))</span>\n<span class=\"cm\">          { val := y, isLt := (_ : y &lt; List.length (List.reverseAux xs (x :: bs))) } =</span>\n<span class=\"cm\">        List.get xs { val := m, isLt := (_ : m &lt; List.length xs) })</span>\n<span class=\"cm\">    (List.length (x :: xs) - 1 - Nat.succ m) : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ?m.1806 h : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 372435206,
        "sender_full_name": "Kuba",
        "timestamp": 1688517044
    },
    {
        "content": "<p>The tactic state changed to <code>No goals</code> and the first message looks more helpful now. But you still have the <code>_uniq</code> thingy.</p>",
        "id": 372435883,
        "sender_full_name": "Kuba",
        "timestamp": 1688517296
    }
]