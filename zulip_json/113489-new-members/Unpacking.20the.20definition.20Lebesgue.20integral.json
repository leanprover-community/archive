[
    {
        "content": "<p>In Mathlib the Lebesgue integral is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">irreducible_def</span> <span class=\"n\">lintegral</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₛ</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">g.lintegral</span> <span class=\"n\">μ</span>\n</code></pre></div>\n<p>I’m familiar with the mathematical definition and I can see the resemblance. But I would like to really understand why the Lean definition is correct.</p>\n<p>By clicking on the supremum symbol, I get the following explanation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `⨆ i, f i` : `iSup f`, the supremum of the range of `f`;</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iSup</span> <span class=\"o\">[</span><span class=\"n\">SupSet</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sSup</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and further</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"⨆ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">iSup</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>I having trouble understanding how to interpret the notation declaration. It looks like <code>iSup</code> takes a function as a single argument, so how does the indexing <code>i</code> come into the picture? And what is <code>f</code> and <code>i</code>in the Lean definition of the integral? I'm sorry if I sound incoherent, but I find it so confusing that I don't know where to start.</p>",
        "id": 379985001,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690712024
    },
    {
        "content": "<p>The notation means: take the supremum over all simple functions <code>g</code> which are bounded above by <code>f</code> of the integral of <code>g</code> (where the integral of a simple function is in fact just a sum). There is a subtelty, though, that there is a double supremum. It unfolds to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₛ</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">g.lintegral</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Let's first have a look at the second term <code>⨆ (H : ⇑g ≤ f), g.lintegral μ</code>. If <code>g</code> is bounded by <code>f</code>, it is a supremum over a single index (the proposition that <code>g</code> is bounded by <code>f</code>) of the quantity <code>g.lintegral μ</code>, so it will just reduce to <code>g.lintegral μ</code>. On the other hand, if <code>g</code> is not bounded by <code>f</code>, it is a supremum over the empty set, i.e., <code>0</code> (and will therefore not play any role in the overall supremum).</p>\n<p>Now, the outermost supremum is indeed also of the form <code>⨆ i, F i</code>, where the indexing space is the space of all simple functions (that's why we use the letter <code>g</code> instead of <code>i</code>, as it is more evocative), and the function <code>F</code> maps <code>g</code> to <code>⨆ (H : ⇑g ≤ f), g.lintegral μ</code>, i.e., <code>0</code> if <code>g</code> is not bounded by <code>f</code> and the integral of <code>g</code> otherwise.</p>",
        "id": 379999373,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1690715263
    },
    {
        "content": "<p>Thank you for taking your time to give such a thorough answer. I  think I get it now :) I had to reread a couple of times to really appreciate it. From the idea of the nested supremum, I made by own (very ugly) definition of the integral as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lintegral</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₛ</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">g.lintegral</span> <span class=\"n\">μ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mylintegral</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iSup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₛ</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">iSup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SimpleFunc.lintegral</span> <span class=\"n\">g</span> <span class=\"n\">μ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mylintegral</span> <span class=\"n\">μ</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">lintegral</span> <span class=\"n\">μ</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It at least helped myself better understand what we were indexing over. I guess part of what confused me is the use <code>g.lintegral </code> notation, that combines the function and index intro one.</p>",
        "id": 380013872,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1690718767
    }
]