[
    {
        "content": "<p>In the following example, as you can see, we have the <code>?y</code> metavariable introduced in the middle of the proof of <code>sample</code> due to <code>apply</code>, is there a way that I could keep that variable?<br>\nCertainly I can use <code>have</code> but the actual proof I'm looking at involves metavariables of complex objects.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ind</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">prop</span><span class=\"o\">:</span> <span class=\"n\">ind</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ind</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">Case1</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"n\">ind.A</span> <span class=\"n\">ind.B</span>\n<span class=\"bp\">|</span> <span class=\"n\">Case2</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"n\">ind.B</span> <span class=\"n\">ind.C</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">h_trans</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">prop</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prop</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">prop</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"n\">ind.A</span> <span class=\"n\">ind.C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h_trans</span>\n  <span class=\"c1\">-- here the goal is as follows:</span>\n  <span class=\"c1\">-- case a</span>\n  <span class=\"c1\">-- h_trans: ∀ (x y z : ind), prop x y → prop y z → prop x z</span>\n  <span class=\"c1\">-- ⊢ prop ind.A ?y</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"c1\">-- now the goal becomes the follows without the terms in parentheses</span>\n  <span class=\"c1\">-- h_trans: ∀ (x y z : ind), prop x y → prop y z → prop x z</span>\n  <span class=\"c1\">-- (y: ind) -- not there</span>\n  <span class=\"c1\">-- (h0: y = ind.B) -- not there</span>\n  <span class=\"c1\">-- (h1: prop ind.A y) -- not there</span>\n  <span class=\"c1\">-- ⊢ prop ind.B ind.C</span>\n  <span class=\"c1\">-- **** can I somehow maintain the ?y variable, and the proved goals, which would be those in the parentheses?</span>\n</code></pre></div>",
        "id": 399550279,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698767277
    },
    {
        "content": "<p>If you have <code>?y</code> as a metavariable, you can refer to it as <code>?y</code>. For example, if you put <code>let val := ?y</code> after <code>constructor</code> you can see that <code>?y</code> still exists.</p>",
        "id": 399562246,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698770607
    },
    {
        "content": "<p>Thanks! That makes a lot more sense. For some reason I thought I cannot use question marks</p>",
        "id": 399568277,
        "sender_full_name": "Z. Wu",
        "timestamp": 1698772687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"649880\">Z. Wu</span> has marked this topic as resolved.</p>",
        "id": 399568287,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698772690
    }
]