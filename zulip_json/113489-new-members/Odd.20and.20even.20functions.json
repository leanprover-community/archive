[
    {
        "content": "<p>I have been working on some definitions and properties of the Hermite polynomials. I have defined them as polynomials with a recursive relation, and as a function involving the nth derivative of a gaussian, and have shown these definitions are equivalent. One of the properties I would like to show is that the <code>n</code>th hermite polynomial is odd or even, depending on <code>n</code>. I was expecting that odd and even funcitons would already be well-established in mathlib, but when I looked around, the best I could find is this discussion where someone was asking what would be the best way to define even and odd functions to be used as part of something else they were working on: <a href=\"#narrow/stream/113489-new-members/topic/Level.20of.20Generality.20while.20Contributing/near/276689504\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Level.20of.20Generality.20while.20Contributing/near/276689504</a></p>\n<p>Is there indeed no existing definition of even and odd functions, and if so, what's the best way to go about defining them in my case?</p>",
        "id": 345793756,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680213162
    },
    {
        "content": "<p>Usually, to state that a function <code>foo</code> is even you'd write <code>@[simp] lemma foo_neg : foo (-x) = foo x</code>, and similarly for odd</p>",
        "id": 345797596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680214974
    },
    {
        "content": "<p>Eric, that's not the definition you want for polynomials though, because that would involve conflating the polynomial with its evaluation function.</p>",
        "id": 345798196,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680215256
    },
    {
        "content": "<p>I was tricked by the request for \"even functions\"!</p>",
        "id": 345798347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680215327
    },
    {
        "content": "<p>I still think that proving <code>(hermite n).eval (- x) = (hermite n).eval x</code> and <code>(hermite n).eval (- x) = -(hermite n).eval x</code> and making them simp lemmas is likely all that's really needed here if the focus is just \"prove the function is even\"</p>",
        "id": 345798550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680215409
    },
    {
        "content": "<p>Yeah, it could suffice for now. Probably in this circumstance that's all one might want. The weird thing is just that you can prove lemmas like that for certain polynomials <em>without</em> the requirement that the corresponding polynomial be even or odd (i.e., that the coefficients of odd, respectively even, degree terms are zero). For instance, when the ring has characteristic two.</p>",
        "id": 345799431,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680215825
    },
    {
        "content": "<p>Right, the strictly accurate statement would be <code>(hermite n).eval (-X) = hermite n</code> (for even-ness), I assume?</p>",
        "id": 345803043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680217439
    },
    {
        "content": "<p>That's still always true in characteristic 2. There's a naive notion of evenness which is always true in char 2 and a stronger one saying all coefficients of all X^(2n+1) are zero. My understanding of Hermite polynomials is that they're in Z[X] so the lowbrow definition will suffice here.</p>",
        "id": 345837103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680237943
    },
    {
        "content": "<p>slightly off-topic: <span class=\"user-mention\" data-user-id=\"578430\">@Luke Mantle</span> it's great to hear that you work on Hermite functions. If you want to PR your work to mathlib (which I would highly recommend), then you probably want to start with smaller pieces. The definition and the fact that they are given by the iterated derivative of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{-x^2/2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9869em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mtight\">/2</span></span></span></span></span></span></span></span></span></span></span></span> might be enough. The PR process takes a bit getting used to, so it is less frustrating when the PR is not too big.</p>",
        "id": 345841773,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680240289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> I do have a lemmas that I've worked towards, summarized here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">hermite_eq_iter</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hermite</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat.iterate</span> <span class=\"n\">x_sub_dx</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hermite_eq_exp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hermite</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">inv_gaussian</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">gaussian</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hermite_coeff_recur</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">hermite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">hermite</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">hermite</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hermite_coeff_explicit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">hermite</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">‼</span> <span class=\"bp\">*</span> <span class=\"n\">nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hermite_coeff_explicit'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">hermite</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">‼</span> <span class=\"bp\">*</span> <span class=\"n\">nat.choose</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>To start with a small piece, I could stick to the definition of <code>hermite n</code>, the lemma <code>hermite_eq_iter</code>, and a few supporting lemmas. This is my first experience with the process; where would I ask for write access to make a PR?</p>",
        "id": 346069745,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680302557
    },
    {
        "content": "<p>Here is a perfectly fine place (there are dedicated threads as well)</p>",
        "id": 346071248,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680303052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"578430\">@Luke Mantle</span> did you check whether all prerequisites are already in mathlib4? It seems to be a case where it makes sense to directly PR to mathlib4 in a new file.</p>",
        "id": 346132084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680337795
    },
    {
        "content": "<p>Patrick, we certainly do not have the (analysis)-derivative in mathlib4 (I don't know about the polynomial derivative).</p>",
        "id": 346153988,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680345091
    },
    {
        "content": "<p>I am working on that, though.</p>",
        "id": 346154192,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680345144
    },
    {
        "content": "<p>(polynomial derivatives are in mathlib4)</p>",
        "id": 346154846,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680345354
    },
    {
        "content": "<blockquote>\n<p>This is my first experience with the process; where would I ask for write access to make a PR?</p>\n</blockquote>\n<p>you need to give us your github username to be granted access.</p>",
        "id": 346162300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680347519
    },
    {
        "content": "<p>Ah, I assume you're <a href=\"https://github.com/lukemantle\">https://github.com/lukemantle</a> based on the name and avatar match and \"hermite\" project; access granted!</p>",
        "id": 346163921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680348001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Odd.20and.20even.20functions/near/346132084\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"578430\">Luke Mantle</span> did you check whether all prerequisites are already in mathlib4? It seems to be a case where it makes sense to directly PR to mathlib4 in a new file.</p>\n</blockquote>\n<p>Ah, how do you check this? I have been working in Lean 3 the whole time.</p>",
        "id": 346645424,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680545404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Odd.20and.20even.20functions/near/346163921\">said</a>:</p>\n<blockquote>\n<p>Ah, I assume you're <a href=\"https://github.com/lukemantle\">https://github.com/lukemantle</a> based on the name and avatar match and \"hermite\" project; access granted!</p>\n</blockquote>\n<p>Yes, that's right; thanks!</p>",
        "id": 346645557,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680545445
    },
    {
        "content": "<p>You can simply look at the mathlib4 repository if you know which files you need.</p>",
        "id": 346650217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680546735
    },
    {
        "content": "<p>Ok, I see</p>",
        "id": 346657089,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680548925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Where would be the best place in mathlib to add the hermite polynomials?</p>",
        "id": 346969101,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680642291
    },
    {
        "content": "<p>A new file in <code>data/polynomial</code>?</p>",
        "id": 346969251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680642340
    },
    {
        "content": "<p>I do have multiple files (since I have multiple equivalent definitions), but I would be starting with my <code>basic.lean</code>. Would it be good to make a directory <code>data/polynomial/hermite</code>?</p>",
        "id": 346969549,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680642449
    },
    {
        "content": "<p>Actually, <code>ring_theory/polynomial/hermite</code> might be better, since that's next to <code>ring_theory/polynomial/chebyshev</code></p>",
        "id": 346969876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680642566
    },
    {
        "content": "<p>I think just add <code>hermite.lean</code> for now, renaming it to <code>hermite/basic.lean</code> later is easy</p>",
        "id": 346969921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680642587
    },
    {
        "content": "<p>Ok, great!</p>",
        "id": 346970044,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680642632
    },
    {
        "content": "<p>Also, would it preferable to define <code>hermite n</code> as polynomials over <code>ℝ</code>, <code>ℤ</code>, or <code>comm_ring R</code>?</p>",
        "id": 346970307,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680642748
    },
    {
        "content": "<p>Why don't you make a PR with what you have, and list your questions in the description? Sometimes its easier to answer these things with the code in front of us.</p>",
        "id": 346970736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680642941
    },
    {
        "content": "<p>Ok, sounds good</p>",
        "id": 346970795,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680642961
    },
    {
        "content": "<p>My guess would be <code>comm_ring R</code>, but I might change my mind when I see what you have. I would guess that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> is not the right choice.</p>",
        "id": 346970933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680643007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I've submitted the PR <a href=\"https://github.com/leanprover-community/mathlib/pull/18739\">#18739</a></p>",
        "id": 346976914,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1680645541
    },
    {
        "content": "<p>Question: is the statement that \"a polynomial with only even terms is an even function\" already in mathlib? Since <span class=\"user-mention\" data-user-id=\"578430\">@Luke Mantle</span> has the formulas for the individual coefficients, the stronger statement (that <code>hermite n</code> only has even/odd powers of <code>X</code>) is already more or less in place.</p>",
        "id": 346979089,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1680646461
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">polynomial_even</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.eval</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.eval</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 346979135,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1680646483
    },
    {
        "content": "<p>\"has only even terms\" sounds like the sort of thing that can written in a handful of ways, some of which are easier to deal with than others</p>",
        "id": 346981112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680647328
    },
    {
        "content": "<p>In an extreme case, you could write something like <code> ∃ q : polynomial R, q.aeval (X*X) = p</code>.</p>",
        "id": 346981340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680647410
    },
    {
        "content": "<p><code>p ∈ algebra.adjoin R {X*X}</code> is another way</p>",
        "id": 346981689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680647534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/113489-new-members/topic/Odd.20and.20even.20functions/near/346979135\">said</a>:</p>\n<blockquote>\n<p>Something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">polynomial_even</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.eval</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.eval</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This form is the one closest to <span class=\"user-mention\" data-user-id=\"578430\">@Luke Mantle</span> 's repository (<code>lemma hermite_coeff_odd_zero (n k : ℕ) (hnk : odd (n + k)) : coeff (hermite n) k = 0</code>)</p>",
        "id": 346990059,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1680651155
    },
    {
        "content": "<p>Honestly, I would not bother with a definition and just prove that <code>(hermite n).eval (-x) = (-1)^n * (hermite n).eval x</code>.</p>",
        "id": 347014558,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680666397
    },
    {
        "content": "<p>For Bernoulli polynomials it wasn't clear to me what the best base ring was, because there were denominators. But here surely the best base ring is the integers, and if so then Moritz' definition is fine. The alternative is \"an arbitrary commutative ring\" but it's easy to do the coercion.</p>",
        "id": 347241201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680724046
    },
    {
        "content": "<p>if there are denominators then why not Q? Or are the denominators all e.g. powers of 2 so you are thinking about rings of nonzero characteristic</p>",
        "id": 347241423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680724126
    },
    {
        "content": "<p>Because the results relating Bernoulli polynomials to classical and p-adic zeta functions need R and Q_p versions, so another possibility is \"any characteristic zero field\" or \"any Q-algebra\"</p>",
        "id": 347241808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680724261
    },
    {
        "content": "<p>doesn't \"it's easy to do the coercion\" also apply to Q -&gt; char zero field?</p>",
        "id": 347243266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680724727
    },
    {
        "content": "<p>Yeah I should think so. So probably for Hermite you just want them over Z</p>",
        "id": 347291992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680750231
    },
    {
        "content": "<p>Yes, for the Hermite polynomials, the coefficients are integers, not rationals. The only reason some standard formulas have division is because they're writing out binomial coefficients as ratios of factorials (which is unnecessary since <code>a.choose b</code> is an integer).</p>",
        "id": 348127230,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1681098736
    },
    {
        "content": "<p>there's also desc/asc_factorial &amp; pochhammer if that's needed</p>",
        "id": 348185556,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681123826
    }
]