[
    {
        "content": "<p>Maybe similarly to <code>if h : c then x else y</code>, is there something like <code>let h : y := f x</code> which gives us <code>h : y = f x</code>? Or, how does one typically accomplish storing a <code>∃ x, y = f x</code> in a structure with a field <code>y</code>?</p>",
        "id": 398554417,
        "sender_full_name": "Caroline",
        "timestamp": 1698264782
    },
    {
        "content": "<p>I'm not quite sure what you are asking, do you want a tactic that creates a new variable that is equal to a function of some existing one (and a proof of that). If so is <code>set y := f x with h</code> what you want?</p>",
        "id": 398554835,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698264980
    },
    {
        "content": "<p>You might not need such an <code>h</code>, since <code>rfl</code> might work as <code>y = f x</code> is a definitional equality</p>",
        "id": 398554969,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698265060
    },
    {
        "content": "<p><code>rfl</code> would probably work with a constant but it's not working in my case inside a function</p>",
        "id": 398555081,
        "sender_full_name": "Caroline",
        "timestamp": 1698265100
    },
    {
        "content": "<p><code>rfl</code> tells me <code>rfl has type  x = x  but is expected to have type  x = f y</code></p>",
        "id": 398555176,
        "sender_full_name": "Caroline",
        "timestamp": 1698265152
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 398555219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698265181
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.length</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">-- but in reality assume `f` is doing a bunch more work</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">hasBeenPassedThroughF</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyStruct</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"n\">MyStruct.mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n<span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">▶</span> <span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rfl'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">lhs</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">rhs</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n<span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>(it worked with just <code>y := f x</code> actually, so i had to replace <code>y</code> with <code>⟨y, z⟩</code> to make it closer enough to my actual code that it fails, though the error is not quite the same as the one in my actual code)<br>\n(though me having had to do this makes me think there's something to do with the fact that i'm using a pair here)</p>",
        "id": 398556179,
        "sender_full_name": "Caroline",
        "timestamp": 1698265625
    },
    {
        "content": "<p>Oh, yeah, it works if i replace <code>let ⟨y, z⟩ :=</code> with <code>let p :=</code> and then use <code>MyStruct.mk p.fst p.snd</code></p>",
        "id": 398556366,
        "sender_full_name": "Caroline",
        "timestamp": 1698265717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"636694\">Caroline</span> has marked this topic as resolved.</p>",
        "id": 398556405,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698265734
    },
    {
        "content": "<p>(kinda weird)</p>",
        "id": 398556433,
        "sender_full_name": "Caroline",
        "timestamp": 1698265745
    },
    {
        "content": "<p>Yeah, the pair is special. That <code>let</code> syntax is hiding a <code>match</code> expression.</p>",
        "id": 398556439,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698265751
    },
    {
        "content": "<p>You can work around it by expanding it a bit yourself and then using a feature of <code>match</code> expressions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyStruct</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyStruct.mk</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 398556456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698265762
    },
    {
        "content": "<p>It might be worth figuring out a design for <code>let</code> that could give you that <code>h</code>... </p>\n<p><code>let h : ⟨y, z⟩ := ...</code> wouldn't work because that can be confused for saying that <code>h</code> has type <code>⟨y, z⟩</code>.</p>",
        "id": 398556523,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698265802
    },
    {
        "content": "<p>ooh, <code>match h : w with</code> ! neat!<br>\nthanks for the help</p>",
        "id": 398556707,
        "sender_full_name": "Caroline",
        "timestamp": 1698265909
    }
]