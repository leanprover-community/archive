[
    {
        "content": "<p>Switching gears from my other project... I'd like to use Lean to check my work with/potentially automate operator arithmetic. Things like quantum mechanics, where I would like to be able to be sure I haven't dropped a commutator somewhere</p>",
        "id": 278917394,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649904895
    },
    {
        "content": "<p>It seems like I can do this by declaring a generic, noncommutative <code>star_ring</code> and using it to make a <code>star_algebra</code>, maybe? Of whatever operators over C</p>",
        "id": 278917470,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649904983
    },
    {
        "content": "<p>but my operators need to be \"square\", when I take their transpose/star they should be the same kind of object so I can add them and whatnot</p>",
        "id": 278917499,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649905048
    },
    {
        "content": "<p>I think this means somehow telling lean that <code>mul_opposite A</code> is not just equiv to but actually equal to <code>A</code>, but I'm not entirely sure how to do that safely/rigorously...</p>",
        "id": 278917565,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649905112
    },
    {
        "content": "<p>This should be pretty straightforward actually: square matrices have a ring instance on them, so things like addition and multiplication will just work out of the box.</p>",
        "id": 278919989,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1649908138
    },
    {
        "content": "<p>If you want a more abstract setting, you can see in <code>analysis/normed_space/star/basic</code> how to declare a C*-algebra, and all those operations should also just work.</p>",
        "id": 278920162,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1649908323
    },
    {
        "content": "<p>Yeah, this should \"just work\". Be aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#noncomm_ring\">tactic#noncomm_ring</a> which can help you proving some of the arithmetic.</p>",
        "id": 278920284,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649908464
    },
    {
        "content": "<p>Actually we do have an example from quantum mechanics that might be relevant: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/CHSH_inequality_of_comm\">docs#CHSH_inequality_of_comm</a>.</p>",
        "id": 278920337,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1649908534
    },
    {
        "content": "<p>ooh, I'll have to take a look</p>",
        "id": 278920685,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649908828
    },
    {
        "content": "<p>and yeah my worry is that the \"matrices\" I'm working with are continuous-indexed/uncountably infinite, and that can blow things up sometimes</p>",
        "id": 278920712,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649908862
    },
    {
        "content": "<p>notably anything to do with traces and determinants</p>",
        "id": 278920725,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649908878
    },
    {
        "content": "<p>oh, hold on, can you be more specific about exactly what you want to do? Indexing matrices by arbitrary types is fine, but I'm pretty sure we only have traces and determinants if the index types are fintypes.</p>",
        "id": 278921077,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649909271
    },
    {
        "content": "<p>I probably wouldn't be doing anything with them, I just don't have an encyclopedic knowledge of what results depend on them</p>",
        "id": 278924020,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649913376
    },
    {
        "content": "<p>though it would be cool if Lean could magic up a definition for functional determinants out of nowhere :V</p>",
        "id": 278924067,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649913466
    },
    {
        "content": "<p>I think we're rather a long way off before we can define functional determinants.</p>",
        "id": 278924644,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649914175
    },
    {
        "content": "<p>Right now <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_mul\">docs#matrix.has_mul</a> requires a finite index type, as does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det\">docs#matrix.det</a></p>",
        "id": 278925750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649915615
    },
    {
        "content": "<p>well, I'm going the C* route for now</p>",
        "id": 278927252,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649917247
    },
    {
        "content": "<p>but unfortunately it doesn't seem to recognize that <code>1 • 1 = 1</code> when <code>1: ℂ</code></p>",
        "id": 278927268,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649917277
    },
    {
        "content": "<p>okay, it looks like it was because I had extraneous information/multiple copies of various typeclasses</p>",
        "id": 278927465,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649917509
    },
    {
        "content": "<p>weird way of telling me tho</p>",
        "id": 278927470,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649917515
    },
    {
        "content": "<p>Bleh. Okay, I now have an expression <br>\n<code>↑6 * kp ^ 2 * km ^ 2</code><br>\nUnfortunately, what this actually says is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">mul_one_class.to_has_mul</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span>  <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kp</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">km</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 278932804,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922288
    },
    {
        "content": "<p>and as such is not recognized when I do <code>set kp2m2_6 := 6 * kp ^ 2 * km ^ 2</code> which is a much saner set of <code>has_mul.mul ℂ ℂ</code>s</p>",
        "id": 278932841,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922312
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? It's very difficult to help otherwise.</p>",
        "id": 278932881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649922347
    },
    {
        "content": "<p>I'd like to have something... less perverse if at all possible</p>",
        "id": 278932950,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922385
    },
    {
        "content": "<p>uh, hm</p>",
        "id": 278932951,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922387
    },
    {
        "content": "<p>I mean, I can just type out the exact expression above with a minimal amount of context, but that's a really artifical example?</p>",
        "id": 278933131,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922539
    },
    {
        "content": "<p>the reason I have to deal with that expression is that it's in the middle of a simplification, so I can't easily just choose a different representation, I don't think...</p>",
        "id": 278933162,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922573
    },
    {
        "content": "<p>Click on the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> link if you're not clear about what I mean</p>",
        "id": 278933525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649922822
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">algebra.ring.basic</span> <span class=\"n\">data.real.basic</span>\n  <span class=\"n\">data.complex.basic</span> <span class=\"n\">algebra.star.basic</span> <span class=\"n\">algebra.algebra.basic</span>\n  <span class=\"n\">analysis.normed_space.star.basic</span> <span class=\"n\">analysis.normed.normed_field</span>\n  <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">scratch</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_involutive_star</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">cstar_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">kp</span> <span class=\"n\">km</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ap</span> <span class=\"n\">am</span> <span class=\"n\">xp</span> <span class=\"n\">xm</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_module</span> <span class=\"n\">ℂ</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span><span class=\"bp\">`†`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"o\">:=</span> <span class=\"n\">has_star.star</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">R</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">pow</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ring.npow</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">algebra_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">smul_mul_smul</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">xp</span> <span class=\"bp\">=</span> <span class=\"n\">kp</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">ap</span> <span class=\"bp\">+</span> <span class=\"n\">ap</span><span class=\"bp\">†</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">xm</span> <span class=\"bp\">=</span> <span class=\"n\">km</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">am</span> <span class=\"bp\">+</span> <span class=\"n\">am</span><span class=\"bp\">†</span><span class=\"o\">)</span>\n  <span class=\"bp\">→</span> <span class=\"mi\">6</span> <span class=\"bp\">•</span> <span class=\"n\">xp</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">xm</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">introv</span> <span class=\"n\">xp_def</span> <span class=\"n\">xm_def</span><span class=\"o\">,</span> <span class=\"n\">substs</span> <span class=\"n\">xp_def</span> <span class=\"n\">xm_def</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">algebra_pow</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">smul_assoc</span> <span class=\"mi\">6</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_mul_smul</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">km</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nsmul_eq_mul</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">kp</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">km</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">scratch</span>\n</code></pre></div>",
        "id": 278933591,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922845
    },
    {
        "content": "<p>I mean I'm familiar with the concept of an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but it's not always clear exactly what \"minimal\" in fact means in practice</p>",
        "id": 278933617,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922871
    },
    {
        "content": "<p>for now, I'm just going to suck it up and use <code>set</code> with the overcomplicated definition</p>",
        "id": 278937071,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649925164
    },
    {
        "content": "<p>but ideally I'd reduce the expression instead</p>",
        "id": 278937083,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649925175
    },
    {
        "content": "<p>You shouldn't need the <code>has_pow</code> there</p>",
        "id": 278939269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649926521
    },
    {
        "content": "<p>And <code>algebra_pow</code> should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_pow\">docs#smul_pow</a></p>",
        "id": 278939336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649926562
    },
    {
        "content": "<p>ah, I was wondering</p>",
        "id": 278941497,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649927909
    },
    {
        "content": "<p>but couldn't find it</p>",
        "id": 278941503,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649927912
    },
    {
        "content": "<p>okay, fixed that, but still looking for a way to simplify that product</p>",
        "id": 278941532,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649927932
    },
    {
        "content": "<p>Can you give an mwe that better indicates exactly what you consider the problem to be?</p>",
        "id": 278945575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649930504
    },
    {
        "content": "<p>(note your original mwe is false, as <code>b</code> is unconstrained)</p>",
        "id": 278945682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649930553
    },
    {
        "content": "<p>In particular, it sounds like you're complaining that the <code>set</code> tactic isn't working, but your mwe doesn't demonstrate this because it doesn't mention <code>set</code>!</p>",
        "id": 278945892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649930686
    },
    {
        "content": "<p>the original mwe is intentionally false, because I'm essentially trying to (ab)use Lean as a simplifier/calculation aid</p>",
        "id": 278949772,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933600
    },
    {
        "content": "<p>and AFAIK there's no way to just tell Lean \"here is what I have, let's just calculate this and see where it goes\"</p>",
        "id": 278949788,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Symbolic.20.28non-finite.29.20square.20matrices/near/278945892\">said</a>:</p>\n<blockquote>\n<p>In particular, it sounds like you're complaining that the <code>set</code> tactic isn't working, but your mwe doesn't demonstrate this because it doesn't mention <code>set</code>!</p>\n</blockquote>\n<p>well, the thing I was mentioning involved just looking at the expansion in the infoview</p>",
        "id": 278949981,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933728
    },
    {
        "content": "<p>but sure</p>",
        "id": 278949986,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933732
    },
    {
        "content": "<p>I've tacked on the relevant <code>set</code> line; after that line, the definition is added to the context but no replacements are made</p>",
        "id": 278950029,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933769
    },
    {
        "content": "<p>If you use <code>set ... with hk</code>, can you <code>rw ←hk</code> to make the replacements?</p>",
        "id": 278951131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649934590
    },
    {
        "content": "<p>... so I can. Thanks!</p>",
        "id": 278951258,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649934665
    },
    {
        "content": "<p>Looking at the infoview feels like it was going down an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem; the problem seems to be in <code>set</code> not being as clever as <code>rw</code></p>",
        "id": 278951276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649934676
    },
    {
        "content": "<p>(in that <code>rw</code> can see through the difference you found in the infoview, but <code>set</code> can't)</p>",
        "id": 278951716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649934946
    },
    {
        "content": "<p>That <code>has_involutive_star</code> variable is also extraneous, which is going to cause you problems because you'll have two star operations on <code>R</code></p>",
        "id": 278953529,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649936116
    },
    {
        "content": "<p>ah, nice catch, I've been burned a bunch of times by that already -_-</p>",
        "id": 278963349,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649941776
    },
    {
        "content": "<p>If you're unsure whether or not you need a low-level class to get a higher-level class (e.g., <code>cstar_ring</code> needs <code>star_ring</code>) one quick trick is to try deleting the low-level class from the variable list. If Lean doesn't complain, it was redundant. This isn't necessarily the best or most fool-proof way of determining this information, but it can help in a pinch.</p>",
        "id": 278987902,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649953461
    }
]