[
    {
        "content": "<p>Is there something like Haskell's <code>when</code> and <code>unless</code> in Lean?</p>",
        "id": 373833336,
        "sender_full_name": "Steven Shaw",
        "timestamp": 1688966725
    },
    {
        "content": "<p>There's an example and explanation of <code>unless</code> in <a href=\"https://leanprover.github.io/functional_programming_in_lean/monad-transformers/do.html?highlight=unless#single-branched-if\">this section of Functional Programming in Lean</a>.</p>",
        "id": 373843628,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1688970664
    },
    {
        "content": "<p>Thanks! I'm reading that book, but I'm not quite up to that chapter yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>! For <code>when</code>, the \"single-branched if\" is exactly what I needed. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 373892171,
        "sender_full_name": "Steven Shaw",
        "timestamp": 1688982342
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"395896\">@Steven Shaw</span> Just so you know a little about what these are: in Lean there's both syntax for general terms and syntax for statements in <code>do</code> notation. The <code>unless</code> and single-branched <code>if</code> are <code>do</code> notation statements only.)</p>",
        "id": 373894610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688982855
    }
]