[
    {
        "content": "<p>Hello! I need to prove that the <code>{ m : ℤ | f m ≥ n }</code> is well-founded. The function <code>f</code> is strictly increasing, so the set is bounded below. Is there a lemma which lets me prove this by using the fact that natural numbers are well-founded? Or is there an easier way?</p>",
        "id": 346742582,
        "sender_full_name": "Karthik 🦋",
        "timestamp": 1680589706
    },
    {
        "content": "<p>To be more direct, I need the minimum of this set.</p>",
        "id": 346743832,
        "sender_full_name": "Karthik 🦋",
        "timestamp": 1680590223
    },
    {
        "content": "<p>I have <a href=\"https://github.com/leanprover-community/mathlib/pull/18604\">#18604</a> open, but it doesn't seem to directly help here. Thinking...</p>",
        "id": 346748747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680591762
    },
    {
        "content": "<p>I managed it with <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>'s lemma from <a href=\"https://github.com/leanprover-community/mathlib/pull/18604\">#18604</a> after proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">min_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">min_aux2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Full proof (unpolished)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.free_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.index</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.locally_finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.interval</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_finite_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bdd_below.well_founded_on_lt</span> <span class=\"o\">:</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s.well_founded_on</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_aux</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_le</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.le_induction</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">calc</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">hN</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_aux2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.le_induction_down</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">calc</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int.le_sub_one_iff</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">min'</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">set.is_wf.min</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.is_wf</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bdd_below.well_founded_on_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">nH</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">min_aux2</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bdd_below_def</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">not_imp_not.mp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_trans</span> <span class=\"n\">_</span> <span class=\"n\">nH</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.nonempty</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Exists.imp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">min_aux</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha.le</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min'_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"o\">},</span> <span class=\"n\">min'</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min'</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.is_wf.min_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 346782963,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680599995
    },
    {
        "content": "<p>Thank you!<br>\nI will try using this.</p>",
        "id": 347025956,
        "sender_full_name": "Karthik 🦋",
        "timestamp": 1680672982
    },
    {
        "content": "<p>I think I have a better proof, but I am still not finding the right generality for the argument.</p>",
        "id": 347038905,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680677968
    },
    {
        "content": "<p>\"a lower bounded set of integers is well-founded\" isn't that the correct generality?</p>",
        "id": 347267913,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680736052
    },
    {
        "content": "<p>The argument uses that you can put such a set in correspondence with a set of naturals</p>",
        "id": 347268011,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680736090
    },
    {
        "content": "<p>I can't think of any more general procedure that would create an analog of integers for other well-founded orders</p>",
        "id": 347268079,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680736141
    },
    {
        "content": "<p>Is it true for any locally finite linear order?</p>",
        "id": 347534605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680822704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113489-new-members/topic/Well-founded.20Set/near/347267913\">said</a>:</p>\n<blockquote>\n<p>\"a lower bounded set of integers is well-founded\" isn't that the correct generality?</p>\n</blockquote>\n<p>A big mess and specific to Int, but here's the proof (in Lean 4):</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>import Mathlib.Order.WellFoundedSet\n\nlemma int_wf_of_lower_bound (s : Set ℤ) (a : ℤ) (h : a ∈ lowerBounds s)\n    : s.IsWf :=\n  -- Anything works in place of `.natAbs` as long as it sends non-negative\n  -- integers to the corresponding natural numbers and we can easily\n  -- prove that it does so.\n  have : ∀ x : s, (x - a).natAbs = ↑x - a := fun ⟨_, h_x⟩ =&gt;\n    Eq.symm &lt;| Int.eq_natAbs_of_zero_le &lt;| Int.sub_nonneg_of_le (h h_x)\n  have : (fun x y : s =&gt; (x:ℤ) &lt; y) = Measure (fun x : s =&gt; x - a |&gt;.natAbs) := by\n    ext x y\n    unfold Measure InvImage; dsimp; rewrite [←Int.ofNat_lt, this, this]\n    show (x:ℤ) &lt; y ↔ x - a &lt; y - a  -- can't find a lemma for this, so proving it\n    apply Iff.intro\n    · apply Int.sub_lt_sub_right (c := a)\n    · conv =&gt; rhs; rewrite [←Int.sub_add_cancel x a,\n                            ←Int.sub_add_cancel y a]\n      apply Int.add_lt_add_right (c := a)\n  by unfold Set.IsWf Set.WellFoundedOn; rewrite [this]; apply IsWellFounded.wf\n</code></pre></div>\n<p>This uses the function <code>Measure := fun (f : A -&gt; Nat) =&gt; fun a1 a2 =&gt; f a1 &lt; f a2</code>, since mathlib knows <code>Measure f</code> is always well-founded.</p>",
        "id": 347580801,
        "sender_full_name": "Raghuram Sundararajan",
        "timestamp": 1680849593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Well-founded.20Set/near/347534605\">said</a>:</p>\n<blockquote>\n<p>Is it true for any locally finite linear order?</p>\n</blockquote>\n<p>The pull request <a href=\"https://github.com/leanprover-community/mathlib/pull/18604\">#18604</a> mentioned above seems to prove precisely this.</p>\n<p>Also, the below (again Lean 4) shows that a lower-bounded set in a locally finite linear order is well-ordered in the sense of all non-empty subsets having a minimum. (It has one sorry.)</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>variable {α} [LinearOrder α] [LocallyFiniteOrder α]\n\nexample {s : Set α} {a : α} (h : a ∈ lowerBounds s)\n        {s'} (h_sub : s' ⊆ s) (h' : s'.Nonempty)\n    : ∃ c, IsLeast s' c :=\n  have h : a ∈ lowerBounds s' := lowerBounds_mono_set h_sub h\n\n  let b := Classical.choose h'\n  have h_b : b ∈ s' := Classical.choose_spec h'\n\n  let finiteSet := s' ∩ Set.Icc a b\n  have h_b_f : b ∈ finiteSet :=\n    Set.mem_inter h_b (Set.right_mem_Icc.mpr (h h_b))\n  have : finiteSet.Finite :=\n    /- it is a subset of Set.Icc a b, which is finite -/\n    have : ∀ {s t : Set α}, t.Finite → (s ∩ t).Finite :=\n      sorry\n    this (Set.finite_Icc a b)\n\n  let ⟨min, h_min_mem, h_min_le⟩ :=\n    finiteSet.exists_min_image id this (Set.nonempty_of_mem h_b_f)\n  have h_min_mem : min ∈ s' := Set.inter_subset_left _ _ h_min_mem\n  have h_min_le : min ∈ lowerBounds s' := fun c h_c =&gt;\n    match le_total b c with\n    | .inl h' =&gt; calc min ≤ b := h_min_le b h_b_f\n                        _ ≤ c := h'\n    | .inr h' =&gt;\n      h_min_le c &lt;| show c ∈ finiteSet from\n                    Set.mem_inter h_c ⟨h h_c, h'⟩\n\n  ⟨min, h_min_mem, h_min_le⟩\n</code></pre></div>",
        "id": 347591282,
        "sender_full_name": "Raghuram Sundararajan",
        "timestamp": 1680853412
    },
    {
        "content": "<p>One which looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.inter_of_right#doc\">docs4#Set.Finite.inter_of_right</a></p>",
        "id": 347594327,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680854353
    },
    {
        "content": "<p>Not sure how I missed that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 347953096,
        "sender_full_name": "Raghuram Sundararajan",
        "timestamp": 1681014415
    }
]