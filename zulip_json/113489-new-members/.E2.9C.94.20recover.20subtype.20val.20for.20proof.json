[
    {
        "content": "<p>Is it possible to prove the sorried <code>have</code> in the following. If so, how?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>  <span class=\"o\">{</span>\n    <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- HELP</span>\n\n  <span class=\"o\">()</span> <span class=\"c1\">-- mwe ignore</span>\n</code></pre></div>",
        "id": 400392842,
        "sender_full_name": "Somo S.",
        "timestamp": 1699189054
    },
    {
        "content": "<p>I think the answer is no, and you can't use pattern matching like that without losing information</p>",
        "id": 400395304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699191454
    },
    {
        "content": "<p>okay interesting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> seems like something Lean should have been designed to be able to do somehow</p>",
        "id": 400395763,
        "sender_full_name": "Somo S.",
        "timestamp": 1699191881
    },
    {
        "content": "<p>You could always just not use pattern matching here, and use <code>v.1 = 3</code> instead</p>",
        "id": 400399768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699195567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/recover.20subtype.20val.20for.20proof/near/400399768\">said</a>:</p>\n<blockquote>\n<p>You could always just not use pattern matching here, and use <code>v.1 = 3</code> instead</p>\n</blockquote>\n<p>if the following is what you mean, then it still does not work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">vv</span><span class=\"bp\">@</span><span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>  <span class=\"o\">{</span>\n    <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">vv.1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- Doesn't Work</span>\n\n  <span class=\"o\">()</span> <span class=\"c1\">-- mwe ignore</span>\n</code></pre></div>\n<p>however, <span aria-label=\"point down\" class=\"emoji emoji-1f447\" role=\"img\" title=\"point down\">:point_down:</span>  works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- Works</span>\n\n  <span class=\"o\">()</span>\n</code></pre></div>\n<p>I would have expected whatever mechanism, under the hood that makes the latter work would be what allows the the former to work (or something similar)</p>",
        "id": 400401874,
        "sender_full_name": "Somo S.",
        "timestamp": 1699197302
    },
    {
        "content": "<p>Remove the <code>@⟨v, h⟩</code> from the first one and it should work</p>",
        "id": 400402181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699197592
    },
    {
        "content": "<p>indeed it worked. is that (the <code>@⟨v, h⟩</code> version), the intended behavior or a bug?</p>",
        "id": 400402426,
        "sender_full_name": "Somo S.",
        "timestamp": 1699197773
    },
    {
        "content": "<p>It's just that with the <code>⟨⟩</code> you're doing pattern matching again, which has the same problem as the original</p>",
        "id": 400402941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699198189
    },
    {
        "content": "<p>I think this is a missing feature rather than a bug</p>",
        "id": 400402958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699198202
    },
    {
        "content": "<p>gotchya. Well, I will add it to my \"wish list\" ... I work a lot with pattern matching and subtypes.<br>\nThanks</p>",
        "id": 400403096,
        "sender_full_name": "Somo S.",
        "timestamp": 1699198300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 400403436,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699198619
    },
    {
        "content": "<p>If you write <code>match h2 : v' with | ⟨v, h⟩ := sorry</code> then you get what you want</p>",
        "id": 400403586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699198793
    },
    {
        "content": "<p>The <code>let ⟨h, v⟩ := v'; sorry</code> shorthand just doesn't support it</p>",
        "id": 400403621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699198804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20recover.20subtype.20val.20for.20proof/near/400403586\">said</a>:</p>\n<blockquote>\n<p>If you write <code>match h2 : v' with | ⟨v, h⟩ := sorry</code> then you get what you want</p>\n</blockquote>\n<p>excellent! I didn't know that, and in my case doing this match variant should be better than nothing.</p>",
        "id": 400404896,
        "sender_full_name": "Somo S.",
        "timestamp": 1699200133
    },
    {
        "content": "<p>I think it would be reasonable to propose a <code>let</code> version of this syntax in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>, but it's not clear what would be a sensible notation</p>",
        "id": 400409249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699204215
    },
    {
        "content": "<p>Here's <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Getting.20y.20.3D.20f.20x.20from.20y.20.3A.3D.20f.20x/near/398556179\">another thread</a> asking about pattern-matching <code>let</code> as well. When Eric mentioned \"shorthand\", pattern-matching <code>let</code>s really are macros for <code>match</code> expressions.</p>",
        "id": 400410132,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699205200
    },
    {
        "content": "<p>Though usually we don't do pattern matching on subtypes, and instead we use the coercion, or write <code>v.1</code> or <code>v.val</code> directly. Do you have a reason you need to destructure them?</p>",
        "id": 400410235,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699205307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20recover.20subtype.20val.20for.20proof/near/400410235\">said</a>:</p>\n<blockquote>\n<p>Though usually we don't do pattern matching on subtypes, and instead we use the coercion, or write <code>v.1</code> or <code>v.val</code> directly. Do you have a reason you need to destructure them?</p>\n</blockquote>\n<p>for subtypes in particular I dont have a reason (other than personal preference), since there is really only one value field so one could argue that the  destructured name I was going to use for the <code>val</code> field should just be the name of the structure variable itself. </p>\n<p>But for structures in general, my reasoning is as follows.. I often have code that looks like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Partition</span> <span class=\"n\">where</span>\n  <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"c1\">-- may have many more `Type` fields above and more `Sort` fields below</span>\n  <span class=\"n\">hji</span> <span class=\"o\">:</span> <span class=\"n\">j'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">part_v1</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Partition</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">x.i'</span> <span class=\"bp\">∧</span> <span class=\"n\">x.j'</span> <span class=\"bp\">≤</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- versus</span>\n<span class=\"kd\">def</span> <span class=\"n\">part_v2</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(⟨</span><span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Partition</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">i'</span> <span class=\"bp\">∧</span> <span class=\"n\">j'</span> <span class=\"bp\">≤</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In the above <code>part_v1</code> function I dont care about the variable <code>x</code> it's just been put there for bookkeeping and I pick some name for it to make lean happy, and it's an extra work to what x should be called to begin with. What I really care about are x's internal fields and the <code>part_v2</code> implementation makes this concise. I think this is (presumably) already clear to everyone as useful seeing as it is already an implemented feature.</p>\n<p>Similar reasons are why I would choose to destructor as in the original post rather than create a new variable name. And my understanding is that if this feature were implemented for structures in general then it will just happen to be the case that it will also be implemented for Subtypes (since of course Subtypes are Structures)</p>",
        "id": 400487399,
        "sender_full_name": "Somo S.",
        "timestamp": 1699261260
    }
]