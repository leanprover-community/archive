[
    {
        "content": "<p>I tried to use mathlib4 in lean4 but I cannot use it with the following error. What should I do?  When I run <code>lake build</code> I get a message including the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">55</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">AddZeroClass</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">add_le_add_left</span> <span class=\"n\">zero_le_one</span> <span class=\"mi\">1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">AddZeroClass.toAdd</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CovariantClass</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">AddZeroClass</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">add_le_add_right</span> <span class=\"n\">zero_le_one</span> <span class=\"mi\">1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">AddZeroClass.toAdd</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CovariantClass</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n</code></pre></div>\n<p>Lean4 and mathlib4 are both the latest. (lean4: nightly-2023-02-04, mathlib4 revision: 25e6049. I tried several other revisions with the same result)</p>",
        "id": 326006417,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1675626973
    },
    {
        "content": "<p>The latest mathlib4 doesn't use the latest lean4, that is probably your problem.</p>",
        "id": 326008742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675628789
    },
    {
        "content": "<p>If you want to use mathlib, you should be on Lean <code>version 4.0.0-nightly-2023-01-29, commit 38a0d1e3733e, Release</code>, the version mathlib4 is using.</p>",
        "id": 326008796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675628852
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 326261149,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1675728114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib4.20build.20error/near/326008742\">said</a>:</p>\n<blockquote>\n<p>The latest mathlib4 doesn't use the latest lean4, that is probably your problem.</p>\n</blockquote>\n<p>This sounds like an issue for which there should be better solutions. Typically build tools (I have cabal and cargo in mind) have valid library ranges and vice versa. Incompatible versions throw errors.</p>",
        "id": 326428719,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675794257
    },
    {
        "content": "<p>Well, the version above did throw an error...</p>",
        "id": 326430481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675794739
    },
    {
        "content": "<p>Maybe a more explicit one</p>",
        "id": 326430995,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675794908
    },
    {
        "content": "<p>I'm not actually sure how you would build mathlib4 with the wrong lean4 version without realizing it</p>",
        "id": 326432331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675795377
    },
    {
        "content": "<p>I guess maybe if you don't have elan installed?</p>",
        "id": 326432450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675795422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414485\">Akaho Akane</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib4.20build.20error/near/326006417\">said</a>:</p>\n<blockquote>\n<p>I tried to use mathlib4 in lean4 but I cannot use it with the following error. What should I do?  When I run <code>lake build</code> I get a message including the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">55</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">AddZeroClass</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">add_le_add_left</span> <span class=\"n\">zero_le_one</span> <span class=\"mi\">1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">AddZeroClass.toAdd</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CovariantClass</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">AddZeroClass</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">add_le_add_right</span> <span class=\"n\">zero_le_one</span> <span class=\"mi\">1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">AddZeroClass.toAdd</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">ℕ</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Monoid</span><span class=\"bp\">/</span><span class=\"n\">NatCast.lean</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CovariantClass</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n</code></pre></div>\n<p>Lean4 and mathlib4 are both the latest. (lean4: nightly-2023-02-04, mathlib4 revision: 25e6049. I tried several other revisions with the same result)</p>\n</blockquote>\n<p>This error message does not immediately tell me I am using the wrong version of mathlib</p>",
        "id": 326545689,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675850431
    },
    {
        "content": "<p>This version check sounds like a check that needs to happen before the compilation of these files even begins</p>",
        "id": 326545874,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675850495
    },
    {
        "content": "<p>I don't agree. The package already knows what version of lean it is supposed to be compiled with, and elan will automatically use the correct version, even if the user doesn't have it installed yet.<br>\nTrying to use a different version of Lean--which might differ only in performance for instance--is not an error. This matters to package maintainers and, especially, those working on Lean itself.</p>",
        "id": 326559956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675854522
    },
    {
        "content": "<p>What we should try to prevent is users accidentally not using elan.</p>",
        "id": 326560098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675854567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib4.20build.20error/near/326559956\">said</a>:</p>\n<blockquote>\n<p>I don't agree. The package already knows what version of lean it is supposed to be compiled with, and elan will automatically use the correct version, even if the user doesn't have it installed yet.<br>\nTrying to use a different version of Lean--which might differ only in performance for instance--is not an error. This matters to package maintainers and, especially, those working on Lean itself.</p>\n</blockquote>\n<p>I don't understand. Suppose I have a series of nightlies, say 1,2,3,4,5 and mathlib4 is currently on 3. Suppose I call <code>lake new &lt;project_name&gt; math</code>,  are you saying lake will choose the correct toolchain? What happens if mathlib is manually added as a dependency in the lakefile with a <code>require</code> line</p>",
        "id": 326646784,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675877784
    },
    {
        "content": "<p>I have no idea what lake will do in this situation, I'm just talking about building mathlib itself</p>",
        "id": 326647723,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675878063
    },
    {
        "content": "<p>If this is purely about building mathlib, isn't <code>lake build</code> going to choose the toolchain in the <code>lean-toolchain</code> file, regardless of what <code>elan</code> is used to set as the default toolchain (outside the folder)?</p>",
        "id": 326659446,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675881451
    },
    {
        "content": "<p>Well, you can use <code>elan override</code> to pick a different toolchain (for testing purposes say), but otherwise yes.</p>",
        "id": 326708732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675900824
    }
]