[
    {
        "content": "<p>Simple question because I can't quite figure it out based on the Lake github repo: What is the recommended way to structure my projects? I am used to the by-convention, and the 1:1 folder &lt;-&gt; namespace approach of Cargo.</p>\n<p>So looking at <a href=\"https://github.com/leanprover/lake/tree/master/examples/deps/foo\">https://github.com/leanprover/lake/tree/master/examples/deps/foo</a> confuses me. Which file is the \"root\", is it <code>Main.lean</code> or <code>Foo.lean</code>? Is there a 1:1 mapping of files+folders to namespaces? Ideally there is some docs that I missed somewhere.</p>",
        "id": 283754440,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1653403030
    },
    {
        "content": "<p>Is this a lean 3 or lean 4 question? If lean 4 then it will be more likely to be noticed in the lean 4 stream.</p>",
        "id": 283757335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653404221
    },
    {
        "content": "<p>Lean4. Ah..</p>",
        "id": 283757366,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1653404233
    },
    {
        "content": "<p>There is no documentation regarding structuring of projects</p>\n<p>There is also no 1:1 correspondence between files and namespaces since you can arbitrarily open any namespace in any file at any point in time via the <code>namespace</code> command to add definitions to it.</p>\n<p>The standard structure is usually:</p>\n<ul>\n<li>a Main.lean (if your thing is a library only you can get rid of this requirement as demonstrated here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/lakefile.lean\">https://github.com/leanprover-community/mathlib4/blob/master/lakefile.lean</a>) which contains your <code>main</code> function, think <code>main.rs</code> from rust</li>\n<li>a top level file called the same as your project, think <code>lib.rs</code> from rust</li>\n<li>a directory with the name of your project</li>\n<li>the top level file imports all relevant modules from the subdirectory so your project can be \"imported as one\" so to speak</li>\n</ul>\n<p>Regarding submodules the compiler uses a style that basically replicates the one of the top level file and directory like here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Deriving.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Deriving.lean</a> <a href=\"https://github.com/leanprover/lean4/tree/master/src/Lean/Elab/Deriving\">https://github.com/leanprover/lean4/tree/master/src/Lean/Elab/Deriving</a></p>\n<p>sometimes you'll also see this \"import file\" containing relevant code on its own.</p>",
        "id": 283759186,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1653404900
    },
    {
        "content": "<p>Excellent info, thanks! :D.</p>",
        "id": 283861330,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1653472748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak</span> has marked this topic as resolved.</p>",
        "id": 283861337,
        "sender_full_name": "Notification Bot",
        "timestamp": 1653472754
    },
    {
        "content": "<p>What namespace are items in <code>Main.lean</code> in? Just no namespace at all, some root namespace?</p>\n<p>And I suppose it is best practice to always wrap every file like <code>src/A/B/C.lean</code> in <code>namespace A.B.C</code>, unless I want to do something exotic.</p>",
        "id": 283862185,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1653473220
    },
    {
        "content": "<p>Also the <code>import X</code> statements import namespaces, not files, correct? So I could technically never use a single folder and still have tons of nested namespaces. So the folders are just there for us mortals.</p>",
        "id": 283862944,
        "sender_full_name": "Max Nowak üê∫",
        "timestamp": 1653473657
    }
]