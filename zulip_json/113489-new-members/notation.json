[
    {
        "content": "<p>Section 6.6 of Theorem Proving in Lean says,</p>\n<p>Lean’s core library declares the left-binding powers of a number of common symbols.<br>\n<a href=\"https://github.com/leanprover/lean/blob/master/library/init/core.lean\">https://github.com/leanprover/lean/blob/master/library/init/core.lean</a><br>\nYou are welcome to overload these symbols for your own use, but you cannot change their binding power.</p>\n<p>That seems to be false--in my ignorance I declared binding powers for some of these operators<br>\nat the top of my first file.  If I remove those lines  there's no problem with the parsing, indicating that<br>\ninfix is still ok,  but my proofs no longer check,  indicating that the binding powers I had declared<br>\nwere in force, rather than the defaults,  before I removed those lines.   Put those lines back,  of <br>\ncourse the project builds again.</p>",
        "id": 210800122,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1600722460
    },
    {
        "content": "<p>I also believe that to be false. You _can_ change the binding power. Maybe what the book means is that you _probably_ shouldn't.</p>",
        "id": 210818731,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600736368
    },
    {
        "content": "<p>For reference, this is an thread where redefining the binding power of existing notation fixed a problem I was having: <a href=\"#narrow/stream/113489-new-members/topic/Substitution.20notation\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Substitution.20notation</a></p>",
        "id": 210818805,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600736421
    },
    {
        "content": "<p>Also. It is always possible that it wasn't possible when the book was written.</p>",
        "id": 210818819,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1600736438
    },
    {
        "content": "<p>The statement was probably true when it was first written. Lean changed a lot over the years, and I am guessing that this changed and nobody noticed  (until now) that the documentation was out of date. I'll fix it.</p>",
        "id": 210891488,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1600790261
    },
    {
        "content": "<p>Hello,</p>\n<p>How does infix and notation work with lean 3? I can't find a complete source.</p>\n<p>Is it possible to do this (it doesn't work):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Cong</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Cong</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 341485026,
        "sender_full_name": "tica",
        "timestamp": 1678719298
    },
    {
        "content": "<p>I don't know if its possible with spaces only between a b</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Cong</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"bp\">≡</span> <span class=\"bp\">`</span> <span class=\"n\">c</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">d</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Cong</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>this works though<br>\nBe careful definition notations too similar to core ones (like list) though, you may end up with strange errors</p>",
        "id": 341486442,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678719606
    },
    {
        "content": "<p>It works <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span><br>\nWhat should I replace the <code>[]</code> with?<br>\nIf I remove them it doesn't work anymore</p>",
        "id": 341492150,
        "sender_full_name": "tica",
        "timestamp": 1678720616
    },
    {
        "content": "<p>Any other ideas? I'm looking for a solution to stop writing Cong a b c d</p>",
        "id": 341574104,
        "sender_full_name": "tica",
        "timestamp": 1678741965
    },
    {
        "content": "<p>Choose weird brackets which aren't being used for anything else (so not <code>[</code> or <code>{</code> or <code>(</code>) and you'll be in much better shape. If you don't intend on using Lie Algebras then you could use the brackets which they use.</p>",
        "id": 341580980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678744617
    },
    {
        "content": "<p>I haven't tested it, but this probably would work too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">C</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"bp\">≡</span> <span class=\"bp\">`</span> <span class=\"n\">c</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">d</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Cong</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 341582541,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678745198
    },
    {
        "content": "<p>Thank you very much</p>",
        "id": 341583012,
        "sender_full_name": "tica",
        "timestamp": 1678745364
    },
    {
        "content": "<p>What does <code>Cong</code> mean here?</p>",
        "id": 341586173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678746610
    },
    {
        "content": "<p>Is it congruence of two line segments?</p>",
        "id": 341586237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678746647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>Cong = Congruent</code></p>",
        "id": 341587721,
        "sender_full_name": "tica",
        "timestamp": 1678747273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/notation/near/341586237\">said</a>:</p>\n<blockquote>\n<p>Is it congruence of two line segments?</p>\n</blockquote>\n<p>Yes, but it is with the axioms of traski so there are 4 points and not 2 segments</p>",
        "id": 341587752,
        "sender_full_name": "tica",
        "timestamp": 1678747295
    },
    {
        "content": "<p>It's modelling dist(a,b)=dist(c,d) without numbers.</p>",
        "id": 341592613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678749732
    },
    {
        "content": "<p>The reason I ask, is that if you worked in terms of segments (or just pairs of points) you could write <code>(a, b) ≡ (c, d)</code> where your axiom is<code>Cong' (a, b) (c, d)</code> instead of <code>Cong a b c d</code></p>",
        "id": 341594244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678750811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  I tried to follow your advice and here is what I did:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- basic.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.alias</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">segment</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`⬝`</span><span class=\"o\">:</span><span class=\"mi\">56</span> <span class=\"o\">:=</span> <span class=\"n\">segment.mk</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">tarski_relation</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">--`B a b c` means that `c` is between `a` and `b`</span>\n  <span class=\"o\">(</span><span class=\"n\">between</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">segment</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">--`C a b c d` means that `a b` and `c d` are congruent segments</span>\n  <span class=\"o\">(</span><span class=\"n\">congruent</span> <span class=\"o\">:</span> <span class=\"n\">segment</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">segment</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≅</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">tarski_relation.congruent</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">tarski_relation</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">segment</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">tarski_relation.between</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">tarski</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">tarski_relation</span> <span class=\"n\">Point</span><span class=\"o\">:=</span>\n <span class=\"c1\">--A1</span>\n <span class=\"o\">(</span><span class=\"n\">cong_pseudo_reflexive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">b</span><span class=\"bp\">⬝</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">--A2</span>\n  <span class=\"o\">(</span><span class=\"n\">cong_inner_transitivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">e</span><span class=\"bp\">⬝</span><span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">e</span><span class=\"bp\">⬝</span><span class=\"n\">f</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">--A3</span>\n  <span class=\"o\">(</span><span class=\"n\">cong_identity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">--A4</span>\n  <span class=\"o\">(</span> <span class=\"n\">segment_construction</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">e</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"bp\">⬝</span><span class=\"n\">e</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">--A5</span>\n  <span class=\"o\">(</span> <span class=\"n\">five_segment</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">d</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span>\n                        <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">a'</span><span class=\"bp\">⬝</span><span class=\"n\">b'</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"bp\">⬝</span><span class=\"n\">c</span> <span class=\"bp\">≅</span> <span class=\"n\">b'</span><span class=\"bp\">⬝</span><span class=\"n\">c'</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">a'</span><span class=\"bp\">⬝</span><span class=\"n\">d'</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">b'</span><span class=\"bp\">⬝</span><span class=\"n\">d'</span> <span class=\"bp\">∧</span>\n                        <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b'</span> <span class=\"bp\">∈</span> <span class=\"n\">a'</span><span class=\"bp\">⬝</span><span class=\"n\">c'</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">c'</span><span class=\"bp\">⬝</span><span class=\"n\">d'</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">--....</span>\n<span class=\"n\">alias</span> <span class=\"n\">tarski_relation.between</span> <span class=\"bp\">←</span> <span class=\"n\">tarski.between</span>\n<span class=\"n\">alias</span> <span class=\"n\">tarski_relation.congruent</span> <span class=\"bp\">←</span> <span class=\"n\">tarski.congruent</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">tarski.cong_inner_transitivity</span> <span class=\"bp\">←</span> <span class=\"n\">tarski.congruent.inner_transitivity</span>\n<span class=\"n\">alias</span> <span class=\"n\">tarski.cong_pseudo_reflexive</span> <span class=\"bp\">←</span> <span class=\"n\">tarski.congruent.pseudo_reflexive</span>\n<span class=\"n\">alias</span> <span class=\"n\">tarski.cong_identity</span> <span class=\"bp\">←</span> <span class=\"n\">tarski.congruent.identity</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">tarski_2d</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">tarski</span> <span class=\"n\">Point</span><span class=\"o\">:=</span>\n  <span class=\"c1\">-- A9</span>\n  <span class=\"o\">(</span><span class=\"n\">upper_dim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">p</span> <span class=\"bp\">≅</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"bp\">⬝</span><span class=\"n\">p</span> <span class=\"bp\">≅</span> <span class=\"n\">b</span><span class=\"bp\">⬝</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">p</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">q</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span><span class=\"bp\">⬝</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--cong.lean</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">tarski</span> <span class=\"n\">Point</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tarski</span>\n\n<span class=\"kd\">@[refl]</span> <span class=\"kd\">lemma</span> <span class=\"n\">congruent.refl</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">cong_inner_transitivity</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">cong_pseudo_reflexive</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">cong_pseudo_reflexive</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[symm]lemma</span> <span class=\"n\">congruent.symm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">cong_inner_transitivity</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tarski</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">tarski.congruent.symm</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is this a good way to do it?</p>\n<p>I also have an error that I don't understand.<br>\nThat works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">tarski.congruent.symm</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It does not work :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">symm'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">tarski_relation.congruent.symm'</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">src</span><span class=\"bp\">\\</span><span class=\"n\">geometry.lean</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">symm'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">tarski_relation.rec.symm'</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">tarski_relation.rec</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">between</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">segment</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">congruent</span> <span class=\"o\">:</span> <span class=\"n\">segment</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"n\">segment</span> <span class=\"n\">Point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">congruent</span><span class=\"o\">)</span>\n    <span class=\"n\">tarski.to_tarski_relation</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">tarski</span> <span class=\"n\">Point</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span>\n</code></pre></div>\n<p>I thought the alias would make it work.</p>",
        "id": 341709272,
        "sender_full_name": "tica",
        "timestamp": 1678798267
    },
    {
        "content": "<p>The alias doesn't work because the <code>a⬝b ≅ c⬝d</code> notation refers to <code>tarski_relation.congruent</code> not <code>tarski.congruent </code></p>",
        "id": 341784301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678798466
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">tarski_relation.congruent</span> <span class=\"bp\">←</span> <span class=\"n\">tarski.congruent</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≅</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">tarski.congruent</span>\n</code></pre></div>\n<p>should work</p>",
        "id": 341784424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678798496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I had thought about it but I wanted to be able to use the new notations in the 'tarski' class.<br>\nIn this case my class 'tarski_relation' is no longer useful</p>",
        "id": 341788249,
        "sender_full_name": "tica",
        "timestamp": 1678799362
    },
    {
        "content": "<p><code>tarski</code> doesn't need to exist yet when you define that alias</p>",
        "id": 341788394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678799400
    },
    {
        "content": "<p>There's no rule that prevents you defining <code>foo.bar</code> before defining <code>foo</code>.</p>",
        "id": 341788532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678799423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/notation/near/341788394\">said</a>:</p>\n<blockquote>\n<p><code>tarski</code> doesn't need to exist yet wen you define that alias</p>\n</blockquote>\n<p>Oh great I didn't know! Thanks</p>",
        "id": 341788947,
        "sender_full_name": "tica",
        "timestamp": 1678799524
    },
    {
        "content": "<p>Note  that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">cong_inner_transitivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">e</span><span class=\"bp\">⬝</span><span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">e</span><span class=\"bp\">⬝</span><span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>will be more convenient to use as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">cong_inner_transitivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"n\">ef</span> <span class=\"o\">:</span> <span class=\"n\">segment</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">ab</span> <span class=\"bp\">≅</span> <span class=\"n\">cd</span> <span class=\"bp\">→</span> <span class=\"n\">ab</span> <span class=\"bp\">≅</span> <span class=\"n\">ef</span> <span class=\"bp\">→</span> <span class=\"n\">cd</span> <span class=\"bp\">≅</span> <span class=\"n\">ef</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 341789335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678799637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/notation/near/341789335\">said</a>:</p>\n<blockquote>\n<p>Note  that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">cong_inner_transitivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">⬝</span><span class=\"n\">b</span> <span class=\"bp\">≅</span> <span class=\"n\">e</span><span class=\"bp\">⬝</span><span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">⬝</span><span class=\"n\">d</span> <span class=\"bp\">≅</span> <span class=\"n\">e</span><span class=\"bp\">⬝</span><span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>will be more convenient to use as</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">cong_inner_transitivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"n\">ef</span> <span class=\"o\">:</span> <span class=\"n\">segment</span> <span class=\"n\">Point</span><span class=\"o\">,</span> <span class=\"n\">ab</span> <span class=\"bp\">≅</span> <span class=\"n\">cd</span> <span class=\"bp\">→</span> <span class=\"n\">ab</span> <span class=\"bp\">≅</span> <span class=\"n\">ef</span> <span class=\"bp\">→</span> <span class=\"n\">cd</span> <span class=\"bp\">≅</span> <span class=\"n\">ef</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Indeed, I remained in the 'style' of tarski but I can go further.</p>",
        "id": 341790742,
        "sender_full_name": "tica",
        "timestamp": 1678799991
    }
]