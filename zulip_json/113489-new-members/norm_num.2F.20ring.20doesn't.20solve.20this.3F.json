[
    {
        "content": "<p>What is the easiest way to resolve goals of the form:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>So far I have tried <code>simp</code>, <code>ring</code>, <code>omega</code> and <code>norm_num</code>. None of them work. I am looking for a tactic that will resolve all statements of this type.</p>",
        "id": 196067354,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1588449187
    },
    {
        "content": "<p>wait a second, try rewriting <code>succ_eq_add_one</code> maybe</p>",
        "id": 196067502,
        "sender_full_name": "Steffan",
        "timestamp": 1588449389
    },
    {
        "content": "<p><code>rw ← nat.add_one,  ring,</code></p>",
        "id": 196067508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588449408
    },
    {
        "content": "<p>The problem is <code>nat.succ</code> everywhere</p>",
        "id": 196067517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588449423
    },
    {
        "content": "<p><code>by rw succ_eq_add_one; ring</code> done</p>",
        "id": 196067532,
        "sender_full_name": "Steffan",
        "timestamp": 1588449460
    },
    {
        "content": "<p>Mine is shorter <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 196067576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588449489
    },
    {
        "content": "<p><code>ring</code> doesn't like <code>succ</code> for some reason</p>",
        "id": 196067577,
        "sender_full_name": "Steffan",
        "timestamp": 1588449490
    },
    {
        "content": "<p>because <code>succ</code> is not a thing for general rings</p>",
        "id": 196067586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588449508
    },
    {
        "content": "<blockquote>\n<p>Mine is shorter <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>\n</blockquote>\n<p>hey we're not golfing <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 196067633,
        "sender_full_name": "Steffan",
        "timestamp": 1588449576
    },
    {
        "content": "<p>I'm only golfing when my solution turns out to be shorter :-)</p>",
        "id": 196067699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588449611
    },
    {
        "content": "<p>Same here</p>",
        "id": 196067705,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588449621
    },
    {
        "content": "<p>Thanks! Both these solutions work.</p>\n<p>When defining new functions, I tend to write <code>n + 1</code> for readability. But then <code>simp</code> often introduces a bunch of <code>nat.succ</code> into my goal and context states. Is it then best to avoid <code>n + 1</code> in my definitions to begin with?</p>",
        "id": 196067822,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1588449776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think \"nat.succ_eq_add_one\" is a bit clearer than <code>\\l nat.add_one</code> :)</p>",
        "id": 196067897,
        "sender_full_name": "Steffan",
        "timestamp": 1588449872
    }
]