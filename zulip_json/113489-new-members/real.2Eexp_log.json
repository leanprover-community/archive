[
    {
        "content": "<p>I feel like this error message is telling me that the elaborator can't unify \\R with \\R:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">specific_functions</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">suffices</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">exp_log</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(edited to make the error a bit more explicit)</p>",
        "id": 195849618,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588258074
    },
    {
        "content": "<p>I think it's OK, the LHS of <code>real.exp_log hx</code> is <code>real.exp (real.log x)</code> and it can't find it in your goal (because the goal is <code>real.log x &lt; x</code>)</p>",
        "id": 195850182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258321
    },
    {
        "content": "<p>The <code>suffices</code> puts the new goal <code>key</code> at the end, not the start, so the rewrite is still trying to work on <code>real.log x &lt; x</code> (and I think rw only works on the first goal)</p>",
        "id": 195850323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258373
    },
    {
        "content": "<p>oof, thanks. maybe i need more coffee</p>",
        "id": 195850431,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588258410
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">suffices</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">exp_log</span> <span class=\"n\">hx</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 195850477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258432
    },
    {
        "content": "<p>I always think it's a bit dirty using <code>rwa</code> like that.</p>",
        "id": 195850638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258499
    },
    {
        "content": "<p>because the rw and the a get applied in different places?</p>",
        "id": 195850664,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588258516
    },
    {
        "content": "<p>right :-)</p>",
        "id": 195850696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258524
    },
    {
        "content": "<p>but it's perfectly fine Lean code</p>",
        "id": 195850733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258542
    },
    {
        "content": "<p>Maybe sneaky is a better word :-)</p>",
        "id": 195850774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258555
    },
    {
        "content": "<p>yeah i agree that its better than <code>rw ... at key, exact key </code> which appears too many times in my codewars solutions</p>",
        "id": 195850851,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588258571
    },
    {
        "content": "<p>i think i forgot about rwa when I went through a phase of leaning on nonterminal simps</p>",
        "id": 195850944,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588258606
    }
]