[
    {
        "content": "<p>In TPIL, one of the exercises is to prove ¬ (p ↔ ¬ p) using constructive logic.</p>\n<p>This spoiler thread contains the following:</p>\n<p>1) Assurance that it can be done. </p>\n<p>2) (some way below 1) : a hint.</p>\n<p>3) (some way below 2) : a solution.</p>",
        "id": 194285992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034417
    },
    {
        "content": "<p>1) It can be done!</p>\n<p>It's easy to do it classically, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- use excluded middle</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But it can also be done constructively. In the next post below, there's a hint. Don't scroll down/unfold if you don't want to see it.</p>",
        "id": 194286280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034619
    },
    {
        "content": "<p>2) a hint.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\nProve <code>¬ p</code></p>",
        "id": 194286286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034623
    },
    {
        "content": "<p>3) the solution<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- let&#39;s assume p ↔ ¬ p and prove false</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- I claim that ¬ p is true.</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- indeed if we assume p,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- then we can deduce ¬ p</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- and now we have proofs of p and ¬ p so we can get a contradiction</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- but now we know ¬ p is true, so we can deduce p,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- and now again p and ¬ p are both proved, which is our contradiction</span>\n  <span class=\"n\">contradiction</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194286290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you could put the answers in the edit history. Then people can't even accidentally scroll too far.</p>",
        "id": 194286433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587034697
    },
    {
        "content": "<p>Can people see the edit history? that's one way to do spoiler tags</p>",
        "id": 194286437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034701
    },
    {
        "content": "<p>I was going to make the reserved slots huge</p>",
        "id": 194286468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034720
    },
    {
        "content": "<p>old skool usenet ;-)</p>",
        "id": 194286491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034740
    },
    {
        "content": "<p>White text on white back ground (revealed upon highlight)?</p>",
        "id": 194286613,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1587034812
    },
    {
        "content": "<p>This is a better idea because I've just realised that zulip might condense the post.</p>",
        "id": 194286636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034831
    },
    {
        "content": "<p>How do I do white text in Zulip?</p>",
        "id": 194286664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034846
    },
    {
        "content": "<p>I don't think there are explicit spoiler tags or color formatting in zulip</p>",
        "id": 194286684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034865
    },
    {
        "content": "<p>plus, I'm looking at white text on a dark background right now. Don't trust colors</p>",
        "id": 194286735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034887
    },
    {
        "content": "<p>Oh -- I could the spoilers at the bottom of the message.</p>",
        "id": 194286747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034893
    },
    {
        "content": "<p>the reading experience of the edit history isn't great though</p>",
        "id": 194286903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034983
    },
    {
        "content": "<p>What is this edit history which people are talking about?</p>",
        "id": 194286923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587035005
    },
    {
        "content": "<p>tap the word (EDITED) on any <em>edited</em> post</p>",
        "id": 194286943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587035024
    },
    {
        "content": "<p>By way of a random aside, the same in Agda (the term was generated automatically by the automatic proof search).</p>\n<p>The important first step is to note that if we want to produce a <code>False</code>, we almost certainly got it by constructing two <code>P</code>s and using the <code>P -&gt; (P -&gt; False)</code> direction of the iff. There's ultimately no other way to produce a <code>False</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# OPTIONS --safe --warning=error --without-K #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"n\">Logic.RandomBits</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">record</span> False <span class=\"ow\">:</span> <span class=\"kt\">Set</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">record</span> Iff <span class=\"o\">(</span>A <span class=\"ow\">:</span> <span class=\"kt\">Set</span><span class=\"o\">)</span> <span class=\"o\">(</span>B <span class=\"ow\">:</span> <span class=\"kt\">Set</span><span class=\"o\">)</span> <span class=\"ow\">:</span> <span class=\"kt\">Set</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">field</span>\n    <span class=\"nf\">to</span> <span class=\"ow\">:</span> A <span class=\"ow\">→</span> B\n    <span class=\"nf\">from</span> <span class=\"ow\">:</span> B <span class=\"ow\">→</span> A\n\n<span class=\"nf\">Not</span> <span class=\"ow\">:</span> <span class=\"o\">(</span>A <span class=\"ow\">:</span> <span class=\"kt\">Set</span><span class=\"o\">)</span> <span class=\"ow\">→</span> <span class=\"kt\">Set</span>\nNot A <span class=\"ow\">=</span> A <span class=\"ow\">→</span> False\n\n<span class=\"nf\">thing</span> <span class=\"ow\">:</span> <span class=\"o\">(</span>P <span class=\"ow\">:</span> <span class=\"kt\">Set</span><span class=\"o\">)</span> <span class=\"ow\">→</span> Iff P <span class=\"o\">(</span>Not P<span class=\"o\">)</span> <span class=\"ow\">→</span> False\nthing P <span class=\"kr\">record</span> <span class=\"o\">{</span> to <span class=\"ow\">=</span> to ; from <span class=\"ow\">=</span> from <span class=\"o\">}</span> <span class=\"ow\">=</span> to <span class=\"o\">(</span>from <span class=\"o\">(</span><span class=\"ow\">λ</span> z <span class=\"ow\">→</span> to z z<span class=\"o\">))</span> <span class=\"o\">(</span>from <span class=\"o\">(</span><span class=\"ow\">λ</span> z <span class=\"ow\">→</span> to z z<span class=\"o\">))</span>\n</pre></div>",
        "id": 194293534,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1587039104
    },
    {
        "content": "<p>I'm trying to do the proof without tactics since I'm not familiar with tactics yet. Why doesn't something like this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">),</span>\n        <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n        <span class=\"k\">assume</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n        <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">pp</span> <span class=\"n\">pp</span> <span class=\"n\">pp</span>\n</pre></div>",
        "id": 194301828,
        "sender_full_name": "Brandon B",
        "timestamp": 1587043002
    },
    {
        "content": "<p>hi I'm a typechecker. <code>assume pp : p, (iff.mp h) pp pp pp</code> has type <code>p -&gt; something</code>, which cannot be unified with <code>false</code></p>",
        "id": 194301910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587043047
    },
    {
        "content": "<p><code>(iff.mp h) pp pp</code> has type <code>false</code>, which cannot be applied to <code>pp</code></p>",
        "id": 194302100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587043126
    },
    {
        "content": "<p>ah</p>",
        "id": 194302151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587043151
    },
    {
        "content": "<p>you want <code>(assume pp : p, (iff.mp h) pp pp) pp</code></p>",
        "id": 194302163,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587043162
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\" title=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\">here</a> for a post I wrote that shows how to construct a proof without tactics in a step by step fashion, just by fixing errors at underscores.</p>",
        "id": 194333961,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587055632
    },
    {
        "content": "<p>That is a great example of how to write a compact term mode proof of the question.</p>",
        "id": 194337001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587056940
    },
    {
        "content": "<p>If you try the typechecker approach how come it stops printing out the context window when you do an assume hp : p.  For me the goal window just goes blank.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hpp</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>  <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 194385632,
        "sender_full_name": "PV",
        "timestamp": 1587084821
    },
    {
        "content": "<p>Because you have a type error there. You're trying to show <code>false</code>, but <code>(assume hp: p, _)</code> has the type <code>p → something</code>.</p>",
        "id": 194385840,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587085010
    },
    {
        "content": "<p>This is why there is an error at the <code>show</code></p>",
        "id": 194385848,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587085019
    },
    {
        "content": "<p>ahhh ok I took Kenny's post above that if you replaced that last assume line it'd just work, but wasn't getting it to actually work out</p>",
        "id": 194385944,
        "sender_full_name": "PV",
        "timestamp": 1587085155
    }
]