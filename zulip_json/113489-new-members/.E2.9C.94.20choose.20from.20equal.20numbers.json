[
    {
        "content": "<p>I have proved in the case of Galois extension, the <code>ramificationIdx</code> are all the same. Now I want to define these equal <code>ramificationIdx</code> as a new concept . My current idea is to first define this concept using the Axiom of Choice, and then proceed to prove this definition is equal to all the <code>ramificationIdx</code>. Is there a better way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.RamificationInertia</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Ideal</span> <span class=\"n\">Algebra</span> <span class=\"n\">UniqueFactorizationMonoid</span> <span class=\"n\">IsDedekindDomain</span> <span class=\"n\">BigOperators</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">hpm</span> <span class=\"o\">:</span> <span class=\"n\">IsMaximal</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">IdealBelow.IsMaximal</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">L</span><span class=\"o\">]:</span>\n  <span class=\"n\">IsMaximal</span> <span class=\"o\">((</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_ramificationIdx</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">p.IsMaximal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsGalois</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">),</span>\n    <span class=\"n\">P.IsMaximal</span> <span class=\"bp\">∧</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n    <span class=\"n\">ramificationIdx</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"n\">p</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> In the case of Galois extension, it can be seen from the Theorem `ramificationIdx_eq_of_IsGalois`</span>\n<span class=\"cm\">that all `ramificationIdx` are the same, which we define as the `ramificationIdx_of_IsGalois`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ramificationIdx_of_IsGalois</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">p.IsMaximal</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsGalois</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">exists_ramificationIdx</span> <span class=\"n\">p</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ramificationIdx_eq_ramificationIdx_of_IsGalois</span> <span class=\"o\">[</span><span class=\"n\">IsGalois</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">ramificationIdx</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"bp\">=</span>\n    <span class=\"n\">ramificationIdx_of_IsGalois</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 386786656,
        "sender_full_name": "Yelong Hua",
        "timestamp": 1692777934
    },
    {
        "content": "<p>I guess that or some kind of quotient construction? Not sure how the latter would work</p>",
        "id": 386790277,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692779316
    },
    {
        "content": "<p>I think using choice is fine</p>",
        "id": 386802035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692783341
    },
    {
        "content": "<p>I think the <code>∃ n : ℕ</code> is pretty pointless here given you're requiring <code>n = ...</code> as the condition</p>",
        "id": 386809001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692785775
    },
    {
        "content": "<p>Yeah, use choice to get the prime ideal upstairs and then use ramificationIdx to get the nat.</p>",
        "id": 386812807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692787118
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.extend#doc\">docs#Function.extend</a> that automatizes part of this, especially with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.FactorsThrough#doc\">docs#Function.FactorsThrough</a></p>",
        "id": 387003060,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692856771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631684\">Yelong Hua</span> has marked this topic as resolved.</p>",
        "id": 387112035,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692892335
    }
]