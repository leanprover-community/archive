[
    {
        "content": "<p>I've been working on the Hermite polynomials (see <a href=\"https://github.com/leanprover-community/mathlib/pull/18739\">#18739</a>, <a href=\"#narrow/stream/113489-new-members/topic/Odd.20and.20even.20functions\">this post</a>). While that PR is under review, I've been working on showing <a href=\"https://en.wikipedia.org/wiki/Hermite_polynomials#Orthogonality\">their orthogonality</a>. I was wondering if I could get any advice on the best way to do that in Lean. Here's my current idea (with some non-Lean notation) :</p>\n<p>For <code>n&lt;m</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">integral_polynomial_mul_deriv_gaussian_of_deg_lt</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p.nat_degree</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∫</span> <span class=\"n\">dx</span> <span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">dx</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and for <code>n=m</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">integral_polynomial_mul_deriv_gaussian_of_deg_eq</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p.nat_degree</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∫</span> <span class=\"n\">dx</span> <span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">dx</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and show each of these by induction. Then, I would apply these lemmas to the Hermite polynomials.</p>",
        "id": 349206816,
        "sender_full_name": "Luke Mantle",
        "timestamp": 1681417993
    },
    {
        "content": "<p>I think you want integration by parts in some form, though I'm not sure how to do that in Lean. Both of those statements can be proven from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">integral_polynomial_mul_deriv_gaussian</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">p.eval</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n<span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">p.derivative.eval</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which is integration by parts plus a statement about decay at infinity. You might also want to use <code>p.degree</code> instead of <code>p.nat_degree</code> since that's more precise.</p>\n<p>For instance here's a proof of the first one assuming this integration by parts lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_polynomial_mul_deriv_gaussian</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">p.eval</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n<span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">p.derivative.eval</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">integral_polynomial_mul_deriv_gaussian_of_deg_lt</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">p.eval</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_lt</span> <span class=\"n\">hnm</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hnm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">integral_polynomial_mul_deriv_gaussian</span><span class=\"o\">,</span> <span class=\"c1\">-- integration by parts</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">polynomial.eq_C_of_degree_eq_zero</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">polynomial.derivative_C</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">n.succ_add</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">integral_polynomial_mul_deriv_gaussian</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">polynomial.degree_derivative_eq</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">polynomial.nat_degree_eq_of_degree_eq_some</span> <span class=\"n\">hp</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 349233563,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1681430034
    },
    {
        "content": "<p>Guessing based on the wording in the original link, should we be integrating with respect to a measure that includes the weight function?</p>",
        "id": 349234347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681430535
    },
    {
        "content": "<p>I don't think that has any advantages over just carrying around the exponential.</p>",
        "id": 349235465,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681431197
    },
    {
        "content": "<p>Is there even a statement of integration by parts for integrals over all of <code>ℝ</code>? There's <code>integral_mul_deriv_eq_deriv_mul</code> in <code>measure_theory.integral.interval_integral</code>, but it is for finite intervals. And there's <code>measure_theory.integral.integral_eq_improper</code> with some statements about improper integrals. I'm not sure how to combine these.</p>",
        "id": 349236420,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1681431677
    },
    {
        "content": "<p>Apparently <code>analysis.special_functions.gamma</code> proves <code>Γ(s+1) = s * Γ(s)</code> using integration by parts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">! Now we establish the recurrence relation `Γ(s + 1) = s * Γ(s)` using integration by parts. -/</span>\n\n<span class=\"bp\">...</span>\n<span class=\"sd\">/-- The recurrence relation for the indefinite version of the `Γ` function. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">partial_Gamma_add_one</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">partial_Gamma</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">partial_Gamma</span> <span class=\"n\">s</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But looking through <a href=\"https://github.com/leanprover-community/mathlib/blob/7ebf83ed9c262adbf983ef64d5e8c2ae94b625f4/src/analysis/special_functions/gamma.lean#L224\">the proof</a>, I can't understand where integration by parts is used.</p>",
        "id": 349236849,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1681431918
    },
    {
        "content": "<p>it looks to me that it uses the fundamental theorem of calculus (on line 243), not integration by parts.<br>\nGenerally, I think you want to imitate the argument in some sense: define the finite integral, show that converges to the real thing (here you need that the improper integral equals the integral) and then do calculations with the finite integral and in the end observe that all boundary terms vanish in the limit.</p>",
        "id": 349238641,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681432812
    },
    {
        "content": "<p>I don't know what your final goal is, but if you want low-hanging fruit, then I think other properties of the Hermite function are better suited.</p>",
        "id": 349239525,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681433209
    },
    {
        "content": "<p>Moritz, one reason to bundle the weight into a measure <code>μ</code> is to get terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp\">docs#measure_theory.Lp</a> ℝ 2 μ and where you can actually state orthogonality properly. However, I agree that this is not necessarily the first thing you want to do, and having unbundled versions is fine also.</p>",
        "id": 349249295,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681439603
    },
    {
        "content": "<p>that is true, but I think you want to have the unbundled version to prove that the Hermite functions are an ONS in the usual L^2.</p>",
        "id": 349249642,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681439879
    },
    {
        "content": "<p>I don't know any applications of the Hermite polynomials other than that, but probably the probability people want to use L^2 with an exponentially decaying weight (but I would expect that they want to normalize it as well).</p>",
        "id": 349249884,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681440058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113489-new-members/topic/Orthogonality.20of.20the.20Hermite.20polynomials/near/349239525\">said</a>:</p>\n<blockquote>\n<p>I don't know what your final goal is, but if you want low-hanging fruit, then I think other properties of the Hermite function are better suited.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"578430\">@Luke Mantle</span> has already done a bunch of the other basic properties :)</p>",
        "id": 349258799,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1681445485
    }
]