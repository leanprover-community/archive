[
    {
        "content": "<p>I am trying to cast a variable of type ℝ≥0∞ to type ℕ∞, but the right coercion does not seem to exist. Am I missing something? For more context I want to create a point measure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PointMeasure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">measureEnatOf</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span>\n  <span class=\"n\">coeMeasureEnatOf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">measureOf</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">ENNReal.ofENat</span> <span class=\"o\">(</span><span class=\"n\">measureEnatOf</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but there is no <code>ofENat</code></p>",
        "id": 400994169,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1699465512
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/ofENat/near/400994169\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Showing.20group.20operation.20is.20closed.20on.20a.20subset.2E\">#new members &gt; Showing group operation is closed on a subset.</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 400995073,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699465883
    },
    {
        "content": "<p>Can you use <code>ofNNReal</code>?</p>",
        "id": 400995148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699465916
    },
    {
        "content": "<p>Thanks for moving the message! <code>ofNNReal</code> also does not seem to exist.</p>",
        "id": 400995564,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1699466063
    },
    {
        "content": "<p>~It's called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.some#doc\">docs#ENNReal.some</a>, but should probably be renamed~ Edit: now it exists, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.ofNNReal#doc\">docs#ENNReal.ofNNReal</a></p>",
        "id": 400997919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699466872
    },
    {
        "content": "<p>Can you make your question a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> by adding imports?</p>",
        "id": 400997992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699466885
    },
    {
        "content": "<p>This also doesn't work :( <code>ENNReal.some</code> is from ℝ≥0 to ℝ≥0∞. I need from ℕ∞ to ℝ≥0∞.</p>",
        "id": 401006582,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1699470354
    },
    {
        "content": "<p>There is a workaround by handling the infinity case seperately, but it's kinda ugly.</p>",
        "id": 401006895,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1699470485
    },
    {
        "content": "<p>Ah you're right, I wasn't paying attention</p>",
        "id": 401011688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699472530
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">WithTop.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>?</p>",
        "id": 401012149,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699472737
    },
    {
        "content": "<p>That would work as an implementation, but is going to have defeq issues unles you wrap it in an API</p>",
        "id": 401012818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699473056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/ofENat/near/400997919\">said</a>:</p>\n<blockquote>\n<p>It's called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.some#doc\">docs#ENNReal.some</a>, but should probably be renamed</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8276\">#8276</a></p>",
        "id": 401014121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699473636
    },
    {
        "content": "<p>I am now having a very similar issue. How Can I map a function of type <code>Set \\alpha -&gt; \\nat</code> to <code>Set \\alpha -&gt; \\enat</code>? I have already tried using <code>WithTop.map</code> or <code>WithTop.some</code>, but could not get those to work. For context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PointMeasure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">measureEnatOf</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span>\n  <span class=\"n\">coeMeasureEnatOf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">measureOf</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">WithTop.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">measureEnatOf</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FinitePointMeasure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">measureNatOf</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">coeMeasureNatOf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">measureOf</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">measureNatOf</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">FinitePointMeasure_is_PointMeasure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">FinitePointMeasure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PointMeasure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">toOuterMeasure</span> <span class=\"o\">:=</span> <span class=\"n\">μ.toOuterMeasure</span>\n    <span class=\"n\">m_iUnion</span> <span class=\"o\">:=</span> <span class=\"n\">μ.m_iUnion</span>\n    <span class=\"n\">trimmed</span> <span class=\"o\">:=</span> <span class=\"n\">μ.trimmed</span>\n    <span class=\"n\">measureEnatOf</span> <span class=\"o\">:=</span> <span class=\"bp\">???</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 401131165,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1699526867
    },
    {
        "content": "<p>Can you make that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 401132718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699527378
    },
    {
        "content": "<p>That's not a lemma, should be a def, I think. Because measures are data. measureEnatOf s := mu.measureNatOf s<br>\nThat lets the Nat to ENat coercion take care of it</p>",
        "id": 401140054,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699530304
    },
    {
        "content": "<p>Haven't tested it</p>",
        "id": 401140074,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699530309
    },
    {
        "content": "<p>Also, (\\u) \\comp mu.measureNatOf could work, for pointfree style</p>",
        "id": 401140332,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699530384
    },
    {
        "content": "<p>I got it now, or, at least Lean4 is happy. I guess its not clear yet if these are the best definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PointMeasure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">measureEnatOf</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span>\n  <span class=\"n\">coeMeasureEnatOf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">measureOf</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">WithTop.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">measureEnatOf</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FinitePointMeasure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">measureNatOf</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">coeMeasureNatOf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">measureOf</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">measureNatOf</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">FinitePointMeasure_is_PointMeasure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">FinitePointMeasure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PointMeasure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">toOuterMeasure</span> <span class=\"o\">:=</span> <span class=\"n\">μ.toOuterMeasure</span>\n    <span class=\"n\">m_iUnion</span> <span class=\"o\">:=</span> <span class=\"n\">μ.m_iUnion</span>\n    <span class=\"n\">trimmed</span> <span class=\"o\">:=</span> <span class=\"n\">μ.trimmed</span>\n    <span class=\"n\">measureEnatOf</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">μ.measureNatOf</span>\n    <span class=\"n\">coeMeasureEnatOf</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">s</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">μ.coeMeasureNatOf</span><span class=\"o\">]</span>\n      <span class=\"n\">rfl</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 401172772,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1699541735
    },
    {
        "content": "<p>Sorry to sound like a stuck record, but please make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>!</p>",
        "id": 401174694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699542273
    },
    {
        "content": "<p>It's still missing imports and <code>open</code> commands</p>",
        "id": 401174738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699542290
    }
]