[
    {
        "content": "<p>How do I name variables and hypothesis generated by cases? I understand Coq's <code>destruct  var as [H a b | H' a b c]</code>, but don't get how you're supposed to do it with Lean's default cases/induction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">gt0</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">})</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">match</span> <span class=\"n\">gt0</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"n\">Subtype.mk</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/\\</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">intros</span> <span class=\"n\">gt0</span>\n <span class=\"n\">cases</span> <span class=\"n\">gt0</span> <span class=\"c1\">--auto names a as val?</span>\n <span class=\"n\">simp</span>\n <span class=\"n\">cases</span> <span class=\"n\">val</span> <span class=\"c1\">--unknown identifier val</span>\n</code></pre></div>\n<p>I couldn't get different variants of <code>cases</code> from the documentation and couldn't get it to work. Should I just use Mathlib's <code>rcases</code>, which seems to have a syntax I want?</p>",
        "id": 389690482,
        "sender_full_name": "Alex",
        "timestamp": 1694100452
    },
    {
        "content": "<p>I always use <code>rcases</code> or <code>cases'</code> because I can never get my head around the 2d syntax of <code>cases</code></p>",
        "id": 389691576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694100663
    },
    {
        "content": "<p>There's a code action for this. When you type <code>cases gt0</code>, there should be a light bulb that pops up. You can click it (or in VS Code type <code>Ctrl</code>+<code>.</code>) and click \"Generate and explicit pattern match for 'cases'\", so you never have to remember!</p>",
        "id": 389694234,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694101184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 389694332,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694101205
    },
    {
        "content": "<p>TIL! FYI, this also works with <code>induction</code>!</p>",
        "id": 389702707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694103752
    },
    {
        "content": "<p>Indeed it does. The only thing to watch out for: if you type slightly too much the <span aria-label=\"idea\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"idea\">:idea:</span> pop-up disappears</p>",
        "id": 389709455,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694105475
    },
    {
        "content": "<p>There are also code actions for <code>calc</code> blocks to generate new lines for you. I think Patrick demonstrated this in the video he made to celebrate the end of the port.</p>",
        "id": 389709693,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694105534
    },
    {
        "content": "<p>Those are not yet in mathlib. But I'll be able to resume work on this since <a href=\"https://github.com/EdAyers/ProofWidgets4/pull/16\">https://github.com/EdAyers/ProofWidgets4/pull/16</a> got merged yesterday.</p>",
        "id": 389716802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694107620
    },
    {
        "content": "<p>That would explain why I haven't yet been using them!</p>",
        "id": 389718820,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694108290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> In VS? I'm using emacs.<br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> fin2.cases'?</p>",
        "id": 389884315,
        "sender_full_name": "Alex",
        "timestamp": 1694180374
    },
    {
        "content": "<p>I use emacs, but not for Lean, so I'm unfamiliar with the chords relevant to this. Maybe <code>C-x .</code>? (Just guessing)</p>",
        "id": 389884673,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694180499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Naming.20cases'.20variables/near/389709455\">said</a>:</p>\n<blockquote>\n<p>Indeed it does. The only thing to watch out for: if you type slightly too much the <span aria-label=\"idea\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"idea\">:idea:</span> pop-up disappears</p>\n</blockquote>\n<p>this is now fixed on std master - it will trigger on <code>cases e</code> and <code>cases e with</code> now, although <code>cases e </code> with a trailing space will not trigger if your cursor is after the space</p>",
        "id": 389936175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694200481
    }
]