[
    {
        "content": "<p>Hello! I am new here and now to Lean. I have a question, am I at the right place/room to ask? :)</p>",
        "id": 363846988,
        "sender_full_name": "Adam Robinson",
        "timestamp": 1686002104
    },
    {
        "content": "<p>new to Lean*</p>",
        "id": 363847018,
        "sender_full_name": "Adam Robinson",
        "timestamp": 1686002123
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 363847283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686002272
    },
    {
        "content": "<p>I am stuck at circular or contradictory conclusions when I try to solve</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">learning</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">):</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">rw lt_iff_exists_add at H,</span>\n<span class=\"cm\">  cases H with x h,</span>\n<span class=\"cm\">  cases h with y h,</span>\n<span class=\"cm\">  rw lt_iff_exists_add,</span>\n<span class=\"cm\">  use x,</span>\n<span class=\"cm\">  split,</span>\n<span class=\"cm\">  apply y,</span>\n<span class=\"cm\">  simp,</span>\n<span class=\"cm\">  ---??</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 363847689,
        "sender_full_name": "Adam Robinson",
        "timestamp": 1686002476
    },
    {
        "content": "<p>I also tried 'mul_lt_mul_left', but it did not change c<em>a &lt; c</em>b into a &lt; b</p>",
        "id": 363847977,
        "sender_full_name": "Adam Robinson",
        "timestamp": 1686002600
    },
    {
        "content": "<p>Edit your first message and enclose the code in two lines just containing three backticks <code> ``` </code>. Right now markup is eating things like your multiplications so it's hard to read and hence to answer. Read the information at <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for more hints on how to ask a good question.</p>",
        "id": 363848231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686002700
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/h.3A.20x.20.3C.20y.2C.20prove.202.2Ax.20.3C.202.2Ay/near/363846988\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/finite\">#new members &gt; finite</a> by <span class=\"user-mention silent\" data-user-id=\"622458\">Adam Robinson</span>.</p>",
        "id": 363848447,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686002768
    },
    {
        "content": "<p>Thanks for the pointers. I'll edit my message and make the code readable.</p>",
        "id": 363848778,
        "sender_full_name": "Adam Robinson",
        "timestamp": 1686002904
    },
    {
        "content": "<p>The first problem is that you have a typo in your question: you are asking about 2x&lt;2y but your code has 2x&lt;2x so it's not provable. Secondly I wouldn't recommend <code>cases H with x h</code> because then you'll have two variables both called <code>x</code> which is a recipe for disaster. Thirdly <code>(x &lt; y)</code> isn't correct syntax -- this hypothesis needs a name (or else you'll end up with three variables called x). Try <code>(H : x &lt; y)</code>. Has that got you on the right track?</p>",
        "id": 363848950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686002987
    },
    {
        "content": "<p>I made  some errors :/ Thanks</p>",
        "id": 363849431,
        "sender_full_name": "Adam Robinson",
        "timestamp": 1686003235
    },
    {
        "content": "<p>I have made some more changes and I am still stuck at lemmas I cannot prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorial.basic</span> <span class=\"c1\">-- imported because this lemma is a simpler version of my actual problem.</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">t</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">):</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">rw lt_iff_exists_add,</span>\n<span class=\"cm\">use 1,</span>\n<span class=\"cm\">split,</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 363850674,
        "sender_full_name": "Adam Robinson",
        "timestamp": 1686003758
    },
    {
        "content": "<p>If you're going to use <code>lt_iff_exists_add</code> (which will work) then what is the rest of the maths proof? Lean will not come up with proofs by itself (unless you use the AI interface, which is flaky at best), it will just check your proofs.</p>",
        "id": 363851278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686004058
    },
    {
        "content": "<blockquote>\n<p>which will work</p>\n</blockquote>\n<p>Though <code>use 1</code> is not going to do you any favors</p>",
        "id": 363852198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686004501
    },
    {
        "content": "<p>(that's why I asked about the maths proof)</p>",
        "id": 363853147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686004948
    }
]