[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">addLessThan</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">addLessThan</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">addLessThan</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">addLessThan</span><span class=\"o\">,</span> <span class=\"n\">Id.run</span><span class=\"o\">,</span> <span class=\"n\">forIn</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">Std.Range.forIn</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The thing sould be proved in the sorry is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Std.Range.forIn.loop</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<ol>\n<li>I can not <code>simp</code> <code>Std.Range.forIn.loop</code> and <code>ForInStep.yield</code>, why and how can I continue.</li>\n<li>why <code>simp</code> works on <code>example: addLessThan 6 = 15</code></li>\n</ol>",
        "id": 395820420,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696921735
    },
    {
        "content": "<p>Subtraction and division on naturals are pathological operations so you should not expect things to go smoothly. I would coerce to rationals (where they are not) before attempting to prove anything</p>",
        "id": 395822253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696922601
    },
    {
        "content": "<p>Maybe at the current stage what I want to prove and try to understand is something like. <code>example (n: Nat) : addLessThan n = [1, 2, 3, ..., n].sum</code><br>\nI am learning do block now. So I am trying to do some proving on it.</p>",
        "id": 395822768,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696922824
    },
    {
        "content": "<p>I am also curious about this. To perhaps sidestep the question about the rationals, how would one go about filling the sorry in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">monadicMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monadicMul_eq_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monadicMul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395826870,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696924541
    },
    {
        "content": "<p>I think there is a thread elsewhere that suggests some missing lemmas for Std.Range</p>",
        "id": 395827884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696924944
    },
    {
        "content": "<p>Those missing lemmas are no longer missing</p>",
        "id": 395829058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696925380
    },
    {
        "content": "<p>although the result is still a bit messy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">monadicMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">monadicMul_eq_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monadicMul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">ForInStep.bindList</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">↦</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">List.range'</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ForInStep.yield</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">monadicMul</span><span class=\"o\">,</span> <span class=\"n\">Std.Range.forIn_eq_forIn_range'</span><span class=\"o\">,</span> <span class=\"n\">Std.Range.numElems_step_1</span><span class=\"o\">,</span>\n      <span class=\"n\">List.forIn_eq_bindList</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Id.run</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.range'</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.range'_concat</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_mul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 395829100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696925397
    },
    {
        "content": "<p>It doesn't seem like a very 'new member,' but I like it.</p>",
        "id": 395830515,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696925904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 395832708,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696926722
    },
    {
        "content": "<p>Maybe there should be a \"verify stupidly simple (imperative) programs\" game</p>",
        "id": 395834377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696927286
    },
    {
        "content": "<p>We're playing it right now</p>",
        "id": 395835850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696927839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Attempting.20to.20Prove.20the.20Result.20of.20a.20do.20Block.2C.20but.20stuck/near/395834377\">said</a>:</p>\n<blockquote>\n<p>Maybe there should be a \"verify stupidly simple (imperative) programs\" game</p>\n</blockquote>\n<p>Is there a \"<del>verify</del> stupidly simple (imperative) programs\" game?</p>",
        "id": 395843002,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696930336
    },
    {
        "content": "<p>advent of code? Maybe not all of them are simple</p>",
        "id": 395843443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696930506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Attempting.20to.20Prove.20the.20Result.20of.20a.20do.20Block.2C.20but.20stuck/near/395843443\">said</a>:</p>\n<blockquote>\n<p>advent of code? Maybe not all of them are simple</p>\n</blockquote>\n<p>Is it this one? <a href=\"https://github.com/digama0/advent-of-code\">https://github.com/digama0/advent-of-code</a> .</p>",
        "id": 395848859,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1696932386
    }
]