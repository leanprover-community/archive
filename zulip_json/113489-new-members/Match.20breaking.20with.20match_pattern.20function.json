[
    {
        "content": "<p>Any reason why <code>Char.ofNat 0</code> breaks the pattern matching? When replaced with the Char literal it works as expected. Thank you.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'a'</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p><code>Lean 4: unknown free variable '_uniq.1738'</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Char.ofNat</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p><code>Lean 4: tactic 'cases' failed, nested error: tactic 'induction' failed, recursor 'Or.casesOn' can only eliminate into Prop</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'a'</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">'b'</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>Works as expected</p>",
        "id": 363165005,
        "sender_full_name": "Jacob",
        "timestamp": 1685739938
    },
    {
        "content": "<p>Is <code>Char.ofNat</code> even a constructor?</p>",
        "id": 363167922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685740939
    },
    {
        "content": "<p>No but it is marked with match_pattern</p>",
        "id": 363168749,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1685741214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Match.20breaking.20with.20match_pattern.20constructor/near/363167922\">said</a>:</p>\n<blockquote>\n<p>Is <code>Char.ofNat</code> even a constructor?</p>\n</blockquote>\n<p>Yes you are right, not a constructor. But a helpful individual on a lean discord channel did mention that the function being tagged with match_pattern should mean it works? But I am very new to lean, so I don't understand it really.</p>",
        "id": 363168885,
        "sender_full_name": "Jacob",
        "timestamp": 1685741274
    },
    {
        "content": "<p><code>match_pattern</code> means it is not immediately rejected, but it is unfolded and the resulting expression might not be suitable as a pattern</p>",
        "id": 363169479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685741474
    },
    {
        "content": "<p>I guess from the annotation that there is some expectation that this works in at least some cases</p>",
        "id": 363169631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685741523
    },
    {
        "content": "<p>I think there must be some shenanigans going on because <code>'a'</code> expands to <code>Char.ofNat 97</code> yet using one in place of the other in pattern position changes the pattern match behavior</p>",
        "id": 363169806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685741610
    },
    {
        "content": "<p>It's probably directly matching the syntax looking for a char literal</p>",
        "id": 363169841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685741629
    },
    {
        "content": "<p>note that using the basic match compiler here would generate a really bad implementation, containing 97 case splits on the underlying <code>Nat</code></p>",
        "id": 363169966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685741662
    },
    {
        "content": "<p>I believe matches on characters and strings are handled specially, to produce an if-else-if split</p>",
        "id": 363170303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685741777
    },
    {
        "content": "<p>I wonder if you can get a <code>Char</code> pattern match to be exhaustive if you list all 1114112 possibilities</p>",
        "id": 363171629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685742244
    },
    {
        "content": "<p>I would say that the Lean compiler would pprobably give in long before that match size</p>",
        "id": 363173040,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1685742849
    }
]