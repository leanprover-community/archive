[
    {
        "content": "<p>Hello, I'm trying to prove the following statement in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">two_pow_three_pow_unique_factorization</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It should hold due to unique prime factorization.</p>\n<p>I've proved this one, but it is super long and I want to get rid of the two hypotheses and use <code>wlog</code>, but that will become super messy with my current proof... So I'm wondering if there is a simple way to do it, maybe using <code>UniqueFactorizationMonoid</code> or similar? I've been browsing mathlib for a fitting theorem to start with, but I can't find any. Any pointers would be much appreciated :)</p>\n<p>Thanks in advance!</p>\n<p>PS:<br>\nHere is the full proof I've come up with (Ignore the dangling simps and all the repetition, this was just a crude proof):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">two_pow_three_pow_unique_factorization</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hfac</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdvd3</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"o\">(</span><span class=\"n\">pow_dvd_pow</span> <span class=\"mi\">3</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.div_eq_iff_eq_mul_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">hdvd3</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_dvd_pow_iff</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span><span class=\"o\">),</span>\n      <span class=\"n\">Nat.pow_div</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hfac</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hfac</span>\n  <span class=\"k\">have</span> <span class=\"n\">hdvd2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"o\">(</span><span class=\"n\">pow_dvd_pow</span> <span class=\"mi\">2</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.div_eq_iff_eq_mul_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">hdvd2</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">q</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_dvd_pow_iff</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span><span class=\"o\">),</span>\n      <span class=\"n\">Nat.pow_div</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hfac</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_eq_one_iff'</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_le_pow'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_le_two_pow</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">))]</span> <span class=\"n\">at</span> <span class=\"n\">hfac</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hfac</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.log</span> <span class=\"mi\">2</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.log_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq₁</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.log</span> <span class=\"mi\">3</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.log_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">heq₁</span><span class=\"o\">,</span> <span class=\"n\">heq₂</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 401557875,
        "sender_full_name": "Aron Erben",
        "timestamp": 1699751403
    },
    {
        "content": "<p>With Nat it's probably easier to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factorization#doc\">docs#Nat.factorization</a> than UniqueFactorizationMonoid, and here's a proof along that line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_pow_three_pow_unique_factorization</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">Nat.factorization</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorization_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.factorization_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorization_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.congr_fun</span> <span class=\"n\">h</span> <span class=\"mi\">2</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.add_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">Nat.prime_two.factorization_self</span><span class=\"o\">,</span>\n        <span class=\"n\">nsmul_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.factorization_eq_zero_of_not_dvd</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.congr_fun</span> <span class=\"n\">h</span> <span class=\"mi\">3</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.add_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">Nat.prime_three.factorization_self</span><span class=\"o\">,</span>\n        <span class=\"n\">nsmul_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.factorization_eq_zero_of_not_dvd</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">positivity</span>\n</code></pre></div>",
        "id": 401559799,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699752675
    },
    {
        "content": "<p>Thanks, that's very insightful!</p>",
        "id": 401627450,
        "sender_full_name": "Aron Erben",
        "timestamp": 1699808991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> has marked this topic as resolved.</p>",
        "id": 401627454,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699808995
    }
]