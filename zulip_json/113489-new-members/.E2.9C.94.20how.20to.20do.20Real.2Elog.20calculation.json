[
    {
        "content": "<p>Hi, everyone!<br>\nI have trouble to solve the <code>sorry</code> in my code. I have searched the library and don't find the theorem which satisfies in my case. I was wondering if I miss some theorem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">spow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">Real.log</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha₂</span> <span class=\"o\">:</span> <span class=\"n\">Real.log</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_neg_of_mul_neg</span> <span class=\"n\">ha₁</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">Real.log_neg_iff</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">ha₂</span>\n</code></pre></div>\n<p>Thanks in advance.</p>",
        "id": 387604936,
        "sender_full_name": "Wenrong Zou",
        "timestamp": 1693202486
    },
    {
        "content": "<p>I suspect that your sorry will send you in an API loop.  Here is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">spow</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">rpow_lt_one_iff_of_pos</span> <span class=\"n\">ha</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">lt_asymm</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ineq</span>\n\n<span class=\"c1\">-- in golfed form</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lt_asymm</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">((</span><span class=\"n\">rpow_lt_one_iff_of_pos</span> <span class=\"n\">ha</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 387607299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693204023
    },
    {
        "content": "<p>I think that the way chosen in mathlib to prove this sort of result is to argue on the \"exponential\" first and deduce the log result from it.</p>",
        "id": 387607362,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693204081
    },
    {
        "content": "<p>So, in some sense, your result should be proved without reference to <code>log</code>s.</p>\n<p>You can probably also go via <code>log</code>, but, if you traced the proofs used along the way, you may find that you went on a loop.</p>",
        "id": 387607504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693204167
    },
    {
        "content": "<p>Ah, notice that I used <code>&lt;</code> instead of <code>&gt;</code>.  Again, this is dictated by a library choice: there are almost no <code>&gt;</code> in mathlib lemmas, so you'll have an easier experience if you stick to using <code>&lt;</code>.</p>",
        "id": 387608938,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693204978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20do.20Real.2Elog.20calculation/near/387607362\">发言道</a>：</p>\n<blockquote>\n<p>I think that the way chosen in mathlib to prove this sort of result is to argue on the \"exponential\" first and deduce the log result from it.</p>\n</blockquote>\n<p>Ok. Thank you for your help. It seems more effective to do with exponential objects than log. Thank you very much!</p>",
        "id": 387610363,
        "sender_full_name": "Wenrong Zou",
        "timestamp": 1693205756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"641254\">WenrongZou</span> has marked this topic as resolved.</p>",
        "id": 387610513,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693205810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20how.20to.20do.20Real.2Elog.20calculation/near/387608938\">发言道</a>：</p>\n<blockquote>\n<p>Ah, notice that I used <code>&lt;</code> instead of <code>&gt;</code>.  Again, this is dictated by a library choice: there are almost no <code>&gt;</code> in mathlib lemmas, so you'll have an easier experience if you stick to using <code>&lt;</code>.</p>\n</blockquote>\n<p>haha, I will change to use <code>&lt;</code>.</p>",
        "id": 387610597,
        "sender_full_name": "Wenrong Zou",
        "timestamp": 1693205859
    }
]