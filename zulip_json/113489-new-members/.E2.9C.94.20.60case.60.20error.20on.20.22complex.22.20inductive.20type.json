[
    {
        "content": "<p>Hi! I'm messing around a bit in lean 3, and I have the following attempt of a code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.free_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">gen_K_MW</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">gen_K_MW</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gen_K_MW</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pre_K_MW</span> <span class=\"o\">:=</span> <span class=\"n\">free_algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">gen_K_MW</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">Pre_K_MW</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">free_algebra.ring</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Pre_K_MW</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">free_algebra.algebra</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Pre_K_MW</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">free_algebra.ι</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">gen_K_MW.l</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">pη</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Pre_K_MW</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">free_algebra.ι</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">gen_K_MW.η</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">in_degree</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Pre_K_MW</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n    <span class=\"c1\">-- Base relations</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero_rel</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">in_degree</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">one_rel</span> <span class=\"o\">:</span> <span class=\"n\">in_degree</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero_symb</span> <span class=\"o\">:</span> <span class=\"n\">in_degree</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">eta_deg</span> <span class=\"o\">:</span> <span class=\"n\">in_degree</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pη</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">symb_deg</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">in_degree</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- Making it a ℤ-submodule</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_closure</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Pre_K_MW</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">in_degree</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">in_degree</span> <span class=\"n\">n</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n      <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">in_degree</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">smul_closure</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Pre_K_MW</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">in_degree</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">in_degree</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">•</span><span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"c1\">-- Making it a graded algebra</span>\n    <span class=\"bp\">|</span> <span class=\"n\">prod_symb</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Pre_K_MW</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">in_degree</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">in_degree</span> <span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n      <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">in_degree</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">separation</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Pre_K_MW</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">in_degree</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">x_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">free_algebra.induction</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- This fails</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As far as I understand, I should be able to prove the lemma <code>separation</code> using the fact that the case described in its the hypothesis is never reached by any other element that 0.  The case tactic is giving an error. What would be alternative tactics/methods to tell lean to break down <code>h</code> into all its possible constructors and to examineeach of them?</p>",
        "id": 348747417,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1681309514
    },
    {
        "content": "<p>Tactics like <code>induction h</code> and <code>destruct h</code> go through but also produces a few seemingly unsolvable cases. For instance, <code>induction h</code> will create cases like <code>case.one_rel</code> and <code>case.zero_rel</code>, which are constructors that cannot be used to construct <code>h</code> (which is of type <code>in_degree 1 ↑x</code>), so shouldn't be constructed using these constructors, but I don't really understand how to tell lean that.</p>",
        "id": 348760450,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1681312048
    },
    {
        "content": "<p>Lean certainly can't tell that <code>zero_rel</code> is not possible in your setting. You'll have to prove that.</p>",
        "id": 348761498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681312273
    },
    {
        "content": "<p>Sure, but my question is how to even produce a goal in which I'd have to prove it in that case, as <code>induction</code> or <code>destruct</code> blindly create goals in which nothing relevant seem to be added to the local context.</p>",
        "id": 348761851,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1681312359
    },
    {
        "content": "<p>Would you mind sharing a bit of the mathematical background story of what you are trying to do?</p>",
        "id": 348761858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681312362
    },
    {
        "content": "<p>Yes, it would have been nice if it added <code>↑x = 0</code> to the context, so that you can actually derive a contradiction. I guess this is a \"bug\".</p>",
        "id": 348762073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681312421
    },
    {
        "content": "<p>Here is one thing you can do: use <code>generalize</code> to turn the <code>↑x</code> into a free variable <code>x'</code> <em>and</em> add <code>x' = x</code> to the context.</p>",
        "id": 348762563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681312539
    },
    {
        "content": "<p>(And the same for the other argument <code>1:ℤ</code> that occurs in <code>h</code>.)</p>",
        "id": 348762660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681312563
    },
    {
        "content": "<p>The mathematical background story is Milnor-Witt K-theory (hence the \"MW\" name). It's a graded algebra defined rather explicitly by generators and relations. I have a good piece of code of my own defining this gadget and proving some stuff as something ungraded (by explicitly quotienting this <code>pre_K_MW</code> algebra by a bunch of relations) and I'm trying to see if I can add the grading to the story. For this I'd need to define a bunch of submodules being the graded pieces, proving that the direct sum is internal and so on and so forth</p>\n<p>This <code>in_degree</code> thing is the predicate that something lives in the submodule of homogeneous things of degree n, it specifies the degree of each generators, and to see that those submodules are an internal direct sum I think I need this kind of separation lemma in a way or another.</p>",
        "id": 348763072,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1681312658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/.60case.60.20error.20on.20.22complex.22.20inductive.20type/near/348762563\">said</a>:</p>\n<blockquote>\n<p>Here is one thing you can do: use <code>generalize</code> to turn the <code>↑x</code> into a free variable <code>x'</code> <em>and</em> add <code>x' = x</code> to the context.</p>\n</blockquote>\n<p>Thanks! I'll try messing messing around a bit to see if I can get a better context this way</p>",
        "id": 348765647,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1681313170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"286014\">Robin Carlier</span> has marked this topic as resolved.</p>",
        "id": 349022548,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681371036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"286014\">Robin Carlier</span> has marked this topic as resolved.</p>",
        "id": 349022549,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681371037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"286014\">Robin Carlier</span> has marked this topic as unresolved.</p>",
        "id": 349022556,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681371038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"286014\">Robin Carlier</span> has marked this topic as resolved.</p>",
        "id": 349022568,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681371042
    }
]