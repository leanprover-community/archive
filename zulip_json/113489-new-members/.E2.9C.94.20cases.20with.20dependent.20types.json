[
    {
        "content": "<p>In the following code <code>extract_n</code> works, while <code>extract_z</code> does not.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mysum</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">pn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span>     <span class=\"o\">(</span><span class=\"n\">mysum</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"n\">pz</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span>     <span class=\"o\">(</span><span class=\"n\">mysum</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extract_n</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mysum</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">extract_z</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mysum</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span>  <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">z</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>When I say that it does not work, I mean that in <code>extract_z</code> you cannot use the <code>with</code> expression to name the terms, even though they get extracted. <br>\nEven stranger, if I swap the order of <code>pn</code> and <code>pz</code> in the definition of <code>mysum</code> then <code>extract_z</code> works and <code>extract_n</code> does not work. </p>\n<p>I don't want to write the above functions, and I know that there are other ways to achieve the above, but I want to use <code>cases</code> in a proof with a depenedent type.  My case is of course more complicated, I have a dependent type  <code>something : Blah → Prop</code>, and I want to use cases in tactic to extract the information from a particular term of type <code>(something (b : Blah))</code>. </p>\n<p>Is there a better way of doing this? Or what am I misunderstanding?</p>",
        "id": 259079956,
        "sender_full_name": "Justin Pearson",
        "timestamp": 1635245997
    },
    {
        "content": "<p>You need to provide names even for the fields of constructors that <code>cases</code> will determine are impossible--I never understood exactly why.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mysum</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">pn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span>     <span class=\"o\">(</span><span class=\"n\">mysum</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"n\">pz</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"o\">:</span>     <span class=\"o\">(</span><span class=\"n\">mysum</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extract_n</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mysum</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extract_z</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mysum</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">z</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259080861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635246535
    },
    {
        "content": "<p>In a more complicated case this usually means writing a whole bunch of <code>_</code>s and then adjusting the number until the context after <code>cases</code> looks like what you expect</p>",
        "id": 259080981,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635246612
    },
    {
        "content": "<p>Wow, that's a whole lot of _s in my case.</p>",
        "id": 259082560,
        "sender_full_name": "Justin Pearson",
        "timestamp": 1635247653
    },
    {
        "content": "<p>But with some reorganization of constructors it seems to work.</p>",
        "id": 259083508,
        "sender_full_name": "Justin Pearson",
        "timestamp": 1635248347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"434371\">Justin Pearson</span> has marked this topic as resolved.</p>",
        "id": 259083510,
        "sender_full_name": "Notification Bot",
        "timestamp": 1635248349
    }
]