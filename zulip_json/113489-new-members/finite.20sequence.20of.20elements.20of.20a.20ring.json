[
    {
        "content": "<p>I'm trying to formalize the (statement of the) following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.LocalRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.MinimalPrime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Noetherian</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsNoetherian</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exist_subideals_of_all_heights_of_height_n</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">seq.length</span> <span class=\"bp\">=</span> <span class=\"n\">height</span> <span class=\"n\">I</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">height</span> <span class=\"n\">I</span><span class=\"o\">},</span>\n<span class=\"o\">(</span><span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">Ideal.span</span> <span class=\"o\">{</span><span class=\"n\">seq</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">}))</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>For a reference, this is theorem A.2 in Bruns-Herzog's <em>Cohen-Macaulay Rings</em></p>\n<p>However, I get an error that Lean is unable to prove the index is correct. I think I don't have an off by one error, but I'm afraid my attempt is just too complicated for Lean to figure it out. Is there an easier way to do this?</p>\n<p>Related question, should I be using <code>List</code> or <code>Array</code> for things like this?</p>",
        "id": 376509923,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1689730228
    },
    {
        "content": "<p>Using <code>seq.getD i 0</code> instead of <code>seq[a]</code> fixes the error.</p>\n<p>For an <code>Inhabited</code> type <code>R</code>, you can extract the <code>i</code>th element of a list <code>L</code> by <code>L[i]!</code>, with the exclamation point.  <code>Inhabited</code> is used in case you give an out-of-bounds index.</p>\n<p>However, <code>Monoid</code>-like types are not inhabited globally, since they would induce default elements <code>0</code> or <code>1</code> in <code>Semiring</code>-like types, creating diamonds.</p>\n<p>If you find yourself wanting the panic-notation <code>!</code>, you can add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>though this might cause other kinds of issues.</p>",
        "id": 376516052,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689733252
    },
    {
        "content": "<p>Is it possible to write something more like <code>Ideal.span (seq.take i)</code> (maybe some function moving from <code>List</code> to <code>Set</code> is required there). That would be more colloquial than using indexing into the list.</p>",
        "id": 376526013,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689738526
    },
    {
        "content": "<p>Also, usually we would write <code>∀ i ∈ {m : ℕ | m ≤ height I}, ...</code> as <code>∀ m, m ≤ height I → ...</code>. This then avoids the coercions you have of <code>i</code> back to <code>ℕ</code>, which are both hard on the reader, and will probably cause pain later.</p>",
        "id": 376526196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689738580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/finite.20sequence.20of.20elements.20of.20a.20ring/near/376526013\">said</a>:</p>\n<blockquote>\n<p>Is it possible to write something more like <code>Ideal.span (seq.take i)</code> (maybe some function moving from <code>List</code> to <code>Set</code> is required there). That would be more colloquial than using indexing into the list.</p>\n</blockquote>\n<p>When I try to use <code>seq.take i</code> it complains that <code>i</code> has type <code>WithBot (WithTop ℕ)</code> and not <code>ℕ</code>. For the purposes of this theorem, I am willing to assume that <code>1 ≤ i</code> so <code>i</code> is in fact a natural number, but how would I convince the type checker of this?</p>",
        "id": 376533335,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1689742148
    },
    {
        "content": "<p>Can you write <code>∀ m : ℕ, m ≤ height I → ...</code> and then <code>.take m</code>?</p>",
        "id": 376534235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689742769
    },
    {
        "content": "<p>That worked, thanks!</p>\n<p>Now, my statement looks like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exist_subideals_of_all_heights_of_height_n</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">seq.length</span> <span class=\"bp\">=</span> <span class=\"n\">height</span> <span class=\"n\">I</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">height</span> <span class=\"n\">I</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">Ideal.span</span> <span class=\"o\">(</span><span class=\"n\">List.toFinset</span> <span class=\"o\">(</span><span class=\"n\">seq.take</span> <span class=\"n\">i</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and Lean is complaining that <code>R</code> has no instance of <code>DecidableEq</code>. But I think that rings don't necessarily have decidable equality in general, so how might I proceed?</p>",
        "id": 376759231,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1689791843
    },
    {
        "content": "<p>The rule with this decidable stuff is: if the statement of the lemma doesn't compile, add <code>[DecidableEq R]</code> to the statement. If the statement compiles but your proof doesn't work, use the <code>classical</code> tactic.</p>",
        "id": 376759876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689791984
    },
    {
        "content": "<p>PS when Jujian and I discussed dimension theory, I suggested that a Nat-valued function would be easier to work with, but eventually he went for with WithBot WithTop thing. For degrees of polynomials we have \"mathematically correct degree\" taking values in WithBot Nat with deg(0)=bot, and we have \"degree which is often easier to use in practice\" where deg(0) is just defined to be a junk value but the target of the map is the naturals. If you have too much more trouble with WithBot WithTop Nat you might want to consider PRing a <code>natDimension</code> function sending the zero ring and infinite-dimensional rings to 0.</p>",
        "id": 376760594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689792126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/finite.20sequence.20of.20elements.20of.20a.20ring/near/376760594\">said</a>:</p>\n<blockquote>\n<p>PS when Jujian and I discussed dimension theory, I suggested that a Nat-valued function would be easier to work with, but eventually he went for with WithBot WithTop thing. For degrees of polynomials we have \"mathematically correct degree\" taking values in WithBot Nat with deg(0)=bot, and we have \"degree which is often easier to use in practice\" where deg(0) is just defined to be a junk value but the target of the map is the naturals. If you have too much more trouble with WithBot WithTop Nat you might want to consider PRing a <code>natDimension</code> function sending the zero ring and infinite-dimensional rings to 0.</p>\n</blockquote>\n<p>I think there's some subtlety here because the \"WithBot\" (i.e. the zero ring) is \"mathematically trivial\" but the \"WithTop\" (infinite dimensional rings) is not. Many theorems hold without change for infinite dimensional rings, for example my statement in <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/.E2.9C.94.20HSub.20on.20WithBot.2FWithTop.3F\">#new members &gt; ✔ HSub on WithBot/WithTop?</a> works as long as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi><mo>+</mo><mn>1</mn><mo>=</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty + 1 = \\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>. So I could at least imagine the use of something which ignores the zero ring but not infinite-dimensional ones. </p>\n<p>On the other hand, if you're thinking about infinite-dimensional rings you might want to distinguish between countable and uncountable krull dimension (this is for example the difference between <a href=\"https://arxiv.org/abs/1906.03583\">Lang-Ludwig</a> and <a href=\"https://arxiv.org/abs/2002.10358\">Du</a>). </p>\n<p>All this is pretty obscure though. As someone who has thought a little bit about infinite dimensional rings, I'd say the ideal \"mathematically correct\" thing would be a cardinal, and then we can use a <code>natDimension</code> and <code>natHeight</code> like you mentioned for everyday things.</p>",
        "id": 377438532,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1689977465
    },
    {
        "content": "<p>I'm aware of the Lang-Ludwig work (Judith was my PhD student!); Jujian and I also discussed a definition taking values in <code>WithBot Cardinal</code> but this seemed even more exotic and hard to work with. Your comments on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi><mo>+</mo><mn>1</mn><mo>=</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty+1=\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span> are interesting though. I should think that this is true for WithBot (WithTop Nat) though so you're OK.</p>",
        "id": 377444596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689980263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/finite.20sequence.20of.20elements.20of.20a.20ring/near/376759876\">said</a>:</p>\n<blockquote>\n<p>The rule with this decidable stuff is: if the statement of the lemma doesn't compile, add <code>[DecidableEq R]</code> to the statement. If the statement compiles but your proof doesn't work, use the <code>classical</code> tactic.</p>\n</blockquote>\n<p>Ok, so I want to revive this after a short haitus... it turns out even with <code>[DecidableEq R]</code> Lean is still complaining about </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.52781</span> <span class=\"n\">seq</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I had abanodned trying to use lists/arrays for functions <code>fin n → R</code> instead, but I'm not sure this is a good option anymore and want to try both approaches. Here's my current <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.LocalRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.MinimalPrime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Noetherian</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsNoetherian</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">--set_option trace.Meta.synthInstance true in</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exist_subideals_of_all_heights_of_height_n</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">seq.length</span> <span class=\"bp\">=</span> <span class=\"n\">height</span> <span class=\"n\">I</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">height</span> <span class=\"n\">I</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">Ideal.span</span> <span class=\"o\">(</span><span class=\"n\">List.toFinset</span> <span class=\"o\">(</span><span class=\"n\">List.take</span> <span class=\"n\">i</span> <span class=\"n\">seq</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can anyone explain why this error is popping up and how to fix it?</p>",
        "id": 381648798,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1691114192
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exist_subideals_of_all_heights_of_height_n</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">seq.length</span> <span class=\"bp\">=</span> <span class=\"n\">height</span> <span class=\"n\">I</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">height</span> <span class=\"n\">I</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ideal.span</span> <span class=\"o\">(</span><span class=\"n\">List.toFinset</span> <span class=\"o\">(</span><span class=\"n\">List.take</span> <span class=\"n\">i</span> <span class=\"n\">seq</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><del>Lean 4 is currently worse at unification than Lean 3.</del>I take that back, they both fail here.</p>",
        "id": 381649606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691114582
    },
    {
        "content": "<p>BTW Currently <code>(R : Type _)</code> is also a footgun: I'd recommend <code>universe uR</code> and <code>R : Type uR</code>.</p>",
        "id": 381649690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691114639
    },
    {
        "content": "<p>Actually Lean 3 fails in a different place: it won't coerce the finset to a set. I think this is actually the same underlying problem. When coercing a finset to a set, 99.9% of the time you're going from <code>finset X</code> to <code>set X</code> as opposed to anything more exotic, but it always seems that Lean is reluctant to assume this. Perhaps this is the common cause?</p>",
        "id": 381651087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691115198
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.cotangent</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">height</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exist_subideals_of_all_heights_of_height_n</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">seq.length</span> <span class=\"bp\">=</span> <span class=\"n\">height</span> <span class=\"n\">I</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">height</span> <span class=\"n\">I</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">ideal.span</span> <span class=\"o\">(</span><span class=\"n\">list.to_finset</span> <span class=\"o\">(</span><span class=\"n\">list.take</span> <span class=\"n\">i</span> <span class=\"n\">seq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 381651176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691115233
    },
    {
        "content": "<p>In Lean 3 the explicit <code>(_ : set R)</code> saves us</p>",
        "id": 381651422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691115334
    }
]