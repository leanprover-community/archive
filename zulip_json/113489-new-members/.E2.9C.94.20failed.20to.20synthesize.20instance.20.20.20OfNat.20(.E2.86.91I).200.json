[
    {
        "content": "<p>I'm trying to formalize some concepts in Algebraic Topology. When defining homotopy,  I got some errors: failed to synthesize instance OfNat (↑I) 0 and failed to synthesize instance  OfNat (↑I) 1</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">I</span><span class=\"o\">:=</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homotopy</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">I</span>  <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How to solve it?  Also, I don't know how to claim H is continous.</p>",
        "id": 400533231,
        "sender_full_name": "Samuel Thomas",
        "timestamp": 1699277948
    },
    {
        "content": "<p>Replace <code>def I:= Icc (0:ℝ) (1:ℝ)</code> with <code>abbrev I:= Icc (0:ℝ) (1:ℝ)</code>; the former tells lean \"forget everything you know about the unit interval, I'm making a new thing\"</p>",
        "id": 400534841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699278497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20synthesize.20instance.20.20.20OfNat.20.28.E2.86.91I.29.200/near/400534841\">said</a>:</p>\n<blockquote>\n<p>Replace <code>def I:= Icc (0:ℝ) (1:ℝ)</code> with <code>abbrev I:= Icc (0:ℝ) (1:ℝ)</code>; the former tells lean \"forget everything you know about the unit interval, I'm making a new thing\"</p>\n</blockquote>\n<p>Thanks, it works.</p>",
        "id": 400535987,
        "sender_full_name": "Samuel Thomas",
        "timestamp": 1699278892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657777\">Samuel Thomas</span> has marked this topic as resolved.</p>",
        "id": 400535993,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699278895
    },
    {
        "content": "<p>Fwiw, there's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitInterval#doc\">docs#unitInterval</a></p>",
        "id": 400536397,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699279026
    },
    {
        "content": "<p>Which you can write as <code>I</code> with <code>open unitInterval</code></p>",
        "id": 400537112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699279245
    }
]