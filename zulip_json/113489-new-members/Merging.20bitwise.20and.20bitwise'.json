[
    {
        "content": "<p>I'm trying to merge bitwise and bitwise' as mentioned <a href=\"https://github.com/leanprover-community/mathlib4/blob/de0cf0af4a454e6a6ce5cd95d204fde12a535227/Mathlib/Init/Data/Nat/Bitwise.lean#L459\">here</a>. Particularly I'm trying to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bitwise_eq_bitwise'</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bitwise</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">bitwise'</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but all of the useful lemmas in the library have this assumption <code>f false false = false</code>. So so far I proved (without any sorries)  that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bitwise_eq_bitwise'1</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">false</span> <span class=\"n\">false</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">):</span>\n<span class=\"n\">bitwise</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">bitwise'</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is the more general <code>bitwise_eq_bitwise'</code> true too? How can I check?</p>",
        "id": 359366272,
        "sender_full_name": "Harun Khan",
        "timestamp": 1684408625
    },
    {
        "content": "<p>The reason the <code>f false false = false</code> hypothesis is necessary is because if <code>f false false = true</code>, then the high-order 0 bits would then map to ones, and you would get a natural number with an infinite number of one bits, which shouldn't be possible.</p>\n<p>You might be able to check by running an #eval statement with an f that does have <code>f false false = true</code> and see how these functions are defined in this case.</p>",
        "id": 359641767,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684498878
    },
    {
        "content": "<p>Checking this out, I couldn't find any inputs on which they behave differently, <del>it seems like they just perform as if f were changed to return false on false false</del>. <del>Perhaps this theorem could be proved and then the condition in bitwise_eq_bitwise' could be removed.</del></p>",
        "id": 359645188,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684499627
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.bitwise%27_zero_right#doc\">docs4#Nat.bitwise'_zero_right</a> does not need its side condition?</p>",
        "id": 359646785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684499946
    },
    {
        "content": "<p>This looks like a pretty good confirmation that the statement you want is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Bitwise</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"n\">Nat.bitwise</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.bitwise'</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n<span class=\"c1\">-- outputs `true`</span>\n</code></pre></div>",
        "id": 359649508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684500528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113489-new-members/topic/Merging.20bitwise.20and.20bitwise'/near/359641767\">said</a>:</p>\n<blockquote>\n<p>The reason the <code>f false false = false</code> hypothesis is necessary is because if <code>f false false = true</code>, then the high-order 0 bits would then map to ones, and you would get a natural number with an infinite number of one bits, which shouldn't be possible.</p>\n<p>You might be able to check by running an #eval statement with an f that does have <code>f false false = true</code> and see how these functions are defined in this case.</p>\n</blockquote>\n<p>I looked a bit at this and it seems to me that both algorithms simply stop at the point where both numbers have become 000000..., as opposed to applying f ad infinitum, so this shouldn't affect things.</p>",
        "id": 359651658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684500956
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> is explaining why that hypothesis appears in <em>some</em> lemmas. Indeed, it's unecessary in this one</p>",
        "id": 359651862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684500989
    },
    {
        "content": "<p>But the natural way to prove this one is to use the other lemmas!</p>",
        "id": 359651942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684501002
    },
    {
        "content": "<p>Looking at this a bit more, it seems <code>bitwise</code> (and <code>bitwise'</code>) behaves somewhat strangely for functions where <code>f false false = true</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Bitwise</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Nat.bitwise</span> <span class=\"n\">f</span> <span class=\"mi\">100</span> <span class=\"mi\">0</span> <span class=\"c1\">-- 100</span>\n</code></pre></div>\n<p>I would have expected that to apply <code>f</code> to each pair of bits up-to the most significant bit in either of its inputs, returning <code>127</code>.</p>\n<p>The implementation of <code>bitwise</code> starts like so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"n\">false</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">m</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"n\">true</span> <span class=\"n\">false</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span>\n<span class=\"c1\">--  ...</span>\n</code></pre></div>\n<p>So the implementation assumes that if, say, <code>m = 0</code> and <code>f true false = true</code>, that the result of aplying <code>f</code> to each bit of <code>n</code> together with <code>0</code> is simply <code>n</code>; which is true only if indeed <code>f false false = false</code>.</p>",
        "id": 389911944,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1694189881
    }
]