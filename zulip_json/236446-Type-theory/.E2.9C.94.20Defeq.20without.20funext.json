[
    {
        "content": "<p>Lean's kernel has the definitional reduction rule that <code>(fun x =&gt; y) === (fun x =&gt; z)</code> whenever <code>y === z</code>. I'm working on a type theory like Lean's, but very intensional (e.g. no <code>funext</code>), so I'd like to remove this reduction rule from my theory. I'd like to know how necessary this reduction rule is in Lean, so I can gauge the impact removing it could have on my type system.</p>",
        "id": 369777361,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687799286
    },
    {
        "content": "<p>Presumably it appears whenever functions are manipulated heavily, but I can't really tell quite how prevalent it is.</p>",
        "id": 369777606,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687799359
    },
    {
        "content": "<p><code>funext</code> is actually a theorem in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">**Function extensionality** is the statement that if two functions take equal values</span>\n<span class=\"sd\">every point, then the functions themselves are equal: `(∀ x, f x = g x) → f = g`.</span>\n<span class=\"sd\">It is called \"extensionality\" because it talks about how to prove two objects are equal</span>\n<span class=\"sd\">based on the properties of the object (compare with set extensionality,</span>\n<span class=\"sd\">which is `(∀ x, x ∈ s ↔ x ∈ t) → s = t`).</span>\n\n<span class=\"sd\">This is often an axiom in dependent type theory systems, because it cannot be proved</span>\n<span class=\"sd\">from the core logic alone. However in lean's type theory this follows from the existence</span>\n<span class=\"sd\">of quotient types (note the `Quot.sound` in the proof, as well as the `show` line</span>\n<span class=\"sd\">which makes use of the definitional equality `Quot.lift f h (Quot.mk x) = f x`).</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">funext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">eqv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">eqv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Quot.liftOn</span> <span class=\"n\">f</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">show</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">eqv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">eqv</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congrArg</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">Quot.sound</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 369795542,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1687803579
    },
    {
        "content": "<p>I'm aware that it's a theorem, what I mean is that I don't have things like quotients.</p>",
        "id": 369795741,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687803613
    },
    {
        "content": "<p>The lack of funext is just the thing I think is most important here.</p>",
        "id": 369795800,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687803625
    },
    {
        "content": "<p>Then I guess I didn't understand your question correctly. If you're wondering how commonly <code>funext</code> is used, Mathlib might provide some insight: <a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20funext&amp;type=code\">https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20funext&amp;type=code</a></p>",
        "id": 369796740,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1687803870
    },
    {
        "content": "<p>The thing I'm most interested in at the moment is occurrences of the definitional equality rule <code>y === z ⊢ (fun x =&gt; y) === (fun x =&gt; z)</code>, which can't be easily searched for.</p>",
        "id": 369797182,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687803972
    },
    {
        "content": "<p>My original message was probably a bit confusing, funext really isn't that relevant to my query, it just provides context.</p>",
        "id": 369797387,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804028
    },
    {
        "content": "<p>This definitional reduction rule is crucial to having any functioning notion of decidable equality over binders AFAIK. Without it, definitional equality over functions would be purely syntactical. Would you also expect decidable equality to not go over the product types' binders (<code>(x : A) -&gt; B === (x : A) -&gt; C</code> if <code>B === C</code>) ? If so, it'd mean your decidable equality only has computational meaning on neutral terms.<br>\nI've never heard of any type theory in which decidable equality doesn't go over binders, even the usual \"intensional\" theories such as MLTT and CoC  do that, and rightfully so.</p>",
        "id": 369798504,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1687804274
    },
    {
        "content": "<p>Right, that's actually kind of what I was going for. Functions in my theory have computational meaning, so I'd expect definitional equality of functions to be quite weak.</p>",
        "id": 369798913,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804366
    },
    {
        "content": "<p>What do you mean by a \"neutral\" term?</p>",
        "id": 369798933,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804370
    },
    {
        "content": "<p>Neutral terms here would mean terms that reduce to either a constant (such as a constructor or an inductive type) or an application whose head is itself a constant</p>",
        "id": 369799194,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1687804437
    },
    {
        "content": "<p>Ok, that makes sense.</p>",
        "id": 369799412,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804478
    },
    {
        "content": "<p>Furthermore, type-checking in such a theory would be absolutely tedious since product types would have such a hard time being accepted as decidably equal</p>",
        "id": 369799553,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1687804510
    },
    {
        "content": "<p>I see, and I agree that would be irritating. In which case, it might be best to have <code>B === C</code> proves <code>(x : A) -&gt; B === (x : A) -&gt; C</code>, but not have <code>y === z</code> proves <code>fun x =&gt; y === fun x =&gt; z</code>.</p>",
        "id": 369800019,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804608
    },
    {
        "content": "<p>The motivation for deleting this defeq rule doesn't apply for Pi types.</p>",
        "id": 369800090,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804624
    },
    {
        "content": "<p>I really don't know how desirable such a property would be. it would mean that <code>fun x =&gt; id x</code> would not be defeq to <code>fun x =&gt; x</code> for example</p>",
        "id": 369800273,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1687804678
    },
    {
        "content": "<p>Yes, and that's intentional.</p>",
        "id": 369800360,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804690
    },
    {
        "content": "<p>I'm really not trying to make a complicated type theory, I'm trying to model computation using types. It just happens that I need dependent types as well, so I ended up needing something like Lean's type system but weakening it to my requirements.</p>",
        "id": 369800500,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804726
    },
    {
        "content": "<p>would these two functions not have the same \"computational meaning\" in the sense of what you aim to achieve ?</p>",
        "id": 369800523,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1687804731
    },
    {
        "content": "<p>The motivating example I have is that <code>fun x =&gt; x</code> and <code>fun x =&gt; let y = &lt;big computation&gt; in x</code> should not be defeq.</p>",
        "id": 369800666,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804757
    },
    {
        "content": "<p>I don't see how to allow one but not the other.</p>",
        "id": 369800781,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Defeq.20without.20funext/near/369800273\">said</a>:</p>\n<blockquote>\n<p>I really don't know how desirable such a property would be. it would mean that <code>fun x =&gt; id x</code> would not be defeq to <code>fun x =&gt; x</code> for example</p>\n</blockquote>\n<p>going back to this, this would mean that your equality would break transitivity (and possibly confluence) here</p>",
        "id": 369800986,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1687804827
    },
    {
        "content": "<p>How does transitivity break?</p>",
        "id": 369801068,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687804850
    },
    {
        "content": "<p>hmm, my example doesn't work, i might be wrong</p>",
        "id": 369801551,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1687804965
    },
    {
        "content": "<p>My intuition is that <code>fun</code> somehow boxes expressions in an opaque way, so that only their syntactic properties are remembered. Once you evaluate a function at an input, you can talk semantics.</p>",
        "id": 369801781,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687805022
    },
    {
        "content": "<p>This aligns with how closures are actually implemented in computer hardware.</p>",
        "id": 369801858,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687805041
    },
    {
        "content": "<p>Your theory would also have to not have any eta-expansion for it to work. In the presence of eta, def-equality between <code>fun x =&gt; id x</code> and <code>fun x =&gt; x</code> can be recovered:<br>\n<code>fun x =&gt; x =β= id =η= fun x =&gt; id x</code></p>",
        "id": 369802063,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1687805085
    },
    {
        "content": "<p>That's a very nice example.</p>",
        "id": 369802269,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687805140
    },
    {
        "content": "<p>I was kinda expecting something like this to happen, but I couldn't see where.</p>",
        "id": 369802306,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687805150
    },
    {
        "content": "<p>I could just throw that rule out as well (and to be honest it does align better with computation if I do) but it seems possibly too drastic.</p>",
        "id": 369802777,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687805281
    },
    {
        "content": "<p>In any case, you've pretty much solved my original question, thanks!</p>",
        "id": 369802865,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687805298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> has marked this topic as resolved.</p>",
        "id": 369802972,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687805328
    },
    {
        "content": "<p>Do you expect things like <code>fun x =&gt; id x</code> and <code>fun x =&gt; ((fun x =&gt; x) x) </code> to not be definitionaly equal in your theory ? If so, this would break transitivity of defeq : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">id</span> <span class=\"n\">id</span> <span class=\"bp\">===</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"n\">x</span>\n    <span class=\"bp\">||</span>\n    <span class=\"bp\">||</span>\n<span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">===</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 369804439,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1687805758
    },
    {
        "content": "<p>Ooh.... that's a very interesting one.</p>",
        "id": 369805532,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687806023
    },
    {
        "content": "<p>This could be a problem, I'm not sure how I'll deal with it. The expansion of <code>id</code> to <code>fun x =&gt; x</code> feels somehow less intrusive than beta-reduction inside a binder, so maybe I could allow some weaker form of definitional equality inside binders.</p>",
        "id": 369805872,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687806107
    },
    {
        "content": "<p>But allowing any non-syntactic equality at all breaks the fact that functions are purely syntactic.</p>",
        "id": 369806059,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687806143
    },
    {
        "content": "<p>Even worse, if <code>const: A -&gt; B -&gt; A</code> is defined by <code>const x y = x</code>, then <code>const e</code> expands to <code>(fun y =&gt; e)</code> but we can do any definitional reduction of <code>e</code> on the outside and it can get pushed to the inside.</p>",
        "id": 369806918,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687806344
    },
    {
        "content": "<p>I need to rethink what equality even is in this theory. I'm probably just mixing up too many ideas.</p>",
        "id": 369808648,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687806813
    },
    {
        "content": "<p>It sounds like you care about the reduction cost of <em>some terms</em> (I don't know why it should matter whether they are inside functions or not). On the other hand, you may not care much about the cost of other terms, say functions into <code>Type</code>. That may suggest that you want to have two different kinds of terms, though that's not something I have any experience with</p>",
        "id": 369810185,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687807204
    },
    {
        "content": "<p>I think the dilemma is that I care about reduction cost of all terms, but I want to have a notion of equality that lets me prove quite a lot of things. Having two kinds of terms sounds interesting, and I'll certainly consider it.</p>",
        "id": 369812578,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687807840
    },
    {
        "content": "<p>Technically the thing I care about isn't quite reduction cost, but which variables are bound in abstractions (because I want to prove facts about when objects are no longer reachable). I feel like I don't know nearly enough theory to accurately work out solutions without just trying everything.</p>",
        "id": 369813372,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1687808012
    }
]