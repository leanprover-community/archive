[
    {
        "content": "<p>I am trying to prove <code>funext</code> by hand, using quotient types. If I understand correctly, quotient types are built in into Lean (for example I don't find <code>quotient.lift</code>anywhere), so I tried to add them by hand, as follows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">quot</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">quot.mk</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">quot</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">quot.ind</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">quot.lift</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"sd\">/-- This is built in into Lean as a definitional equality I think. -/</span>\n<span class=\"kd\">constant</span> <span class=\"n\">quot.lift_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quot.lift</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">quot.sound</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n    <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">funext</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">quot</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">quot.lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">quot.mk</span> <span class=\"n\">R</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">quot.lift_eq</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">foo_eq</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">foo_eq</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">quot.sound</span> <span class=\"n\">R</span> <span class=\"n\">H</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">talk.funext</span> <span class=\"c1\">--there is quot.sound</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">funext</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Is it possible to prove my <code>funext</code> without using Lean's <code>quotient.sound</code>? It is introduced by the <code>simp</code> in the proof of <code>foo_eq</code>, and if I try to prove it by hand I have to rewrite <code>quot.lift_eq</code> into a <code>λ</code>, something I don't know how to do without using the \"real\" funext (and maybe it is equivalent to it). I <em>think</em> that the real proof works because the <code>quot.lift_eq</code>is definitionally true, so there is no need to rewrite it.</p>",
        "id": 350294692,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1681643401
    },
    {
        "content": "<p>What axioms does Lean's actual funext use?</p>",
        "id": 350295826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681643918
    },
    {
        "content": "<p>quotients and propext IIRC</p>",
        "id": 350297358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681644626
    },
    {
        "content": "<p>lean says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">funext'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"kd\">axioms</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Quot.sound</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 350297413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681644659
    },
    {
        "content": "<p>Yes, Lean's <a href=\"https://github.com/leanprover-community/lean/blob/855e5b74e3a52a40552e8f067169d747d48743fd/library/init/funext.lean#L60\">proof</a> is essentially the same as my proof, but the two <code>rw [← foo_eq f, ← foo_eq g]</code> are done using <code>show ... from ...</code>. In particular no axiom is used here.</p>",
        "id": 350298709,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1681645309
    },
    {
        "content": "<p>I mean, no axiom that is literally written somewhere in the library.</p>",
        "id": 350298817,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1681645370
    },
    {
        "content": "<p>yes, I'm pretty sure this use is essential</p>",
        "id": 350298831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681645382
    },
    {
        "content": "<p>without it you get \"propositional quotients\", which are most easily done the way it is done in math class, taking the set of equivalence classes</p>",
        "id": 350298885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681645427
    },
    {
        "content": "<p>and this construction requires propext and funext</p>",
        "id": 350298956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681645446
    },
    {
        "content": "<p>BTW not sure if you saw it but lean 4 has a much shorter and documented version of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">**Function extensionality** is the statement that if two functions take equal values</span>\n<span class=\"sd\">every point, then the functions themselves are equal: `(∀ x, f x = g x) → f = g`.</span>\n<span class=\"sd\">It is called \"extensionality\" because it talks about how to prove two objects are equal</span>\n<span class=\"sd\">based on the properties of the object (compare with set extensionality,</span>\n<span class=\"sd\">which is `(∀ x, x ∈ s ↔ x ∈ t) → s = t`).</span>\n\n<span class=\"sd\">This is often an axiom in dependent type theory systems, because it cannot be proved</span>\n<span class=\"sd\">from the core logic alone. However in lean's type theory this follows from the existence</span>\n<span class=\"sd\">of quotient types (note the `Quot.sound` in the proof, as well as the `show` line</span>\n<span class=\"sd\">which makes use of the definitional equality `Quot.lift f h (Quot.mk x) = f x`).</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">funext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">eqv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">eqv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Quot.liftOn</span> <span class=\"n\">f</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">show</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">eqv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">eqv</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congrArg</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">Quot.sound</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 350299156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681645562
    },
    {
        "content": "<p>Oh, nice! Thanks</p>",
        "id": 350299250,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1681645599
    }
]