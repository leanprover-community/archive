[
    {
        "content": "<p>Hi, while trying to break Lean, I found some inconsistencies with regards to the reduction of <code>Prop</code>-recursors. I have come to understand that such recursors simply don't reduce, in order to avoid an undecidable type-checking due to i.e the elimination of <code>Acc</code>. In practice however, the reduction of such recursors seems inconsistent ? See, in the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tautext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">Iff.intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">True'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">delta</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"bp\">→</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z</span> <span class=\"n\">_</span>  <span class=\"n\">id</span> <span class=\"n\">z</span>\n<span class=\"kd\">def</span> <span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">tautext</span> <span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">delta</span>\n<span class=\"kd\">def</span> <span class=\"n\">Omega</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"n\">delta</span> <span class=\"n\">omega</span> <span class=\"c1\">--non-terminating term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--recursor reduces here</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Omega</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩)</span> <span class=\"c1\">--infinite recursion, maxRecDepth error</span>\n\n<span class=\"c1\">--despite that, a type mismatch error still appears instead of an infinite loop during defeq</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Omega</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Here,<code>And.rec</code> reduces, and even leads to an infinite reduction thanks to <code>Omega</code>. However, when checking for definitional equality, the term doesn't get reduced.</p>\n<p>Weirdly enough, if I add an implicit binder to <code>True'</code>'s forall, reduction doesn't trigger on <code>f (@Omega _ ⟨.intro,.intro⟩) </code>, as one would expect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tautext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">Iff.intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">True'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"c1\">-- A is now implicit, only change made here</span>\n<span class=\"kd\">def</span> <span class=\"n\">delta</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"bp\">→</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z</span>  <span class=\"n\">id</span> <span class=\"n\">z</span>\n<span class=\"kd\">def</span> <span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">tautext</span> <span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">delta</span>\n<span class=\"kd\">def</span> <span class=\"n\">Omega</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"n\">delta</span> <span class=\"n\">omega</span> <span class=\"c1\">--non-terminating term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Omega</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩)</span> <span class=\"c1\">-- And.rec (fun x x =&gt; 1) (_ : True ∧ True)</span>\n</code></pre></div>\n<p>Any idea what's going on here ?</p>",
        "id": 401508130,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1699706166
    },
    {
        "content": "<p>Nevermind, it turns out that <code>#reduce</code> tries to do a full normal form, thus reducing <code>Omega _ ⟨.intro,.intro⟩</code> even though the recursor doesn't reduce, though i'm still confused as to why <code>f ⟨.intro,.intro⟩ = 1 := rfl</code>would type-check here.</p>",
        "id": 401511548,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1699709456
    },
    {
        "content": "<p>I don't think anything other than <code>#reduce</code> reduces proofs. <code>And.rec f h</code> reduces to <code>f h.1 h.2</code> by eta for structures IIRC</p>",
        "id": 401587752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699773994
    },
    {
        "content": "<p>As discussed <a href=\"#narrow/stream/236446-Type-theory/topic/And.2Erec/near/398509043\">here</a>, eta for structures isn't triggered during the reduction of recursors that are in <code>Prop</code>, so I believe this isn't supposed to type-check, even though it does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--works</span>\n</code></pre></div>\n<p>Furthermore, I have found what I believe to be an inconsistency between the kernel reduction in the kernel and the elaborator. It's nothing dangerous, but it shows (to me) that reduction with Prop-recursors can have inconsistent behaviours:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">whnfKernel</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n    <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n    <span class=\"k\">match</span> <span class=\"n\">Kernel.whnf</span> <span class=\"n\">env</span> <span class=\"n\">lctx</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwKernelException</span> <span class=\"n\">e</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#whnf\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"n\">t</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n <span class=\"n\">logInfo</span> <span class=\"n\">t</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#whnf_kernel\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">whnfKernel</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"n\">t</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n <span class=\"n\">logInfo</span> <span class=\"n\">t</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">tautext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">Iff.intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">True'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">delta</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"bp\">→</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z</span> <span class=\"n\">_</span>  <span class=\"n\">id</span> <span class=\"n\">z</span>\n<span class=\"kd\">def</span> <span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">tautext</span> <span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">delta</span>\n<span class=\"kd\">def</span> <span class=\"n\">Omega</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"n\">delta</span> <span class=\"n\">omega</span> <span class=\"c1\">--non-terminating term</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--recursor reduces here</span>\n\n<span class=\"bp\">#</span><span class=\"n\">whnf</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩)</span>\n<span class=\"bp\">#</span><span class=\"n\">whnf</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Omega</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩)</span> <span class=\"c1\">--doesn't reduce</span>\n<span class=\"bp\">#</span><span class=\"n\">whnf_kernel</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Omega</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩)</span> <span class=\"c1\">--infinite loop</span>\n</code></pre></div>\n<p>Knowing that the kernel's <code>isDefEq</code> may be called instead of the elaborator's in certain cases for proofs by reflection, perhaps it would be best to have consistent results between the two.</p>",
        "id": 401593148,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1699779325
    },
    {
        "content": "<p>Because of this, conversion is still undecidable, at least in the kernel, and I believe it would be possible to make this leak out in the elaborator thanks to proofs by reflection:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#is_def_eq_kernel\"</span> <span class=\"n\">t₁</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">t₂</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"#\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n <span class=\"k\">let</span> <span class=\"n\">t₁</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"n\">t₁</span> <span class=\"n\">none</span>\n <span class=\"k\">let</span> <span class=\"n\">t₂</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"n\">t₂</span> <span class=\"n\">none</span>\n <span class=\"k\">let</span> <span class=\"n\">isDefEq</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEqKernel</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span>\n <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{isDefEq}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">is_def_eq_kernel</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Omega</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩))</span> <span class=\"bp\">#</span> <span class=\"mi\">1</span> <span class=\"bp\">#</span> <span class=\"c1\">--infinite loop</span>\n</code></pre></div>",
        "id": 401593768,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1699779738
    },
    {
        "content": "<p>Here is Lean looping indefinitely at the elaborator level:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tautext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">Iff.intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">True'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">delta</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"bp\">→</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z</span> <span class=\"n\">_</span>  <span class=\"n\">id</span> <span class=\"n\">z</span>\n<span class=\"kd\">def</span> <span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">tautext</span> <span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">delta</span>\n<span class=\"kd\">def</span> <span class=\"n\">Omega</span> <span class=\"o\">:</span> <span class=\"n\">True'</span> <span class=\"o\">:=</span> <span class=\"n\">delta</span> <span class=\"n\">omega</span> <span class=\"c1\">--non-terminating term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--recursor reduces here</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Omega</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">⟩))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">--infinite loop</span>\n</code></pre></div>\n<p>This happens because the <code>rfl</code> tactic uses the kernel's <code>isDefEq</code> when checking the conversion of two closed terms with no metavariables (<a href=\"https://github.com/leanprover/lean4/blob/8cfcf7ce61bba328ed57d97bb12cf1a0fc40a0b9/src/Lean/Meta/Tactic/Refl.lean#L30\">link</a>)</p>",
        "id": 401594490,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1699780018
    },
    {
        "content": "<p>Here is another one in Lean 3: <a href=\"https://github.com/leanprover-community/lean/pull/91\">lean#91</a></p>",
        "id": 401635561,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1699817862
    }
]