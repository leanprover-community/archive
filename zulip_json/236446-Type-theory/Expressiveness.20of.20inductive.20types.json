[
    {
        "content": "<p>Lean has a very expressive type theory using inductive types. Suppose that Lean instead didn't have inductive types, but just supported algebraic types, with the sole addition of <code>subtype</code> (using Lean 3 names for things out of familiarity). Does this strictly weaken Lean's expressive power, or is there a way to simulate inductive types just using algebraic types and a subtype operation?</p>\n<p>My instinct is that there are certain things that would become impossible to address - <code>quiver.path</code> is one that comes to mind. With this example in mind, I wonder if algebraic types + <code>subtype</code> + inductive <code>Prop</code>s is equivalent to full inductive types? One could inductively define a proposition on lists saying whether it represents a path between two objects in a quiver, and use a subtype.</p>",
        "id": 355267475,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1683062303
    },
    {
        "content": "<p>I think the claim I remember hearing before is that you only need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/W_type\">docs#W_type</a> and maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unit\">docs#unit</a>/docs#empty to build all other inductive types</p>",
        "id": 355267623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683062383
    },
    {
        "content": "<p>I have a chapter in <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> dedicated to the reduction to W types. The short answer is that yes you can reduce all inductive types to 8 specific inductive types: <code>Sum</code>, <code>Sigma</code>, <code>False</code>, (basic algebraic types), <code>ULift</code> (for inductives in a higher universe), <code>W</code> (general inductives), <code>Nonempty</code> (for making small-eliminating props), <code>Acc</code> (large eliminating props), <code>Eq</code> (K-like inductives)</p>",
        "id": 355295286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683077123
    },
    {
        "content": "<p>Thank you both, that's perfect!</p>",
        "id": 355346889,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1683099661
    },
    {
        "content": "<p>Is that without choice/LEM?</p>",
        "id": 355414277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683115461
    },
    {
        "content": "<p>With LEM (but not choice) you can also construct W types (at least the non-indexed ones, but probably indexed ones are okay too) from the other things you listed plus <code>Nat</code>, (I am assuming subtypes are included under <code>Sigma</code>), and Pi types</p>",
        "id": 355414936,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683115626
    },
    {
        "content": "<p>for instance <code>Option A</code> = <code>Sum Unit A</code></p>",
        "id": 355415347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683115710
    },
    {
        "content": "<p>then <code>List A</code> = functions <code>f : Nat -&gt; Option A</code> such that if <code>f n = None</code>, then also <code>f (n+1) = None</code></p>",
        "id": 355415437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683115738
    },
    {
        "content": "<p>this also works for other W types, including infinitary ones, though it's considerably less obvious</p>",
        "id": 355415566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683115778
    },
    {
        "content": "<p>Where do you need LEM?</p>",
        "id": 355416040,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1683115884
    },
    {
        "content": "<p>I guess maybe this is somewhat orthogonal to the original question.</p>",
        "id": 355416041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683115884
    },
    {
        "content": "<p>Indeed I don't need it for <code>List</code> but I think I will need it in the infinitary case.</p>",
        "id": 355416367,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683115957
    },
    {
        "content": "<p>Or I could be misremembering at what point it is needed</p>",
        "id": 355416442,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683115976
    },
    {
        "content": "<p>In most maths you don't use inductives other than list or nat anyway. I actually checked which inductive Types whose induction principle had an induction hypothesis in the liquid tensor experiment and it was list, nat and something about colimits of abelian groups. I can't think of a single infinitely branching inductive in mathlib.</p>",
        "id": 355419729,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1683116657
    },
    {
        "content": "<p>Lol, nice little fact. TIL!</p>",
        "id": 355420027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683116723
    },
    {
        "content": "<p>OK, actually you don't need LEM for what I said either.</p>",
        "id": 355421076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683116947
    },
    {
        "content": "<p>How about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_space.generate_measurable\">docs#measurable_space.generate_measurable</a></p>",
        "id": 355422116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683117184
    },
    {
        "content": "<p>Of course, since it is an inductive predicate it could also have been defined another way.</p>",
        "id": 355422235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683117217
    },
    {
        "content": "<p>I think Sebastien had a more serious example somewhere in the Gromov-Hausdorff distance stuff</p>",
        "id": 355422475,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683117264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Expressiveness.20of.20inductive.20types/near/355414277\">said</a>:</p>\n<blockquote>\n<p>Is that without choice/LEM?</p>\n</blockquote>\n<p>Yes, the reduction does not use any axioms, although I think it does depend on proof irrelevance, at least the way I stated it</p>",
        "id": 355456414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683123182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Expressiveness.20of.20inductive.20types/near/355422116\">said</a>:</p>\n<blockquote>\n<p>How about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_space.generate_measurable\">docs#measurable_space.generate_measurable</a></p>\n</blockquote>\n<p>I can see how this might be implemented with W types and a predicate, but I don't see how you could express this using Pi types. I'm also not quite sure what you mean about LEM/choice - where would that need to be applied?</p>",
        "id": 355621428,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1683154552
    },
    {
        "content": "<p>It's the potentially-unbounded recursion that I can't see how to encode without doing something weird like assigning a well-founded dependence relation on the set of all sets you use to construct your given measurable set.</p>",
        "id": 355621776,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1683154775
    },
    {
        "content": "<p>Here's a worked example for <code>GenerateMeasurable</code>, which reduces the type to primitives in four stages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.MeasurableSpaceDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.W.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MeasurableSpace</span>\n\n<span class=\"c1\">-- Original:</span>\n<span class=\"c1\">-- inductive GenerateMeasurable (s : Set (Set α)) : Set α → Prop</span>\n<span class=\"c1\">--   | protected basic : ∀ u ∈ s, GenerateMeasurable s u</span>\n<span class=\"c1\">--   | protected empty : GenerateMeasurable s ∅</span>\n<span class=\"c1\">--   | protected compl : ∀ t, GenerateMeasurable s t → GenerateMeasurable s (tᶜ)</span>\n<span class=\"c1\">--   | protected unionᵢ : ∀ f : ℕ → Set α, (∀ n, GenerateMeasurable s (f n)) →</span>\n<span class=\"c1\">--       GenerateMeasurable s (⋃ i, f i)</span>\n\n<span class=\"c1\">-- Step 1: apply propositional truncation to an inductive in Type</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">GenerateMeasurable1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable1</span> <span class=\"n\">s</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">GenerateMeasurable1</span> <span class=\"n\">s</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable1</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">GenerateMeasurable1</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable1</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n      <span class=\"n\">GenerateMeasurable1</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">GenerateMeasurable1</span> <span class=\"n\">s</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Step 2 (translate inductive families by defining a skeleton type + predicate)</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">GenerateMeasurable2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable2</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">GenerateMeasurable2</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable2</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">GenerateMeasurable2</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">_f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">_n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable2</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">GenerateMeasurable2</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GenerateMeasurable2.good</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n    <span class=\"n\">GenerateMeasurable2</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">u</span> <span class=\"n\">_h</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">empty</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">t</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">ih.good</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"n\">f</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GenerateMeasurable1'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">GenerateMeasurable2</span> <span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">x.good</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- Step 3 (translate simple inductive types to W types)</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">GenerateMeasurable3Dom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable3Dom</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">GenerateMeasurable3Dom</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable3Dom</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable3Dom</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GenerateMeasurable3Dom.branch</span> <span class=\"o\">:</span> <span class=\"n\">GenerateMeasurable3Dom</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GenerateMeasurable2'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">WType</span> <span class=\"o\">(</span><span class=\"n\">GenerateMeasurable3Dom</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">GenerateMeasurable3Dom.branch</span>\n\n<span class=\"c1\">-- Step 4 (translate nonrecursive inductive types to primitives)</span>\n<span class=\"kd\">def</span> <span class=\"n\">GenerateMeasurable3Dom'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span>\n  <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span>\n  <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span>\n  <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 355629947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683160047
    },
    {
        "content": "<p>And here's an end to end proof of equivalence. I take back what I said, the proof does require choice to prove that the inductive in Prop is equivalent to the truncation of an inductive in Type. I think you would need a <code>PropW</code> type to avoid this dependency.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.MeasurableSpaceDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.W.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MeasurableSpace</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">t.compl</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n      <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Dom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Dom.branch</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Base</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">WType</span> <span class=\"o\">(</span><span class=\"n\">Dom.branch</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Base.good</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Base</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">)),</span> <span class=\"n\">ih</span><span class=\"o\">⟩,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">t.compl</span> <span class=\"bp\">∧</span> <span class=\"n\">good</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">())</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">)),</span> <span class=\"n\">ih</span><span class=\"o\">⟩,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">good</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Main</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Base</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b.good</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ltr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Base</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">b.good</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">u</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">empty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ltr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ltr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rtl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Main</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">u</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"k\">fun</span><span class=\"bp\">.</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">()),</span> <span class=\"k\">fun</span><span class=\"bp\">.</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">⟨⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">)),</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">rtl</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rtl</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"n\">f</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">⟨⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">)),</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">rtl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">rtl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_equiv</span> <span class=\"o\">:</span> <span class=\"n\">Main</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ltr</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rtl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 355634433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683162566
    },
    {
        "content": "<p>Here's a version of the reduction to the indexed version of W (which I wanted to avoid in the original paper), which does not need choice for the equivalence proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.MeasurableSpaceDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.W.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MeasurableSpace</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">compl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">t.compl</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n      <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">PropW</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">PropW</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">PropW</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Dom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Dom.branch</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Dom.target</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t.compl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Dom.dep</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a.branch</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">)),</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">)),</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Main</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PropW</span> <span class=\"o\">(</span><span class=\"n\">Dom</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">Dom.branch</span> <span class=\"n\">Dom.dep</span> <span class=\"n\">Dom.target</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_equiv</span> <span class=\"o\">:</span> <span class=\"n\">Main</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rtl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">u</span> <span class=\"n\">h</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">empty</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">())</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ih</span> <span class=\"n\">n</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">rtl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">GenerateMeasurable'</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Main</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">u</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"k\">fun</span><span class=\"bp\">.</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">())</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"k\">fun</span><span class=\"bp\">.</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">compl</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rtl</span> <span class=\"n\">_</span> <span class=\"n\">ih</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"n\">f</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rtl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">n</span><span class=\"o\">)⟩</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">is_equiv</span>\n<span class=\"c1\">-- 'MeasurableSpace.is_equiv' does not depend on any axioms</span>\n</code></pre></div>",
        "id": 355637292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683164499
    },
    {
        "content": "<p>This issue only arises for small-eliminating Prop families, so there is some hope of an alternative implementation using impredicativity, by simply defining it as the intersection of all relations closed under the constructors. (This is the standard mathematical definition for such predicates.)</p>",
        "id": 355637451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683164626
    },
    {
        "content": "<p>Here's a proof that the <code>PropW</code> inductive type above can be defined without inductive types at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">PropW</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">PropW</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">PropW</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PropW'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_equiv</span> <span class=\"o\">:</span> <span class=\"n\">PropW</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"bp\">↔</span> <span class=\"n\">PropW'</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">R</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">⟩</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">IH</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">is_equiv</span> <span class=\"c1\">-- 'is_equiv' does not depend on any axioms</span>\n</code></pre></div>",
        "id": 355639659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683166052
    },
    {
        "content": "<p>Thanks for this detailed example - I'll work through it later!</p>",
        "id": 355769287,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1683205797
    }
]