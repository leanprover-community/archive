[
    {
        "content": "<p>My current inductive definition of a term can produce ill-formed terms, for example if <code>A : type</code> is a type that is not <code>Ω</code> , then <code>all A (var 0 Ω)</code> is trying to bind an <code>Ω</code> variable to a <code>A</code> type binder.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">One</span> <span class=\"bp\">|</span> <span class=\"n\">Omega</span> <span class=\"bp\">|</span> <span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"n\">Pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">Ω</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"mi\">𝟙</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">One</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`××`</span> <span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Prod</span>\n<span class=\"kn\">prefix</span> <span class=\"err\">𝒫</span> <span class=\"o\">:</span><span class=\"mi\">101</span> <span class=\"o\">:=</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Pow</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>  <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"mi\">𝟙</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">××</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"err\">𝒫</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"err\">𝒫</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>   <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">ex</span>   <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n</code></pre></div>\n\n\n<p>I'm guessing in Lean you cannot enforce conditions on the creation of inductive terms (like trying to say you can only make an <code>all A φ</code> expression  if <code>φ</code> has only <code>var 0 A</code> and no <code>var 0 B</code>).</p>\n<p>My next best idea is introducing the context on terms which is a mapping of free variables to types. Here's my start on that, though I am not that familiar with using <code>fin</code>. Should I use array, vector, list? Or is there a more direct approach to only creating well-defined terms?</p>",
        "id": 195563859,
        "sender_full_name": "Billy Price",
        "timestamp": 1588080605
    },
    {
        "content": "<p>I guess what I would like to be able to say is that a variable can be any term, and it's really only defined by its number, and when we bind it to a binder, it then has an associated type.</p>",
        "id": 195564055,
        "sender_full_name": "Billy Price",
        "timestamp": 1588080688
    },
    {
        "content": "<blockquote>\n<p>I'm guessing in Lean you cannot enforce conditions on the creation of inductive terms (like trying to say you can only make an all A φ expression if φ has only var 0 A and no var 0 B).</p>\n</blockquote>\n<p>You can, but it's a pain because you are still in the middle of the definition so you can't easily use recursive functions at the same time</p>",
        "id": 195564501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588080845
    },
    {
        "content": "<p>I would recommend keeping the term syntax as context free as possible, and have a well typing condition afterward that can have whatever dependencies it wants</p>",
        "id": 195564583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588080894
    },
    {
        "content": "<p>Hmm okay I'll take your advice. I was looking at flypitch documentation and they seem to do without a well-formedness predicate. Is that just because their terms are all the same type?</p>",
        "id": 195565429,
        "sender_full_name": "Billy Price",
        "timestamp": 1588081296
    },
    {
        "content": "<p>It's easier for them because it's only one type, yes. You end up having to carry around a lot of \"type state\" in real type theories, and it becomes hard to get all the definitional equalities you want</p>",
        "id": 195565908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081548
    },
    {
        "content": "<p>But they have a clearly distinct step for proofs, which I think should be the analogue of type checking for you</p>",
        "id": 195566085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588081613
    },
    {
        "content": "<p>Sorry what step are you referring to?</p>",
        "id": 195566880,
        "sender_full_name": "Billy Price",
        "timestamp": 1588081961
    },
    {
        "content": "<p>step in the construction</p>",
        "id": 195567152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588082069
    },
    {
        "content": "<p>I would separate the grammar from the syntax rules</p>",
        "id": 195567199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588082098
    },
    {
        "content": "<p>If you want terms that embed typing information, so that only well-typed terms can be constructed, the usual approach is to index it not only by a type, but also by a context containing the types of free variables. Thus, you would have something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">One</span> <span class=\"bp\">|</span> <span class=\"n\">Omega</span> <span class=\"bp\">|</span> <span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"n\">Pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">Fun</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">type</span>\n\n<span class=\"n\">def</span> <span class=\"kn\">context</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">type</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var0</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">varsucc</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"err\">Γ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">β</span>\n\n<span class=\"c1\">-- This is the simply-typed lambda calculus with a unit type and products.</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"err\">Γ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">One</span>\n</code></pre></div>\n\n\n<p>This approach works fine and makes the development a little easier if (a) you don't have dependencies in your types (but I guess your <code>all</code> and <code>ex</code> are supposed to be quantifiers?) and (b) Lean properly supports indexed families (which I don't know). Mario's suggested approach -- keeping the syntax simple and putting a type predicate on top -- requires some additional boilerplate, but has the distinct advantage that it'll work regardless of what object theory you want to encode.</p>",
        "id": 195567247,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588082125
    },
    {
        "content": "<p>Lean's support for indexed families is fine</p>",
        "id": 195567396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588082187
    },
    {
        "content": "<p>mutual is not fine</p>",
        "id": 195567406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588082194
    },
    {
        "content": "<p>While I agree with you up to a point, I find that once you get down to proving theorems about these terms, you might want to e.g. prove something by induction on the context from the other end, and then it enters DTT hell</p>",
        "id": 195567538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588082256
    },
    {
        "content": "<p>Yeah I'm a little turned off by the fact that my sequents will also have a context, and I'd have to marry them properly.</p>",
        "id": 195568076,
        "sender_full_name": "Billy Price",
        "timestamp": 1588082488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I can see how that proof might be tricky. I've also become more skeptical of intrinsically typed syntax lately -- it's nice when it works, but when it breaks, it sure breaks.</p>",
        "id": 195568381,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588082614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255481\">@Billy Price</span> I don't know exactly what your sequents look like, but you will probably have two contexts, one for the types and one for the hypotheses (as is customary in HOL)</p>",
        "id": 195568805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588082780
    },
    {
        "content": "<p>the hypotheses are nondependent so it's not such a big deal</p>",
        "id": 195568843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588082795
    },
    {
        "content": "<p>The hypotheses in my sequents are just a single <code>term Ω</code>.</p>",
        "id": 195569469,
        "sender_full_name": "Billy Price",
        "timestamp": 1588083066
    },
    {
        "content": "<p>I'm having a little trouble stating the well-foundedness condition - am I on the right track?</p>\n<p>It also seems like there's two level's of well-foundedness - that every bound variable has the correct type, and that any free variables can be bound to a single type.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">FV_have_type</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"bp\">=</span><span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">Z</span><span class=\"bp\">=</span><span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV_have_type</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">FV_have_type</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">FV_have_type</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">φ</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"err\">⁎</span>          <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"n\">top</span>        <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"n\">bot</span>        <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">α</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span><span class=\"err\">&#39;</span> <span class=\"n\">q</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span><span class=\"err\">&#39;</span> <span class=\"n\">q</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">⟹</span> <span class=\"n\">q</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">FV_have_type</span> <span class=\"n\">v</span> <span class=\"n\">q</span>\n\n<span class=\"n\">def</span> <span class=\"n\">well_formed</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 195574629,
        "sender_full_name": "Billy Price",
        "timestamp": 1588085208
    },
    {
        "content": "<p>Do you mean <code>v = n -&gt; Z = A</code>? in other words saying that all occurrences of variable <code>n</code> are used at type <code>Z</code>?</p>",
        "id": 195574849,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588085313
    },
    {
        "content": "<p>Ah yes</p>",
        "id": 195575132,
        "sender_full_name": "Billy Price",
        "timestamp": 1588085454
    },
    {
        "content": "<p>I think it isn't the traditional presentation, but I'm pretty sure it is better to only have the notion \"<code>φ : term A</code> is well-formed in <code>Γ : context</code>\"</p>",
        "id": 195576900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588086142
    },
    {
        "content": "<p>rather than having only <code>term</code>s with no context and trying to guess the free variables and their types by inspecting the term</p>",
        "id": 195577003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588086189
    },
    {
        "content": "<p>I started working on a calculus of constructions in Lean à few weeks ago, maybe you find it helpful: <a href=\"https://github.com/anfelor/coc-lean\" title=\"https://github.com/anfelor/coc-lean\">https://github.com/anfelor/coc-lean</a> Feel free to contact me if you have any questions.</p>",
        "id": 195665323,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1588141494
    },
    {
        "content": "<p>Awesome! thanks I'll take a look</p>",
        "id": 195698879,
        "sender_full_name": "Billy Price",
        "timestamp": 1588162497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> WF means the types of the free variables of <code>term A</code> match the context.</p>",
        "id": 195709049,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167249
    },
    {
        "content": "<p>More specifically?</p>",
        "id": 195709072,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588167258
    },
    {
        "content": "<p>What is the English translation of what you wrote?</p>",
        "id": 195709096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588167268
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>  <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"err\">Γ</span> <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"err\">Ω</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>  <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"err\">Ω</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>  <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"err\">Ω</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195709139,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167292
    },
    {
        "content": "<p>Hang on let me paste my term definition</p>",
        "id": 195709173,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167304
    },
    {
        "content": "<p>Also that WF definition is incomplete, there are more terms but they are less interesting to WF</p>",
        "id": 195709219,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255481\">Billy Price</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195563859\" title=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195563859\">said</a>:</p>\n<blockquote>\n<p>My current inductive definition of a term can produce ill-formed terms, for example if <code>A : type</code> is a type that is not <code>Ω</code> , then <code>all A (var 0 Ω)</code> is trying to bind an <code>Ω</code> variable to a <code>A</code> type binder.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">One</span> <span class=\"bp\">|</span> <span class=\"n\">Omega</span> <span class=\"bp\">|</span> <span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"n\">Pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">Ω</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"mi\">𝟙</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">One</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`××`</span> <span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Prod</span>\n<span class=\"kn\">prefix</span> <span class=\"err\">𝒫</span> <span class=\"o\">:</span><span class=\"mi\">101</span> <span class=\"o\">:=</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Pow</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>  <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"mi\">𝟙</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">××</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"err\">𝒫</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"err\">𝒫</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>   <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">ex</span>   <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span>\n</code></pre></div>\n\n\n<p>I'm guessing in Lean you cannot enforce conditions on the creation of inductive terms (like trying to say you can only make an <code>all A φ</code> expression  if <code>φ</code> has only <code>var 0 A</code> and no <code>var 0 B</code>).</p>\n<p>My next best idea is introducing the context on terms which is a mapping of free variables to types. Here's my start on that, though I am not that familiar with using <code>fin</code>. Should I use array, vector, list? Or is there a more direct approach to only creating well-defined terms?</p>\n</blockquote>",
        "id": 195709304,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167362
    },
    {
        "content": "<p>Say the context is empty but you have a variable. Is that well-formed?</p>",
        "id": 195709460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588167440
    },
    {
        "content": "<p>Ah sorry I just realised it was you I was discussing this with earlier. I'm not sure specifically what I should clarify more about <code>WF</code>, given the definition there</p>",
        "id": 195709467,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167447
    },
    {
        "content": "<p>Inductively defined propositions:</p>\n<ol>\n<li><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions\">TPIL</a></li>\n<li><a href=\"https://www.codewars.com/kata/5cc47f8c4b8fea001de6d226\" title=\"https://www.codewars.com/kata/5cc47f8c4b8fea001de6d226\">Codewars: Multiples of 3, you say?</a></li>\n<li><a href=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569\" title=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569\">Codewars: Times Three, Plus Five</a></li>\n</ol>",
        "id": 195709613,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588167495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Yeah I thought about that and I'm not sure how to fix that. For my use I think I can just allow those terms to exist?</p>",
        "id": 195709755,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Even though I use the keyword <code>def</code>, I'm still defining it inductively on the inductive type <code>term A</code> right?</p>",
        "id": 195710127,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167718
    },
    {
        "content": "<p>yes, but <code>inductive</code> might be better for this case</p>",
        "id": 195710205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588167741
    },
    {
        "content": "<p>Hmm, is that because it allows me to name the axioms for well-formedness on each of the term A's? I'm not sure I see the difference/benefit.</p>",
        "id": 195710496,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167882
    },
    {
        "content": "<p>it allows you to \"inject\" things</p>",
        "id": 195710600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588167938
    },
    {
        "content": "<p>and you don't need to go through every case</p>",
        "id": 195710631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588167956
    },
    {
        "content": "<p>(cases you haven't gone through are automatically \"false\")</p>",
        "id": 195710684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588167966
    },
    {
        "content": "<p>I'm pretty sure Reid is hinting at this, but more directly: you don't want <code>∀ a : n &lt; Γ.length, (Γ.nth_le n a = A)</code>, you want <code>∃ a : n &lt; Γ.length, (Γ.nth_le n a = A)</code>. The former says that either the type is correct or it's out of range, while the latter says that it is in range and the type is correct. Better yet, skip the hypothesis and use <code>Γ.nth n = some A</code></p>",
        "id": 195711420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588168249
    },
    {
        "content": "<p>Beautiful, thank you.</p>",
        "id": 195711855,
        "sender_full_name": "Billy Price",
        "timestamp": 1588168398
    },
    {
        "content": "<p>Here's what I've got now (it compiles). I'm still not understanding the suggestion to use <code>inductive</code>. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>  <span class=\"o\">:=</span> <span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"err\">Γ</span> <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"err\">Ω</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>   <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"err\">Ω</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>   <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"err\">Ω</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Γ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"err\">⁎</span> <span class=\"err\">Γ</span>          <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">top</span> <span class=\"err\">Γ</span>        <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">bot</span> <span class=\"err\">Γ</span>        <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">Γ</span> <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"err\">Γ</span> <span class=\"bp\">∧</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"err\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>    <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"err\">Γ</span> <span class=\"bp\">∧</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">α</span> <span class=\"err\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span><span class=\"err\">&#39;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>   <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">p</span> <span class=\"err\">Γ</span> <span class=\"bp\">∧</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">q</span> <span class=\"err\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span><span class=\"err\">&#39;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>   <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">p</span> <span class=\"err\">Γ</span> <span class=\"bp\">∧</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">q</span> <span class=\"err\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">⟹</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>  <span class=\"o\">:=</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">p</span> <span class=\"err\">Γ</span> <span class=\"bp\">∧</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"n\">q</span> <span class=\"err\">Γ</span>\n</code></pre></div>",
        "id": 195713258,
        "sender_full_name": "Billy Price",
        "timestamp": 1588168901
    },
    {
        "content": "<p>Surely if I use inductive, I can only talking about creating un-named elements of <code>Prop</code>, and I can't actually define which proposition they are right?</p>",
        "id": 195715381,
        "sender_full_name": "Billy Price",
        "timestamp": 1588169605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195709613\" title=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195709613\">said</a>:</p>\n<blockquote>\n<p>Inductively defined propositions:</p>\n<ol>\n<li><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions\">TPIL</a></li>\n<li><a href=\"https://www.codewars.com/kata/5cc47f8c4b8fea001de6d226\" title=\"https://www.codewars.com/kata/5cc47f8c4b8fea001de6d226\">Codewars: Multiples of 3, you say?</a></li>\n<li><a href=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569\" title=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569\">Codewars: Times Three, Plus Five</a></li>\n</ol>\n</blockquote>",
        "id": 195715636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588169700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255481\">Billy Price</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195710496\" title=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195710496\">said</a>:</p>\n<blockquote>\n<p>Hmm, is that because it allows me to name the axioms for well-formedness on each of the term A's? I'm not sure I see the difference/benefit.</p>\n</blockquote>\n<p>Benefits of an inductive type for well-formedness (or any similar predicate):</p>\n<ul>\n<li>You can do \"rule induction\", i.e. induction on the derivation of a well-formedness proof. If you define the predicate by recursion over terms instead, you can't directly eliminate a hypothesis <code>WF t</code>; you'll have to eliminate <code>t</code> first until the <code>WF</code> reduces. (In your case, there's little difference in this regard because the structure of your well-formedness predicate is very close to the structure of your terms.)</li>\n<li>Recursive definitions must pass the termination checker; inductive definitions are generally more liberal. (Also not a concern in your case because you don't need a complicated recursive structure.)</li>\n<li>Lean may make the recursive definition extra cumbersome to use because it's picky about reducing definitional equalities (though that might not be a problem in practice; I haven't experimented with this). Maybe mark the <code>WF</code> def as <code>@[reducible]</code>.</li>\n</ul>\n<p>Benefits of a recursive definition of well-formedness:</p>\n<ul>\n<li>It may be a little clearer what's going on I guess?</li>\n</ul>\n<p><span class=\"user-mention silent\" data-user-id=\"255481\">Billy Price</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195715381\" title=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195715381\">said</a>:</p>\n<blockquote>\n<p>Surely if I use inductive, I can only talking about creating un-named elements of <code>Prop</code>, and I can't actually define which proposition they are right?</p>\n</blockquote>\n<p>Sorry, I don't understand your concern; could you rephrase?</p>",
        "id": 195715726,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1588169744
    },
    {
        "content": "<p>Hmm, I'm feeling pretty confused. I definitely need to go back an practice more basic lean.</p>",
        "id": 195717605,
        "sender_full_name": "Billy Price",
        "timestamp": 1588170531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  thanks for the resource, I think I understand it in that context but I'm struggling to translate to my case.</p>",
        "id": 195718293,
        "sender_full_name": "Billy Price",
        "timestamp": 1588170772
    },
    {
        "content": "<p>Think of it in terms of what rules build up well-formed formulas into bigger ones, rather than how do you break down a formula to check whether it is well-formed.</p>",
        "id": 195718415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588170823
    },
    {
        "content": "<p>Actually, it's exactly like an inductive type except it's a proposition.</p>",
        "id": 195718440,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588170831
    },
    {
        "content": "<p>Hmm - aren't I then just redefining <code>term A</code>?</p>",
        "id": 195718538,
        "sender_full_name": "Billy Price",
        "timestamp": 1588170854
    },
    {
        "content": "<p>Basically, yes</p>",
        "id": 195718580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588170872
    },
    {
        "content": "<p>But you still have <code>term</code> also, so you aren't restricted to only ever considering well-formed terms</p>",
        "id": 195718676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588170905
    },
    {
        "content": "<p>Also, in general, you might have a more interesting notion of well-formedness which isn't directly defined by recursion on the term, but I think that doesn't happen here.</p>",
        "id": 195718760,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588170949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195564583\" title=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195564583\">said</a>:</p>\n<blockquote>\n<p>I would recommend keeping the term syntax as context free as possible, and have a well typing condition afterward that can have whatever dependencies it wants</p>\n</blockquote>\n<p>This is the advice I am trying to follow at the moment</p>",
        "id": 195718852,
        "sender_full_name": "Billy Price",
        "timestamp": 1588170973
    },
    {
        "content": "<p>Both your recursive function and an inductive well-formedness predicate fall into this category, I think.</p>",
        "id": 195718913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588171004
    },
    {
        "content": "<p>I mean, your <code>WF</code> function also basically contains a complete definition of <code>term</code>, in the sense that all the constructors are listed</p>",
        "id": 195719093,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588171075
    },
    {
        "content": "<p>Good point</p>",
        "id": 195719203,
        "sender_full_name": "Billy Price",
        "timestamp": 1588171106
    },
    {
        "content": "<p>So are you suggesting keeping the inductive term, and making an inductive WF with a context, or put the context into the term from the start so every term is well-formed (by forcing the binders and var to follow the context)?</p>",
        "id": 195719474,
        "sender_full_name": "Billy Price",
        "timestamp": 1588171233
    },
    {
        "content": "<p>Those are two options. Another is the recursive <code>WF</code> function you already have.<br>\nThe recursive <code>WF</code> function and the inductive well-formedness predicate are basically equivalent in terms of what you can express easily. (The main difference is that the inductive predicate gives you the ability to induct on the proof of well-formedness, but here it looks basically equivalent to inducting on the term itself; the recursive function is more like an algorithm for computing whether something is well-formed and it lets you directly prove, for example, that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo>∧</mo><mi>ψ</mi></mrow><annotation encoding=\"application/x-tex\">\\varphi \\wedge \\psi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.75em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">φ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ψ</span></span></span></span> is well-formed then the components <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi></mrow><annotation encoding=\"application/x-tex\">\\varphi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">φ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ψ</mi></mrow><annotation encoding=\"application/x-tex\">\\psi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ψ</span></span></span></span> are well-formed, which needs a case analysis if using the inductive predicate.)<br>\nPutting the context into the term from the start is not really equivalent, since it means you only have the vocabulary to ever talk about well-formed terms.</p>",
        "id": 195720456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588171640
    },
    {
        "content": "<p>I'm going with the well-typed-from-the-start approach for now, and I've coming up with a <code>var</code> constructer which sandwiches a given type <code>A</code> between the context of terms of about to be bound <code>\\Gamma</code> and those which will be bound after this variable, <code>\\Delta</code>. To be clear, in any context, the type of the 0th de-bruijn index variable is at the head of the list-context.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"kn\">context</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">type</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"err\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Δ</span><span class=\"o\">))</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"err\">𝒫</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">ex</span>   <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"mi\">𝟙</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">××</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"err\">𝒫</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>   <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"err\">Ω</span>\n</code></pre></div>\n\n\n<p>As the terms currently exist, to construct a big term inductively from smaller terms, you need to know the whole context of the big term to construct and use the variables of the small terms. Obviously this is unsustainable, so I think I need to create a function for modifying contexts. I don't think there's many restrictions on the kind of context modification you can do, which includes adding more context to the end of the context, lifting the context and inserting other context before it, and also any reordering of types in the existing context. Perhaps there's some general pattern there, but I'm struggling to even define a simple case. If I mention <code>A</code> more than once between then <code>|</code> and the <code>:=</code>, it tells me <code>A already appears in this pattern</code>. I understand why that's an error, but I'm not sure what I'm supposed to do instead. I haven't been able to write the other cases for similar reasons.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">add_junk</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">),</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Γ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Δ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"err\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">var</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Δ</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196264720,
        "sender_full_name": "Billy Price",
        "timestamp": 1588649870
    },
    {
        "content": "<p>You should leave the first two arguments blank, they are inferred from the third</p>",
        "id": 196293916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588677175
    },
    {
        "content": "<p>Alternatively you should be able to put a dot before them like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">add_junk</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">),</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Γ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Δ</span><span class=\"o\">))</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"err\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">var</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Δ</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and it will mark those positions as \"inacessible\" meaning that it won't try to split on the first argument and figure out why <code>list.append Γ (A::Δ)</code> is a constructor (because it's not)</p>",
        "id": 196294018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588677270
    },
    {
        "content": "<p>That results in this error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">var</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Δ</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Δ</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">A</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"bp\">.</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">::</span> <span class=\"err\">Δ</span><span class=\"o\">))</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">A</span>\n</code></pre></div>",
        "id": 196297051,
        "sender_full_name": "Billy Price",
        "timestamp": 1588679519
    },
    {
        "content": "<p>Also what is the . syntax called so I can find it in the documentation?</p>",
        "id": 196297202,
        "sender_full_name": "Billy Price",
        "timestamp": 1588679598
    },
    {
        "content": "<p>It's called an inaccessible pattern. It is almost never used in lean/mathlib because in basically every case you can use <code>_</code> instead</p>",
        "id": 196300768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588681864
    },
    {
        "content": "<p>If you want to name the parameters, you should do so in the constructor <code>var Γ A Δ</code>, possibly using <code>@var more names Γ A Δ</code></p>",
        "id": 196300838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588681908
    },
    {
        "content": "<p>Anyway, you've just hit DTT hell in that error there</p>",
        "id": 196300929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588681946
    },
    {
        "content": "<p>You should definitely not have this constructor</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"err\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Δ</span><span class=\"o\">))</span> <span class=\"n\">A</span>\n</code></pre></div>\n\n\n<p>because the term will usually not have this form</p>",
        "id": 196300982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588681977
    },
    {
        "content": "<p>Instead you can use <code>| var (Γ A) : A \\in Γ -&gt; term Γ A</code></p>",
        "id": 196301015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682003
    },
    {
        "content": "<p>But then how can I possibly tell which type in the context list my var is constructing?</p>",
        "id": 196301127,
        "sender_full_name": "Billy Price",
        "timestamp": 1588682057
    },
    {
        "content": "<p>or <code>| var {Γ i A} : list.nth Γ i = some A -&gt; term Γ A</code></p>",
        "id": 196301141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682065
    },
    {
        "content": "<p>that one gives you a de bruijn index</p>",
        "id": 196301170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682091
    },
    {
        "content": "<p>Am I not achieving the same thing by stacking a context below and a context above <code>A</code> in <code>var \\Gamma A \\Delta</code>?</p>",
        "id": 196301243,
        "sender_full_name": "Billy Price",
        "timestamp": 1588682150
    },
    {
        "content": "<p>\"the same thing\" up to equality but not up to defeq</p>",
        "id": 196301302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682165
    },
    {
        "content": "<p>and the reason defeq is coming up is because you have a dependent type</p>",
        "id": 196301338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682195
    },
    {
        "content": "<p>defeq meaning definitional equality?</p>",
        "id": 196301376,
        "sender_full_name": "Billy Price",
        "timestamp": 1588682236
    },
    {
        "content": "<p><code>term (list.append Γ (A :: list.append Δ β)) A</code> and <code>term (list.append (list.append Γ (A :: Δ)) β) A</code> are distinct types, so you have to insert a cast between them and this will make everything harder</p>",
        "id": 196301387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682243
    },
    {
        "content": "<p>(this is the issue I was predicting when I originally recommended to use a weakly typed <code>term</code> syntax + a well formedness judgment)</p>",
        "id": 196301478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682306
    },
    {
        "content": "<p>ooh that's odd, I would have expected them to reduce to the same thing by unwrapping the definition of list.append?</p>",
        "id": 196301480,
        "sender_full_name": "Billy Price",
        "timestamp": 1588682307
    },
    {
        "content": "<p>You can't because <code>Γ</code> is a variable</p>",
        "id": 196301493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682324
    },
    {
        "content": "<p>For every concrete term for <code>Γ</code> these two are defeq, but for variable <code>Γ</code> you have to prove it by induction</p>",
        "id": 196301521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682352
    },
    {
        "content": "<p>that's pretty interesting</p>",
        "id": 196301562,
        "sender_full_name": "Billy Price",
        "timestamp": 1588682386
    },
    {
        "content": "<p>Obviously you should use a difference list for your context <em>flees</em></p>",
        "id": 196301632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588682419
    },
    {
        "content": "<p>You might have seen before I was trying to go with your original suggestion, but was struggling  to define the well-formedness predicate and was kinda lead back into well-typing it from the start.</p>",
        "id": 196301805,
        "sender_full_name": "Billy Price",
        "timestamp": 1588682540
    },
    {
        "content": "<p>The well formedness predicate can be done with either <code>inductive</code> or <code>def</code>. <a href=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195713258\" title=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195713258\">https://leanprover.zulipchat.com/#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/195713258</a> &lt;- this looks okay</p>",
        "id": 196301876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682603
    },
    {
        "content": "<p><code>inductive</code> gives you a bit more freedom to not be strictly recursive</p>",
        "id": 196301920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682639
    },
    {
        "content": "<p>it's also more natural when proving theorems by induction on well formed terms, so the sort of thing that the dependent type would give you</p>",
        "id": 196302102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682757
    },
    {
        "content": "<p>the <code>def</code> is what you would want for implementing a type checker, or a proof that the typing judgment is decidable</p>",
        "id": 196302198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682797
    },
    {
        "content": "<p>but you can have both versions and prove equivalence so there isn't a loss in picking one method over the other at first</p>",
        "id": 196302262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682847
    },
    {
        "content": "<p>I see the issues with using my non-defeq context-terms, but given your constructor<code> | var {Γ i A} : list.nth Γ i = some A -&gt; term Γ A</code>, would that suffer from similar issues?</p>",
        "id": 196302406,
        "sender_full_name": "Billy Price",
        "timestamp": 1588682917
    },
    {
        "content": "<p>that will solve the problem you have with unifying the context, because <code>var</code> can have any context, and the content is shifted to the hypothesis, which is a Prop and hence has no issues with defeq</p>",
        "id": 196302557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588682997
    },
    {
        "content": "<p>your original <code>var</code> constructor only supports contexts of the form <code>Γ ++ A :: Δ</code></p>",
        "id": 196302653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588683032
    },
    {
        "content": "<p>Yep, but given that improvement, am I naive to think that fixes everything and using a WF predicate on weakly-typed terms is overly complicated?</p>",
        "id": 196302878,
        "sender_full_name": "Billy Price",
        "timestamp": 1588683167
    },
    {
        "content": "<p>With the inductive version you can set it up so that it looks almost the same. It's only about twice as long because you have two definitions instead of one (the terms, and the well formedness inductive type)</p>",
        "id": 196303010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588683242
    },
    {
        "content": "<p>but feel free to continue with dependent types, I've hopefully unstuck you on that issue and there are fixes or workarounds for most of the other problems that will arise</p>",
        "id": 196303088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588683297
    },
    {
        "content": "<p>I really appreciate the help in getting me started.</p>",
        "id": 196303162,
        "sender_full_name": "Billy Price",
        "timestamp": 1588683347
    },
    {
        "content": "<p>Here's the inductive-ification of the <a href=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/196264720\" title=\"#narrow/stream/236446-Type-theory/topic/Modelling.20a.20Type.20Theory.20in.20Lean/near/196264720\">original dependent type</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span>  <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">ex</span>   <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span>  <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span>  <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>   <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span>  <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n\n<span class=\"kn\">inductive</span> <span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"err\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Δ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">Γ</span><span class=\"o\">))</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">e</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">WF</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">A</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝒫</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">e</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">WF</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">A</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">ex</span>   <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">e</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">WF</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">::</span><span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">A</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">star</span> <span class=\"mi\">𝟙</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">bot</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₂</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">××</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₂</span> <span class=\"o\">(</span><span class=\"err\">𝒫</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">elem</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>   <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"err\">Ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"n\">e₁</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">WF</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"err\">Ω</span>\n</code></pre></div>\n\n\n<p>there is actually an algorithm to perform these sort of translations, although I took the liberty of using a nat for the variable and otherwise removing unnecessary arguments from <code>term</code>, which is not obvious to the straightforward algorithm.</p>",
        "id": 196304258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588683865
    },
    {
        "content": "<p>Wow that was definitely non-obvious to me that you could take the types off term's as well. From then on, as I understand, instead of talking about terms, you'd talk about proofs that terms are well-formed? (as if its the term itself)</p>",
        "id": 196305815,
        "sender_full_name": "Billy Price",
        "timestamp": 1588684636
    },
    {
        "content": "<p>So a sequent is constructed from two WF's proofs, rather than from two terms?</p>",
        "id": 196305984,
        "sender_full_name": "Billy Price",
        "timestamp": 1588684706
    },
    {
        "content": "<p>No, a sequent is still just two terms</p>",
        "id": 196306020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588684729
    },
    {
        "content": "<p>But the inductive defining the proof relation will contain WF hypotheses</p>",
        "id": 196306072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588684757
    },
    {
        "content": "<p>Ah, I just wrote down the type and realised of course you must introduce the term objects themselves to talk about their WF'ness<br>\n<code>inductive proof : Π {Γ:context} {φ: term} {ψ : term}, WF Γ φ Ω  → WF Γ ψ Ω → Type</code></p>",
        "id": 196307014,
        "sender_full_name": "Billy Price",
        "timestamp": 1588685207
    },
    {
        "content": "<p>In what sense did you mean a proof/sequent is just two terms?</p>",
        "id": 196307359,
        "sender_full_name": "Billy Price",
        "timestamp": 1588685370
    },
    {
        "content": "<p>You can write the <code>proof : context -&gt; term -&gt; term -&gt; Prop</code> relation such that <code>proof Γ φ ψ -&gt;  WF Γ φ Ω  /\\ WF Γ ψ Ω</code>, although I would actually suggest <code>WF Γ φ Ω -&gt; proof Γ φ ψ -&gt;  WF Γ ψ Ω</code> instead</p>",
        "id": 196307375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588685379
    }
]