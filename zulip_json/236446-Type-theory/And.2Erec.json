[
    {
        "content": "<p>This can be a stupid question, I apologize in advance. Is the following <code>sorry</code> provable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I was expecting <code>rfl</code> to prove it, but it doesn't, and I don't see what else one can do. Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works. In particular it seems to me that, in proving <code>foo</code>, one can replace the first  <code>x</code> by the (definitionally) equal term <code>And.intro (And.left x) (And.right x)</code> and then use <code>bar</code>, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives a \"type mismatch\" error. Am I misunderstanding something obvious?</p>",
        "id": 398483665,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698240138
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 398484303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698240337
    },
    {
        "content": "<p>Ahahah yes, of course...</p>",
        "id": 398484545,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698240410
    },
    {
        "content": "<p>Still, I am I was expecting the to terms to be definitionally equal. Are they?</p>",
        "id": 398484677,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698240451
    },
    {
        "content": "<p>Here's a weird case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x.left</span><span class=\"o\">,</span> <span class=\"n\">x.right</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">x.left</span><span class=\"o\">,</span> <span class=\"n\">x.right</span><span class=\"o\">⟩</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>  <span class=\"c1\">-- rfl doesn't work by itself</span>\n</code></pre></div>",
        "id": 398485459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698240686
    },
    {
        "content": "<p><code>And.rec</code> has arguments that are equal by <code>rfl</code>, but the application is not equal by <code>rfl</code>!</p>",
        "id": 398485514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698240704
    },
    {
        "content": "<p>In my (very limited) understanding of type theory the two terms should be definitionally equal. Maybe this is one of the rare cases where <code>rfl</code> doesn't prove the \"true\" definitional equality?</p>",
        "id": 398486086,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698240855
    },
    {
        "content": "<p>This might just be a corner case of eta-expansion that wasn't implemented</p>",
        "id": 398486195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698240895
    },
    {
        "content": "<p>Indeed, it works fine for <code>Prod</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Prod.rec</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Prod.rec</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 398486322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698240934
    },
    {
        "content": "<p>Also interesting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x.left</span><span class=\"o\">,</span> <span class=\"n\">x.right</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">And.intro</span> <span class=\"n\">x.left</span> <span class=\"n\">x.right</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">whnf</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">whnf</span>\n</code></pre></div>",
        "id": 398486495,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698240975
    },
    {
        "content": "<p>So I think either this is just a bug where something is checking for <code>Type</code> when <code>Sort</code> would do, or there is a reason that checking for <code>Sort</code> is a bad idea</p>",
        "id": 398486538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698240989
    },
    {
        "content": "<p>I don't know if it is relevant, but the fact that <code>And</code> can eliminate into <code>Type</code> is because of subsingleton elimination, so it's understandable that it works slightly differently from the elimination for <code>Prod</code>.</p>",
        "id": 398487121,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698241144
    },
    {
        "content": "<p>eta for structures only works for structures</p>",
        "id": 398487980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698241431
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `And.intro : a → b → a ∧ b` is the constructor for the And operation. -/</span>\n  <span class=\"n\">intro</span> <span class=\"o\">::</span>\n  <span class=\"sd\">/-- Extract the left conjunct from a conjunction. `h : a ∧ b` then</span>\n<span class=\"sd\">  `h.left`, also notated as `h.1`, is a proof of `a`. -/</span>\n  <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n  <span class=\"sd\">/-- Extract the right conjunct from a conjunction. `h : a ∧ b` then</span>\n<span class=\"sd\">  `h.right`, also notated as `h.2`, is a proof of `b`. -/</span>\n  <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 398488138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698241467
    },
    {
        "content": "<p>So does the \"structure\" in \"eta for structures\" refer to something that isn't <code>structure</code>?</p>",
        "id": 398488212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698241489
    },
    {
        "content": "<p>actually it works for structure-like inductives, but <code>And</code> should be included</p>",
        "id": 398488305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698241512
    },
    {
        "content": "<p>and Alex's example shows that it does actually work</p>",
        "id": 398488364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698241529
    },
    {
        "content": "<p>oh wait, alex's example is true by proof irrelevance not eta for structures</p>",
        "id": 398488615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698241599
    },
    {
        "content": "<p>Both the <a href=\"https://github.com/leanprover/lean4/blob/dbcc7966cf9285220505278e9c871eecae9ffa44/src/Lean/Meta/WHNF.lean#L146\">elaborator</a> and the <a href=\"https://github.com/leanprover/lean4/blob/dbcc7966cf9285220505278e9c871eecae9ffa44/src/kernel/inductive.h#L70\">kernel</a> avoid doing eta-expansion for Prop-structures, which blocks the iota-reduction of <code>And.rec</code>here.</p>",
        "id": 398509043,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1698247092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/And.2Erec/near/398488615\">said</a>:</p>\n<blockquote>\n<p>oh wait, alex's example is true by proof irrelevance not eta for structures</p>\n</blockquote>\n<p>Despite the presence of proof-irrelevance, I don't think the reduction of <code>And.rec</code> should trigger in the absence of eta, unless the reduction rules for structure-like inductives was adapted to reduce using projections instead of matching (it would also possibly make sense from a performance perspective to do so).</p>",
        "id": 398510156,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1698247364
    },
    {
        "content": "<p>I think the implementation is incorrect (or at least incomplete) to not trigger eta for prop-structures. It is definitely a \"provable definitional equality\", since it's just <code>congrArg _ rfl</code></p>",
        "id": 398513256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698248230
    },
    {
        "content": "<p>but on the other hand reducing recursors for large eliminating props applied to variables is exactly what leads to the undecidability of the typing judgment, so it's not unreasonable to be incomplete here</p>",
        "id": 398513672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698248351
    },
    {
        "content": "<p>This also breaks congruence of definitional equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span><span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span><span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 398514725,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1698248651
    },
    {
        "content": "<p>The right-hand side of the definitional equality is reduced too eagerly, leading to this error. However, even if this type-checked, it would still lead to <a href=\"https://github.com/leanprover/lean4/issues/2258\">yet another</a> case of non-transitivity of definitional equality due to eta-for-structures.</p>",
        "id": 398515195,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1698248802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236446-Type-theory/topic/And.2Erec/near/398513672\">said</a>:</p>\n<blockquote>\n<p>but on the other hand reducing recursors for large eliminating props applied to variables is exactly what leads to the undecidability of the typing judgment, so it's not unreasonable to be incomplete here</p>\n</blockquote>\n<p>The only possibly dangerous recursors for that would be recursors over recursive large eliminating Props such as <code>Acc</code>, eta-expanding structure-like (thus, non-recursive) Prop-inductives for reduction would certainly not lead to a leakage of infinite reduction in Prop.</p>",
        "id": 398515524,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1698248909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/236446-Type-theory/topic/And.2Erec/near/398514725\">said</a>:</p>\n<blockquote>\n<p>This also breaks congruence of definitional equality:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span><span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span><span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">And.rec</span> <span class=\"n\">f</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>To check I am at least understanding what is going on: this is an example that shows that definitional equality (in the sense that <code>rfl</code> proves the equality) does not respect the congruence rules for substitution (or whatever is called the fact that if we replace <code>a</code> by a definitionally equal term <code>b</code> in an expression we get a new expression that is definitionally equal to the  previous one)?</p>",
        "id": 398521736,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698250868
    },
    {
        "content": "<p>In particular, it is not an example of definitional equality not being transitive.</p>",
        "id": 398521809,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698250893
    },
    {
        "content": "<p>Yes, what I'm saying is that the following rule of conversion fails in this example:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>f</mi><mo>≡</mo><mi>g</mi><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>x</mi><mo>≡</mo><mi>y</mi></mrow><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>f</mi><mtext>  </mtext><mi>x</mi><mo>≡</mo><mi>g</mi><mtext>  </mtext><mi>y</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\Gamma \\vdash f \\equiv g \\;\\;\\;\\; \\Gamma \\vdash x \\equiv y}{\\Gamma \\vdash f\\; x \\equiv g \\; y }</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.2519em;vertical-align:-0.8804em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>This is not an example of non-transitive defeq. However, if <code>And.rec f ⟨x.1,x.2⟩</code> and <code>And.rec f x</code> were definitionally equal (and they should be), this would still break transitivity, because <code>And.rec f ⟨x.1,x.2⟩</code> is defeq to <code>f x.1 x.2</code>, but  <code>And.rec f x</code> isn't.</p>",
        "id": 398525532,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1698252293
    },
    {
        "content": "<p>it's not hard to get lean to agree that the application compatibility rule exists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span><span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span><span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n  <span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span><span class=\"n\">x.2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n  <span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 398527469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698253036
    },
    {
        "content": "<p>Should an issue/RFC/PR be opened on that regard ? The fix (eta-expanding Prop-structures during iota-reduction) seems straightforward and innocuous.</p>",
        "id": 398528861,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1698253502
    },
    {
        "content": "<p>Note that this isn't necessarily to do with just <code>Prop</code></p>\n<p>Here's another related non-transitivity</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((),</span> <span class=\"o\">())</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n       <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 399072599,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1698516977
    },
    {
        "content": "<p>How can I check if the kernel accepts it without going through the elaborator first? Is there a way?</p>",
        "id": 399072694,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1698517121
    },
    {
        "content": "<p>This transitivity failure comes from another issue, and has already been documented <a href=\"https://github.com/leanprover/lean4/issues/2258\">here</a>. This come from the fact that the criteria for triggering eta-for-unit during defEq doesn't accept types it should accept. The issue mentioned in this thread is due to the fact that eta-expansion isn't triggered during iota-reduction for <code>Prop</code>-structures.</p>",
        "id": 399074904,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1698519385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/236446-Type-theory/topic/And.2Erec/near/398528861\">said</a>:</p>\n<blockquote>\n<p>Should an issue/RFC/PR be opened on that regard ? The fix (eta-expanding Prop-structures during iota-reduction) seems straightforward and innocuous.</p>\n</blockquote>\n<p>This came up again in <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.2Echoose/near/405217150\">this thread</a>; if nothing else a canonical issue to reference would be helpful.</p>",
        "id": 405222644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701384956
    }
]