[
    {
        "content": "<p>I'm doing something close to simply typed lambda calculus in Lean right now, and some of my code looks something like this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Context</span> <span class=\"o\">(</span><span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">types</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Var</span> <span class=\"o\">{</span><span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">types</span> <span class=\"bp\">→</span> <span class=\"n\">types</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"n\">T'</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">T'</span><span class=\"o\">::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">singleton_of_singleton</span> <span class=\"o\">{</span><span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">types</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"o\">[</span><span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">v₂</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var.head</span><span class=\"o\">,</span> <span class=\"n\">Var.head</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Am I correct in saying that <code>singleton_of_singleton</code> is not provable without UIP?</p>",
        "id": 359674676,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684505648
    },
    {
        "content": "<p>You need UIP for the <code>types</code> parameter at least.</p>",
        "id": 359676660,
        "sender_full_name": "Andrea Vezzosi",
        "timestamp": 1684506012
    }
]