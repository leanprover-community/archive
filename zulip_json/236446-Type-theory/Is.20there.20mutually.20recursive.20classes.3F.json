[
    {
        "content": "<p>Hi, this is a beginner question. Does Lean4 classes support mutual recursion? If so, does that always imply mutually recursive instances, and is there any obvious problems regarding mutual recursion in classes?</p>\n<p>Apart from that, is there mutual recursion between classes &amp; functions/inductives?</p>",
        "id": 325537922,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675392348
    },
    {
        "content": "<p>No, classes cannot be recursive at all</p>",
        "id": 325538015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392390
    },
    {
        "content": "<p>more specifically, <code>structure</code> cannot</p>",
        "id": 325538028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392400
    },
    {
        "content": "<p><code>class</code> is just <code>@[class] structure</code></p>",
        "id": 325538043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392411
    },
    {
        "content": "<p>I see, thank you very much! That's a fast and furious reply.</p>",
        "id": 325538060,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675392424
    },
    {
        "content": "<p>you can use <code>class inductive</code> and those can be recursive</p>",
        "id": 325538065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392432
    },
    {
        "content": "<p>??????????? How does <code>class inductive</code> work? What does it mean?</p>",
        "id": 325538083,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675392450
    },
    {
        "content": "<p><code>@[class] inductive</code></p>",
        "id": 325538089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392457
    },
    {
        "content": "<p>What do implementers implement? Constructing the instances? Is it useful in any scenarios?</p>",
        "id": 325538140,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675392483
    },
    {
        "content": "<p><code>@[class]</code> is just a signal to the typeclass inference mechanism that this type can be used in <code>[]</code> and inferred by tc inference by default</p>",
        "id": 325538159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392489
    },
    {
        "content": "<p>Ok, I see, that's very intuitive</p>",
        "id": 325538170,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675392502
    },
    {
        "content": "<p>similarly <code>instance</code> is just <code>@[instance] def</code></p>",
        "id": 325538177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392507
    },
    {
        "content": "<p>so you can also just make elements of that inductive and mark them as instances</p>",
        "id": 325538185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392524
    },
    {
        "content": "<p>Ok, great daâ˜…ze</p>",
        "id": 325538195,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675392530
    },
    {
        "content": "<p>The graph of instances doesn't have to mirror the definitions at all, it can have loops and whatnot (but you might hit issues if the instances are set up badly)</p>",
        "id": 325538246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392576
    },
    {
        "content": "<p>I see, I guess I can find the rest of the answers in <em>tabled typeclass resolution</em>, right? Thanks again!</p>",
        "id": 325538329,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675392626
    },
    {
        "content": "<p>it's just like a bunch of theorems saying given an A and a B you get a C and so on, and the TC inference mechanism just applies these eagerly</p>",
        "id": 325538338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392639
    },
    {
        "content": "<p>that paper describes how it is able to present this interface without performance problems, it is not particularly relevant for users except insofar as it determines what kinds of patterns cause TC inference to fall over</p>",
        "id": 325538387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392703
    },
    {
        "content": "<p>I think it is intended for implementers, e.g. if you wanted to write a TC inference implementation for another language</p>",
        "id": 325538486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392766
    },
    {
        "content": "<p>Yeah, I am currently implementing classes for a theorem prover like Lean, and I'm thinking about mutual recursion support for classes.</p>\n<p>The language has fancy inference for mutual recursions. You write them down like in Java and it'll be type checked with inferred orders. Compared to this, Coq &amp; Agda are like C/C++ where we need forward declarations :) I'm unsure what Lean4 does though</p>",
        "id": 325538528,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675392811
    },
    {
        "content": "<p>ah, in that case it is indeed the paper to read</p>",
        "id": 325538552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392841
    },
    {
        "content": "<p>I believe it comes down to better caching support to help detect loops</p>",
        "id": 325538650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392903
    },
    {
        "content": "<p>there are some simple patterns that lead to exponential behavior if you aren't careful with caching</p>",
        "id": 325538689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675392935
    },
    {
        "content": "<p>Yeah I can see that happening in Haskell/Agda</p>",
        "id": 325538833,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675393033
    },
    {
        "content": "<p>In your description it is not clear whether you are talking about the typeclass inference mechanism (like in haskell) or recursive functions, where at run time functions call each other in a loop</p>",
        "id": 325538941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675393105
    },
    {
        "content": "<p>Coq / Agda / Lean all have to be very strict about recursive functions because you can prove false if you don't have a clear well founded metric</p>",
        "id": 325538983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675393153
    },
    {
        "content": "<p>for typeclass inference you can basically have an arbitrary graph of dependencies because everything is resolved at compile time</p>",
        "id": 325539018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675393188
    },
    {
        "content": "<p>Most programming languages are less strict about recursive functions, and allow arbitrary call graphs (possibly with forward declarations) because they aren't trying to prevent partiality</p>",
        "id": 325539244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675393323
    },
    {
        "content": "<p>I'm talking about the definition of classes and instances and its language-feature-interaction with termination check. I've heard of some bad stories so I'm a little worried :(</p>",
        "id": 325539898,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675393902
    },
    {
        "content": "<p>Specifically, if you define the <code>instance Show where show x = ?</code> (I hope the idea is clear) for, say, <code>inductive X := A : X | B : List X -&gt; X</code>, you'll end up invoking <code>instance [Show X] =&gt; Show (List X)</code> which is involved in the call graph and the termination check needs it to figure out the structural recursion-ness of the definition, while this is not clear simply by resolving the names</p>",
        "id": 325540018,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1675394037
    }
]