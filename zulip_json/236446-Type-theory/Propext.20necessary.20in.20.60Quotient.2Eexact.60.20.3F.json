[
    {
        "content": "<p>Hey, looking at <a href=\"https://github.com/leanprover/lean4/blob/c826168cfa79d421c0723d5fbdd840595c29fe3a/src/Init/Core.lean#L1476\">the proof that quotients define the transitive+symmetric+reflexive closure of a relation</a>, I see that propext is used to define an induced relation on the quotient. Is propext a necessary axiom in this proof, or just a convenience?</p>\n<p>Ah <a href=\"http://eprints.nottingham.ac.uk/28941/1/Nuo%20Li%27s_Thesis.pdf\">Theorem 3.3 here</a> also uses propext and refers to Hofmann, so I guess it's at least not trivial without propext.</p>\n<p>Still, I wonder if not-propext implies not-quotient-is-equivalence-closure. I vaguely tried by taking the quotient of <code>Prop</code> by <code>iff</code>but that didn't lead me anywhere. <br>\nIt seems proving that quotienting by <code>Eq</code> doesn't do anything is itself not dependent on propext, which is interesting.</p>",
        "id": 328795374,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1676807422
    },
    {
        "content": "<blockquote>\n<p>Ah Theorem 3.3 here also uses propext and refers to Hofmann, so I guess it's at least not trivial without propext.</p>\n</blockquote>\n<p>Nice find! I did some explorations in my early days learning Lean and concluded it's probably impossible to prove quotient exactness without propext (or some other axioms), but I didn't find any reference. The idea of <a href=\"#narrow/stream/113488-general/topic/classical.2Eem.20without.20funext.20.2F.20quot.2Esound/near/207363184\">taking the quotient Prop/iff</a> just pushes the problem to exactness of Prop/iff, which is just as hard.</p>\n<blockquote>\n<p>I wonder if not-propext implies not-quotient-is-equivalence-closure.</p>\n</blockquote>\n<p>I think this implication is invalid because I can prove <a href=\"https://gist.github.com/alreadydone/7474d5000c912194d794d06192e84f1e#file-choice_and_excluded_middle-lean-L96-L110\">quotient exactness using choice and excluded middle</a> (actually, decidability of the relation is enough) without propext. Notice that propext is necessary to excluded middle from choice; at least we don't know a way to avoid it.</p>",
        "id": 328850432,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1676833033
    },
    {
        "content": "<p>So, a decidable relation yields an exact quotient, if I'm reading you correctly? That's interesting, I'll have a proper look, thanks!</p>",
        "id": 328852222,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1676834040
    },
    {
        "content": "<p>Yeah, the idea is that given any <code>a</code> you can then map those <code>b</code> that satisfies <code>r a b</code> to <code>true</code> and those <code>b</code> that doesn't to <code>false</code>, if <code>r</code> is decidable, and this function passes down to the quotient by <code>r</code>, if <code>r</code> is an equivalence relation. (So in the case of an arbitrary relation, we need to assume its trans-symm-refl closure is decidable, which is generally not equivalent to itself being decidable.)</p>",
        "id": 328858402,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1676838633
    },
    {
        "content": "<p>A direct proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">quot_exact</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_refl</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_symm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_trans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">quot.lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hcd</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_refl.refl</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">true_ne_false</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"n\">h</span> <span class=\"n\">hcd</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">had</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">trans</span> <span class=\"n\">had</span> <span class=\"bp\">$</span> <span class=\"n\">is_symm.symm</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hcd</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">quot_exact</span> <span class=\"c1\">-- no axioms</span>\n</code></pre></div>\n<p>You can see the proof only ever uses <code>decidable_pred (r a)</code>.</p>",
        "id": 328860629,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1676840331
    },
    {
        "content": "<p>Ah, it makes sense: instead of passing the relation <code>r</code> itself to the quotient, you re-encode it by means of <code>true+false</code>, so that you don't get to need propext to prove <code>r a b = r a c</code>, but instead just <code>true = true</code>.<br>\nYour proof but with propext:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">quot_exact</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_refl</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_symm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_trans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">quot.lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hcd</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">is_refl.refl</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">propext</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"n\">hac</span> <span class=\"n\">hcd</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">had</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"n\">had</span> <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"n\">hcd</span><span class=\"o\">)⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">quot_exact</span> <span class=\"c1\">-- propext</span>\n</code></pre></div>\n<p>or in term-mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">quot_exact</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_refl</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_symm</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_trans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">quot.lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">hcd</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n      <span class=\"n\">propext</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">trans</span> <span class=\"n\">hac</span> <span class=\"n\">hcd</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">had</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"n\">trans</span> <span class=\"n\">had</span> <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"n\">hcd</span><span class=\"o\">)⟩)</span>\n<span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328899128,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1676872952
    }
]