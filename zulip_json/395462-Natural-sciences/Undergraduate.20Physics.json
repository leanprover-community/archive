[
    {
        "content": "<p>I am interested in making a foray into formalizing the undergraduate physics curriculum using Lean. (My background: I'm a physics postdoc at Cornell, but my work is fairly mathematical.)</p>\n<p>A previous thread in this stream seems to indicate that Hamiltonian Mechanics may be difficult to do due to the lack of formalism for ODEs and PDEs. </p>\n<p>I think it would be nice to have a list of areas in undergraduate physics (and other areas), an indication of whether they can be formalised in lean or not - and what the obstacles are for formalisation. An obvious question is, what are the areas which can be formalised using the current state of mathlib? Maybe special relativity?</p>",
        "id": 393069237,
        "sender_full_name": "Joseph Tooby-Smith",
        "timestamp": 1695662362
    },
    {
        "content": "<p>I'm also interested in formalizing physics, mainly from computational perspective. Writing down a set of ODEs/PDEs and then transforming/approximating them until I obtain executable program computing approximate solution.</p>\n<p>If you want to formalize physics textbooks I would argue that you do not really need too much of ODE and PDE theory. In physics, you usually assume that the solution exists and only derive that the solution has such and such properties. This usually boils down to some involved calculation and approximation. </p>\n<p>I would not shy away from trying to do Hamiltonian mechanics, you can just assume the missing parts of mathlib. I think having such formalization of Hamiltonian mechanics would be great and it could motivate people to further develop the missing parts of mathlib.<br>\nOne crucial point, if you want to do Hamiltonian mechanics from geometrical perspective then I would wait as (I think) mathlib does not have differential forms yet.</p>\n<p>I think there are two main challenges. First, figuring out what exactly are the starting assumptions and what are the statements you want to formalize ... well this effectively Hilbert's 6th problem. The second challenge will be doing calculations, it can be quite tiresome in lean and there is not yet too much good automation for it. (I'm working on symbolic differentiation but it is not ready yet)</p>",
        "id": 393080370,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1695665793
    },
    {
        "content": "<p>Welcome to the Lean community! We're really interested in this, too. Take a look at our preprint <a href=\"https://arxiv.org/abs/2210.12150\">here</a> - we formalize the derivation of the kinematic equations from the 1D equations of motion for constant acceleration. </p>\n<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> did a great job of laying out your options. I see this on two orthogonal axes - formalizing the physics and formalizing the mathematics.</p>\n<p>Along the \"formalizing mathematics\" axis: If you don't care about connecting <em>either</em> to foundational axioms, you can just assume high-level mathematics as axioms and you can just state the physics assumptions as hypotheses, then build out the proof from there. Alternatively, you can import your mathematics from Mathlib, then state the physics assumptions as hypotheses, and build out the proof from these. If Mathlib doesn't have the math you need, then you'll have to wait for someone else to do it, or take that initiative yourself. As Tomas said, if you do the first approach, you can refactor your code later on once the requisite math has been added to Mathlib.</p>\n<p>Along the \"formalizing physics\" axis - where you land on this corresponds to how you approach Hilbert's 6th problem. In our paper, we very much start at high-level concepts and prove what other high-level concepts follow. At the moment, I'm not too interested in unifying all the things, and I suspect you're not too interested in that either, given your curiosity about formalizing undergrad physics. Nonetheless, figuring out techniques for formally interrelating different scientific theories is something we're exploring.</p>",
        "id": 393141329,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1695691649
    },
    {
        "content": "<p>Since you specifically asked about special relativity, I'll point you to this senior thesis: <br>\n<a href=\"https://dash.harvard.edu/handle/1/38811518?show=full\">https://dash.harvard.edu/handle/1/38811518?show=full</a></p>",
        "id": 393141556,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1695691761
    },
    {
        "content": "<p>How about quantum theory (esp. quantum information)? It's mostly basic linear algebra and maybe a tiny bit of representation theory. L2 spaces seem to at least have a skeleton, too.</p>",
        "id": 393141983,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695691996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/Undergraduate.20Physics/near/393080370\">said</a>:</p>\n<blockquote>\n<p>In physics, you usually assume that the solution exists and only derive that the solution has such and such properties. This usually boils down to some involved calculation and approximation. </p>\n</blockquote>\n<p>Approximation is something we haven't tackled yet, but this shows up a lot in science/engineering proofs, so it's on my radar. E.g. Wikipedia's derivation of Kepler's Third Law uses an \"approximately equal\" logical step, to reduce m1+m2 to m1, because m1 (mass of sun) &gt;&gt; m2 (mass of planet). What would be the Lean way to do this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">kepler_reduce</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">T</span> <span class=\"n\">G</span> <span class=\"n\">m1</span> <span class=\"n\">m2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"n\">T</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">m1</span> <span class=\"bp\">+</span> <span class=\"n\">m2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">m1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m2</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"n\">T</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">m1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 393143570,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1695692929
    },
    {
        "content": "<p>One way would be to include statements like \"x much greater than y\" as input assumptions and replace equality by some notion of \"equal to first order in all the small things\"? (Maybe reuse Landau notation?)</p>\n<p>Of course, it doesn't match the normal practice of not mentioning assumptions and writing \"equals\" for \"equal enough\". However, I don't see how you can prove a statement that is only approximate using Lean's <code>=</code> in a framework that doesn't immediately allow to prove <code>False</code>. The way physics works in my experience (no snark intended) is that you work in a framework that does allow to prove <code>False</code> and just <em>don't do that</em>.</p>",
        "id": 393144975,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695693743
    },
    {
        "content": "<p>Landau notation could be great here! I suspect we can restate such arguments using limits, too. A more difficult approach would be to build an alternative to equality, like <code>≈</code> a la <a href=\"https://www.cambridge.org/core/journals/journal-of-symbolic-logic/article/abs/logic-for-approximate-reasoning/D16FEA1A7BDD08EBBB3CA882B3CE23B5\">this paper</a>.</p>",
        "id": 393146186,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1695694454
    },
    {
        "content": "<p>Overall, I think what Lean can offer Physics is to provide an alternative framework that rewards the author for staying within the guardrails of mathematics, and pushes them away from the hand-wavy derivations toward more rigorous ones.</p>",
        "id": 393147116,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1695694948
    },
    {
        "content": "<p>And time will tell us whether this kind of approach can remain feasible -- or rather whether the community can use Lean to make it feasible.</p>",
        "id": 393191834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695718928
    }
]