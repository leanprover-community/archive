[
    {
        "content": "<p>I got interested in physical units again and wanted to see if I can state Navier-Stokes equation with units. Hopefully someone will find this interesting :) so here is what I got:</p>\n<p>Let's start with a simple kinematics, let's introduce time, velocity and acceleration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">second</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">meter</span><span class=\"bp\">*</span><span class=\"n\">second</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">meter</span><span class=\"bp\">*</span><span class=\"n\">second</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>now some simple formulas from kinematics do typecheck</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span>  <span class=\"c1\">-- ℝ⟦meter⟧</span>\n</code></pre></div>\n<p>To do Navier-Stoke equation we need differentiation. The type of differentiation respecting units would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">uderiv</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">PhysicalUnit</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">⟦</span><span class=\"n\">u</span><span class=\"bp\">⟧</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"bp\">⟦</span><span class=\"n\">v</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">⟦</span><span class=\"n\">u</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">⟦</span><span class=\"n\">w</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">u</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>now we can state Navier-Stokes equation(in one dimension) as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">second</span><span class=\"bp\">⟧</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">meter</span><span class=\"bp\">⟧</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">meter</span><span class=\"bp\">*</span><span class=\"n\">second</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">second</span><span class=\"bp\">⟧</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">meter</span><span class=\"bp\">⟧</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">pascal</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">density</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">second</span><span class=\"bp\">⟧</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">meter</span><span class=\"bp\">⟧</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"n\">kilogram</span><span class=\"bp\">*</span><span class=\"n\">meter</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">meter</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">second</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">uderiv</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">·</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"mi\">1</span><span class=\"bp\">⟧</span><span class=\"o\">))</span>                              <span class=\"c1\">-- ∂u/∂t</span>\n                <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">uderiv</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">))</span>                               <span class=\"c1\">-- (u⬝∇)u</span>\n                <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"mi\">1</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">density</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">uderiv</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"mi\">1</span><span class=\"bp\">⟧</span><span class=\"o\">))</span>   <span class=\"c1\">-- 1/ρ ∇p</span>\n                <span class=\"bp\">+</span> <span class=\"n\">ν</span> <span class=\"bp\">*</span> <span class=\"n\">uderiv</span> <span class=\"o\">((</span><span class=\"n\">uderiv</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">t</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"bp\">·</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"mi\">1</span><span class=\"bp\">⟧</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"bp\">⟦</span><span class=\"mi\">1</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>      <span class=\"c1\">-- ν Δu</span>\n                <span class=\"bp\">=</span>\n                <span class=\"mi\">0</span>\n</code></pre></div>\n<hr>\n<p>How does this work? The key piece is to have a custom elaborator of <code>x * y</code> and <code>x + y</code> which calls <code>norm_num</code> on the types of <code>x</code> and <code>y</code> and then checks if the units are the same. Have a look at the code <a href=\"https://github.com/lecopivo/SciLean/blob/c1d72b971e657d8b68274563069c77f96cfcbbbb/SciLean/Physics/PhysicalUnits.lean#L170\">here</a>. The unfortunate thing is that the elaborators adds lots of <code>cast</code> to the expressions which will probably be quite painful to work with later on but I was unable to figure out how to do it without casts.</p>",
        "id": 382407056,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691341211
    },
    {
        "content": "<p>is <code>X⟦u⟧</code> an actual Lean thing or did you define a notation to get this? I was having a <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros\">discussion in another channel</a> about defining physical units. Can you send how you define <code>PhysicalUnit</code>?</p>",
        "id": 382653650,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1691418840
    },
    {
        "content": "<p>The basic idea that was recommended was <code>def PhysicalUnits (α) := monoid_algebra ℝ (dimension α)</code> and this makes use of the dimensional analysis already defined and just adds a value to a dimension.</p>",
        "id": 382656211,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1691419252
    },
    {
        "content": "<blockquote>\n<p>Can you send how you define</p>\n</blockquote>\n<p>It's line 10 of the link above</p>",
        "id": 382669681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691421416
    },
    {
        "content": "<p>I prefer <span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span>'s approach of discarding nonsense like <code>1m + 2s</code> in the type system</p>",
        "id": 382669963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691421455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"474115\">Max Bobbin</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/physical.20units/near/382656211\">said</a>:</p>\n<blockquote>\n<p>The basic idea that was recommended was <code>def PhysicalUnits (α) := monoid_algebra ℝ (dimension α)</code> and this makes use of the dimensional analysis already defined and just adds a value to a dimension.</p>\n</blockquote>\n<p>Yes I will generalize it like that at some point. Right now, it is just a proof of concept. I was mainly interested in how to do some complicated reduction in the types to check that two terms have the same units.</p>",
        "id": 382675680,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691422232
    },
    {
        "content": "<p>The notation <code>X⟦u⟧</code> is defined on the <a href=\"https://github.com/lecopivo/SciLean/blob/c1d72b971e657d8b68274563069c77f96cfcbbbb/SciLean/Physics/PhysicalUnits.lean#L131\">line 131</a></p>",
        "id": 382676850,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691422401
    },
    {
        "content": "<p>Can you outline what makes the reduction complicated? Isn't everything just defeq in your example?</p>",
        "id": 382680555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691422990
    },
    {
        "content": "<p>I explicitly call <code>norm_num</code> and I was having a hard time replying purely on defeq. I will have to think for some time to give you a concrete example where it is obvious that defeq is not enough.</p>",
        "id": 382681983,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691423245
    },
    {
        "content": "<p>It stops being defeq as soon as your powers are free variables</p>",
        "id": 382682576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691423358
    },
    {
        "content": "<p>Yes that is the exact problem I got when I tried to define an adjoint of differential with units. I had to prove <code>a * b * c / b / a = c</code>.</p>",
        "id": 382683192,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691423463
    },
    {
        "content": "<p>But even with concrete units it didn't work very well.</p>",
        "id": 382683383,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691423495
    },
    {
        "content": "<p>Ohh I know, synthesizing <code>HAdd A[u] A[v] ??</code> is kind of problematic if <code>u</code> and <code>v</code> are defeq.</p>",
        "id": 382684057,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691423625
    },
    {
        "content": "<p><code>HAdd</code> strikes again</p>",
        "id": 382684369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691423677
    },
    {
        "content": "<p>But that can be solved with a custom elaborator, however there is still the issue with writing functions polymorphic in units.  There units appear as free variables and you can't rely on defeq.</p>",
        "id": 382685108,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691423803
    },
    {
        "content": "<p>Ohh the main problem is that operations over rationals are not defeq,  <code>3+2</code> is not defeq <code>5</code> or <code>3*2/3</code> is not defeq to <code>2</code> over rationals.</p>\n<p>You can probably rely on defeq when checking dimensions where you are dealing only with integer powers. If you want do to units, you have to deal with the scaling which has to be at least rational number.</p>",
        "id": 382696059,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691425721
    },
    {
        "content": "<p>This is because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.ofScientific#doc\">docs#Rat.ofScientific</a> is an <code>irreducible_def</code> because apparently you don't want to unfold it</p>",
        "id": 382697107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691425924
    },
    {
        "content": "<p>In fact pretty much all of the rationals are built this way</p>",
        "id": 382697413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691425985
    },
    {
        "content": "<p><code>1+1 =?= 2</code> does not contain any <code>ofScientific</code> and still fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">))</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Is {← ppExpr a} defeq to {b}: {← isDefEq a b}\"</span>\n</code></pre></div>",
        "id": 382698019,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691426099
    },
    {
        "content": "<p>Right, <a href=\"https://github.com/leanprover/std4/commit/04b3c9831e0c141713a70e68af7e40973ec9a1ff\">https://github.com/leanprover/std4/commit/04b3c9831e0c141713a70e68af7e40973ec9a1ff</a> is what's really to blame</p>",
        "id": 382698179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691426128
    },
    {
        "content": "<p>Hmm, anyway I can't rely on defeq because I need to deal with units as free variables.</p>",
        "id": 382698941,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691426295
    },
    {
        "content": "<p>Btw. I got interested in physical units again because of the latest <a href=\"https://www.youtube.com/watch?v=6Fc-mjFMSrw&amp;t=11s&amp;ab_channel=ToposInstitute\">talk</a> at Topos Institute.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"6Fc-mjFMSrw\" href=\"https://www.youtube.com/watch?v=6Fc-mjFMSrw&amp;t=11s&amp;ab_channel=ToposInstitute\"><img src=\"https://uploads.zulipusercontent.net/97365ba5c4033e694f5b29ae88f5f9fa4cb90364/68747470733a2f2f692e7974696d672e636f6d2f76692f3646632d6d6a464d5372772f64656661756c742e6a7067\"></a></div>",
        "id": 382699333,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691426400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"474115\">Max Bobbin</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/physical.20units/near/382656211\">said</a>:</p>\n<blockquote>\n<p>The basic idea that was recommended was <code>def PhysicalUnits (α) := monoid_algebra ℝ (dimension α)</code> and this makes use of the dimensional analysis already defined and just adds a value to a dimension.</p>\n</blockquote>\n<p>I do not like the idea of using <code>monoid_algebra</code>. As Eric mentioned, I don't want the type system to allow nonsense like <code>1m + 2s</code>. I even want to restrict stuff like <code>1m + 1cm</code> and probably require an explicit cast to meters or centimeters.</p>",
        "id": 382703718,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1691427428
    },
    {
        "content": "<p>I'd like to add that many people use units like √Hz. That's also not in <code>monoid_algebra</code> and I think should be allowed, if only to be inclusive.</p>",
        "id": 393151394,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1695697361
    },
    {
        "content": "<p>That works just fine with <code>MonoidAlgebra ℚ Real</code></p>",
        "id": 393175987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695712597
    }
]