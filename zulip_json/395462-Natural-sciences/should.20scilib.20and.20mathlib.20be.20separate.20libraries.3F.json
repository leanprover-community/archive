[
    {
        "content": "<p>Should formalized theories of natural science and engineering be part of Mathlib? Or should they be put together into Scilib, which I hope will be what <a href=\"https://atomslab.github.io/LeanChemicalTheories/\">LeanChemicalTheories</a> will grow to become?</p>\n<p>What about <a href=\"https://link.springer.com/book/10.1007/978-3-319-77434-3\">formal philosophy</a>, <a href=\"https://en.wikipedia.org/wiki/Formal_linguistics\">formal linguistics</a>, and <a href=\"https://www.sciencedirect.com/journal/mathematical-social-sciences\">mathematical social sciences</a>?</p>",
        "id": 370962067,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688087633
    },
    {
        "content": "<p>I would expect these to be separate. A mono-repo is only useful so long as the pieces are all interconnected. Largely disconnected projects should not be incorporated into mathlib.</p>",
        "id": 370963653,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688088176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113489-new-members/topic/Bulhwi.20Cha.20.26.20Seongwoo.20Shim.3A.20Introductions/near/293911504\">said</a>:</p>\n<blockquote>\n<p>I can comment a bit about Hamiltonian mechanics: the correct way of formalizing that is through symplectic geometry (in a sense symplectic geometry is Hamiltonian mechanics).</p>\n</blockquote>\n<p>For example, symplectic geometry should be part of Mathlib. But does that mean classical mechanics, which includes Hamiltonian mechanics, should be part of Mathlib?</p>\n<p>If you want to formalize some theories of natural or social sciences, I think you'd first have to <em>mathematize</em> them most of the time.</p>",
        "id": 370964065,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688088319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424214\">@Tyler Josephson ⚛️</span> may have thoughts on this.</p>",
        "id": 370972975,
        "sender_full_name": "Jason Rute",
        "timestamp": 1688092170
    },
    {
        "content": "<p>I would expect libraries like this to use mathlib as a dependency.</p>",
        "id": 370980384,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688094263
    },
    {
        "content": "<p>SciLib will use mathlib as a dependency, but I don’t think the reverse makes sense</p>\n<p>If scientists need a bit of mathematics that mathlib doesn’t have, they can prove such theorems and store them in SciLib. But mathlib won’t and shouldn’t depend on SciLib - if someone wants to add something to mathlib using a theorem in SciLib, they should first PR the theorem to mathlib.</p>\n<p>I expect SciLib to have laxer standards than mathlib. For example, we’ll be happy to have theorems about real numbers that are also true of fields, without generalizing them to fields. We want scientists and engineers to be able to read and understand and add to SciLib, and that will often mean <em>not</em> making the theorems as general as possible (and potentially keeping multiple versions of theorems, too, like 1D mechanics and 3D mechanics, even though 3D generalizes 1D). Mathlib can have the theorems about fields.</p>",
        "id": 371253907,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1688147150
    },
    {
        "content": "<p>I like that argument about being able to read and understand theorems in scilib, and not going for the most general abstraction in which a theorem holds. I believe a similar approach is needed for whatever comes up for the algorithms and complexity community.</p>",
        "id": 371262459,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1688148906
    },
    {
        "content": "<p>For example, most algorithms people know/remember very little measure theory. We typically work with probability theory without any reference to it. EDIT:  To give one more example, many graph theoretic proofs are easier with finite graphs. Track A folks don't care about infinite graphs. All graphs are assumed to be finite by default.</p>",
        "id": 371265184,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1688149567
    },
    {
        "content": "<p>As Feynman explains: <a href=\"https://youtu.be/obCjODeoLVw\">https://youtu.be/obCjODeoLVw</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"obCjODeoLVw\" href=\"https://youtu.be/obCjODeoLVw\"><img src=\"https://uploads.zulipusercontent.net/c43c7c1200d8a44847cd75c2c165b7aa9da10181/68747470733a2f2f692e7974696d672e636f6d2f76692f6f62436a4f44656f4c56772f64656661756c742e6a7067\"></a></div>",
        "id": 371266599,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1688149894
    },
    {
        "content": "<p>I've always found it interesting that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsirelson_inequality\">docs3#tsirelson_inequality</a>, not complaining about it but it seems more like physics than math to me.</p>",
        "id": 372081016,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1688404302
    },
    {
        "content": "<p>Oh that’s really neat!</p>",
        "id": 372137612,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1688421998
    },
    {
        "content": "<p>IMHO, theorems from other sciences that can be formulated mathematically without introducing lots of domain specific definitions can go to <code>mathlib</code>.</p>",
        "id": 372139602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688423028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Should.20scilib.20and.20mathlib.20be.20separate.20libraries.3F/near/372139602\">said</a>:</p>\n<blockquote>\n<p>IMHO, theorems from other sciences that can be formulated mathematically without introducing lots of domain specific definitions can go to <code>mathlib</code>.</p>\n</blockquote>\n<p>Would it be okay to add multiple versions of a theorem to mathlib? perhaps even with different proofs? My current impression based on reading the zulip chatter for half a year is that mathlib is meant to have theorems in their most general and abstract form. This also came up in the discussion on probability bounds. </p>\n<p>If the answer to both is no, then I suspect that pursuing a separate Scilib (and even a separate AlgoLib) makes sense. The primary problem with trying to fit everything into mathlib is that in the sciences (at least this is true in CS and physics), we have a somewhat different culture w.r.t how we write and prove theorems. We have many proofs of the same theorem because different proofs yield insights and show a new approach to a problem. It is not enough to know that a theorem is true. How a theorem is true can yield useful insights, possibly even algorithms. Further as Tyler pointed out, it is important to have similar (or even the same) theorems  in several different forms. Then if required we can show equivalences between the various statements.  If mathlib finds them interesting then the mathlib admins might have to consider how to incorporate such theorems. However if everyone is adding to mathlib, there might be all sorts of incompatibilities that arise from culture clashes. For example a computer scientist might want to get on with a graph theorem for finite simple graphs, while mathematicians might insist on proving it in the most general case for infinite graphs or multigraphs and instantiating the vertex type with a fintype instance.</p>",
        "id": 372147679,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1688428296
    },
    {
        "content": "<blockquote>\n<p>We have many proofs of the same theorem because different proofs yield insights and show a new approach to a problem. It is not enough to know that a theorem is true. How a theorem is true can yield useful insights, possibly even algorithms.</p>\n</blockquote>\n<p>Saying that this is not true \"in mathematics\" --- as I read in your phrasing \"somewhat different culture\" --- seems to me completely wrong!</p>",
        "id": 372150868,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688430349
    },
    {
        "content": "<p>Any proof of a big theorem involves lots of small useful lemmas. Also, different proofs often prove slightly different statements (if you generalize as much as possible at every step).</p>",
        "id": 372151705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688430734
    },
    {
        "content": "<p>I think I'd need a more concrete version of the question \"would it be okay to add multiple versions of a theorem to mathlib\" before really being able to answer it.</p>\n<p>It's a bit of a straw man to say \"mathlib only accepts theorems in their most general and abstract form\" --- no theorem in the history of mathematics has even been in the <em>most</em> general or <em>most</em> abstract form. However mathlib has decided to avoid \"needless\" specialisation. (Here by \"needless\" I mean --- if the same theorem is true in a more general setting, with no more work, we should certainly generalise, even if that makes the statement less \"accessible\" to someone with less mathematical background: c.f. not having a <code>vector_space</code> class because <code>module</code> over a <code>field</code> is all you need.) Similarly, we do mildly discourage doing special cases of more general theories, at least when there is a strong prospect that the more general theory can and will be done in the short term.</p>",
        "id": 372151749,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688430765
    },
    {
        "content": "<p>E.g., we can prove the theorem <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msup><mi mathvariant=\"normal\">∂</mi><mn>2</mn></msup><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi><mi mathvariant=\"normal\">∂</mi><mi>y</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi mathvariant=\"normal\">∂</mi><mn>2</mn></msup><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>y</mi><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial^2f}{\\partial x\\partial y}=\\frac{\\partial^2f}{\\partial y\\partial x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5511em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.07em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.5511em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.07em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> with different assumptions.</p>",
        "id": 372151787,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688430786
    },
    {
        "content": "<p>Yes, and clearly for an example like that mathlib wants to have a collection of theorems, possibly with overlapping sets of hypotheses, sufficient to cover essentially every occasion one would want to conclude that partial derivatives commute.</p>",
        "id": 372151937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688430861
    },
    {
        "content": "<p>There won't just be a single theorem that suffices to cover every occasion. But we would prefer fewer rather than more!</p>",
        "id": 372152038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688430921
    },
    {
        "content": "<p>including potentially more \"specialized\" hypotheses if the more general form is difficult to apply in practice</p>",
        "id": 372152043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688430924
    },
    {
        "content": "<p>And \"more difficult to apply in practice\" can have a pretty low threshold --- of course it's lovely when generalising a theorem only involved generalising a type class, and none of the call sites need to change, but if generalising adds an interesting side condition that was trivial in the special case, of course we need to leave the special case in place (but can replace its proof with appealing to the general case + discharging the trivial side condition).</p>",
        "id": 372152311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688431058
    },
    {
        "content": "<p>But if the only argument for keeping the specialised proof is \"it is easier to understand\" (alternatively, sometimes a specialised proof actually proves more in the specialised case --- but then that should be extracted into additional lemmas that only apply in the specialised case, thereby justifying keeping the specialised proof), then I think that is probably outside the remit of mathlib.</p>",
        "id": 372152494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688431134
    },
    {
        "content": "<p>As an example of \"specialize or not\": we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=fderiv#doc\">docs#fderiv</a> for Fréchet derivatives of functions between normed spaces (there is a TODO about generalizing to topological vector spaces) but we specialize it as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=deriv#doc\">docs#deriv</a> for functions from the base field to a vector space. However, we do not:</p>\n<ul>\n<li>introduce a separate definition for real numbers;</li>\n<li>introduce a separate definition for functions from the base field to itself</li>\n</ul>\n<p>though we do specialize \"chain rule\" lemmas to different cases of scalars here or there.</p>",
        "id": 372157059,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688433203
    },
    {
        "content": "<p>Another example: we prove the inverse function theorem in higher dimension with very general assumptions, then specialize to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>.</p>",
        "id": 372157173,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688433266
    },
    {
        "content": "<p>I mean so w.r.t perceived mathlib culture, not math culture. Feynman does make that comparison in that video, but I interpreted that as an explanation of Tyler's point about having multiple specialized versions of a theorem, instead of one that is in great generality, but cannot be understood by the intended users. In addition to the examples I pointed out already, I remember when I was told that we have the geometric version of some functional analysis theorem (hyperplane separation theorem?), which is equivalent to Farkas' lemma. For many in my field, they would prefer the matrix version with the corresponding proof, for the same reasons as Tyler suggests.</p>",
        "id": 372215868,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1688458014
    },
    {
        "content": "<p>To give a concrete example, would mathlib be happy to take CS versions of concentration inequalities? I recall someone was working on them and wanted to add them with the proper generality.</p>",
        "id": 372219524,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1688458846
    },
    {
        "content": "<p>What do you mean by a CS version of a concentration inequality? Can you give an example?</p>",
        "id": 372219981,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1688458946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113488-general/topic/Should.20scilib.20and.20mathlib.20be.20separate.20libraries.3F/near/372219981\">said</a>:</p>\n<blockquote>\n<p>What do you mean by a CS version of a concentration inequality? Can you give an example?</p>\n</blockquote>\n<p>Chebyshev's, Chernoff (all variants), Azuma, Hoeffding etc.</p>",
        "id": 372220476,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1688459076
    },
    {
        "content": "<p>All  in discrete probability.</p>",
        "id": 372221458,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1688459296
    },
    {
        "content": "<p>These are concentration inequalities indeed, but what I don't see is how a \"CS version\" would differ from a \"math version\".<br>\nMy main field of work is designing and analysing sequential learning algorithms and I use these inequalities all the time, but to me they don't come in CS/math variants.</p>",
        "id": 372221497,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1688459306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Should.20scilib.20and.20mathlib.20be.20separate.20libraries.3F/near/372221458\">said</a>:</p>\n<blockquote>\n<p>All in discrete probability.</p>\n</blockquote>\n<p>Oh I think I see your point now. Thanks for the clarification.</p>",
        "id": 372221709,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1688459368
    },
    {
        "content": "<p>I can see that ML researchers have a higher threshold for math abstraction, but even there, the abstractions are simplified. For example, when working with norms, many ML researchers tend to default to l1 or l2 norms</p>",
        "id": 372222187,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1688459493
    },
    {
        "content": "<p>You might be interested in seeing my summer project, Shreyas. <a href=\"https://github.com/YaelDillies/LeanAPAP/tree/master/src/prereqs\">In the prerequisites</a> I have discrete Lp norms, discrete convolution, the Marcinkiewicz-Zygmund inequality (quantitative, for deterministic functions), and I believe all those belong in mathlib.</p>",
        "id": 372247069,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688464812
    },
    {
        "content": "<p>20 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/LeanAPAP\">#general &gt; LeanAPAP</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 372478082,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688538697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Shall we move this topic to the <a class=\"stream\" data-stream-id=\"395462\" href=\"/#narrow/stream/395462-Natural-sciences\">#Natural sciences</a> stream, too?</p>",
        "id": 373490566,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1688824289
    }
]