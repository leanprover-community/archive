[
    {
        "content": "<blockquote>\n<p>it is unfortunately still an open problem to figure out how to actually turn these kinds of \"work out this number\" question into a formal theorem statement without giving away information</p>\n</blockquote>\n<p>FWIW, here is a Lean formalization of the problem that I banged out just now, with the \"missing number\" labelled via a comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># International Mathematical Olympiad 1981, Problem 6</span>\n\n<span class=\"cm\">Suppose that f : ℕ × ℕ → ℕ satisfies</span>\n\n<span class=\"cm\"> 1) f (0, y) = y + 1</span>\n<span class=\"cm\"> 2) f (x + 1, 0) = f (x, 1),</span>\n<span class=\"cm\"> 3) f (x + 1, y + 1) = f (x, f (x + 1, y))</span>\n\n<span class=\"cm\">for all x y ∈ ℕ.</span>\n\n<span class=\"cm\">Determine f (4, 1981).</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Imo1981Q6</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> fill_in_the_blank -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">solution_value</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Imo1981Q6</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"mi\">1981</span> <span class=\"bp\">=</span> <span class=\"n\">solution_value</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 394119583,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696114667
    },
    {
        "content": "<p>see <a href=\"https://dwrensha.github.io/compfiles/problems/Compfiles.Imo1981P6.html\">https://dwrensha.github.io/compfiles/problems/Compfiles.Imo1981P6.html</a>, generated from <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/af54de06124c7b294900a878061a02d3b474a406/MathPuzzles/Imo1981Q6.lean\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/af54de06124c7b294900a878061a02d3b474a406/MathPuzzles/Imo1981Q6.lean</a></p>",
        "id": 394119586,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696114675
    },
    {
        "content": "<blockquote>\n<p>And the second one they claim to solve is IMO 1974 P5 but this is not in the dataset as far as I can see (I can't find it here <a href=\"https://github.com/openai/miniF2F/tree/main\">https://github.com/openai/miniF2F/tree/main</a>) </p>\n</blockquote>\n<p>Here it is: <a href=\"https://github.com/openai/miniF2F/blob/4e433ff5cadff23f9911a2bb5bbab2d351ce5554/lean/src/valid.lean#L1602-L1608\">https://github.com/openai/miniF2F/blob/4e433ff5cadff23f9911a2bb5bbab2d351ce5554/lean/src/valid.lean#L1602-L1608</a></p>",
        "id": 394137339,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696128728
    },
    {
        "content": "<p>(and here's my more faithful formalization, requiring both directions of the implication: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/18ab1833dcc4c962e8d6191e58ed23b36d1269ac/MathPuzzles/Imo1974Q5.lean#L68-L76\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/18ab1833dcc4c962e8d6191e58ed23b36d1269ac/MathPuzzles/Imo1974Q5.lean#L68-L76</a> )</p>",
        "id": 394137389,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696128794
    },
    {
        "content": "<p>So in both cases your solution to the problem is <em>not</em> \"prove a theorem\", it's \"come up with some data yourself and then prove a theorem\". Am I right thinking that in both cases the data can just be the question <em>statement</em> and the solution to the IMO problem can just basically be <code>rfl</code> though?</p>",
        "id": 394161117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696142356
    },
    {
        "content": "<p>In the code pasted above, it seems as if the hypothesis is not enough to determine <code>f</code>, so the solution value cannot be defined to make this <code>rfl</code>.</p>",
        "id": 394187645,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696155517
    },
    {
        "content": "<blockquote>\n<p>Am I right thinking that in both cases the data can just be the question statement and the solution to the IMO problem can just basically be rfl though?</p>\n</blockquote>\n<p>In general, yes you are right. A <code>fill_in_the_blank</code> needs a human to judge whether a solution should be accepted or not: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/18ab1833dcc4c962e8d6191e58ed23b36d1269ac/MathPuzzles/Meta/ProblemExtraction.lean#L81-L88\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/18ab1833dcc4c962e8d6191e58ed23b36d1269ac/MathPuzzles/Meta/ProblemExtraction.lean#L81-L88</a></p>",
        "id": 394193786,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696158236
    },
    {
        "content": "<p>So, yes, <em>completely automated</em> scoring of IMO problems is still an open problem. But the amount of work that human scorers will need to do to judge <code>fill_in_the_blank</code> solutions should be pretty small, and I don't see it as a barrier to running the IMO Grand Challenge. (It might be more of a barrier to <em>participants</em> in the Grand Challenge, because having a human in the loop for a large training run could be expensive.)</p>",
        "id": 394196095,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696159310
    },
    {
        "content": "<p>At least when the answer is an integer, instead of having an arbitrary term to be filled in the <code>fill_in_the_blank</code>one can fill in to an elaborator accepting only numerical literals. Then the value can be checked. This can be extended a bit (for instance parsing rationals/floats as well).</p>",
        "id": 394211587,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696167108
    },
    {
        "content": "<p>Yeah I was about to say the same thing. I’m not familiar at all with IMO type problems. What other kinds of data appear in IMO problems?</p>",
        "id": 394211935,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696167328
    },
    {
        "content": "<p>Here is a crude implementation just to illustrate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"natural:\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"s2\">\"only\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">Expr.lit</span> <span class=\"o\">(</span><span class=\"n\">Literal.natVal</span> <span class=\"n\">n.getNat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">natural</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"n\">only</span> <span class=\"c1\">-- 3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fillIn</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">natural</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"n\">only</span>\n\n<span class=\"c1\">-- #eval natural: 3 + 4 only -- Error</span>\n</code></pre></div>",
        "id": 394212355,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696167562
    },
    {
        "content": "<p>I mean where <code>3</code> is filled in should be blank (or a placeholder).</p>",
        "id": 394212420,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696167598
    },
    {
        "content": "<p>Here's a more interesting <code>fill_in_the_blank</code> from Romania 1998: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/18ab1833dcc4c962e8d6191e58ed23b36d1269ac/MathPuzzles/Romania1998Q12.lean#L558-L559\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/18ab1833dcc4c962e8d6191e58ed23b36d1269ac/MathPuzzles/Romania1998Q12.lean#L558-L559</a></p>",
        "id": 394213317,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696168093
    },
    {
        "content": "<blockquote>\n<p>instead of having an arbitrary term to be filled in the <code>fill_in_the_blank</code>, one can fill in to an elaborator accepting only numerical literals</p>\n</blockquote>\n<p>Note that it's not actually feasible to write the solution data as a literal in Imo1981P6: it's <code>(2^·)^[1984] 1 - 3</code>, which is too big to evaluate.</p>",
        "id": 394213678,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696168291
    },
    {
        "content": "<p>Also, if we want to have an extended discussion on this topic, we should probably stop hijacking the Lyra thread. :)</p>",
        "id": 394213771,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696168338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lyra/near/394211935\">said</a>:</p>\n<blockquote>\n<p>Yeah I was about to say the same thing. I’m not familiar at all with IMO type problems. What other kinds of data appear in IMO problems?</p>\n</blockquote>\n<p>In the other example which the paper is claiming to solve, the actual question asks for a subset of the positive reals plus a proof that this is the range of a certain function. The answer is the open interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span> in this case. The formalisation gives this open interval explicitly in the question but doesn't even ask to prove that it's the range, it just asks the far far easier question to prove that it contains the range. I agree with David, let's stop hijacking this thread.</p>",
        "id": 394223751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696172595
    },
    {
        "content": "<p>16 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Lyra\">#Machine Learning for Theorem Proving &gt; Lyra</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 394334921,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696228344
    },
    {
        "content": "<p>I think it's interesting to discuss how elaborators can help make these problem statements more precise. So I've moved the discussion to a new thread, so that we stop the hijacking but don't stop the discussion <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 394335034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696228388
    },
    {
        "content": "<p>In the case of <code>Nat</code>, <code>Int</code>, <code>Rat</code>, I conjecture that \"fill in the blank\" can always (= 99% of the cases) be an expression made up of numerals and basic arithmetic operations: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>^</code>.</p>",
        "id": 394335393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696228526
    },
    {
        "content": "<p>Publishing a few of these \"find\" questions with some clearly specified restriction on the \"found\" term would be great. Maybe it could even include enough examples to cover the possibilities:</p>\n<ul>\n<li>\"the human markers will check that ...\"</li>\n<li>\"you must use this term elaborator ...\"</li>\n<li>\"you must given a term of this inductive type representing a class of formulas ...\"</li>\n</ul>",
        "id": 394364417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696236603
    },
    {
        "content": "<p>One way to get a sense of what the blanks look like is to look at one of the shortlists (such as <a href=\"https://www.imo-official.org/problems/IMO2022SL.pdf\">this one</a>) and see what form the values in the \"Answers\" subsections take.</p>",
        "id": 394422366,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696251467
    },
    {
        "content": "<p>A quick summary of all such answers for the shortlist I linked:</p>\n<div class=\"codehilite\" data-code-language=\"Todotxt\"><pre><span></span><code>fun k =&gt; k + 4\n{ fun x =&gt; 1 / x }\n{ 2, 3, 4 }\n{ ( n + 1 ) / n | n \\in \\ZZ, n \\ne 0 }\n506\n{ (n,k) : N x N // n \\le k \\le (3 n + 1) / 2 }\n2271380\n{ c : Fin n \\to N // sum i * c i = n * (n + 1) / 2 (mod n) }\nfun n =&gt; if exists i, n = 2^i then 1 else 2\n3\nfun n =&gt; 2 * n ^ 2 - 2 * n + 1\n(2500, 7500)\n1344\n7\nfun a d =&gt; floor (logb a d)\n{ (2,2,2), (3,4,3) }\n</code></pre></div>\n<p>As you can see there are a few numeric literals, but there are also functions, and sets. Besides the basic arithmetic operations, the functions also seem to use if-then-else and inequalities.</p>",
        "id": 394426359,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696252392
    },
    {
        "content": "<p>There is also a collection I made some time ago: <a href=\"http://www.olsak.net/mirek/determine-answers.txt\">http://www.olsak.net/mirek/determine-answers.txt</a></p>",
        "id": 394426746,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1696252496
    },
    {
        "content": "<p>ah, I think I may rename my <code>fill_in_the_blank</code> to <code>determine</code></p>",
        "id": 394433073,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696253890
    }
]