[
    {
        "content": "<p>Hello!</p>\n<p>Today I added a <a href=\"https://github.com/dwrensha/compfiles#checking-solutions\"><code>checkSolution</code></a> executable to my <a href=\"https://github.com/dwrensha/compfiles\">compfiles</a> repo. (The repo was until recently named \"math-puzzles-in-lean-4\".)</p>\n<p>With this addition, we now have an end-to-end demonstration of what the inputs and outputs of an IMO Grand Challenge competition might look like.</p>\n<p>To start, we extract spoiler-free problem files:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>lake<span class=\"w\"> </span><span class=\"nb\">exec</span><span class=\"w\"> </span>extractProblems\n</code></pre></div>\n<p>Then the contents of the <code>_extracted/problems/</code> directory are Lean files ready to be passed as input to an IMO Grand Challenge solver.</p>\n<p>For example, this is <code>_extracted/problems/Imo2022P2.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Positive.Field</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># International Mathematical Olympiad 2022, Problem 2</span>\n\n<span class=\"cm\">Let ℝ+ be the set of positive real numbers.</span>\n<span class=\"cm\">Determine all functions f: ℝ+ → ℝ+ such that</span>\n<span class=\"cm\">for each x ∈ ℝ+, there is exactly one y ∈ ℝ+</span>\n<span class=\"cm\">satisfying</span>\n\n<span class=\"cm\">  x·f(y) + y·f(x) ≤ 2</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Imo2022P2</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">PosReal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℝ+\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PosReal</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> determine -/</span> <span class=\"n\">abbrev</span> <span class=\"n\">solution_set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imo2022_p2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">solution_set</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">two_pos</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>A solver's job is to accept a file like this and to fill in the <code>sorry</code>s (and possibly add other declarations and Mathlib imports). The declaration marked <code>determine</code> is special, in that the term filled in there will be judged by a human grader.</p>\n<p>The solver gives us back a <code>solution.lean</code>, and we pass that to <code>checkSolution</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>checkSolution<span class=\"w\"> </span>Imo2022P2<span class=\"w\"> </span>solution.lean\n<span class=\"go\">* compiling problem into olean ...</span>\n<span class=\"go\">_check/Imo2022P2.lean:22:23: warning: declaration uses 'sorry'</span>\n<span class=\"go\">_check/Imo2022P2.lean:24:8: warning: declaration uses 'sorry'</span>\n<span class=\"go\">* compiling solution into olean ...</span>\n<span class=\"go\">* verifying types and axioms ...</span>\n<span class=\"go\">* replaying environment ...</span>\n<span class=\"go\">* collecting any 'determine' declarations ...</span>\n<span class=\"go\">determine Imo2022P2.solution_set := {fun x =&gt; 1 / x}</span>\n<span class=\"go\">* verified!</span>\n</code></pre></div>\n<p>The checker verifies that each declaration of the problem has a corresponding declaration in the solution, with a definitionally equal type.</p>\n<p>After the checker runs, all that's left is for the human grader to verify that the <code>determine</code> term looks good, and here <code>{fun x =&gt; 1 / x}</code> indeed does look good.</p>\n<p>Does this all sound reasonable? I'm interested in any feedback.</p>",
        "id": 400638301,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699319139
    }
]