[
    {
        "content": "<p>In this PR, I add a coercion from the units of the ring of integers <code>(𝓞 K)ˣ</code> of a number field  to the number field <code>K</code>. I have some code that does that but I am not sure it is the right way to do it. On the suggestion of <strong>Riccardo Brasca</strong>, I am asking here to get some experts feedback. Here is a skeleton of the code as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.NumberField.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">NumberField.Units</span>\n\n<span class=\"sd\">/-- The `MonoidHom` from the group of units `(𝓞 K)ˣ` to the field `K`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">coe_to_field</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"bp\">→*</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Units.coeHom</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">Units.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The coercion of `x : (𝓞 K)ˣ` into `K`. -/</span>\n<span class=\"kd\">@[coe]</span> <span class=\"kd\">def</span> <span class=\"n\">to_field</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">coe_to_field</span> <span class=\"n\">K</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_to_field_injective</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">coe_to_field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Units.eq_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">SetCoe.ext</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">to_field</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coe_to_field_injective</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_iff.mp</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_coe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_root_.map_pow</span> <span class=\"o\">(</span><span class=\"n\">coe_to_field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_zpow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_root_.map_zpow</span> <span class=\"o\">(</span><span class=\"n\">coe_to_field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_one</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.coe_injective.ne_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">_root_.Units.ne_zero</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">NumberField.Units</span>\n</code></pre></div>",
        "id": 379904850,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1690674461
    },
    {
        "content": "<p>There is an algebra instance for this but it was disabled in lean3 due to diamonds. It shouldn't be in lean4</p>",
        "id": 379910651,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690677447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235748.20.60NumberField.20Units.60/near/379910651\">said</a>:</p>\n<blockquote>\n<p>There is an algebra instance for this but it was disabled in lean3 due to diamonds. It shouldn't be in lean4</p>\n</blockquote>\n<p>What do you mean by `It shouldn't be in Lean4'?</p>",
        "id": 379911639,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1690677811
    },
    {
        "content": "<p>In lean4 the diamond shouldn't exist due to eta iirc, so it can be turned on. I think it's on the ring of integers basic file</p>",
        "id": 379915775,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690679458
    },
    {
        "content": "<p>Do you mean this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ringOfIntegersAlgebra</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am not sure I see how this is related to my question. In any case: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6244\">#6244</a></p>",
        "id": 379919133,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1690681114
    }
]