[
    {
        "content": "<p>This is an ongoing WIP but I need some advice.</p>\n<p>For my work in group actions, I needed equivariant maps between two <code>MulAction</code> of various groups, related by a group morphism. I had defined an ad hoc type of equivariant map, but it seemed better to enlarge the definition of <code>MulActionHom</code> so as to allow this kind of map, and to adjust the rest of Mathlib as needed.</p>\n<p>The main issue, for the moment, is how the <code>map_smul</code> map should be named.<br>\nIn <code>MulActionHom</code>, I use <code>map_smul'</code>, with some <code>_root_.map_smul</code>.<br>\nHowever, for <code>LinearMap</code>, the convention was <code>map_smulₛₗ</code>, while <code>map_smul</code> is reserved for truly linear (not semilinear) maps.<br>\nWhat I did led to duplicates which sometimes confuse Lean.</p>",
        "id": 379814378,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690640491
    },
    {
        "content": "<p>I think the safest bet is to follow the semilinear approach: use <code>map_smulₑ</code> for the equivariant case (or some other abbreviation of \"equivariant\"; subscript q seems to be missing from Unicode), and <code>map_smul</code> for \"true\" mul actions. With one consistent name there should be no problem.</p>",
        "id": 380362031,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690813071
    },
    {
        "content": "<p>Alternatively, we could abuse notation and write <code>map_smulₛₗ</code> throughout, also for equivariant non-linear morphisms. (Or go the other way and rename <code>map_smulₛₗ</code> to <code>map_smulₑᵥ</code>!)</p>",
        "id": 380362352,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1690813118
    },
    {
        "content": "<p>Thank you Anne!<br>\nThere are a few things I don't really understand with the names of fields in classes.</p>\n<ul>\n<li>\n<p>It seems that they are sometimes primed (such as in <code>map_smul'</code>) and something such as <code>_root_.map_smul</code> allows to access the field. </p>\n</li>\n<li>\n<p>Should the class/type of equivariant maps be called <code>MulActionHom</code>, or <code>MulActionSemihom</code> ?</p>\n</li>\n<li>\n<p>It is natural to define <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> so that it simply <em>extends</em> <code>MulActionHom</code>, but then the field <code>map_smulₑ</code> should be renamed to <code>map_smulₛₗ</code> unless one wishes to adjust stuff all over mathlib. Or maybe <code>MulActionSemihom</code> uses <code>map_smulₛₗ</code>?</p>\n</li>\n</ul>",
        "id": 380425961,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690823001
    },
    {
        "content": "<p><code>_root_.map_smul</code> doesn't allow you access to the field; instead, your are using the lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SMulHomClass.map_smul#doc\">docs#SMulHomClass.map_smul</a> (this is actually an <code>export</code>ed field of the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SMulHomClass#doc\">docs#SMulHomClass</a> which is why you can just write <code>map_smul</code>) which takes a <code>SMulHomClass</code> argument (so it also applies to algebra homomorphisms for example), whereas the field on a morphism doesn't allow such generalities. I think we use <code>map_smul'</code> as opposed to <code>map_smul</code> to avoid naming conflicts when the namespace is open (but I could be wrong about that!)</p>",
        "id": 380433763,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690824565
    },
    {
        "content": "<p>Before we added <code>SMulHomClass</code> etc, we had <code>LinearMap.map_smul'</code> (uses <code>toFun</code>) and <code>LinearMap.map_smul</code> (uses coercion).</p>",
        "id": 380436575,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690825095
    },
    {
        "content": "<p>Now we can migrate to protected non-primed fields + <code>map_*</code> in the root NS.</p>",
        "id": 380436801,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690825144
    },
    {
        "content": "<p>I think having the primed fields is still probably a good idea</p>",
        "id": 380437116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690825207
    },
    {
        "content": "<p>Because it's an indication that they shouldn't be used</p>",
        "id": 380437156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690825214
    }
]