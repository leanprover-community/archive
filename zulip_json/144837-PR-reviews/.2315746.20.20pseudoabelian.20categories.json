[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/11817\">#11817</a> I start adding constructions/properties of pseudoabelian categories and of the Karoubi envelope. This PR is very basic. Future PR may include showing that applying twice the Karoubi envelopes gives the Karoubi envelope (up to equivalence), that if a category has finite biproducts, the same applies to its Karoubi envelope, that functors and natural transformations can be extended to the Karoubi envelope, that homological_complex or simplical_object categories are pseudoabelian if the base category is.</p>",
        "id": 270682282,
        "sender_full_name": "Joël Riou",
        "timestamp": 1643963285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> That's cool! I really look forward to defining some categories of motives. But Chow's lemma will be a bit of a roadblock, I guess.</p>",
        "id": 270683620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643964095
    },
    {
        "content": "<p>General suggestion: split this into two files: <code>basic.lean</code> and <code>karoubi.lean</code>.<br>\nIn <code>basic.lean</code> you can have the definition of <code>pseudoabelian</code> (which doesn't really need to rely on the definition of the Karoubi envelope). There you can also show that every abelian category is pseudoabelian, and other \"trivial\" things like that.</p>",
        "id": 270683831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643964207
    },
    {
        "content": "<p>Thanks for the suggestions! I have just split it into two files.</p>",
        "id": 270706010,
        "sender_full_name": "Joël Riou",
        "timestamp": 1643976883
    },
    {
        "content": "<p>BTW this construction has little to do with the additive structure. In general it's also called the idempotent completion and it can be constructed in the same way (<a href=\"http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/Karoubi+envelope#InComponents\">http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/Karoubi+envelope#InComponents</a>).<br>\nHave you thought about generalizing the construction to an arbitrary category, and then layering the additive structure on top?</p>",
        "id": 270707478,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643977834
    },
    {
        "content": "<p>I had considered doing so, but I was not sure there was any significant need for it. I might try to remove some [preadditive C] assumptions for constructions and statements which do not require it...</p>",
        "id": 270708599,
        "sender_full_name": "Joël Riou",
        "timestamp": 1643978511
    },
    {
        "content": "<p>I have generalized the definition (with different criteria of idempotent completeness) and the construction of the Karoubi envelope now applies to any category.</p>",
        "id": 270931912,
        "sender_full_name": "Joël Riou",
        "timestamp": 1644208684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> Thanks for that refactor. I left some comments.</p>",
        "id": 270998827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644249344
    },
    {
        "content": "<p>Thanks for the comments! Apart from a possible name change for the lemma <code>karoubi.p_comm</code>, it should be mostly ok now.</p>",
        "id": 271005222,
        "sender_full_name": "Joël Riou",
        "timestamp": 1644251754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> Cool. I left 3 more comments (-;</p>",
        "id": 271010049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644253815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> Thanks a lot for this PR. I kicked it on the merge queue.</p>",
        "id": 271238887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644391025
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/11931\">#11931</a>, I show that applying twice the karoubi construction of idempotent completion gives an equivalent category.</p>",
        "id": 271255123,
        "sender_full_name": "Joël Riou",
        "timestamp": 1644401785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> , does the karoubian envelope functor have an universal property that mathlib can check?</p>",
        "id": 271555286,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644574640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311931.20.20pseudoabelian.20categories/near/271555286\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> , does the karoubian envelope functor have an universal property that mathlib can check?</p>\n</blockquote>\n<p>In some sense, <code>karoubi</code> is more or less a left adjoint to the inclusion of idempotent complete categories in the category of categories.<br>\nMore precisely, if <code>C</code> is any category and <code>D</code> is idempotent complete, it seems that there is an equivalence of categories between the categories of functors <code>C ⥤ D</code> and <code>karoubi C ⥤ D</code>. (More practically, a functor <code>C ⥤ D</code> extends canonically to <code>karoubi C ⥤ karoubi D</code>, and if <code>D</code> is pseudoabelian, we get a functor <code>karoubi C ⥤ D</code>, and natural transformations between functors in <code>karoubi C ⥤ D</code> identifies to natural transformations in <code>C ⥤ D</code>.)</p>",
        "id": 271573218,
        "sender_full_name": "Joël Riou",
        "timestamp": 1644585007
    },
    {
        "content": "<p>Did you formalise these assertions yet?</p>",
        "id": 271616407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644603519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Almost! I have already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">karoubi_universal'</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">],</span>\n    <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">karoubi</span> <span class=\"n\">D</span> <span class=\"bp\">≌</span> <span class=\"n\">karoubi</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">karoubi</span> <span class=\"n\">D</span>\n</code></pre></div>\n<p>I just need to \"replace\" <code>karoubi D</code> by the equivalent category <code>D</code> when <code>D</code> is idempotent complete.</p>",
        "id": 271617015,
        "sender_full_name": "Joël Riou",
        "timestamp": 1644603797
    },
    {
        "content": "<p>Nice!</p>",
        "id": 271617548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644604064
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/12270\">#12270</a>, I define instances expressing that functor categories <code>J ⥤ C</code> are idempotent complete when the category <code>C</code> is idempotent complete. In particular, this applies to categories of (co)simplicial objects.</p>",
        "id": 273228181,
        "sender_full_name": "Joël Riou",
        "timestamp": 1645795570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> has marked this topic as resolved.</p>",
        "id": 273228186,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645795574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> has marked this topic as unresolved.</p>",
        "id": 273228237,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645795606
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/12333\">#12333</a>, I show that the category <code>karoubi C</code> is additive (i.e. preadditive and has_finite_biproducts) if <code>C</code> is.</p>",
        "id": 273460186,
        "sender_full_name": "Joël Riou",
        "timestamp": 1646038444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>, would <code>complement</code> be a better name than <code>supplement</code> in this PR? I don't recall seeing \"supplement\" used in this way before.</p>",
        "id": 273559369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646085137
    },
    {
        "content": "<p>Otherwise, this PR looks good.</p>",
        "id": 273559824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646085363
    },
    {
        "content": "<p>Thanks! Ah, I might have done a Frenchism: we would make a distinction between the \"complémentaire\" of a subset in a set and a \"supplémentaire\" of a subspace in a vector space. Indeed, it seems that \"complement\" would fit better with the naming conventions in other areas of mathlib (e.g. <code>ring_theory/simple_module.lean</code>)</p>",
        "id": 273564969,
        "sender_full_name": "Joël Riou",
        "timestamp": 1646088063
    },
    {
        "content": "<p>In PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15746\">#15746</a>, I construct a functor <code>(C ⥤ karoubi D) ⥤ (karoubi C ⥤ karoubi D)</code> which expresses an extension property of functors (it is actually an equivalence of categories). This will be used in the proof of the Dold-Kan equivalence.</p>",
        "id": 292302896,
        "sender_full_name": "Joël Riou",
        "timestamp": 1659854156
    }
]