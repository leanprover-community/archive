[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, are you still interested in having your mathlib3 PR <a href=\"https://github.com/leanprover-community/mathlib/pull/18789\">!3#18789</a> merged. It is marked as <code>not-too-late</code>, but also marked <code>WIP</code>. We'd like to clear out this backlog so it would be good to know your intentions here.</p>",
        "id": 378336378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690260835
    },
    {
        "content": "<p>I think it would make sense to integrate this with the more general Matroid Theory development, but I can't really tell how much work that would be (but this would probably mean not to merge the mathlib3 PR). <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> what do you think?</p>\n<p>What the current PR is missing is a refactor of Hall's Theorem using the more general result, but that would not be a lot of work.<br>\nHowever, I'm at a workshop this week that I am organizing, and so I won't have time to work on this now.</p>",
        "id": 378470036,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1690290707
    },
    {
        "content": "<p>I agree, and I think it'd be doable, though I haven't looked at the proof in detail. One would have to define a constructor for <code>Matroid</code> as per <code>rank_fn</code> in your code, and then to prove it gives a <code>Matroid</code> that is <code>Finitary</code>, whose independent sets are precisely the finite sets with rank equal to cardinality. Then it would be a matter of using the existing <code>Matroid</code> API to make the proof go through, which possibly involves adding a few lemmas for <code>Finitary</code>.</p>\n<p>The relevant (lean4) code is here : <a href=\"https://github.com/apnelson1/Matroid\">https://github.com/apnelson1/Matroid</a>. I'm planning to PR the first <code>Data.Matroid</code> contribution imminently (review is almost complete for the last prereq), but the <code>rank</code> stuff is a few PRs away. So if there's no hurry, it will fit in smoothly in (I imagine) a month or two.</p>",
        "id": 378474247,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1690291464
    },
    {
        "content": "<p>OK, good. That time frame would fit quite well for me (I'll be back from vacation).</p>",
        "id": 378479172,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1690292306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, would it be okay with you, in that case, if we closed <a href=\"https://github.com/leanprover-community/mathlib/pull/18789\">!3#18789</a> for now, and plan to integrate this work later? It's also okay to leave it open: we do want to clear out the mathlib3 queue so we can stick a fork in it and say we're done, but not at the expense of losing appealing contributions.</p>",
        "id": 378963782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690412893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It is OK with me to close it (unless that would mean that the code gets deleted eventually; I would like to keep it on record at least until a version of it makes it into mathlib(4)).</p>",
        "id": 379033121,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1690442327
    },
    {
        "content": "<p>No, there are no plans that anything will even be deleted from the mathlib3 repository!</p>",
        "id": 379037055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690443164
    },
    {
        "content": "<p>I've closed.</p>",
        "id": 379037210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690443203
    }
]