[
    {
        "content": "<p>I've left a small review here, but this needs someone with algebraic geometry knowledge to say if the small amount of breakage here is a problem.</p>",
        "id": 380791275,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690911931
    },
    {
        "content": "<p>This has been waiting for a while, with <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> being against it mainly (I think specifically the <code>MonoidHomClass</code> details). <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>  was working on this independently in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8673\">#8673</a>, so I think it's definitely a wanted generalisation - what should be the way forward here?</p>",
        "id": 404625053,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701174646
    },
    {
        "content": "<p>Might worth first merging master and seeing if the slowdowns still occur after the AG fix in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7747\">#7747</a>.</p>",
        "id": 404625481,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701174821
    },
    {
        "content": "<p>If the result is still undesirable, I think specializing the lemmas to <code>MonoidHom</code> and <code>RingHom</code> and allowing some duplication is acceptable as well.</p>",
        "id": 404626001,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701174980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236045.20refactor.20.60IsLocalRingHom.60/near/404626001\">said</a>:</p>\n<blockquote>\n<p>If the result is still undesirable, I think specializing the lemmas to <code>MonoidHom</code> and <code>RingHom</code> and allowing some duplication is acceptable as well.</p>\n</blockquote>\n<p>Yeah, this is precisely my position.</p>",
        "id": 404626134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701175026
    },
    {
        "content": "<p>I've merged master. I think the slowdowns aren't lemma related but actually instance related, but we'll see.</p>",
        "id": 404628709,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701175807
    },
    {
        "content": "<p>btw I don't really like the name <code>IsLocalRingHom</code>.</p>",
        "id": 404630048,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701176241
    },
    {
        "content": "<p>This surprises me because \"local ring homomorphism\" is what is used in the informal literature.</p>",
        "id": 404630651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701176426
    },
    {
        "content": "<p>I don't like it referring to \"Monoid homomorphisms satisfiying <code>IsUnit (f x) -&gt; IsUnit x</code>\".</p>",
        "id": 404633169,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701177220
    },
    {
        "content": "<p>What about <code>IsLocalHom</code> (and then <code>to_additive</code> can make <code>IsLocalAddHom</code>)?</p>",
        "id": 404633993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701177511
    },
    {
        "content": "<p>Reflecting units: that's just an implementation detail</p>",
        "id": 404635692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701178114
    },
    {
        "content": "<p>I think Andrew's point is that <code>Ring</code> doesn't have anything to do with the definition. (<span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> correct me if I'm wrong)</p>",
        "id": 404639167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701179310
    },
    {
        "content": "<p>Just like we now have <code>UniqueFactorizationMonoid</code></p>",
        "id": 404639204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701179324
    },
    {
        "content": "<p>Yeah, and I don't think \"local\" makes sense with arbitrary monoids?</p>",
        "id": 404639675,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701179478
    },
    {
        "content": "<p>Oh I found some <a href=\"https://www.math.unipd.it/~maurizio/rc/MonRC.pdf\">notes</a> online that call such maps \"local\". I guess I'm fine with <code>IsLocalHom</code> then.</p>",
        "id": 404639866,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701179529
    },
    {
        "content": "<p>This seemed to compile; the two heartbeat bumps seemed to be needed, and so did the two instances where I had to call an instance manually. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Localization.isLocalRingHom_localRingHom#doc\">docs#Localization.isLocalRingHom_localRingHom</a> has a parameter <code>hIJ</code> that states an equality and yet it's an instance; it seems Lean used to deal with this by putting in <code>rfl</code> but it doesn't bother trying now!</p>",
        "id": 404683882,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701192774
    },
    {
        "content": "<p>Will it ever try anything else in <code>hIJ</code>?</p>",
        "id": 404683923,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701192792
    },
    {
        "content": "<p><code>hIJ</code> appears in the goal, so the instance synthesizer should have no problem inferring it?</p>",
        "id": 404716019,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701204788
    },
    {
        "content": "<p>ah, yes, I did just see that. :/</p>",
        "id": 404720763,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701206647
    }
]