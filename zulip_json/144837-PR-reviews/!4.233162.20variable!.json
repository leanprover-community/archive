[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, what would you like to do with <code>variable!</code>? It seems the options are:</p>\n<ul>\n<li>merge as is, as a tool that people can use but won't commit to mathlib</li>\n<li>wait, and you or someone else could add the <code>?</code> mode discussed <a href=\"#narrow/stream/287929-mathlib4/topic/variable\">previously</a></li>\n</ul>\n<p>There's also the question of what to do with the example <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> found where it gets the answer wrong. I'm happy if the solution to that is \"keep track of it\". :-)</p>",
        "id": 366033729,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686710618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I tried getting the <code>?</code> proposal to work in an ergonomic way, but there are a couple problems I ran into. Maybe I'll go check if anything in that work should be pushed into the PR and then we merge a first version without this feature?</p>",
        "id": 366035896,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686712114
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 366035969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686712183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I've just pushed the changes, which includes turning it into the less-emphatic <code>variable?</code> command. It now always suggests a \"try this\".</p>\n<p>I guess if you want a silent version in non-mathlib code, you could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"o\">(</span><span class=\"n\">drop</span> <span class=\"n\">info</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"kd\">variable</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or make a macro that expands to that.</p>",
        "id": 366043693,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686716681
    },
    {
        "content": "<p>The UI/ergonomics issues I had with the <code>variable! [Module R M] =&gt; [Semiring R] [AddCommMonoid M] [Module R M]</code> idea were that</p>\n<ol>\n<li>ideally you'd also elaborate what's before the <code>=&gt;</code> otherwise you don't get any info when you hover in an IDE, but then you need to handle elaborating these at the same time as the corresponding binder on the RHS to do it in a similar context to avoid confusing situations when there's some shadowing (ideally there would be none, but you don't want to be more confused than you already are), and there's no good way to link up binders on the LHS with the RHS short of a lossy equality that tries to throw away whitespace differences;</li>\n<li>figuring out how to get the unused variables linter to handle this more complicated syntax, given that I just copied the one for <code>variable</code> and the <code>unused_variables_ignore_fn</code> attribute is a dark art;</li>\n<li>questions around checking that the cached expanded binders actually are the expansion of the LHS binders.</li>\n</ol>",
        "id": 366044934,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686717386
    },
    {
        "content": "<p>(1) sounds solvable, you just need to use the same lctx for both elaborations and roll back the result</p>",
        "id": 366046184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686718048
    },
    {
        "content": "<p>the second part of (1) also sounds solvable, since you end up with two extended contexts and can compare them for expr equality (e.g. defeq)</p>",
        "id": 366046355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686718142
    },
    {
        "content": "<p>and I guess this is also (3)</p>",
        "id": 366046440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686718170
    },
    {
        "content": "<p>for 1 the problem isn't the rolling back, it's the figuring out how the LHS is a subsequence of the RHS to line up the binders, and this didn't really seem worth pursuing, at least to me right now.</p>\n<p>I'd considered a variant <code>variable! +[Semiring R] +[AddCommMonoid M] [Module R M]</code> to simplify the problem, but then it mixes all the added binders into the command, which goes against one of the goals of having a readable short version.</p>\n<p>The complexity is all based on the assumption that the <code>variable!</code> command's algorithm can be slow, so it's worth avoiding running it when there's a <code>=&gt;</code> cache, but maybe it's not slow enough for anyone to care in the end.</p>",
        "id": 366048868,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686719231
    },
    {
        "content": "<p>Oh, what if we go for the middle ground:</p>\n<ul>\n<li>don't actually use the cache, just recompute every time</li>\n<li>people by default leave the full <code>Try this:</code> output with <code>=&gt;</code> in place</li>\n<li>but whenever that is annoyingly slow, replace it with the part to the right of <code>=&gt;</code>.</li>\n</ul>\n<p>(Perfect being the enemy of good.)</p>",
        "id": 366054403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686721486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Ok, I think the middle ground is implemented now.</p>",
        "id": 366386270,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686813598
    }
]