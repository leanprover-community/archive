[
    {
        "content": "<p>Okay, re: <a href=\"https://github.com/leanprover-community/mathlib/pull/13996\">#13996</a>, I think that if M has commuting actions of <code>L</code> and <code>R</code> (maybe you can think of these as left and right actions, so R is syntactically Bᵒᵖ for some B, but it should really matter), and <code>L</code> is an <code>A</code> algebra, then <code>restrict_scalars A L M</code> should have an action of <code>A</code> and an action of <code>R</code>, and an instance saying these commute.</p>",
        "id": 282045994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316029
    },
    {
        "content": "<p>(It should not have an action of <code>L</code> anymore.)</p>",
        "id": 282046008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316051
    },
    {
        "content": "<p>In particular, for the instance I complained about in the PR, the docstring says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">When `M` is a right-module over a ring `S`, and `S` is an algebra over `R`, then `M` inherits a</span>\n<span class=\"sd\">right-module structure over `R`.</span>\n<span class=\"sd\">The preferred way of setting this up is</span>\n<span class=\"sd\">`[module Rᵐᵒᵖ M] [module Sᵐᵒᵖ M] [is_scalar_tower Rᵐᵒᵖ Sᵐᵒᵖ M]`.</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>and I agree with that doc-string completely.</p>\n<p>However the instance we need in this situation is <code>module Rᵐᵒᵖ (restrict_scalars Rᵐᵒᵖ Sᵐᵒᵖ M)</code>, and <em>this already exists</em>, by ignoring the presence of all the <code>ᵐᵒᵖ</code>s.</p>",
        "id": 282046228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316282
    },
    {
        "content": "<p>In the situation (not mentioned in the doc-string, but in the comment) where you have something that is an <code>R</code> and <code>Rᵐᵒᵖ</code> module with commuting actions (i.e. in normal language an <code>R</code>-<code>R</code>-bimodule), and <code>R</code> is an <code>S</code>-algebra and you want to obtain the resulting <code>S</code>-<code>S</code>-bimodule, then I think you either need to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">restrict_scalars</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">S</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or invent a new type synonym (or abbreviation?) for this situation.</p>",
        "id": 282046431,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316480
    },
    {
        "content": "<p>The problem is just that we are going to have <code>L</code>-<code>R</code> bimodules, and subalgebras <code>A</code> in <code>L</code> and <code>B</code> in <code>R</code>, and we want to restrict an <code>L-R</code> bimodule <code>M</code> to obtain the <code>A-B</code> bimodule. We have to have a way to express this. And then, in the special case that <code>L = R</code>, we need to make sure we use the same language.</p>",
        "id": 282046526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316576
    },
    {
        "content": "<blockquote>\n<p><code>restrict_scalars A L M</code> should have an action of <code>A</code> and an action of <code>R</code>, and an instance saying these commute.</p>\n</blockquote>\n<p>Putting aside the actual contents of my PR, I don't think it is even possible to define this <code>R</code> action without adding back the <code>L</code> action (that you wanted to get rid of) by accident</p>",
        "id": 282062638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652335961
    },
    {
        "content": "<p>Perhaps it helps to remember that <code>restrict_scalars</code> is really just a hack to avoid writing out annoying <code>is_scalar_tower</code> arguments; the latter spelling already works for considering the L-R bimodule as an A-B bimodule.</p>",
        "id": 282062913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652336217
    },
    {
        "content": "<p>The option of defining a new type synonym <code>restrict_scalars₂ A B L R M</code> is at least a viable one, but I'd be hesitant to add it until we actually need it.</p>",
        "id": 282063117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652336420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282062638\">said</a>:</p>\n<blockquote>\n<p>Putting aside the actual contents of my PR, I don't think it is even possible to define this <code>R</code> action without adding back the <code>L</code> action (that you wanted to get rid of) by accident</p>\n</blockquote>\n<p>Oh you mean that (maybe only for a commutative L?) the original L action would commute with itself, so if we wanted to carry along the <code>R</code> action on the <code>restrict_scalars</code> synonym, the same mechanism would bring along the <code>L</code> action as well.</p>",
        "id": 282076167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345438
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 282076179,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282062913\">said</a>:</p>\n<blockquote>\n<p>Perhaps it helps to remember that <code>restrict_scalars</code> is really just a hack to avoid writing out annoying <code>is_scalar_tower</code> arguments</p>\n</blockquote>\n<p>I said this before and I didn't convince anyone but FWIW I think our <code>restrict_scalars</code> is a misnomer and would be better called <code>enrich_scalars</code>. True restriction of scalars happens invisibly for us via the forgetful functors that the typeclass mechanism constantly applies. Also, although it can be incorrectly used as a hack to avoid writing out <code>is_scalar_tower</code> arguments, <code>restrict_scalars</code> is a necessary tool in some situations (e.g., if one has a vector space<br>\nover a field of characteristic zero and wishes to make use of the <code>ℚ</code>-algebra structure).</p>\n<p>Anyway I don't want to derail this thread.</p>",
        "id": 282076430,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652345604
    },
    {
        "content": "<p>Okay, so I guess I want to retract the statement that you quoted, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>. Instead we should look at the syntactic form of the rings acting, and only \"carrying along\" an <code>Rᵐᵒᵖ</code> action on a generic <code>restrict_scalars A L M</code>, but additionally carrying along any <code>L</code> action on <code>restrict_scalars Bᵐᵒᵖ Rᵐᵒᵖ M</code>.</p>",
        "id": 282076657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345728
    },
    {
        "content": "<p>I think then <code>restrict_scalars A L M</code> will then correctly be an <code>A-R</code> bimodule (ie commuting actions of <code>A</code> and <code>Rᵐᵒᵖ</code>), and nothing else,</p>",
        "id": 282076703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345758
    },
    {
        "content": "<p>while <code>restrict_scalars Bᵐᵒᵖ Rᵐᵒᵖ M</code> will be an <code>L-B</code> bimodule (ie commuting actions of <code>L</code> and <code>Bᵐᵒᵖ</code>).</p>",
        "id": 282076772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345778
    },
    {
        "content": "<p>Doesn't this suggestion mean we need a different spelling of restricting the scalars of an algebra to an algebra over a smaller ring?</p>",
        "id": 282083221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652349681
    },
    {
        "content": "<p>Namely, we have to use <code>restrict_scalars S R (restrict_scalars Sᵐᵒᵖ Rᵐᵒᵖ A)</code> for that case, which is rather annoying</p>",
        "id": 282086043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652351470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282076657\">said</a>:</p>\n<blockquote>\n<p>but additionally carrying along any <code>L</code> action on <code>restrict_scalars Bᵐᵒᵖ Rᵐᵒᵖ M</code>.</p>\n</blockquote>\n<p>furthermore this isn't actually possible, since <code>L</code> has nothing to match syntactically against</p>",
        "id": 282086079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652351499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282076430\">said</a>:</p>\n<blockquote>\n<p>Also, although it can be incorrectly used as a hack to avoid writing out <code>is_scalar_tower</code> arguments, <code>restrict_scalars</code> is a necessary tool in some situations (e.g., if one has a vector space<br>\nover a field of characteristic zero and wishes to make use of the <code>ℚ</code>-algebra structure).</p>\n</blockquote>\n<p>(this could be framed as a hack to avoid writing out the \"nonsense\" <code>[algebra ℚ A] [is_scalar_tower ℚ K A]</code>)</p>",
        "id": 282086630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652351825
    },
    {
        "content": "<p>Okay, I think I am retreating to the position that <code>restrict_scalars A L M</code> should carry no additional instances (beyond <code>module A ...</code>).</p>",
        "id": 282088086,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652352797
    },
    {
        "content": "<p>and if you need additional instances for a commuting right action, we ought to have a different type synonym...</p>",
        "id": 282088120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652352822
    },
    {
        "content": "<p>So <code>[algebra S R] [algebra R A] : algebra S (restrict_scalars S R A)</code> should no longer be true?</p>",
        "id": 282088200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652352855
    },
    {
        "content": "<p>I think it's innocuous enough to copy across the right action just so that for the two frequence cases (restricting a left module and restricting a bimodule over a commutative ring), it does the sensible thing.</p>",
        "id": 282088315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652352942
    },
    {
        "content": "<p>Note in particular that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars.lsmul\">docs#restrict_scalars.lsmul</a> only makes sense if <code>restrict_scalar R S M</code> is a bimodule over R, otherwise <code>module.End R (restrict_scalars R S M)</code> isn't actually an algebra.</p>",
        "id": 282088504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652353051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282088200\">said</a>:</p>\n<blockquote>\n<p>So <code>[algebra S R] [algebra R A] : algebra S (restrict_scalars S R A)</code> should no longer be true?</p>\n</blockquote>\n<p>Sorry, I'm being slow. Why couldn't we have this?</p>",
        "id": 282089213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652353394
    },
    {
        "content": "<p>In the wider context of this thread, the proposed change is that <code>algebra R A</code> induces <code>module Rᵐᵒᵖ A</code></p>",
        "id": 282089485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652353570
    },
    {
        "content": "<p>So to produce <code>algebra S (restrict_scalars S R A)</code>, we need to produce a <code>module Sᵐᵒᵖ (restrict_scalars S R A)</code> along the way</p>",
        "id": 282089509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652353593
    },
    {
        "content": "<p>We can't get away with only doing it when <code>A</code> is an algebra though (which is what I initially tried); we also need this instance if we want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_central_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">module.End</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>to be allowed, which we need for what I described in <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282088504\">this message</a></p>",
        "id": 282089746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652353790
    },
    {
        "content": "<p>27 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products\">#maths &gt; left vs right modules in tensor products</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 282433830,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652656251
    },
    {
        "content": "<p>Any more thoughts on this, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>?</p>",
        "id": 282602133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652772830
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 284392301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653932317
    },
    {
        "content": "<p>I vote in favour of merging this PR.</p>",
        "id": 284443252,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986064
    },
    {
        "content": "<p>I appreciate Scott's point about wanting control over whether <code>restrict_scalars</code> affects a set of right or left scalars (or both) but this can never be achieved with <code>restrict_scalars</code> as it stands because it only mentions one set of scalars so any instances to copy across other actions (e.g., \"right actions\") are underdetermined.</p>\n<p>For this, we would need something like what Eric mentions <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313996.20right.20actions.20on.20restrict_scalars/near/282063117\">above</a> <code>restrict_scalars₂ A B L R M</code>.</p>",
        "id": 284443322,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986126
    },
    {
        "content": "<p>That day may come but I think it should not block this PR as it's a separate concern.</p>",
        "id": 284443417,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986169
    },
    {
        "content": "<p>For emphasis, this Lean snippet indicates what I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.restrict_scalars</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">B</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Fails, can never work.</span>\n</code></pre></div>",
        "id": 284443880,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986444
    },
    {
        "content": "<p>There is still a choice to be made in the case that one has a left and right action of the same scalars. The following Lean snippet indicates what I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.restrict_scalars</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">L</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">L</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Fails, could work.</span>\n\n<span class=\"c1\">-- This is the instance that this PR proposes should work.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Fails, could work.</span>\n</code></pre></div>",
        "id": 284444605,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986879
    },
    {
        "content": "<p>Come to think of it, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> what do you think about allowing both <code>module Lᵐᵒᵖ</code> and <code>module Aᵐᵒᵖ</code> above?</p>",
        "id": 284444892,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653987030
    },
    {
        "content": "<p>Since Scott recently merged a PR that disabled the <code>L</code> instance, I'm inclined to leave the <code>Lᵐᵒᵖ</code> instance absent too, at least until someone actually needs it and then we can revisit the design</p>",
        "id": 284445155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653987154
    },
    {
        "content": "<p>I agree. I'm going to merge this. I'm confident I appreciate the issues at play.</p>",
        "id": 284445250,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653987216
    }
]