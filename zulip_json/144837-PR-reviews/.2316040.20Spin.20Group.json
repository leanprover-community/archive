[
    {
        "content": "<p>In this PR I mainly define lipschitz group, pin group and spin group in the way of conjugation.  Can I ask for some reviews or suggestions here?</p>",
        "id": 293491367,
        "sender_full_name": "Jiale Miao",
        "timestamp": 1660556537
    },
    {
        "content": "<p>For other reviews, note there was a bit of discussion about Spin groups at <a href=\"#narrow/stream/116395-maths/topic/Competing.20definitions.20for.20Pin.20groups\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Competing.20definitions.20for.20Pin.20groups</a></p>",
        "id": 293492933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660557382
    },
    {
        "content": "<p>Hi, I updated this PR, and I want to see how people think about the definitions here.  <br>\nThe definition of the Lipschitz group {𝑥 ∈ 𝐶𝑙(𝑉,𝑞) │ 𝑥 𝑖𝑠 𝑖𝑛𝑣𝑒𝑟𝑡𝑖𝑏𝑙𝑒 𝑎𝑛𝑑 𝑥𝑣𝑥⁻¹∈ 𝑉} is given by:<br>\n• Fulton, W. and Harris, J., 2004. Representation theory. New York: Springer, p.chapter 20.<br>\n• <a href=\"https://en.wikipedia.org/wiki/Clifford_algebra#Lipschitz_group\">https://en.wikipedia.org/wiki/Clifford_algebra#Lipschitz_group</a><br>\nBut they presumably form a group only in finite dimensions. We define lipschitz with closure of all the elements in the form of <code>ι Q m</code> and we show this definition is at least as large as the<br>\nother definition. The reverse statement presumably being true only in finite dimensions.</p>",
        "id": 295816073,
        "sender_full_name": "Jiale Miao",
        "timestamp": 1661768477
    },
    {
        "content": "<p>Here are some discussion about the latent ambiguity of definition :<br>\n<a href=\"https://mathoverflow.net/q/427881/172242\">https://mathoverflow.net/q/427881/172242</a> and <a href=\"https://mathoverflow.net/q/251288/172242\">https://mathoverflow.net/q/251288/172242</a></p>",
        "id": 295816122,
        "sender_full_name": "Jiale Miao",
        "timestamp": 1661768503
    },
    {
        "content": "<p>I plan to look at this once I'm back from vacation</p>",
        "id": 296891113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662150597
    },
    {
        "content": "<p>Ported to Lean 4 as <a href=\"https://github.com/leanprover-community/mathlib4/pull/9111\">#9111</a> , polishing the PR, discussions welcome <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 408359341,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702745316
    },
    {
        "content": "<p>About <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> , mathport ported <code>invertible_of_invertible_ι</code> to <code>invertibleOfInvertibleι</code> which is consistent with e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=invertibleOfMulInvertible#doc\">docs#invertibleOfMulInvertible</a> , but following <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=invOf#doc\">docs#invOf</a>_ι  I guess this should be named <code>invertibleOfInvertible_ι</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9076\">#9076</a> ?</p>",
        "id": 408428343,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702806531
    },
    {
        "content": "<p><code>invOf</code> is the name for the ⅟ operator, so I think the name is correct</p>",
        "id": 408428965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702807130
    },
    {
        "content": "<p>I mean do we have a convention that <code>ι</code> will always be connected with a underscore? As I've never seen it closely attached to another word in existing files and find it particularly unreadable.</p>",
        "id": 408429141,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702807278
    },
    {
        "content": "<p><code>invertibleOfInvertibleι</code> is an instance, right? <code>invOf_ι</code> is a lemma. I see no contradiction with the current names.</p>",
        "id": 408429612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702807602
    },
    {
        "content": "<p>Yes, I can see that it fit in with existing naming conventions, just confirming that's what we want when a greek letter is involved.</p>",
        "id": 408429675,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702807677
    },
    {
        "content": "<p>I don't think the nationality of the character has any bearing on the naming convention.</p>",
        "id": 408429741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702807712
    },
    {
        "content": "<p>Because following camelCase this should be an uppercase but when a Greek letter turns uppercase the meaning will be changed (in math) so it stays at the lowercase and has difficulty to be distinguished.</p>\n<p>Are there existing examples of this? It might become even less readable when there are multiple Greek letters.</p>",
        "id": 408429940,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702807920
    },
    {
        "content": "<p>OK, I searched Mathlib with <code>def.*[^_ ({.]ι</code> and found many existing examples, case settled.</p>",
        "id": 408430124,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702808061
    },
    {
        "content": "<p>Another case is <code>pinGroup</code> and <code>spinGroup</code>, both are how mathport ported, and they fit in the convention, just want to be sure that that's desired.</p>",
        "id": 408430649,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702808533
    },
    {
        "content": "<p>because they are submonoids?</p>",
        "id": 408432360,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702810273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and I have diverging opinions here</p>",
        "id": 408432379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702810295
    },
    {
        "content": "<p>I think the convention is pretty clear here (in my favor), but indeed there has been discussion about changing the conventionn</p>",
        "id": 408432465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702810355
    },
    {
        "content": "<p>Any link to previous discussions? I'm confused by def <code>unitaryGroup</code> and namespace <code>UnitaryGroup</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3699\">#3699</a> , should I do the same? Is it any good? (I thought namespace should be consistent with the name so dot notation can be used.)</p>",
        "id": 408432795,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702810685
    },
    {
        "content": "<p>As someone who is not Rémy Degenne, I used <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.kernel#doc\">docs#ProbabilityTheory.kernel</a> for a long time without even knowing it was defined as a subsomething. I don't think it's useful to change the capitalisation of a definition depending on whether it's defined as a subsomething or as the coercion to Type thereof.</p>",
        "id": 408432801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702810688
    },
    {
        "content": "<p>In light of the cases of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=selmerGroup#doc\">docs#selmerGroup</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=alternatingGroup#doc\">docs#alternatingGroup</a> , I guess at least I'm safe to use consistently camelCase for both def and namespace.</p>",
        "id": 408434348,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702811972
    },
    {
        "content": "<p>My hunch is that we should really be defining these all as types anyway (among other reasons, to make dot notation work) but that's certainly our of scope for this thread and PR, and belongs in a discussion somewhere more visible</p>",
        "id": 408434608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702812203
    },
    {
        "content": "<p>OK, I'm happy with <a href=\"https://github.com/leanprover-community/mathlib4/pull/9111\">#9111</a> and CI is green, all porting notes are added as comments in the PR, note that even the outdated ones are not outdated (those lines have style/lint fixes but the discussion is about Lean and math only).</p>\n<p>You can review it when you have time <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , thanks!</p>",
        "id": 408452040,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702828637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  <span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin (尹維晨)</span> I also wonder if the definitions suit your use cases, and will appreciate your reviews if you are interested.</p>",
        "id": 408453020,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702829312
    },
    {
        "content": "<p>Thanks for doing this. I would like to eventually use <code>spinGroup</code> and <code>pinGroup</code> as <code>LieGroup</code>s, so seeing them at least defined is very nice. Other than length, is there any reason why <code>lipschitz</code> is not <code>lipschitzGroup</code>, or vice versa why <code>spinGroup</code> isn't just <code>spin</code>? I slightly prefer having the <code>Group</code> suffix to disambiguate <code>lipschitz</code> from its usage in <code>LipschitzOnWith</code>, etc., in the search bar.</p>\n<p>Doesn't impact this PR, but I imagine there would be benefits to working with them as bundled types, so <code>SpinGroup</code> extends <code>PinGroup</code> extends <code>LipschitzGroup</code> extends <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units#doc\">docs#Units</a>. Is this what Eric is suggesting? What are the pros and cons?</p>",
        "id": 408526901,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702873341
    },
    {
        "content": "<p>Indeed, it seems <code>lipschitz</code> should be named <code>lipschitzGroup</code> and have a namespace <code>lipschitzGroup</code> which absorbs some lemmas and shorten their names in doing so.</p>\n<p>I don't see a reason why it was named <code>lipschitz</code> in the first place, maybe only because it was first defined and didn't change afterwards? </p>\n<p>BTW I know <code>lipschitzGroup</code> by the name of \"Clifford Group\" in literatures, until this PR.</p>",
        "id": 408528497,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702874421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2316040.20Spin.20Group/near/408526901\">said</a>:</p>\n<blockquote>\n<p>Doesn't impact this PR, but I imagine there would be benefits to working with them as bundled types, so <code>SpinGroup</code> extends <code>PinGroup</code> extends <code>LipschitzGroup</code> extends <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units#doc\">docs#Units</a>. Is this what Eric is suggesting? What are the pros and cons?</p>\n</blockquote>\n<p>My hunch is that it's not a good idea to have more inheritance when composition is sufficient, particularly when Lean is still fighting type class hierarchy issues. From what I have observed, we better prefer mixin until bundled version become a necessity for a specific use case.</p>",
        "id": 408528775,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702874671
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Xs7l43nb8gNrjkmOJRhZgIzW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Xs7l43nb8gNrjkmOJRhZgIzW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Xs7l43nb8gNrjkmOJRhZgIzW/image.png\"></a></div><p>I'm not particularly happy with how long the orange bar takes when opening SpinGroup in VSCode, but from the instruction count, it doesn't stand out.</p>\n<p>Is there a way to  learn which parts of the proofs contribute the most to the instruction count locally?</p>",
        "id": 408530555,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702875801
    },
    {
        "content": "<p>Probably <code>lake exe pole</code> from <a href=\"https://github.com/leanprover-community/mathlib4/pull/8361\">#8361</a> ?</p>",
        "id": 408531149,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702876236
    },
    {
        "content": "<p>No, <code>pole</code> is for analyzing which files contribute to the total build time of Mathlib (assuming infinite parallelism).</p>",
        "id": 408536821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702879906
    },
    {
        "content": "<p><code>set_option profiler true</code> at the top of the file is the place to start.</p>",
        "id": 408536906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702879929
    },
    {
        "content": "<p>or <code>set_option trace.profiler true</code> (the variant I usually use when figuring out which line of code makes a proof slow)</p>",
        "id": 408579177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702895247
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">Mathlib.LinearAlgebra.CliffordAlgebra.SpinGroup</span>\n<span class=\"o\">[</span><span class=\"mi\">1216</span><span class=\"bp\">/</span><span class=\"mi\">1217</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.LinearAlgebra.CliffordAlgebra.SpinGroup</span>\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">took</span> <span class=\"mi\">131</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">MulAction</span> <span class=\"n\">took</span> <span class=\"mi\">259</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">InvolutiveStar</span> <span class=\"n\">took</span> <span class=\"mi\">468</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">InvolutiveStar</span> <span class=\"n\">took</span> <span class=\"mi\">474</span><span class=\"n\">ms</span>\n<span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n        <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">18</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"mi\">194</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n        <span class=\"n\">dsimp</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">49</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span> <span class=\"mi\">633</span><span class=\"n\">ms</span>\n        <span class=\"n\">interpretation</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">38</span><span class=\"n\">ms</span>\n        <span class=\"n\">linting</span> <span class=\"mi\">243</span><span class=\"n\">ms</span>\n        <span class=\"n\">parsing</span> <span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">ms</span>\n        <span class=\"n\">simp</span> <span class=\"mi\">467</span><span class=\"n\">ms</span>\n        <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">539</span><span class=\"n\">ms</span>\n        <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">379</span><span class=\"n\">ms</span>\n        <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">55</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>typeclass inference is the bottleneck it seems. I went through <code>trace.profiler</code> but I can't find a few single places that takes a long time, maybe it's due to the accumulation of the typeclass inference time.</p>",
        "id": 408611139,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702906134
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler.threshold</span> <span class=\"mi\">300</span>\n</code></pre></div>\n<p>shows 11 places, mostly <code>HMul</code> and <code>InvolutiveStar</code>, they are discussed <a href=\"#narrow/stream/287929-mathlib4/topic/Avoiding.20type.20annotation/near/406754752\">here</a> and <a href=\"#narrow/stream/287929-mathlib4/topic/.28deterministic.29.20timeout.20at.20'typeclass'.20for.20InvolutiveStar\">here</a>, respectively.</p>",
        "id": 408614207,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702907128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2316040.20Spin.20Group/near/408528497\">said</a>:</p>\n<blockquote>\n<p>Indeed, it seems <code>lipschitz</code> should be named <code>lipschitzGroup</code> and have a namespace <code>lipschitzGroup</code> which absorbs some lemmas and shorten their names in doing so.</p>\n<p>I don't see a reason why it was named <code>lipschitz</code> in the first place, maybe only because it was first defined and didn't change afterwards? </p>\n<p>BTW I know <code>lipschitzGroup</code> by the name of \"Clifford Group\" in literatures, until this PR.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9111/commits/aa10d4d0c7f6cd4e4768fceaae7be069822de065\">This commit</a> renamed <code>lipschitz</code> to <code>lipschitzGroup</code>, so lemmas are like <code>lipschitzGroup.mem_conjAct_le</code>, <code>lipschitzGroup.coe_mem_iff_mem</code>, <code>pinGroup.units_mem_lipschitzGroup</code> (precedent: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.Perm.prod_list_swap_mem_alternatingGroup_iff_even_length#doc\">docs#Equiv.Perm.prod_list_swap_mem_alternatingGroup_iff_even_length</a>) .</p>",
        "id": 408944181,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702995767
    }
]