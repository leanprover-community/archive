[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, your PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/5796\">#5796</a> seems to have made my PR \"feat: allow slim_check to do work in MetaM <a href=\"https://github.com/leanprover-community/mathlib4/pull/3838\">#3838</a>\" impossible. Could you have a look? I don't really understand what problem you were fixing in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5796\">#5796</a>, is there some discussion somewhere?</p>",
        "id": 376514966,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689732707
    },
    {
        "content": "<p>Could we perhaps do these in the other order? (Pinging <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> as they merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/5796\">#5796</a>.)</p>",
        "id": 376515089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689732762
    },
    {
        "content": "<p>Huh, sorry for causing a hiccup.</p>",
        "id": 376537276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689744186
    },
    {
        "content": "<p>Where exactly is the problem coming from?</p>",
        "id": 376537291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689744194
    },
    {
        "content": "<p>I saw that the PR was making things more universe polymorphic, and the other changes seemed like \"fix downstream breakage\"...</p>",
        "id": 376537341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689744238
    },
    {
        "content": "<p>The problem is that making things more universe polymorphic is bad idea in tactics, where <code>MetaM</code> works in <code>Type</code> only.</p>",
        "id": 376538382,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689744720
    },
    {
        "content": "<p>So adding this universe polymorphism prevents us from generalizing in the monadic direction.</p>",
        "id": 376538495,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689744753
    },
    {
        "content": "<p>And I'm not sure what purpose that universe polymorphism is serving.</p>",
        "id": 376538523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689744766
    },
    {
        "content": "<p>Aah, I didn't realize that.</p>",
        "id": 376538901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689744915
    },
    {
        "content": "<p>In that case we should maybe revert this PR. Unless <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has a strong reason for the universe polymorphism.</p>",
        "id": 376538977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689744944
    },
    {
        "content": "<p>It's okay. My MetaM PR didn't have immediate application, in any case, although I thought some about allowing <code>slim_check</code> to use <code>norm_num</code>, which would require something like this change.</p>",
        "id": 376539102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689744987
    },
    {
        "content": "<p>I'll have a look shortly</p>",
        "id": 376574671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689755502
    },
    {
        "content": "<p>Don't we have an unsafe way to drop down a universe level?</p>",
        "id": 376575034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689755578
    },
    {
        "content": "<p>It would be a bit of a shame if slim_check couldn't test basic statements about <code>ULift Nat</code></p>",
        "id": 376575172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689755607
    },
    {
        "content": "<p>Can you explain what the advantage of adding a <code>m</code> argument to <code>Rand</code> and <code>Gen</code> is? This feels like it's necessary to do something like use <code>dev/urandom</code> as a source of randomness, but it's not clear why this is needed to make <em>evaluating</em> the sample live in MetaM</p>",
        "id": 376596573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689759936
    },
    {
        "content": "<p>(While trying to fix this in a branch, I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/5998\">#5998</a> which is rather tangentially related)</p>",
        "id": 376620937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689764683
    },
    {
        "content": "<p>I'll have to have a look again. I made that PR in trying to enable <code>slim_check</code> to run tactics in <code>MetaM</code> to decide whether sampled elements satisfied predicates. (e.g. norm_num) From what I remember, this inevitably led to threading the monad <code>m</code> (presumably always MetaM) into everything, including <code>Gen</code>. It's been a while though, so I may have missed something.</p>",
        "id": 376648742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689770039
    }
]