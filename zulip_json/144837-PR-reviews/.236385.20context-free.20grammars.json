[
    {
        "content": "<p>It seems we are stuck with <a href=\"https://github.com/leanprover-community/mathlib4/pull/6385\">#6385</a> because we don't know how to name the following three lemmata:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">g.Derives</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hvw</span> <span class=\"o\">:</span> <span class=\"n\">g.Transforms</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g.Derives</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n<span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">g.Transforms</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hvw</span> <span class=\"o\">:</span> <span class=\"n\">g.Derives</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g.Derives</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n<span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">g.Derives</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hvw</span> <span class=\"o\">:</span> <span class=\"n\">g.Derives</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g.Derives</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>Note that <code>g.Derives</code> is reflexive&amp;transitive closure over the <code>g.Transforms</code> relation.<br>\nIt isn't necessary to have all three, but I like to use them all.</p>",
        "id": 389359471,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693986788
    },
    {
        "content": "<p><code>Derives.trans_transforms</code>, <code>Transforms.trans_derives</code>, <code>Derives.trans</code></p>",
        "id": 389359569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693986833
    },
    {
        "content": "<p>That sounds reasonable. Unfortunately <code>trans</code> can be easily confused for <code>transforms</code> and code intellisense will be painful to use.</p>",
        "id": 389360049,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693986980
    },
    {
        "content": "<p>I don't think it's reasonable to not use our well-established atom <code>trans</code> anywhere in mathlib where another declaration has a similar name.</p>",
        "id": 389360385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693987097
    },
    {
        "content": "<p>Probably the only good approach will be to rename the <code>CFG.Transforms</code> relation.</p>",
        "id": 389360605,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693987190
    },
    {
        "content": "<p>Maybe call it <code>CFG.Rewrites</code> instead? The downside is that it sounds similar to a tactic name.</p>",
        "id": 389360949,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693987291
    },
    {
        "content": "<p>Tactic names are not really a concern for mathlib. Think of <code>Ring</code>.</p>",
        "id": 389361254,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693987407
    },
    {
        "content": "<p>After looking on Wikipedia <code>CFG.Produces</code> might be a reasonable name.<br>\n<a href=\"https://en.wikipedia.org/wiki/Context-free_grammar\">https://en.wikipedia.org/wiki/Context-free_grammar</a></p>",
        "id": 389361313,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693987433
    },
    {
        "content": "<p>At least <code>ring</code> and <code>Ring</code> no longer clash, that was a miserable error in lean3</p>",
        "id": 389361608,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693987544
    },
    {
        "content": "<p>Speaking of name collisions, I just noticed that <code>Cfg</code> and <code>cfg</code> are used in Mathlib; it seems to mean \"configuration\". Maybe <code>CFG</code> isn't the best name for my structure.</p>",
        "id": 389511329,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694032112
    },
    {
        "content": "<p>Another way of seeing it is that there are still 5 opportunities left...</p>",
        "id": 389512565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694032665
    },
    {
        "content": "<p>In my projects, the only circumstance when I allow names to differ by uppercase only is when they are directly related and the whole project uses <code>foo</code> vs <code>Foo</code> in a consistent manner.</p>",
        "id": 389513558,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694033106
    },
    {
        "content": "<p>On the other hand <code>Mathlib/Computability</code> likes initialisms and <code>CFG</code> fits there.</p>",
        "id": 389513685,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694033167
    },
    {
        "content": "<p>I agree with your convention: I think that a strong case should be made for allowing two names that only differ by upper/lower casing!</p>",
        "id": 389514068,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694033386
    },
    {
        "content": "<p>There was a recent issue where I introduced a file that differed from an existing one only in its capitalization and it caused problems for people using case-insensitive OSs.</p>",
        "id": 389514224,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694033432
    },
    {
        "content": "<p>So, e.g., the files <code>Mathlib/CFG.lean</code> and <code>Mathlib/Cfg.lean</code> are actually incompatible with the mathlib setup.</p>",
        "id": 389514404,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694033514
    },
    {
        "content": "<p>Mathlib3 <code>is_o</code> and <code>is_O</code> come to mind</p>",
        "id": 389514809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694033691
    },
    {
        "content": "<p>In this case, I can see the motivation behind the name!</p>\n<p>Also, a linter forbids to have two files <code>is_o</code> and <code>is_O</code> in the same folder.</p>",
        "id": 389515025,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694033787
    },
    {
        "content": "<p>What about renaming <code>CFG</code> to <code>CFGrammar</code>?</p>",
        "id": 389516747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694034609
    },
    {
        "content": "<p>I would pick the boring-but-clear option <code>ContextFreeGrammar</code></p>",
        "id": 389539055,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694047619
    },
    {
        "content": "<p>There was some confusion yesterday in another thread because someone referred to semigroups as SG. This adds weight to Arthur's suggestion.</p>",
        "id": 389579029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694067168
    },
    {
        "content": "<p>I lean toward <code>ContextFreeGrammar.Produces</code> for a single step and <code>ContextFreeGrammar.Derives</code> for a general number of steps.</p>\n<p>Any objections?</p>",
        "id": 389589087,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694071465
    },
    {
        "content": "<p>No, that looks alright.</p>",
        "id": 389590674,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694072035
    },
    {
        "content": "<p>I have changed the names and renamed the file as well.</p>",
        "id": 389724774,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694109938
    },
    {
        "content": "<p>There is still one unresolved question:<br>\nShould I create an explicit type for <code>NT × List (Symbol T NT)</code> and/or <code>List (Symbol T NT)</code> as Jannis Limperg suggested?</p>",
        "id": 390278546,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694427643
    }
]