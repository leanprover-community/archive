[
    {
        "content": "<p>This PR introduces <code>OrderedAddCommMonoidWithOne</code>, but it causes an unacceptable level of slowdown. I would like some help diagnosing the problem. If anyone feels so inclined I would be grateful.</p>",
        "id": 392577473,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695406563
    },
    {
        "content": "<p>Let me just notice that you didn't take Riccardo's advice to merge master before benchmarking.</p>",
        "id": 392589758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695411907
    },
    {
        "content": "<p>I had just merged master very recently prior. Is there something I was missing?</p>",
        "id": 392591111,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695412443
    },
    {
        "content": "<p>You mean <a href=\"https://github.com/leanprover-community/mathlib4/pull/6310/commits/17f941e5b450cf0f34d709144c257104285554fe\">this commit</a>. I guess that's pretty recent yeah <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 392601215,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695417091
    },
    {
        "content": "<p>I didn't notice you merged master so recently. Yes, it is quite depressing.</p>",
        "id": 392605785,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1695419602
    },
    {
        "content": "<p>Looking back at the other thread mentioned in the PR -- does making a ton of things noncomputable help? My impression, not backed up by too much data, is that currently there is a big bug in lean where the compiler sometimes goes completely crazy when doing work checking that things are computable -- even things like tensor products which we never actually want to compute. And then there are certain changes which in tandem with the bug make the compiler do even more work. Unfortunately there seems to be nobody interested in fixing the bug because the fix is \"wait for the new compiler [remark: nobody is working on the new compiler]\". Could it be this?</p>",
        "id": 392650281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695449089
    },
    {
        "content": "<p>This is just typeclass inference being slow, I think, Kevin</p>",
        "id": 392671847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695462526
    },
    {
        "content": "<p>Because it adds a lot more paths and such</p>",
        "id": 392671868,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695462532
    },
    {
        "content": "<p>I agree it's probably TC inference, but I only added one new class!</p>",
        "id": 392685433,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695469116
    },
    {
        "content": "<p>That's why I was suggesting other things. I have seen this phenomenon before: an innocuous change in one file can cause massive slowdown in another apparently unrelated file, because the computability bug is horrible, it's making gigantic oleans and causing big slowdowns, and whatever is triggering it, it can get triggered much more by an innocuous change. Of course there are several other reasons why fiddling with typeclasses can cause big slowdowns :-) For example there are some <code>with</code>s in the PR, and <code>with</code> can cause chaos, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">OrderedRing.toOrderedAddCommGroupWithOne</span> <span class=\"o\">:</span>\n    <span class=\"n\">OrderedAddCommGroupWithOne</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">OrderedRing</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I would try removing all of the <code>with</code>s and see if this fixes the problem. The <code>with</code>s introduce <code>let src := ...</code> terms into instances, which then cause typeclass inference to immediately unfold everything for some reason, sometimes causing the appearance of gigantic terms.</p>",
        "id": 392686003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695469586
    },
    {
        "content": "<p>Ordered stuff tends to get picked up an awful lot</p>",
        "id": 392696869,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695474521
    },
    {
        "content": "<p>What do you mean \"gets picked up\"?</p>",
        "id": 392712693,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695484064
    },
    {
        "content": "<p>I've had a look at some of the slowdowns and it's really hard to put your finger on anything. I see no evidence that the <code>with</code>s are causing trouble, and the statistics are a bit misleading in the sense that a 44% slowdown in one file turns out to be a very short file so the percentage is very misleading. A lot of these files with slowdown are super-fast, it's not like some random alg geom file is 20% slower and was already taking 5 minutes to compile.</p>",
        "id": 392736174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695500569
    },
    {
        "content": "<p>Thanks for spending the time looking!</p>",
        "id": 392751353,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695513194
    },
    {
        "content": "<p>In TC search, it seems to cycle through all possible ordered classes quite often</p>",
        "id": 392758752,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695517609
    },
    {
        "content": "<p>I tried to see if <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a> would help at all <a href=\"https://github.com/leanprover-community/mathlib4/pull/7331\">#7331</a>. It doesn't now</p>",
        "id": 392758854,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695517677
    },
    {
        "content": "<p>I wonder if you change the priority from <code>100</code> to just <code>low</code> if it would help</p>",
        "id": 392758996,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695517751
    }
]