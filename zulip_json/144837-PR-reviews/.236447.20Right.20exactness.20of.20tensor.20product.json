[
    {
        "content": "<p>On request of <span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> , here is a proof of the right exactness of tensor product. <br>\nThere are three main theorems :</p>\n<ul>\n<li>right exactness for <code>rTensor</code></li>\n<li>right exactness for <code>lTensor</code></li>\n<li>computation of the kernel of <code>TensorProduct.map g g'</code>.<br>\nFor the moment, this only treats the case of modules, but the analogue for algebras can (should) be added.</li>\n</ul>",
        "id": 382965345,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691502769
    },
    {
        "content": "<p>I have added the results for algebra morphisms. Unfortunately, this requires a long lemma that would be easier if we had tensor products as modules over the tensor product algebras, but maybe that's enough for the moment…</p>",
        "id": 385070427,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692094696
    },
    {
        "content": "<p>This PR has been stalled for 3 weeks.<br>\nDo you expect something from me regarding this PR or is everything OK for now?</p>",
        "id": 388563495,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693587547
    },
    {
        "content": "<p>I was surprised because I didn't remember seeing this on <a href=\"https://bit.ly/3cKk3ld\">#queue4</a> and indeed it's failing CI. Can you get it from red x to green tick?</p>",
        "id": 388565263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693588169
    },
    {
        "content": "<p>There are two distinct problems, one is a lint style error in the .bib file, the other is about imported files, but I have no idea of what causes these issues.</p>",
        "id": 388565941,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693588426
    },
    {
        "content": "<p>Did you create a new file and fail to update Mathlib.lean ?</p>",
        "id": 388566120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693588458
    },
    {
        "content": "<p>(Do I have to add <code>import Mathlib.LinearAlgebra.TensorProduct.RightExactness</code> to <code>Mathlib.lean</code>?)</p>",
        "id": 388566166,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693588473
    },
    {
        "content": "<p>and furthermore you have to add it in the right place :-)</p>",
        "id": 388566516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693588574
    },
    {
        "content": "<p>Let's see whether that place was the right one…</p>",
        "id": 388566905,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693588726
    },
    {
        "content": "<p>lol now you have a conflict :-)</p>",
        "id": 388567024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693588771
    },
    {
        "content": "<p>As for the <code>.bib</code> file, it looks like it just wants enrtries to be alphabetized by the citation key.</p>",
        "id": 388567042,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693588778
    },
    {
        "content": "<p>Did you know that you can see the issue <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/5857525249/job/15879556057?pr=6447\">here</a>?</p>",
        "id": 388567162,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693588808
    },
    {
        "content": "<p>Is that really true about citation key? That is kind of ridiculous -- a usual .bib file certainly woudn't care about that. I was guessing that it was just a random glitch.</p>",
        "id": 388567217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693588832
    },
    {
        "content": "<p>it's a style lint we use to keep the file organized, same as for Mathlib.lean</p>",
        "id": 388567341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693588877
    },
    {
        "content": "<p>otherwise you can add a line without realizing it's already there</p>",
        "id": 388567415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693588906
    },
    {
        "content": "<p>OK : some script was passing <code>references.bib</code> in <code>bibtool</code>, which I did, and I uploaded the reformatted file.</p>",
        "id": 388567860,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693589069
    },
    {
        "content": "<p>Now, the Lint tool is happy, and apparently the other one as well, let it compile the whole stuff.</p>",
        "id": 388567966,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693589122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236447.20Right.20exactness.20of.20tensor.20product/near/388567415\">said</a>:</p>\n<blockquote>\n<p>otherwise you can add a line without realizing it's already there</p>\n</blockquote>\n<p>Wait what? There's no canonical citation key for a reference! Isn't this just nonsense?</p>",
        "id": 388569311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693589476
    },
    {
        "content": "<p>We seem to be mostly going for some kind of \"author-date\" but even then there seems to be an issue of whether we put a hyphen in between them.</p>",
        "id": 388569535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693589547
    },
    {
        "content": "<p>The citation key used in the database seems to be some kind of \"author-date\", but isn't canonically normalized.</p>",
        "id": 388571405,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693590210
    },
    {
        "content": "<p>(Antoine, watch out for the \"canonical\" police, aka Kevin)</p>",
        "id": 388572244,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693590476
    },
    {
        "content": "<p>Antoine knows very well about canonical :-)</p>",
        "id": 388572469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693590536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236447.20Right.20exactness.20of.20tensor.20product/near/388569311\">said</a>:</p>\n<blockquote>\n<p>Wait what? There's no canonical citation key for a reference! Isn't this just nonsense?</p>\n</blockquote>\n<p>That's true, personally I wouldn't have used the citation key. Well, sorting by key is reasonable but the key itself should also be canonicalized in some way</p>",
        "id": 388573924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693591129
    },
    {
        "content": "<p>The other thing is, this .bib file isn't intended for regular processing IIUC, it is supposed to go on the website and that will probably just use the ordering in the file</p>",
        "id": 388574054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693591182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236447.20Right.20exactness.20of.20tensor.20product/near/388567024\">said</a>:</p>\n<blockquote>\n<p>lol now you have a conflict :-)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I fixed the conflict for you.</p>",
        "id": 388574611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693591378
    },
    {
        "content": "<p>Thanks Johan! What was that conflict?</p>",
        "id": 388575106,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693591583
    },
    {
        "content": "<p>On <code>master</code> another file was added to <code>Mathlib.lean</code> in the same spot, and git didn't know how to resolve the conflict. It should learn about alphabetical ordering <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 388576283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693592055
    },
    {
        "content": "<p>Btw, I also left a review of the PR.</p>",
        "id": 388576310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693592068
    },
    {
        "content": "<p>dang you're quick, I'm still only half way through :-)</p>",
        "id": 388576494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693592141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236447.20Right.20exactness.20of.20tensor.20product/near/388576283\">said</a>:</p>\n<blockquote>\n<p>On <code>master</code> another file was added to <code>Mathlib.lean</code> in the same spot, and git didn't know how to resolve the conflict. It should learn about alphabetical ordering <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>it's not the only thing who should learn about alphabetical ordering ;-) [failing CI again!]</p>",
        "id": 388578612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693592952
    },
    {
        "content": "<p>lol, did I mess up?</p>",
        "id": 388582929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693594541
    },
    {
        "content": "<p>ha, isn't there a script for this?</p>",
        "id": 388600260,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693602609
    },
    {
        "content": "<p>there should be a script which makes that file and means that we never have to think about it! This is a very daft regression from mathlib3.</p>",
        "id": 388600372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693602672
    },
    {
        "content": "<p>Why can't we just turn the \"Check all files are imported\" CI step into a \"Update Mathlib.lean\" step?</p>",
        "id": 388600422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693602694
    },
    {
        "content": "<p>Anyway, I've fixed it manually for this PR.</p>",
        "id": 388600475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693602722
    },
    {
        "content": "<p>... not necessarily in all CI runs. Running it in bors runs would be enough.</p>",
        "id": 388600520,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693602726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236447.20Right.20exactness.20of.20tensor.20product/near/388600422\">said</a>:</p>\n<blockquote>\n<p>Why can't we just turn the \"Check all files are imported\" CI step into a \"Update Mathlib.lean\" step?</p>\n</blockquote>\n<p>Because CI scripts that edit the source generate new code which needs CI run against it again, and this is messy; especially with bors.</p>",
        "id": 388601554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693603216
    },
    {
        "content": "<p>Why does that silly file even have to exist at all? We had no such file in mathlib3.</p>",
        "id": 388601655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693603281
    },
    {
        "content": "<p>Why can't we have a erm lake? option which just says \"yes please, compile all the lean files in this project, because that's obviously what we want, like most projects\"</p>",
        "id": 388601783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693603334
    },
    {
        "content": "<p>I'm asking questions here that come from <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's review : I had a definition of an exact pair:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The maps `f` and `g` form an exact pair :</span>\n<span class=\"sd\">  `g y = 0` iff `y` belongs to the image of `f` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Exact</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>and Johan's question is about the namespace.<br>\nI just observed that there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Exact#doc\">docs#CategoryTheory.Exact</a> as a structure, the structure of which I could copy. Should I?</p>",
        "id": 388602363,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693603647
    },
    {
        "content": "<p>I think it would make sense to copy that structure, and also prove that the two properties are equivalent if you have modules living in the same universe, etc...</p>",
        "id": 388659234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693637668
    },
    {
        "content": "<p>and as for the namespace, would <code>Function</code> be reasonable?</p>",
        "id": 388662776,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693640479
    },
    {
        "content": "<p>Or <code>Module</code>, or <code>LinearAlgebra</code>. I'm not so sure which one is best.<br>\nI think <code>Function</code> makes a lot of sense, if you look at the definition. But at the same time, I probably wouldn't think to look there if I didn't know I should.</p>",
        "id": 388663078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693640676
    },
    {
        "content": "<p>The present definition uses only <code>Zero</code>, hence it would also work for the classic exact sequence in nonabelian group cohomology (for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\"> H^0 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">H ^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>).</p>",
        "id": 388665961,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693642855
    },
    {
        "content": "<p>In <code>Set.range</code>, the namespace is <code>Set</code> because that's the type of the value, while in <code>Function.Surjective</code>, that's the type of the argument. Since the notion of exact pair is closer to the latter than to the former, I'll go for <code>Function</code>.</p>",
        "id": 388667136,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693643704
    },
    {
        "content": "<p>Yeah, nonabelian group cohomology, and even pointed sets, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 388668300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693644544
    },
    {
        "content": "<p>Of course we run the serious risk that we'll rename your defn to <code>AddExact</code> and turn <code>Exact</code> into the multiplicative version...</p>",
        "id": 388668336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693644572
    },
    {
        "content": "<p>Nice point. Is this a risk?</p>",
        "id": 388669277,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693645249
    },
    {
        "content": "<p>No, it was meant ironically. The refactor shouldn't really be hard. So you don't have to worry about it.</p>",
        "id": 388669805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693645614
    },
    {
        "content": "<p>I understand, but doesn't it make sense that I do that right away?</p>",
        "id": 388671978,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693647032
    },
    {
        "content": "<p>Note: with the homology refactor, there will eventually be a more developed API <code>ShortComplex.Exact</code> (for which the vanishing of the composition is a field of the objects of type <code>ShortComplex</code>), and my plan shall be to remove <code>CategoryTheory.Exact</code>. For concrete categories satisfying suitable conditions, I have a lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exact_iff_of_concrete_category</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ShortComplex</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"n\">S.Exact</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">forget₂</span> <span class=\"n\">C</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S.X₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">forget₂</span> <span class=\"n\">C</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">S.g</span><span class=\"o\">)</span> <span class=\"n\">x₂</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">forget₂</span> <span class=\"n\">C</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S.X₁</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">forget₂</span> <span class=\"n\">C</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">S.f</span><span class=\"o\">)</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>This phrasing of the exactness condition is very close to what Antoine suggests for the unbundled situation (especially as the universe parameters can be heterogeneous):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Exact</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Then, instead of replicating the structure <code>CategoryTheory.Exact</code>, I would argue it is better to keep Antoine's definition, and <code>Funtion.Exact</code> looks good to me.</p>",
        "id": 388672387,
        "sender_full_name": "Joël Riou",
        "timestamp": 1693647310
    },
    {
        "content": "<p>Shouldn't <code>CategoryTheory.Exact</code> be refactored in terms of \"a category with a notion of exact pairs of morphisms\"?</p>",
        "id": 388672603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693647467
    },
    {
        "content": "<p>Instead of just preadditive cats with enough images and kernels...</p>",
        "id": 388672705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693647498
    },
    {
        "content": "<p>I have a definition of <code>[ExactCategory C]</code> for which there is a <code>ExactCategory.shortExact</code>, but it is a more long term thing...</p>",
        "id": 388673110,
        "sender_full_name": "Joël Riou",
        "timestamp": 1693647825
    },
    {
        "content": "<p>Note that in nonabelian group cohomology it's very common for the group being acted on to be multiplicative (eg <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><msub><mi>G</mi><mi>K</mi></msub><mo separator=\"true\">,</mo><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>K</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">H^1(G_K,GL_n(\\overline{K}))=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>) (or should that be 1?). Maybe we'll even end up with AddGroupCohomomogy :-)</p>",
        "id": 388675671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693649411
    }
]