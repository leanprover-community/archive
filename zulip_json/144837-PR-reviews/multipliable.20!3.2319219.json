[
    {
        "content": "<p>This PR furnishes infinite products in a commutative monoid. <br>\nIt gives the companion of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable#doc\">docs#summable</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=has_tsum#doc\">docs#has_tsum</a>,  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum#doc\">docs#tsum</a> and everything that was provided in that context, under the names <code>summable</code>, <code>has_tsum</code>, <code>`tsum</code>.<br>\nIt was done by translating addition into multiplication in that file and adding tags <code>@[to_additive]</code> at essentially each definition.<br>\nI did the translation for the two files, the rest was about rings, modules or fields and didn't seem to need any modification.</p>\n<p>Hopefully, all translations of names are correct, but for this, one needs to check that the compilation runs.</p>",
        "id": 370802423,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688048397
    },
    {
        "content": "<p>You know I have an open PR for that, right?</p>",
        "id": 370814679,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1688050406
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18405\">#18405</a></p>",
        "id": 370815520,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1688050551
    },
    {
        "content": "<p>No, I didn't‚Ä¶</p>",
        "id": 370839675,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688054707
    },
    {
        "content": "<p>I just had a look there. You did more work than I did.<br>\nTerminological discussion : </p>\n<ul>\n<li>I can see where<code>prodable</code> comes from, but isn't an English word such as <code>multipliable</code> more reasonable?</li>\n<li>For the multiplicative version of <code>vanishing</code>, I used <code>mul_vanishing</code>, by analogy with the already chosen <code>mul_indicator</code>‚Ä¶</li>\n</ul>",
        "id": 370841532,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688055027
    },
    {
        "content": "<p>As I have mentioned in a message above (<a href=\"#narrow/stream/113488-general/topic/infinite.20product.20clash.20with.20type.20product/near/327479289\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/infinite.20product.20clash.20with.20type.20product/near/327479289</a>), just copying the definition of infinite sums to get infinite products is not going to give a nice behavior, because of additional issues due to 0 that do not show up in infinite sums. A better behaved definition would be: for any finite <code>s</code>, the product over finite subsets <code>t</code> in the complement of <code>s</code> converges as <code>t</code> exhausts the complement of <code>s</code>. The additivization of this definition coincides with our current definition of infinite sums in topological additive groups, so it would make sense to switch everything to this new definition. But this will be a very heavy refactor, so probably better to keep for after the port.</p>",
        "id": 370844553,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688055585
    },
    {
        "content": "<p>I think complex analysis makes use of a particular use of infinite products, which is more restrictive than infinite products in arbitrary commutative monoids, and that should not make the natural definition disappear.</p>",
        "id": 370850398,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688056636
    },
    {
        "content": "<p>Moreover, I have the impression that with a bit of additional complex analysis, infinite products (defined naively) can't behave too badly, because the log of the limit will likely be subharmonic,so can't be +infinity.</p>",
        "id": 370851088,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688056761
    },
    {
        "content": "<p>Indeed, you're safe if you're sure you will never multiply by zero. But since there is a definition which works fine also when one multiplies by zero, it's the definition we should use as a basis for the theory.</p>",
        "id": 370857383,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688057978
    },
    {
        "content": "<p>Note that we should have some API showing that, in reasonable cases, the complicated definition is equivalent to the naive one, hiding in practice the fact that we have used a complicated definition to start with.</p>",
        "id": 370864813,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688059437
    },
    {
        "content": "<p>If I understand your definition correctly, and I may be wrong, if you convert an add_comm_monoid into a comm_monoid by just changing the name of the law, tsum won't goi to tprod..</p>",
        "id": 370865644,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688059595
    },
    {
        "content": "<p>We should change both <code>tsum</code> and <code>tprod</code> so that they match, indeed. A way to do the refactor would be first to only change <code>tsum</code> and fix everything in the library. Then define <code>tprod</code> and let <code>tsum</code> be the additivization of <code>tprod</code>.</p>",
        "id": 370866213,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688059701
    },
    {
        "content": "<p>One point which is not clear to me is if, in the definition I sketched in <a href=\"#narrow/stream/144837-PR-reviews/topic/multipliable.20!3.2319219/near/370844553\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/multipliable.20!3.2319219/near/370844553</a>, we should only take <code>s</code> finite, or allow any <code>s</code>.</p>",
        "id": 370866470,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688059755
    },
    {
        "content": "<p>I may be confused, again, but your definition seems to exist in a lesser generality than the standard one.</p>",
        "id": 370869469,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688060391
    },
    {
        "content": "<p>I agree that summable families in a commutative monoid for which all subfamilies are summable are a nice object to consider.</p>",
        "id": 370869852,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688060461
    },
    {
        "content": "<p>Yes, it exists in less generality than the standard one. But they are equivalent in all interesting situations I can think of.</p>",
        "id": 370878844,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688062117
    },
    {
        "content": "<p>I have this complex product definition (and theorems about it) on a branch</p>",
        "id": 370880600,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1688062432
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/2301.10303\">https://github.com/leanprover-community/mathlib/tree/2301.10303</a></p>",
        "id": 370881122,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1688062524
    },
    {
        "content": "<p>With things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">has_prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finite_not_unit</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">¬¨</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)}</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">tendsto_units</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œ≤</span><span class=\"o\">,</span> <span class=\"bp\">‚àè</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">surj_units</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">prod_eq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">tendsto_units.some</span> <span class=\"bp\">*</span> <span class=\"bp\">‚àè</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">finite_not_unit.to_finset</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">real.converges_prod_one_add_pow_two_pow</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">converges_prod</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)))</span>  <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 370881740,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1688062629
    },
    {
        "content": "<p>S√©bastien, I know about your concern. My idea was to first match the additive and multiplicative APIs, then modify them together so that they do the right thing for infinite products while still being usable for (better behaved) infinite sums.</p>",
        "id": 370885217,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1688063312
    },
    {
        "content": "<p>And the hope for the second step was to use Yakov's definition just above</p>",
        "id": 370885689,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1688063417
    },
    {
        "content": "<p>Antoine, the point of <code>prodable</code> is that it has the same number of letters as <code>summable</code>. This is quite useful in lemma names, I find.</p>",
        "id": 370890264,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1688064353
    },
    {
        "content": "<p>Yakov's definition does not work for tsums on <code>nnreal</code>: there are essentially no additive units on <code>nnreal</code>, and still there are many converging series.</p>",
        "id": 370890507,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688064397
    },
    {
        "content": "<p>Do you have an alternative definition then?</p>",
        "id": 370891710,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1688064654
    },
    {
        "content": "<p>Yes, the one in <a href=\"#narrow/stream/144837-PR-reviews/topic/multipliable.20!3.2319219/near/370844553\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/multipliable.20!3.2319219/near/370844553</a></p>",
        "id": 370896827,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688065633
    },
    {
        "content": "<p>Ah sorry, I previously read it as equivalent to Yakov's definition.</p>",
        "id": 370904174,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1688067304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/multipliable.20!3.2319219/near/370890264\">said</a>:</p>\n<blockquote>\n<p>Antoine, the point of <code>prodable</code> is that it has the same number of letters as <code>summable</code>. This is quite useful in lemma names, I find.</p>\n</blockquote>\n<p>Bikeshedding: I thoroughly dislike this as a reason for naming. However, I prefer <code>prodable</code> is over <code>multipliable</code> (despite the fact that as an English speaker I find the latter more natural) because <code>prod</code> is about <code>‚àè</code>, whereas <code>mul</code> is about the binary operation <code>*</code>.</p>",
        "id": 370925416,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688072845
    },
    {
        "content": "<p>more <span aria-label=\"bike\" class=\"emoji emoji-1f6b2\" role=\"img\" title=\"bike\">:bike:</span> :<code>multipliable</code> means you can bend it in multiple ways</p>",
        "id": 370929060,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688073859
    },
    {
        "content": "<p>Someone has been in <span aria-label=\"flag france\" class=\"emoji emoji-1f1eb-1f1f7\" role=\"img\" title=\"flag france\">:flag_france:</span> recently</p>",
        "id": 370933468,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1688075448
    },
    {
        "content": "<p>Right: you can <code>fold</code> it with <code>mul</code> :-)</p>",
        "id": 370934598,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1688075901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/multipliable.20!3.2319219/near/370929060\">said</a>:</p>\n<blockquote>\n<p>more <span aria-label=\"bike\" class=\"emoji emoji-1f6b2\" role=\"img\" title=\"bike\">:bike:</span> :<code>multipliable</code> means you can bend it in multiple ways</p>\n</blockquote>\n<p>For some reason engineers make a distinction between surfaces which <a href=\"http://www.spandesign.com/technical/article_what_is_double_curvature.aspx\">bend in multiple ways</a> (meaning practically all surfaces) and surfaces which <a href=\"https://help.spaceclaim.com/dsm/6.0/en/Discovery/user_manual/tools/r_manufacturing_toolpaths_unroll_flat-single_curvature.html\">don't</a> (i.e., curvature-zero surfaces).</p>",
        "id": 370936815,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1688076735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/multipliable.20!3.2319219/near/370878844\">said</a>:</p>\n<blockquote>\n<p>Yes, it exists in less generality than the standard one. But they are equivalent in all interesting situations I can think of.</p>\n</blockquote>\n<p>I had understood ‚Äî¬†and found admirable ‚Äî what I thought to be one of the features of mathlib, namely to allow the greatest reasonable/possible generality in definitions. The property you indicate is certainly useful, maybe frequent, and deserves a name in mathlib to be used whenever it intervenes, but I can't understand how it could be a basis for the definition of infinite sums/products in mathlib.</p>",
        "id": 371009790,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688104822
    },
    {
        "content": "<p>Even before generality, the first criterion should be mathematical correctness: if a definition is broken, it should be fixed. My point is that our current definition of <code>summable</code> is broken, because of the following example: in the additive monoid <code>[-\\infty, +\\infty)</code>, let <code>u 0</code> be <code>-\\infty</code> and <code>u n = 1</code> for positive <code>n</code>. To me, this sequence is not summable (as just changing the value of <code>u 0</code> makes it obviously not summable), although with our current definition it is. Our definition was probably not written with this kind of example in mind.</p>\n<p>On the other hand, if most people think this sequence should be summable, we can keep the current definition, and add the other one as a new definition like <code>strongly_summable</code>. From a refactor point of view, this would in fact be much easier.</p>",
        "id": 371020395,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688107792
    },
    {
        "content": "<p>Well, Bourbaki (Topologie g√©n√©rale, chap 3, ¬ß5) defines summable families in the context of commutative groups but they indicates in a remark that the definition applies in the context of commutative monoids. Moreover, they explicitly uses infinite products in the multiplicative monoid of power series (the topology of which is simple convergence on the coefficients, which have the discrete topology), without any condition on the ring of coefficients.  (This is precisely the reason why I had to start this PR, because <span class=\"user-mention\" data-user-id=\"406490\">@Mar√≠a In√©s de Frutos Fern√°ndez</span>  and I need it now!)</p>",
        "id": 371031892,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688110565
    },
    {
        "content": "<p>(Not all definitions by Bourbaki are good, though. mathlib's version of filters, for example, is much better.)</p>",
        "id": 371032432,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688110680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/multipliable.20!3.2319219/near/371020395\">said</a>:</p>\n<blockquote>\n<p>On the other hand, if most people think this sequence should be summable, we can keep the current definition, and add the other one as a new definition like <code>strongly_summable</code>. From a refactor point of view, this would in fact be much easier.</p>\n</blockquote>\n<p>Bifurcations are suboptimal. But if we are still trying to figure out what the right definition is, then I think this is a good strategy.</p>",
        "id": 371034201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688111034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/multipliable.20!3.2319219/near/370814679\">said</a>:</p>\n<blockquote>\n<p>You know I have an open PR for that, right?</p>\n</blockquote>\n<p>Is there a companion PR for Lean4 ?</p>",
        "id": 373999283,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689002562
    }
]