[
    {
        "content": "<p>This is the last of the files <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> wants ready for the MSRI summer school. It is ready for review.</p>",
        "id": 363581511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685920847
    },
    {
        "content": "<p>Mind if I push a rebase to clean up the history so the diff is easier to see?</p>",
        "id": 363583561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685922819
    },
    {
        "content": "<p>Ah, a merge was enough (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/4653/files/c272c61e528c3f212fbb0335cacc26e1e2ca213e..7a0ef27c063392b7cc66232a209c5a801ea2607a\">this diff</a>)</p>",
        "id": 363583912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685923181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, it's pretty annoying how many times we seem to have to replace <code>h.DifferentiableAt</code> with <code>h.differentiableAt</code> in these PRs; is this an easy mathport fix, or a really hard one?</p>",
        "id": 363584092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685923306
    },
    {
        "content": "<p>a relatively hard one, it involves lean 3 fixes</p>",
        "id": 363586606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685925389
    },
    {
        "content": "<p>Can we do a heuristic fix of \"if dot notation translates to <code>CamelCase</code> and there is no <code>Foo.CamelCase</code> for any <code>Foo</code>, use <code>.camelCase</code> instead?\"</p>",
        "id": 363587146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685925819
    },
    {
        "content": "<p>my understanding is that the reason for the camel case translation is because there is some <code>Foo.CamelCase</code></p>",
        "id": 363588290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685926670
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> !  I just landed in SFO and it's great to see all this ported! I'll update MIL as soon as I'll reach my hotel.</p>",
        "id": 363590787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685928478
    },
    {
        "content": "<p>I'm now settled in Berkeley and trying those brand new calculus files. Unfortunately the discussion of calculus in MIL started with showing how simp could do easy differentiation and it seems a lot less true in Lean 4.</p>",
        "id": 363605590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685940139
    },
    {
        "content": "<p>Specifically, the following worked in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</span>\n\n<span class=\"kn\">open</span>  <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">pow_ne_zero</span> <span class=\"mi\">5</span> <span class=\"n\">h</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 363605989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685940403
    },
    {
        "content": "<p>The Lean 3 code was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.field_simp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">pow_ne_zero</span> <span class=\"mi\">5</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 363606022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685940427
    },
    {
        "content": "<p>Presumably related: <a href=\"https://github.com/leanprover-community/mathlib4/pull/4669/files#diff-053757072a2ee1ebf0332832076b953a360d7977b76c6f82885b630ec0d16cadR236\">https://github.com/leanprover-community/mathlib4/pull/4669/files#diff-053757072a2ee1ebf0332832076b953a360d7977b76c6f82885b630ec0d16cadR236</a></p>",
        "id": 363648061,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685954501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!4.234653.20Trigonometric.2EDeriv/near/363588290\">said</a>:</p>\n<blockquote>\n<p>my understanding is that the reason for the camel case translation is because there is some <code>Foo.CamelCase</code></p>\n</blockquote>\n<p>I don't think that's true in this case except for <code>Foo = _root_</code></p>",
        "id": 363649256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685954822
    }
]