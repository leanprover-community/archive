[
    {
        "content": "<p>Currently in Mathlib there is no class for magma that are commutative but not associative - <code>Field</code> extends <code>CommRing</code> and <code>DivisionRing</code>, <code>CommRing</code> extends <code>Ring</code> and <code>CommMonoid</code>, <code>CommGroup</code> extends <code>Group</code> and <code>CommMonoid</code> and <code>CommMonoid</code> extends<code>CommSemigroup</code> and <code>Monoid</code>. <code>CommSemigroup</code> currently extends only <code>Semigroup</code> and has <code>mul_comm</code> as a property.</p>\n<p>I've opened a <a href=\"https://github.com/leanprover-community/mathlib4/pull/7060\">PR</a> which moves <code>mul_comm</code> into a new <code>CommMagma</code> (<code>AddCommMagma</code>) class which extends <code>Mul</code> (<code>Add</code>). In the PR, <code>CommSemigroup</code> now extends <code>Semigroup</code> and <code>CommMagma</code>.</p>\n<p>The rest of Mathlib4 compiles as before, except some results need more heartbeats and there is a performance hit.</p>\n<p>My motivation is for results which hold for commutative semirings without requiring associativity e.g. in a commutative algebra an element is in the centre if and only if the corresponding multiplication operator commutes with all other multiplication operators. Another application is given <a href=\"#narrow/stream/287929-mathlib4/topic/.60add_comm.60.20without.20.60add_assoc.60\">here</a></p>\n<p>I'd be interested to hear feedback about whether this is the right approach?</p>\n<p>Thanks.</p>\n<p>Christopher</p>",
        "id": 403458952,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1700599186
    }
]