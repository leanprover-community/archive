[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3361\">!4#3361</a> (porting <code>PiTensorProduct</code>) causes a bors build error at <a href=\"https://github.com/leanprover-community/mathlib4/blob/62e501606d95ffbb2af097879f4bbd8cf9803587/Mathlib/LinearAlgebra/PiTensorProduct.lean#L317\">line 317</a> due to a notation error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"n\">generate</span> <span class=\"n\">matchers</span> <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">delaborator</span><span class=\"o\">,</span> <span class=\"n\">so</span> <span class=\"kd\">notation</span> <span class=\"n\">will</span> <span class=\"n\">not</span> <span class=\"n\">be</span> <span class=\"n\">pretty</span> <span class=\"n\">printed.</span> <span class=\"n\">Consider</span> <span class=\"n\">either</span> <span class=\"n\">adjusting</span> <span class=\"n\">the</span> <span class=\"n\">expansions</span> <span class=\"n\">or</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">notation3</span> <span class=\"o\">(</span><span class=\"n\">prettyPrint</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>I don't anything about notations and/or metaprogrammings, so I have marked this PR with help-wanted to see if anybody understands notation can fix this issue</p>",
        "id": 363171807,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685742327
    },
    {
        "content": "<p>This is clearly coming from 4!#4533.</p>",
        "id": 363179076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685745390
    },
    {
        "content": "<p>You can indeed disable generating the pretty printer while <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  is flying if you want to be able to move forward.</p>",
        "id": 363179426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685745557
    },
    {
        "content": "<p>use <code>pretty_print := false</code>, what's the declaration look like?</p>",
        "id": 363186372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685749314
    },
    {
        "content": "<p>It looks like this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"s2\">\"⨂ₜ[\"</span><span class=\"n\">R</span><span class=\"s2\">\"] \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tprod</span> <span class=\"n\">R</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 363191512,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685752831
    },
    {
        "content": "<p>Could you do <code>set_option trace.notation3 true</code>? It should hopefully say why it failed to make a pretty printer. Does <code>tprod</code> take two arguments? Or does it depend on a coercion? If it does, as a workaround you can write the term including the coercion function to help it out (and it doesn't support dot notation yet; it can only analyze basic function applications)</p>",
        "id": 363199358,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685759363
    },
    {
        "content": "<p>I think I am doing something wrong, <code>set_option trace.notation3 true</code> gives an error: <code>unknown option 'trace.notation3'</code></p>\n<p><code>tprod</code> indeed takes one argument and returns a multilinear map, its type signature is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PiTensorProduct.tprod.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">MultilinearMap</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">PiTensorProduct</span> <span class=\"n\">R</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so <code>tprod R f</code> is <code>↑(tprod R) f</code></p>",
        "id": 363200970,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685760610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> Ah, yeah, you need to merge master to get the <code>trace.notation3</code> option locally. I did that and adjusted the <code>notation3</code> command and hopefully when it rebuilds the warning goes away.</p>",
        "id": 363219599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685773979
    },
    {
        "content": "<p>Documenting this in case it comes up again, to get <code>notation3</code> to generate a pretty printer I changed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\"⨂ₜ[\"</span><span class=\"n\">R</span><span class=\"s2\">\"] \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tprod</span> <span class=\"n\">R</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\"⨂ₜ[\"</span><span class=\"n\">R</span><span class=\"s2\">\"] \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FunLike.coe</span> <span class=\"o\">(</span><span class=\"n\">tprod</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>since this is specifically what <code>↑(tprod R) f</code> is. At least for now, the pretty printer generator is pretty simple and doesn't know how to undo coercions.</p>",
        "id": 363346410,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685810694
    }
]