[
    {
        "content": "<p>Hi, I'm restarting work on adding duality theory for convex programs to the library. </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6437\">#6437</a> defines a <code>PointedCone</code> structure. This a bundled version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexCone.Pointed#doc\">docs#ConvexCone.Pointed</a></p>\n<p>The first half of the file is boiler plate and is copied over from <code>ConvexCone</code>.<br>\nThe second half of the file proves that <code>PointedCone</code>s are equivalent to <code>subModule</code>s of the ambient space. </p>\n<p>It'd be great if someone could review this. <br>\nThanks,</p>",
        "id": 388875443,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1693786338
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ??</p>",
        "id": 388916125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693808380
    },
    {
        "content": "<p>It's already on my screen rn <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 388917237,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693808881
    },
    {
        "content": "<p>Thanks for the comments. Working on it.</p>",
        "id": 388997077,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1693835560
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , I'm replying to your PR comments here so I can share some code.</p>\n<p>I tried switching to a definition of <code>PointedCone</code> using <code>Submodule</code> but I'm running into two potential issues:</p>\n<ol>\n<li><code>Submodule</code> requires the ambient space to be a module itself but <code>PointedCone</code> can in theory be defined for a much weaker structure. I don't mind this at all. </li>\n<li>A more serious issue I'm running into is that Lean is getting confused between the two module structures on the ambient space. I'm having trouble defining maps between <code>PointedCone</code>. The error I'm getting is here:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_map</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"bp\">𝔽</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SemilinearMapClass</span> <span class=\"bp\">𝔽</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    failed to synthesize instance</span>\n<span class=\"cm\">      SemilinearMapClass 𝔽 ?m.15748 E ?m.15741</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The code is on <a href=\"https://github.com/leanprover-community/mathlib4/tree/apurva%2Fpointed-cone-module\">branch#apurva/pointed-cone-module</a> and file is <a href=\"https://github.com/leanprover-community/mathlib4/blob/apurva/pointed-cone-module/Mathlib/Analysis/Convex/Cone/Pointedv2.lean\">https://github.com/leanprover-community/mathlib4/blob/apurva/pointed-cone-module/Mathlib/Analysis/Convex/Cone/Pointedv2.lean</a></p>\n<p>I would love to have this alternate definition work. But I'm now skeptical that Lean is going to be comfortable with going back and forth between the two module structures on the ambient space.</p>",
        "id": 389216722,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1693927300
    },
    {
        "content": "<p>Sorry, will answer quickly because I'm in the middle of something else.</p>\n<ol>\n<li>What is the much weaker structure you have in mind?</li>\n<li>What two module structures? If you only get an error in this code snippet, i'd suggest using <code>LinearMapClass 𝕜 E F</code> instead of <code>SemilinearMapClass 𝔽 (RingHom.id 𝕜) E F</code> and call it a day.</li>\n</ol>",
        "id": 389217696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693927497
    },
    {
        "content": "<p>As soon as I wrote the above comment here I realized that the fix was :P <br>\nSorry about that and thanks for your message! </p>\n<p>The <code>LinearMapClass</code> still gets stuck but the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_map</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"bp\">𝔽</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SemilinearMapClass</span> <span class=\"bp\">𝔽</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">})</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 389218726,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1693927681
    },
    {
        "content": "<p>Ahah! Of course, you were just over the wrong module! That is going to be annoying though, since that means you can't easily use that lemma for <code>𝕜</code>-linear maps, because the out-params mean that we can't make Lean infer that those maps are also <code>𝕜≥0</code>-linear.</p>",
        "id": 389219177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693927776
    },
    {
        "content": "<p>At any rate, this problem is unrelated to the design decision of reusing <code>Submodule</code>.</p>",
        "id": 389219283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693927803
    },
    {
        "content": "<p>Right! I can always add helper lemmas that coerce 𝕜-linear maps to 𝕜≥0-linear maps.</p>",
        "id": 389219444,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1693927844
    },
    {
        "content": "<p>Also, how are you typing unicode in Zulip?</p>",
        "id": 389219522,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1693927861
    },
    {
        "content": "<p><del>Arcane magic</del> <a href=\"https://github.com/arthurpaulino/chrome-lean-unicode\"><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span>'s Chrome extension</a></p>",
        "id": 389219694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693927913
    }
]