[
    {
        "content": "<p>I'd like to call attention to <span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span>'s PR that completely refactors monoidal categories. I'm a bit concerned I won't have time to review this thoroughly in the near-term, so I'm hoping to encourage others to look at it.</p>\n<p>Let me give a little background, as well.</p>\n<p>This PR changes the API of monoidal categories to more closely follow the API for bicategories that Yuma had previously written. The main change is introducing <code>whiskerLeft (X : C) {Y₁ Y₂ : C} (f : Y₁ ⟶ Y₂) : X ⊗ Y₁ ⟶ X ⊗ Y₂</code>, written as <code>X ◁ f</code>, and similarly for <code>whiskerRight</code>, and then using these in preference to <code>tensorHom</code> itself.</p>\n<p>Currently, Yuma has left in place the field <code>tensorHom</code> in <code>MonoidalCategory</code>, and added axioms that relate it to <code>whiskerLeft</code> and <code>whiskerRight</code>, although a future refactor could conceivably actually remove <code>tensorHom</code> entirely, leaving it just as a definition.</p>\n<p>The motivation for this change, backed up by our experience with bicategories, is that it is much easier to write an effective simp set in terms of these operations than it was for <code>tensorHom</code>. To see this in action, please look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6307/files#diff-8194ebe290de18a016f8ea48d67ba9b96dae28915099339375ba7a65577356f8\"><code>BraidedCategory</code></a> in this PR, which has very substantial reductions (and in particular painful manual proofs are reduced to short calc blocks powered by <code>simp</code> and <code>coherence</code>).</p>\n<p>The second motivation is that this formalization is more similar to the presentation of 2-categories used in Jamie Vicary's work (see the discussion of semistrict higher categories in <a href=\"https://arxiv.org/abs/1610.06908\">arxiv#1610.06908</a>, where I first understood what a good idea this was, but later papers e.g <a href=\"https://arxiv.org/abs/1902.03831\">arxiv#1902.03831</a> are also helpful). This opens the possibility of someday incorporating something like <a href=\"http://homotopy.io\">homotopy.io</a> into Lean's infoview. :-)</p>\n<p>So --- please do have a look at this PR. I am very excited about it!</p>",
        "id": 382282374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691303699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I left a review.</p>\n<p>It's quite a large PR. Do you think this could reasonably be split into pieces:</p>\n<ul>\n<li>adding the whiskering operators and the constructor in terms of tensorHom</li>\n<li>adding all the new simp lemmas</li>\n<li>cleaning up proofs that can now be golfed</li>\n</ul>",
        "id": 382491727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691382727
    },
    {
        "content": "<p>Thanks! I'll leave this to Yuma, but I wouldn't be surprised if they say is it not possible, as merely changing the definition (and providing the constructor) still breaks enough stuff downstream that it's not worth separating.</p>",
        "id": 382491854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691382824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I created a split PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6420\">#6420</a>. It only adds whiskering operators to the constructor. I think it difficult to split further since some proofs in the whole PR reuse old <code>tensorHom</code> proofs, while others have completely rewritten using new simp lemmas. To split these proofs in compatible way, we need to write many proofs that are no longer needed in the subsequent PR.</p>",
        "id": 382597490,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1691408912
    },
    {
        "content": "<p>I just made <a href=\"https://github.com/leanprover-community/mathlib4/pull/7277\">#7277</a>, which I now realize reverts a small portion of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6420\">#6420</a></p>",
        "id": 392124524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695218608
    },
    {
        "content": "<p>Do we actually want the <em>constructor</em> for a monoidal category to encourage passing only the whiskers and not the <code>tensorHom</code>? It seems in practice that we always have a <code>tensorHom</code> readily available</p>",
        "id": 392124697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695218648
    },
    {
        "content": "<p>I do not have a particular opinion about the exact details on how monoidal categories should be defined, but I think we should give a chance to Yuma's refactor, which is not yet complete, and which is supposed to provide eventually a better \"normalization\" of morphisms by simp.</p>",
        "id": 392161897,
        "sender_full_name": "Joël Riou",
        "timestamp": 1695230186
    },
    {
        "content": "<p>Eventually, if I undertstand Scott's message above, <code>tensorHom</code> would no longer be a field of the <code>MonoidalCategory</code> structure.</p>",
        "id": 392162619,
        "sender_full_name": "Joël Riou",
        "timestamp": 1695230487
    },
    {
        "content": "<p>I'd possibly argue for keeping it for the sake of a nice defeq, for the same reason that we keep <code>Monoid.pow</code></p>",
        "id": 392163073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695230657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span>?</p>",
        "id": 392221903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695253018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236307.20refactor.20of.20monoidal.20categories/near/392124697\">said</a>:</p>\n<blockquote>\n<p>Do we actually want the <em>constructor</em> for a monoidal category to encourage passing only the whiskers and not the <code>tensorHom</code>? It seems in practice that we always have a <code>tensorHom</code> readily available</p>\n</blockquote>\n<p>The main reason why we still use tensorHom in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6307\">#6307</a> is that I tried to use existing proofs as much as possible to avoid making the diff too large.</p>",
        "id": 392241917,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1695268997
    },
    {
        "content": "<p>I'm not sure at the moment if we should keep <code>tensorHom</code>. I just mention that during this refactoring I found that <code>RepresentationTheory</code> uses the following defeq that depends on defeq property of <code>tensorHom</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.FdRep</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">MonoidalCategory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">FdRep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">⊗</span> <span class=\"n\">W</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ρ</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">TensorProduct.map</span> <span class=\"o\">(</span><span class=\"n\">V.ρ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W.ρ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 392242392,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1695269164
    },
    {
        "content": "<p>Given how slow RepresentationTheory is, anything that <em>reduces</em> our dependence on defeq there is probably a good thing.</p>",
        "id": 392245871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695270567
    },
    {
        "content": "<p>Part of the reason representation theory is slow is that when passing from modules to category objects and back there's a subtlety; if two modules are defeq as types but not syntactically equal then it's lots of work to prove that the corresponding objects in the category are defeq because the module structures found by typeclass inference might be wildly different.</p>",
        "id": 392250391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695273504
    },
    {
        "content": "<p>Is it not the case that the module structures are also defeq in those cases?</p>",
        "id": 392275182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695285681
    },
    {
        "content": "<p>Give me 10 seconds and I'll check.........................................................yes, although boy did I have to unfold a lot.</p>",
        "id": 392284244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695288728
    }
]