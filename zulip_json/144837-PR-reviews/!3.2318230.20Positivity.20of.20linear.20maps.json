[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477483\">@Monica Omar</span>, <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>. I propose we close <a href=\"https://github.com/leanprover-community/mathlib/pull/18230\">!3#18230</a>, or otherwise remove it from the <code>not-too-late</code> list for mathlib3. My reading of the conversation there was that we were far from certain whether we wanted these definitions in mathlib. As such maybe it makes sense that anything that grows out of this PR should happen directly in Mathlib4?</p>\n<p>I'm very happy to be corrected here and to have further discussion about this PR. If we do decide not to proceed with it, I'm very sorry <span class=\"user-mention\" data-user-id=\"477483\">@Monica Omar</span> for how long this has taken. Unfortunately everyone's attention has been diverted by the porting process, and many PRs languished unreasonably long on the <a href=\"https://bit.ly/3AZk1Qk\">#queue3</a>.</p>",
        "id": 378337987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690261484
    },
    {
        "content": "<p>Yeah, I think removing it from the the <code>not-too-late</code> list or closing is the right approach for now (sorry Monica!). I'm not against having the predicate so much as I am against developing the API around that predicate. For reference, my plan for positivity is <a href=\"https://github.com/leanprover-community/mathlib4/pull/4871\">#4871</a>. Then we can have TFAEs which give equivalent conditions in certain contexts (like <code>IsPositive</code>, or that the spectrum is nonnegative).</p>",
        "id": 378598469,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690317150
    },
    {
        "content": "<p>I would also like to apologize since I started reviewing this but then disapeared and let it rot, and I'm really glad to see that this hasn't discouraged Monica to contribute to Mathlib.</p>",
        "id": 378599525,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690317515
    },
    {
        "content": "<p>My views on this positivity predicate have also evolved (I was the one introducing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinear.IsPositive#doc\">docs#ContinuousLinear.IsPositive</a> after all!) and I now think that the correct way to do this is to have <em>one</em> notion, which is positivity in C*-algebras (actually in star rings with assumptions that I don't knpw) and then multiple ways to characterize for specific algebras. This used to be a long-term ideal, but now that it's just around the corner I think this PR goes a bit in the wrong direction, and indeed some of the existing API around positive continuous linear maps should probably go as well.</p>",
        "id": 378600776,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690317953
    },
    {
        "content": "<p>Probably this PR can stay open though, as a reminder that some of these result still don't exist in Mathlib and that we are just taking a different approach.</p>",
        "id": 378601141,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690318065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!3.2318230.20Positivity.20of.20linear.20maps/near/378598469\">said</a>:</p>\n<blockquote>\n<p>Yeah, I think removing it from the the <code>not-too-late</code> list or closing is the right approach for now (sorry Monica!). I'm not against having the predicate so much as I am against developing the API around that predicate. For reference, my plan for positivity is <a href=\"https://github.com/leanprover-community/mathlib4/pull/4871\">#4871</a>. Then we can have TFAEs which give equivalent conditions in certain contexts (like <code>IsPositive</code>, or that the spectrum is nonnegative).</p>\n</blockquote>\n<p>Hmm, I see your point. I'm not sure I'm entirely convinced, though. For linear maps, I feel like you should only define positivity (or non-negativity) <code>0 ≤ x</code> for symmetric linear maps <code>x</code> and not just for any linear map.</p>",
        "id": 378835860,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690383697
    },
    {
        "content": "<p>Do you mean only define it for the subtype (e.g., <code>selfAdjoint A</code>)? Or do you mean that positivity should imply <code>IsSymmetric</code>? If the former, then I don't agree (because it's just inconvenient), and I can explain further if you want. If the latter, then of course I agree, but that is already entailed by my definition.</p>",
        "id": 378898319,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690394704
    },
    {
        "content": "<p>Inconvenient in what sense?</p>",
        "id": 378935316,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690402725
    },
    {
        "content": "<p>You have a subtype of a subtype (in general, yuck to that), and then you have to apply two <code>Subtype.val</code> coercions to get to the full type. It also prevents you from being able to talk about <code>x ≤ y</code> for arbitrary <code>x y : A</code>, which is inconvenient because it means you would need to build terms of type <code>selfAdjoint A</code> first. Generally, requiring fewer hypotheses makes life easier (think of junk values, for example). And in this case, <code>x ≤ y</code> is actually meaningful for <code>x y : A</code> anyway: it means <code>0 ≤ y - x</code> (and necessarily <code>y - x</code> is self adjoint here, but that's effectively a theorem, not a hypothesis you have to check).</p>\n<p>I used to think we should only have <code>≤</code> on the <code>selfAdjoint A</code> subtype, but I've been converted. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 378945188,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690405275
    },
    {
        "content": "<p>PSA: I removed the <code>not-too-late</code> tag but left the PR open since that seemed to be the consensus.</p>",
        "id": 378956738,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690409577
    },
    {
        "content": "<p>Yeah, actually, you're completely right! I see your point now haha. On paper, it seems fine to define it that way; but in Lean it gets messy.</p>\n<p>Well, shouldn't we just remove the definition of positive continuous linear maps now then? And make a theorem for the inner product being non-negative for positive maps. Same goes for matrices, instead of having the positive semi-definite definition, we should probably just remove it now and make that as a theorem?</p>",
        "id": 379091760,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690453107
    },
    {
        "content": "<p>That’s probably the end goal indeed. That said, there’s no point in removing something until we have the better alternative (in the same way that there is no point in adding something that will be refactored): the most sane thing to do is to just not touch it until we have the better solution available.</p>",
        "id": 379129712,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690459509
    },
    {
        "content": "<p>An argument in favor of 18230 is that it just generalizes the <code>is_positive</code> we already have to work for linear_maps too</p>",
        "id": 379130593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690459658
    },
    {
        "content": "<p>Yeah, that is true! So, in a sense, it's not going in the wrong direction, it's just keeping the same definition, but making it work for more stuff</p>",
        "id": 379136409,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690460658
    },
    {
        "content": "<p>Yes but we’ll want to remove that at some point so there’s no point generalizing it.</p>",
        "id": 379137415,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690460808
    },
    {
        "content": "<p>But we can add a lot more results by generalizing it or changing the definition to something better. And the results would only need to be slightly changed after removing the definition.</p>",
        "id": 379139013,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690461047
    },
    {
        "content": "<p>Thinking about it, won’t we run into some trouble because the space of linear maps is not a star algebra? For the same reason that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.IsSymmetric#doc\">docs#LinearMap.IsSymmetric</a> as well as the general <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSelfAdjoint#doc\">docs#IsSelfAdjoint</a></p>",
        "id": 379141711,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690461543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477483\">Monica Omar</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!3.2318230.20Positivity.20of.20linear.20maps/near/379139013\">said</a>:</p>\n<blockquote>\n<p>But we can add a lot more results by generalizing it or changing the definition to something better. And the results would only need to be slightly changed after removing the definition.</p>\n</blockquote>\n<p>I’m not sure I follow you. Do you agree that the ideal definition (modulo the possible issue I just posted about) is the one for star algebras?</p>",
        "id": 379142659,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690461711
    },
    {
        "content": "<p>Yeah, I agree, that is the ideal definition. I meant that, for the meantime, couldn't we change positivity for continuous linear maps to: <code>x</code> is positive if there exists <code>y</code> such that <code>x = star y * y</code>? I feel like that is a way forward, at the moment.</p>",
        "id": 379143788,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690461891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!3.2318230.20Positivity.20of.20linear.20maps/near/379141711\">said</a>:</p>\n<blockquote>\n<p>Thinking about it, won’t we run into some trouble because the space of linear maps is not a star algebra? For the same reason that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.IsSymmetric#doc\">docs#LinearMap.IsSymmetric</a> as well as the general <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSelfAdjoint#doc\">docs#IsSelfAdjoint</a></p>\n</blockquote>\n<p>That's a fair point. So we won't be able to define positivity for linear maps then? Doesn't that mean that we should have the definition in this PR?</p>",
        "id": 379144352,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690461994
    },
    {
        "content": "<p>I don’t know enough about the theory of partial operators, but I’m sure Moritz can tell us if we have a way around that. In particular, does it help if we extend to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearPMap#doc\">docs#LinearPMap</a> ? It is true that symmetric linear maps are exactly those which are equal to their adjoint as <code>LinearPMap</code>s, right?</p>",
        "id": 379146282,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690462317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477483\">Monica Omar</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!3.2318230.20Positivity.20of.20linear.20maps/near/379143788\">said</a>:</p>\n<blockquote>\n<p>Yeah, I agree, that is the ideal definition. I meant that, for the meantime, couldn't we change positivity for continuous linear maps to: <code>x</code> is positive if there exists <code>y</code> such that <code>x = star y * y</code>? I feel like that is a way forward, at the moment.</p>\n</blockquote>\n<p><del> Ah yes that might be an interesting temporary step. In particular, we'll have to prove that this characterization is equivalent to the current definition at some point, and that can probably be done without having the fully general setup as long as we make sure that the new definition we choose is exactly the one we'll use in the general case </del><br>\nEDIT: <a href=\"#narrow/stream/144837-PR-reviews/topic/!3.2318230.20Positivity.20of.20linear.20maps/near/379160651\">changed my mind</a></p>",
        "id": 379147618,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690462530
    },
    {
        "content": "<p>That said, I’m not sure you’ll be able to prove it conveniently without more API for the continuous functional calculus (to define the square root)</p>",
        "id": 379149840,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690462902
    },
    {
        "content": "<p>Isn't that the meaning used by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarOrderedRing#doc\">docs#StarOrderedRing</a> ?</p>",
        "id": 379150562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690463026
    },
    {
        "content": "<p>I don't think we should define the square root at the moment. But, I think having <code>star y * y</code> be the new definition for positivity of continuous linear maps is as close as we can currently get to positivity for general star algebras</p>",
        "id": 379150976,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690463084
    },
    {
        "content": "<p>Also, yeah, having <code>star y * y</code> be the new definition also means we can define a partial order on the set of continuous linear maps, and then we can get a star ordered ring. I feel this is very useful.</p>",
        "id": 379152497,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690463328
    },
    {
        "content": "<p>You probably want the more general <code>x ≤ y := ∃ p, p ∈ AddSubmonoid.closure (Set.range fun s =&gt; star s * s) ∧ y = x + p</code> that we use in <code>StarOrderedRing</code></p>",
        "id": 379153256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690463460
    },
    {
        "content": "<p>We can then remove the definition of positive semi-definite-ness for matrices and use the same definition. So this makes things a lot nicer</p>",
        "id": 379153838,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690463554
    },
    {
        "content": "<p>Do y'all agree? Should I do this?</p>",
        "id": 379154028,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690463588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!3.2318230.20Positivity.20of.20linear.20maps/near/379147618\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"477483\">Monica Omar</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!3.2318230.20Positivity.20of.20linear.20maps/near/379143788\">said</a>:</p>\n<blockquote>\n<p>Yeah, I agree, that is the ideal definition. I meant that, for the meantime, couldn't we change positivity for continuous linear maps to: <code>x</code> is positive if there exists <code>y</code> such that <code>x = star y * y</code>? I feel like that is a way forward, at the moment.</p>\n</blockquote>\n<p>Ah yes that might be an interesting temporary step. In particular, we'll have to prove that this characterization is equivalent to the current definition at some point, and that can probably be done without having the fully general setup as long as we make sure that the new definition we choose is exactly the one we'll use in the general case</p>\n</blockquote>\n<p>Sorry, this message was a bit silly, The whole point of waiting for Jireh's work on continuous functional calculus is to be able to prove this equivalence in a nice way, and his PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/4871\">#4871</a> already contains a good basis for the details of this definition. I think we should switch the focus on making sure that the setup in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4871\">#4871</a> is nice enough before going any further, and I fear that any attempt to skip steps here will only make our lives harder.</p>",
        "id": 379160651,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690464738
    },
    {
        "content": "<p>I don't get it. How are we going to have a partial order if we don't have a definition for positivity?</p>",
        "id": 379163678,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690465194
    },
    {
        "content": "<p>Like what exactly is the plan after <a href=\"https://github.com/leanprover-community/mathlib4/pull/4871\">#4871</a>?</p>",
        "id": 379165003,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690465422
    },
    {
        "content": "<p>Ah yes I misinterpreted the content of this PR. To be honest I'm not 100% happy with the proposed plan either, but my point is that we should focus our efforts here. You are very much welcome to participate in the discussions though, but we should really do it one step at a time and I worry that we end up with an unusable API if we do too much things in parallel without proper discussion.</p>",
        "id": 379169031,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690466078
    },
    {
        "content": "<p>Yeah, I agree, open communication is very important. We need to openly communicate our plans instead of impulsively doing things and having unusable API.</p>",
        "id": 379171472,
        "sender_full_name": "Monica Omar",
        "timestamp": 1690466465
    },
    {
        "content": "<p>35 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.234871.20StarOrderedRing.2Epositive\">#PR reviews &gt; #4871 StarOrderedRing.positive</a> by <span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span>.</p>",
        "id": 379312473,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690495739
    }
]