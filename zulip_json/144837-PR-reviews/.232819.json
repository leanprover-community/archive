[
    {
        "content": "<p>Did we get Minkowski' theorem in mathlib in the end? I remember not. How far is this PR from it? <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span></p>",
        "id": 248578147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628233497
    },
    {
        "content": "<p>I think this is still a week or so's work away from Minkowski, and maybe a little more from the best possible statement,  <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>'s <a href=\"https://github.com/leanprover-community/mathlib/issues/8142\">#8142</a> was a step in the right direction with regards to prerequisites, I'll have to see which of the other things in <a href=\"#narrow/stream/263328-triage/topic/random.20PR.3A.20.5BWIP.5D.20feat.28number_theory.2Fgeometry_of_numbers.29.3A.2E.2E.2E/near/215254314\">https://leanprover.zulipchat.com/#narrow/stream/263328-triage/topic/random.20PR.3A.20.5BWIP.5D.20feat.28number_theory.2Fgeometry_of_numbers.29.3A.2E.2E.2E/near/215254314</a> are now within reach.</p>",
        "id": 248584702,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628238996
    },
    {
        "content": "<p>To be more precise, one doesn't need to show that every convex set is measurable to get Minkowski, it just makes it easier to apply. So really the only prerequisite needed now is the behaviour of the Lebesgue measure on R^n under rescaling.</p>",
        "id": 248585036,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628239260
    },
    {
        "content": "<p>I'm not sure if we have that fact already or how we are from having it?</p>",
        "id": 248585243,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628239420
    },
    {
        "content": "<p>Okay I see. It feels like I won't be of much help...</p>",
        "id": 248585247,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628239425
    },
    {
        "content": "<p>It sounds quite basic, yeah. Probably some measure theorist would be able to answer.</p>",
        "id": 248585369,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628239504
    },
    {
        "content": "<p>Ok I've refreshed the branch a bit, it still needs a fair bit of work, but I think things are starting to looking a bit nicer now with this branch than it did before, I'm not sure if its because mathlib or me has improved since I first wrote this though <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 248629268,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628265405
    },
    {
        "content": "<p>Ahah! For whichever reason, that's great!</p>",
        "id": 248629521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628265506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> in <a href=\"https://github.com/leanprover-community/mathlib/issues/8142\">#8142</a> you mention proving the Haar measure is the lebesgue measure on <code>fin n \\to R</code>, have you done this somewhere? If so is there a branch I can base <a href=\"https://github.com/leanprover-community/mathlib/issues/2819\">#2819</a> off, even if preliminary?</p>",
        "id": 248718923,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628346509
    },
    {
        "content": "<p>I have not done that anywhere yet (when starting to write this comment, that is). I made an attempt redefining the Lebesgue measure to be the Haar measure, but I don't think that is a good idea anymore. It's better to just prove that they're equal. This is easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.haar_measure</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure</span> <span class=\"n\">topological_space</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_add_left_invariant_real_volume</span> <span class=\"o\">:</span> <span class=\"n\">is_add_left_invariant</span> <span class=\"o\">(</span><span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_add_left_eq_self</span><span class=\"o\">,</span> <span class=\"n\">real.map_volume_add_left</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Icc01</span> <span class=\"o\">:</span> <span class=\"n\">positive_compacts</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">is_compact_Icc</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">interior_Icc</span><span class=\"o\">,</span> <span class=\"n\">nonempty_Ioo</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">haar_measure_eq_lebesgue_measure</span> <span class=\"o\">:</span> <span class=\"n\">add_haar_measure</span> <span class=\"n\">Icc01</span> <span class=\"bp\">=</span> <span class=\"n\">volume</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">add_haar_measure_unique</span> <span class=\"n\">_</span> <span class=\"n\">Icc01</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Icc01</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_add_left_invariant_real_volume</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can make a PR with this. Should I put this in <code>lebesgue_measure</code> (importing <code>haar_measure</code>?) or in a new file?</p>",
        "id": 248736760,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1628372161
    },
    {
        "content": "<p>Great, thank you Floris, this is exactly the sort of thing I was hoping for, and pleasingly short! I'm happy to try and do the R^n version myself based on this, hopefully it won't get too much longer. I don't mind what file it's in, maybe a new file is best though? Do you have any ideas for proving the rescaling property that <code>volume ((1/2:\\R)\\smul S) = (1/2)^n * volume S</code> for S a subset of R^n?</p>",
        "id": 248737373,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628373160
    },
    {
        "content": "<p>If you can prove it for the closed unit hypercube then you can deduce it in general issuing some straightforward uniqueness of haar measure argument</p>",
        "id": 248737620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628373502
    },
    {
        "content": "<p>Another fact it'd be nice to have:  prove that Haar measure and Hausdorff measure on the circle are the same.</p>",
        "id": 248737727,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1628373627
    },
    {
        "content": "<p>A year and a half later, this is ready for review! Thanks a lot to <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  for the original proof, and <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> for debasis-ing it.</p>",
        "id": 345919002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680262612
    },
    {
        "content": "<p>Incidentally, this is <a href=\"https://github.com/leanprover-community/mathlib/pulls?page=20&amp;q=is%3Apr+is%3Aopen\">the second oldest standing PR on mathlib</a>.</p>",
        "id": 345920724,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680263050
    },
    {
        "content": "<blockquote>\n<p>wants to merge 187 commits</p>\n</blockquote>\n<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 345937874,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680266756
    },
    {
        "content": "<p>That's about double the number of lines added</p>",
        "id": 345938257,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680266850
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/2819\">#2819</a></p>\n</blockquote>\n<p>There are mathlib4 PRs with higher numbers!</p>",
        "id": 345965564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680272398
    },
    {
        "content": "<p>What's the status of the first? :)</p>",
        "id": 345979765,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1680275261
    },
    {
        "content": "<p>I just looked at the docs for <code>is_add_fundamental_domain L F μ</code> to try and understand this lemma, and was surprised to find that it says</p>\n<blockquote>\n<ul>\n<li>the sets <code>g • s</code>, are pairwise a.e. disjoint, i.e., <code>μ (g₁ • s ∩ g₂ • s) = 0</code> whenever <code>g₁ ≠ g₂</code>;<br>\n   we require this for <code>g₂ = 1</code> in the definition, then deduce it for any two <code>g₁ ≠ g₂</code>.</li>\n</ul>\n</blockquote>\n<p>but then the code is <code>pairwise $ ae_disjoint μ on λ g : G, g • s</code> which doesn't mention 1.</p>",
        "id": 345980395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680275387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232819/near/345979765\">said</a>:</p>\n<blockquote>\n<p>What's the status of the first? :)</p>\n</blockquote>\n<p>It's waiting on <a href=\"https://github.com/leanprover-community/mathlib/pull/13149\">#13149</a>, which is itself waiting on a proof that eluded Bhavik and us. I asked Bollobas but he said it was so easy that I should figure it out myself <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 345983316,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680275970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232819/near/345980395\">said</a>:</p>\n<blockquote>\n<p>the code is <code>pairwise $ ae_disjoint μ on λ g : G, g • s</code> which doesn't mention 1.</p>\n</blockquote>\n<p>Oops, I changed the definition a while back, and I missed that it was mentioned in the docstring.</p>",
        "id": 345983502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680276006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232819/near/345983316\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232819/near/345979765\">said</a>:</p>\n<blockquote>\n<p>What's the status of the first? :)</p>\n</blockquote>\n<p>It's waiting on <a href=\"https://github.com/leanprover-community/mathlib/pull/13149\">#13149</a>, which is itself waiting on a proof that eluded Bhavik and us. I asked Bollobas but he said it was so easy that I should figure it out myself <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>\n</blockquote>\n<p>Is this a case of \"I thought about it for an hour and it is indeed trivial\"?</p>",
        "id": 345993313,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680278047
    },
    {
        "content": "<p>More like \"Bollobas is disappointed that you're not as smart as him\"</p>",
        "id": 345993617,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680278129
    },
    {
        "content": "<p>What's the proof? I think it'd be nice to get things moving again and hopefully the whole Zulip can match bollobas :)</p>",
        "id": 346007042,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1680281123
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313149.20UV-compressing.20reduces.20the.20size.20of.20the.20shadow\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2313149.20UV-compressing.20reduces.20the.20size.20of.20the.20shadow</a> :)</p>",
        "id": 346007403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680281215
    },
    {
        "content": "<p>I think that when an esteemed professor says something like that, it sometimes means \"I'm sure it's easy but I can't be bothered to think about it\"</p>",
        "id": 346008495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680281507
    }
]