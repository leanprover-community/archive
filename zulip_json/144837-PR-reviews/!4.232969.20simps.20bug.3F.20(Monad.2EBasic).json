[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2969\">!4#2969</a> (already merged), <span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>  changed two appearances of <code>@[simps]</code> to <code>@[simp]</code> in <code>CategoryTheory.Monad.Basic</code>. I think that was incorrect, and in fact there is a bug in the implementation of <code>simps</code> that is revealed here.</p>\n<p>At <code>def ComonadIso.mk</code>, changing the <code>@[simp]</code> back to <code>@[simps]</code> gives the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"kd\">definition</span> <span class=\"n\">CategoryTheory.ComonadIso.mk_hom_app</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">constructor</span> <span class=\"n\">application.</span> <span class=\"n\">Please</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">@[simps!]</span><span class=\"bp\">`</span> <span class=\"n\">instead.</span>\n</code></pre></div>\n<p>while changing it to <code>@[simps!]</code> gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Invalid</span> <span class=\"n\">simp</span> <span class=\"kd\">lemma</span> <span class=\"n\">CategoryTheory.ComonadIso.mk_hom_app.</span>\n<span class=\"n\">The</span> <span class=\"n\">given</span> <span class=\"kd\">definition</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">constructor</span> <span class=\"n\">application</span><span class=\"o\">:</span>\n  <span class=\"n\">f.1</span>\n</code></pre></div>\n<p>as far as I can see <code>mk_hom_app</code> should be a fine simp lemma, and I'm not sure what is going wrong here.</p>\n<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, would you be able to have a look at this? It's all in master, so should be easy to locate.</p>",
        "id": 346712361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680573229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> in mathlib3, I think the <code>to_nat_trans</code> projection is what was generated; see<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/monad/basic.html#category_theory.monad_iso.mk_hom_to_nat_trans\">https://leanprover-community.github.io/mathlib_docs/category_theory/monad/basic.html#category_theory.monad_iso.mk_hom_to_nat_trans</a></p>\n<p>I ran into a similar issue here: <a href=\"#narrow/stream/287929-mathlib4/topic/simps.20generates.20invalid.20simp.20lemma/near/344295530\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/simps.20generates.20invalid.20simp.20lemma/near/344295530</a></p>\n<p>The solution was to use <code>[simps! toNatTrans]</code></p>",
        "id": 346713996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680574104
    },
    {
        "content": "<p>But I agree that the <code>app</code> lemma seems reasonable</p>",
        "id": 346714106,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680574176
    },
    {
        "content": "<p>In the category theory library, the correct solution is to add something like <code>initialize_simps_projections MonoidalNatTrans (-app, +toNatTrans)</code> to every structure that extends another structure. That gives the Lean 3 behavior.<br>\nThere is also an open issue of still being recover in the current configuration (<a href=\"https://github.com/leanprover-community/mathlib4/pull/2936\">!4#2936</a>), but that is a little tricky, so probably won't be fixed soon.</p>",
        "id": 346821630,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1680608662
    },
    {
        "content": "<p>Great, this is resolved in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3269\">https://github.com/leanprover-community/mathlib4/pull/3269</a>.</p>",
        "id": 346989713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680650983
    },
    {
        "content": "<p>If we have to do this for every single structure, whatâ€™s the benefit over <code>@[simps! toNatTrans]</code>?</p>",
        "id": 346994808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680654069
    },
    {
        "content": "<p>Then you'd have to do it for every new object in any of those structures, of which there are probably a lot more.</p>",
        "id": 347097561,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1680691616
    }
]