[
    {
        "content": "<p>I have a PR, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6736\">#6736</a>, in which it has been suggested that I consult Zulip for advice. Essentially we are I argue slightly inconsistent in how we interpret Bool in one place - in particular the issue is that most of the time false = left and true = right, but in e.g. <code>boolArrowEquivProd</code>, because I think \"bif b then when_true else when_false` has the true outcome first maybe, we interpret (effectively) true as left and false as right.</p>\n<p>Separately, do we have the non-identity equiv from Bool to itself (and a proof that these are the only two)? Essentially this is the equiv that I think things are twisted by.</p>",
        "id": 387566478,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1693177445
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.236736.20-.20Bool.20consistency.2E\">#PR reviews &gt; #6736 - Bool consistency.</a> by <span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span>.</p>",
        "id": 387566483,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693177453
    },
    {
        "content": "<p>/poll Which of the following equivs e : α × α ≃ (Bool → α) feels canonical to you?<br>\na = e (a, b) true, b = e (a, b) false<br>\na = e (a, b) false, b = e (a, b) true</p>",
        "id": 387566500,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1693177484
    },
    {
        "content": "<p>The non-identity equiv ought to be something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.compl#doc\">docs#Equiv.compl</a> for boolean algebras</p>",
        "id": 387611236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693206150
    },
    {
        "content": "<p>That seems to be a dead link - what precisely did you mean?</p>",
        "id": 387625079,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1693212448
    },
    {
        "content": "<p>Also, great to see a strong vote in favour of what I personally think is the right choice: I think that means <a href=\"https://github.com/leanprover-community/mathlib4/pull/6736\">#6736</a> could reasonably go ahead.</p>",
        "id": 387625257,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1693212515
    },
    {
        "content": "<p>Similarly, there are also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=piFinTwoEquiv#doc\">docs#piFinTwoEquiv</a> and friends.</p>",
        "id": 387625897,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693212775
    },
    {
        "content": "<p>Is <code>bif</code> notation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cond#doc\">docs#cond</a> ? Or is another thing again?</p>",
        "id": 387625948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693212798
    },
    {
        "content": "<p>Given this, it may be more consistent to switch the order of the equivalence.</p>",
        "id": 387625977,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693212816
    },
    {
        "content": "<p>I guess the <code>[true,false]</code> ordering probably only makes sense if we put the word <code>if</code> or <code>cond</code> in the name</p>",
        "id": 387626212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693212902
    },
    {
        "content": "<p>(\"switch the order\" meant to have <code>Bool</code> on the left and <code>Prod</code> on the right, I was not commenting on the order of <code>true/false</code>.)</p>",
        "id": 387626228,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693212910
    },
    {
        "content": "<p>I think to avoid scope creep, anything that is Fin2 related should be a separate PR, though I agree they should be consistent.</p>",
        "id": 387630781,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1693214723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> mercifully it's just notation</p>",
        "id": 387631016,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1693214807
    },
    {
        "content": "<p>It does look as though the Fin Two equivalences have things with <code>false &lt; true</code>. I am convinced this is the right way to go.</p>",
        "id": 387665034,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1693227970
    },
    {
        "content": "<p>also I think <code>false &lt; true</code> is just true, <code>Bool</code> is ordered according to mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.Basic</span>\n<span class=\"k\">#eval</span> <span class=\"n\">false</span> <span class=\"bp\">&lt;</span> <span class=\"n\">true</span> <span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 387665492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693228117
    },
    {
        "content": "<p>Yes. The only argument in favour of the current thing is simply that <code>cond</code>  has the <code>true</code> come before the <code>false</code> (that is, cond c x y is x when x is true and y when c is false). But that's essentially just how we've defined cond (because \"nif statements\" would be confusing...).</p>",
        "id": 387665962,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1693228268
    },
    {
        "content": "<p>If we replaced <code>cond</code> with <code>Bool.cases</code> in that decl then I think even that argument would go away</p>",
        "id": 387679215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693232523
    },
    {
        "content": "<p>Oh that's a nice idea.</p>",
        "id": 387765750,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1693261105
    }
]