[
    {
        "content": "<p>Could someone have a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/2920\">!4#2920</a>? This is a refactor of <code>solve_by_elim</code> that separates out the backtracking management from the lemma application. There is no change in behaviour or algorith, it's just separation of distinct concerns. I have a followup PR to make that revamps the <code>backtracking</code> code completely, giving it a much more sensible API that will hopefully be helpful for working with nondeterministic tactics generally. But I'd like this simple PR through first.</p>",
        "id": 346097980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680319255
    },
    {
        "content": "<p>In particular, if you have complaints about the API for controlling backtracking in this PR being baroque or unnecessarily complicated: yes, I know! :-) It's just what is currently in mathlib4, and I'll make it saner in the next PR.</p>",
        "id": 346098303,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680319424
    },
    {
        "content": "<p>Do you plan to use aesop (or its internals) in the next PR? Backtracking search on mvars sounds quite similar to what aesop is doing, at least superficially, I have no idea how easy it is to make use of for non-aesop tactics</p>",
        "id": 346222166,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680366006
    },
    {
        "content": "<p>There's not very much that goes into backtracking search itself. In a sense, it's just <a href=\"https://github.com/leanprover-community/mathlib4/pull/2920/files#diff-6288b13b7138646e789bbd4f027e84cb494a4a8aa96031df9e90acf624334726R47-R49\">these three lines</a> that drive backtracking, and the rest is policy.</p>\n<p>I'd worry that trying to make everything that uses backtracking search to use the same engine would complicate things, but if aesop already has something to do backtracking search with <code>solve_by_elim</code>-like policies then it could be worth looking into.</p>",
        "id": 346238875,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680373719
    },
    {
        "content": "<p>There is now a follow-up PR to this one, at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3480\">https://github.com/leanprover-community/mathlib4/pull/3480</a>, which simplifies how <code>apply_rules</code> is implemented in terms of <code>solve_by_elim</code>. Now that the backtracking is separate from the lemma application, we can just not backtrack, rather than hack no-backtracking on top of backtracking code!</p>",
        "id": 350662856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681788811
    }
]