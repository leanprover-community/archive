[
    {
        "content": "<p>Can I ask someone to review <a href=\"https://github.com/leanprover-community/mathlib4/pull/7341\">#7341</a>? <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> already gave an earlier review.</p>\n<p>The main part of this PR adds a function <code>Finset.update</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">updateFinset</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>This is exactly what we need to define a convenient-to-work-with iterated integral that <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> and I <a href=\"https://github.com/leanprover-community/mathlib4/blob/4451bb59250aad3ce059fda20f904401a4bd0be9/Mathlib/MeasureTheory/Integral/Marginal.lean#L31\">defined</a>. <br>\nIt is quite specific since <code>y</code> has as domain a subtype of  <code>ι</code> and <code>s</code> being a <code>Finset</code> instead of a <code>Set</code>. The fact that <code>s</code> is a Finset is important: Eric reasonably requested to generalize <code>s</code> to an arbitrary set. However, this is super painful, since the type of <code>y</code> mentions <code>s</code>, so if <code>s = s₁ ∪ s₂</code>, then it matters whether we take finset-unions or set-unions, since their coercions to Type will not be definitionally equal.</p>\n<p>I could live with renaming <code>updateFinset</code> to <code>marginalAux</code> or <code>marginalIntegrand</code> or something. However, I will also need measurability properties of this definition, and they live more nicely in <code>MeasurableSpace.Basic</code> than in (the future file) <code>Marginal</code>.</p>",
        "id": 396894142,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697460065
    },
    {
        "content": "<p>What about we add a <code>carrier</code> field to <code>Finset</code> so that <code>↑(s ∪ t) = ↑s ∪ ↑t</code> is defeq? Then you won't have problems anymore.</p>",
        "id": 396894742,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697460298
    },
    {
        "content": "<p>That's a good solution to changing Finset defeqs <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>; but do we really need this to be a defeq in the first place?</p>",
        "id": 396914450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697466127
    },
    {
        "content": "<p>It would be quite practical for things like <code>x ∈ {a, b, c} ↔ x = a ∨ x = b ∨ x = c</code> as well.</p>",
        "id": 396914623,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697466175
    },
    {
        "content": "<p>It's not fully clear to me whether that refactor is a good idea; it certainly would be interesting to explore, but I don't think it's reasonable to ask Floris to wait for it</p>",
        "id": 396915355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697466369
    },
    {
        "content": "<p>The ultimate motivation here is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">marginal</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∫⁻</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">updateSet</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">Measure.pi</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">μ</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>right?</p>",
        "id": 396915686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697466474
    },
    {
        "content": "<p>I assume using <code>Finite</code> or <code>Set.Finite</code> on a <code>Set</code> is worse than both of the other two approaches you've tried?</p>",
        "id": 396917772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697467079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237341.20updateFinset/near/396917772\">said</a>:</p>\n<blockquote>\n<p>I assume using <code>Finite</code> or <code>Set.Finite</code> on a <code>Set</code> is worse than both of the other two approaches you've tried?</p>\n</blockquote>\n<p><code>Set.Finite</code> won't work, since <code>Measure.pi</code> is only defined for finite products, and type-class inference cannot use a <code>Set.Finite</code> hypothesis.<br>\n<code>Finite</code> might conceivably work. It would require a refactor of <code>Measure.pi</code> to <code>Finite</code> indexing types instead of <code>Fintype</code> indexing types.<br>\nIt is not clear to me whether your suggestions will actually be better than the current approach (and there might be another roadblock along the way).</p>",
        "id": 397035018,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697523028
    },
    {
        "content": "<p>Does a refactor to make <code>Measure.pi</code> take a Finset rather than a fintype help at all? (And make sense mathematically?)</p>",
        "id": 397041687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697526134
    },
    {
        "content": "<p>That would eliminate the dependent types here, right?</p>",
        "id": 397041830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697526190
    },
    {
        "content": "<p>You mean a finset on an arbitrary indexing type? I'm not sure if I can make sense of that mathematically. And that is almost never the thing you want to do. On <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> you don't want the product measure on just some of the coordinates, you just want the product measure.<br>\n<code>marginal</code> is trying to hide these annoying type issues behind a nice API. The definition of <code>marginal</code> is hideous, but then the operation has really nice properties (e.g. <code>marginal</code> on a disjoint union is just iterating the <code>marginal</code>).</p>",
        "id": 397055904,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697531316
    },
    {
        "content": "<p>I'm getting some unusual (and unrelated) CI errors</p>\n<p>before merging master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Lean4Checker</span><span class=\"bp\">/</span><span class=\"n\">Tests</span><span class=\"bp\">/</span><span class=\"n\">ReduceBool.lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">44</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">Bool</span> <span class=\"n\">false</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">Bool</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">Lean.reduceBool</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6565570047/job/17834369158\">https://github.com/leanprover-community/mathlib4/actions/runs/6565570047/job/17834369158</a></p>\n<p>after merging master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">50</span><span class=\"bp\">/</span><span class=\"mi\">53</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">scripts.runMathlibLinter</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">53</span><span class=\"bp\">/</span><span class=\"mi\">53</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">runMathlibLinter</span>\n<span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">evaluate</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">init</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Lean.pp.beta'</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">module</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">process</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">env'</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">134</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6567134524/job/17839282717\">https://github.com/leanprover-community/mathlib4/actions/runs/6567134524/job/17839282717</a></p>",
        "id": 397477372,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697711972
    },
    {
        "content": "<p>It makes me sad but for reasons I don't understand, I think we have to revert <a href=\"https://github.com/leanprover-community/mathlib4/pull/7205\">#7205</a></p>",
        "id": 397481440,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697713486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> do you know what is going on here?</p>",
        "id": 397486481,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697715383
    },
    {
        "content": "<p>Oh, I see there is more discussion here <a href=\"#narrow/stream/144837-PR-reviews/topic/.237205.20pp.2Ebeta\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.237205.20pp.2Ebeta</a></p>",
        "id": 397486613,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697715428
    },
    {
        "content": "<p>ping <br>\n(<span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>)</p>",
        "id": 398293592,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1698155451
    },
    {
        "content": "<p>This PR has been holding up merging my work with <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> for a month and a half now. <br>\nCan I ask a new (or old) pair of eyes on this PR?</p>",
        "id": 400516847,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699272018
    },
    {
        "content": "<p>I think this should be merged, as soon as we figure out how to merge things.</p>",
        "id": 400524234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699274826
    },
    {
        "content": "<p>I think it's fine to merge as is if you're waiting on it. But please add a big flashing red TODO containing <code>@Yaël</code> and saying to clean this up.</p>",
        "id": 400524389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699274876
    }
]