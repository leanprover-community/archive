[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6582\">#6582</a> has some weirdness with <code>unusedHavesSuffices</code>, where <code>conv_lhs =&gt; unfold reciprocalFactors</code> (unfolding a recursive definition) causes a linting error. Is this a bug, potentially?</p>",
        "id": 384925591,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1692054090
    },
    {
        "content": "<p>Oh, so the offending haves are the ones that are needed for well-founded-recursion inside the definition, but are worthless in the equation lemma?</p>",
        "id": 384926635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692054646
    },
    {
        "content": "<p>Yes, that seems to be right</p>",
        "id": 384928703,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1692055792
    },
    {
        "content": "<p>If you make the definition instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A list of Dihedral groups whose product will have commuting probability `1 / n`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">reciprocalFactors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"o\">[]</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"mi\">3</span> <span class=\"o\">::</span> <span class=\"n\">reciprocalFactors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">reciprocalFactors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">div_two_lt</span> <span class=\"n\">h0</span> <span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">div_four_lt</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span>\n</code></pre></div>\n<p>you'll relieve all future lemmas that unfold the definition from also having to mark this as nolint</p>",
        "id": 385294834,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692138721
    },
    {
        "content": "<p>Just to check, <code>haveI</code> wouldn't have worked here?</p>",
        "id": 385296238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692139225
    },
    {
        "content": "<p>Unfortunately not (I also tried that as it seems a nicer solution, but it dissapears by the time the decreasing tactics get to it)</p>",
        "id": 385296568,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692139433
    },
    {
        "content": "<p>I encountered this issue again at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8885\">#8885</a>.</p>\n<p>I've made an issue tracking the false positive at <a href=\"https://github.com/leanprover/std4/pull/428\">std4#428</a>.</p>",
        "id": 406809916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702057617
    }
]