[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, your suggestion to escape the <code>\"</code> in messages at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6866#discussion_r1311279563\">https://github.com/leanprover-community/mathlib4/pull/6866#discussion_r1311279563</a> (in the comments on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6866\">#6866</a>) means now that newlines are escaped too. See <a href=\"https://github.com/leanprover/lean4/pull/2478#issuecomment-1700945449\">https://github.com/leanprover/lean4/pull/2478#issuecomment-1700945449</a> for an unfortunate example of this in action. </p>\n<p>Does anyone know how I'm meant to do this? I have a string <code>val</code> that definitely contains newlines, but could potentially contain quotes if someone has edited the bots previous comments. I need to produce the JSON <code>{ \"body\": \"$val\" }</code>, but without escaping the newlines...</p>\n<p>Eric's proposal (which is now live) unfortunately escapes the newlines:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>%<span class=\"w\"> </span>jq<span class=\"w\"> </span>--null-input<span class=\"w\"> </span>--arg<span class=\"w\"> </span>val<span class=\"w\"> </span><span class=\"s2\">\"foo\\n\\\"qux\\\"\"</span><span class=\"w\"> </span><span class=\"s1\">'{\"body\": $val}'</span>\n<span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"s2\">\"body\"</span>:<span class=\"w\"> </span><span class=\"s2\">\"foo\\\\n\\\"qux\\\"\"</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 388434991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693531682
    },
    {
        "content": "<p>The challenge here is to write</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">foo</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nv\">qux</span><span class=\"o\">=</span><span class=\"s2\">\"\\\"qux\\\"\"</span><span class=\"p\">;</span><span class=\"w\"> </span>&lt;something&gt;\n</code></pre></div>\n<p>and have this produce:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"s2\">\"body\"</span><span class=\"o\">:</span> <span class=\"s2\">\"foo</span><span class=\"se\">\\n\\\"</span><span class=\"s2\">qux</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 388437654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693533249
    },
    {
        "content": "<blockquote>\n<p>Eric's proposal (which is now live) unfortunately escapes the newlines:</p>\n</blockquote>\n<p>You're passing a <code>\\n</code> to jq, not a newline.  (Check out <code>echo \"\\n\"</code>)</p>",
        "id": 388437658,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1693533252
    },
    {
        "content": "<p>Sorry, I am so confused:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">echo</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>",
        "id": 388437715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693533298
    },
    {
        "content": "<p>prints a blank line?</p>",
        "id": 388437739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693533315
    },
    {
        "content": "<p>(well, two blank lines)</p>",
        "id": 388437757,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693533325
    },
    {
        "content": "<p>Are you using zsh?  It doesn't do that in bash.</p>",
        "id": 388437764,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1693533329
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">foo</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nv\">qux</span><span class=\"o\">=</span><span class=\"s2\">\"\\\"qux\\\"\"</span><span class=\"p\">;</span><span class=\"w\"> </span>jq<span class=\"w\"> </span>--null-input<span class=\"w\"> </span>--arg<span class=\"w\"> </span>val<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$foo</span><span class=\"s2\">\"</span><span class=\"s1\">$'\\n'</span><span class=\"s2\">\"</span><span class=\"nv\">$qux</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"s1\">'{\"body\":$val}'</span>\n</code></pre></div>",
        "id": 388437773,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1693533336
    },
    {
        "content": "<p>That seems to work, even on zsh! :-)</p>",
        "id": 388437836,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693533371
    },
    {
        "content": "<p>Or with less shell:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">foo</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nv\">qux</span><span class=\"o\">=</span><span class=\"s2\">\"\\\"qux\\\"\"</span><span class=\"p\">;</span><span class=\"w\"> </span>jq<span class=\"w\"> </span>--null-input<span class=\"w\"> </span>--arg<span class=\"w\"> </span>foo<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$foo</span><span class=\"s2\">\"</span><span class=\"w\"> </span>--arg<span class=\"w\"> </span>qux<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$qux</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"s1\">'{\"body\":($foo + \"\\n\" + $qux)}'</span>\n</code></pre></div>",
        "id": 388437911,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1693533437
    },
    {
        "content": "<p>Thank you. :-)</p>",
        "id": 388438258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693533636
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6909\">#6909</a></p>",
        "id": 388438336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693533680
    }
]