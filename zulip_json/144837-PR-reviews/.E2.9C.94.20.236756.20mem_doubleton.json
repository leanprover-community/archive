[
    {
        "content": "<p>Can somebody please merge this triviality?<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/6756\">https://github.com/leanprover-community/mathlib4/pull/6756</a><br>\nI have some commits waiting for this PR.</p>",
        "id": 387405179,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693040239
    },
    {
        "content": "<p>Should be called <code>mem_pair</code></p>",
        "id": 387408173,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693042551
    },
    {
        "content": "<p>I find it weird that the word for <code>[_]</code> is so much longer than the word for <code>[_,_]</code> but I'll respect that.</p>",
        "id": 387408614,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693042897
    },
    {
        "content": "<p>It is just my gut feeling that less useful things should occupy less expensive identifiers and more useful things can occupy more expensive identifiers (short words). Nevertheless, if mathlib already uses <code>pair</code> elsewhere, I am not going to push to change the convention.</p>",
        "id": 387408890,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693043109
    },
    {
        "content": "<p>Don't we use both terms already?</p>",
        "id": 387409542,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693043660
    },
    {
        "content": "<p>A very quick full-text search showed me that the word \"pair\" is used in many contexts in mathlib4, so \"doubleton\" would be probably better for two-element lists, but I am no expert on naming things.</p>",
        "id": 387410620,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693044550
    },
    {
        "content": "<p>the boring name is of course <code>mem_cons_cons</code></p>",
        "id": 387410767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693044706
    },
    {
        "content": "<p>If you really want to go in this direction, I would suggest <code>mem_cons_singleton</code> instead.</p>",
        "id": 387410986,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693044910
    },
    {
        "content": "<p>As a precisely descriptive name <code>mem_cons_cons_nil</code> would be most accurate but totally horrible.<br>\nI think <code>mem_doubleton</code> and <code>mem_pair</code> are nicer options.</p>",
        "id": 387412158,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693045991
    },
    {
        "content": "<p>Earlier discussion: <a href=\"#narrow/stream/116395-maths/topic/Naming.20mess\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Naming.20mess</a></p>",
        "id": 387412374,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693046176
    },
    {
        "content": "<p>Naming aside, the utility of this lemma seems pretty marginal; presumably we've had this case come up in mathlib before and we're happy to just use <code>mem_cons</code> and <code>mem_singleton</code> separately</p>",
        "id": 387432526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693061361
    },
    {
        "content": "<p>My subjective point of view:</p>\n<p>My brains feels like <code>a ∈ [b, c] ↔ a = b ∨ a = c</code> is a single step, hence I expect <code>library_search</code> to give me a lemma for it.<br>\nIn contrast, my brain doesn't expect <code>a ∈ [b, c, d] ↔ a = b ∨ a = c ∨ a = d</code> to be a single step.</p>",
        "id": 387447727,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693073697
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_pair#doc\">docs#Set.mem_pair</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.mem_pair#doc\">docs#Finset.mem_pair</a> exist?</p>",
        "id": 387503659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693120830
    },
    {
        "content": "<p>For me, <code>pair</code> certainly evokes the concept of \"two of something\", but I also do not think that it comes with an order.  For that, I would use \"ordered pair\", but would likely think of <code>Prod</code>, rather than \"<code>List</code> with two entries\".</p>\n<p>Thus, I would have expected Eric's non-existent guesses to be likely to exist, but I am not sure that I would have guessed <code>mem_pair</code> for <code>mem_doubleton</code>.</p>",
        "id": 387504743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693121837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236756.20mem_doubleton/near/387503659\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_pair#doc\">docs#Set.mem_pair</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.mem_pair#doc\">docs#Finset.mem_pair</a> exist?</p>\n</blockquote>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">Set.mem_def</span>\n</code></pre></div>\n<p>This doesn't succeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 387505564,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693122558
    },
    {
        "content": "<p>I'd expect <code>example (a b c : ℕ) : a ∈ ({b, c} : (Set ℕ)) ↔ a = b ∨ a = c := Iff.rfl</code> to work. The whole empty/singleton/insert machinery is conveniently set up for this; even <code>a ∈ {b, c, d} ↔ a = b ∨ a = c ∨ a = d</code> is true by <code>Iff.rfl</code>.</p>",
        "id": 387523858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693137450
    },
    {
        "content": "<p>Does it imply anything about <code>List</code>s?</p>",
        "id": 387523958,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693137517
    },
    {
        "content": "<p>No, because <code>List</code> membership switched to using a custom inductive type. (I think in Lean 3 it used to be by <code>Iff.rfl</code>?)</p>",
        "id": 387524195,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693137713
    },
    {
        "content": "<p>No, while this is mostly true, lean 3 <code>list.mem</code> did not have a special case for <code>[a]</code> so it would have unfolded to <code>a = b \\/ a = c \\/ false</code></p>",
        "id": 387560822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693171189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 387965272,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693342343
    }
]