[
    {
        "content": "<p>This PR, which has been stalled for a while, has some interesting problems. If anyone would like to jump in on this one, it could use some help!</p>\n<ol>\n<li>There is a PANIC in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Match/MatchEqs.lean#L167\"><code>_private.Lean.Meta.Match.MatchEqs.0.Lean.Meta.Match.SimpH.substRHS</code></a>, which is quite likely a Lean 4 bug. It would be great to minimize this, which is going to be some nontrivial work, but doable. Just start copying stuff into a new file, inlining imports and removing material that is incidental to generating the panic...</li>\n<li>\n<p>In the construction of <code>project</code> at the end of the file, the fields <code>map_comp</code> and <code>μ_natural</code> used to by proved by <code>tidy</code> in mathlib3, but <code>aesop_cat</code> can't yet cope. (It's not brave enough about doing induction on hypotheses, see <a href=\"#narrow/stream/287929-mathlib4/topic/Aesop.20and.20cases\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Aesop.20and.20cases</a>).<br>\nEven so, when I try to prove these by hand, I have to write <code>induction' f using Quotient.recOn</code>, and I don't understand why just <code>induction</code> isn't enough.</p>\n</li>\n<li>\n<p>Again in the construction of <code>project</code>, in <code>μ_natural</code>, Lean doesn't seem to process the proof; it says there are unfinished goals but doesn't produce goal states during the final steps. Not sure what is happening here.</p>\n</li>\n</ol>",
        "id": 347359951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680776090
    },
    {
        "content": "<p>(And thanks Moritz for the work on this one already. It was not a smooth ride. :-)</p>",
        "id": 347367449,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680777792
    },
    {
        "content": "<p>I could fix <a href=\"https://github.com/leanprover-community/mathlib4/pull/2808\">!4#2808</a> by using <code>dsimp</code> instead of <code>simp</code> for the definition which strangely triggered a PANIC. I have also ported <code>CategoryTheory.Monoidal.Free.Coherence</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/3769\">!4#3769</a>, which is mostly done, except for another PANIC \"invalid LCNF substitution of free variable with expression CategoryTheory.FreeMonoidalCategory.NormalMonoidalObject.{u}\" at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3769/files#diff-c2efee64cb592a9da8340f823962d63d41ab3cf932cc32b0e1375f0f24d6e968R117-R136\">https://github.com/leanprover-community/mathlib4/pull/3769/files#diff-c2efee64cb592a9da8340f823962d63d41ab3cf932cc32b0e1375f0f24d6e968R117-R136</a></p>",
        "id": 355402986,
        "sender_full_name": "Joël Riou",
        "timestamp": 1683112956
    },
    {
        "content": "<p>Adding <code>dsimp [normalizeObj]</code> avoids the panics though I am not sure why</p>",
        "id": 358878056,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684286598
    },
    {
        "content": "<p>Thanks! Now, it compiles.</p>",
        "id": 359322306,
        "sender_full_name": "Joël Riou",
        "timestamp": 1684395031
    },
    {
        "content": "<p>Hmm. Does just <code>dsimp</code>work to avoid the panic?</p>",
        "id": 359385690,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684413848
    }
]