[
    {
        "content": "<p>Hey! I have tried to implement the max-flow min-cut theorem in <a href=\"https://github.com/leanprover-community/mathlib/tree/max_flow_min_cut\">my branch</a> in mathlib, but my work is incomplete. There are a few lemmas in the no_augm_path lemma which need to be proven. However, I am not sure if I will be able to resolve them soon, but I still want to contribute to mathlib. My code can be found also in <a href=\"https://github.com/amilchew/Max-Flow_Min-Cut/blob/master/src/max_flow_min_cut.lean\">my repository</a>. Should I create a pull request and ask for a review or I should wait until advised so? Thank you!</p>",
        "id": 356940445,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1683629495
    },
    {
        "content": "<p>Are there parts which can be naturally split out into separate PRs that are already complete? (as you have quite a number of lines unless it shrinks significantly during review I'd think that several PRs would be a natural way to get this included, rather than one big one that is hard to review, e.g. PR some defs and basic lemmas first, then some intermediate lemmas, then the big result separately at the end)<br>\nHow hard do you think the remaining parts are?</p>\n<p>You could always open a draft PR just so its a bit easier for people to look at your code and comment on it.</p>\n<p>One of the first obvious things about your work is that you have many very long proofs, mathlib would almost definitely want those breaking down into sublemmas a bit more.<br>\nAlso you should check out <a href=\"https://leanprover-community.github.io/contribute/style.html\">https://leanprover-community.github.io/contribute/style.html</a> as a first step, and run the linters (style and code) on your work if you haven't already. <br>\nGetting code into mathlib state definitely does require quite a bit of work still.</p>",
        "id": 356952423,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683632290
    },
    {
        "content": "<p>Also worth mentioning that the transition from mathlib3 to mathlib4 is fast approaching, so unless this goes very quickly it's likely that at some point porting your work to mathlib4 (hopefully mostly automated) and PRing it there will be the way to go</p>",
        "id": 356953555,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683632520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Incomplete.20work/near/356952423\">said</a>:</p>\n<blockquote>\n<p>Are there parts which can be naturally split out into separate PRs that are already complete? (as you have quite a number of lines unless it shrinks significantly during review I'd think that several PRs would be a natural way to get this included, rather than one big one that is hard to review, e.g. PR some defs and basic lemmas first, then some intermediate lemmas, then the big result separately at the end)<br>\nHow hard do you think the remaining parts are?</p>\n<p>You could always open a draft PR just so its a bit easier for people to look at your code and comment on it.</p>\n<p>One of the first obvious things about your work is that you have many very long proofs, mathlib would almost definitely want those breaking down into sublemmas a bit more.<br>\nAlso you should check out <a href=\"https://leanprover-community.github.io/contribute/style.html\">https://leanprover-community.github.io/contribute/style.html</a> as a first step, and run the linters (style and code) on your work if you haven't already. <br>\nGetting code into mathlib state definitely does require quite a bit of work still.</p>\n</blockquote>\n<p>Thank you very much for your response. The weak duality of the theorem, i.e. the value of every flow is less than or equal to the capacity of every cut, can be separated as its proof of correctness is completed. <br>\nAlso, the lint style says 'Error: ERR_TAC: Files in mathlib cannot import the whole tactic folder, nor <a href=\"http://tactic.omega\">tactic.omega</a> or tactic.observe',  saying several times 'Warning: WRN_BRC: Probable misformatting of curly braces' and then exits with code 123, I am not sure why.<br>\nIn terms of style, I have followed the documentation guidance, so the style of the code should be okay. <br>\nAs for mathlib4, <a href=\"https://gitlab.com/Shreyas941/maxflowmincutlean4/-/blob/master/MaxFlowMinCut.lean\">this repository</a> is based on my work, so once I complete my proof, the transition will be done soon.</p>",
        "id": 357249548,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1683717200
    },
    {
        "content": "<p>I think exit code 123 just means the linter failed on some file (as we use xargs to pass the list of files). So its due to the \"cannot import tactic\". which is basically a rule that you shouldn't <code>import tactic</code> itself, but instead only the tactics you need (of course you will likely want to import tactic while working on a file but remove them before the file is added to mathlib).<br>\nAs for the curly braces I'd recommend looking at a few files in mathlib to get a feel for the way we lay things out, apologies if worrying about braces seems a bit excessive but mathlib tries to stick to a very consistent style.<br>\nIt looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n</code></pre></div>\n<p>are sufficient imports for your file</p>",
        "id": 357279190,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683723122
    },
    {
        "content": "<p>Or better yet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n</code></pre></div>\n<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 357279584,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1683723197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Incomplete.20work/near/357279190\">said</a>:</p>\n<blockquote>\n<p>I think exit code 123 just means the linter failed on some file (as we use xargs to pass the list of files). So its due to the \"cannot import tactic\". which is basically a rule that you shouldn't <code>import tactic</code> itself, but instead only the tactics you need (of course you will likely want to import tactic while working on a file but remove them before the file is added to mathlib).<br>\nAs for the curly braces I'd recommend looking at a few files in mathlib to get a feel for the way we lay things out, apologies if worrying about braces seems a bit excessive but mathlib tries to stick to a very consistent style.<br>\nIt looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n</code></pre></div>\n<p>are sufficient imports for your file</p>\n</blockquote>\n<p>Thank you both for your replies! I changed that and reformated the brackets a little bit (I think following the format in other documents as well), but lint still exits with the same exit code, this time without displaying the error for the tactics import. It just says 'Warning: WRN_BRC: Probable misformatting of curly braces' like 10 times and then exits. I have no idea how to fix that.</p>",
        "id": 357631751,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1683820166
    },
    {
        "content": "<p>If you create a PR, then it will leave a comment on each line where the braces are offensive</p>",
        "id": 357632569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683820323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Incomplete.20work/near/357632569\">said</a>:</p>\n<blockquote>\n<p>If you create a PR, then it will leave a comment on each line where the braces are offensive</p>\n</blockquote>\n<p>Thank you, I will do that. Should I make a PR for the whole code or just the proof of the weak duality as the code for the latter is complete?</p>",
        "id": 357660798,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1683826917
    },
    {
        "content": "<p>One option is to do both, and mark the incomplete one as depending on the other one, and with the WIP label</p>",
        "id": 357661674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683827133
    },
    {
        "content": "<p>Many small PRs is best. Reviewing happens fastest if each individual PR is easy. Ideally each PR will only modify/create one file (perhaps excepting adding a handful of lemmas to an earlier file). No file should <em>ever</em> have more than 1000 lines (just split as needed).</p>\n<p>My preference (this is far from a rule, however), is that every declaration is either: at most ~10 lines long, <em>or</em>, is copiously commented explaining the entire structure of the proof in natural language as interspersed comments.</p>",
        "id": 357711846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683845666
    },
    {
        "content": "<p>My first concern looking at your branch is that your theorem is about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">strange_digraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>  <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">is_edge</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hnonsymmetric</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">is_edge</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">is_edge</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>rather than about standard notions. Usual presentations of the max-cut-min-flow theorem don't need to say this \"non-symmetric\" condition, so I would hope a formalisation doesn't either.</p>\n<p>(Aside: since <code>[fintype V]</code> is not needed to define this structure, it should probably be deferred. There is an \"unused arguments\" linter that will complain about this.)</p>\n<p>I know that the combinatorics library in mathlib3 is a bit lacking, and we don't have directed graphs per se. One possibility would be to use <code>quiver</code> with <code>hom := nnreal</code>.</p>",
        "id": 357712437,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683846001
    },
    {
        "content": "<p>Finally, I see that your imports are all already ported to mathlib4. Given you already have a mathlib4 port written, could I suggest that you concentrate on PRing that directly? I'm not sure there's anything to gain by putting this into mathlib3 first.</p>",
        "id": 357712797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683846137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Incomplete.20work/near/357661674\">said</a>:</p>\n<blockquote>\n<p>One option is to do both, and mark the incomplete one as depending on the other one, and with the WIP label</p>\n</blockquote>\n<p>Done, thank you! I created a new branch called max_flow_min_cut_wip and made a PR from it with the work still in progress. The numbers of the two PRs are <a href=\"https://github.com/leanprover-community/mathlib/pull/18996\">#18996</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/18998\">#18998</a>.</p>",
        "id": 357832789,
        "sender_full_name": "Aleksandar Milchev",
        "timestamp": 1683889976
    }
]