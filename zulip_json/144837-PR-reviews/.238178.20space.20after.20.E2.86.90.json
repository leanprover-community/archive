[
    {
        "content": "<p>The trivial change <a href=\"https://github.com/leanprover-community/mathlib4/pull/8178\">#8178</a> touches lots of files, and therefore quickly produces merge conflicts, so I think it would be great to get it reviewed while there are no merge conflicts... <br>\nPerhaps it would also be good to a linter check/review dog for this kind of inconsistent spacing. I was hesitant to do that because I thought at some point there were plans to write the re-write the linter in lean, so adding more stuff after this rewrite might make more sense.</p>",
        "id": 402694639,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700226351
    },
    {
        "content": "<p>is this the style guide? As far as I knew, whether there was a space or not was down to personal preference</p>",
        "id": 402695193,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700226500
    },
    {
        "content": "<p>Whether to write <code>rw [←foo]</code> or <code>rw [← foo]</code> is my most frequent dilemma.<br>\nI'm not saying we should have a linter that allows only one of them, but...</p>",
        "id": 402695665,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700226660
    },
    {
        "content": "<p>in the style guide there are only examples where there is a space, but it is not explicitly mentioned. <br>\nI have, on multiple occasions have had comments on my pull requests, where maintainers corrected it, i.e. adding a space.<br>\nSo it might be of advantage to agree on exactly one way of writing it.</p>",
        "id": 402695760,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700226699
    },
    {
        "content": "<p>In the overwhelming majority of times it is done with spaces in the codebase currently.</p>",
        "id": 402695895,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700226743
    },
    {
        "content": "<p>In cases where <code>foo</code> does not get explicit arguments, I find the no-space version better. I am conflicted on the cases where  <code>foo</code> gets explicit arguments. However, I don't want to bikeshed too much...</p>",
        "id": 402696720,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700227007
    },
    {
        "content": "<p>I think it is worth agreeing on this before merging; I've personally always been a fan of no space, but I'm happy to change if this is what we are now agreeing is the correct style.</p>",
        "id": 402697562,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700227277
    },
    {
        "content": "<p>I think this sort of became the defacto style thanks to mathport</p>",
        "id": 402699921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700227978
    },
    {
        "content": "<p>I also slightly prefer the no-space version, but would prefer any convention over no convention</p>",
        "id": 402700043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700228025
    },
    {
        "content": "<p>I'm also happy with either. How should we find agreement? Make a poll?</p>",
        "id": 402700276,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700228108
    },
    {
        "content": "<p>I've been enforcing space <del>before</del> after <code>&lt;-</code> in std</p>",
        "id": 402700658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700228239
    },
    {
        "content": "<p>Before?</p>",
        "id": 402700706,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700228263
    },
    {
        "content": "<p>In both <code>do</code> notation and in <code>rw</code></p>",
        "id": 402700826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700228302
    },
    {
        "content": "<p>For a rough estimate what we have currently;<br>\n\"← \\S\" matches around 20000 times while<br>\n\"←\\S\" matches around 800<br>\nso the spacelesss version is less than 4%</p>",
        "id": 402700911,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700228340
    },
    {
        "content": "<p>I recall getting a figure of 10-20% spaceless in Mathlib 3, which is when I decided to switch to spaceful arrows.</p>",
        "id": 402701142,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700228421
    },
    {
        "content": "<p>So I believe this has always been the trend.</p>",
        "id": 402701205,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700228451
    },
    {
        "content": "<p>I recall going from spaceless <code>-foo</code> to spaceful <code>&lt;- foo</code> exactly when the <code>rw</code> syntax changed</p>",
        "id": 402701597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700228580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238178.20space.20after.20.E2.86.90/near/402700658\">said</a>:</p>\n<blockquote>\n<p>I've been enforcing space <del>before</del> after <code>&lt;-</code> in std</p>\n</blockquote>\n<p>I think it would be of benefit to have the same convention in std and mathlib4.</p>",
        "id": 402703024,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700229057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238178.20space.20after.20.E2.86.90/near/402700911\">said</a>:</p>\n<blockquote>\n<p>For a rough estimate what we have currently;<br>\n\"← \\S\" matches around 20000 times while<br>\n\"←\\S\" matches around 800<br>\nso the spacelesss version is less than 4%</p>\n</blockquote>\n<p>vscode is capped to 20K matches, if that's where that comes from, btw</p>",
        "id": 402705460,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700229808
    },
    {
        "content": "<p>good to know, let me run more thorough checks without vscode...</p>",
        "id": 402705647,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700229855
    },
    {
        "content": "<p>I guess it's worth merging this ASAP in any case and having a proper discussion afterwards, if wanted? It is much easier to switch back to spaceless, as there won't be any 100-char issues.</p>",
        "id": 402705733,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700229885
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Fish\"><pre><span></span><code>firsching@euler ~/mathlib4 <span class=\"o\">((</span>909a2b4a<span class=\"o\">))&gt;</span> find Mathlib -type f -name <span class=\"s1\">'*.lean'</span> -exec grep -o <span class=\"s2\">\"← \\S\"</span> <span class=\"err\">{}</span> <span class=\"se\">\\;</span> <span class=\"o\">|</span> wc -l\n34613\nfirsching@euler ~/mathlib4 <span class=\"o\">((</span>909a2b4a<span class=\"o\">))&gt;</span> find Mathlib -type f -name <span class=\"s1\">'*.lean'</span> -exec grep -o <span class=\"s2\">\"←\\S\"</span> <span class=\"err\">{}</span> <span class=\"se\">\\;</span> <span class=\"o\">|</span> wc -l\n1073\nfirsching@euler ~/mathlib4 <span class=\"o\">((</span>909a2b4a<span class=\"o\">))&gt;</span> <span class=\"nb\">math</span> <span class=\"s2\">\"1073 / (1073 + 34613)\"</span>\n0.030068\n</code></pre></div>\n<p>so around 3% spaceless</p>",
        "id": 402707097,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700230297
    },
    {
        "content": "<p>That's not really fair, though, because all code that's ported from lean 3 uses spaces</p>",
        "id": 402707724,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700230500
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Fish\"><pre><span></span><code>firsching@euler ~/mathlib <span class=\"o\">((</span>2a0ce625<span class=\"o\">))&gt;</span> find src -type f -name <span class=\"s1\">'*.lean'</span> -exec grep -o <span class=\"s2\">\"← \\S\"</span> <span class=\"err\">{}</span> <span class=\"se\">\\;</span> <span class=\"o\">|</span> wc -l\n23154\nfirsching@euler ~/mathlib <span class=\"o\">((</span>2a0ce625<span class=\"o\">))&gt;</span> find src -type f -name <span class=\"s1\">'*.lean'</span> -exec grep -o <span class=\"s2\">\"←\\S\"</span> <span class=\"err\">{}</span> <span class=\"se\">\\;</span> <span class=\"o\">|</span> wc -l\n10933\nfirsching@euler ~/mathlib <span class=\"o\">((</span>2a0ce625<span class=\"o\">))&gt;</span> <span class=\"nb\">math</span> <span class=\"s2\">\"10933 / (10933 + 23154)\"</span>\n0.320738\n</code></pre></div>\n<p>ok, seems like it was more like 32% before the port...</p>",
        "id": 402708769,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700230859
    },
    {
        "content": "<p>ceterum censeo there should be an automatic linter that justs autoformats the code in a way that nobody complaints about it during reviews in pull requests. I would e.g. like to be able to just make the line breaks automatic for a long <code>rw</code> and not decide manually to make it pretty. Wouldn't it be great to have a lean-tidy on save?</p>",
        "id": 402709398,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700231076
    },
    {
        "content": "<p>It is also not clear to me which one is preferred:<br>\nWith two spaces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">super_long_foo_bar</span><span class=\"o\">,</span>\n  <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or with four spaces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">super_long_foo_bar</span><span class=\"o\">,</span>\n    <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 402709792,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700231188
    },
    {
        "content": "<p>Moritz, everybody is convinced that having an auto-formatter would be awesome. But this is a lot of work and nobody had the skills and time for this yet.</p>",
        "id": 402709958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700231236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238178.20space.20after.20.E2.86.90/near/402709792\">said</a>:</p>\n<blockquote>\n<p>It is also not clear to me which one is preferred:<br>\nWith two spaces</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">super_long_foo_bar</span><span class=\"o\">,</span>\n   <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Certainly not three like you have there :)</p>",
        "id": 402710247,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700231331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238178.20space.20after.20.E2.86.90/near/402709958\">said</a>:</p>\n<blockquote>\n<p>everybody is convinced that having an auto-formatter would be awesome</p>\n</blockquote>\n<p>I am not convinced.</p>",
        "id": 402715873,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700233138
    },
    {
        "content": "<p>Given your track record of having different taste as anybody else here, this is not really contradicting my claim <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 402733525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700238329
    },
    {
        "content": "<p>Every big language reaches the point of having at least one auto-formatter. It's a matter of time until the first Lean 4 auto-formatter appears. And it will be a huge improvement</p>",
        "id": 402743077,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1700241615
    },
    {
        "content": "<p>Personally I always add a space after ← unless there's an opportunity to fit the whole <code>rw</code> in one line by removing the space(s) (an example is <a href=\"https://github.com/leanprover-community/mathlib4/pull/8178/files#diff-8f9307ee4d1eecdc63ee5d469ffd877e8909a72bfba541ffa19993978926c5e3L138-R139\">here</a>). Maybe we could allow some flexibility, and agree to never complain about the lack or presence of spaces after ← ...</p>",
        "id": 402748441,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700243802
    },
    {
        "content": "<p>I prefer to be told what to do.</p>",
        "id": 402751765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700244834
    },
    {
        "content": "<p>I never have the space. This is just calling for longer <code>rw</code> lines.</p>",
        "id": 402781658,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700256018
    },
    {
        "content": "<p>/poll space after <code>←</code></p>",
        "id": 402802277,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700266827
    },
    {
        "content": "<p>Does the second option mean there will be more conversations on spaces on pull requests?</p>",
        "id": 402839504,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700287991
    },
    {
        "content": "<p>ok, perhaps a good first step is to add this to the style guide:<br>\n<a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/402\">https://github.com/leanprover-community/leanprover-community.github.io/pull/402</a></p>",
        "id": 403780338,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700742912
    },
    {
        "content": "<p>The style guide is amended and <a href=\"https://github.com/leanprover-community/mathlib4/pull/8178\">#8178</a> is ready for review now.</p>",
        "id": 405542234,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1701529838
    },
    {
        "content": "<p>This still seems like a huge waste of time past (for you), present (for this conversation) and future (for the enforcement of the style)</p>",
        "id": 405542829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701530352
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> ! Contrary to <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , I am very grateful for the time you spent doing this. This results in a more uniform mathlib, and hopefully people learning the style by looking at mathlib will learn from there.</p>",
        "id": 405545251,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1701532420
    },
    {
        "content": "<p>I'm sad that this style was the one chosen but I agree that it's very good to have a uniform style, many thanks to Moritz for putting the work!</p>",
        "id": 405545404,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701532563
    },
    {
        "content": "<p>I think it's also worth noting <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, that even if we decide to change to the other style, Moritz' work makes this much easier (there are no line wraps to fiddle with) to do at a later date, and we get consistency in the meantime</p>",
        "id": 405551379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701537947
    },
    {
        "content": "<p>As somebody who likes to take breaks from brain-intensive Lean-ing to do some chores like style-uniformising, I would suggest that the opportunity cost calculation should be left to the author. A little plug of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8702\">#8702</a>, which is also style-related.</p>",
        "id": 405587111,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1701566853
    },
    {
        "content": "<p>Here is a pull request adding a check to lint-style, including suggestions how to fix it, so that the review dog should handle the enforcement of the style automatically: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8789\">#8789</a> <br>\n(and fixing occurrences in tactics here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8791\">#8791</a>)</p>",
        "id": 405768212,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1701677358
    },
    {
        "content": "<p>Thanks! The linter PR isn't passing CI atm</p>",
        "id": 405769055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701677696
    },
    {
        "content": "<p>It should after <a href=\"https://github.com/leanprover-community/mathlib4/pull/8791\">#8791</a> is merged, modulo some newly added  occurrences.</p>",
        "id": 405769311,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1701677801
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8789\">#8789</a> rebased and new findings fixed, should be ready to go</p>",
        "id": 405870511,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1701708948
    }
]