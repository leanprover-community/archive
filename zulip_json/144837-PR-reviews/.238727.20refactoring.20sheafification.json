[
    {
        "content": "<p>The initial goal of this PR was to define sheafification over an essentially small site without needing a \"universe bump\" in the target category. Following a suggestion of <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> I then defined a class <code>HasSheafify</code> which says that the inclusion functor of sheaves in presheaves has a left exact left adjoint and redefine <code>presheafToSheaf</code> as an arbitrary choice of such a left adjoint. </p>\n<p>It ended up breaking a few lemmas about explicit values of some units/counits. I could restate those lemmas for the \"explicit sheafification\" (plus construction twice), but the lemmas aren't used anywhere in mathlib. <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, you added the lemmas initially (e.g. <code>CategoryTheory.Sheaf.adjunctionToTypes_unit_app_val</code>), would you like to see them remain in mathlib stated for the explicit sheafification, or can they be removed?</p>\n<p>More generally, are people happy with this change? I must say it's a lot nicer to just write <code>variable [HasSheafify J D]</code> rather than the long list of conditions <code>D</code> has to satisfy to make the plus-plus construction a sheafification, when you want to sheafify.</p>",
        "id": 407209182,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1702290239
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Sheaf.adjunctionToTypes_unit_app_val#doc\">docs#CategoryTheory.Sheaf.adjunctionToTypes_unit_app_val</a></p>",
        "id": 407213334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702291442
    },
    {
        "content": "<p>In order to avoid diamonds, I would suggest making <code>Has(Weak)Sheafify</code> a <code>Prop</code>.</p>",
        "id": 407232967,
        "sender_full_name": "Joël Riou",
        "timestamp": 1702298716
    },
    {
        "content": "<p>If I recall correctly, I added various lemmas like <code>CategoryTheory.Sheaf.adjunctionToTypes_unit_app_val</code> because I wasn't satisfied with the lemmas that were automatically generated by <code>simps</code>, not necessarily because they were useful for any particular reason. What I suggest is to see what <code>simps</code> generates now (the behavior of simps is sufficiently different in lean4 that a different result would not be unexpected), and if they look reasonable, then I have no issue with removing <code>CategoryTheory.Sheaf.adjunctionToTypes_unit_app_val</code> and friends.</p>",
        "id": 407252982,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702305342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238727.20refactoring.20sheafification/near/407232967\">said</a>:</p>\n<blockquote>\n<p>In order to avoid diamonds, I would suggest making <code>Has(Weak)Sheafify</code> a <code>Prop</code>.</p>\n</blockquote>\n<p>Related to this, we could probably use a <code>Prop</code>-valued analogue of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.IsRightAdjoint#doc\">docs#CategoryTheory.IsRightAdjoint</a></p>",
        "id": 407253344,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702305458
    },
    {
        "content": "<p>Similarly, I think <code>PreservesLimits</code> et al. (which is used in the definition of <code>HasSheafify</code>) should also be a prop.</p>",
        "id": 407253998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702305669
    },
    {
        "content": "<p>BTW, do we really need <code>HasWeakShifify</code>? Why can't we just use <code>IsRightAdjoint</code>?</p>",
        "id": 407254226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702305737
    },
    {
        "content": "<p>Or at least make <code>HasWeakSheafify</code> an <code>abbrev</code>.</p>",
        "id": 407254294,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702305764
    },
    {
        "content": "<p>But can we really expect <code>simps</code> to give anything useful when we don't know anything about the adjunction we're applying it to except that it exists?</p>",
        "id": 407322769,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1702330093
    },
    {
        "content": "<p>Ok I initially had them <code>Prop</code>-valued but then I thought this turned out slightly nicer, but I don't mind either way. I'll change it back</p>",
        "id": 407322878,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1702330150
    }
]