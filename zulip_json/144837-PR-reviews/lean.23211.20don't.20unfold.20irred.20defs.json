[
    {
        "content": "<p>Continuing discussion from <a href=\"#narrow/stream/116395-maths/topic/witt.20vectors\" title=\"#narrow/stream/116395-maths/topic/witt.20vectors\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/witt.20vectors</a></p>\n<p>I suppose this PR might be somewhat controversial.</p>\n<ol>\n<li>It seems that it breaks mathlib in ways where before we could get away with <code>_</code> and let Lean figure it out, but now we need to supply data ourselves.</li>\n<li>It's not yet clear whether this will give a speedup of slowdown of the build.</li>\n<li>Without this PR, it seems that Witt vectors are \"doomed\".</li>\n</ol>",
        "id": 196190995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588603897
    },
    {
        "content": "<p>Are any of the core Lean experts in a position to explain why the PR makes Lean more stupid, and whether anything can be done about this stupidity whilst still enabling the Witt vectors work to compile in a reasonable amount of time?</p>",
        "id": 196191231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588603992
    },
    {
        "content": "<p>I'm very worried by everything I read on this topic. I have no idea what is a Witt vector, so I guess I don't care about them. I care very much about Lean not being stupid.</p>",
        "id": 196191393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588604055
    },
    {
        "content": "<p>Witt vectors are just a completely normal piece of algebra.</p>",
        "id": 196191427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604072
    },
    {
        "content": "<p>They solve the following problem. Given the ring Z/pZ, we want to define Z/p^2Z as a set by (Z/pZ)^2, and now we have to figure out how to define addition on it, so we need functions which send (a,b) in Z/pZ to 0 if a+b&lt;0 and 1 if a+b&gt;=p (the \"carry digit\"). This problem is solved by Witt polynomials, and Witt vectors are just (Z/pZ)^n with this structure of addition and multiplication. It all generalises to a large class of perfect fields.</p>",
        "id": 196191664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604167
    },
    {
        "content": "<p>Mathematically there is absolutely nothing remarkable about it.</p>",
        "id": 196191708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604183
    },
    {
        "content": "<p>You can take some limit of them, and then construct the p-adic integers Z_p from its residue field Z/pZ</p>",
        "id": 196191792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604223
    },
    {
        "content": "<p>Doing it with other finite fields builds a really interesting (to an arithmetician) class of complete discrete valuation rings.</p>",
        "id": 196191855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604255
    },
    {
        "content": "<p>Over at the Witt vectors topic, they seem to discuss this PR.<br>\nHere, on the topic of some technical PR, people discuss Witt vectors<br>\n/me rolls on the floor</p>",
        "id": 196192059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588604334
    },
    {
        "content": "<p>If you start with the p-adic numbers, take an algebraic closure, take the ring of integers, reduce it mod p, perfect it, and then take the Witt vectors and invert p, you have made Fontaine's field B_{dR}, which you (Patrick) once told me was a ridiculous goal (in terms of getting Antoine to formalise it ;-) ), but actually you can see how close we are :-)</p>",
        "id": 196192076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604342
    },
    {
        "content": "<p>Did someone try fixing all the errors in mathlib yet, or are we just guessing that they look pretty innocuous?</p>",
        "id": 196192156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588604376
    },
    {
        "content": "<p>The first one looked innocuous, so by induction we should be OK.</p>",
        "id": 196192294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604421
    },
    {
        "content": "<p>and induction usually works great in Lean</p>",
        "id": 196192329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604435
    },
    {
        "content": "<p>I've never built C++ Lean before.</p>",
        "id": 196192760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588604630
    },
    {
        "content": "<p>Let me try to do that, and try to fix mathlib.</p>",
        "id": 196192773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588604638
    },
    {
        "content": "<p>I'm looking at them now. I've been able to fix the non-category theory ones so far.</p>",
        "id": 196192854,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588604657
    },
    {
        "content": "<p>I'll push what I have to a branch shortly.</p>",
        "id": 196192910,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588604680
    },
    {
        "content": "<p>So did filling in the <code>_</code> with <code>x * y</code> in the algebra/opposite file solve that first problem?</p>",
        "id": 196192926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604688
    },
    {
        "content": "<p>For some reason <code>x * y</code> didn't work (maybe more coercions were needed somewhere), but <code>_ * _</code> did.</p>",
        "id": 196193025,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588604736
    }
]