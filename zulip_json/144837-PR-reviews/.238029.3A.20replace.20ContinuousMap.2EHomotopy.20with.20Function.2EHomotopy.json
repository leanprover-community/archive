[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8029\">#8029</a> generalizes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMap.Homotopy#doc\">docs#ContinuousMap.Homotopy</a> to take two arbitrary functions rather than continuous maps.</p>\n<blockquote>\n<p>This allows talking about homotopies without needing to supply proofs of continuity for the two ends. This for example simplifies the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HSpace#doc\">docs#HSpace</a>. cc <span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <br>\nOf course, if a homotopy exists between two functions, those two functions are automatically continuous because they are restrictions of the homotopy (which is continuous) to subspaces.<br>\n<code>Homotopy.refl</code> still needs a continuous map as input, and <code>Homotopic</code> is only an equivalence relation when restricted to ContinuousMap.</p>\n</blockquote>\n<p>This is a straightforward generalization and everything downstream is easy to fix, but homotopy is a central concept so we'd better reach consensus whether this is a good idea. If green lights are given I'll start fixing docstrings (it's not wrong to call the two functions continuous maps (assuming a homotopy exists), but mentions of C(X,Y) should probably be changed).</p>",
        "id": 399418928,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698722445
    },
    {
        "content": "<p>My only concern is whether speaking about homotopy between two terms in <code>C(X,Y)</code> becomes more cumbersome (i.e. if one needs to append a <code>.1</code>or a <code>\\u</code> because the thing is expecting a function rather than a continuous one).</p>",
        "id": 399448162,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698739917
    },
    {
        "content": "<p>Also, from a categorical point of view, the idea is a bit strange. Although you certainly have a forgetful functor from Top to Set, the morphisms in <code>Top</code> are <code>C(X,Y)</code>, and I wonder if the translation of homotopy-related concepts to the category library will not require some code-duplication in case everything about homotopies is done for general functions only.</p>",
        "id": 399448501,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698740062
    },
    {
        "content": "<p>The point is that ContinuousMap has a FunLike instance and therefore coercion to plain functions, so you can pretend them to be functions and it just works. So if you write <code>ContinuousMap.Homotopy f g</code> for <code>f g : C(X, Y)</code> before you'd write <code>Function.Homotopy f g</code> now, the only change being the declaration name. However, if you want to use dot notation then you'd need to write <code>f.1.Homotopy g</code> (or <code>g.1</code>) now, while it was <code>f.Homotopy g</code> before.</p>",
        "id": 399553118,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698767843
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 399553446,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698767901
    },
    {
        "content": "<p>The change in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8029\">#8029</a> looks ok to me.</p>",
        "id": 399555661,
        "sender_full_name": "Joël Riou",
        "timestamp": 1698768318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238029.3A.20replace.20ContinuousMap.2EHomotopy.20with.20Function.2EHomotopy/near/399553118\">said</a>:</p>\n<blockquote>\n<p>The point is that ContinuousMap has a FunLike instance and therefore coercion to plain functions, so you can pretend them to be functions and it just works. So if you write <code>ContinuousMap.Homotopy f g</code> for <code>f g : C(X, Y)</code> before you'd write <code>Function.Homotopy f g</code> now, the only change being the declaration name. However, if you want to use dot notation then you'd need to write <code>f.1.Homotopy g</code> (or <code>g.1</code>) now, while it was <code>f.Homotopy g</code> before.</p>\n</blockquote>\n<p>OK, this is all good, and I agree that <code>f.1.Homotopy g</code> is not worse than <code>f.Homotopy g</code>.</p>",
        "id": 399561274,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698770229
    },
    {
        "content": "<p>You (probably) never want to use <code>f.1.Homotopy g</code> though, because <code>f.1</code> is not reducibly defeq to <code>⇑f</code>. The former is <code>ContinuousMap.toFun f</code> and the latter is <code>FunLike.coe f</code>, so I think we're just breaking dot notation (which could be acceptable).</p>",
        "id": 399562149,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698770559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238029.3A.20replace.20ContinuousMap.2EHomotopy.20with.20Function.2EHomotopy/near/399562149\">said</a>:</p>\n<blockquote>\n<p>You (probably) never want to use <code>f.1.Homotopy g</code> though, because <code>f.1</code> is not reducibly defeq to <code>⇑f</code>. The former is <code>ContinuousMap.toFun f</code> and the latter is <code>FunLike.coe f</code>, so I think we're just breaking dot notation (which could be acceptable).</p>\n</blockquote>\n<p>Oh gosh. Well, then I am a bit more sceptical, in this context dot notation is really useful. In particular, given that we are not adding any mathematical generality, we should really weight whether losing dot notation is worth it, given that if one works with terms in <code>C(X,Y)</code>no continuity needs to be provided in general (composition, for instance, is continuous \"for free\").</p>",
        "id": 399562372,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698770645
    },
    {
        "content": "<blockquote>\n<p><code>f.1</code> is not reducibly defeq to <code>⇑f</code> </p>\n</blockquote>\n<p>Indeed Lean 4 doesn't seem to unfold <code>FunLike.coe</code> when elaborating <code>⇑</code>. I thought it unfolds all coercions (for example to <code>Subtype.val</code>), and <code>⇑</code> is actually pretty-printed as <code>↑</code>, but apparently it behaves differently here.</p>\n<p>You would still be able to write <code>(⇑f).Homotopy g</code> (<code>\\u=</code>) (which is a bit more cumbersome) or <code>open Function</code> and write <code>Homotopy f g</code>.</p>\n<p>If you search <code>.Homotopy </code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8029/files\">my PR</a> you'll find the dot notation is only used twice. Maybe it's used more prevalently in outside projects, I don't know.</p>",
        "id": 399572120,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698774067
    },
    {
        "content": "<p>Junyan, Lean 4 <em>inserts</em> the coercion, it does not <em>unfold</em> the head of the inserted coercion.</p>",
        "id": 399572461,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698774195
    },
    {
        "content": "<p>In this case, the <code>CoeFun</code> instance is the one coming from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunLike.hasCoeToFun#doc\">docs#FunLike.hasCoeToFun</a>, which declares the coercion function to be <code>FunLike.coe</code>, and that's what gets inserted.</p>",
        "id": 399572561,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698774241
    },
    {
        "content": "<p>This (Lean inserting the coercion) is exactly why we need the <code>@[coe]</code> attribute by the way. Because after the Lean inserts the coercion, there would be nothing left to say that something got coerced (which would be a problem for <code>norm_cast</code> for example, and also delaboration). With the <code>@[coe]</code> attribute, you can look at head of an application and ask \"does this have an <code>@[coe]</code> attribute?\".</p>\n<p>So, if you declare a coercion instance, but don't mark the function being inserted with <code>@[coe]</code> then you <em>will</em> be able to coerce elements of one type to the other, but they <em>won't</em> show up with a <code>↑</code> in the infoview.</p>",
        "id": 399573563,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698774620
    },
    {
        "content": "<p>The code below explains what I was getting at above:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>coercions</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"bp\">·</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Nat</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.foo</span>\n\n<span class=\"c1\">-- coercion works, but `Nat.foo` appears in the goal, no `↑`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> `Nat.foo` appears in the goal, no `↑`</span>\n<span class=\"cm\">  G : Type u</span>\n<span class=\"cm\">  n : ℕ</span>\n<span class=\"cm\">  ⊢ Nat.foo n = Nat.foo n</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">]</span> <span class=\"n\">Nat.foo</span>\n\n<span class=\"c1\">-- now `↑` appears in the infoview, on *both* left and right, even though we didn't</span>\n<span class=\"c1\">-- \"coerce\" on the right-hand side, and just inserted the function manually.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.foo</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  G : Type u</span>\n<span class=\"cm\">  n : ℕ</span>\n<span class=\"cm\">  ⊢ ↑n = ↑n</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">coe</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.foo'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩)</span> <span class=\"c1\">-- this is not the same function as `Nat.foo`</span>\n\n<span class=\"c1\">-- here we see `↑` in the infoview, even though there is no `Coe` instance being used.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.foo'</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.foo'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  G : Type u</span>\n<span class=\"cm\">  n : ℕ</span>\n<span class=\"cm\">  ⊢ ↑n = ↑n</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- here we see `↑` in the infoview in both places, but this goal is not provable.</span>\n<span class=\"c1\">-- the LHS is `⟨n⟩` and the RHS is `⟨n + 1⟩`.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.foo'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  G : Type u</span>\n<span class=\"cm\">  n : ℕ</span>\n<span class=\"cm\">  ⊢ ↑n = ↑n</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n</div></div>",
        "id": 399575883,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698775473
    }
]