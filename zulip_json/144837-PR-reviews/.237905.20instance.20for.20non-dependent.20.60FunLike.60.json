[
    {
        "content": "<p>I feel <a href=\"https://github.com/leanprover-community/mathlib4/pull/7905\">#7905</a> is ready. It brings a significant speed up.</p>",
        "id": 398658194,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1698315590
    },
    {
        "content": "<p>Wow, that's a substantial boost!</p>",
        "id": 398659554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698316124
    },
    {
        "content": "<p>I'm curious whether the speedup comes from the TC search somehow being easier, or from a massive reduction of un-beta-reduced terms</p>",
        "id": 398659867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698316244
    },
    {
        "content": "<p>If the latter, then maybe a change to core to automatically beta-reduce the type of the <code>coeFn</code> might be more appropriate</p>",
        "id": 398659910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698316267
    },
    {
        "content": "<p>The answer probably comes from staring at <code>GroupCohomology.Resolutions</code></p>",
        "id": 398660798,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698316657
    },
    {
        "content": "<p>This PR has gained a merge conflict. I think it's time to solidify consensus before more rot occurs: do we want to have the non-dependent instance while we (wait/hope) for Lean to support this natively?</p>",
        "id": 399940622,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698933076
    },
    {
        "content": "<p>The tradeoff seems to be minor defeq tricks along the lines of <code>erw</code> where <code>rw</code> used to suffice or adding an explicit parameter where it was explicit before, in exchange for a very notable speedup and one that appears independent of the other recent speedups. In my opinion, the breakage is minor enough to warrant merging this PR.</p>",
        "id": 399942030,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698933449
    },
    {
        "content": "<p>Did anyone attempt a core fix yet?</p>",
        "id": 399946926,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698934634
    },
    {
        "content": "<p>I removed the conflict. It looks like Eric's <a href=\"https://github.com/leanprover-community/mathlib4/pull/7905#pullrequestreview-1699256538\">comment</a> hasn't been addressed</p>",
        "id": 399988518,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698945268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237905.20instance.20for.20non-dependent.20.60FunLike.60/near/399940622\">said</a>:</p>\n<blockquote>\n<p>while we (wait/hope) for Lean to support this natively?</p>\n</blockquote>\n<p>What's a description of the issue? Is it that Lean doesn't beta-reduce the type after applying a <code>CoeFun</code> instance? (Is there an issue for this yet?)</p>",
        "id": 399993981,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698947337
    },
    {
        "content": "<p>I don't think there is an issue. Without layering any interpretation, Lean goes much faster with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">dep</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.coe</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">110</span><span class=\"o\">)</span> <span class=\"n\">indep</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.coe</span>\n</code></pre></div>\n<p>than when it has to coerce types to non-dependent functions and is forced to use <code>dep</code>.</p>",
        "id": 399994597,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698947607
    },
    {
        "content": "<p>It looks like unification with the dependent version postpones some unfolding until it gets deep into the process and then has to do it repeatedly summing to a large price</p>",
        "id": 400009712,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698954447
    },
    {
        "content": "<p>Precise example from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=diagonalHomEquiv_symm_apply#doc\">docs#diagonalHomEquiv_symm_apply</a>: we have the following goal </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Rep.ρ</span> <span class=\"o\">((</span><span class=\"n\">CategoryTheory.ihom</span> <span class=\"o\">(</span><span class=\"n\">Rep.of</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Finsupp.llift</span> <span class=\"o\">(</span><span class=\"n\">CoeSort.coe</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"bp\">?</span><span class=\"n\">m</span>\n</code></pre></div>\n<p>where the type is either </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">CoeSort.coe</span> <span class=\"o\">((</span><span class=\"n\">CategoryTheory.ihom</span> <span class=\"o\">(</span><span class=\"n\">Rep.of</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Finsupp.llift</span> <span class=\"o\">(</span><span class=\"n\">CoeSort.coe</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CoeSort.coe</span> <span class=\"o\">((</span><span class=\"n\">CategoryTheory.ihom</span> <span class=\"o\">(</span><span class=\"n\">Rep.of</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In the latter case, Lean reduces to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">CategoryTheory.ihom</span> <span class=\"o\">(</span><span class=\"n\">Rep.of</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">V</span>\n</code></pre></div>\n<p>whereas in the former it does no unfolding and just assigns a metavariable to the full expression.</p>",
        "id": 400010320,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698954749
    },
    {
        "content": "<p>It looks like you should be able to get away with supping up <code>beta%</code> to head beta reduce arguments recursively in lambdas and then applying this in <code>FunLike.hasCoeToFun</code> with <code>coe := beta% FunLike.coe</code></p>",
        "id": 400173780,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699030916
    },
    {
        "content": "<p>:/ </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FunLike.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"> relevant part</span>\n<span class=\"cm\">.. @FunLike.coe.{u_6, u_5, u_4} F α (fun (a : α) ↦ (fun (x : α) ↦ γ) a) inst f</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">test</span>\n<span class=\"c\">/-</span><span class=\"cm\"> relevant part</span>\n<span class=\"cm\">.. @FunLike.coe.{u_6, u_5, u_4} F α (fun (a : α) ↦ γ) inst f</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 400224073,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699057920
    },
    {
        "content": "<p>If I manually put in the <code>FunLike.coe</code> then we avoid the beta expansion. If I ask Lean to do it, we do not</p>",
        "id": 400224151,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699057957
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=headBeta#doc\">docs#headBeta</a> doesn't affect <code>fun (a : α) ↦ (fun (x : α) ↦ γ) a</code>. One can make a something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bodyBeta</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">name</span> <span class=\"n\">binTy</span> <span class=\"n\">body</span> <span class=\"n\">binInfo</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">name</span> <span class=\"n\">binTy</span> <span class=\"n\">body.headBeta</span> <span class=\"n\">binInfo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>and try to use it in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=expandCoe#doc\">docs#expandCoe</a> in conjunction with <code>headBeta</code>, then I get a non-functioning toolchain.</p>",
        "id": 400224431,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699058158
    },
    {
        "content": "<p>Actually I can't seem to build any functioning toolchain locally but messing with <code>expandCoe</code> didn't work. Trying something else.</p>",
        "id": 400285574,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699094129
    },
    {
        "content": "<p>This looks like a workaround in <code>Data.FunLike.Basic</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bodyBeta</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">name</span> <span class=\"n\">binTy</span> <span class=\"n\">body</span> <span class=\"n\">binInfo</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">name</span> <span class=\"n\">binTy</span> <span class=\"n\">body.headBeta</span> <span class=\"n\">binInfo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reduceStuff</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">e.getAppFn</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">e.getAppArgs.map</span> <span class=\"n\">bodyBeta</span>\n  <span class=\"n\">mkAppN</span> <span class=\"n\">f</span> <span class=\"n\">args</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"reduce_stuff% \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"n\">return</span> <span class=\"n\">reduceStuff</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">hasCoeToFun</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- coe := FunLike.coe</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduce_stuff</span><span class=\"bp\">%</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 400309387,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699113276
    },
    {
        "content": "<p>Does that elaborator get re-run at every coercion insertion?</p>",
        "id": 400316015,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699119552
    },
    {
        "content": "<p>It appears so</p>",
        "id": 400316756,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699120396
    },
    {
        "content": "<p>I tried to stick it in core but probably did it wrong.</p>",
        "id": 400316767,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699120414
    },
    {
        "content": "<p>If the above works it probably doesn't even need to be in core</p>",
        "id": 400319365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699123313
    },
    {
        "content": "<p>If <code>reduce_stuff%</code> gets re-run at each coercion insertion, then I'm going to have to update my mental model for how coercion works. I'd expect it to elaborate just once when <code>hasCoeToFun</code> is elaborated.</p>",
        "id": 400319756,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699123688
    },
    {
        "content": "<p>I am doing a clean rebuild of mathlib at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8185\">#8185</a>. Going to bench it and then if all is good suggest this change in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7905\">#7905</a>. </p>\n<p>It is clear it has the desired effect.</p>",
        "id": 400320752,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699124691
    },
    {
        "content": "<p>I strongly suspect you'll get the same results with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">hasCoeToFun</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 400321095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699125082
    },
    {
        "content": "<p>or maybe even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">hasCoeToFun</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 400321101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699125102
    },
    {
        "content": "<p>Yes both do the same thing</p>",
        "id": 400321554,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699125655
    },
    {
        "content": "<p>As does <code>coe := @FunLike.coe _ _ β _ </code></p>",
        "id": 400322270,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699126475
    },
    {
        "content": "<p>Everything checks out with simplified change Kyle suggested. Benching gives 2% reduction in instructions. </p>\n<p>The most interesting question remaining is that multiple theorems tagged with simp no longer apply on themselves. </p>\n<p>Eric's request for a test capturing the behavior of the coercion now should also be fulfilled.</p>",
        "id": 400328951,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699134516
    },
    {
        "content": "<p>I've left a comment on the PR</p>",
        "id": 400328965,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1699134559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237905.20instance.20for.20non-dependent.20.60FunLike.60/near/400322270\">said</a>:</p>\n<blockquote>\n<p>As does <code>coe := @FunLike.coe _ _ β _ </code></p>\n</blockquote>\n<p>Should we just PR this?</p>",
        "id": 401752124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699878324
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8384\">#8384</a></p>",
        "id": 401752893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699878679
    },
    {
        "content": "<p>Sorry, I've been busy the past two weeks. Now I'm back.</p>",
        "id": 402187374,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1700041123
    }
]