[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>: <span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> this <a href=\"https://github.com/leanprover-community/mathlib/pull/15763\">#15763</a></p>",
        "id": 300075129,
        "sender_full_name": "Winston Yin",
        "timestamp": 1663820856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> I'm so sorry, I must have missed your response to the first review!  I'll try to get to it tomorrow.  Thanks for the ping.</p>",
        "id": 300075211,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1663820941
    },
    {
        "content": "<p>Sorry to ping again <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/15763\">#15763</a></p>",
        "id": 301549254,
        "sender_full_name": "Winston Yin",
        "timestamp": 1664494518
    },
    {
        "content": "<p>Sorry, on it!</p>",
        "id": 301549963,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664494997
    },
    {
        "content": "<p>Reviving this as a mathlib4 PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8397\">#8397</a>. Practically the same as the mathlib3 PR but with stylistic improvements, including removing the dreaded <code>@foo _ _ _ _ _ _ _ _ _ _ _ _ _ _</code>. Thank you <span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> for the detailed review.</p>",
        "id": 405587636,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1701567229
    },
    {
        "content": "<p>May I ping this again <a href=\"https://github.com/leanprover-community/mathlib4/pull/8397\">#8397</a>. It's a small holiday wish of mine. Original mathlib3 PR seemed to be about ready to merge as of February.</p>\n<p>The <code>@foo _ _ _ _ _</code> will stay for now. If any instance inference guru knows a more elegant solution, we can make a future PR.</p>",
        "id": 407634647,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702441318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin (尹維晨)</span>  Can you make the instance argument to <code>ContMDiff</code> have a nice name? Then you can write <code>ContMDiff (nicelyNamedInst := I)</code>.</p>",
        "id": 407653522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702450517
    },
    {
        "content": "<p>Apart from that, this seems to be in a good shape now.</p>",
        "id": 407653818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702450622
    },
    {
        "content": "<p>I tried adding <code>[CS : ChartedSpace H M]</code> and so on to the relevant places, but I think there was some pushback that \"instances should never be directly specified\" and that this seems like just a bandage.</p>",
        "id": 407653833,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702450629
    },
    {
        "content": "<p>Well, fair enough. You should be able to pass some other arguments that will case the instance argument to be inferred.</p>",
        "id": 407653973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702450680
    },
    {
        "content": "<p>So these instance names are now removed again in the latest commits</p>",
        "id": 407654014,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702450684
    },
    {
        "content": "<p>Do you understand why Lean can't infer <code>I</code>? Somehow the problem must be under-determined.</p>",
        "id": 407654222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702450758
    },
    {
        "content": "<p>If you pass it the <code>H</code> and the <code>M</code> arguments, then Lean should be able to find <code>I</code> by typeclass resolution.</p>",
        "id": 407654261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702450787
    },
    {
        "content": "<p>This is brilliant. thank you!</p>",
        "id": 407666912,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702455338
    },
    {
        "content": "<p>Let's see if all the _ _ can be reduced that way</p>",
        "id": 407668099,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702455706
    },
    {
        "content": "<p>Managed to remove _ _ _ in the lemma statement without specifying <code>M</code> and <code>I</code>. I think the offending parts involve passing <code>h.singletonChartedSpace</code> on the <code>rw</code> or <code>apply</code> lines</p>",
        "id": 407670929,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702456471
    },
    {
        "content": "<p>I agree the statements look much better now! I've kicked it on the queue.<br>\nMaybe the <code>_ _ _</code> in the proof can eventually also be removed, but that can be done in a follow-up PR.</p>",
        "id": 407679858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702459381
    },
    {
        "content": "<p>Thank you so much :)</p>",
        "id": 407679984,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702459424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thank you for approving this!</p>",
        "id": 407961698,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1702561147
    }
]