[
    {
        "content": "<p>Please may I request a review for PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6996\">#6996</a> \"Define the centre appropriately for non-associative algebras\" <a href=\"https://github.com/leanprover-community/mathlib4/pull/6996\">https://github.com/leanprover-community/mathlib4/pull/6996</a> ? The current definition of a center doesn't work for non-associative algebras. This PR defines the center in a way that makes sense in the non-associative setting, is referenced in the literature and reduces to the existing definition in the associative case. I currently have one PR that depends on it <a href=\"https://github.com/leanprover-community/mathlib4/pull/7843\">https://github.com/leanprover-community/mathlib4/pull/7843</a> and would expect more in due course. Thanks!</p>\n<p>Christopher</p>",
        "id": 399451227,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1698741293
    },
    {
        "content": "<p>I'll have a look.</p>",
        "id": 399516901,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698757397
    },
    {
        "content": "<p>I pushed a handful of changes; unfortunately some instance diamonds appear here that make it unsafe to say \"the center of a magma is a commutative semigroup\", so I've demoted those results to <code>abbrev</code>s</p>",
        "id": 399700526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698835542
    },
    {
        "content": "<p>We could try to fix this by moving <code>Monoid.npow</code> to <code>MulOneClass</code>, but that's definitely a problem for another time!</p>",
        "id": 399700760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698835611
    },
    {
        "content": "<p>Eric, note that in the long term what we need is a new class <code>PowAssoc</code> between <code>MulOneClass</code> and <code>Monoid</code> which is exactly the class for which <code>npow</code> is definable and lawful, but multiplication between arbitrary elements may not be associative.</p>",
        "id": 399705784,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698837790
    },
    {
        "content": "<p>Do we actually need a new class?</p>",
        "id": 399729699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698846715
    },
    {
        "content": "<p>I think it's possible to define a sufficiently lawful pow with just 1 and *, even if it's not very useful</p>",
        "id": 399729964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698846805
    },
    {
        "content": "<p>You won't be able to prove <code>x * x ^ n = x ^ (n + 1) = x ^ n * x</code> without power associativity (because they're equivalent); you could only get one of these. And hence you won't be able to prove <code>pow_add</code> which is what I would consider the definition of \"lawful\" in this context. But there are non-associative algebras which are nevertheless power associative (e.g, JB-algebras, as I'm sure Christopher has in mind).</p>",
        "id": 399754215,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698854496
    },
    {
        "content": "<p>So, yes, I think we need a new class. Now, perhaps that class doesn't lie in between <code>MulOneClass</code> and <code>Monoid</code>, but is instead an axiom added to the algebra classes themselves, but that feels a bit weird and would likely cause problems.</p>",
        "id": 399755193,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698854666
    },
    {
        "content": "<blockquote>\n<p>you could only get one of these</p>\n</blockquote>\n<p>My claim is that this is sufficient to solve our current diamond problem, even if it's not otherwise very useful</p>",
        "id": 399761304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698856797
    },
    {
        "content": "<p>oh, that's what you meant. Sure, I think that's probably true.</p>",
        "id": 399790329,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698867420
    },
    {
        "content": "<p>The octonions are also power-associative but not associative IIRC</p>",
        "id": 400032168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698966822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236996.20Define.20the.20centre.20.2E.2E.2E.20for.20non-associative.20algebras/near/399754215\">said</a>:</p>\n<blockquote>\n<p>(e.g, JB-algebras, as I'm sure Christopher has in mind).</p>\n</blockquote>\n<p>Ultimately I'd like to get to Jordan*-triples, where only the odd powers are defined, but that's possibly a different discussion.</p>",
        "id": 400076424,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1698995139
    },
    {
        "content": "<p>The octonions are in fact alternative (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x(xy) = (xx)y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">xx</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>), which looks very powerful from the point of view of a sedonionist where one has mere power-associativity.</p>",
        "id": 400095714,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1699004283
    },
    {
        "content": "<p>I claim if we have a class for power associativity then we might also want one for being alternative (and I guess there's left and right versions of being alternative, with octonions having both). These are very exotic properties though, so I wouldn't want our entire hierarchy to pay a price for supporting them.</p>",
        "id": 400096143,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1699004447
    },
    {
        "content": "<p>It's a shame we have to choose, but I guess they could just be their own separate hierarchy, with maybe their own semigroup to enforce an API barrier. No one will want to upgrade an alternative structure to a field...</p>",
        "id": 400098715,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699005357
    },
    {
        "content": "<p>If they are mixins, then it's not a problem, right? They can live in files that are not seen by 95% of mathlib.</p>",
        "id": 400098874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699005409
    },
    {
        "content": "<p>I admit I haven't thought about it in this case but not everything has to be a typeclass: explicit hypotheses are sometimes OK!</p>",
        "id": 400099523,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1699005630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236996.20Define.20the.20centre.20.2E.2E.2E.20for.20non-associative.20algebras/near/400098874\">said</a>:</p>\n<blockquote>\n<p>If they are mixins, then it's not a problem, right? They can live in files that are not seen by 95% of mathlib.</p>\n</blockquote>\n<p>As a reminder, we need to move <code>npow</code> to a simpler typeclass in order to avoid diamond issues. Either we move it to <code>MulOneClass</code> and deal with the fact it's nonsense in the absense of power associativity, or we move it to the class for power associativity. Mixins force the former strategy.</p>",
        "id": 400101077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699006165
    },
    {
        "content": "<p>Does mathlib have any examples of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOneClass#doc\">docs#MulOneClass</a> that are <em>not</em> power-associative?</p>",
        "id": 400101266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699006237
    },
    {
        "content": "<p>Ah yes, <code>WithOne X</code> which really just adds <code>1</code></p>",
        "id": 400101421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699006303
    },
    {
        "content": "<p>There's precedent for stuff to be nonsense - qsmul in char p</p>",
        "id": 400103032,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699006737
    },
    {
        "content": "<p>But the diamonds are only problematic for data. Power-associativity and (left/right)-alternativity could be formalized using a prop-valued mixin, right?</p>",
        "id": 400103937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699007050
    },
    {
        "content": "<p>Yes, the problem arises only if we try to avoid nonsense</p>",
        "id": 400105658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699007553
    },
    {
        "content": "<p>(regarding the titular PR, I realized I was overzealous on my diamond avoidance, and actually all the non-unital instances were already safe; I'm working on a cleanup)</p>",
        "id": 400106106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699007638
    },
    {
        "content": "<p>I've split out <a href=\"https://github.com/leanprover-community/mathlib4/pull/8147\">#8147</a> which became apparent during that cleanup</p>",
        "id": 400110426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699009182
    }
]