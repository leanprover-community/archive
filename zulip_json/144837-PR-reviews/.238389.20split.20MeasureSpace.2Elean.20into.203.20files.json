[
    {
        "content": "<p>I'd be happy to have a review on this one, because I'm afraid it will rot quickly.</p>",
        "id": 401795932,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699891245
    },
    {
        "content": "<p>I see <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> already merged this one. <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span> </p>\n<p>I'd in principle like to help review things, but I am a bit inexperienced at it. Are there guidelines for reviewing in general and maybe for specific types of PRs such as splits? How about instructions with best practices for review workflow (git &amp; other computer tools), especially for PRs that have huge diffs?</p>\n<p>Reviewing might become one of the bottlenecks for Mathlib's growth, so guidelines that help new people do it well could be valuable.</p>",
        "id": 401805856,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1699893526
    },
    {
        "content": "<p>My guess-guideline was that in this kind of a split-a-file PR the things to verify in the review are:</p>\n<ul>\n<li>The split is meaningful in terms of topics.<ul>\n<li>This was made very clear in the PR description, so looked easy.</li>\n</ul>\n</li>\n<li>Imports in the new files and other mathlib files that used to import the splitted file are minimal after the split.<ul>\n<li>I'd like to learn efficient workflows for doing this, but I could in principle imagine trying to work out such a check by hand.</li>\n</ul>\n</li>\n<li>All of the the previously existing content remains there after the split.<ul>\n<li>What would be a reasonable workflow to try to verify this?</li>\n<li>(I suppose if something that was used elsewhere in Mathlib went missing, then we would have errors. So the remaining question is how to check this for material that is not yet used elsewhere?)</li>\n</ul>\n</li>\n<li>Anything else one should pay attention to?</li>\n</ul>\n<p>Anyway, for this PR <span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <span aria-label=\"race\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"race\">:race:</span> already, so this is maybe just a general non-urgent question now.</p>",
        "id": 401806044,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1699893585
    },
    {
        "content": "<p>We have this for general PRs: <a href=\"https://leanprover-community.github.io/contribute/pr-review.html\">https://leanprover-community.github.io/contribute/pr-review.html</a></p>",
        "id": 401806216,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1699893635
    },
    {
        "content": "<p>It's not really about split PRs though</p>",
        "id": 401806259,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1699893656
    },
    {
        "content": "<p>Great, thanks!</p>\n<p>I suppose advice on the more computer aspects of the workflow might be helpful for mathematicians. But I can understand that people have their own styles and preferences with workflows, and keeping tooling advice up-to-date is not easy...</p>",
        "id": 401806615,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1699893763
    },
    {
        "content": "<p>I mostly don't have answers to your questions on how to do that type of review properly. The build passed, so the imports for other files were ok, but I did not check they were minimal. The build passed, so no lemma used elsewhere was lost, but that's indeed not a guarantee that we did not lose anything.</p>\n<p>Like you, I would be interested in tooling to help! A list of lemmas that were deleted by the pr would be nice (it's ok if the list contains lemma that were merely renamed, I can check those).</p>",
        "id": 401807111,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1699893922
    },
    {
        "content": "<p>Oh! Could <a href=\"https://mathlib-changelog.org/\">#changelog</a> somehow help show if everything is there, still?</p>",
        "id": 401807295,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1699893969
    },
    {
        "content": "<p>(It's of course not that I suspect <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> would have deleted something --- it is just that I know I am capable of accidentally doing something stupid, and I would happily try to provide a small check against accidents by others when I can.)</p>",
        "id": 401807785,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1699894172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> as Remy mentioned, the <a href=\"https://leanprover-community.github.io/contribute/pr-review.html\">PR review guide</a> should be a relatively complete resource to help get you off the ground with reviewing. In particular, it should help you know which questions to ask, and that's half the battle. It does contain a short section about splitting, but not at the fine-grained level of detail you were asking for above.</p>\n<p>So, let me try to address those questions:</p>\n<ol>\n<li>Split PRs should have clearly demarcated boundaries (typically along <code>section ... end</code> boundaries, but that's not an absolute rule), and the PR description should probably mention them.</li>\n<li>If it doesn't, just ask the PR author to do it that way. Once the split is clearly demarcated, I would probably just check that the beginning / ending points match, and not check the interiors of the transported sections.</li>\n<li>As for imports, I think <code>#minimize_imports</code> is supposed to do this, but it's buggy. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> has a more sophisticated tool which may be of use here.</li>\n</ol>",
        "id": 401809339,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699894751
    },
    {
        "content": "<p>Another thing to watch for: appropriate changes to the module documentation should be made to both the original and new files.</p>",
        "id": 401809579,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699894823
    },
    {
        "content": "<p>You can try reviewing  <a href=\"https://github.com/leanprover-community/mathlib4/pull/8392\">#8392</a> along those lines :)</p>",
        "id": 401810212,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699894998
    },
    {
        "content": "<p>Ok, the first thing I notice is that there is no PR description expaining the split \"boundaries\", like <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> had in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8389\">#8389</a>. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 401810562,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1699895113
    },
    {
        "content": "<p>Even though Ruben is here, that's probably a comment I would put in the PR.</p>",
        "id": 401811293,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699895380
    },
    {
        "content": "<p>No doubt Ruben is deliberately skipping steps from the review guide in order to make this an interactive exercise :)</p>",
        "id": 401811388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699895412
    },
    {
        "content": "<p>Also the imports seem to be a bit <em>too</em> minimal --- there are declarations not found. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'll try to find time to review this once the PR builds (but sorry, I can't guarantee a speedy return to this).</p>",
        "id": 401812581,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1699895874
    },
    {
        "content": "<p>Anyway, if there was a tool to list all of the added and removed declarations in a PR with a large diff, I believe that would be generally helpful (as <span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> mentioned) --- at least in the sense of having confidence in avoiding accidents, but possibly also for just a faster workflow</p>\n<p><a href=\"https://mathlib-changelog.org/\">#changelog</a> will probably only work anyway after the PR is merged, right?</p>",
        "id": 401813128,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1699896069
    },
    {
        "content": "<p>Fixed some things :)</p>",
        "id": 401837015,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699906047
    },
    {
        "content": "<p>A tool to verify that declarations didn't accidentally change would be amazing, but well out of my reach :)</p>",
        "id": 401837119,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699906087
    },
    {
        "content": "<p>I'm a noob when it comes to <code>Lean.Environment</code>s, but I think the relevant tools would be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.getModuleIdx%3F#doc\">docs#Lean.Environment.getModuleIdx?</a> to find the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ModuleIdx#doc\">docs#Lean.ModuleIdx</a> associated to a given file, and then <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.declsInModuleIdx#doc\">docs#Lean.Environment.declsInModuleIdx</a> to find which declarations were declared in that file. For instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">CoreM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:=</span> <span class=\"n\">Option.getD</span> <span class=\"o\">(</span><span class=\"n\">env.getModuleIdx</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.Algebra.Group.Defs</span><span class=\"o\">)</span> <span class=\"n\">default</span>\n  <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">env.declsInModuleIdx</span> <span class=\"n\">idx</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{decls}\"</span>\n</code></pre></div>\n<p>shows the declarations which were created in <code>Mathlib.Algebra.Group.Defs</code>.</p>\n<p>Then the idea would be given a commit, ask <code>git</code> to compute the files touched since the common ancestor of master. Then checkout that common ancestor, get the cache, find all declarations given in those files using the above Lean tools, sort them (and maybe prune certain ones, like <code>private</code> ones) and write it to a file. Then do the same for the current commit, and show the diff.</p>",
        "id": 401851090,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699912373
    }
]