[
    {
        "content": "<p>I formalized a general definition for  a broad class of combinatorial optimization problems: VCSP<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7404\">https://github.com/leanprover-community/mathlib4/pull/7404</a></p>\n<p>Let's first review it with the examples in the code.<br>\nAfter we agree on the definitions, I will remove the examples.<br>\nThen the CI will stop complaining and we can merge the PR .</p>",
        "id": 393909966,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695985729
    },
    {
        "content": "<p>For a set of <code>k</code>-ary functions (cost functions from <code>D^k</code> to <code>C</code>), which definition do we want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>... or ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">D</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 394441779,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696255551
    },
    {
        "content": "<p>Fin k -&gt; D is usually preferred, as far as I've seen</p>",
        "id": 394449264,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696257400
    },
    {
        "content": "<p>Are there specific indicators (rule of thumb) that <code>Vector</code> will be better for a certain definitions?</p>",
        "id": 394450012,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696257605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237404.20VCSP/near/394449264\">said</a>:</p>\n<blockquote>\n<p>Fin k -&gt; D is usually preferred, as far as I've seen</p>\n</blockquote>\n<p>Why is this the case? What are the pros and cons?</p>",
        "id": 394450190,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696257654
    },
    {
        "content": "<p>This is more of an observational thing; I see very little use of <code>Vector</code> in the library.</p>",
        "id": 394454596,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696258874
    },
    {
        "content": "<p>Could you please summarize where <code>Vector</code> is preferred?</p>",
        "id": 394455108,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696259035
    },
    {
        "content": "<p>I'm not sure if Vector is preferred anywhere</p>",
        "id": 394455551,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696259161
    },
    {
        "content": "<p>Is it a code smell that in the structure <code>ValuedCspTemplate</code> the type of functions is written by an explicit Sigma type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>whereäs in <code>ValuedCspTerm </code> the type of functions hides its dependent typing in distinct <code>structure</code> fields?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ.</span><span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>Full definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A template for a valued CSP problem with costs in `C`. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ValuedCspTemplate</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Domain of \"labels\" -/</span>\n  <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"sd\">/-- Cost functions from `D^k` to `C` for any `k` -/</span>\n  <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A term in a valued CSP instance over the template `Γ`. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ValuedCspTerm</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">ValuedCspTemplate</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"sd\">/-- Which cost function is instantiated -/</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ.</span><span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n  <span class=\"sd\">/-- The cost function comes from the template -/</span>\n  <span class=\"n\">in</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ.</span><span class=\"n\">F</span>\n  <span class=\"sd\">/-- Which variables are plugged as arguments to the cost function -/</span>\n  <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span>\n</code></pre></div>",
        "id": 394640608,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696341174
    },
    {
        "content": "<p>Can you give an example of the sorts of infinite sets you might populate <code>F</code> with?</p>",
        "id": 394656984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696346321
    },
    {
        "content": "<p>Almost every time I do a closure of <code>Γ</code> under its expressive power, I obtain an infinite set of cost functions.</p>",
        "id": 394657562,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696346509
    },
    {
        "content": "<p>I could cheat around it by declaring that the closure of a VCSP template is not of the type \"VCSP template\" but I would probably pay for it later.</p>",
        "id": 394657944,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696346637
    },
    {
        "content": "<p>I'm asking for a concrete example of <code>ValuedCspTemplate</code> with infinite <code>.F</code></p>",
        "id": 394659147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696347021
    },
    {
        "content": "<p>I believe they exist, but I'm trying to motivate that they should live in <code>Type</code> not <code>Set</code> (in the way that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FirstOrder.Language.Structure#doc\">docs#FirstOrder.Language.Structure</a> does)</p>",
        "id": 394659270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696347060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237404.20VCSP/near/394659147\">said</a>:</p>\n<blockquote>\n<p>I'm asking for a concrete example of <code>ValuedCspTemplate</code> with infinite <code>.F</code></p>\n</blockquote>\n<p>See below.</p>",
        "id": 394664014,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696348457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237404.20VCSP/near/394659270\">said</a>:</p>\n<blockquote>\n<p>I believe they exist, but I'm trying to motivate that they should live in <code>Type</code> not <code>Set</code> (in the way that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FirstOrder.Language.Structure#doc\">docs#FirstOrder.Language.Structure</a> does)</p>\n</blockquote>\n<p>I don't know much about model theory, but it seems to me that what I do in VCSP is quite different...</p>\n<p>In model theory, we:<br>\n(1) define a language, which is a collection of function symbols with their arity (ignore the relation symbols for now)<br>\n(2) define a structure, which instantiates function symbols with concrete functions<br>\n(3) provide arguments to these functions, and we can evaluate them</p>\n<p>In VCSP, we:<br>\n(1) define a template, which is a collection of concrete functions of various arity<br>\n(2) define an instance, which says which functions (that are to be summed in the end) are called on which indices; an instance gives us a concrete function Labelling -&gt; Cost<br>\n(3) provide a labelling (solution) for this instance, resulting in a cost</p>\n<p>These two things don't seem to be aligned, even if I ignore the fact that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FirstOrder.Language.Structure#doc\">docs#FirstOrder.Language.Structure</a> doesn't allow functions with output of different type than inputs.</p>",
        "id": 394667156,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696349289
    },
    {
        "content": "<p>I'd argue that any definition that builds on top of the first (1) above (i.e., if you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FirstOrder.Language#doc\">docs#FirstOrder.Language</a> or something similarly general) adds an extra layer of abstraction, which is desirable only for very niche topics (such as model theory).</p>",
        "id": 394670471,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696350524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237404.20VCSP/near/394659147\">said</a>:</p>\n<blockquote>\n<p>I'm asking for a concrete example of <code>ValuedCspTemplate</code> with infinite <code>.F</code></p>\n</blockquote>\n<p>Things like the following (an artificial example but not unrealistic) are possible to appear there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n        <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>In general setting, is it possible to rewrite the following definition to <code>Type</code> in place of <code>Set</code> please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Set of functions expressible by `Γ`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ValuedCspTemplate.canExpress</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteLattice</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">ValuedCspTemplate</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ.</span><span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ValuedCspInstance</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">I.expresses</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Assume <code>I.expresses</code> maps something to <code>C</code>. The new VCSP template is subsequently constructed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Closure of a valued CSP template `Γ` under expressibility. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ValuedCspTemplate.closure</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteLattice</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">ValuedCspTemplate</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ValuedCspTemplate</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">Γ.</span><span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"bp\">Γ.</span><span class=\"n\">canExpress</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 394672989,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696351577
    },
    {
        "content": "<p>Should it be called \"OptimalSolution\" or \"OptimumSolution\"? The set is totally ordered and the best solution needn't be unique (but must have its objective value ≤ everything).</p>",
        "id": 398130449,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698082632
    },
    {
        "content": "<p>Edit: I changed it to a partial ordered set, but it will be totally ordered most of the time and the requirement for MINIMUM (as opposed to MINIMAL) value of the objective function still holds.</p>",
        "id": 398144173,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698089225
    },
    {
        "content": "<p>Follow-ups:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7893\">#7893</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7894\">#7894</a></p>",
        "id": 398290179,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698154375
    }
]