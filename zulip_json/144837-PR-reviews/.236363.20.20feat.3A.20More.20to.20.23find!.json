[
    {
        "content": "<p>Syntax bikeshed that came up during review of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6363\">#6363</a>, which adds functionality to <code>#find</code>: what should the syntax for the tactic version of <code>#find</code> be? <code>#find</code> or <code>find</code>—or both, or something else (e.g. <code>find?</code>)?</p>\n<p><code>#</code> is usually used to prefix temporary commands, and if it's in a tactic, it's not a command—some people might assume they have to strip the <code>#</code> off. On the other hand, some might assume <code>#find</code> should work in both places as-is. Using both would be discoverable, but not consistent. (Or maybe we actually would like it if most <code>#</code>-style commands worked as-is in tactic mode, even though they don't yet.)</p>\n<p>The only precedent I can think of is <code>guard*</code>, which acquires a <code>#</code> when it becomes a command, and doesn't as a tactic—but that's essentially a term being lifted up to a tactic and a command, not a command being used in tactic mode, so maybe it's not comparable.</p>\n<p>Is there a clear-cut choice here? Or is it time for a poll?</p>",
        "id": 387347502,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1692999884
    },
    {
        "content": "<p>We currently have no precedent for <code>#</code>-named tactics</p>",
        "id": 387347650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692999966
    },
    {
        "content": "<p>it's also potentially a parsing issue, although <code>set_option</code> is a command and a tactic and it doesn't seem to mess too much up</p>",
        "id": 387347700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693000006
    },
    {
        "content": "<p>I'm just thinking of this now, but if we think in terms of roles, the purpose of <code>#</code> is to confer the role of \"temporary invocation to show me info\"—the tactic syntax style that does the same thing is <code>*?</code>. So maybe it should be <code>find?</code>?</p>",
        "id": 387348406,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1693000533
    },
    {
        "content": "<p>(Admittedly it's not a perfect analogy...usually <code>?</code> is used specifically to show info related to the syntax that preceded it, e.g. <code>rw</code> → <code>rw?</code>)</p>",
        "id": 387348603,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1693000666
    },
    {
        "content": "<p>I like <code>find?</code> for tactic mode, given the existing scheme of using <code>?</code> for tactics which you expect to tell you stuff which will replace themselves.</p>",
        "id": 387348872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000807
    },
    {
        "content": "<p>Should it be an elaborator rather than a tactic? Is something like <code>rw [find% real.sin]</code> possible or useful?</p>",
        "id": 387352181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693003168
    },
    {
        "content": "<p>That would also mean that a \"try this\" suggestion would only need to generate a term and not guess a tactic</p>",
        "id": 387352295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693003237
    },
    {
        "content": "<p>If I were to guess what the tactic usage of <code>#find</code> is, my first attempt would be <code>find</code>.  Of course, I would also quickly learn about what the <em>actual</em> tactic is, if it were different.</p>",
        "id": 387364730,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693011716
    },
    {
        "content": "<p>With respect to the actual tactic <code>find</code>, would it be desirable to have the option of running it with</p>\n<ul>\n<li>nothing and make <code>find</code> search for the goal (similar to <code>exact?</code> but likely with a different algorithm),</li>\n<li>a numeral <code>n</code> and make <code>find n</code> search for an initial subexpression of the goal that matches until depth <code>n</code> (similar to the matching imposed on <code>congr</code> by <code>congr n</code>)?</li>\n</ul>",
        "id": 387365268,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693011962
    },
    {
        "content": "<p>Oh, I missed this thread.</p>\n<p>I think it’s worth keeping the following two use cases apart:</p>\n<ul>\n<li>using <code>#find</code> (or, more general, <code>#eval</code>, <code>#print</code>, etc.) without leaving the tactic block,with no interaction with the goal. This is what currently <code>#find</code> (the tactic) allows even before my PR.</li>\n<li>using something _like_ <code>#find</code> that interacts with the goal. This is currently done by <code>find</code>  (the tactic), and my PR removes it because I believe it is superseded by tools like <code>apply?</code> and <code>rw?</code></li>\n</ul>\n<p>Since it seems there is no (other) precedence for allowing info commands (<code>#check</code>, <code>#print</code>, <code>#find</code>) within a tactic block, I’d suggest I’ll just remove the tactics in this PR.</p>",
        "id": 387522083,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693135948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> this currently has a merge conflict with master. <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span>  I'm not going to pull the trigger myself because I'm not a meta expert, but I think (after the merge conflict is resolved) we should just merge this. It's not going to be used \"in production\" anyway, so it doesn't have to be perfect, and in any case bug fixes or new features can be merged later. IMO, there's no reason we should not have this functionality baked in already.</p>",
        "id": 401385799,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699624920
    },
    {
        "content": "<p>Ah, thanks for bringing this up. I think I should close the PR, as I think this command shouldn't be mathlib-specific, and instead live in std or its own repo. Now since Tactic.Cache has been upstreamed to std, this is actually possible.</p>",
        "id": 401387720,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699625628
    },
    {
        "content": "<p>Ah, if it can be upstreamed then all the better.</p>",
        "id": 401387852,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699625672
    },
    {
        "content": "<p>Does it make sense to upstream the current <code>#find</code> command first, so as to preserve the history that shows how you overhauled it?</p>",
        "id": 401387933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699625703
    },
    {
        "content": "<p>Or is that impractical due to the current one depending on bits of Mathlib that won't be upstreamed</p>",
        "id": 401388017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699625725
    },
    {
        "content": "<p>They have very little in common besides name and a bit of scope at this point, the gain would be small</p>",
        "id": 401388552,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699625912
    },
    {
        "content": "<p>We certainly don't have the reviewing availability required to be upstreaming things merely for the sake of history.</p>",
        "id": 401452932,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699662345
    }
]