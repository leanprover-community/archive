[
    {
        "content": "<p>What should I do with <a href=\"https://github.com/leanprover-community/mathlib/pull/18312\">#18312</a>? Add prime to <code>topological_space.is_open</code>? Add notation for <code>@is_open _ t</code>?</p>",
        "id": 324499149,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675034290
    },
    {
        "content": "<p>No poll? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 324619603,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675088757
    },
    {
        "content": "<p>My preference is: yes to both</p>",
        "id": 324619694,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675088768
    },
    {
        "content": "<p>The notation should be <code>is_open[t]</code> the same way we have <code>measurable_set[m]</code></p>",
        "id": 324621591,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1675089172
    },
    {
        "content": "<p>Yep that's what Yury proposed on the mathlib3 PR.</p>",
        "id": 324621805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675089227
    },
    {
        "content": "<p>[in comments]</p>",
        "id": 324621826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675089233
    },
    {
        "content": "<p>Cool! Then count me in.</p>",
        "id": 324621949,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1675089254
    },
    {
        "content": "<p>What is the mathlib4 version of this <code>notation</code> command?</p>",
        "id": 324628531,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675090709
    },
    {
        "content": "<p>I think I'm happy with <a href=\"https://github.com/leanprover-community/mathlib/pull/18312\">#18312</a>. But I suppose that you still want to implement this notation in Lean 3 as well?</p>",
        "id": 324630050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675091039
    },
    {
        "content": "<p>I'm ok with those changes if we indeed introduce a notation to avoid having more <code>@ _ _</code></p>",
        "id": 324631452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675091359
    },
    {
        "content": "<p>and same for uniformity since I see <code>u‚ÇÅ.uniformity</code> is now <code>@uniformity _ u‚ÇÅ</code></p>",
        "id": 324631767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675091440
    },
    {
        "content": "<p>Remember that we now have the option <code>foo (alpha := bar)...</code> for <code>@foo _ _ _ bar _ _</code>. I remark this because my experience is that people aren't using it (the porting program is just porting <code>@foo _ _ _ bar _ _</code> as itself, and people aren't changing it). It's a really great addition to lean.</p>",
        "id": 324635694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675092282
    },
    {
        "content": "<p>the one niggle I have with this syntax is that it doesn't work for <code>@foo _  _ bar _ _ baz</code> as you'd expect (<code>foo (b := bar, c := baz)</code>) but instead you need <code>foo (b := bar) (c := baz)</code>, which can sometimes be weird</p>",
        "id": 324637001,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675092580
    },
    {
        "content": "<p>but I agree that this is one of the best lean4 changes</p>",
        "id": 324637092,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675092601
    },
    {
        "content": "<p>Most of the <code>@foo _ _ _ _ _ ...</code> occurrences in mathlib are to make precisely one implicit thing explicit, so I'm not too bothered about this.</p>",
        "id": 324644500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675094410
    },
    {
        "content": "<p>What about notation for <code>nhds</code>? We already have <code>ùìù[s] x</code> for <code>nhds_within</code>.</p>",
        "id": 324727150,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675097441
    },
    {
        "content": "<p>I don't understand, <code>ùìù</code> is already notation for <code>nhds</code>, or am I missing something?</p>",
        "id": 324732520,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675098731
    },
    {
        "content": "<p>I mean, what about nhds w.r.t. a non-standard topology?</p>",
        "id": 324733177,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675098925
    },
    {
        "content": "<p>I'm introducing <code>is_open[t]</code>/<code>is_closed[t]</code> similar to <code>measurable_set[m]</code></p>",
        "id": 324733230,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675098942
    },
    {
        "content": "<p>oh of course <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 324733424,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675098991
    },
    {
        "content": "<p>BTW, should it be <code>ùì§[u] Œ±</code> or <code>ùì§[u]</code>?</p>",
        "id": 324733896,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675099144
    },
    {
        "content": "<p>I guess we don't have this problem of \"the namespace and class name are different which breaks dot notation\" for metric spaces because we rarely use multiple metric structures on the same underlying type?</p>",
        "id": 324734058,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675099194
    },
    {
        "content": "<p>And we don't have useful predicates in the fields of <code>metric_space</code>.</p>",
        "id": 324735009,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675099466
    },
    {
        "content": "<p>Can someone move this topological space discussion to a separate thread?</p>",
        "id": 324735515,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675099608
    },
    {
        "content": "<p>24 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/port.20progress\">#mathlib4 &gt; port progress</a> by <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span>.</p>",
        "id": 324735916,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675099710
    },
    {
        "content": "<p>But there is <code>has_le.le.trans</code>. So there is also some precedent for just exporting and putting names intended for dot notation in the nested namespace.</p>",
        "id": 324737775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675100215
    },
    {
        "content": "<p>Most classes don't have fields that are propositions/types.</p>",
        "id": 324738334,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675100370
    },
    {
        "content": "<p>Personally, I would support <code>ùì§[u]</code> over <code>ùì§[u] Œ±</code>.</p>",
        "id": 324740001,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675100843
    },
    {
        "content": "<p><del>As for <code>ùìù</code>, the notation <code>ùìù[s][t] x</code> should work without causing elaboration problems (I think). It's ugliness can be forgiven due to its relatively limited use.</del> (stupid)</p>",
        "id": 324740011,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675100846
    },
    {
        "content": "<p>This gives notation for <code>nhds_within</code> with a custom topology, not for <code>nhds</code> with a custom topology.</p>",
        "id": 324750962,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675103983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> It's hard to remember that we need <code>topological_space.is_open.*</code> but <code>is_closed.*</code> and <code>is_clopen.*</code>.</p>",
        "id": 324751109,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675104015
    },
    {
        "content": "<p>What about <code>nhds[t]</code> and <code>nhds_within[t]</code>? It should be rare enough that we can do without our beautiful notation, and it lifts ambiguities.</p>",
        "id": 324759242,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1675106689
    },
    {
        "content": "<p>I'll do this in the next PR. I want to have this one merged so that I can start marking my \"port Topology.*\" PRs as <code>awaiting-review</code>.</p>",
        "id": 324763337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675107998
    },
    {
        "content": "<p>How do I port these notations to mathlib4?</p>",
        "id": 324774251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675111860
    },
    {
        "content": "<p>Can you make a MWE of the lean 3 notation you want with few to no mathlib dependencies?</p>",
        "id": 324774426,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675111923
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_open</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.is_open</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_of</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">is_open</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">t</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_open</span> <span class=\"n\">_</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tmp</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t‚ÇÅ</span> <span class=\"n\">t‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span><span class=\"o\">[</span><span class=\"n\">t‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span><span class=\"o\">[</span><span class=\"n\">t‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_open</span><span class=\"o\">[</span><span class=\"n\">t‚ÇÇ</span><span class=\"o\">]</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span><span class=\"o\">[</span><span class=\"n\">t‚ÇÇ</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">h'</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 324777465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675112994
    },
    {
        "content": "<p>The actual notation uses <code>localized</code> and <code>hole!</code> instead of <code>_</code>.</p>",
        "id": 324777576,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675113024
    },
    {
        "content": "<p>I copied this from <code>measurable_set[m]</code> without trying to understand why do we need this \"hole!\"</p>",
        "id": 324777657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675113057
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 324777772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675113103
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.is_open</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">is_open_of</span><span class=\"o\">)</span> <span class=\"s2\">\"is_open[\"</span> <span class=\"n\">t</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">is_open</span> <span class=\"n\">_</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tmp</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t‚ÇÅ</span> <span class=\"n\">t‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span><span class=\"o\">[</span><span class=\"n\">t‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span><span class=\"o\">[</span><span class=\"n\">t‚ÇÅ</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_open</span><span class=\"o\">[</span><span class=\"n\">t‚ÇÇ</span><span class=\"o\">]</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span><span class=\"o\">[</span><span class=\"n\">t‚ÇÇ</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">h'</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 324779129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675113685
    },
    {
        "content": "<p>seems to work, at least</p>",
        "id": 324779158,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675113700
    },
    {
        "content": "<p>What is the meaning of <code>quotPrecheck</code>?</p>",
        "id": 324780230,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675114116
    },
    {
        "content": "<p>I'm not sure but if you remove that line you get an error telling you to add it</p>",
        "id": 324780326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675114148
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/actions/runs/4048432474/jobs/6964613373\">https://github.com/leanprover-community/mathlib/actions/runs/4048432474/jobs/6964613373</a> shows that all steps of the \"Lint mathlib\" job are done but it's still running.</p>",
        "id": 324800027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675122332
    },
    {
        "content": "<p>Why can this happen?</p>",
        "id": 324800043,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675122345
    }
]