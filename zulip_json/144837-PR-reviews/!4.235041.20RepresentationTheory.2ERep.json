[
    {
        "content": "<p>Take 2 of porting this file now that I've refactored some of the mathlib3 version. The port now has no errors and is ready for review. Some proofs had to be changed quite a bit because of <code>simp</code> behaving differently.  </p>\n<p>Also, some imported files have definitions for which <code>@[simps]</code>  generates lemmas that unfold the types of certain terms. This means the linter complains that the LHS of some of my lemmas simplify to [something syntactically equal to the LHS] because the <code>@[simps]</code> lemmas just simplify some types in the LHS. I've added <code>nolint simpNF</code> when this is the case. I can't get simp to use some of my <code>nolint simpNF</code> lemmas anyway, though.</p>",
        "id": 366253640,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1686762957
    },
    {
        "content": "<p>I recommend trying modifying those <code>@[simps]</code> attributes, tell it to only write simp lemmas for the non-type fields. It seems simp lemmas for type fields in category theory are often unhelpful.</p>",
        "id": 366297267,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686774582
    },
    {
        "content": "<p>thank you! I will do that.</p>",
        "id": 366445812,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1686825509
    },
    {
        "content": "<p>Unfortunately removing simp lemmas for type fields is causing <code>Category.comp_id</code>, <code>Category.id_comp</code> rewrites to fail :(</p>",
        "id": 366480081,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1686831946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> I can have a look at this. If you have hints about which <code>@[simps]</code> attributes I should be looking at that would be helpful.</p>",
        "id": 366646735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686870954
    },
    {
        "content": "<p>thank you! The ones firing a lot for me come from</p>\n<ul>\n<li><code>CategoryTheory.Monoidal.transport</code> in <code>CategoryTheory.Monoidal.Transport</code></li>\n<li><code>Action.functorCategoryEquivalence</code>, <code>Action.FunctorCategoryEquivalence.functor</code> and <code>Action.FunctorCategoryEquivalence.inverse</code> in <code>RepresentationTheory.Action</code></li>\n<li><code>CategoryTheory.Equivalence.symm</code> in <code>CategoryTheory.Equivalence</code></li>\n<li>Also the lemma <code>CategoryTheory.Monoidal.tensorObj_obj</code> in <code>CategoryTheory.Monoidal.FunctorCategory</code> which doesn't come from a <code>@[simps]</code></li>\n</ul>",
        "id": 366665723,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1686880096
    },
    {
        "content": "<p>Alternatively, I don't actually need the lemmas I've added <code>nolint simpNF</code>to to be <code>simp</code> lemmas </p>\n<p>(they're <code>MonoidalCategory.braiding_hom_apply</code>, <code>MonoidalCategory.braiding_inv_apply</code>, <code>Rep.homEquiv_apply_hom</code> and <code>Rep.homEquiv_symm_apply_hom</code>, all in <code>RepresentationTheory.Rep</code>, fwiw) </p>\n<p>so for the purposes of this PR I could just remove the <code>simp</code> attribute. But I'm interested to know the solution to this in general</p>",
        "id": 366917450,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1686940241
    }
]