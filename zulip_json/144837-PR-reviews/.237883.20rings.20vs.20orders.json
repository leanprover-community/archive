[
    {
        "content": "<p>Did we ever reach consensus about the ordering of the parent classes for ordered algebraic classes? We switch back and forth for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderedSemiring#doc\">docs#OrderedSemiring</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderedCommSemiring#doc\">docs#OrderedCommSemiring</a> which seems like a bad idea and the cause of issues from <a href=\"https://github.com/leanprover-community/mathlib4/pull/7309\">#7309</a>. Cf <a href=\"https://github.com/leanprover-community/mathlib4/pull/6403\">#6403</a>.</p>",
        "id": 398478000,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698238206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> in particular</p>",
        "id": 398478193,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698238290
    },
    {
        "content": "<p>Is my description that follows correct?</p>\n<ul>\n<li>The most important thing to get right is consistency, so we should pick a consistent ordering of parent classes.</li>\n<li>After that, we can choose to privilege one inheritance path over the others by putting it first. This will make certain defeq checks faster.</li>\n<li>When we change parent classes, we might also have to change the way instances are defined, to avoid slowdowns.</li>\n</ul>",
        "id": 398479065,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698238590
    },
    {
        "content": "<p>Given that there does not seem any strong \"actual\" reason to prefer one order over the other, the \"hierarchy builder\" tool that was mentioned elsewhere seems like a good, principled way to proceed: the tool does the bookkeeping of the order.</p>\n<p>The main issue is that, well, Mathlib does not have the tool...</p>",
        "id": 398479528,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698238772
    },
    {
        "content": "<p>Under those assumptions, it looks like other classes such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderedAddCommGroup#doc\">docs#OrderedAddCommGroup</a> also put the algebra before the order so I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/7883\">#7883</a> is the right way to go.</p>",
        "id": 398479708,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698238823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237883.20rings.20vs.20orders/near/398479528\">said</a>:</p>\n<blockquote>\n<p>Given that there does not seem any strong \"actual\" reason to prefer one order over the other, the \"hierarchy builder\" tool that was mentioned elsewhere seems like a good, principled way to proceed: the tool does the bookkeeping of the order.</p>\n<p>The main issue is that, well, Mathlib does not have the tool...</p>\n</blockquote>\n<p>In my (admittedly somewhat utopic) vision, the slowness should be fixed in Lean itself. But I don't even know if that's a theoretical possibility.</p>",
        "id": 398480538,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698239087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237883.20rings.20vs.20orders/near/398479065\">said</a>:</p>\n<blockquote>\n<p>Is my description that follows correct?</p>\n<ul>\n<li>The most important thing to get right is consistency, so we should pick a consistent ordering of parent classes.</li>\n<li>After that, we can choose to privilege one inheritance path over the others by putting it first. This will make certain defeq checks faster.</li>\n<li>When we change parent classes, we might also have to change the way instances are defined, to avoid slowdowns.</li>\n</ul>\n</blockquote>\n<p>I believe these statements. I would add that data should be privileged over proofs to avoid unfolding it if possible.</p>",
        "id": 398480730,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698239154
    },
    {
        "content": "<p>Re: hierarchy builder, we will have a large footgun as long as we build things by hand as long as lean uses the current inheritance pattern for structures.</p>",
        "id": 398481034,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698239251
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover-community/mathlib4/pull/6403\">#6403</a> supersedes this PR entirely and brings clearer benefits, so what needs to be done to make it ready for review? <span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span>?</p>",
        "id": 398481193,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698239301
    },
    {
        "content": "<p>Yes, that represents a nice speed up generally. I took a quick look and the main question I had was optimality of the instance priorities for projections to the non-preferred parent(s).</p>",
        "id": 398481736,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698239476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237883.20rings.20vs.20orders/near/398481034\">said</a>:</p>\n<blockquote>\n<p>Re: hierarchy builder, we will have a large footgun as long as we build things by hand as long as lean uses the current inheritance pattern for structures.</p>\n</blockquote>\n<p>I'm hoping that <a href=\"https://github.com/leanprover/lean4/pull/2666\">lean4#2666</a> will land at some point so that <code>structure</code> by itself is good enough, and no hierarchy builder is needed...</p>",
        "id": 398482071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698239589
    },
    {
        "content": "<p>(As a remind, Coq's hierarchy builder uses flat lean3-style structures anyway!)</p>",
        "id": 398482148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698239619
    },
    {
        "content": "<p>Thanks for bumping the <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> count to the top of the issue list!</p>",
        "id": 398488821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698241659
    },
    {
        "content": "<p>I'm not sure yet if the order of parent classes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6403\">#6403</a> now is better. I haven't checked what happens if we change it (I'll try). But I'm sure it's effective to make <code>OrderedSomething -&gt; Something</code> lower priority (50 in the PR). Also sometimes Lean creates extra instances (which can be found by checking the parameters of <code>.mk</code>) (feels like a bug?). <code>attribute [-instance]</code> seems to work only locally so I marked these instances with priority 0.</p>",
        "id": 398499922,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1698244655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237883.20rings.20vs.20orders/near/398488821\">said</a>:</p>\n<blockquote>\n<p>Thanks for bumping the <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> count to the top of the issue list!</p>\n</blockquote>\n<p>Is there a way to sort issues by <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  or was this comment just made in jest?</p>",
        "id": 398543666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698259850
    },
    {
        "content": "<p>Yes, the link at the bottom of the default PR template takes you to sorted list:</p>",
        "id": 398543763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698259895
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/5aHoPlB_iCyzuGoRxVcjCNL2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5aHoPlB_iCyzuGoRxVcjCNL2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/5aHoPlB_iCyzuGoRxVcjCNL2/image.png\"></a></div>",
        "id": 398543769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698259898
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover/lean4/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc\">https://github.com/leanprover/lean4/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc</a>)</p>",
        "id": 398543784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698259908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237883.20rings.20vs.20orders/near/398482071\">said</a>:</p>\n<blockquote>\n<p>I'm hoping that <a href=\"https://github.com/leanprover/lean4/pull/2666\">lean4#2666</a> will land at some point so that <code>structure</code> by itself is good enough, and no hierarchy builder is needed...</p>\n</blockquote>\n<p>At this point <a href=\"https://github.com/leanprover/lean4/pull/2666\">lean4#2666</a> seems unlikely to proceed. Leo thinks it is going backwards, and doesn't want to revisit the bad old days of having multiple alternatives schemes for building structures. He's aware of the problem it's trying to solve, but isn't happy with <code>@[flat]</code> as a potential solution.</p>",
        "id": 398578053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698277403
    },
    {
        "content": "<p>In practice we already have multiple inheritance schemes; in terms of external behavior, <code>structure Foo extends A, B</code> can be very different to the <code>structure Foo extends B, A</code> scheme.</p>",
        "id": 398578366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698277721
    },
    {
        "content": "<p>And presumably building a hierarchy builder that drops <code>extends</code> entirely and generates flat structures would also not be something Leo is happy with, even if it only lives in mathlib?</p>",
        "id": 398578587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698277935
    },
    {
        "content": "<p>I'm mean, Leo appreciates that Mathlib is going to Mathlib. :-) But it wouldn't be ideal.</p>",
        "id": 398580994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698279976
    }
]