[
    {
        "content": "<p>I recently have been having to work with <code>succAbove</code> and <code>predAbove</code> and finding their definitions and the lemmas availiable quite unergonomic and hard to use. In particular, not having a \"clean\" inverse of succAbove (there is an existence theorem for the z such that x not equal to y has <code>y.succAbove z = x</code>, but actually stating cleanly what <code>z</code> is was oddly annoying). In principle it is good to try and avoid using value coercion to split down to the arithmetic, as in my experience this often obscures what is going on and the structure therein.</p>\n<p>It also makes working with <code>insertNth</code> similarly annoying. Wheras with this proper inverse, one can do things like this, easily:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">insertNth_apply_ne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">insertNth</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">predAboveOfNe</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succAbove_predAboveOfNej</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insertNth_apply_succAbove</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">insertNth_apply</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">insertNth</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">predAboveOfNe</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">eq_or_ne</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insertNth_apply_same</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insertNth_apply_ne</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I was complaining about this here: <a href=\"#narrow/stream/287929-mathlib4/topic/Inconsistent.20behaviour.20of.20.60Fin.2EcastPred.60.2C.60Fin.2Epred.60.2C.20etc.2E\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Inconsistent.20behaviour.20of.20.60Fin.2EcastPred.60.2C.60Fin.2Epred.60.2C.20etc.2E</a></p>\n<p>But I have put my effort where my mouth is, and begun a refactor. I've finished my first pass, but I expect that to break a lot of things elsewhere, and I'll need to fix that too. However, feedback and thoughts would be good. The file has got longer as I found more lemmas to add - and I think I probably have more than I need, and there's probably some good normal forms to choose for certain things - and arguably I suppose some of this content could be removed out to an adjunct file. But I think the core work is good.</p>\n<p>The PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/9145\">#9145</a>.</p>",
        "id": 408712323,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702946477
    }
]