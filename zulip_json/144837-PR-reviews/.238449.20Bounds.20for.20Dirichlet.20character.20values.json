[
    {
        "content": "<p>This includes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- For each `n ≥ 0`, the unit group of `ZMod n` has finite exponent. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ZMod.exists_pos_unit_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span> <span class=\"n\">Int.units_sq</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n.succ.totient</span><span class=\"o\">,</span> <span class=\"n\">Nat.totient_pos</span> <span class=\"n\">n.succ_pos</span><span class=\"o\">,</span> <span class=\"n\">ZMod.pow_totient</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span>  suggested to split this into a definition (which could be called <code>ZMod.units_exponent_bound</code> perhaps) and a lemma. I'd like to have some further input on that.</p>",
        "id": 402866446,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700306370
    },
    {
        "content": "<p>I'll have a closer look later, but Monoid.Exponent exists so you can phrase it that way too.</p>",
        "id": 402866784,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700306568
    },
    {
        "content": "<p>This would just follow from the assertion that <code>(ZMod n)ˣ</code> is finite, right? (because it's a group)</p>\n<p>A student once tried to put a Fintype instance on this group but my memory is that there were diamond issues, because the two cases n=0 and n&gt;0 might both already be known to be fintypes, but for different reasons. Do we have propositional finiteness of a type yet? If so then why not prove that the unit group is propositionally finite and then invoke some fact about finite groups?</p>",
        "id": 402867597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700307032
    },
    {
        "content": "<p>That's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite#doc\">docs#Finite</a>, no?</p>",
        "id": 402868189,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700307448
    },
    {
        "content": "<p>So then my suggestion is that (because of the fintype diamonds) there's a <code>Finite</code> instance put on <code>(ZMod n)ˣ</code> (I'm assuming there's no noncomputable instance of Fintype X given Finite X!) and then this lemma is deduced from the statement that every element in a finite group is annihilated by its order. </p>\n<p>Either that or someone figures out how to make an instance of <code>Fintype (ZMod n)ˣ</code> without causing diamonds (this is what I got stuck on).</p>",
        "id": 402874724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700312556
    },
    {
        "content": "<p>OK; the missing piece seems to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Int.natCard_units</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.card_eq_two_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Int.units_ne_neg_self</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Set.toFinset_eq_univ.mp</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(there may be a shorter proof; this was found by a couple of <code>apply?</code>s)<br>\nthen we can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">FiniteZModUnits</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.finite_of_card_ne_zero</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Int.natCard_units</span> <span class=\"bp\">▸</span> <span class=\"n\">Nat.succ_ne_zero</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">instFiniteUnits</span>\n</code></pre></div>\n<p>and the proof of the lemma reduces to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ZMod.exists_pos_unit_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">,</span> <span class=\"n\">Nat.card_pos</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">pow_card_eq_one'</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(and so maybe it can be inlined anyway).</p>",
        "id": 402880089,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700316792
    },
    {
        "content": "<p>Or maybe like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">FintypeZModUnits</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">change</span> <span class=\"n\">Fintype</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ;</span> <span class=\"n\">infer_instance</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">instFintypeUnits</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ZMod.exists_pos_unit_pow_eq_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_pos</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">pow_card_eq_one</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>What wold be the potential diamond here?</p>",
        "id": 402893082,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700325921
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/fintype.20.28units.20.28zmod.20n.29.29/near/252817520\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/fintype.20.28units.20.28zmod.20n.29.29/near/252817520</a></p>",
        "id": 402893707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700326522
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">FintypeZModUnits</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">change</span> <span class=\"n\">Fintype</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ;</span> <span class=\"n\">infer_instance</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">instFintypeUnits</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FintypeZModUnits</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">_root_.instFintypeUnits</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n  <span class=\"c1\">-- apply Subsingleton.elim -- works</span>\n</code></pre></div>",
        "id": 402894135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700326878
    },
    {
        "content": "<p>My take on this is that this mess is caused by constructivism and for abstract pure maths where we're just proving theorems we should just use <code>Finite</code>.</p>",
        "id": 402894279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700326960
    },
    {
        "content": "<p>OK, so golfing the above a bit, it would be this instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">FiniteZModUnits</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Finite</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">Finite.of_fintype</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instFiniteUnits</span>\n</code></pre></div>\n<p>and I can reduce my use case to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">unit_norm_eq_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">DirichletCharacter</span> <span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‖</span><span class=\"n\">χ</span> <span class=\"n\">m</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">pow_eq_one_iff_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.card_pos</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">norm_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Units.val_pow_eq_pow_val</span><span class=\"o\">,</span> <span class=\"n\">pow_card_eq_one'</span><span class=\"o\">,</span> <span class=\"n\">Units.val_one</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Does this look good?</p>",
        "id": 402903511,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700333752
    },
    {
        "content": "<p>Do you really care about the n=0 case? :-) That's what's causing all the trouble, after all. If you added <code>[NeZero n]</code> then the instance is already there. Of course the argument the other way is that it's true even if n=0 :-)</p>\n<p>But yeah that instance will cause no problems because it's Prop-valued and I don't see why it shouldn't be in mathlib as a workaround for the diamond.</p>",
        "id": 402907143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700336163
    },
    {
        "content": "<p>Yes, the nice thing is that one doesn't have to exclude Dirichlet characters of level zero (even though they are probably of little use).</p>",
        "id": 402907259,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700336267
    },
    {
        "content": "<p>I think this should be ready now. Can perhaps somebody look at it and maintainer merge if OK?</p>",
        "id": 403948907,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700825087
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 404441069,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701100486
    },
    {
        "content": "<p>Is mathlib bors down? I get a 404 from <a href=\"http://app.bors.tech\">app.bors.tech</a>...</p>",
        "id": 404479032,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701114468
    },
    {
        "content": "<p>Bors is now self-hosted. See <a href=\"#narrow/stream/113488-general/topic/bors.20going.20away.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/bors.20going.20away.3F</a>. The new link is <a href=\"https://mathlib-bors-ca18eefec4cb.herokuapp.com/repositories/16\">#bors</a>.</p>",
        "id": 404479656,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701114726
    },
    {
        "content": "<p>But the PR seems to be stuck at \"Checking for ability to merge automatically…\" (after I bors r+'ed it -- it was delegated).</p>",
        "id": 404479815,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701114821
    },
    {
        "content": "<p>I think it's an issue on Github's side: <a href=\"https://www.githubstatus.com/incidents/66vhjmd266r9\">https://www.githubstatus.com/incidents/66vhjmd266r9</a></p>",
        "id": 404481508,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1701115428
    },
    {
        "content": "<p>... and it does not show up as being (in the process of being) merged on the bors page.</p>",
        "id": 404481619,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701115462
    },
    {
        "content": "<p>My guess is that bors did not get the notification from GitHub about your comment (most likely due to the current \"incident\"). You could try posting it again, but it might not work until this is resolved.</p>",
        "id": 404481872,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1701115579
    },
    {
        "content": "<p>OK; I'll wait for a while and then perhaps retry.</p>",
        "id": 404482120,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701115688
    },
    {
        "content": "<p>Bors is now working on it, so it seems to be more a delay.</p>",
        "id": 404485763,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701117442
    }
]