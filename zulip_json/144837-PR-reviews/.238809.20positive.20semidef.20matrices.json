[
    {
        "content": "<p>Could I ask for a review of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8809\">#8809</a> (idle for a week now)? The main result is that each positive-semidef matrix has a unique positive-semidef square root.</p>",
        "id": 407214216,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702291733
    },
    {
        "content": "<p>This sounds like a job for <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> to tell you that holomorphic functional calculus is close and hence we shouldn't prove <code>Matrix</code>-specific results.</p>",
        "id": 407214509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702291841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I don't think holomorphic functional calculus would help here, since the square root is not holomorphic at 0 (and the results are much easier for positive <em>definite</em> matrices). Continuous functional calculus would give existence of <del>the</del> <strong>a</strong> square root, but it doesn't seem to straightforwardly imply uniqueness.</p>",
        "id": 407215790,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702292292
    },
    {
        "content": "<p>Nono, this is not how the connection works. Instead, you prove that for a commutative C*-algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and its spectrum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, the Gelfand map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⟶</mo><msub><mi>C</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A ⟶ C_0(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> is an isometric *-isomorphism. Hence you can take square roots in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> by identifying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C_0(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> and taking square roots there.</p>",
        "id": 407224224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702295534
    },
    {
        "content": "<p>Then the square root of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><msub><mi>C</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f : C_0(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> is obviously unique since you must pointwise take the positive square root of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 407224386,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702295586
    },
    {
        "content": "<p>However you are right that this is not holomorphic functional calculus. I got my words confused.</p>",
        "id": 407224438,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702295609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238809.20positive.20semidef.20matrices/near/407224224\">said</a>:</p>\n<blockquote>\n<p>Nono, this is not how the connection works. Instead, you prove that for a commutative C*-algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and its spectrum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, the Gelfand map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⟶</mo><msub><mi>C</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A ⟶ C_0(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> is an isometric *-isomorphism. Hence you can take square roots in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> by identifying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C_0(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> and taking square roots there.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> You are barking up the wrong tree here. Matrices are not commutative! You can apply this to the (commutative) closed subalgebra A generated by a given element, but you only get uniqueness <em>within that subalgebra</em> -- it wouldn't rule out the existence of other positive-semidef square roots that aren't in A.</p>",
        "id": 407249739,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702304338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span> actually, the continuous functional calculus <em>does</em> give you uniqueness of positive square roots. It goes like this. Let <code>A</code> be a (possibly noncommutative, complex) C⋆-algebra, and suppose that <code>a : A</code> is positive (i.e., <code>star a = a</code> and the <code>ℂ</code>-spectrum is contained in <code>ℝ≥0</code>; for matrices this coincides with positive semidefiniteness). Then</p>\n<ol>\n<li>the continuous functional calculus, applied the (commutative!) C⋆-subalgebra generated by <code>a</code>  (i.e., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=elementalStarAlgebra#doc\">docs#elementalStarAlgebra</a>) allows you to produce a positive square root of <code>a</code> by applying the continuous function  (on the spectrum of <code>a</code>) <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NNReal.sqrt#doc\">docs#NNReal.sqrt</a>, which takes nonnegative values (the latter guarantees the result is positive). We'll call the result <code>√a</code>.</li>\n<li>Now suppose that <code>b : A</code> is positive and <code>b ^ 2 = a</code>. Then the composition property (3rd equality below) of the continuous functional calculus allows us to write (in bastardized form):</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">cfc</span> <span class=\"n\">id</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">cfc</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">cfc</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">cfc</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cfc</span> <span class=\"n\">sqrt</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">√</span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 407283936,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702314526
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, see above about the argument for uniqueness.</p>",
        "id": 407283995,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702314550
    },
    {
        "content": "<p>As for this PR: David, do you need this to make progress on something else? If so, I'm happy for it to be merged (after review). If not, then coincidentally, I was just about to mark <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a> as <code>awaiting-review</code> after I clean it up today. After that, there will be one more step to get the non-unital version, and then square roots should follow shortly.</p>",
        "id": 407284778,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702314786
    },
    {
        "content": "<p>That's nice, I didn't know that the CFC had this very strong uniqueness property. </p>\n<p>I do actually need this for something else: it was based on a lemma written by Adrian Wüthrich, one of the students attending my Lean seminar at ETH Zurich this semester, and it is needed for his PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8594\">#8594</a> on graph Laplacians.</p>",
        "id": 407285287,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702314960
    },
    {
        "content": "<p>Okay, I'll try to review it shortly. I had wanted the CFC in much sooner than this, but I got tripped up and then busy this semester. Hopefully I can finish it up soon. But in the meantime, I'm okay with merging things that get the job done until we can refactor with the CFC.</p>",
        "id": 407285653,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702315075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238809.20positive.20semidef.20matrices/near/407283995\">said</a>:</p>\n<blockquote>\n<p>and <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>, see above about the argument for uniqueness.</p>\n</blockquote>\n<p>Thanks! I was in the process of digging up my lecture notes to see how it was done but you beat me to it.</p>",
        "id": 407285847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702315131
    },
    {
        "content": "<p>Presumably the same result also holds over a real closed field? I wonder which approach generalizes more easily ...</p>",
        "id": 407330841,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702333830
    },
    {
        "content": "<p>Sure, because it's a first-order sentence. Don't the two approaches simply hold in different contexts? I'm not sure there's a way to unify them. (Or maybe I'm reading into your intended meaning incorrectly.)</p>",
        "id": 407388981,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702358940
    },
    {
        "content": "<p>Exactly: the argument from the PR could be made to work, with a little extra effort, for Hermitian matrices over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><msqrt><mrow><mo>−</mo><mn>1</mn></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K(\\sqrt{-1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1156em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8656em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span><span style=\"top:-2.8256em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1744em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where K is any real closed field; whereas Jireh's argument really needs the topological structure, but would work for infinite-dimensional C*-algebras over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>.</p>",
        "id": 407402691,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702363949
    },
    {
        "content": "<p>The statement over the reals could/should/I would like to see it as together with the continuity property of the square root.</p>",
        "id": 407569960,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1702416026
    },
    {
        "content": "<p>With all due respect, this thread is getting more and more sidetracked – can we bring things back to the question of whether <a href=\"https://github.com/leanprover-community/mathlib4/pull/8809\">#8809</a> is ready to merge or not?</p>",
        "id": 407652475,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702450143
    },
    {
        "content": "<p>My impression is that <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> was happy to merge it. And maybe refactor later with another proof approach.</p>",
        "id": 407653036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702450345
    },
    {
        "content": "<p>I'll leave that judgement call to him. This is outside my wheelhouse.</p>",
        "id": 407653122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702450375
    },
    {
        "content": "<p>Looking now. Sorry for the delay.</p>",
        "id": 407807108,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702500463
    },
    {
        "content": "<p>I have a lot of thoughts. It will take me another day as I have to be done now.</p>",
        "id": 407824088,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702507808
    },
    {
        "content": "<p>I've assigned it to you in the meantime so that it doesn't get merged before you get a chance to do so</p>",
        "id": 408077019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702602121
    },
    {
        "content": "<p>Thanks. I've spent some time thinking today. I'm trying to avoid <code>IsROrC</code> if possible. I built the <code>StarOrderedRing</code> instance for that, but it would be nice to get it in more generality. I <em>think</em> it's possible, but I may be wrong. I'm trying to figure that out now.</p>",
        "id": 408087994,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702607316
    },
    {
        "content": "<p>I'm dubious whether avoiding <code>IsROrC</code>  is possible without very substantial changes elsewhere. The problem is that you need to know that positive elements <em>in the ground ring</em> have positive square roots; and Mathlib doesn't know how to prove this for any class of star-ordered rings except <code>IsROrC</code>.  One could develop a theory of Euclidean ordered fields, etc, but this would be a major undertaking and I claim it is not reasonable to expect this as part of a PR review (particularly since an appreciable part of the existing <code>PosSemidef</code> matrix code uses <code>IsROrC</code> already).</p>",
        "id": 408124600,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702623105
    },
    {
        "content": "<p>Sorry, I wasn't sufficiently clear above. Indeed, the square root won't exist unless it exists in <code>R</code> (by considering 1x1 matrices obviously). What I meant was that I was trying to get the <code>StarOrderedRing</code> instance for <code>Matrix n n R</code> with <code>R</code> only a <code>StarOrderedRing</code> (as opposed to <code>IsROrC</code>), with the Loewner order (i.e., <code>A ≤ B ↔ ∃ P, P.PosSemidef ∧ B = A + P</code>).</p>\n<p>However, I have since realized this is not possible. <code>Matrix n n ℤ</code> is a counterexample. Considering <code>!![2,1;1,1]</code>, one can see that it is impossible to write this as a sum of squares. Indeed, it is not possible to decompose this as a nontrivial sum of positive semidefinite matrices with integer entries, and so this is a sum of squares if and only if it is a square, but it is easy to see this is impossible (e.g., by direct computation, or else by recognizing that its unique square root in <code>Matrix (Fin 2) (Fin 2) ℝ</code> doesn't have integer entries).</p>",
        "id": 408227069,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702661053
    },
    {
        "content": "<p>Hi Jireh, isn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.16em\" columnalign=\"center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.16em\" columnalign=\"center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.16em\" columnalign=\"center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\begin{pmatrix} 2 &amp; 1 \\\\ 1 &amp; 1 \\end{pmatrix} = \\begin{pmatrix} 1 &amp; 0 \\\\ 0 &amp; 0 \\end{pmatrix} + \\begin{pmatrix} 1 &amp; 1 \\\\ 1 &amp; 1 \\end{pmatrix}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span> a nontrivial decomposition as a sum of positive semidefinites?</p>",
        "id": 408230712,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702662575
    },
    {
        "content": "<p>... but your assertions are true for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.16em\" columnalign=\"center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\begin{pmatrix} 1 &amp; 1 \\\\ 1 &amp; 1 \\end{pmatrix}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span> instead.</p>",
        "id": 408230966,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702662718
    },
    {
        "content": "<p>Sorry, yes, you're right.</p>",
        "id": 408232188,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702663227
    }
]