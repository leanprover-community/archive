[
    {
        "content": "<p>This PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/4989\">#4989</a> has been around quite a while without attracting much interest. I'd love some feedback.</p>",
        "id": 380606959,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690879600
    },
    {
        "content": "<p>Other than that and some minor style things, looks great!</p>",
        "id": 380616822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690881284
    },
    {
        "content": "<p>I'm slightly sad to see it's non-constructive, but I think in this case I agree it would be a substantial pain to do it constructively without diamonds! (and besides, it was non-constructive before)</p>",
        "id": 380616825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690881284
    },
    {
        "content": "<p>Other than some minor style tweaks and a possible duplicate of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.subsingleton#doc\">docs#Module.subsingleton</a>, looks great! Is it easy to add instance for dumb things like <code>Prod</code>, <code>Ulift</code>, and <code>MulOpposite</code>?</p>",
        "id": 380617066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690881337
    },
    {
        "content": "<p>Thanks! I added an instance for <code>Prod</code> but I have run out of time and now need to focus on other things. Perhaps <code>Ulift</code>, <code>MulOpposite</code> etc could happen later?</p>",
        "id": 380653452,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690888049
    },
    {
        "content": "<p>I'm happy to add them on the commute home today</p>",
        "id": 380655924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690888489
    },
    {
        "content": "<p>The ground ring is assumed to be commutative? Why?</p>",
        "id": 380818497,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1690918484
    },
    {
        "content": "<p>This is a reasonable question, and the answer I guess in practice is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Dual#doc\">docs#Module.Dual</a> has commutativity built in. So perhaps the real question is how big the refactor of <code>Module.Dual</code> would have to be if we make it go from <code>R</code>-modules to <code>R^op</code>-modules (assuming that's how duality works in the non-comm case) and then where things like R^op^op = R cause problems when defining the double dual. But probably that's not a question which this PR should be answering.</p>",
        "id": 380821641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690919439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317890\">Julian Külshammer</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.234989.20reflexive.20modules.20and.20perfect.20pairings/near/380818497\">said</a>:</p>\n<blockquote>\n<p>The ground ring is assumed to be commutative? Why?</p>\n</blockquote>\n<p>This is a great question, the answer is of course what Kevin said but I'd add that now would be a great time to try generalising <code>Module.Dual</code> to the non-commutative case. We now have a way to talk about left and right actions but we haven't used it heavily and generalising <code>Module.Dual</code> would be a good way to test our approach.</p>",
        "id": 380941375,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690964026
    },
    {
        "content": "<p>Also, it's very easy to generalise a <em>definition</em> like this: you just weaken its typeclasses and nothing will break. The work is seeing which lemmas still hold (or need to be restated) but this can be done incrementally. For example the following:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-def Dual :=</span>\n<span class=\"gi\">+def Dual (R M : Type _) [Semiring R] [AddCommMonoid M] [Module R M] :=</span>\n</code></pre></div>\n<p>should just work.</p>",
        "id": 380942002,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690964161
    }
]