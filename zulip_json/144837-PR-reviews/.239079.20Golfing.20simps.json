[
    {
        "content": "<p>This PR adds a new script <code>golf.py</code>, which runs through Mathlib removing lemmas from <code>simp only</code> calls when it doesn't break the file. I ran this overnight on <code>Mathlib/Data</code> and it seemed to do all right - it found around 200 removable lemmas.</p>\n<p>The PR is getting radical, so perhaps this is a good time to weigh the pros and cons of actually doing this. The pros are that the files are shorter, and (presumably) run faster. Perhaps another pro is that it is easier to look at a <code>simp only</code> call and understand it better because you see which lemmas were actually necessary. Potential downsides are that in some cases, simplifications that are technically unnecessary might actually be making the proof state easier to read.</p>\n<p>Should I just let this loose on the whole of Mathlib?</p>",
        "id": 408348023,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1702736225
    },
    {
        "content": "<p>If the content of this PR is automatable, would you mind rerunning the script after <a href=\"https://github.com/leanprover-community/mathlib4/pull/9095\">#9095</a> is merged? This PR is very prone to rotting (and indeed a PR of you already made it rot this morning).</p>",
        "id": 408348142,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1702736320
    },
    {
        "content": "<p>That's fine, I was not trying particularly to be thorough with this version so I may just \"Accept all incoming\" after <a href=\"https://github.com/leanprover-community/mathlib4/pull/9095\">#9095</a> gets merged. If we want to do lots of script golfing then there are several things that can be added or refined, which I have put in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9101\">#9101</a>.</p>",
        "id": 408348942,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1702736907
    },
    {
        "content": "<p>Is this script trying to minimize the <code>simp only</code> calls? or is it rerunning <code>simp? only</code> to regenerate?</p>\n<p>If it's the former, I would worry about lemmas someone added for performance reasons. It's plausible to me that there are <code>simp</code> lists that go through but which have dramatically worse performance than one with an additional lemma or two. I'd want to be sure that in each case the timing is about the same. Changes in file length can't substitute actual timing measurements.</p>\n<p>If it's the latter, I don't see any harm in that.</p>",
        "id": 408359067,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702745057
    },
    {
        "content": "<p>If minimizing <code>simp</code> lists leads to different proof states, then that's also a big negative to me. That suggests that the remainder of the proof might only work because of some defeqs that work out. That's not good API-wise, and it might not be good performance-wise, since these might be \"heavy rfls\".</p>",
        "id": 408359275,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702745281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.239079.20Golfing.20simps/near/408359067\">said</a>:</p>\n<blockquote>\n<p>Is this script trying to minimize the <code>simp only</code> calls? or is it rerunning <code>simp? only</code> to regenerate?</p>\n</blockquote>\n<p>It's the former. </p>\n<p>Definitely seems prudent to me to benchmark these suggestions before pushing them, in the case of <a href=\"https://github.com/leanprover-community/mathlib4/pull/9079\">#9079</a> !bench is showing no significant changes.</p>",
        "id": 408360453,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1702746179
    },
    {
        "content": "<p>Perhaps there's a way to check if the changes affect the proof state, I'll have to think about it.</p>",
        "id": 408360777,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1702746392
    },
    {
        "content": "<p>For performance, it should be possible to get the sizes of the proof terms that <code>simp</code> generates -- this is indirect, but I think it would be a more reliable measure than timing. If you get the same proof states and if the proof terms don't increase in size, then I think your simp golfing would be perfectly justifiable.</p>",
        "id": 408361920,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702747450
    },
    {
        "content": "<p>I wonder what the easiest way to get that data would be. One way to get it would be to override <code>simp</code> and import the override early in the library.</p>",
        "id": 408362115,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702747683
    },
    {
        "content": "<p>In the new year I'm planning on building a tool that will let you say: \"please find every occurrence of tactic <code>X</code> in the library, run tactic <code>Y</code> instead, and then run some arbitrary meta code with access to both results\". But not today. :-)</p>",
        "id": 408387957,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702772931
    }
]