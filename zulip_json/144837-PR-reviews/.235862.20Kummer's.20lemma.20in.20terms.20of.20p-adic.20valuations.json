[
    {
        "content": "<p>In the <a href=\"https://github.com/leanprover-community/mathlib4/pull/5862\">#5862</a>, there is a proposed lemma of the following form (the actual example below is not from the PR and is just illustrative):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I suggested changing this to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>since I regard it as the job of an independent lemma to specify that the count never increases beyond <code>n/2</code>.</p>\n<p>However <span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> was not convinced and perhaps he is right. Does anyone have an opinion?</p>",
        "id": 376473196,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689714148
    },
    {
        "content": "<p>It's not so easy to deduce bar from foo though is it? And foo can be easily deduced from bar</p>",
        "id": 376476269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689715276
    },
    {
        "content": "<p>Yeah this is the point in favour. I guess I'm persuaded. Thanks!</p>",
        "id": 376485789,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689719349
    },
    {
        "content": "<p>Maybe we should make it easier to deduce bar from foo. But I don't exactly know what API we need for that.<br>\ncc <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ??</p>",
        "id": 376537689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689744402
    },
    {
        "content": "<p>/me is having a look</p>",
        "id": 376537716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689744420
    },
    {
        "content": "<p>Here are two attempts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Icc_union_Icc_conseq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∪</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.trans</span> <span class=\"n\">hbc</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hab.trans</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">hb</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">x</span> <span class=\"n\">b</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.succ_le_iff.2</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"n\">foo</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_one_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">and_congr_left_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">and_congr_right_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">ha</span> <span class=\"bp\">-</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.le_div_iff_mul_le</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n    <span class=\"n\">exact</span> <span class=\"n\">iff_of_true</span> <span class=\"o\">(</span><span class=\"n\">ha.trans</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Icc_union_Icc_conseq</span> <span class=\"n\">le_add_self</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">filter_union</span><span class=\"o\">,</span> <span class=\"n\">union_comm</span><span class=\"o\">,</span> <span class=\"n\">filter_false_of_mem</span><span class=\"o\">,</span>\n      <span class=\"n\">empty_union</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le_iff</span><span class=\"o\">,</span> <span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_lt_iff_lt_mul</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 376542780,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689746398
    },
    {
        "content": "<p>Anyway, I agree with Moritz that <code>bar</code> is a better lemma than <code>foo</code>.</p>",
        "id": 376542935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689746437
    },
    {
        "content": "<p>Btw <code>Data.Finset.Interval</code> is about intervals in the lattice of finsets, not about interval as finsets (<code>Data.Finset.LocallyFinite</code>).</p>",
        "id": 376543090,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689746501
    }
]