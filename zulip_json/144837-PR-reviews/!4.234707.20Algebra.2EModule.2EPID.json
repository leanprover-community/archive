[
    {
        "content": "<p>How could I not share this...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Module</span>\n    <span class=\"o\">((</span><span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n        <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n          <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n            <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n              <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                  <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                    <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                      <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                        <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                          <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                            <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                              <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                  <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                    <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                      <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                        <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                          <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                            <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                              <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                  <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                    <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                      <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                        <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                          <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                            <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                              <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                  <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                    <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                      <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                        <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                          <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                            <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                              <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                                <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                                  <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                                    <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                                      <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span> <span class=\"bp\">×</span>\n                                                                                        <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">×</span>\n      <span class=\"n\">AddMonoid.End</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 363929286,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686041235
    },
    {
        "content": "<p>Yeah I've seen something like this before, but this was before <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a> . How did it happen? User error or is it the typeclass system going wrong?</p>",
        "id": 363931676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686041870
    },
    {
        "content": "<p>This is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">refine'</span>\n        <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span>\n          <span class=\"o\">⟨(((</span><span class=\"bp\">@</span><span class=\"n\">lequivProdOfRightSplitExact</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n                            <span class=\"o\">((</span><span class=\"n\">f.trans</span> <span class=\"n\">ULift.moduleEquiv.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap.comp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkQ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n                            <span class=\"o\">((</span><span class=\"n\">DirectSum.toModule</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n                                  <span class=\"o\">(</span><span class=\"n\">liftQSpanSingleton.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                                      <span class=\"o\">(</span><span class=\"n\">LinearMap.toSpanSingleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec.left</span> <span class=\"o\">:</span>\n                                    <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">_</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n                              <span class=\"n\">ULift.moduleEquiv.toLinearMap</span><span class=\"o\">)</span>\n                            <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">∙</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective_subtype</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">&lt;|</span>\n                      <span class=\"o\">((</span><span class=\"n\">quotTorsionOfEquivSpanSingleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">&lt;|</span>\n                            <span class=\"n\">quotEquivOfEqBot</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span>\n                              <span class=\"n\">Ideal.torsionOf_eq_span_pow_pOrder</span> <span class=\"n\">hp</span> <span class=\"n\">hN</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">&lt;|</span>\n                        <span class=\"n\">ULift.moduleEquiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DirectSum.lequivProdDirectSum</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n                      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">R</span> <span class=\"bp\">∙</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"bp\">@</span><span class=\"n\">Option.rec</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pOrder</span> <span class=\"n\">hN</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n                      <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span>\n              <span class=\"n\">DirectSum.lequivCongrLeft</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">finSuccEquiv</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 363932138,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686041995
    },
    {
        "content": "<p>Your guess is as good as mine (probably better)</p>",
        "id": 363932216,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686042007
    },
    {
        "content": "<p>All those <code>trans</code> and <code>comp</code>s make me think that <code>calc</code> mode could be useful, however I failed to get it working with linear isos before and I'm not sure there's an easy fix :-/</p>",
        "id": 363932887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686042162
    },
    {
        "content": "<p>In any case, I'm stepping away from this file for a while, in case someone wants to look into it</p>",
        "id": 363936843,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686043202
    },
    {
        "content": "<p>also reminds me of:<br>\n<a href=\"/user_uploads/3121/X-Robf3yjWkY5c7V3iF_aV6R/the-end.jpg\">the-end.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/X-Robf3yjWkY5c7V3iF_aV6R/the-end.jpg\" title=\"the-end.jpg\"><img src=\"/user_uploads/3121/X-Robf3yjWkY5c7V3iF_aV6R/the-end.jpg\"></a></div>",
        "id": 363955292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686047749
    }
]