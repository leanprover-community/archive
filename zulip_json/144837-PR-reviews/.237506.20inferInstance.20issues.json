[
    {
        "content": "<p>In the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7506\">#7506</a> (with <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>), we introduce a new typeclass <code>QuotientVolumeEqVolumePreimage</code>. In the refactored \"MeasureTheory/Integral/Periodic.lean\" file, we are running into some unexpected trouble with inferring instances with this new typeclass -- maybe somebody can spot why this is happening? Thanks for your help!</p>",
        "id": 394863651,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1696432571
    },
    {
        "content": "<p>You have a weird <code>set_option linter.unusedVariables false in</code> on Line 865 of your file. What happens if you remove it, and if you remove the useless classes from the definition?</p>",
        "id": 394864502,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696432837
    },
    {
        "content": "<p>Linter breaks - it complains that we ask for <code>(meas_U : MeasurableSet U)</code> but never use it...?</p>",
        "id": 394871699,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1696435141
    },
    {
        "content": "<p>This looks like a linter bug, right?</p>",
        "id": 394874100,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696435887
    },
    {
        "content": "<p>You should be able to fix the error by writing <code>(_ : MeasurableSet U)</code>, but I agree that the linter should ideally not complain in that case.</p>",
        "id": 394874614,
        "sender_full_name": "R√©my Degenne",
        "timestamp": 1696436068
    },
    {
        "content": "<p>Ok thanks; I've made the change to <code>(_:</code> and now lint isn't complaining, so I was able to remove <code>set_option</code>. But that didn't fix the issue I'd asked about: In the MeasureTheory/Integral/Periodic file, on line 105, if I replace <code>(isAddLeftInv T)</code> with <code>_</code>, it fails to synthesize instance. But just above on line 101, it's able to prove the missing fact with <code>inferInstance</code>. Bizarre, no?</p>",
        "id": 394954700,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1696476086
    },
    {
        "content": "<p>Without looking at the example, could this be <a href=\"https://github.com/leanprover/lean4/pull/2522\">lean4#2522</a> ?</p>",
        "id": 394974811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696488260
    },
    {
        "content": "<p>I'm not surprised there are issues with this instance: the <code>AddQuotientVolumeEqVolumePreimage</code> predicate says something about a measure <code>Œº : Measure (Quotient Œ±_mod_G)</code>. But on Line 105 you are applying it to <code>volume : Measure (AddCircle T)</code>, and <code>AddCircle T</code> is not a type of the form <code>Quotient Œ±_mod_G</code> (it is equal to such a type, sure, but not reducibly so). This means that you are abusing defeq even when stating your lemma. It doesn't mean things won't work (sometimes they do), but you shouldn't be surprised when they don't.</p>",
        "id": 394994440,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696496309
    },
    {
        "content": "<p>I see, so the <code>inferInstance</code> on line 101 is doing more work somehow, which is why it's not finding it automatically on line 105. I guess we could refactor <code>AddQuotientVolumeEqVolumePreimage</code> to take a measure <code>Œº : Measure (Œ± / G)</code> instead of <code>Œº : Measure (Quotient Œ±_mod_G)</code>; since <code>AddCircle</code> is defined as <code>ùïú ‚ß∏ zmultiples p</code>, that should work better? So basically <code>Quotient Œ±_mod_G</code> and <code>Œ± / G</code> and not defeq...?</p>",
        "id": 395032149,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1696508896
    },
    {
        "content": "<p><code>AddCircle</code> is defined as <code>ùïú ‚ß∏ zmultiples p</code>, but they are not the same thing. So no, it wouldn't make a difference, unless you let <code>AddCircle</code> be reducible.</p>",
        "id": 395032299,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696508970
    },
    {
        "content": "<p>Ah ok, thanks. So just leave it as is then?</p>",
        "id": 395032363,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1696508990
    },
    {
        "content": "<p>Either leave it like that and live with it. Or refactor things to work for any quotient-like stuff, i.e., with two groups <code>G, H</code>, a morphism <code>f</code> from <code>G</code> to <code>H</code> and the fact that this map is a quotient map. But this means that, if you're just given <code>H</code>, you can not let Lean guess <code>f</code> and <code>G</code> out of the blue, so you often need to be more explicit.</p>",
        "id": 395032866,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696509151
    },
    {
        "content": "<p>I see, thanks. I suppose I'd rather live with it as is then... <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>?</p>",
        "id": 395033112,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1696509243
    },
    {
        "content": "<p>Note that the more general approach is probably better in the long run (but maybe not for your particular use case). For instance, consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>S</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PSL(2,\\mathbb{R})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">PS</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> acting naturally on the hyperbolic plane. Then one might want to say that this action sends the Haar measure in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>S</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PSL(2, \\mathbb{R})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">PS</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> to Lebesgue measure on the hyperbolic plane, while the hyperbolic plane is not <em>defined</em> as the quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>S</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">PSL(2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">PS</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>O</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SO(2, \\mathbb{R})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">SO</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> (they just turn out to be canonically the same thing, but not definitionally).</p>",
        "id": 395036012,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696510167
    },
    {
        "content": "<p>Indeed this is exactly the kind of example we want to apply this to. Except that I guess the generality I had in mind is a discrete subgroup <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Œì</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Œì</span></span></span></span> of a Lie group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>, in which case I want to have Haar measure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Œì</mi><mi mathvariant=\"normal\">\\</mi><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma \\backslash G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Œì\\</span><span class=\"mord mathnormal\">G</span></span></span></span> be compatible with that on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>. It would also be good to look at the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> (=maximal compact)-invariant double cosets, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Œì</mi><mi mathvariant=\"normal\">\\</mi><mi>G</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma\\backslash G / K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Œì\\</span><span class=\"mord mathnormal\">G</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, which of course gets to the hyperbolic plane (but, as you say, not defeq). So maybe indeed we want to allow the more general action as you suggested; a refactor now will be less painful than later...(?)</p>",
        "id": 395147166,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1696556410
    },
    {
        "content": "<p>We (with <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>) think we've gotten to the bottom of these issues. There was a <code>derive</code> statement removed from <code>AddCircle</code> during the port, which caused a number of <code>inferInstance</code>s to fail. Changing <code>def</code> to <code>abbrev</code> seems to fix everything. Please see <a href=\"https://github.com/leanprover-community/mathlib4/pull/7700\">#7700</a></p>",
        "id": 396755177,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1697377281
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/leanprover-community/mathlib4/pull/7700\">#7700</a> has been merged, there are no more <code>inferInstance</code> issues, and we think this PR is ready to go. Thanks!</p>",
        "id": 397775867,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1697835767
    }
]