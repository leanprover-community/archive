[
    {
        "content": "<p>I would really like to get <code>exact?</code>/ <code>solve_by_elim</code> / <code>backtracking</code> cleaned up so we can move them to <code>Std</code>, to make them available outside of Mathlib.</p>",
        "id": 388910632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693805563
    },
    {
        "content": "<p>At this point, these have become a bit crufty from supporting incrementally added features (caching, filling in usable hypotheses even if the goal can't be closed, supporting <code>apply_rules</code>).</p>",
        "id": 388910638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693805567
    },
    {
        "content": "<p>As a first step, I want to refactor <code>backtracking</code> so that rather than using a <code>MetaM (List (MetaM (List MVarId)))</code> to keep track of possible solutions for a goal, it uses a <code>Nondet MetaM (List MVarId)</code>, so that the keeping-track-of-backtrackable-state is the responsibility of the <code>Nondet</code> API, rather than <code>backtracking</code> itself.</p>",
        "id": 388910641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693805571
    },
    {
        "content": "<p>Here <code>Nondet m α</code> is <code>MLList m (σ × α)</code>, where we have <code>[MonadBacktrack σ m]</code>. However after setting up the API on <code>Nondet</code> we make it irreducible, so that <code>MLList</code> api which doesn't handle the backtrackable state correctly can't leak through.</p>",
        "id": 388910643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693805572
    },
    {
        "content": "<p>So --- if someone could review this, that would be much appreciated, so I can next refactor the crufty configuration options for <code>backtracking</code>, turning them into functions that modify a non-deterministic tactic <code>MVarId \\to Nondet MetaM (List MVarId)</code>.</p>\n<p>(Or in some cases <code>MVarId \\to Nondet MetaM (List MVarId \\times List MVarId)</code>, where the two lists represent \"active\" goals that still need to be solved, and \"suspended\" goals which should be returned to the user.)</p>",
        "id": 388910866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693805668
    },
    {
        "content": "<p>I would like to clean up <code>solve_by_elim</code> and <code>exact?</code>, as I really want these to be ready to upstream to Std, so they can be used outside of Mathlib.</p>\n<p>Currently <code>solve_by_elim</code> is too crufty, from supporting extra features for <code>apply_rules</code> and <code>exact?</code>. I would like to simplify its API, reducing the surface area of its configuration hooks for modifying goals along the way.</p>\n<p>My proposed first step is <a href=\"https://github.com/leanprover-community/mathlib4/pull/3464\">#3464</a>, which changes from relying on <code>MetaM (List (MetaM X))</code> as an ad-hoc way of handling backtracking, to a <code>Nondet</code> monad built on top of <code>MLList</code> with bundled backtrackable state.</p>\n<p>I'm worried this might sit around for a while without review, but I'd really like to be able to continue on to <code>solve_by_elim</code> refactoring.</p>\n<p>Perhaps <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, who've expressed some interest in this topic before, could have a look? Or a kindly maintainer could just say \"<code>solve_by_elim</code> is Scott's problem, let's merge and let them sort out the mess\". :-)</p>",
        "id": 389600912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694075436
    },
    {
        "content": "<p>If no-one has reacted on this PR in three days, can you ping again, and I'll play the kind maintainer.</p>",
        "id": 389606008,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694077028
    },
    {
        "content": "<p>I left some mild style comments, but I expect Kyle could give a much more useful review</p>",
        "id": 389610235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694078349
    }
]