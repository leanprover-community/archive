[
    {
        "content": "<p>We have a handful of theorem statement that are still about the non-heterogenous operators, which means they almost never match with simp or rw. <a href=\"https://github.com/leanprover-community/mathlib4/pull/8086\">#8086</a> removes as many of these as I could find.</p>\n<p>Almost all of these arise in places where defeq abuse means that we can't write <code>a1 + a2</code>, as addition is only defined on <code>def B := A</code> and we have no casting function. Instead, we previously wrote <code>@Add.add B _ a1 a2</code>.</p>\n<p>This PR notes that you can write <code>(by exact a1 : B) + (by exact a2 : B)</code>, and the <code>+</code> is elaborated correctly, and adjusts to use this hack instead</p>",
        "id": 402473650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700142496
    },
    {
        "content": "<p>(pinging here since it's been stale for a couple weeks)</p>",
        "id": 402473850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700142567
    },
    {
        "content": "<p>There's some more in the <code>Algebra.Group.Ext</code> file. Maybe you could change those too?</p>",
        "id": 402479356,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1700144050
    },
    {
        "content": "<p>Those ones are awkward to write with hMul (it becomes <code>@HMul.hMul _ _ _ (@instHMul _ h1.toMul) = @HMul.hMul _ _ _ (@instHMul _ h2.toMul)</code> instead of <code>h1.mul = h2.mul</code>), so I'd prefer to declare that out of scope</p>",
        "id": 402480585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700144421
    },
    {
        "content": "<p>Ah, I suppose I could use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">m₁</span><span class=\"bp\">;</span> <span class=\"n\">HMul.hMul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">m₂</span><span class=\"bp\">;</span> <span class=\"n\">HMul.hMul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 402481328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700144631
    },
    {
        "content": "<p>Done</p>",
        "id": 402482211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700144868
    }
]