[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I'm interested in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5942\">#5942</a>. What is the motivation for supporting decidable equality on polynomials?</p>",
        "id": 381225072,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690994329
    },
    {
        "content": "<p>I'll split out some of the cleanup I did to another standalone PR to make the effects clearer</p>",
        "id": 381226593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690994640
    },
    {
        "content": "<p>It does seem a bit useless in light of the fact that you can't computably add polynomials (I don't think so anyway).</p>",
        "id": 381226883,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690994695
    },
    {
        "content": "<p>One reason that it's a good idea is that <code>EuclideanDomain.gcd</code> is unusable without the instance</p>",
        "id": 381227781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690994840
    },
    {
        "content": "<p>(which is to say, if you want to use it you're forced to <code>open scoped Classical</code> which arms you with a footgun)</p>",
        "id": 381227971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690994881
    },
    {
        "content": "<p>It is not a terrible refactor to make algebra operations computable but, as Kyle predicted and my experiments bore out, the current setup is going to be too slow to do anything of computational value.</p>",
        "id": 381228105,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690994900
    },
    {
        "content": "<p>One variable is perhaps the exception though</p>",
        "id": 381228187,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690994919
    },
    {
        "content": "<p>This PR demonstrates one other advantage of making things computable; often they also become kernel-reducible and more things are true by <code>rfl</code></p>",
        "id": 381229531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690995159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235942.20Add.20a.20DecidableEq.20instance.20for.20Polynomial/near/381226593\">said</a>:</p>\n<blockquote>\n<p>I'll split out some of the cleanup I did to another standalone PR to make the effects clearer</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6314\">#6314</a></p>",
        "id": 381229574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690995167
    },
    {
        "content": "<p>When <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> and I were in Leiden, for the <em>Machine-Checked Mathematics</em> conference , we wanted  to implement Sturm sequences and needed to test whether the remainder is zero.</p>",
        "id": 381237315,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690996300
    },
    {
        "content": "<p>But isn't the remainder noncomputable?</p>",
        "id": 381238154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690996451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> Interesting! When you say \"implement\", do you mean that you really wanted to be able to compute the sequence using Lean + Mathlib's polynomials?</p>\n<p>(As opposed to defining the sequence non-computably and then proving various things about it.)</p>",
        "id": 381240333,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690996859
    },
    {
        "content": "<p>Yes it's still non computable. I'd say the current PR is merely a prerequisite for trying to make them computable again.</p>",
        "id": 381240370,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1690996867
    },
    {
        "content": "<p>Let's suppose we had computable polynomials, and furthermore with relatively efficient performance characteristics, do you have an application in mind?</p>",
        "id": 381240877,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690996976
    },
    {
        "content": "<p>Yes originally we wanted to do <code>#eval Sturm p q</code> with concrete univariate polynomials before we realised that polynomial equality was decidable using an axiom and then that the operations were marked noncomputable anyway.</p>",
        "id": 381240947,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1690996987
    },
    {
        "content": "<p>I'm not opposed to computable polynomials, I just think that decidable equality is a strange place to start compared to computable addition!</p>",
        "id": 381241109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997023
    },
    {
        "content": "<p>An application is to compute the number of roots of a polynomials on an interval.</p>",
        "id": 381241112,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1690997025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235942.20Add.20a.20DecidableEq.20instance.20for.20Polynomial/near/381241109\">said</a>:</p>\n<blockquote>\n<p>I'm not opposed to computable polynomials, I just think that decidable equality is a strange place to start compared to computable addition!</p>\n</blockquote>\n<p>Well to me it's on the exact same level since the computation of Sturm sequence has a zero test.</p>",
        "id": 381241496,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1690997099
    },
    {
        "content": "<p>Right now polynomials are so noncomputable that even <code>(0 : Polynomial ℤ)</code>, <code>(1 : Polynomial ℤ)</code>, and <code>(Polynomial.X : Polynomial ℤ)</code> can't be computed!</p>",
        "id": 381241497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997099
    },
    {
        "content": "<p>I'm interested in Cyril's application though. <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> is it the case that you envisage using Mathlib to verify some computational mathematics problem(s)?</p>",
        "id": 381241956,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690997201
    },
    {
        "content": "<p>I'd love to see that happen but I've always imagined the way we'd achieve that would be to write efficient, computable implementations of whatever structure we need (e.g., polynomials) and then prove that they behave the same as whatever crazy definitions Mathlib uses for ease of proving theorems. Till now this has all been theoretical, but maybe that's changing now?</p>",
        "id": 381242559,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690997322
    },
    {
        "content": "<p>I think there's some value to <code>Polynomial</code> being computable even if it is inefficient. <code>Nat</code> is computable and inefficient, and then we've told lean how to make them fast at runtime</p>",
        "id": 381243037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997409
    },
    {
        "content": "<p>I'm certainly in favour unless it makes proving theorems harder.</p>",
        "id": 381243157,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690997437
    },
    {
        "content": "<p>I think even getting the signatures to match up to use a <code>csimp</code> might yield some benefit</p>",
        "id": 381243251,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690997459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, the big problem is that different representations have different signatures</p>",
        "id": 381243389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997495
    },
    {
        "content": "<p>Sure. I am saying for current one</p>",
        "id": 381243451,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690997510
    },
    {
        "content": "<p>I am not saying it will be world-beating but it may let people push a bit further</p>",
        "id": 381243618,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690997541
    },
    {
        "content": "<p>The two easy choices are:</p>\n<ul>\n<li>Use the current one, add <code>DecidableEq R</code> on <code>Add</code> and all sort of other arithmetic (this is an annoying interface downstream)</li>\n<li>Use the <code>DFinsupp</code> representation, add <code>DecidableEq R</code> only on <code>.support</code> (this is innefficient, as the support grows with every operation)</li>\n</ul>",
        "id": 381243897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997603
    },
    {
        "content": "<p>I took the first one and it wasn't much work to get things working. I did it outside out mathlib so I don't know the full extent of breakage. I imagine it would be less work.</p>",
        "id": 381244465,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690997724
    },
    {
        "content": "<p>I started doing it in mathlib3 (<a href=\"https://github.com/leanprover-community/mathlib/pull/18274\">!3#18274</a>) and it was awful</p>",
        "id": 381244992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997841
    },
    {
        "content": "<p>It's also a lot more work to pick one then change our mind than it is to pick the right choice at the start</p>",
        "id": 381245236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997893
    },
    {
        "content": "<p>You probably know better</p>",
        "id": 381246221,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690998126
    },
    {
        "content": "<p>I would like to be clearer on what problem we're trying to solve here. For me, having computable polynomials is not a clear goal but, say, being able to verify some interesting computational mathematics problem definitely is.</p>",
        "id": 381248021,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690998553
    },
    {
        "content": "<p>I don't really understand why it's worth making polynomials themselves computable, especially since they're not a good data structure for computation. Things don't have to be true by <code>rfl</code>, we just need <code>norm_num</code>-like evaluators that can compute these things. (I know, it's also \"just\" a lot of work to implement these things as well <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>\n<p>Sprinking <code>Decidable</code> instances everywhere also slows down elaboration of the library while also making users need to deal with non-canonical classical instances.</p>",
        "id": 381248609,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690998679
    },
    {
        "content": "<p>If we wanted to compute with polynomials in a <code>norm_num</code>-like way, it could look like this:</p>\n<ol>\n<li>there's something you want to provably compute</li>\n<li>you turn the expressions into some nice representation (for argument's sake, string representations you can send to Sage)</li>\n<li>you do computations with this representation (i.e., have Sage compute things) and you also compute some polynomials that will serve as a certificate of correctness (for example, some polynomial <code>c</code> such that <code>a * c = b</code>) </li>\n<li>you turn these results back into Lean expressions, apply a lemma putting them together, and use <code>ring</code>/<code>norm_num</code> to evaluate sums and products of polynomials to check equations for the certificates</li>\n<li>now you've proved your computation</li>\n</ol>\n<p>You don't need mathlib polynomials to be computable, and you don't even need any correspondence between mathlib polynomials and the polynomials you do the computations with. You do need some way to restate your problem so that there are some certificate polynomials and <code>ring</code>/<code>norm_num</code>-checkable conditions.</p>",
        "id": 381257014,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1691000520
    },
    {
        "content": "<p>(You could probably also use other strategies, like for <code>Int</code>/<code>Nat</code> polynomials evaluate them at carefully chosen values and use kernel reduction to infer things about them, at least for constructing small proof terms. The kernel knows about basic <code>Nat</code> arithmetic.)</p>",
        "id": 381259452,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1691001033
    },
    {
        "content": "<p>When Cyril and I typed a few codelines, the first ‘ite‘ popped up a missing DecidableEq   instance for Polynomial,  while it existed for MvPolynomial.<br>\nGiven the recommendation not to 'open Classical', we had to introduce it.</p>",
        "id": 381284919,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691007232
    },
    {
        "content": "<p>I think probably the instance should exist for that reason; even just as a global non-computable instance (like we have on the reals already)</p>",
        "id": 381289388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691008508
    },
    {
        "content": "<p>But given you've already done the computable version I'm coming around to merging it.</p>",
        "id": 381289466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691008540
    },
    {
        "content": "<p>This issue has popped up over-and-over again. Personally, I'm not opposed to changing the setup again. But since it has changed from computable to non-computable in the past, I think I would like to see some sort of RFC document that explains why the change was made back then, what has changed in the mean time, what are options are now, and why we should merge this PR.<br>\nI know this is extra work, but since this topic is coming up regularly, I think it is good to have a document that lays out the pros and cons. Otherwise we'll be having this discussion every few months.</p>",
        "id": 381389414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691049858
    },
    {
        "content": "<p>That being said, I'm intuitively leaning strongly towards the path outlined by Kyle.</p>",
        "id": 381389507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691049876
    },
    {
        "content": "<p>If the computable <code>DecidableEq</code> instance is really contentious here (because it adds 14 <code>[DecidableEq R]</code> to downstream lemmas), then I think we should at least add a <code>noncomputable</code> one (which doesn't) to deal with the pain point Antoine ran into.</p>",
        "id": 381403481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691052856
    },
    {
        "content": "<p>On the other hand, 14 is hardly lots, and this matches what we already do for <code>MvPolynomial</code>; so I don't think <a href=\"https://github.com/leanprover-community/mathlib4/pull/5942\">#5942</a> really needs to be blocked by such a design document.</p>",
        "id": 381404215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691053003
    },
    {
        "content": "<p>I like Kyle’s other proposal of a more computationally minded implementation to complement the existing one. I think that will also release the pressure here. Plus you can do everything in Lean!</p>",
        "id": 381429791,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691058197
    },
    {
        "content": "<p>I like the idea of deferring complicated computation to specialized software but I am not at ease with the fact that things are absolutely noncomputable by necessity.</p>",
        "id": 381444726,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691061605
    },
    {
        "content": "<p>I think our approach is inconsistent here. You could make the same arguments about replacing <code>Finset</code> with <code>Set.Finite</code>, and then having a more efficient computation model in tactic land; but I think various people would be strongly opposed to eliminating computable <code>Finset</code>s (myself included)</p>",
        "id": 381445311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691061725
    },
    {
        "content": "<p>I started a summary document at <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Computation-models-for-polynomials-and-finitely-supported-functions\">https://github.com/leanprover-community/mathlib4/wiki/Computation-models-for-polynomials-and-finitely-supported-functions</a></p>",
        "id": 381450385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691062840
    },
    {
        "content": "<p>Does anybody remember why we changed polynomials to be noncomputable in 2019 or whenever it was?</p>",
        "id": 381452765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691063310
    },
    {
        "content": "<p>I found the original PR and zulip thread and added it to the document</p>",
        "id": 381454350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691063671
    },
    {
        "content": "<p>This is the best I can find for the explanation:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20when.20working.20with.20ideal.20of.20polynomial.20ring/near/173244290\">said</a>:</p>\n<blockquote>\n<p>Hi Casper, if you're working on polynomials, and struggling with timeouts, you might be interested in completing the work I started on the <a href=\"https://github.com/leanprover-community/mathlib/tree/decidable_eq/src\"><code>decidable_eq</code></a> branch, stripping out all the decidability conditions from polynomials and multivariable polynomials.</p>\n</blockquote>\n<p>(there was no previous mention of the timeouts being due to <code>decidable_eq</code>)</p>",
        "id": 381454633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691063733
    },
    {
        "content": "<p>I found another relevant Zulip thread (and added it to the GitHub page): <a href=\"#narrow/stream/116395-maths/topic/nonconstructive.20polynomials\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/nonconstructive.20polynomials</a></p>",
        "id": 381454985,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1691063797
    },
    {
        "content": "<p>Wasn't there a proposal (don't recall, and can't find on Zulip, by who) to define polynomials as lists of coefficients quotiented by ignoring initial zeros? Most operations would be computable again, except for equality (for which I find it totally appropriate to require <code>[DecidableEq R]</code>)</p>",
        "id": 381456303,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1691064053
    },
    {
        "content": "<p>Ideally we want it to work for MvPolynomial too though; I've added a column with what I remember of that design</p>",
        "id": 381456456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691064088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235942.20Add.20a.20DecidableEq.20instance.20for.20Polynomial/near/381456303\">said</a>:</p>\n<blockquote>\n<p>Most operations would be computable again, except for equality (for which I find it totally appropriate to require <code>[DecidableEq R]</code>)</p>\n</blockquote>\n<p>It must be, right? If we have <code>DecidableEq R[X]</code>and <code>Polynomial.C</code> is computable, then we can get <code>DecidableEq R</code> by deciding <code>C a = C b</code>.</p>",
        "id": 381483556,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691069338
    },
    {
        "content": "<p>Going in the other direction, I have a branch on mathlib3 of constructing polynomials from lists of coefficients. Which aren't amazing computational structures, but can help bridge the proof gap between some FancyStructure.toPoly = FancyStructure.toList.toPoly</p>",
        "id": 381492073,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1691070741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235942.20Add.20a.20DecidableEq.20instance.20for.20Polynomial/near/381242559\">said</a>:</p>\n<blockquote>\n<p>I'd love to see that happen but I've always imagined the way we'd achieve that would be to write efficient, computable implementations of whatever structure we need (e.g., polynomials) and then prove that they behave the same as whatever crazy definitions Mathlib uses for ease of proving theorems. Till now this has all been theoretical, but maybe that's changing now?</p>\n</blockquote>\n<p>Well, that's the approach I've been advocating <a href=\"https://inria.hal.science/hal-01113453\">for a while in Coq</a> so I can't disagree with that. However the setup is nontrivial and I'm still working on it these days. Meanwhile if we can turn polynomials into a computable structure this would be at least nice for some light testing before proving an algorithm is correct. Moreover this approach has more chances to succeed in Lean than Coq, since in Coq we must bock reduction in heavier way to prevent unification and kernel from unfolding to much, whereas I believe in Lean the unification and kernel are less eager for expanding constants (am I right?)... although that could have been the reason for marking polynomials as noncomputable.</p>",
        "id": 381718781,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1691135782
    },
    {
        "content": "<p>Some proposed implementations by myself and other discussions (including on Twitter) that may be worth adding to the wiki:<br>\n<a href=\"#narrow/stream/116395-maths/topic/Lagrange.20interpolants/near/287806674\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Lagrange.20interpolants/near/287806674</a><br>\n<a href=\"#narrow/stream/116395-maths/topic/Lagrange.20interpolants/near/287792680\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Lagrange.20interpolants/near/287792680</a></p>",
        "id": 382445830,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1691359084
    },
    {
        "content": "<p>Feel free to edit the wiki page yourself to add that information</p>",
        "id": 382446712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691359575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235942.20Add.20a.20DecidableEq.20instance.20for.20Polynomial/near/381403481\">said</a>:</p>\n<blockquote>\n<p>If the computable <code>DecidableEq</code> instance is really contentious here (because it adds 14 <code>[DecidableEq R]</code> to downstream lemmas), then I think we should at least add a <code>noncomputable</code> one (which doesn't) to deal with the pain point Antoine ran into.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235942.20Add.20a.20DecidableEq.20instance.20for.20Polynomial/near/381404215\">said</a>:</p>\n<blockquote>\n<p>On the other hand, 14 is hardly lots, and this matches what we already do for <code>MvPolynomial</code>; so I don't think <a href=\"https://github.com/leanprover-community/mathlib4/pull/5942\">#5942</a> really needs to be blocked by such a design document.</p>\n</blockquote>\n<p>Is anyone opposed to me merging the titular PR based on these messages? it solves a concrete painpoint, and the fallout (aside from forcing us to have this discussion again) is pretty small? I'll merge in 48 hours if no one expresses any opinions.</p>",
        "id": 382448496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691360905
    },
    {
        "content": "<p>I'm as maximally anti-computability as they come but I think that having decidable equality hypotheses in theorems is a great idea; ultimately it solves problems related to computability rather than causing them.</p>",
        "id": 382450950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691362948
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4942\">#4942</a> is slightly more subtle than that; the change I think you're suggesting would amount to adding <code>[DecidableEq (Polynomial R)]</code> to the theorems (which would indeed still probably make the theorems easier not harder to use). What we do instead here is say \"hey, that's obvious from <code>[DecidableEq R]</code>, so lets add that (and the implementation of 'obvious') instead\".</p>",
        "id": 382451773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691363668
    }
]