[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3320\">!4#3320</a> was created because of one of Eric's comments on <a href=\"https://github.com/leanprover-community/mathlib4/pull/2450\">!4#2450</a>. I'd like a quick review so we can merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/2450\">!4#2450</a> sooner</p>",
        "id": 347564770,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680841004
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cast_succ_cast_lt\">docs#fin.cast_succ_cast_lt</a></p>",
        "id": 347565500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680841644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> in mathlib4 (currently):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">castSucc_cast_lt</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">castSucc</span> <span class=\"o\">(</span><span class=\"n\">castLt</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fin.eq_of_veq</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">fin.cast_succ_cast_lt</span> <span class=\"n\">Fin.castSucc_cast_lt</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_lt_castSucc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">castLt</span> <span class=\"o\">(</span><span class=\"n\">castSucc</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">fin.cast_lt_cast_succ</span> <span class=\"n\">Fin.cast_lt_castSucc</span>\n</code></pre></div>",
        "id": 347565900,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680842000
    },
    {
        "content": "<p><code>castLt</code> is in the declaration, so <code>castLt</code> should be in the name too</p>",
        "id": 347565931,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680842042
    },
    {
        "content": "<p>Weekly reminder that I still have no understanding of the new naming convention</p>",
        "id": 347567371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680843087
    },
    {
        "content": "<p>I thought \"proof =&gt; mathlib3 style <code>blah_blah_blah</code>\"</p>",
        "id": 347567428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680843117
    },
    {
        "content": "<p>I think it would be <code>castSucc_castLt</code> with that name</p>",
        "id": 347567498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680843137
    },
    {
        "content": "<p>That's what the PR does</p>",
        "id": 347567566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680843166
    },
    {
        "content": "<p>although I think we're spelling it <code>castLT</code> and <code>castLt</code> is a mathportism</p>",
        "id": 347567570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680843174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!4.233320/near/347567371\">said</a>:</p>\n<blockquote>\n<p>Weekly reminder that I still have no understanding of the new naming convention</p>\n</blockquote>",
        "id": 347567588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680843187
    },
    {
        "content": "<p>So should it be <code>castLT</code> everywhere?</p>",
        "id": 347567595,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680843197
    },
    {
        "content": "<p>yeah</p>",
        "id": 347567601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680843202
    },
    {
        "content": "<p>Is there anyone out there who can make a simple mathlib4 naming convention game? I'm serious.</p>",
        "id": 347567710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680843256
    },
    {
        "content": "<p><code>Mathlib.namingConvention_game</code></p>",
        "id": 347567935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680843369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> commit pushed</p>",
        "id": 347568487,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680843650
    }
]