[
    {
        "content": "<p>Most of the remaining errors deal with <code>Module.rank</code> and using it to definitionally simplify (as in <code>dsimp [Module.rank]</code>)</p>",
        "id": 348127995,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681099154
    },
    {
        "content": "<p>In the very first theorem <code>lift_dim_le_of_injective</code>, after <code>dsimp [Module.rank]</code> the goal state in Lean 3 is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"n\">coe</span><span class=\"o\">}),</span> <span class=\"bp\">#↥↑</span><span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">≤</span>\n    <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"n\">coe</span><span class=\"o\">}),</span> <span class=\"bp\">#↥↑</span><span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n</code></pre></div>\n<p>but in Lean 4 it is the very strange</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">Wrapper.value</span><span class=\"bp\">✝</span> <span class=\"n\">wrapped</span><span class=\"bp\">✝</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">Wrapper.value</span><span class=\"bp\">✝</span> <span class=\"n\">wrapped</span><span class=\"bp\">✝</span> <span class=\"n\">R</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It may have something to do with the use of the up-arrow to replace the <code>coe</code> in Lean 3. Is there something wrong with the up-arrow replacement I've made in the Lean 4 definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"n\">irreducible_def</span> <span class=\"n\">Module.rank</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⨆</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">K</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">},</span> <span class=\"bp\">#</span><span class=\"n\">ι.1</span>\n</code></pre></div>",
        "id": 348128376,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681099283
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.214.233247\">#PR reviews &gt; !4#3247</a> by <span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span>.</p>",
        "id": 348132800,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681101839
    },
    {
        "content": "<p>…right, <span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Kô Miyahara</span> got there first while I was opening a sync PR</p>",
        "id": 348136326,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681103279
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib4/pull/3354\">!4#3354</a>)</p>",
        "id": 348151739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681111440
    },
    {
        "content": "<p>Merged again!</p>",
        "id": 348152182,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681111618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, for future reference it's best to restart with new mathport output (re-run start_port and rebase your changes onto the resulting commit) if you realize you started with the wrong mathport output</p>",
        "id": 348152549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681111741
    }
]