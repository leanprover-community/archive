[
    {
        "content": "<p>The run after removing <code>Sort _</code> looks better. <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/e6b96815-0e6d-44ba-a2c9-fa8cab7b77a9/to/0664d4dd-918a-41cd-a153-575941d17dbe\">Results</a> </p>\n<p>Comparison to previous one: <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/e6b96815-0e6d-44ba-a2c9-fa8cab7b77a9/to/81fc24a3-26f0-48a3-85d2-9df983c24ca8\">Results</a> for only <code>Type*</code></p>",
        "id": 383066129,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691524873
    },
    {
        "content": "<p>Improvement in wall clock is almost double. 1.4% vs 2.7%</p>",
        "id": 383066280,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691524919
    },
    {
        "content": "<p>This gets stale pretty quickly so please let me know if there anything I can do to make reviewing easier</p>",
        "id": 383283661,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691587689
    },
    {
        "content": "<p>already stale right now :/</p>",
        "id": 383285683,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691588013
    },
    {
        "content": "<p>Does this include the manual addition of universe variables in the place where <code>Type*</code> didn't work?</p>",
        "id": 383292420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691589139
    },
    {
        "content": "<p>Yes</p>",
        "id": 383292496,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691589152
    },
    {
        "content": "<p>And <code>Sort*</code></p>",
        "id": 383292553,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691589163
    },
    {
        "content": "<p>I think it would be not to, and leave those as <code>Type _</code> and <code>Sort _</code></p>",
        "id": 383292618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691589176
    },
    {
        "content": "<p>No one is going to review them properly in a 11k line PR, but we can look at them more closely in a follow-up</p>",
        "id": 383292825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691589208
    },
    {
        "content": "<p>The ideal time to fix them is in the same PR as introducing a linter</p>",
        "id": 383292870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691589217
    },
    {
        "content": "<p>That sounds reasonable. All those changes are in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6370/commits/79c6822ea3212327879a400429d19b794362d3aa\">this commit</a></p>",
        "id": 383294429,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691589488
    },
    {
        "content": "<p>At least for <code>Type*</code></p>",
        "id": 383294908,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691589579
    },
    {
        "content": "<p>Could you split out a short meta PR that just adds the new elaborator and a test file in <code>test/</code>?</p>",
        "id": 383295326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691589648
    },
    {
        "content": "<p>I think verifying that <code>\\forall x y : Type*, x = y</code> and <code>\\forall x : Sort*, x = Prop</code> fail to typecheck is probably a sufficient test.</p>",
        "id": 383295838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691589726
    },
    {
        "content": "<p>In the process. Is there any error catching in the test file?</p>",
        "id": 383296946,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691589913
    },
    {
        "content": "<p>I think you can do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eval</span> <span class=\"n\">success_if_fail</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabTerm</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 383300473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691590446
    },
    {
        "content": "<p><code>success_if_fail_with_msg</code> exists</p>",
        "id": 383300568,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691590466
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">success_if_fail_with_msg</span>\n<span class=\"s2\">\"type mismatch</span>\n<span class=\"s2\">  y</span>\n<span class=\"s2\">has type</span>\n<span class=\"s2\">  Type u_2 : Type (u_2 + 1)</span>\n<span class=\"s2\">but is expected to have type</span>\n<span class=\"s2\">  Type u_1 : Type (u_1 + 1)\"</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383300680,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691590487
    },
    {
        "content": "<p>That's  probably the one you want anyway</p>",
        "id": 383300775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691590500
    },
    {
        "content": "<p>The one without the message is <code>fail_if_success</code></p>",
        "id": 383300859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691590514
    },
    {
        "content": "<p>It would be good to test the case where the <code>Type*</code> and <code>x = y</code> are elaborate at the same time too, rather than one much later than the other.</p>",
        "id": 383301044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691590548
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SuccessIfFailWithMsg</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">success_if_fail_with_msg</span>\n<span class=\"s2\">\"type mismatch</span>\n<span class=\"s2\">  y</span>\n<span class=\"s2\">has type</span>\n<span class=\"s2\">  Type u_2 : Type (u_2 + 1)</span>\n<span class=\"s2\">but is expected to have type</span>\n<span class=\"s2\">  Type u_1 : Type (u_1 + 1)\"</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">success_if_fail_with_msg</span>\n<span class=\"s2\">\"type mismatch</span>\n<span class=\"s2\">  Prop</span>\n<span class=\"s2\">has type</span>\n<span class=\"s2\">  Type : Type 1</span>\n<span class=\"s2\">but is expected to have type</span>\n<span class=\"s2\">  Sort u_1 : Type u_1\"</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">success_if_fail_with_msg</span>\n<span class=\"s2\">\"type mismatch</span>\n<span class=\"s2\">  y</span>\n<span class=\"s2\">has type</span>\n<span class=\"s2\">  Type u_2 : Type (u_2 + 1)</span>\n<span class=\"s2\">but is expected to have type</span>\n<span class=\"s2\">  Type u_1 : Type (u_1 + 1)\"</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">success_if_fail_with_msg</span>\n<span class=\"s2\">\"type mismatch</span>\n<span class=\"s2\">  Prop</span>\n<span class=\"s2\">has type</span>\n<span class=\"s2\">  Type : Type 1</span>\n<span class=\"s2\">but is expected to have type</span>\n<span class=\"s2\">  Sort u_1 : Type u_1\"</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383302960,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691590834
    },
    {
        "content": "<p>Nice!</p>",
        "id": 383303210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691590874
    },
    {
        "content": "<p><code>success_if_fail_with_msg</code> seems to have some unexpected whitespace sensitivity (for another day)</p>",
        "id": 383303292,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691590888
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6474\">#6474</a></p>",
        "id": 383304170,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691591020
    },
    {
        "content": "<p>Tomorrow I will create the next PR which just switches all possible <code>Type/Sort _</code> to <code>Type/Sort*</code> and leaves it as is if it cannot be switched. That is the part that gets stale fast.</p>",
        "id": 383446590,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691629748
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6499\">#6499</a></p>",
        "id": 383716204,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691690330
    },
    {
        "content": "<p>Assuming this doesn't collide with other PRs, this will land soon. </p>\n<p>If anyone wants to use the commit history of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6370\">#6370</a> to delete a bunch of bumps, please do!</p>",
        "id": 383746292,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691697976
    },
    {
        "content": "<p>I would guess the way to proceed is to merge master into <a href=\"https://github.com/leanprover-community/mathlib4/pull/6370\">#6370</a> once it lands</p>",
        "id": 383746573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691698066
    },
    {
        "content": "<p>Annoyingly the Std bump went in just before your PR, so the cache needs to be rebuilt from scratch</p>",
        "id": 383746725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691698109
    },
    {
        "content": "<p>There also explicit universe levels plus <code>Sort</code> -&gt; <code>Type</code> in places</p>",
        "id": 383746793,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691698137
    },
    {
        "content": "<p>It is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6370/files/75c10e698527ff49d7030e79455be007ba7ee379..e02809fc03252dbc2a03ee51569db0a3923bc5f6\">nice</a> to gaze upon</p>",
        "id": 383747331,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691698292
    },
    {
        "content": "<p>I've merged master into the branch</p>",
        "id": 383768024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691704955
    },
    {
        "content": "<p>I forget there was one more important change from <a href=\"https://github.com/leanprover-community/mathlib4/pull/6370\">#6370</a>. Explicitly marking <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=toSesqForm#doc\">docs#toSesqForm</a> noncomputable to prevent a runaway build process which produces nothing. See <a href=\"#narrow/stream/287929-mathlib4/topic/shortcut.20for.20.60Seminorm.2EinstMulAction.60.3F/near/382669481\">here</a>. </p>\n<p>This apparently broke the speedcenter.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6512\">#6512</a></p>",
        "id": 383796391,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691717438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236370.20Type*/near/383716204\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6499\">#6499</a></p>\n</blockquote>\n<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/e7b27246-a3e6-496a-b552-ff4b45c7236e/to/7ce33e47-7810-4b31-8c41-24b8abd92701?hash1=c4190b46a0e755ba10c94038aa77e644abeb95d0\">rough benchmark info here</a></p>",
        "id": 383930241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691754872
    },
    {
        "content": "<p>This is benchmarking the Aesop bump + other stuff + Type*</p>",
        "id": 383931126,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691755030
    },
    {
        "content": "<p>It would be nice to isolate things</p>",
        "id": 383931378,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691755080
    },
    {
        "content": "<p>Wall clock almost -3% still</p>",
        "id": 383931690,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691755135
    },
    {
        "content": "<p>I'm running a better commit now</p>",
        "id": 383931707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691755138
    },
    {
        "content": "<p>Unfortunately it can't be fully isolated due to the build failures before <a href=\"https://github.com/leanprover-community/mathlib4/pull/6512\">#6512</a></p>",
        "id": 383931799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691755158
    },
    {
        "content": "<p>Perhaps the behavior with <code>toSesqForm</code> is more pervasive but less pronounced with the maxrss up 60% still</p>",
        "id": 383931954,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691755198
    },
    {
        "content": "<p>But other things look like the sum of Aesop stuff and previous behavior</p>",
        "id": 383932203,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691755237
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6512\">#6512</a> should be sufficient</p>",
        "id": 383932471,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691755282
    },
    {
        "content": "<p>That's what I've told it to benchmark next</p>",
        "id": 383935888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691755958
    },
    {
        "content": "<p>I guess that most recent one doesn't show up on <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/home\">Recent Significant Runs</a> because it overflows something?</p>",
        "id": 383936519,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691756111
    },
    {
        "content": "<p>Only commits whose parent was benchmarked show up in that section</p>",
        "id": 383938723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691756512
    },
    {
        "content": "<p>Well <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/run-detail/3385a807-ca45-45e4-a15b-c913361eab2d\">shoot</a></p>",
        "id": 383988066,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691764516
    },
    {
        "content": "<p>well, it has no successful benchmark on the parent, right?</p>",
        "id": 383988987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691764656
    },
    {
        "content": "<p>Shouldn't it check that before?</p>",
        "id": 383989340,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691764696
    },
    {
        "content": "<p>Before what?</p>",
        "id": 383989453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691764713
    },
    {
        "content": "<p>Spending 2.5 hours</p>",
        "id": 383989531,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691764728
    },
    {
        "content": "<p>The benchmark was still a success</p>",
        "id": 383990059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691764798
    },
    {
        "content": "<p>It's just the dashboard doesn't show a default diff if no parent is available</p>",
        "id": 383990160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691764807
    },
    {
        "content": "<p>From <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/repo-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e?zoomXStart=1691600179343.5618&amp;zoomXEnd=1691794800000&amp;dimensions=build%3Ainstructions&amp;dayEquidistant=true\">the commit performance graph</a> you can read off a suitable commit to diff against</p>",
        "id": 383990302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691764825
    },
    {
        "content": "<p>And the pretty pictures?</p>",
        "id": 383990398,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691764841
    },
    {
        "content": "<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/4a7dfa06-ff93-4290-9e1b-a7e8c2460e18/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash2=cd15d6508c1907548a58bab26f4c8adcae389da6\">This</a> is the narrowest diff you can get, constructed from that graph</p>",
        "id": 383990651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691764883
    },
    {
        "content": "<p>Unfortunately in the diff view you can't sort by change, you can only do that in a per-commit view</p>",
        "id": 383990964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691764929
    },
    {
        "content": "<p>Looks right.</p>",
        "id": 383991710,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691765038
    },
    {
        "content": "<p>-4.5% in total instructions</p>",
        "id": 383991851,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691765054
    },
    {
        "content": "<p>I wonder if things are phantom <del>building</del> compiling in other files</p>",
        "id": 383992199,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691765104
    },
    {
        "content": "<p>We never figured out exactly why the problem with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=toSesqForm#doc\">docs#toSesqForm</a> occurred.</p>",
        "id": 383992856,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691765202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> when I bench I always make sure that my branch is one commit away from a commit to master which is already benchmarked (e.g. with a well-aimed merge)</p>",
        "id": 384021986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691769830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, the links above are to the version that ended up in master</p>",
        "id": 384028277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691771103
    }
]