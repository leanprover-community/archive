[
    {
        "content": "<p>I have formalized </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">superFactorial_dvd_vandermonde_det</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">superFactorial</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">Matrix.vandermonde</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span>\n</code></pre></div>\n<p>and thought this would make a nice addition to <code>Mathlib.LinearAlgebra.Vandermonde</code> (perhaps with <code>R</code> instead of <code>ℤ</code>) and I started to make pull requests to add the super factorial and related things, as well as theorems in <code>Vandermonde</code>.<br>\nReviews/Feedback for those would be most welcome: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6768\">#6768</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6806\">#6806</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6812\">#6812</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6827\">#6827</a></p>",
        "id": 388071583,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1693389414
    },
    {
        "content": "<p>Here is the draft pull request with the result about the super factorial dividing the vandermonde determinant: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6893\">#6893</a>. <br>\nThis is not quite ready for review, but the prerequisites  (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6768\">#6768</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6806\">#6806</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6812\">#6812</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6827\">#6827</a>) are ready for review. (Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  for already taking a look at some of them...)</p>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/6893\">#6893</a> I still need to replace my custom <code>polynomial_descFactorial</code>, with <code>pochhammer</code>, but I <code>pochhammer</code> is more like <code>polynomidal_ascFactorial</code>....</p>",
        "id": 388275016,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1693470556
    },
    {
        "content": "<p>Why not keep it as <code>descPochhammer</code>?</p>",
        "id": 388275802,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693470837
    },
    {
        "content": "<p>Yeah, that's what I meant, I will use <code>descPochammer</code>, once we have it.<br>\nBy now I have pending pull request for the <code>Monic</code> and <code>natDegree</code> properties needed for <code>descPochhammer</code>: <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/6927\">#6927</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/6929\">#6929</a> , both of them depends on the rename and adding <code>descPochhammer</code>, i.e. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6918\">#6918</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/6917\">#6917</a></p>\n<p>I tried to make all of the pull requests small, so that they would be easier to review...</p>",
        "id": 388727517,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1693687598
    },
    {
        "content": "<p>By now most parts for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">superFactorial_dvd_vandermonde_det</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.superFactorial</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">Matrix.vandermonde</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span>\n</code></pre></div>\n<p>are ready, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/6893\">#6893</a>. There are a few lemmas around properties of the matrix </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Matrix.of</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure if they are of any relevance outside the proof or not. I would appreciate if someone could take a look.</p>",
        "id": 393312663,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1695756958
    }
]