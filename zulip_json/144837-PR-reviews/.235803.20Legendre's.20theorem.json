[
    {
        "content": "<p>All the prerequisites for <a href=\"https://github.com/leanprover-community/mathlib4/pull/5803\">#5803</a> are done now. A review would be appreciated...</p>",
        "id": 380037842,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1690724425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> was so kind to give this a look, thanks! Their suggestion was to prove a slightly more general </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sub_one_mul_sum_div_pow_eq_sub_sum_digits</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnb</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>which would imply the version of Legendre's theorem that I proved without using this equation. <br>\nI think this would be a good idea!</p>\n<p>However, I'm a bit stuck in how to convert a proof along the following lines:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munder><mo>∑</mo><mrow><mi>k</mi><mo>⩾</mo><mn>1</mn></mrow></munder><mo stretchy=\"false\">⌊</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">⌋</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>k</mi><mo>⩾</mo><mn>1</mn></mrow></munder><munder><mo>∑</mo><mrow><mi>j</mi><mo>⩾</mo><mi>k</mi></mrow></munder><msub><mi>n</mi><mi>j</mi></msub><msup><mi>p</mi><mrow><mi>j</mi><mo>−</mo><mi>k</mi></mrow></msup><mo>=</mo><munder><mo>∑</mo><mrow><mi>j</mi><mo>⩾</mo><mn>1</mn></mrow></munder><msub><mi>n</mi><mi>j</mi></msub><munder><mo>∑</mo><mrow><mn>1</mn><mo>⩽</mo><mi>k</mi><mo>⩽</mo><mi>j</mi></mrow></munder><msup><mi>p</mi><mrow><mi>j</mi><mo>−</mo><mi>k</mi></mrow></msup><mo>=</mo><munder><mo>∑</mo><mrow><mi>j</mi><mo>⩾</mo><mn>1</mn></mrow></munder><msub><mi>n</mi><mi>j</mi></msub><mfrac><mrow><msup><mi>p</mi><mi>j</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mrow><mo fence=\"true\">(</mo><munder><mo>∑</mo><mrow><mi>j</mi><mo>⩾</mo><mn>1</mn></mrow></munder><msub><mi>n</mi><mi>j</mi></msub><msup><mi>p</mi><mi>j</mi></msup><mo>−</mo><munder><mo>∑</mo><mrow><mi>j</mi><mo>⩾</mo><mn>1</mn></mrow></munder><msub><mi>n</mi><mi>j</mi></msub><mo fence=\"true\">)</mo></mrow><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><msub><mi>n</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><msub><mi>s</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msub><mi>n</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>n</mi><mo>−</mo><msub><mi>s</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{k\\geqslant1}\\lfloor n/p^k\\rfloor=\\sum_{k\\geqslant1}\\sum_{j\\geqslant k}n_jp^{j-k}=\n\\sum_{j\\geqslant1}n_j\n\\sum_{1\\leqslant k\\leqslant j}p^{j-k}=\\sum_{j\\geqslant1}n_j\\frac{p^j-1}{p-1}=\\frac1{p-1}\n\\left(\\sum_{j\\geqslant1}n_jp^j-\\sum_{j\\geqslant1}n_j\\right)=\\frac{(n-n_0)-(s_p(n)-n_0)}{p-1}\n=\\frac{n-s_p(n)}{p-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.4478em;vertical-align:-1.3978em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel amsrm mtight\">⩾</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3978em;\"><span></span></span></span></span></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4882em;vertical-align:-1.4382em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel amsrm mtight\">⩾</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3978em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel amsrm mtight\">⩾</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4382em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4882em;vertical-align:-1.4382em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel amsrm mtight\">⩾</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4138em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mrel amsrm mtight\">⩽</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel amsrm mtight\">⩽</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4382em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9154em;vertical-align:-1.4138em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel amsrm mtight\">⩾</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4138em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5017em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1638em;vertical-align:-1.4138em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel amsrm mtight\">⩾</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4138em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8747em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel amsrm mtight\">⩾</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4138em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3074em;vertical-align:-0.8804em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3074em;vertical-align:-0.8804em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>A problem arises when trying to write </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor n/p^k\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span></span></span></span></span></p>\n<p>as </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munder><mo>∑</mo><mrow><mi>j</mi><mo>⩾</mo><mi>k</mi></mrow></munder><msub><mi>n</mi><mi>j</mi></msub><msup><mi>p</mi><mrow><mi>j</mi><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{j\\geqslant k}n_jp^{j-k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.4882em;vertical-align:-1.4382em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel amsrm mtight\">⩾</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4382em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>So, there is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ofDigits_eq_sum_mapIdx</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ofDigits</span> <span class=\"n\">b</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">L.mapIdx</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</code></pre></div>\n<p>and I guess one could prove something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ofDigits_div_pow_eq_sum_mapIdx_shifted</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ofDigits</span> <span class=\"n\">b</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">L.mapIdx</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but this would then be difficult to use further in this proof.<br>\nAlternatively perhaps writing something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ofDigits_eq_sum_pow</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ofDigits</span> <span class=\"n\">b</span> <span class=\"n\">L</span> <span class=\"bp\">=</span>  <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">L.length</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">L.get</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>or define </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get_or_zero</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span> <span class=\"k\">then</span> <span class=\"n\">L.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and then something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">div_pow_eq_sum_digits_mul_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnb</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"n\">get_or_zero</span> <span class=\"o\">(</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>All these approaches seem wrong. What is the right way to do this?</p>",
        "id": 380482241,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1690834360
    },
    {
        "content": "<p>With regards to <code>get_or_zero</code>: can't you use <code>get?</code> for that? Or <code>getD</code>...</p>",
        "id": 380551368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690861928
    },
    {
        "content": "<p>I think even just <code>L[i]!</code> would behave in the exact same way.</p>",
        "id": 380552502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690862535
    },
    {
        "content": "<p>I guess that's <code>getD</code> under the hood.</p>",
        "id": 380552556,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690862562
    },
    {
        "content": "<p>thanks! I agree that using get <code>getD</code> or <code>get?</code> or <code>L[i]!</code> would be a good idea.<br>\nI gave the last one a try and got at least this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">getElem_cons</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tl</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)[</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">getElem</span><span class=\"bp\">!</span>\n  <span class=\"n\">by_cases</span>  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"n\">tl</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">List.getElem_eq_get</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">,</span> <span class=\"n\">List.length_cons</span><span class=\"o\">,</span> <span class=\"n\">List.get</span><span class=\"o\">,</span> <span class=\"n\">add_eq</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_lt_of_lt_sub</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">List.getElem_eq_get</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">,</span> <span class=\"n\">List.length_cons</span><span class=\"o\">,</span> <span class=\"n\">List.get</span><span class=\"o\">,</span> <span class=\"n\">add_eq</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">¬</span>  <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_add_of_sub_le</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">getElem_cons_zero</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">getElem</span><span class=\"bp\">!</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ofDigits_eq_sum_digits_mul_pow</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"n\">digits</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">digits.length</span><span class=\"o\">),</span> <span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">digits</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">ofDigits</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_id</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">Ico_zero_eq_range</span><span class=\"o\">,</span> <span class=\"n\">List.length_cons</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_range_succ'</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"bp\">·</span> <span class=\"n\">ext</span> <span class=\"n\">n</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">getElem_cons</span><span class=\"o\">,</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">_root_.pow_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">getElem_cons_zero</span> <span class=\"n\">tl</span> <span class=\"n\">hd</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">self_eq_sum_digits_mul_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n    <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">((</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)[</span><span class=\"n\">j</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ofDigits_eq_sum_digits_mul_pow</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">p.digits</span> <span class=\"n\">n</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ofDigits_digits</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Looking at the two lemmas: is there some code for getting stuff like <code>tl[n]! = (hd :: tl)[n + 1]! </code> already somewhere?</p>\n<p>I guess this approach could work, perhaps introducing the additional bound <code>(hnb : log p n &lt; b)</code> in order to more elegantly handle switching the order of summation later in the proof...</p>",
        "id": 380823855,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1690920052
    },
    {
        "content": "<p>Ok, in addition to the theorems above I now have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ofDigits_le_pow</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">digits</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"n\">digits</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">digits.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ofDigits_div_pow_eq_sum_digits_mul_pow</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">digits</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"n\">digits</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">=</span>\n <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">digits.length</span><span class=\"o\">),</span> <span class=\"n\">digits</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>and finally</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">self_div_pow_eq_sum_digits_mul_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n    <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">((</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)[</span><span class=\"n\">j</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ofDigits_div_pow_eq_sum_digits_mul_pow</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_of_lt</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">digits_lt_base</span> <span class=\"n\">hp</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">ofDigits_digits</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is what I need in the proof, and I couldn't find them in mathlib. It seems like they might even be useful on their own. What do you think?</p>",
        "id": 382868806,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691484009
    },
    {
        "content": "<p>If you need them then that's evidence they're useful. Make a PR and you'll hopefully get some more critical eyes on both the statements and proofs.</p>",
        "id": 382915455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691492989
    },
    {
        "content": "<p>I think <code>ofDigits_le_pow</code> looks great but I wonder about the statement of the other two. For example, I would expect the following to be a more useful version of <code>ofDigits_div_pow_eq_sum_digits_mul_pow</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ofDigits_div_pow_eq_ofDigits_drop</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">digits</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"n\">digits</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">digits.drop</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Do you think you could achieve your aims by using this lemma instead?</p>",
        "id": 382915769,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1691493047
    },
    {
        "content": "<p>Thanks! I like the one with the drop also better. I'll pr the <code>ofDigits_le_pow</code>, and see if I can adapt what I'm trying to do using <code>ofDigits_div_pow_eq_ofDigits_drop</code>.  And also prove <code>ofDigits_div_pow_eq_ofDigits_drop</code></p>",
        "id": 382924566,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691494980
    },
    {
        "content": "<p>I see there is already, <code>ofDigits_lt_base_pow_length</code>.. good!</p>",
        "id": 382925247,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691495142
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ofDigits_div_eq_ofDigits_drop_one</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">digits</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">digits</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">digits.drop</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">digits</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">ofDigits</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_mul_div_left</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">tl</span><span class=\"o\">))</span> <span class=\"n\">p</span> <span class=\"n\">hpos</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_eq_zero</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">w₁</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List.mem_cons_self</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ofDigits_div_pow_eq_ofDigits_drop</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">digits</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"n\">digits</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">digits.drop</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.div_div_eq_div_mul</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">ofDigits_div_eq_ofDigits_drop_one</span> <span class=\"n\">hpos</span>\n      <span class=\"o\">(</span><span class=\"n\">List.drop</span> <span class=\"n\">i</span> <span class=\"n\">digits</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"n\">w₁</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List.mem_of_mem_drop</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.drop_drop</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>When writing down the proof I noticed that this can be made slightly more general, because you only need the <code>l &lt; p</code> condition on those digits that get dropped. (i.e. only on the head in the version <code> ofDigits_div_eq_ofDigits_drop_one</code> lemma.)<br>\nI'm not sure which is nicer.</p>",
        "id": 382963495,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691502438
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6448\">https://github.com/leanprover-community/mathlib4/pull/6448</a><br>\npr for that one <br>\nchanging <code>drop  1</code> to <code>tail</code>...</p>",
        "id": 382967259,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691503086
    },
    {
        "content": "<p>Now I have used the drop lemma to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sub_one_mul_sum_div_pow_eq_sub_sum_digits'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n     <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">i.succ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>see <a href=\"https://github.com/leanprover-community/mathlib4/pull/6505/commits/c7ad36976800df00a93686ac4c80aa96470e80f0\">https://github.com/leanprover-community/mathlib4/pull/6505/commits/c7ad36976800df00a93686ac4c80aa96470e80f0</a>.</p>\n<p>This is what <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> suggested and it will indeed give much nicer proofs of the theorems in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5803\">#5803</a>.<br>\nThere is still ample opportunity to golf <a href=\"https://github.com/leanprover-community/mathlib4/pull/6505\">#6505</a>...</p>",
        "id": 383734351,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691694778
    },
    {
        "content": "<p>Congratulations and thanks for doing all this extra work to get the stronger results <span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> . Please ping me (either here or on GitHub) as each PR is ready for review.</p>",
        "id": 383774981,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1691707594
    },
    {
        "content": "<p>Thanks again for suggesting the theorem, <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> .<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/6505\">#6505</a> is ready for review</p>",
        "id": 383848412,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691738256
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> for all the reviewing. One pull request left is Kummer's Theorem <a href=\"https://github.com/leanprover-community/mathlib4/pull/5860\">#5860</a>. </p>\n<p>Then I though about adding the same two theorem for <code>multiplicity</code> instead of <code>padicVal</code>. However the part where we multiply with <code>p - 1</code> is difficult, because <code>PartENat</code> does not <br>\nhave an <code>HMul ℕ PartENat _</code> and hence I came up with the following formulation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">sub_one_mul_multiplicity_factorial_eq_sub_sum_digits</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">!</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">finite_nat_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">hp.ne_one</span><span class=\"o\">,</span> <span class=\"n\">factorial_pos</span> <span class=\"n\">n</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span>\n     <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>A draft pull request with this is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6546\">#6546</a></p>\n<p>The <code>.get</code> is a bit ugly, but maybe it would still be a useful theorem?</p>",
        "id": 384337799,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691867892
    },
    {
        "content": "<p>For purpose of formulating this theorem a multiplication <code>HMul ℕ PartENat ℕ</code> that sets <code>n * ⊤</code> to  <code>0</code> would be handy, but I'm afraid there might be arguments against such a definition.</p>",
        "id": 384338024,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691868010
    },
    {
        "content": "<p>Why'd you want a <code>HMul</code>? You could just do <code>(n : PartENat) * x</code>, right?</p>",
        "id": 384343365,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691870609
    },
    {
        "content": "<p>I don't quite understand, there is not multiplication on <code>PartENat</code>, I think, so making <code>p - 1</code> an <code>PartENat</code> does not work</p>",
        "id": 384352708,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691875913
    },
    {
        "content": "<p>Oh, there isn't? I didn't realise that. Not sure what the benefit is over just defining that multiplication rather than a heterogeneous one, though</p>",
        "id": 384357662,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691879392
    },
    {
        "content": "<p>I guess one benefit would be to not think about how to define  <code>⊤ * ⊤</code></p>",
        "id": 385433196,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1692181911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235803.20Legendre's.20theorem/near/385433196\">said</a>:</p>\n<blockquote>\n<p>I guess one benefit would be to not think about how to define  <code>⊤ * ⊤</code></p>\n</blockquote>\n<p>I wouldn't have thought that's a difficult question, though, is it?</p>",
        "id": 385433996,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692182254
    },
    {
        "content": "<p>I'd expect 0 * top to be the hard one</p>",
        "id": 385434081,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692182284
    },
    {
        "content": "<p>I agree. <br>\nWhat will go wrong defining <code>0 * ⊤</code> to be <code>0</code>?</p>",
        "id": 385437535,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1692183672
    },
    {
        "content": "<p>In applied maths it's 1</p>",
        "id": 385446397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692187278
    },
    {
        "content": "<p>The most compelling reason I heard for making it zero was the observation of Gouezel a couple of months ago that if you have a subset of R with measure zero and take the product of it with a subspace of infinite measure then the product has measure 0</p>",
        "id": 385446764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692187402
    },
    {
        "content": "<p><code>0 * ⊤ = 0</code> lets you make the extended naturals a <code>CanonicallyOrderedCommSemiring</code> which is nice</p>",
        "id": 385472434,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692195133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235803.20Legendre's.20theorem/near/385446397\">said</a>:</p>\n<blockquote>\n<p>In applied maths it's 1</p>\n</blockquote>\n<p>What are the  reasons to make it 1?</p>",
        "id": 385482463,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1692198035
    },
    {
        "content": "<p>lim of x * x^-1?</p>",
        "id": 385489468,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1692200124
    },
    {
        "content": "<p>I think Kevin may have been joking.</p>",
        "id": 385554722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692226627
    },
    {
        "content": "<p>Reaching for measure theory to justify <code>0 * ⊤ = 0</code> seems overkill. Isn't it just about <code>ENat</code> valued cardinality for sets, for <code>ENat</code> valued dimensions of vector spaces, etc?</p>",
        "id": 385554865,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692226713
    }
]