[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7586\">#7586</a> makes it so that polyrith can solve</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(as opposed to returning a Python <code>TypeError</code>, <a href=\"https://github.com/leanprover-community/mathlib/pull/17141\">!3#17141</a>)</p>\n<p>I original PR'd this as <a href=\"https://github.com/leanprover-community/mathlib/pull/17142\">!3#17142</a> which will celebrate it's first birthday in a week, but unfortunately it never got reviewed (it looks like I forgot to assign \"awaiting-review\".) It did get marked <code>not-too-late</code> though!</p>",
        "id": 397194036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697584030
    },
    {
        "content": "<p>BTW, I think this sort of this is quite limited by the fact that we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">type_str</span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">):</span>\n    <span class=\"n\">return</span> <span class=\"s2\">\"QQ\"</span>\n</code></pre></div>\n<p>so that saying <code>2 = 0</code> will automatically put sage in an inconsistent state, for example with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">polyrith</span>\n</code></pre></div>\n<p>the sage code hapily returns the certificate <code>x * h2 / 2</code> which lean refuses of course. So we can get lucky if sage doesn't use division in its certificate but as far as i know there is no gaurentee of that really.</p>\n<p>We noticed this during the dagstuhl seminar on formalization a couple of weeks ago and I made <a href=\"https://github.com/sagemath/sage/pull/36401\">https://github.com/sagemath/sage/pull/36401</a> to help with the root cause of this, which should land sooner or later and let us unblock using commrings in polyrith properly</p>",
        "id": 397195204,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697584842
    },
    {
        "content": "<p>What is the sage bug you refer to in <code>    # workaround for a Sage bug</code> specifically?</p>",
        "id": 397195354,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697584927
    },
    {
        "content": "<p><del>I don't remember, but I seem to no longer need to do that</del></p>",
        "id": 397198245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697586858
    },
    {
        "content": "<p>The error without that branch is <code>TypeError: no conversion of this ring to a Singular ring defined</code></p>",
        "id": 397199367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697587552
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7586\">#7586</a> looks unobjectionable to me!</p>",
        "id": 397209776,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1697593384
    },
    {
        "content": "<p>Alex, thanks for making the Sage PR. We tried to get polyrith working more generally during development, but there were some Sage issues we couldn't figure out. Somewhere I have some tests lying around of things that seemed like they should work but didn't. I bet this fixes at least some of them!</p>",
        "id": 397209973,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1697593494
    }
]