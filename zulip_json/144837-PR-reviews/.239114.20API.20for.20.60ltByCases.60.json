[
    {
        "content": "<p>We have the function <code>ltByCases</code> defined! It's quite a useful thing I think - it's like a specialised version of <code>dite</code> but for trichotomies in linear orders. But we had zero API for it - so I have written some, found what I think is a reasonable file to put it in, and PR'd it.</p>\n<p>I would use this function myself - sometimes you want to define something using a three-way split and it can get a little clumsy if you have to do two nested ifs every time.  (For instance, the <code>Fin</code> <code>succAbove</code> functions which have been a bugbear recently).</p>\n<p>I also defined a non-dependent version for when you have three values and they don't need to use the hypothesis they imply. I didn't want to touch the file where <code>ltByCases</code> itself is defined as it's an <code>Init</code> file - but the file I have modified is early enough  in the hierarchy that most things should get this with no extra imports.</p>",
        "id": 408371274,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702756310
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ltByCases#doc\">docs#ltByCases</a></p>",
        "id": 408371320,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702756327
    },
    {
        "content": "<p>(If I was going to modify <code>ltByCases</code> I would modified it to use <code>compare</code> and <code>Ordering</code> as that is the natural way to do trichotomous stuff IMO - and the way <code>ltByCases</code> is defined is not consistent with <code>compareOfLessAndEq</code>, by the by. But that seemed like scope creep.)</p>",
        "id": 408371449,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702756489
    },
    {
        "content": "<p>It sounds like <code>ltByCases</code> should perhaps just be removed; the new <code>compare</code> mechanism seems to supersede it</p>",
        "id": 408381505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702767430
    },
    {
        "content": "<p>How is the compare mechanism intended to be used?</p>",
        "id": 408381733,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702767640
    },
    {
        "content": "<p>Like, I'm not saying you're wrong, something like <code>compare</code> does seem the appropriate thing for this, but I would like to see it used in definitions and proofs a bit first.</p>",
        "id": 408381850,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702767716
    },
    {
        "content": "<p>In particular, how would you get the dependent stuff?</p>",
        "id": 408382030,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702767876
    },
    {
        "content": "<p>I was thinking of <code>(compare a b).rec</code> or <code>match h : compare a b</code>, but I guess you're right; the branches don't give you the proof you need (it's in terms of <code>compare</code> not the useful operators)</p>",
        "id": 408382507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702768378
    },
    {
        "content": "<p>Yeah, compare is just an inductive type, it's an enum just like Bool.</p>",
        "id": 408388996,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702773485
    },
    {
        "content": "<p>You could absolutely write a useful interface to it (the same as you can for Bool!) - indeed, you could usefully rewrite the definition of ltByCases that way I think - again, analogous to Bool.</p>",
        "id": 408389213,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702773604
    },
    {
        "content": "<p>There's also an analogue to Decidable - call it \"Comparable x y\" - which basically means that you can get a proof of whether those two elements are lt eq or gt.</p>",
        "id": 408389335,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702773665
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">Comparable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Prove that `x` and `y` are comparable by supplying a proof of `x &lt; y` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isLT</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Comparable</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"sd\">/-- Prove that `x` and `y` are comparable by supplying a proof of `x = y` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isEQ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Comparable</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"sd\">/-- Prove that `x` and `y` are comparable by supplying a proof of `y &lt; x` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isGT</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Comparable</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Comparable</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.casesOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Only works ultimately because a linear order has decidable ordering!</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Comparable</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ltByCases</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">Comparable.isLT</span> <span class=\"n\">Comparable.isEQ</span> <span class=\"n\">Comparable.isGT</span>\n</code></pre></div>",
        "id": 408391520,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702774705
    },
    {
        "content": "<p><code>Ordering</code> is to <code>Comparable</code> as <code>Bool</code> is to <code>Decidable</code>. <code>compare</code> is essentially like a Boolean predicate in this analogy - three-valued instead of two.</p>",
        "id": 408391652,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702774792
    },
    {
        "content": "<p>I'm not saying we should <em>have</em> <code>Comparable</code> neccesarily - but this is the thing you would need if you wanted it (unless we do have it - I haven't seen it).</p>",
        "id": 408391819,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702774850
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Comparable</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.by_cases</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Comparable.isLT</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H.by_cases'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Comparable.isEQ</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Comparable.isGT</span> <span class=\"n\">H2</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 408392756,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702775289
    },
    {
        "content": "<p>This shows more clearly how they are related I suppose!</p>",
        "id": 408392780,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702775307
    },
    {
        "content": "<p><code>LinearOrder</code> actually contains a bunch more data - because it assumes decidability of (&lt;), (&lt;=), and (=) - though obviously these are all related.</p>",
        "id": 408392942,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702775412
    },
    {
        "content": "<p>I suspect that if you changed the definition of <code>LinearOrder</code> so that every pair of members <code>x y</code> had an instance of <code>Comparable x y</code>, you could then construct an instance of <code>DecidableRel</code> for the three relations. But this stuff at the very base of the order hierarchy is a tricky beast!</p>",
        "id": 408393599,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702775908
    },
    {
        "content": "<p>I'm actually not very sure what you're meant to <em>do</em> with <code>Ordering</code> - it's just fancy labels really! You could build stuff out of it for sure but I think anything useful would look more like my <code>Comparable</code>. If you want to use the fact that x &lt; y, you need to store a term of that type somewhere.</p>",
        "id": 408395130,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702777246
    },
    {
        "content": "<p>You know, now that I look at the above I realise that that's possibly a neater proof of <code>lt_trichotomy</code>, in effect, than the current one!</p>",
        "id": 408395301,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702777400
    },
    {
        "content": "<p>You could use Ordering quite nicely in the definition of <code>Comparable</code> - just define Comparable as having a single constructor, Comparable ord x y h, where ord has type Ordering, x and y have type alpha, and h has type ord.toRel x y. You could then derive everything you have above from that.</p>\n<p>But it isn't enough to omit h. If you omit h, then something of type Comparable is just an ordering statement of the form x &lt; y etc. - but with no proof of it.</p>\n<p>Sorry, I realise this is a basic point, but I just find all this quite aesthetically pleasing.</p>",
        "id": 408395870,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702777923
    },
    {
        "content": "<p>I'm pretty sure I defined this at some point</p>",
        "id": 408419675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702799492
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ordering.Compares#doc\">docs#Ordering.Compares</a></p>",
        "id": 408419706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702799523
    },
    {
        "content": "<p>Aha! I did think it was weird I couldn't find it.</p>",
        "id": 408420188,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702799979
    },
    {
        "content": "<p>well, I suppose this isn't quite the same as <code>Comparable</code> since it takes an <code>Ordering</code> argument</p>",
        "id": 408420283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800030
    },
    {
        "content": "<p>Yeah but it's the version of it I mentioned in my later message in effect.</p>",
        "id": 408420311,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800053
    },
    {
        "content": "<p>It does mean you have to somewhat have the Ordering already, which makes it slightly annoying to use maybe? I was about to say, maybe we should build a ltByCases out of this and get rid of the one in std. But you would need some kind of existence theorem? And then that wouldn't eliminate outside of Prop.</p>",
        "id": 408420675,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800279
    },
    {
        "content": "<p>well this doesn't get rid of anything in std because it requires ordering classes</p>",
        "id": 408420717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800335
    },
    {
        "content": "<p>Oh sure but ltByCases isn't used in std I think. I'm not sure it's really used at all? I just found it yesterday and was like \"wow that would be useful if it has any API\".</p>",
        "id": 408420807,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800394
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 408420821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800409
    },
    {
        "content": "<p>I'm not sure there is much API to have really</p>",
        "id": 408420828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800419
    },
    {
        "content": "<p>it's somewhat unergonomic to call these custom eliminators to begin with</p>",
        "id": 408420841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800438
    },
    {
        "content": "<p>you can call <code>match e : compare x y</code> instead and get a hypothesis if you need one</p>",
        "id": 408420866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800468
    },
    {
        "content": "<p>That's what Eric said yesterday but he couldn't get a hypothesis out</p>",
        "id": 408420930,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800487
    },
    {
        "content": "<p>you do get a hypothesis out, it's just not stated as <code>x &lt; y</code></p>",
        "id": 408420957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800511
    },
    {
        "content": "<p>you can have lemmas for this (even simp lemmas) though</p>",
        "id": 408420971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800528
    },
    {
        "content": "<p>Right but how do you then get that?</p>",
        "id": 408420975,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800533
    },
    {
        "content": "<p>it is a theorem that <code>compare x y = .lt &lt;-&gt; x &lt; y</code></p>",
        "id": 408420996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800557
    },
    {
        "content": "<p>on Nat, and more generally for any preorder (this is what the <code>Compares</code> theorems are about)</p>",
        "id": 408421013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800579
    },
    {
        "content": "<p>Aha, is it? Well there we are are then.</p>",
        "id": 408421014,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800579
    },
    {
        "content": "<p>Right indeed - you use <code>(compare x y).Compares x y</code> presumably</p>",
        "id": 408421069,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800608
    },
    {
        "content": "<p>Which I assume is a theorem in Nat, and in <code>LinearOrder</code>.</p>",
        "id": 408421087,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800635
    },
    {
        "content": "<p>well there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cmp_compares#doc\">docs#cmp_compares</a> but this is for a mathlib variation of <code>compare</code> called <code>cmp</code></p>",
        "id": 408421130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800694
    },
    {
        "content": "<p>which is defined in terms of <code>&lt;</code> instead of independently</p>",
        "id": 408421143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800709
    },
    {
        "content": "<p>Huh. Why do we have both <code>cmp</code> and <code>compare</code>?</p>",
        "id": 408421213,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800748
    },
    {
        "content": "<p>this was all written in lean 3 and mathlib doesn't work very well with the new <code>Ord</code> typeclass in lean 4 core</p>",
        "id": 408421225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800766
    },
    {
        "content": "<p>Aha</p>",
        "id": 408421230,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800775
    },
    {
        "content": "<p>Though none of this really answers why <code>ltByCases</code> is still in std</p>",
        "id": 408421249,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800800
    },
    {
        "content": "<p>we basically need a <code>LawfulOrd</code> typeclass which says that the <code>Ord</code> agrees with the linear order structure</p>",
        "id": 408421250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800800
    },
    {
        "content": "<p>Oh wait it's not in std</p>",
        "id": 408421274,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800832
    },
    {
        "content": "<p>It's a function people might want to use, mostly just grandfathered from mathlib</p>",
        "id": 408421275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800832
    },
    {
        "content": "<p>or not?</p>",
        "id": 408421281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800840
    },
    {
        "content": "<p>It's in mathlib, just in init.</p>",
        "id": 408421323,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800847
    },
    {
        "content": "<p>oh right, so that probably means I deliberately skipped it when upstreaming the surrounding file to std</p>",
        "id": 408421347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800871
    },
    {
        "content": "<p>probably because no one uses it</p>",
        "id": 408421353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800881
    },
    {
        "content": "<p>People might want to use it, but I'm people, and I don't want to use it without at the very least the first three lemmas in my PR, because otherwise I am going to have to re-prove them every time.</p>",
        "id": 408421361,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800897
    },
    {
        "content": "<p>oh and it depends on <code>LinearOrder</code></p>",
        "id": 408421364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800901
    },
    {
        "content": "<p>It does yes. More useful versions could exist!</p>",
        "id": 408421384,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702800920
    },
    {
        "content": "<p>looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=compare_lt_iff_lt#doc\">docs#compare_lt_iff_lt</a> is the necessary lemma to work with <code>match e : compare a b</code></p>",
        "id": 408421406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702800958
    },
    {
        "content": "<p>Though that also uses <code>LinearOrder</code>. And it would still be useful to have something that gets the pattern you get out of ltByCases out. Basically sometimes you want to prove <em>or define</em> something based on the three cases of \"above, below, equal\". A good example of where this comes up is <code>Fin.insertNth</code>. But in general it's just one of those patterns.</p>",
        "id": 408421574,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702801097
    },
    {
        "content": "<p>But right now when people are defining stuff like this they just do something random, which then in turn means you have to adapt to the shape of whatever they choose - for instance, in the inevitable if statement with two branches, they could start with equality (rather than doing what feels to me to be the right approach, what this Ordering stuff seems to do, which is do \"ite x&lt; y else ite y&lt; x\".</p>",
        "id": 408421712,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702801219
    },
    {
        "content": "<p>I don't want to have to reinvent the universe before I make an apple pie, however: all I wanted to do was make ltByCases smoother to use for the purpose I wanted to use it for.</p>",
        "id": 408421933,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702801295
    },
    {
        "content": "<p>What I want is essentially a natural, non-code smell pattern for \"and now I am going to produce a term of type P, branching three ways depending on the relative comparison of two elements x and y, and then I want to be able to prove things about that later without having to unfold the definition down to the elements\".</p>",
        "id": 408422222,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702801396
    },
    {
        "content": "<p>It is somewhat maddening that in the very file that <code>ltByCases</code> is defined, you then have a bunch of lemmas that a) could clearly use it, b) don't use it.</p>",
        "id": 408422507,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702801685
    },
    {
        "content": "<p>From <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=compare_lt_iff_lt#doc\">docs#compare_lt_iff_lt</a> onwards.</p>",
        "id": 408422522,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702801715
    },
    {
        "content": "<p>no, using <code>ltByCases</code> would be less convenient than using <code>split_ifs</code>, because it simultaneously introduces the assumptions and also simplifies the <code>if</code> statement in the goal away</p>",
        "id": 408422625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702801832
    },
    {
        "content": "<p>Yeah I think this is perhaps just \"I like constructed term proofs, even if they're more unwieldy than just throwing them at split_ifs\".</p>",
        "id": 408422655,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702801889
    },
    {
        "content": "<p>This is because I was recently doing some work with <code>succAbove</code> and <code>predAbove</code> and if you do too much \"just split the ifs\" there you end up with a big pile of goals very quickly.</p>",
        "id": 408422722,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702801957
    },
    {
        "content": "<p>Which you can work with! But thinking more strategically gives you more insight and better proofs.</p>",
        "id": 408422738,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702801975
    },
    {
        "content": "<p>For <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=compare_lt_iff_lt#doc\">docs#compare_lt_iff_lt</a> actually your proof of fine. Most of the other proofs through are of the three way branch split form.</p>",
        "id": 408422825,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702802079
    },
    {
        "content": "<p>As I say, what I really wanted to be doing was, e.g., doing some work to make <code>succAboveCases</code> defined in a less unwieldy way, for which I have some good ideas: I was trying to look at some problems I've actually encountered in my own work. I think we can all agree that the way that it's defined has... it's not the smoothest.</p>",
        "id": 408423072,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702802317
    },
    {
        "content": "<p>So I would like to be able to do three-way definitions, and for that term-mode stuff makes sense. I was happy to use ite though, but given that we have ltByCases which does the exact thing I want...</p>",
        "id": 408423140,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702802379
    },
    {
        "content": "<p>From my point of view, not having the lemmas in this PR is a bit like not having lemmas like dite_true, dite_false, dif_pos, dif_neg and working with dites. You can do it! But it's not very fun and simp will often run into issues.</p>",
        "id": 408423309,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702802496
    },
    {
        "content": "<p>If your feeling is \"I just want to deprecate ltByCases, I want people to use Ordering etc. in such cases rather than define a custom eliminator\", then that's fair enough: in that case, I would like to respectfully ask for some short code examples so I know what is the current standard and I will do things that way.</p>",
        "id": 408423580,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702802630
    },
    {
        "content": "<p>I hope that's alright. Sorry.</p>",
        "id": 408423639,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702802645
    },
    {
        "content": "<p>Essentially, I'm please just asking from some direction - I don't want to feel like every time I try and contribute to mathlib I run into the pitfall of non-documented standards, which leads me to write unwanted or inconsistent code.</p>",
        "id": 408423857,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702802765
    },
    {
        "content": "<p>Side point: I know they are in different libraries, but the fact that <code>compareOfLessAndEq</code> is defined differently to the way that <code>cmpUsing</code> is defined is quite amusing to me. This is exactly the annoyance I mean!</p>",
        "id": 408424794,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702803246
    },
    {
        "content": "<p>If there's some reason you wouldn't use a uniform approach here I don't know what it is.</p>",
        "id": 408424828,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702803265
    },
    {
        "content": "<p>I'm not sure what you are asking for here. If you want more API lemmas for <code>ltByCases</code> then by all means submit them</p>",
        "id": 408424892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702803359
    },
    {
        "content": "<p>I have!</p>",
        "id": 408424940,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702803371
    },
    {
        "content": "<p>I'm sorry. I thought you were saying you didn't like what I had submitted.</p>",
        "id": 408424960,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702803394
    },
    {
        "content": "<p>I don't see any reason to take action regarding deprecating it or refactoring everything else to use it</p>",
        "id": 408424970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702803407
    },
    {
        "content": "<p>I just want to work with the flow of your (both you personally and the library as a whole) design and not against it, that's just easier.</p>",
        "id": 408424997,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702803440
    },
    {
        "content": "<p>but if you want to use it in something, go ahead, it's a function provided as one option among many</p>",
        "id": 408425001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702803443
    },
    {
        "content": "<p>Oh I don't want to refactor anything, that seems absolutely soul-destroying work for no good reason.</p>",
        "id": 408425074,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702803499
    },
    {
        "content": "<p>I would personally prefer to use <code>match e : compare x y</code> because it results in nicer formatting than using an explicit recursor function, this is a lean problem with custom recursors</p>",
        "id": 408425098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702803537
    },
    {
        "content": "<p>What I wanted to know was, if I was refactoring something <em>anyway</em> - is there a way you would prefer this to be done?</p>",
        "id": 408425107,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702803544
    },
    {
        "content": "<p>Like I said, I see no reason to refactor this in any particular direction, and have a mild preference against using <code>ltByCases</code>in my own code.</p>",
        "id": 408425130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702803589
    },
    {
        "content": "<p>assuming others feel similarly, this probably explains the lack of API lemmas</p>",
        "id": 408425210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702803621
    },
    {
        "content": "<p>I do think we should unify <code>cmp</code> and <code>compare</code> but this is a more complex deal which relates to <a href=\"https://github.com/leanprover/lean4/issues/1777\">future changes to the <code>Ord</code> class</a></p>",
        "id": 408425265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702803666
    },
    {
        "content": "<p>Indeed, though it doesn't really seem like people use the match approach on compare much in practice either (which I also like the most, though having to translate equality there back into the order statement every time is a pain).</p>",
        "id": 408425342,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702803712
    },
    {
        "content": "<p>Much easier in the non-dependent variation though.</p>",
        "id": 408425510,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702803796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.239114.20API.20for.20.60ltByCases.60/near/408371274\">said</a>:</p>\n<blockquote>\n<p>I didn't want to touch the file where <code>ltByCases</code> itself is defined as it's an <code>Init</code> file - but the file I have modified is early enough  in the hierarchy that most things should get this with no extra imports.</p>\n</blockquote>\n<p>By the way, <code>Mathlib.Init</code> is not where important things go. It is generally composed of useless junk because this is all the stuff which was in lean 3 core (meaning that it was historically off-limits for mathlib refactoring) and was removed in lean 4, meaning that it generally has all the least desirable APIs</p>",
        "id": 408425797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702804071
    },
    {
        "content": "<p>Oh! Ha! Fair enough. I think I had thought it was presumably really early import stuff that was there because lots of things needed it.</p>",
        "id": 408425868,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702804113
    },
    {
        "content": "<p>It's named that because during the port we wanted to avoid file motion and retain the original structure</p>",
        "id": 408425910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702804165
    },
    {
        "content": "<p>Yes, that makes sense.</p>",
        "id": 408425920,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702804180
    },
    {
        "content": "<p>I still can't quite believe you got that done.</p>",
        "id": 408425933,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702804194
    },
    {
        "content": "<p>A titanic undertaking.</p>",
        "id": 408425939,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702804203
    },
    {
        "content": "<p>we're probably going to be cleaning up after it for years though</p>",
        "id": 408426015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702804246
    },
    {
        "content": "<p>Oh for sure. Indeed, as I say I was getting frustrated with <code>succAboveCases</code> and it seems that the particular way that is written was a victim of the port - just to do one small example.</p>",
        "id": 408426054,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702804301
    },
    {
        "content": "<p>But I really like Lean and <code>mathlib</code> and its community so I hope I can be a part of that work.</p>",
        "id": 408426109,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702804331
    }
]