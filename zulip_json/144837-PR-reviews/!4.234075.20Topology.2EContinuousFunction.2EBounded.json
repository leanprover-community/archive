[
    {
        "content": "<p>I saw that PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/4075\">!4#4075</a> was marked as <code>help-wanted</code> and simply went in and pushed fixes: I hope that this is the standard practice!</p>\n<p>There were three instances that were not picked up, so I simply went ahead and explicitly told Lean what their names were.  I do not know why this was not picked up automatically.  <a href=\"https://github.com/leanprover-community/mathlib4/blob/f0737824d68e99630240f753cf43ea9e2ed58220/Mathlib/Topology/ContinuousFunction/Bounded.lean#L1388\">Here</a> is one of them, in case you are curious:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FunLike.coe_injective.ring</span> <span class=\"n\">_</span> <span class=\"n\">coe_zero</span> <span class=\"n\">coe_one</span> <span class=\"n\">coe_add</span> <span class=\"n\">coe_mul</span> <span class=\"n\">coe_neg</span> <span class=\"n\">coe_sub</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">coe_nsmul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">coe_zsmul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">coe_pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">coe_natCast</span>\n    <span class=\"n\">coe_intCast</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SeminormedRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">ring</span><span class=\"o\">),</span>  <span class=\"c1\">-- porting note: this was not present in the original</span>\n    <span class=\"n\">BoundedContinuousFunction.nonUnitalSeminormedRing</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Without <code>show ... from ...</code>, Lean says <code>fields missing: 'one_mul', 'mul_one'</code>.  The other two are similar and similarly annotated in the file.</p>",
        "id": 359910240,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684594590
    },
    {
        "content": "<p>The kind of question I ask in these situations is \"why did it work in Lean 3 and not now\"? I don't really like to proceed until I've got to the bottom of things, because I figure that if I don't follow up now then the next time the problem occurs it might be harder to debug than the first time.</p>",
        "id": 359910703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684594726
    },
    {
        "content": "<p>Ok, I am happy to try, but I do not know where to start...</p>",
        "id": 359910928,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684594803
    },
    {
        "content": "<p>Well I'd start by trying to figure out how the fields<code>one_mul</code> and <code>mul_one</code> were being filled in mathlib3.</p>",
        "id": 359911141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684594868
    },
    {
        "content": "<p>Presumably from <code>ring</code>? Is there no mention of <code>ring</code> or <code>apply_instance</code> or something, which summoned it, in the Lean 3 code?</p>",
        "id": 359911345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684594936
    },
    {
        "content": "<p>Just randomly fixing things runs the risk of causing more problems down the line. I think that different people have different attitudes to this sort of thing. I feel like I want to have a good understanding of every deviation from the auto-generated output, rather than just fixing it, because I feel like it gives me a better understanding of Lean 4.</p>",
        "id": 359911545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684595014
    },
    {
        "content": "<p>I'll look into it.  For the moment, this is what the Lean 3 code was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fun_like.coe_injective.ring</span> <span class=\"n\">_</span> <span class=\"n\">coe_zero</span> <span class=\"n\">coe_one</span> <span class=\"n\">coe_add</span> <span class=\"n\">coe_mul</span> <span class=\"n\">coe_neg</span> <span class=\"n\">coe_sub</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">coe_nsmul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">coe_zsmul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">coe_pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">coe_nat_cast</span>\n  <span class=\"n\">coe_int_cast</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">bounded_continuous_function.non_unital_semi_normed_ring</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 359911580,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684595033
    },
    {
        "content": "<p>Yeah that's a pretty wild Lean 3 proof, because it's hard to imagine that an instance called <code>bounded_continuous_function.non_unital_semi_normed_ring</code> was carrying around any information about <code>one</code>, and clearly we need information about <code>one</code> to make the proof compile. Do you understand how the mathlib3 proof worked? (I don't)</p>",
        "id": 359912050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684595173
    },
    {
        "content": "<p>Earlier in the file there is a <code>has_one</code> instance, explicitly.</p>",
        "id": 359912138,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684595205
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">const</span> <span class=\"n\">α</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and a similar one in Lean 3.  Anyway, thanks for the suggestions!  I'll see if I find something.</p>",
        "id": 359912482,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684595306
    },
    {
        "content": "<p>Right, but how would that last proof know about <code>one_mul</code> and <code>mul_one</code>?</p>",
        "id": 359912633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684595354
    },
    {
        "content": "<p>I assumed that Lean 3 picked up that the type was a ring, so it had a 1 and the mul_one, one_mul stuff... no?</p>",
        "id": 359912711,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684595383
    },
    {
        "content": "<p>I am probably being very naïve...</p>",
        "id": 359912786,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684595403
    },
    {
        "content": "<p>What is going to pick that up? You have only told it to look at <code>bounded_continuous_function.non_unital_semi_normed_ring</code> which I am <em>assuming</em> doesn't mention <code>one</code>. Does typeclass inference just randomly run? I mean, it can't do -- if it did, you wouldn't need to put <code>..bounded_continuous_function.non_unital_semi_normed_ring</code>. I'm just confused about something basic here.</p>",
        "id": 359912994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684595457
    },
    {
        "content": "<p>Ok, I do not know.  The <code>non_unital</code> stuff, does not have <code>one</code>, I checked!</p>",
        "id": 359913171,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684595519
    },
    {
        "content": "<p>There is something else which is funny: if instead of <code>Ring</code> i give it a <code>Monoid</code> structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">MonoidWithZero.toMonoid</span>\n</code></pre></div>\n<p>give the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HEq.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.1468859</span> <span class=\"bp\">?</span><span class=\"n\">m.1468859</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">NatCast.natCast</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 359913339,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684595566
    },
    {
        "content": "<p>(The monoid instance I found using <code>#synth</code>.)</p>",
        "id": 359913445,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684595596
    },
    {
        "content": "<p>Yeah, handling of numerals has changed completely in Lean 4 and this is something else I don't understand at all.</p>",
        "id": 359913894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684595733
    },
    {
        "content": "<p>Ok, so I'll simply undo my \"fixes\" and let someone else look at this!  Thanks!</p>",
        "id": 359914430,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684595913
    },
    {
        "content": "<p>I don't think you should undo your work, porting notes should be sufficient (unless the reviewers disagree)</p>",
        "id": 359917498,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684597016
    },
    {
        "content": "<p>Alongside the porting notes in the file, mentioning that I added the extra instances, I also left a comment on the PR and a link to this Zulip discussion.</p>\n<p>Anyway, it was certainly not my intention to cause more work for everyone involved, so I am happy to follow any decision on the issue!</p>",
        "id": 359919889,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684597870
    },
    {
        "content": "<p>Some ports are smooth: all the errors are just because you have to change <code>functor.map</code> to <code>Functor.map</code> or whatever. Others are a bit less smooth but still very much \"under control\" -- some <code>simp</code> proof fails and you convince yourself that this is because our simp lemmas are not confluent so it matters what order they're applied in, and lean 4 is applying them in a different order to Lean 3. Some errors are \"mathlib3 needed <code>apply_instance</code> here but the goal is already solved in mathlib4\". This is somehow the next easiest level of file -- it's clear what's going on so you just fix it. But if typeclasses are messing you around or simp lemmas aren't firing or universes aren't being unified then this is the hard part of porting, because you have to both fix the problem and understand why it is there so that other people either won't find themselves in the same situation later, or they will but we know what to do about it.</p>",
        "id": 359926604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684600616
    }
]