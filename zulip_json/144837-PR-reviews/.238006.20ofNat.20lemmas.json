[
    {
        "content": "<p>CI has failed on my PR with a perplexing error. <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6682583119/job/18157918529#step:10:31\">https://github.com/leanprover-community/mathlib4/actions/runs/6682583119/job/18157918529#step:10:31</a></p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Error: ./././Mathlib/SetTheory/Ordinal/Notation.lean:964:0: error: invalid occurrence of universe level 'u_1' at 'ONote.repr_opow', it does not occur at the declaration type, nor it is explicit universe level provided by the user, occurring at expression\n  LT.lt.{u_1 + 1} ↑1 ↑(Nat.succ m)\nat declaration body\n  [snip]\n</code></pre></div>\n<p>Somehow adding simp lemmas caused a universe level violation in a proof in an unrelated file? What does this error message even mean? There is no reference to <code>u_1</code> in the surface syntax</p>",
        "id": 399143841,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698578512
    },
    {
        "content": "<p>It looks like the relevant subterm is here <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6682583119/job/18157918529#step:10:274\">https://github.com/leanprover-community/mathlib4/actions/runs/6682583119/job/18157918529#step:10:274</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">LT.lt</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast_succ</span> <span class=\"n\">m_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which my infoview tells me has type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">congr</span> <span class=\"n\">Ordinal.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"n\">LT.lt</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">LT.lt</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m_1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">m_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">LT.lt</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Nat.cast_succ</span> <span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m_1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">m_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399144240,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698578871
    },
    {
        "content": "<p>Could it be an error due to a timeout?  I.e. you are seeing where <code>simp</code> failed before it would have tried to recover, but did not get a chance due to a timeout?</p>",
        "id": 399144619,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698579211
    },
    {
        "content": "<p>maybe.. how could I test that idea? is there a way to configure the timeout?</p>",
        "id": 399146012,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698580408
    },
    {
        "content": "<p>You could increase the heartbeat limit.  Maybe <code>set_option maxHeartbeats 2000000 in</code>.<br>\nThere is also a <code>count_heartbeats</code>, but I'm not exactly sure about the spelling of either.</p>",
        "id": 399146391,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698580727
    },
    {
        "content": "<p><code>#count_heartbeats in</code> reports <code>Used 8330 heartbeats, which is less than the current maximum of 200000</code></p>",
        "id": 399146914,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698581020
    },
    {
        "content": "<p>Reduced to a much smaller example which still requires <code>Mathlib.SetTheory.Ordinal.Basic</code> from my branch</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Ordinal.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Ordinal</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">charZero</span> <span class=\"o\">:</span> <span class=\"n\">CharZero</span> <span class=\"n\">Ordinal</span> <span class=\"n\">where</span>\n  <span class=\"n\">cast_injective</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_cast_lt'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_one_eq_succ</span><span class=\"o\">,</span> <span class=\"n\">Order.lt_succ_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.one_le_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span>\n    <span class=\"n\">Ordinal.nat_cast_lt'.2</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_lt_succ</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pos_iff_ne_zero.2</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ordinal</span>\n</code></pre></div>",
        "id": 399150077,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698583326
    },
    {
        "content": "<p>Ah this fails with the same error on master</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Ordinal.Arithmetic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Ordinal.nat_cast_lt.2</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399152303,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698584971
    },
    {
        "content": "<p>Okay I've fixed it with <code>Ordinal.nat_cast_lt.{0}</code>, but I don't understand how my changes triggered this error</p>",
        "id": 399152715,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698585302
    },
    {
        "content": "<p>Okay I more or less understand now. The proof was coercing to some ordinals that weren't previously there using <code>Ordinal.nat_cast_lt.2</code>, and this was fine as long as those ordinals were connected by a chain of lemmas to the ordinals in the goal. The problem was that with my PR, there was a new lemma <code>Nat.one_le_cast</code> that got rid of the ordinals <code>1 ≤ ↑n ↔ 1 ≤ n</code>, so then there was a temporary ordinal that was untethered, and we got an error about its universe being ambiguous.</p>",
        "id": 399154097,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698586412
    },
    {
        "content": "<p>I guess I was a bit too quick to cry for help here. The error message was just really opaque to me. It would be nice if it had been <code>failed to infer type</code> and actually had a squiggly on the surface syntax term which created the inference variable.</p>",
        "id": 399176375,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698604441
    }
]