[
    {
        "content": "<p>I'd like to see this PR merged. I note that it has been delegated but that tests have been requested. Perhaps the following minimal pair of tests (which could go in a new file <code>test/PPBeta.lean</code> would be sufficient):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.PPBeta</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FunLike.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.beta</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">info: ↑f a : β</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.beta</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">info: ↑f a : (fun x ↦ β) a</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 397124302,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697553766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Thanks for adding tests and getting it merged!</p>",
        "id": 397331219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697640948
    },
    {
        "content": "<p>You're welcome and likewise thanks for creating the feature</p>",
        "id": 397331460,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697641020
    },
    {
        "content": "<p>Even though Mathlib won't allow <code>set_option pp.beta true</code> I secretly plan to use it all the time locally :)</p>",
        "id": 397331580,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697641067
    },
    {
        "content": "<p>What would be really really nice would be to have it used in tooltips in the infoview. It feels like we didn't see all those non-reduced types in Lean 3.</p>",
        "id": 397332702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697641350
    },
    {
        "content": "<p>I feel I constantly see tooltips saying the type of something is <code>(fun x =&gt; A) y</code>, and yes I'm specifically mean non-reduced constant function applications.</p>",
        "id": 397332833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697641400
    },
    {
        "content": "<p>I think hiding these would be problematic though, as I think I've seen <code>rw</code> and other tactics fail if I don't clean those up first</p>",
        "id": 397333477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697641589
    },
    {
        "content": "<p>It would be much better to avoid appearance of those terms!</p>",
        "id": 397333645,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697641644
    },
    {
        "content": "<p>Here's an even smaller repro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">MyFun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MyFun</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"c1\">-- f a : (fun x =&gt; β) a</span>\n</code></pre></div>",
        "id": 397334437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697641887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>pp.beta</code> is already problematic, but if we're already here we might as well commit to it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n<p>I'd like there to be hooks into the tactic execution loop where you can beta reduce everything in sight for real, and then things like <code>pp.beta</code> are there if that's not sufficient due to corner cases where you'd otherwise accidentally see a tactic state that hasn't been treated by the hook.</p>",
        "id": 397334584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697641931
    },
    {
        "content": "<p>Has anyone else gotten this ?</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>libc++abi:<span class=\"w\"> </span>terminating<span class=\"w\"> </span>due<span class=\"w\"> </span>to<span class=\"w\"> </span>uncaught<span class=\"w\"> </span>exception<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span>lean::exception:<span class=\"w\"> </span>cannot<span class=\"w\"> </span>evaluate<span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"o\">[</span>init<span class=\"o\">]</span><span class=\"sb\">`</span><span class=\"w\"> </span>declaration<span class=\"w\"> </span><span class=\"s1\">'Lean.pp.beta'</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>same<span class=\"w\"> </span>module\n</code></pre></div>\n<p>from <code>runMathlibLinter</code>.</p>",
        "id": 397342667,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697644542
    },
    {
        "content": "<p>Nope: how do you trigger it?</p>",
        "id": 397343539,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697644853
    },
    {
        "content": "<p>It came out of the linter. Currently <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6563298904/job/17827191754\">re-running</a> on a runner.</p>",
        "id": 397351775,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697647964
    },
    {
        "content": "<p>The toolchain is kinda wonky because it still has <a href=\"https://github.com/leanprover/lean4/pull/2648\">lean4#2648</a> in it. I did get the fun experience of weird LSP behavior though.</p>",
        "id": 397352013,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697648058
    },
    {
        "content": "<p>Same error</p>",
        "id": 397352748,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697648385
    },
    {
        "content": "<p>Running it locally on master now</p>",
        "id": 397353336,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697648604
    },
    {
        "content": "<p>Seems fine with master toolchain</p>",
        "id": 397360144,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697651590
    },
    {
        "content": "<p>I also got such a failure <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6566896953/job/17839146211\">here</a>. Should I wait for someone to update the toolchains used by CI?</p>",
        "id": 397390998,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1697667899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>, I might need some more context on that failure. Which PR or branch is it for?</p>",
        "id": 397393327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697669629
    },
    {
        "content": "<p>Asking about CI failures should also always include the information \"have I merged <code>master</code>?\" :-)</p>",
        "id": 397393436,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697669718
    },
    {
        "content": "<p>It is at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7749\">#7749</a><br>\nI just merged master after the failure, so you might have to wait a bit.</p>",
        "id": 397393457,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1697669732
    },
    {
        "content": "<p>The issue still persists after merging master.</p>",
        "id": 397394973,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1697670931
    },
    {
        "content": "<p>Well at least I have company with <a href=\"https://github.com/leanprover-community/mathlib4/pull/7257\">#7257</a></p>",
        "id": 397397717,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697673330
    },
    {
        "content": "<p>Reverting <code>3c0fc273d6875e</code> and it has gone away. In its place are actual errors</p>",
        "id": 397398730,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697674131
    },
    {
        "content": "<p>What is 3c0f?</p>",
        "id": 397401366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697675992
    },
    {
        "content": "<p>The <code>pp.beta</code> PR.</p>",
        "id": 397401733,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1697676166
    },
    {
        "content": "<p>Do we need to revert it?</p>",
        "id": 397402302,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697676441
    },
    {
        "content": "<p>Not clear yet. Andrew is on the same toolchain as <code>master</code>. I am not sure why things are not showing up in CI.</p>",
        "id": 397402656,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697676574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237205.20pp.2Ebeta/near/397398730\">said</a>:</p>\n<blockquote>\n<p>Reverting <code>3c0fc273d6875e</code> and it has gone away. In its place are actual errors</p>\n</blockquote>\n<p>Is there any way to see what is triggering the <code>[init]</code> code in the <code>PPBetaOption</code> module? I'm just guessing that's what's happening, since there's not much to go by in the error message.</p>\n<p>Maybe it's worth doing a little experiment: does moving the <code>Lean.getPPBeta</code> function into the <code>Mathlib.Util.PPBeta</code> module fix the error? (Hunch: somehow a linter -- or the linting environment -- causes <code>pp.beta.name</code> to be executed, even though it's in the body of a function.)</p>",
        "id": 397407816,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697679770
    },
    {
        "content": "<p>Deleting some <code>nolint simpNF</code>'s on master, making sure <code>#lint</code> complains, and then running the linter</p>",
        "id": 397488746,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697716254
    },
    {
        "content": "<p>Odd. The linter returned nothing</p>",
        "id": 397489504,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697716530
    },
    {
        "content": "<p>Even reverting the <code>pp.beta</code> commit, I get nothing. I deleted all the <code>nolint simpNF</code>'s in <code>RepresentationTheory.Rep</code> and <code>#lint</code> is unhappy.</p>",
        "id": 397490837,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697716991
    },
    {
        "content": "<p>I'm sorry to say that PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7205\">#7205</a> was reverted in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7774\">#7774</a> . I'd love to see us restore the <code>pp.beta</code> feature that <a href=\"https://github.com/leanprover-community/mathlib4/pull/7205\">#7205</a> added.</p>",
        "id": 397512308,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697724048
    }
]