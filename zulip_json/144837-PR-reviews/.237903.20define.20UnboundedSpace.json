[
    {
        "content": "<p>I get strange timeouts in this PR. Fixes and/or explanations are welcome.</p>",
        "id": 398384051,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698195969
    },
    {
        "content": "<p>A few questions unrelated to the timeouts:</p>\n<ul>\n<li>Why is it necessary to have <code>UnboundedSpace</code>or <code>Noncompact</code> <em>types</em> rather than <code>Prop</code>-predicates and their negation? (Negative properties are prevalent in math, but they sometimes give rise to strange reasonings.)</li>\n<li>For a normed vector space to be noncompact, isn't it rather the non-finiteness of the space/field that matters. (In Berkovich's theory, trivially valued fields are there and useful and necessary!)</li>\n</ul>",
        "id": 398432785,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698221137
    },
    {
        "content": "<ul>\n<li>for the instances that imply noncompactness, the p-adic fields are useful too. Wouldn't an instance with <code>k = Q</code> treat them all at the same time?</li>\n</ul>",
        "id": 398433081,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698221257
    },
    {
        "content": "<p>My guess is that the main use is for the <code>cobounded</code> filter to be nontrivial, and the point is that we want this to be found via type class inference. I agree that arguments with \"negative\" assumptions are often inelegant (for example I’m often annoyed at statements on Hilbert spaces which explicitly exclude finite dimensional spaces) but when you’re working in a specific setting I don’t think it can really hurt. The typical example I can think of is that we don’t want to ever justify why <code>cobounded</code> is nontrivial on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>.</p>",
        "id": 398454208,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1698229122
    },
    {
        "content": "<p>Exactly, I want Lean TC to find <code>[NeBot (cobounded Real)]</code> and <code>[NeBot (cobounded E)]</code>, where <code>E</code> is a real normed space.</p>",
        "id": 398490659,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698242152
    },
    {
        "content": "<p>As for generalizations of the \"normed space is noncompact\" instance, feel free to do it (the instance exists in the main branch).</p>",
        "id": 398490957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698242228
    },
    {
        "content": "<p>I don't want to mix this generalization with addition of <code>UnboundedSpace</code></p>",
        "id": 398491203,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698242291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I proved that a normed space over an infinite normed field is noncompact in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8349\">#8349</a></p>",
        "id": 401528508,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699721185
    },
    {
        "content": "<p>Remark : The docstring of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NontriviallyNormedField#doc\">docs#NontriviallyNormedField</a> says that there should be an element of norm not one, but the actual condition (the one that you have to prove) is that there is an element of norm &gt; 1.  I agree that the given definition is simpler, but maybe the docstring could be adjusted.</p>",
        "id": 401529399,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699722128
    },
    {
        "content": "<p>Aren't they equivalent?</p>",
        "id": 401530757,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699723612
    },
    {
        "content": "<p>They're equivalent, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/8349/files#diff-7615927f094a48762a3288414bb2302c8c7784b425b709bd7a4dd7bff068faffR816\">https://github.com/leanprover-community/mathlib4/pull/8349/files#diff-7615927f094a48762a3288414bb2302c8c7784b425b709bd7a4dd7bff068faffR816</a></p>",
        "id": 401533901,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699726819
    }
]