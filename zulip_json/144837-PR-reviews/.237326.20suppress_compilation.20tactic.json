[
    {
        "content": "<p>I suggest we merge this. However I usually avoid merging any meta code. I think it's an important and desirable change.</p>",
        "id": 394587113,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1696322635
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392451565\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392451565</a></p>",
        "id": 394587204,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1696322664
    },
    {
        "content": "<p>I agree but felt a bit unsure approving it seeing as I was somewhat involved with the writing of it. But yeah I think whats there is good and useful also so I'd suggest merging.</p>",
        "id": 394599973,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696327450
    },
    {
        "content": "<p>I, and I expect many others, feel somewhat uneasy in merging this because it doesn't address the underlying issue. But this is clearly labeled as a workaround and I don't expect this particular usage has any drawbacks. So let's merge this while keeping a careful eye on future usage.</p>",
        "id": 394615462,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696332768
    },
    {
        "content": "<p>I don't think we need to feel uneasy; IMHO this workaround is better than the existing workaround of randomly sprinkling <code>noncomputable</code> in front of various definitions. However I certainly agree that the best would be a fix in Lean so we need no workaround!</p>",
        "id": 394627123,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1696336862
    },
    {
        "content": "<p>Oh you've sent it to bors <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> :)</p>",
        "id": 394627221,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1696336901
    },
    {
        "content": "<p>I think asking core for a <code>set_option</code> also is not unreasonable. You can pass that on the command line and hence automate to an extent. Though this should not preclude the current PR.</p>",
        "id": 394629888,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696337823
    },
    {
        "content": "<p>What is the underlying issue you are thinking of <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>?  To me it seems useful to say \"I'm a mathematician and I don't want you to compile code for this defintion about functions between functions on quotient of some inductive type that represents  tensor products as the algorithm is silly and won't be ever executed for real anyway \". What I'm saying is even if there is no bug in core that causes the compiler to eat memory I would like my purely mathematical algorithms not to slow down my mathlib at all.</p>",
        "id": 394630533,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696338028
    },
    {
        "content": "<p>IMO it's a bug that mathematicians have to worry at all whether their code is compiled or not :) In the best case the compiler would be cheap enough that it's always invoked.</p>",
        "id": 394631027,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696338185
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2619\">lean4#2619</a> should be more robust than parsing syntax</p>",
        "id": 394637204,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696340089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237326.20suppress_compilation.20tactic/near/394631027\">said</a>:</p>\n<blockquote>\n<p>IMO it's a bug that mathematicians have to worry at all whether their code is compiled or not <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> In the best case the compiler would be cheap enough that it's always invoked.</p>\n</blockquote>\n<p>Oh for sure, but do you know if that is actually realistic? Running all compiler phases on an arbitrary mathlib definition may simply be computationally hard for all I know?</p>",
        "id": 394642684,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696341736
    },
    {
        "content": "<p>Compiling \"swap the tensor product under the quotient\" should surely not be as hard as the compiler is making it out to be</p>",
        "id": 394660420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696347387
    },
    {
        "content": "<p>I wonder if we can speed things up with an <code>implemented_by</code> on <code>tensor_product.lift</code> that uses <code>unquot</code></p>",
        "id": 394660605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696347434
    },
    {
        "content": "<p>that sounds like an even more complicated workaround! Mathematicians will have to learn about both <code>implemented_by</code> and <code>unquot</code>!</p>",
        "id": 394677511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696353393
    },
    {
        "content": "<p>If my suggestion works we'd only have to write it once and mathematicians could ignore it like they do other <code>implemented_by</code>s</p>",
        "id": 394718902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696371740
    },
    {
        "content": "<p>... but I suspect it won't</p>",
        "id": 394719093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696371895
    },
    {
        "content": "<p>How plausible is on-demand compilation, so that the cost is paid only if and when that definition is actually run? (I assume ”compilation” here means the Expr to IR phases, not actual generation and compilation of C files, and which, if I understand correctly, we don't do in mathlib.)</p>\n<p>Ah, already discussed at <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392384709\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392384709</a></p>",
        "id": 394787673,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696408588
    }
]