[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span>, now that you're proposing to add a lot of API to <code>StrictSeries</code>, I have some concerns.</p>\n<p>1) I think defining it using <code>StrictMono</code> is unnecessarily burdensome: why isn't it just a list with elements that are pairwise <code>&lt;</code>?  Then <code>StrictMono</code> is just a theorem, not something you need to keep proving.<br>\n2) If we're adding this much API, perhaps it should be more general (not just <code>&lt;</code> but an arbitrary relation or type). E.g. we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.path/src\">src#quiver.path</a> already.</p>",
        "id": 356952195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683632231
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/composition_series\">docs#composition_series</a> is a version with an different relation</p>",
        "id": 356955836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683632954
    },
    {
        "content": "<p>Here monotonicity is proven by relating adjacent elements, which seems more useful</p>",
        "id": 356955960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683632984
    },
    {
        "content": "<p>This makes sense. I will temporarily mark these two PRs as draft and rework definitions of <code>StrictSeries</code>. Thanks</p>",
        "id": 357132082,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1683681359
    },
    {
        "content": "<p>The first attempt to define a <code>RelSeries</code> is at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3878\">!4#3878</a></p>",
        "id": 357142537,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1683686742
    },
    {
        "content": "<p>Two possible alternative designs, that might allow even more reuse:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RelSeries</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">objects</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">not_nil</span> <span class=\"o\">:</span> <span class=\"n\">objects</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span>\n  <span class=\"n\">chain</span> <span class=\"o\">:</span> <span class=\"n\">Chain'</span> <span class=\"n\">r</span> <span class=\"n\">objects</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.Quiver.Path</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Quiver</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">_r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Quiver</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Quiver</span>\n\n<span class=\"sd\">/-- A series with specified endpoints. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">RelSeries'</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Path</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RelSeries</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">RelSeries'</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 357154776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683693484
    },
    {
        "content": "<p>Fwiw, I think I prefer the fin spelling to the list spelling</p>",
        "id": 357203564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683707416
    },
    {
        "content": "<p>For the use case of Krull dimension, the most important bit about <code>RelSeries</code> is its length, so I think it make sense to make length explicit, otherwise a separate theorem about length needs to be proved for every construction related to <code>RelSeries</code></p>",
        "id": 357210164,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1683708813
    },
    {
        "content": "<p>I'm not sure why having it as a field is any more explicit!</p>",
        "id": 357244132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683716128
    },
    {
        "content": "<p>The point of the two alternatives is that there is lots more shareable API!</p>",
        "id": 357244195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683716147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Why do you prefer the <code>fin</code> spelling?</p>",
        "id": 357247314,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1683716754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/StrictSeries.20!4.233858.2C.20!4.233852/near/357244195\">said</a>:</p>\n<blockquote>\n<p>The point of the two alternatives is that there is lots more shareable API!</p>\n</blockquote>\n<p>For example by using the path implementation, after constructing inserting an element operation, one has to prove the result has length exactly one bigger.</p>",
        "id": 357251887,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1683717641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252627\">Jujian Zhang</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/StrictSeries.20!4.233858.2C.20!4.233852/near/357247314\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> Why do you prefer the <code>fin</code> spelling?</p>\n</blockquote>\n<p>I think mainly because I've worked with fin tuple a lot more than I have lists. I don't have a particularly objective argument to use.</p>\n<p>Perhaps it's relevant that the recent cohomology stuff is also using fin tuples, though I don't know whether there's any overlap here.</p>",
        "id": 357257266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683718630
    },
    {
        "content": "<p>Okay, thanks, I think I'm happy if you want to stick with <code>Fin</code> tuples.</p>",
        "id": 357276029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683722511
    },
    {
        "content": "<p>Can I pin on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3878\">!4#3878</a> please.</p>",
        "id": 361249970,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685089079
    },
    {
        "content": "<p>Can I pin on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3878\">!4#3878</a> please.</p>",
        "id": 361250525,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685089215
    },
    {
        "content": "<p>Sorry this has been slow. The porting effort is holding up many things! :-)</p>\n<p>Would you mind either adding the lemma(s) relating it to <code>List.Chain' r (List.ofFn s.toFun)</code>, or at least a comment about <code>Chain'</code>, so that users of this API are aware of the connection?</p>\n<p>(If you really want to be thorough you could mention the <code>Quiver.path</code> connection too, but I think that is less important.)</p>",
        "id": 361611508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685205644
    },
    {
        "content": "<p>Sorry for the late reply, I have added a bijection between <code>RelSeries</code> and nonempty <code>List</code>  satisfying chain condition.</p>",
        "id": 362021882,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685388754
    },
    {
        "content": "<p>And also there is a very weird bug (I think this might be a bug), in <code>RelSeries.lean</code>, if I import <code>Mathlib.Data.List.ofFn</code>, then build will fail, but if I import something that imported <code>Mathlib.Data.List.ofFn</code> then it will build on github</p>",
        "id": 362021966,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685388805
    },
    {
        "content": "<p>If I import <code>Mathlib.Data.List.ofFn</code> directly and run <code>lake build</code>, then this is the (important bit?) of the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">KrullDimension.lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.OfFn</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">contains</span> <span class=\"bp\">'</span><span class=\"n\">_private.Mathlib.Data.List.OfFn.0.List.replicate.match_1.splitter'</span> <span class=\"k\">from</span> <span class=\"n\">Mathlib.Data.List.ofFn</span>\n</code></pre></div>",
        "id": 362022093,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685388859
    },
    {
        "content": "<p>one can see the failed run at <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/5114761577/jobs/9195334959\">here</a> (this is where <code>Mathlib.Data.List.ofFn</code> is imported directly) and successful run at <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/5114799234/jobs/9195413468\">here</a>, <code>Mathlib.Data.List.Indexes</code> is imported so that<code>ofFn</code> is only indirectly imported</p>",
        "id": 362022355,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685388969
    }
]