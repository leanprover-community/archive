[
    {
        "content": "<p>Parts of <a href=\"https://github.com/leanprover-community/mathlib4/pull/3333\">!4#3333</a> are massively complicated by the fact that we cannot make MulOpposite semireducible any more (as was done in mathlib3 via a local attribute). I just pushed <a href=\"https://github.com/leanprover-community/mathlib4/pull/3333/commits/4731f35b2fc2089a2c7f6f0a6b5cab957b519e17\">a commit</a> that manually re-does some of the <code>MulEquiv</code>s there, but I don't know if that's the right approach. Feel free to just revert the commit if it is the wrong approach.</p>",
        "id": 359026248,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684340624
    },
    {
        "content": "<p>I meant to post this in the mathlib4 stream, since this is not ready for review</p>",
        "id": 359027625,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684341004
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOpposite#doc\">docs4#MulOpposite</a></p>",
        "id": 359030032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684341674
    },
    {
        "content": "<p>Thanks. Also meant to say \"semireducible\" in the original message, fixed now.</p>",
        "id": 359030255,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684341730
    },
    {
        "content": "<p>Yeah, I was going to say \"it's a structure, which has the same effect as being irreducible\". So is the issue that the mathlib3 version abused definitional equality?</p>",
        "id": 359030363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684341755
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/zmod/quotient.lean#L102\">locally</a></p>",
        "id": 359030408,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684341764
    },
    {
        "content": "<p>I have some Lean time now -- can you give me an example of something which is painful? I'd be interested to see.</p>",
        "id": 359030514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684341794
    },
    {
        "content": "<p>There are two <code>rfl</code> proofs in Data.ZMod.Quotient that don't work anymore (<code>zpowersQuotientStabilizerEquiv_symm_apply</code>, <code>orbitZpowersEquiv_symm_apply</code>). Those should be good examples. Or you can look at <code>zpowersQuotientStabilizerEquiv</code> before my last commit there.</p>",
        "id": 359030919,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684341898
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/two.20different.20quotients.20by.20subgroup\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/two.20different.20quotients.20by.20subgroup</a> (the whole thread) is related</p>",
        "id": 359031785,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684342120
    },
    {
        "content": "<blockquote>\n<p>So is the issue that the mathlib3 version abused definitional equality?</p>\n</blockquote>\n<p>Or that it shouldn't have been <code>irreducible</code> in the first place; <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_opposite\">docs#add_opposite</a> never was.</p>",
        "id": 359044038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684345337
    },
    {
        "content": "<p>Both are irreducible in mathlib4 at the moment</p>",
        "id": 359044242,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684345392
    },
    {
        "content": "<p>Worse, they're structures, right?</p>",
        "id": 359044489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684345446
    },
    {
        "content": "<p>I don't remember the motivation, but maybe it's now moot after <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a> landed and we can revert it?</p>",
        "id": 359044695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684345509
    },
    {
        "content": "<p>This was done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1036\">!4#1036</a>. I quite like them as structures conceptually speaking, though. I wonder how many other files break, hopefully not many. My uneducated impression was that there's a lot of missing API on interactions between MulOpposite/AddOpposite and Multiplicative/Additive. There's discussion at <a href=\"#narrow/stream/287929-mathlib4/topic/Order.2EGaloisConnection\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Order.2EGaloisConnection</a></p>",
        "id": 359046941,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684346111
    },
    {
        "content": "<p>It's specifically this quotient stuff where the defeq is needed</p>",
        "id": 359047392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684346211
    },
    {
        "content": "<p>Here's a way to write that definition that might help preserve the defeqs we want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">by</span>\n    <span class=\"n\">letI</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">zmultiplesQuotientStabilizerEquiv</span> <span class=\"o\">(</span><span class=\"n\">Additive.ofMul</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n    <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">QuotientGroup.toQuotientAddGroup</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">AddEquiv.toMultiplicative</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"n\">refine</span> <span class=\"n\">AddEquiv.toMultiplicative</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 359047495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684346237
    },
    {
        "content": "<p>Specifically, this is the missing piece:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Normal.toAddSubgroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddSubgroup.Normal</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">QuotientGroup.toQuotientAddGroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span> <span class=\"bp\">≃*</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">Subgroup.toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 359048482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684346500
    },
    {
        "content": "<p>How does one make the <code>Subgroup</code> of <code>Multiplicative G</code> corresponding to <code>s : AddSubgroup G</code>?<br>\nEdit: aah, you just told me!</p>\n<p>Eric I don't follow your claim that defeq is _needed_. Why can't we just have a bunch of canonical isomorphisms? I'm pretty sure we already have the isomorphism G/M -&gt; G/N coming from an equality M=N.</p>",
        "id": 359048494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684346507
    },
    {
        "content": "<p>In lean3 those types were true by definition</p>",
        "id": 359048510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684346511
    },
    {
        "content": "<p>Kevin, it's not _needed_ per se; but it was very convenient. Indeed, the isomorphism we're missing is the one I give above</p>",
        "id": 359048657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684346541
    },
    {
        "content": "<p>I guess by \"needed\" what I mean is \"structure eta alone is not enough to keep the defeqs we had in Lean 3\"</p>",
        "id": 359048740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684346567
    },
    {
        "content": "<p>Whereas for almost all other uses of <code>MulOpposite</code>, the defeqs we had in Lean3 are still around</p>",
        "id": 359048859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684346603
    },
    {
        "content": "<p>The <code>instance</code> shouldn't be hard; as for the <code>def</code>, I feel like we should have a construction <code>(Additive G \\equiv+ A) \\equiv (G \\equiv* Multiplicative A)</code>,  and this would I think help with it.</p>",
        "id": 359050307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684347059
    },
    {
        "content": "<p>We have that, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddEquiv.toMultiplicative%27#doc\">docs4#AddEquiv.toMultiplicative'</a></p>",
        "id": 359050372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347079
    },
    {
        "content": "<blockquote>\n<p>I'm pretty sure we already have the isomorphism G/M -&gt; G/N coming from an equality M=N.</p>\n</blockquote>\n<p>I agree, but I can't find it. Do you remember what it's called?</p>",
        "id": 359050468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347111
    },
    {
        "content": "<p>My suggestion has better notation ;-)</p>",
        "id": 359050472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684347112
    },
    {
        "content": "<p>You mean it has the parens on both sides?</p>",
        "id": 359050627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347154
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuotientGroup.quotientMulEquivOfEq#doc\">docs4#QuotientGroup.quotientMulEquivOfEq</a> for the equality. No I just meant that I used A for an additive group.</p>",
        "id": 359050910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684347250
    },
    {
        "content": "<p><code>QuotientGroup.toQuotientAddGroup</code> will need to be an implemention of that function from scratch, with tweaked types</p>",
        "id": 359051330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347373
    },
    {
        "content": "<p>Hmm, maybe this whole problem goes away if we make <code>MulOpposite</code> and <code>AddOpposite</code> the same structure under the hood...</p>",
        "id": 359051504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347436
    },
    {
        "content": "<p>You are a Lean guru if you can guess the error I get from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.TypeTags</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subgroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Normal.toAddSubgroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddSubgroup.Normal</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">QuotientGroup.toQuotientAddGroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span> <span class=\"bp\">≃*</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">Subgroup.toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">AddEquiv.toMultiplicative'</span> <span class=\"o\">(</span><span class=\"n\">AddEquiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 359051699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684347496
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">AddZeroClass</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span>\n</code></pre></div>\n</div></div>",
        "id": 359051893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684347557
    },
    {
        "content": "<p><code>error: nice try</code>?</p>",
        "id": 359052199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347651
    },
    {
        "content": "<p>kind of</p>",
        "id": 359052244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684347664
    },
    {
        "content": "<p>Yeah ok that's not on the list of things I expected</p>",
        "id": 359052288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347676
    },
    {
        "content": "<p>But it's going to ask you to prove that <code>MulOpposite G = AddOpposite (Additive G)</code>, and that defeq broke</p>",
        "id": 359052353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347697
    },
    {
        "content": "<p>I'm confused about why opposites have got anything to do with anything.</p>",
        "id": 359052403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684347720
    },
    {
        "content": "<p>Because the quotient is defined by the action by the opposite group (right multiplication)</p>",
        "id": 359052497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347738
    },
    {
        "content": "<p>So deep down there is an existential quantifying over <code>MulOpposite</code></p>",
        "id": 359052552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347757
    },
    {
        "content": "<p>I was hoping <code>Additive (G ⧸ S) = (Additive G ⧸ (Subgroup.toAddSubgroup S))</code> would be <code>rfl</code></p>",
        "id": 359052804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684347831
    },
    {
        "content": "<p>It's not, but it was <del>in Lean 3</del> before we made <code>MulOpposite</code> a structure. That's the problem.</p>",
        "id": 359052840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347840
    },
    {
        "content": "<p>I guess this is an artificial hope anyway; really we should be writing down the isomorphisms, right?</p>",
        "id": 359053115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684347923
    },
    {
        "content": "<p>Well, it depends where the threshold for \"defeq abuse is ok\" is</p>",
        "id": 359053294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!4.233333.20Data.2EZMod.2EQuotient/near/359051504\">said</a>:</p>\n<blockquote>\n<p>Hmm, maybe this whole problem goes away if we make <code>MulOpposite</code> and <code>AddOpposite</code> the same structure under the hood...</p>\n</blockquote>\n<p>I'm trying this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4050\">https://github.com/leanprover-community/mathlib4/pull/4050</a></p>",
        "id": 359053335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684347978
    },
    {
        "content": "<p>(I restarted Lean and the problem I posted went away)</p>",
        "id": 359056478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684348899
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 359056546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684348919
    },
    {
        "content": "<p>(does your deleted code work?)</p>",
        "id": 359057026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684349065
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.TypeTags</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subgroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Normal.toAddSubgroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddSubgroup.Normal</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">conj_mem</span> <span class=\"o\">:=</span> <span class=\"n\">Normal.conj_mem</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">QuotientGroup.toQuotientAddGroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span> <span class=\"bp\">≃*</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">AddEquiv.toMultiplicative'</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Works fine (and is not slow as previously claimed)</p>",
        "id": 359057277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349157
    },
    {
        "content": "<p>Sure, but the sorry is just as hard as the original</p>",
        "id": 359057442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684349196
    },
    {
        "content": "<p>(that <code>instance</code> should definitely be added to mathlib btw)</p>",
        "id": 359057488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684349214
    },
    {
        "content": "<p>It doesn't have a mix of additive and multiplicative though, so it feels like progress.</p>",
        "id": 359057577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349237
    },
    {
        "content": "<p>Is it expected that I write <code>toAddsubgroup S</code> and Lean prettyprints it as the awful <code>↑(RelIso.toRelEmbedding toAddSubgroup).toEmbedding S</code>?</p>",
        "id": 359057907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349316
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4050\">!4#4050</a> works, and lets <code>rfl</code> close the sorry</p>",
        "id": 359058510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684349511
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Opposite#doc\">docs4#Opposite</a></p>",
        "id": 359058769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349577
    },
    {
        "content": "<p>Why not just use <code>Opposite</code>?</p>",
        "id": 359058892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349615
    },
    {
        "content": "<p>Because I don't know whether we want <code>Opposite</code> to be defeq to <code>MulOpposite</code></p>",
        "id": 359058937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684349633
    },
    {
        "content": "<p>But you do think that we want <code>AddOpposite</code> to be defeq to <code>MulOpposite</code>??</p>",
        "id": 359059056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349662
    },
    {
        "content": "<p>Usually at this point you start going on about diamonds and semirings</p>",
        "id": 359059104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349680
    },
    {
        "content": "<p>It's certainly a hilarious fix though!</p>",
        "id": 359059197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349718
    },
    {
        "content": "<p>Yes, because we have <code>Multiplicative X = Additive X</code> right now, and it's weird to have that be true but not <code>Multiplicative (AddOpposite X) = Additive (MulOpposite X)</code></p>",
        "id": 359059281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684349747
    },
    {
        "content": "<p>It's a trade off between having \"abuse\" of defeqs and having to write lots of really stupid boilerplate</p>",
        "id": 359059402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684349778
    },
    {
        "content": "<p>Until the abuse starts causing harm, the easier choice is to put off the boilerplate until it's really needed</p>",
        "id": 359059477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684349806
    },
    {
        "content": "<p>With the advent of <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a> I am a bit confused about which of <code>def thing_which_bijects_with_X (X : Type) := X</code> and <code>structure thing_which_bijects_with_X (X : Type) := { random_name : X}</code> we prefer nowadays.</p>",
        "id": 359059636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349856
    },
    {
        "content": "<p>The former is still a lot more convenient for avoiding boilerplate, which is why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderDual#doc\">docs4#OrderDual</a> still uses it</p>",
        "id": 359059803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684349903
    },
    {
        "content": "<p>What's wrong with boilerplate? I should think ChatGPT could write it all by now anyway</p>",
        "id": 359060054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684349997
    },
    {
        "content": "<p>Stuff like <code>QuotientGroup.toQuotientAddGroup</code> is fine, but it's nice when the stupid boilerplate can be proved by <code>rfl</code></p>",
        "id": 359061703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684350458
    },
    {
        "content": "<p>The \"category theory\" proof of <code>Additive G ⧸ toAddSubgroup S ≃+ Additive (G ⧸ S)</code> has the disadvantage that it uses the first isomorphism theorem (the isomorphism is induced from the surjection G -&gt; G/S, additivised) so the inverse is noncomputable. I don't know how serious that problem is.</p>",
        "id": 359083388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684357948
    },
    {
        "content": "<p>What the heck is going on here BTW? I have an obscure error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.TypeTags</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subgroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Normal.toAddSubgroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddSubgroup.Normal</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">conj_mem</span> <span class=\"o\">:=</span> <span class=\"n\">Normal.conj_mem</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span> <span class=\"bp\">≃+</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">QuotientAddGroup.quotientAddEquivOfEq</span> <span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span> <span class=\"bp\">≃+</span> <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"o\">(</span><span class=\"n\">QuotientAddGroup.quotientKerEquivOfSurjective</span>\n    <span class=\"o\">(</span><span class=\"n\">MonoidHom.toAdditive</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">IR check failed at 'foo._rarg', error: unknown declaration 'QuotientAddGroup.quotientKerEquivOfSurjective'</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">QuotientAddGroup.quotientKerEquivOfSurjective</span> <span class=\"c1\">-- works fine</span>\n</code></pre></div>\n<p>Edit: fixed by marking <code>foo</code> noncomputable. That's a pretty weird way to tell me to do that :-/</p>",
        "id": 359083427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684357971
    },
    {
        "content": "<p>Here's what I imagine the \"category theory philosophy\" proof looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.TypeTags</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subgroup</span> <span class=\"n\">MonoidHom</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Normal.toAddSubgroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddSubgroup.Normal</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">conj_mem</span> <span class=\"o\">:=</span> <span class=\"n\">Normal.conj_mem</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma1</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">toAdditive</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma2</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">toAdditive</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span> <span class=\"bp\">≃+</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">QuotientAddGroup.quotientAddEquivOfEq</span> <span class=\"o\">(</span><span class=\"n\">lemma2</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span> <span class=\"bp\">≃+</span> <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"o\">(</span><span class=\"n\">QuotientAddGroup.quotientKerEquivOfSurjective</span>\n    <span class=\"o\">(</span><span class=\"n\">MonoidHom.toAdditive</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">$</span>\n    <span class=\"n\">QuotientGroup.mk'_surjective</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- at least this part is computable</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">QuotientGroup.quotientMulEquivOfEq</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">QuotientGroup.mk</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">QuotientGroup.toQuotientAddGroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span> <span class=\"bp\">≃*</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">AddEquiv.toMultiplicative'</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Still one sorry to go</p>",
        "id": 359087916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684360005
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lemma2</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">AddMonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">toAdditive</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">g</span>\n  <span class=\"n\">exact</span> <span class=\"n\">SetLike.ext_iff.1</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.ker_mk'</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">g</span> <span class=\"c1\">-- more defeq abuse</span>\n</code></pre></div>\n<p>So I'm moaning about defeq abuse on the one hand and then using it on the other :-/</p>",
        "id": 359090197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684361053
    },
    {
        "content": "<p>IMO it's totally unreasonable for these stupid isomorphisms to be non-computable, when in lean3 it was \"the identity\"</p>",
        "id": 359091782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684361795
    },
    {
        "content": "<p>(for those who don't care about computability: this also has a lousy defeq in the reverse direction)</p>",
        "id": 359091871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684361848
    },
    {
        "content": "<p>I'll cleanup my AddOpposite = MulOpposite PR tomorrow, which should optimistically remove all the hacks from this port</p>",
        "id": 359092056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684361931
    },
    {
        "content": "<p>Why not go the whole hog and let's go back to <code>AddOpposite X := X</code>?</p>",
        "id": 359092134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684361985
    },
    {
        "content": "<p>I guess a strongly related question is \"now we can't switch between irreducible and semireducible at will, do we want always irreducible or always semireducible\".</p>",
        "id": 359094212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684363032
    },
    {
        "content": "<p>I've restarted <a href=\"https://github.com/leanprover-community/mathlib4/pull/3333\">!4#3333</a> at <a href=\"https://github.com/leanprover-community/mathlib4/pull/4074\">!4#4074</a> and the port was trivial after <a href=\"https://github.com/leanprover-community/mathlib4/pull/4050\">!4#4050</a></p>",
        "id": 359342369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684401884
    },
    {
        "content": "<p>I don't have time to read this thread right now unfortunately so maybe you have all already solved this issue, but I had a go at removing the relevant local attribute in mathlib3 by being a lot more explicit at various equivs in <a href=\"https://github.com/leanprover-community/mathlib/tree/alexjbest/bye-semired\">https://github.com/leanprover-community/mathlib/tree/alexjbest/bye-semired</a> feel free to adopt it if its helpful</p>",
        "id": 359501007,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1684445339
    },
    {
        "content": "<p>My preference would be to merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/4050\">!4#4050</a> (which restores the Lean3 behavior we need for this file), and consider a larger refactor post-port</p>",
        "id": 359501503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684445542
    }
]