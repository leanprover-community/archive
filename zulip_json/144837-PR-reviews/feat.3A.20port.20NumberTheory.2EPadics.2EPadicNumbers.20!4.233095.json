[
    {
        "content": "<p>I have managed to get <code>padicNumbers.lean</code> compile now. But the linter is complaining on line 840 and 1154. On line 840, the linter timed out with this error message: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simplify</span> <span class=\"n\">fails</span> <span class=\"n\">on</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span><span class=\"o\">:</span>\n\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">simp'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>On 1154, the theorem reads</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">addValuation.apply</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Padic.addValuation</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x.valuation</span> <span class=\"o\">:</span> <span class=\"n\">WithTop</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>the linter complains that the left hand side is not in simp normal form while left hand side is exactly what linter thinks should be simplified to.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Padic.addValuation.apply</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  ZeroHom.toFun (↑Padic.addValuation.toMonoidWithZeroHom) x</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  ↑Padic.addValuation x</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [@ne_eq, @ZeroHom.toFun_eq_coe, @MonoidWithZeroHom.toZeroHom_coe, @Valuation.toMonoidWithZeroHom_coe_eq_coe]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n</code></pre></div>\n<p>How do I fix these two linter errors please</p>",
        "id": 358657841,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1684226200
    },
    {
        "content": "<p><code>Valuation.toMonoidWithZeroHom_coe_eq_coe</code> sounds suspicious.</p>",
        "id": 358658822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684226470
    },
    {
        "content": "<p>And the discrepancy between the LHS's makes me wonder if you accidentally have two different coercions.</p>",
        "id": 358658911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684226496
    },
    {
        "content": "<p>I am not sure how to check if I made two coercions, even if I change it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">addValuation.apply</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Padic.addValuation</span> <span class=\"o\">:</span> <span class=\"n\">AddValuation</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x.valuation</span> <span class=\"o\">:</span> <span class=\"n\">WithTop</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>Linter still says the same thing</p>",
        "id": 358662088,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1684227368
    },
    {
        "content": "<p>Can I start debugging from the current state of the PR?</p>",
        "id": 358662653,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684227516
    },
    {
        "content": "<p>Sure thing, thanks!</p>",
        "id": 358665431,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1684228160
    },
    {
        "content": "<p>Hrm, maybe the <code>CoeFun</code> on <code>AddValuation</code> isn't set up correctly? The LHS simplifies to <code>FunLike.coe</code></p>",
        "id": 358671425,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684229506
    }
]