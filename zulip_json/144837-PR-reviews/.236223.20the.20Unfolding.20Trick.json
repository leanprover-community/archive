[
    {
        "content": "<p>This is a forward port, but it is missing #align statement. Doesn't mathport generate them any more?</p>",
        "id": 389441743,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694011126
    },
    {
        "content": "<p>We didn't use mathport for it; if I recall, it made more problems than was worth it, and was easier to port by hand... Do you really still need those <code>#align</code> things? If so, how should I go about adding them?...</p>",
        "id": 389446813,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694012264
    },
    {
        "content": "<p>Wait, did you not know about <a href=\"https://leanprover-community.github.io/mathlib-port-status/out-of-sync\">#outofsync</a>?</p>",
        "id": 389453149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694013712
    },
    {
        "content": "<p>Honestly, I don't think #align is important here, as the PR you are porting is a very recent addition to mathlib3 so it is very unlikely that any project in the wild uses any of the new results (unless you have some project which does and which you'd like to port automatically to mathlib4). But since the general rule is rather to put in the #align I'd like the support of another maintainer to proceed.</p>",
        "id": 389465782,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694015619
    },
    {
        "content": "<p>I thought <a href=\"https://leanprover-community.github.io/mathlib-port-status/out-of-sync\">#outofsync</a> is broken</p>",
        "id": 389472729,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694017341
    },
    {
        "content": "<p>It's not. Johan restarted the script a while ago without telling anyone, so it has been working for a while.</p>",
        "id": 389476564,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694018301
    },
    {
        "content": "<p>Please let me know what you guys decide about the necessity of <code>#align</code> (of course I'd rather not have to add the lines manually, but if that's what it takes...). I don't have any remaining wild mathlib3 code relying on this (that I can't manually port to mathlib4)...</p>",
        "id": 389505106,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694029083
    },
    {
        "content": "<p>I think we can do without the #align. I'm mostly retroactively suffering to know you ported that by hand <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span></p>",
        "id": 389505720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694029355
    },
    {
        "content": "<p>Stupid question: I thought we were supposed to use <code>Type _</code> now, but I was asked to change things back to <code>Type*</code>? When should I use one over the other?</p>",
        "id": 389506210,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694029585
    },
    {
        "content": "<p>Fashion is very unstable. Now <code>Type*</code> is making a great come-back.</p>",
        "id": 389506338,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694029667
    },
    {
        "content": "<p>Except I just changed one <code>Type _</code> to <code>Type*</code> and it broke...?</p>",
        "id": 389506431,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694029702
    },
    {
        "content": "<p>It shouldn't</p>",
        "id": 389506511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694029751
    },
    {
        "content": "<p>It might if the new universe is a function of the remaining ones, right?</p>",
        "id": 389506725,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694029874
    },
    {
        "content": "<p>Well maybe I'm doing something wrong? It broke on line 1552 of Mathlib/Topology/Algebra/InfiniteSum/Basic.lean in the PR</p>",
        "id": 389506773,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694029907
    },
    {
        "content": "<p>I had queued up changing all <code>Type _</code>s to <code>Type*</code>s and luckily had the idea to try one first to see if it would work...</p>",
        "id": 389506869,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694029938
    },
    {
        "content": "<p>My understanding is that <code>Type*</code> tries hard to create a new universe independent of all the others, while <code>Type _</code> creates a universe metavariable that might get unified in order to solve some constraints.</p>",
        "id": 389506882,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694029948
    },
    {
        "content": "<p>E.g. I think that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>might fail (I'm on mobile and cannot test...).</p>",
        "id": 389507049,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694030020
    },
    {
        "content": "<p>In the previous example, replacing <code>*</code> by <code> _</code> should not fail, hopefully.</p>",
        "id": 389507188,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694030079
    },
    {
        "content": "<p>So... what should I do in this case, where it's failing? Just let them be <code>Type _</code>s?...</p>",
        "id": 389527885,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694040601
    },
    {
        "content": "<p>I do not know if there is any agreed convention, but I would use <code>Type*</code> as the standard and default to <code>Type _</code> when that gives an error.  So... what you said!</p>",
        "id": 389564853,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694060188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236223.20the.20Unfolding.20Trick/near/389527885\">said</a>:</p>\n<blockquote>\n<p>So... what should I do in this case, where it's failing? Just let them be <code>Type _</code>s?...</p>\n</blockquote>\n<p>Post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 389578882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694067088
    },
    {
        "content": "<p>Hmm it's not so easy to make a mwe out of the PR; it's <a href=\"https://github.com/leanprover-community/mathlib4/pull/6223\">#6223</a> - can you see how the <code>Type*</code> at line 1552 of Mathlib/Topology/Algebra/InfiniteSum/Basic has an error?...</p>",
        "id": 389672695,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694096241
    },
    {
        "content": "<p>I will have a look</p>",
        "id": 389689707,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694100272
    },
    {
        "content": "<p>Oh, I think you just have to merge master. This has been waiting for quite a while (partly my fault, I never went back to this PR, sorry) and at the time <code>Type*</code> did not exist.</p>",
        "id": 389694091,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694101139
    },
    {
        "content": "<p>Alex, to explain: <code>Type _</code> creates metavariables for the universe levels, so when you write <code>α β : Type _</code>, Lean basically does <code>α : Type ?u</code> and <code>β : Type ?v</code>, and then it keeps elaborating trying to determine if it needs to set <code>?u = ?v</code> (or some other relationship) or if they can be independent. This causes a quite large overhead</p>\n<p>So <code>Type*</code> was introduced (a few weeks ago) which, when the user inputs <code>α β : Type*</code>, basically does <code>α : Type u</code> and <code>β : Type v</code>, where <code>u v</code> are new implicit universe levels, instead of metavariables. This means that if there <em>is</em> a relationship that is required by the type of the statement, then things will fail because <code>u</code> and <code>v</code> are distinct. In practice, outside of certain areas of the library (e.g. category theory and set theory), this is rarely a problem and the universes can all be independent.</p>",
        "id": 389696227,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694101780
    },
    {
        "content": "<p>There are plans for a <code>Type _</code> linter but right now the procedure is to use <code>Type*</code> unless it fails. If so, use <code>Type _</code>. When the linter is implemented, we should see these universe constraints getting spit out and explicitly spell them out.</p>",
        "id": 389698431,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694102464
    },
    {
        "content": "<p>Thanks! I'm just a lowly mathematician. I'll <code>Type*</code> or <code>Type ^_&amp;</code> as I'm told... :)</p>",
        "id": 389702963,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694103835
    },
    {
        "content": "<p>I just rebuilt <a href=\"https://github.com/leanprover-community/mathlib4/pull/6223\">#6223</a> after merging master and removing all the <code>Type _</code> in the files touched. I did not encounter any errors</p>",
        "id": 389712652,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694106324
    },
    {
        "content": "<p>Oh no I was trying to merge master perhaps at the same time...</p>",
        "id": 389712887,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694106382
    },
    {
        "content": "<p>I didn’t push</p>",
        "id": 389713010,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694106419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236223.20the.20Unfolding.20Trick/near/389672695\">said</a>:</p>\n<blockquote>\n<p>Hmm it's not so easy to make a mwe out of the PR; it's <a href=\"https://github.com/leanprover-community/mathlib4/pull/6223\">#6223</a> - can you see how the <code>Type*</code> at line 1552 of Mathlib/Topology/Algebra/InfiniteSum/Basic has an error?...</p>\n</blockquote>\n<p>I cannot see this: line 1552 is <code>lemma QuotientAddGroup.automorphize_smul_left (f : G → M) (g : G ⧸ Γ → R) :\n</code> with no <code>*</code> in at all.</p>",
        "id": 389713407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694106528
    },
    {
        "content": "<p>Oh, this is a moving target. Sorry, I was trying to help. I'm sure there's some simple explaination for what's going on but I still can't actually see the problem. Maybe state a precise commit if you want someone to look at this, rather than a branch which is being actively worked on?</p>",
        "id": 389713555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694106577
    },
    {
        "content": "<p>Argh. Something weird happened in the merge and now it's saying I've changed a lot more files than I'd meant to...</p>",
        "id": 389714116,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694106743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236223.20the.20Unfolding.20Trick/near/389712652\">said</a>:</p>\n<blockquote>\n<p>I just rebuilt <a href=\"https://github.com/leanprover-community/mathlib4/pull/6223\">#6223</a> after merging master and removing all the <code>Type _</code> in the files touched. I did not encounter any errors</p>\n</blockquote>\n<p>Matthew, maybe you can push what's on your end, to overwrite my failed merge?</p>",
        "id": 389714925,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694107007
    },
    {
        "content": "<p>Ok great, thanks! I think I've fixed everything now, including indentation. So it's ready for further review...</p>",
        "id": 389944011,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694204062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236223.20the.20Unfolding.20Trick/near/389465782\">said</a>:</p>\n<blockquote>\n<p>Honestly, I don't think #align is important here, as the PR you are porting is a very recent addition to mathlib3 so it is very unlikely that any project in the wild uses any of the new results (unless you have some project which does and which you'd like to port automatically to mathlib4). But since the general rule is rather to put in the #align I'd like the support of another maintainer to proceed.</p>\n</blockquote>\n<p>I was under the impression that it was decided that the aligns were not necessary? (<span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> requested adding them on this PR, which is otherwise merge-ready...) What's the consensus here? Thanks!</p>",
        "id": 391010953,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694722153
    },
    {
        "content": "<p>I had no idea that there was a parallel discussion happening here about <code>#align</code>s</p>",
        "id": 391018142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694725543
    },
    {
        "content": "<p>Ah yes. So seems it'll be ok without them, is that right?</p>",
        "id": 391049503,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1694741353
    },
    {
        "content": "<p>Just wondering if I need to ping things from time to time, or let them be and maintainers will get to it when they can? One issue now is that due to the build being canceled, it's showing an \"x\" instead of \"checkmark\"...? Anyway, not trying to rush anyone...</p>",
        "id": 392364711,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1695316759
    },
    {
        "content": "<p>Hmm, I tried to add it to the review <a href=\"https://bit.ly/3cKk3ld\">#queue</a> again, but it seems like the bors <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> is preventing that</p>",
        "id": 392365858,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695317249
    },
    {
        "content": "<p>I'm not sure if anyone is keeping an eye on ready-to-merge prs that bors isn't paying attention to</p>",
        "id": 392366044,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695317314
    },
    {
        "content": "<p>Aligns are nice, but I don't think they're necessary here. Merging.</p>",
        "id": 392367011,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695317713
    },
    {
        "content": "<p>And the point of merging into mathlib3 wasn't just for the <code>#align</code>s, it was to make the port to mathlib4 easier by using mathport, which didn't happen, so it's kind of moot.</p>",
        "id": 392367288,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695317839
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 392367316,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1695317855
    },
    {
        "content": "<p>Based on a recent mathport thread, I think skipping the aligns can cause mathport crashes if any lean3 code impors this file</p>",
        "id": 395239176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696591626
    },
    {
        "content": "<p>So we might need to add the aligns soon anyway</p>",
        "id": 395239196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696591637
    },
    {
        "content": "<p>There isn't any Lean 3 code importing this fine though, is there? This was a <code>not-too-late</code> PR, so nothing should depend on it, or am I missing something?</p>",
        "id": 395312140,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696617821
    },
    {
        "content": "<p>I was thinking of any downstream lean3 code in other projects</p>",
        "id": 395325938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696624843
    },
    {
        "content": "<p>Mathport will likely crash on those projects</p>",
        "id": 395325956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696624856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  what's this about crashes?</p>",
        "id": 395375313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696657232
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> &gt; mathport error is the thread I'm thinking of</p>",
        "id": 395375650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696657529
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/mathport.20error/near/394406437\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/mathport.20error/near/394406437</a></p>",
        "id": 395375764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696657629
    },
    {
        "content": "<p>that error is not because of missing aligns, it is usually caused by a mismatch between the mathlib used to build mathport and the mathlib used at runtime</p>",
        "id": 395376275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696658076
    },
    {
        "content": "<p>it is usually fixed by recompiling everything or clearing the build caches and downloading the releases, making sure everything is consistent</p>",
        "id": 395376337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696658146
    },
    {
        "content": "<p>missing aligns on their own don't cause any errors, they just cause mathport to use the default naming convention. Even if this causes a conflict, mathport will rename around it</p>",
        "id": 395376415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696658207
    },
    {
        "content": "<p>^ <span class=\"user-mention\" data-user-id=\"517021\">@Rishi Mehta</span></p>",
        "id": 395397902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696672334
    }
]