[
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/120\">std4#120</a> implements two additions to <code>ext</code>, which I believe are both useful for debugging <code>ext</code>. The PR resides in Std because that's where <code>ext</code> lies but a review by any mathlib maintainer/contributor would be highly welcomed!</p>\n<ul>\n<li><code>ext?</code> prints a \"Try this:\" suggesting which ext-lemmas have been used.</li>\n<li><code>ext!?</code> forces <code>ext</code> to ignore the <code>DiscTree</code> and tries to apply all ext-lemmas. It prints the same \"Try this:\" alongside with a warning about any ext-lemmas <code>ext!?</code> applied that <code>ext</code> couldn't.</li>\n</ul>\n<p>Here's a preview, which can be found in <code>test/ext.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c₁.a</span> <span class=\"bp\">=</span> <span class=\"n\">c₂.a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span>  <span class=\"n\">c₁.b</span> <span class=\"bp\">=</span> <span class=\"n\">c₂.b</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"o\">:</span>  <span class=\"n\">c₁.c</span> <span class=\"bp\">=</span> <span class=\"n\">c₂.c</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c₁</span> <span class=\"bp\">=</span> <span class=\"n\">c₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span><span class=\"bp\">?</span>\n  <span class=\"c1\">-- Try this:</span>\n  <span class=\"c1\">-- · apply extCtoB</span>\n  <span class=\"c1\">--   intros</span>\n  <span class=\"c1\">--   sorry</span>\n  <span class=\"c1\">--   sorry</span>\n  <span class=\"c1\">--   apply extBtoA</span>\n  <span class=\"c1\">--   sorry</span>\n  <span class=\"c1\">--   sorry</span>\n  <span class=\"n\">repeat</span> <span class=\"gr\">admit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test₂</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c₁.a</span> <span class=\"bp\">=</span> <span class=\"n\">c₂.a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span>  <span class=\"n\">c₁.b</span> <span class=\"bp\">=</span> <span class=\"n\">c₂.b</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"o\">:</span>  <span class=\"n\">c₁.c</span> <span class=\"bp\">=</span> <span class=\"n\">c₂.c</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c₁</span> <span class=\"bp\">=</span> <span class=\"n\">c₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span><span class=\"bp\">!?</span>\n  <span class=\"c1\">-- Try this: [yada yada]</span>\n  <span class=\"c1\">--</span>\n  <span class=\"c1\">-- Warning: `extCtoB` applied, which is written in terms of type `C`.</span>\n  <span class=\"c1\">-- If you want `ext` to find it, please make a copy of this</span>\n  <span class=\"c1\">-- lemma in terms of type `D`.</span>\n  <span class=\"n\">repeat</span> <span class=\"gr\">admit</span>\n</code></pre></div>",
        "id": 385624522,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692260904
    },
    {
        "content": "<p>Left some more comments.</p>",
        "id": 385648506,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692269515
    }
]