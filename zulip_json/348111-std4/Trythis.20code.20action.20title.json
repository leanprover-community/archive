[
    {
        "content": "<p>When creating a Try this widget, you can <a href=\"https://github.com/leanprover/std4/blob/c4aef3c27c6df946c46ac52564c84c86e2ccd2cc/Std/Tactic/TryThis.lean#L310\">provide a header</a> to replace the default \"Try this\". However this header is hard-wired in the <a href=\"https://github.com/leanprover/std4/blob/c4aef3c27c6df946c46ac52564c84c86e2ccd2cc/Std/Tactic/TryThis.lean#L101\">action provider</a>. I guess this is an oversight. Is there any hidden deep reason for this? Or should I try to fix it and PR it to std$?</p>",
        "id": 408227584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702661267
    },
    {
        "content": "<p>PR please!</p>",
        "id": 408275376,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702685230
    },
    {
        "content": "<p>Speaking of TryThis, I know that the <code>says</code> tactic uses the \"try this\" header. Maybe if the Suggestion's message data were wrapped in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MessageData.tagged#doc\">docs#Lean.MessageData.tagged</a> then it could more reliably extract the suggestion. Maybe this instance could insert that tagging: <a href=\"https://github.com/leanprover/std4/blob/c4aef3c27c6df946c46ac52564c84c86e2ccd2cc/Std/Tactic/TryThis.lean#L160\">https://github.com/leanprover/std4/blob/c4aef3c27c6df946c46ac52564c84c86e2ccd2cc/Std/Tactic/TryThis.lean#L160</a></p>\n<p>I don't really know what tagging is used for, but I noticed that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.reportUnsolvedGoals#doc\">docs#Lean.Elab.Term.reportUnsolvedGoals</a> tags the message.</p>",
        "id": 408279253,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702687001
    },
    {
        "content": "<p>The reason I (deliberately) left it as <code>Try this: </code> in (just) the code action was because code actions are best as one-liners and we’re visually short on space there, and (imo) there’s value in communicating the nature of the action itself in a brief, direct, and standard way. Having only “Try this:” before the replacement syntax was (I figured) a sufficiently basic, familiar, and to-the-point way to communicate “replace the squiggled text with the given text” in as little space as possible. If someone includes a long header or other non-replacement text in their suggestion, it shouldn’t obstruct the user’s view of what the code action will do in the lightbulb menu. (Also, I didn’t want to make that PR any bigger than it was by including <em>even more</em> knobs to fiddle with.)</p>\n<p>Note that we also can’t simply use the header argument itself: you don’t want each individual code action to say “Try these: &lt;replacement&gt;” in the <code>addSuggestions</code> case.</p>\n<p>But! If we want flexibility here (and we probably do, after all) we could add a field to <code>Suggestion</code> like <code>codeActionString : Option (Suggestion → String) := none</code>. Then you can include whatever aspects of the suggestion you want in whatever way you want to, or you can just use the default.</p>\n<p>(Actually I need to check this makes sense; maybe we don’t want to format the syntax twice, or maybe we don’t have access to the suggestion when needed, etc. Maybe we just want to offer <code>codeAction : Option (String → String)</code> or simply <code>codeActionPrefix : Option String</code> or something, or even just a uniform prefix that gets passed as a prop instead of as a suggestion field (even though each suggestion gets its own code action).)</p>\n<p>(There’s also the question of whether we agree with this default behavior I’ve adopted in the first place, though.)</p>",
        "id": 408310460,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702708345
    },
    {
        "content": "<p>It all make sense for expert usage, but the context of my question was teaching in another language than English.</p>",
        "id": 408356036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702742387
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/466\">std4#466</a></p>",
        "id": 408375876,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702761088
    },
    {
        "content": "<p>Makes sense! My perspective was admittedly limited to the considerations above when thinking about the behavior initially. :)</p>\n<p>In the PR I add a field <code>toCodeActionTitle? : Option (String → String)</code> to <code>Suggestion</code> which can be applied to the pretty-printed suggestion text (in general, this could also be used to, for example, dependently include the number of remaining goals resulting from a tactic execution: \"Try this: (⊢ 3) &lt;tactic replacement&gt;\" or \"Try this: <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> &lt;tactic replacement&gt;\") and a convenient argument <code>codeActionPrefix? : Option String := none</code> for <code>addSuggestions</code> which is used as a prefix to the suggestion text by default (if <code>toCodeActionTitle?</code> is not provided).</p>",
        "id": 408376327,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702761580
    }
]