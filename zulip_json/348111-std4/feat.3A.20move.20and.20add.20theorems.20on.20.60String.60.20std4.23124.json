[
    {
        "content": "<ul>\n<li>Move helper <code>simp</code> theorems on <code>String.Pos</code> from Mathlib4 to Std4.</li>\n<li>Move <code>String.utf8GetAux.inductionOn</code> from Mathlib4 to Std4.</li>\n<li>Add new helper <code>simp</code> theorems on <code>String.Pos</code>.</li>\n</ul>",
        "id": 353909241,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682692953
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3712\">!4#3712</a> deletes the theorems and the definition.</p>",
        "id": 353910920,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682693136
    },
    {
        "content": "<p>I've created two new files: <code>Data.String.Basic</code> and <code>Data.String.Lemmas</code>. Now <code>Data.String</code> imports them.</p>",
        "id": 354126787,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682732414
    },
    {
        "content": "<p>I deleted an obsolete theorem. I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/3712\">!4#3712</a> is  now ready to merge.</p>",
        "id": 354688553,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682862225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is it a good idea to change the name of the theorem <a href=\"https://github.com/leanprover/std4/blob/6006307d2ceb8743fea7e00ba0036af8654d0347/Std/Data/String/Lemmas.lean#L41-L42\"><code>String.addString_eq</code></a> to <code>String.addString_byteIdx</code> and add the following theorems to <code>Data.String.Lemmas</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">addString_eq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">p.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">s.utf8ByteSize</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_addString_eq</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">s.utf8ByteSize</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zero_addString_byteIdx</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 355051405,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1683011488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417769\">@Bulhwi Cha</span>  LGTM</p>",
        "id": 355136214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683030843
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- simp only [add_left_inj]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Is there a way to make the above proof work in Std? I want <code>simp</code> to change <code>a + c = b + c</code> to <code>a = b</code>. If so, I can move more lemmas from <code>Mathilb.Data.String.Basic</code> to here. But I think this would be hard to do.</p>",
        "id": 356996415,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1683641214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, will you merge <a href=\"https://github.com/leanprover/std4/pull/128\">std4#128</a>? I don't know any other way to prove <code>drop_empty</code> than using induction on the natural numbers. <code>drop_eq</code>'s proof already uses <code>drop_empty</code>, so I can't use <code>drop_eq</code> to prove <code>drop_empty</code>.</p>",
        "id": 356997256,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1683641387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/348111-std4/topic/feat.3A.20move.20and.20add.20theorems.20on.20.60String.60.20std4.23124/near/356996415\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- simp only [add_left_inj]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Is there a way to make the above proof work in Std? I want <code>simp</code> to change <code>a + c = b + c</code> to <code>a = b</code>. If so, I can move more lemmas from <code>Mathilb.Data.String.Basic</code> to here. But I think this would be hard to do.</p>\n</blockquote>\n<p>If you want <code>simp</code> to do that then there needs to be a simp lemma saying <code>a + c = b + c &lt;-&gt; a = b</code>.</p>",
        "id": 357004287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683642737
    },
    {
        "content": "<p>it's not a simp lemma, that  theorem is <code>add_left_cancel</code> which relies on <code>AddLeftCancelSemigroup</code> in mathlib</p>",
        "id": 357028806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683647659
    },
    {
        "content": "<p>just use <code>simp [Nat.add_left_cancel]</code></p>",
        "id": 357028970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683647676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/feat.3A.20move.20and.20add.20theorems.20on.20.60String.60.20std4.23124/near/357028970\">said</a>:</p>\n<blockquote>\n<p>just use <code>simp [Nat.add_left_cancel]</code></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.String.Lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">utf8GetAux_add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">utf8GetAux</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">utf8GetAux</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">utf8InductionOn</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">utf8GetAux</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">utf8GetAux</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">utf8GetAux</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"n\">h</span> <span class=\"n\">ih</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Pos.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">Pos.addChar_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_left_cancel</span><span class=\"o\">]</span> <span class=\"c1\">-- this doesn't simplify `i + n = p + n` on the lhs of the goal</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 357130286,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1683680614
    },
    {
        "content": "<p>Is there a way to simplify <code>i + n = p + n</code> on the left if-then-else statement of the goal?</p>",
        "id": 357130759,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1683680824
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mt</span> <span class=\"n\">Nat.add_right_cancel</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n</code></pre></div>\n<p>works</p>",
        "id": 357139716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683685457
    },
    {
        "content": "<p><code>Nat.add_right_cancel</code> isn't an iff statement so it doesn't really work well in the way you are trying to use it. I think there is an iff version called something like <code>add_left_inj</code></p>",
        "id": 357139815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683685494
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Nat/Lemmas.html#Nat.add_left_cancel_iff\"><code>Nat.add_left_cancel_iff</code></a>. I've added <code>Nat.add_right_cancel_iff</code> to my PR: <a href=\"https://github.com/leanprover/std4/blob/bb3f17dc3cac77b7f15c4941acd20f3ca7a84ba8/Std/Data/Nat/Lemmas.lean#L64-L65\">https://github.com/leanprover/std4/blob/bb3f17dc3cac77b7f15c4941acd20f3ca7a84ba8/Std/Data/Nat/Lemmas.lean#L64-L65</a></p>",
        "id": 357344752,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1683735178
    },
    {
        "content": "<p>I moved more lemmas from Mathlib to Std, including <code>drop_eq</code>.</p>",
        "id": 357431342,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1683767204
    }
]