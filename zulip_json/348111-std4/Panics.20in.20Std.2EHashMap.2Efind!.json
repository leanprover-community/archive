[
    {
        "content": "<p>I can make a mwe for this eventually, but I just noticed that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.HashMap.find%21#doc\">docs#Std.HashMap.find!</a> can sometimes panic even when it succeeds. There's a <code>panic!</code> expression being passed to <code>getD</code>, and while perhaps normally that expression gets inlined into <code>getD</code>, for whatever reason in my case it seems to be lifted out first.</p>",
        "id": 406821002,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702062056
    },
    {
        "content": "<p>can you make a MWE?</p>",
        "id": 406852431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702077002
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">follow</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">start</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">while</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"i = {i}\"</span>\n    <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">m.find</span><span class=\"bp\">!</span> <span class=\"n\">i</span>\n    <span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"n\">count</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">return</span> <span class=\"n\">count</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">follow</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap.ofList</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">),(</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)])</span> <span class=\"mi\">1</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">i = 1</span>\n<span class=\"cm\">i = 3</span>\n<span class=\"cm\">i = 2</span>\n<span class=\"cm\">3</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- Meanwhile</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">PANIC at Std.HashMap.find! Std.Data.HashMap.Basic:314:23: key is not in the map</span>\n<span class=\"cm\">PANIC at Std.HashMap.find! Std.Data.HashMap.Basic:314:23: key is not in the map</span>\n<span class=\"cm\">PANIC at Std.HashMap.find! Std.Data.HashMap.Basic:314:23: key is not in the map</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 406872395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702088215
    },
    {
        "content": "<p>fixed in <a href=\"https://github.com/leanprover/lean4/pull/3043\">lean4#3043</a></p>",
        "id": 406906026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702109160
    }
]