[
    {
        "content": "<p>I'm not sure if it's appropriate to ask questions of this sort here, but anyway: does std4 have a <code>groupBy</code> function on Lists (behaving like the identically-named function in F# or what have you)? It's such a widely used function in other languages that it seems like surely it's present in Lean 4, but I can't seem to find it. Perhaps the name is different or it's hiding in some other namespace than <code>List</code>?</p>\n<p>There is a function called List.groupBy, apparently, but it does something different than what it does is most other languages. In F#, it takes a List and turns it into a list of lists with each of the inner lists being composed from elements that have the same value under the function passes.</p>\n<p>I'm looking for something like this <a href=\"https://c-cube.github.io/ocaml-containers/3.12/containers/CCList/index.html#val-group_by\">https://c-cube.github.io/ocaml-containers/3.12/containers/CCList/index.html#val-group_by</a>.</p>",
        "id": 372114146,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688412730
    },
    {
        "content": "<p>The lean <code>List.groupBy</code> is modeled after <a href=\"https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-List.html#v:groupBy\">https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-List.html#v:groupBy</a></p>",
        "id": 372131721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688419003
    },
    {
        "content": "<p>I notice that the linked groupBy function is basically a hashmap algorithm, as you can tell from the fact that it takes a <code>hash</code> and <code>eq</code> function. I would expect such a function to live somewhere on hashmaps</p>",
        "id": 372131800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688419062
    },
    {
        "content": "<p>Does that imply that I would have to convert my lists to hashmaps before I could use the function? I've just been copying a pasting around the following implementation, and I'll probably keep doing so if that's the case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">group_by</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">projection</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List.partition</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">projection</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">projection</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n    <span class=\"n\">l</span> <span class=\"o\">::</span> <span class=\"n\">group_by</span> <span class=\"n\">projection</span> <span class=\"n\">r</span>\n  <span class=\"n\">decreasing_by</span> <span class=\"gr\">admit</span>\n</code></pre></div>",
        "id": 372133422,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688419867
    },
    {
        "content": "<p>notably, the <code>hash</code> and <code>eq</code> arguments are optional in the linked function -- one typically wouldn't care what hash is used (it's an implementation detail that isn't exposed in other libraries implementing the same function), and the builtin notion of equality is default.</p>",
        "id": 372133849,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688420074
    },
    {
        "content": "<p>it makes a big difference whether you are using a hash function or not, since one approach is linear time and the other is quadratic</p>",
        "id": 372134645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420455
    },
    {
        "content": "<p>your description of \"optional\" sounds more like \"supplied by a typeclass\" rather than \"does not need to be passed in\"</p>",
        "id": 372134794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420525
    },
    {
        "content": "<p>Thanks. Yes, that's certainly true. My point is that whether it's a hash function or like I've written, that needn't affect the function signature.</p>",
        "id": 372134840,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688420561
    },
    {
        "content": "<p>it would, typeclasses are part of the function signature</p>",
        "id": 372134865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420579
    },
    {
        "content": "<p>is there not a way to hash something without caring about its type? I suppose that's a difference from ocaml and other languages I'm used to.</p>",
        "id": 372135029,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688420658
    },
    {
        "content": "<p>That's what typeclasses are for?</p>",
        "id": 372135063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420680
    },
    {
        "content": "<p>The hash implementation is provided by the type because hashing depends on what is being stored</p>",
        "id": 372135111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420703
    },
    {
        "content": "<p>hashing the pointer values isn't really stable</p>",
        "id": 372135139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420711
    },
    {
        "content": "<p>although you can do that (unsafely) if you really want to</p>",
        "id": 372135153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420723
    },
    {
        "content": "<p>Okay, sure, thanks; I'll look at that. So then, implementation aside, you're saying there is no analogue to the function that I've defined here in the standard library (i.e. that takes a list argument)?</p>",
        "id": 372135396,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688420825
    },
    {
        "content": "<p>Not that I am aware of, but you are welcome to PR one if you like</p>",
        "id": 372135448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420854
    },
    {
        "content": "<p>(although that won't be \"implementation aside\")</p>",
        "id": 372135487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420878
    },
    {
        "content": "<p>Obviously.</p>",
        "id": 372135608,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688420923
    },
    {
        "content": "<p>The code above was just to illustrate the interface.</p>",
        "id": 372135660,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688420947
    },
    {
        "content": "<p>I assume the ordering is important?</p>",
        "id": 372135684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688420960
    },
    {
        "content": "<p>The ordering is typically not guaranteed for implementations of this function, since they do all use hashmaps with farily standard hashes as far as I can tell.</p>\n<p>BTW thanks for your time.</p>",
        "id": 372135946,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688421079
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/List.2EgroupBy\">#new members &gt; List.groupBy</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 372135964,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688421099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"629627\">@Alexander Lucas</span> could you point me to an implementation of this function?</p>",
        "id": 372136073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688421168
    },
    {
        "content": "<p>the docs you linked don't seem to have a src link or a precise description of what happens regarding ordering</p>",
        "id": 372136158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688421232
    },
    {
        "content": "<p>Of course: this is the implementation of the function that I linked docs for. <a href=\"https://github.com/c-cube/ocaml-containers/blob/master/src/core/CCList.ml\">https://github.com/c-cube/ocaml-containers/blob/master/src/core/CCList.ml</a></p>",
        "id": 372136275,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688421300
    },
    {
        "content": "<p>I can try to find the F# implementation as well if you want.</p>",
        "id": 372136355,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688421358
    },
    {
        "content": "<p>yes indeed it doesn't seem to give the results in any particular order</p>",
        "id": 372136399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688421364
    },
    {
        "content": "<p>yes please</p>",
        "id": 372136415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688421368
    },
    {
        "content": "<p>Especially if order is not preserved I would be a bit doubtful about putting this in the <code>List</code> namespace without a scary name like <code>groupByUnordered</code></p>",
        "id": 372136476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688421423
    },
    {
        "content": "<p>The F# Core version is here: <a href=\"https://github.com/dotnet/fsharp/blob/main/src/FSharp.Core/list.fs#L564-564\">https://github.com/dotnet/fsharp/blob/main/src/FSharp.Core/list.fs#L564-564</a>. The code is a bit oblique compared to the previous one though.</p>",
        "id": 372136635,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688421509
    },
    {
        "content": "<p>I suspect it is possible to use hashmaps to get a speedup while still resulting in the same order-preserved behavior of the quadratic algorithm you posted above</p>",
        "id": 372136638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688421511
    },
    {
        "content": "<p>That would be ideal. I haven't thought about implementing the function \"seriously\" beyond just posting it here, but I agree that it seems probably possible.</p>",
        "id": 372136755,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688421599
    },
    {
        "content": "<p>hm, it seems to just redirect to <code>Microsoft.FSharp.Primitives.Basics.List.groupBy</code></p>",
        "id": 372136786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688421603
    },
    {
        "content": "<p>The actual code may be in C# or C. I can look for that if its relevant, but based on experience I don't believe there's any order guarantee for that one either.</p>",
        "id": 372137082,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688421724
    },
    {
        "content": "<p>Using a linked hash map of some sort would probably work. I'll look into it and maybe make a PR if I end up writing something.</p>",
        "id": 372137679,
        "sender_full_name": "Alexander Lucas",
        "timestamp": 1688422031
    }
]