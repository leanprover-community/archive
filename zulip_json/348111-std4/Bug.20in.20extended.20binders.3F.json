[
    {
        "content": "<p>The expression <code>∀ x, ∀ x &lt; x, True</code> currently expands to <code>∀ (x : ?m) (x_1 : ?m), x_1 &lt; x_1 → True </code> rather than <code>∀ (x : ?m) (x_1 : ?m), x_1 &lt; x → True</code>. This seems like a bug to me, since you'd expect the <code>&lt; x</code> to be sort of like a type ascription (and that's what a student at the MSRI summer school expected; they had another example using <code>\\in</code> that seemed like it ought to work, but I forgot exactly what it was). Alpha renaming lets you work around it easily at least.</p>\n<p>I imagine a fix would be to be careful with macro scopes, but it seems like it'd make the <code>| `(∀ $x:ident $pred:binderPred, $p) =&gt; `(∀ $x:ident, satisfies_binder_pred% $x $pred → $p)</code> macro rule much more complicated.</p>",
        "id": 369269825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687644463
    },
    {
        "content": "<p>I would regard the expression as garbage. Do we really want to work around people using x to mean two different things in the same sentence?</p>",
        "id": 369271405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687645728
    },
    {
        "content": "<p>You're not wrong, but it's good to have a solid interpretation of even unreasonable things. You don't want the meaning to change drastically just because of some shadowing.</p>",
        "id": 369272069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687646258
    },
    {
        "content": "<p>The example I saw was closer to <code>\\forall n, ..., \\forall n \\in f n, ...</code>, which is less nonsensical than seeing <code>x &lt; x</code>, and on first glance whatever it was seemed fine.</p>",
        "id": 369272701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687646755
    },
    {
        "content": "<p>I don't think it can be done with macro scopes alone. When you write <code>∀ x, ∀ x &lt; x, True</code>, all occurrences of <code>x</code> there have exactly the same hygiene</p>",
        "id": 369274977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687648553
    },
    {
        "content": "<p>it is rather the elaborator that does the resolution of names to particular fvars and which is affected by name shadowing</p>",
        "id": 369275068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687648592
    },
    {
        "content": "<p>If the inner <code>x</code> was being introduced by the macro then we could fix this with hygiene (or rather, it would behave as you would like already), but here both <code>x</code>'s are being specified by the user so there is no way to hygiene them separately</p>",
        "id": 369275145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687648674
    },
    {
        "content": "<p>What might work is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">pred</span><span class=\"o\">:</span><span class=\"n\">binderPred</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"n\">satisfies_binder_pred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">clear</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 369275253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687648740
    },
    {
        "content": "<p>Ah right that seems like it could work, or something like <code>letI p := fun x =&gt; satisfies_binder_pred% x $pred; ∀ $x:ident, beta% p $x → $p</code>, where <code>beta%</code> would be <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20only.20for.20universal.20cleanup/near/352096260\">this</a></p>",
        "id": 369282927,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687653897
    }
]