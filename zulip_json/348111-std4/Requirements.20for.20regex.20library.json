[
    {
        "content": "<p>Following on from this discussion –<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/github.20permission/near/392839244\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/github.20permission/near/392839244</a></p>\n<p>There are many options for regex libraries. To help choose, can we list our requirements for such a library?<br>\nSo far I have:</p>\n<ol>\n<li>Written in a language already used in Std (C, C++, Lean)</li>\n<li>Supports capture clauses and find-and-replace</li>\n<li>Resistant to denial-of-service attacks</li>\n</ol>\n<p>Another consideration is compile times. As an example, the CI for RE2 takes <a href=\"https://github.com/google/re2/actions/runs/6189412185/job/16803447772\">~ 4 minutes</a>, though I'm not sure how much of that is build vs test. Is that a price we're willing to pay for Std?</p>",
        "id": 392893812,
        "sender_full_name": "Chris Wong",
        "timestamp": 1695610680
    },
    {
        "content": "<p>If it's not pure lean and implemented in std, I would prefer it to be a separate library. There isn't any particular need to use a regex library in std itself, and I don't think it is a strong requirement that it be an exported functionality of std, especially if it is a binding to an external library like re2.</p>",
        "id": 392921333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695622810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Requirements.20for.20regex.20library/near/392921333\">said</a>:</p>\n<blockquote>\n<p>If it's not pure lean and implemented in std, I would prefer it to be a separate library. There isn't any particular need to use a regex library in std itself, and I don't think it is a strong requirement that it be an exported functionality of std, especially if it is a binding to an external library like re2.</p>\n</blockquote>\n<p>As a heavy user of regexes, I would love to see a Lean implementation.  But writing a module that is both performant and has all the modern niceties is a big challenge; can pure Lean code do it?  For instance, what would be the steps to rewrite BurntSushi's <code>ripgrep</code> in Lean?</p>",
        "id": 392992640,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1695643622
    },
    {
        "content": "<p>of course it's a challenge and a lot of work, and I wouldn't be surprised if there is a performance hit because you need a really good inner loop and it's not clear to me that lean can express it</p>",
        "id": 392994298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695643980
    },
    {
        "content": "<p>There's a three-way trade off here – [a] easy to implement, [b] fast most of the time, [c] doesn't blow up<br>\nBacktracking has [a] and [b]<br>\nNFA has [a] and [c]<br>\nHybrid NFA + DFA cache has [b] and [c]</p>",
        "id": 393016595,
        "sender_full_name": "Chris Wong",
        "timestamp": 1695649110
    },
    {
        "content": "<p>If you'd like to implement it in pure Lean, Antimirov derivatives look promising:<br>\n<a href=\"https://semantic-domain.blogspot.com/2013/11/antimirov-derivatives-for-regular.html\">https://semantic-domain.blogspot.com/2013/11/antimirov-derivatives-for-regular.html</a></p>\n<p>ocaml-re uses derivatives too, but to lazily build a DFA <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span><br>\n<a href=\"https://news.ycombinator.com/item?id=35055667\">https://news.ycombinator.com/item?id=35055667</a></p>",
        "id": 393135435,
        "sender_full_name": "Chris Wong",
        "timestamp": 1695688638
    },
    {
        "content": "<p>I ported that blog post (minus the DFA construction) to Lean here - <a href=\"https://gist.github.com/lambda-fairy/efc6657e34d977b1eeba27495e802301\">https://gist.github.com/lambda-fairy/efc6657e34d977b1eeba27495e802301</a><br>\nSo a regex library in 100 lines would be possible, if slow.</p>",
        "id": 393492884,
        "sender_full_name": "Chris Wong",
        "timestamp": 1695822626
    },
    {
        "content": "<p>FWIW, my students and I are currently working on a provably correct regex library, including an efficient version using boolean matrix algebra.  This is an undergraduate research project so progress is slow for educational reasons. I have zero objection to competing projects and I encourage these! If you can, please send me a notification of your work so we can include it in our benchmarks.</p>",
        "id": 393587540,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1695859614
    },
    {
        "content": "<p>Ooh, what do you mean by boolean matrix algebra? Is that the \"everything is the same algorithm\" thing?<br>\n<a href=\"http://r6.ca/blog/20110808T035622Z.html\">http://r6.ca/blog/20110808T035622Z.html</a></p>",
        "id": 393599540,
        "sender_full_name": "Chris Wong",
        "timestamp": 1695866968
    }
]