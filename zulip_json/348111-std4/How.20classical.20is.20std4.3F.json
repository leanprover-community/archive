[
    {
        "content": "<p>What kind of axioms are normally assumed in the lemmas of std4? For example, it seems that the current proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Nat/Lemmas.html#Nat.min_succ_succ\"><code>Nat.min_succ_succ</code></a> depends on <code>[propext, Classical.choice, Quot.sound]</code>. I find it a bit surprising that <code>Classical.choice</code> and quotient types are used for such a lemma. I believe it is because of the <code>split</code> tactic in the proof. There is a simple proof only depending on propext.</p>\n<p>Is there a design goal of reducing classical assumptions in std4? I would guess some CS applications would be happy to avoid using <code>Classical.choice</code></p>",
        "id": 383427654,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1691619816
    },
    {
        "content": "<p>I don't think CS applications care about use of axioms in proofs. Proofs are irrelevant at runtime and get erased so having a constructive proof doesn't give you anything. What you could do on the other hand is have a decision procedure (that is actually computable) and try to verify it (the verification itself can again include arbitrary axioms though)</p>\n<p>The only reason that I can think of that you would care about axiom usage in proofs in Lean is if you don't trust the axioms let it be because they are actually dangerous like the ones that pull in the compiler as trusted code or because you dislike say choice or LEM.</p>",
        "id": 383428261,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691620169
    },
    {
        "content": "<p>Yes, std4 tries to avoid classical logic when it can be accomplished without significant difficulty. Unfortunately, as you note the <code>split</code> tactic introduces classical axioms and yet is absolutely essential for reasoning about match expressions and not easily reimplemented outside of core, so let's just say that getting classical logic out of basic proofs is blocked on fixing this issue in core</p>",
        "id": 383429680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691620996
    },
    {
        "content": "<p>Just to clarify how core uses the axiom in <code>split</code>...</p>\n<p>The <code>split</code> tactic is used to breakdown a <code>match</code> and <code>if</code> statements into cases. On the second and later cases, the assumption is not just that this case matches but also that earlier cases do not match. This is where excluded middle comes in: it's much cheaper to simply invoke <code>Classical.em</code> than to search for a decidabiliy instance. This is generally harmless even if the decidability instances are actually not there. I principle though, that does mean that <code>split</code> could be used to prove that certain functions are total even though it is not constructively provable that they are.</p>",
        "id": 383666994,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691680852
    },
    {
        "content": "<p>I guess if someone cared deeply they could propose a slower <code>isplit</code> tactic</p>",
        "id": 383667693,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691680988
    },
    {
        "content": "<p>I think there is no actual need for EM (decidable or otherwise) to be used here, the conditions being cased on are already decided by virtue of being separate constructors</p>",
        "id": 383675906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691682442
    },
    {
        "content": "<p>alternatively stated, I question your claim that <code>split</code> can be used to prove things that require EM to prove. I think it is possible to generate exactly the same subgoals as <code>split</code> without ever using EM</p>",
        "id": 383676495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691682559
    },
    {
        "content": "<p><code>split</code>ting <code>if</code> is implemented by <code>Lean.Meta.SplitIf.splitIfAt</code> defined in <code>Lean.Meta.Tactic.SplitIf</code> in the core. It looks just ignoring <code>Decidable</code> instance which should comes with <code>ite</code> or <code>dite</code>. I wonder what is the advantage of the use of EM.</p>",
        "id": 383677196,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1691682695
    },
    {
        "content": "<p>yeah, last time I looked into this that's where I ended up, we need to pass the decidability instance out of that function and use it to split the goal instead of searching for one</p>",
        "id": 383677682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691682781
    },
    {
        "content": "<p>Yes, I believe that's true: in the match case, <code>.noConfusion</code> should work and the <code>if</code> case has an attached <code>Decidable</code> instance.</p>",
        "id": 383677686,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691682781
    },
    {
        "content": "<p>Actually, it's <code>by_cases</code> that uses EM indiscriminately: <a href=\"https://github.com/leanprover/lean4/blob/75a92843200e009ffcb4ab0617cf11a4b4ba9efb/src/Lean/Meta/Tactic/Cases.lean#L308-L316\">https://github.com/leanprover/lean4/blob/75a92843200e009ffcb4ab0617cf11a4b4ba9efb/src/Lean/Meta/Tactic/Cases.lean#L308-L316</a></p>",
        "id": 383682857,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691683728
    },
    {
        "content": "<p>I think that's deliberate, but there's no need for <code>split</code> to use <code>by_cases</code></p>",
        "id": 383683643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691683908
    },
    {
        "content": "<p>Exactly: <code>findIfToSplit?</code> could record the condition and the decidability instance. Then <code>splitIfAt?</code> could use that info to avoid using <code>byCases</code>.</p>",
        "id": 383684955,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691684170
    },
    {
        "content": "<p>As I am maintaining a private research project where I am doing some constructive math (related to computational topology), it would be so great if <code>split</code> tactic becomes <code>Classical</code>-free.</p>",
        "id": 383687210,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1691684572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433695\">@Jun Yoshida</span> My current solution is to override <code>by_cases</code> with a constructive version (this is already in Std) and manually use <code>{d}if_{pos|neg}</code>. I don't expect core to change this soon. Maybe after the long awaited decidable refactor happens?</p>",
        "id": 383691362,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691685337
    },
    {
        "content": "<p>You can always just replace <code>by_cases h : P</code> with <code>cases' Decidable.em P with h h</code> if you really want decidability, right?</p>",
        "id": 383693103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691685654
    },
    {
        "content": "<p>That's already in Std: <a href=\"https://github.com/leanprover/std4/blob/dbffa8cb31b0c51b151453c4ff8f00ede2a84ed8/Std/Tactic/ByCases.lean#L16\">https://github.com/leanprover/std4/blob/dbffa8cb31b0c51b151453c4ff8f00ede2a84ed8/Std/Tactic/ByCases.lean#L16</a></p>",
        "id": 383705176,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691688042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>  The problem is not that I cannot <code>split</code> but that some basic theorems in the core and std unnecessarily depend on <code>Classical.choice</code> because of it as mentioned by <span class=\"user-mention\" data-user-id=\"562819\">@Bernhard Reinke</span> in the first post. As a result, I have to re-prove them by myself, which causes some problems including <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Inter-project.20name.20collision\">#lean4 &gt; Inter-project name collision</a>. If <code>split</code> were <code>Classical</code>-free, most of them would be solved at once. But reading <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Compartmentalization.20of.20axioms.20in.20Lean.204\">#lean4 &gt; Compartmentalization of axioms in Lean 4</a>, I am pessimistic about the refactor, either.</p>",
        "id": 383721138,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1691691580
    },
    {
        "content": "<p>That's partly why I had my own Std equivalent for a long time. I'm currently rolling it into Std, hopefully fixing some of these issues.</p>",
        "id": 383731060,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691693912
    },
    {
        "content": "<p>We're not at a point presently where changes like this are likely to be accepted in core. I appreciate this is unfortunate for people doing constructive maths, but in the medium term it's not a priority, and will have to be supported by separate libraries that redo foundations lemmas and tactics as required.</p>",
        "id": 383780177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691710468
    },
    {
        "content": "<p>Although I don't expect anything to happen, I submitted a PR to fix this: <a href=\"https://github.com/leanprover/lean4/pull/2412\">https://github.com/leanprover/lean4/pull/2412</a></p>",
        "id": 384036488,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691772710
    },
    {
        "content": "<p>I appreciate the great PR. I sincerely wish it would be merged eventually.</p>",
        "id": 384723688,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692008756
    },
    {
        "content": "<p>Nope, it's closed now. I gave it a shot... <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 384873060,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692038181
    },
    {
        "content": "<p>This issue might fix itself when the decidable refactor happens: <a href=\"https://github.com/leanprover/lean4/pull/2038\">https://github.com/leanprover/lean4/pull/2038</a> After that, <code>ite</code>/<code>dite</code> will basically be matches on Bool. That's probably a better solution than patching the current code.</p>",
        "id": 385015732,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692081030
    },
    {
        "content": "<p>I doubt it, you still want to be able to write things like <code>if h : x = y then ...</code> and that requires <code>dite</code> to take a <code>Prop</code> (so that it can present that prop as the type of <code>h</code>) and yet match on it in a Bool-like way, which would have to be supplied by a typeclass, and hence would be indistinguishable from <code>Decidable p</code></p>",
        "id": 385016159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692081191
    },
    {
        "content": "<p>the only alternative design I can see that would allow matching on Bool would be to interpret it as <code>if decide (x = y) then ...</code> where <code>if</code> takes a <code>Bool</code> argument and <code>decide</code> is an auto-inserted coercion. But then you have the issue that if you bind a variable to it you get <code>h : decide (x = y) = true</code> and this will make the mathlib crowd <em>very</em> unhappy</p>",
        "id": 385016532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692081337
    },
    {
        "content": "<p>The alternative is what I was thinking and you're right that it's not as simple as that. The other ingredient is for match to seamlessly support type views.</p>",
        "id": 385023123,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692083390
    },
    {
        "content": "<p>I guess the latter would already be enough but it's a wild dream at this point.</p>",
        "id": 385023416,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692083471
    },
    {
        "content": "<p>note that <code>bif</code> exists, if you want to write the Bool matching version today</p>",
        "id": 385030209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692085401
    },
    {
        "content": "<p>it doesn't have a dependent version though</p>",
        "id": 385030261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692085415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/How.20classical.20is.20std4.3F/near/385016532\">said</a>:</p>\n<blockquote>\n<p>you get <code>h : decide (x = y) = true</code> and this will make the mathlib crowd <em>very</em> unhappy</p>\n</blockquote>\n<p>is that related to what the <code>IsTrue</code> proposal was trying to improve? or do you just mean that people would not like having to <code>simp at h</code> to get <code>h : x = y</code>?</p>",
        "id": 385148335,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692111130
    },
    {
        "content": "<p>the latter</p>",
        "id": 385248910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692117175
    },
    {
        "content": "<p><code>simp at h</code> wouldn't necessarily even do the right thing</p>",
        "id": 385249019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692117207
    },
    {
        "content": "<p>plus that makes the dependent simplification case way more complicated (when reasoning about this <code>dite</code> application itself, now there are some new <code>Eq.rec</code>'s in the term which will make it harder to avoid getting stuck)</p>",
        "id": 385249335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692117323
    },
    {
        "content": "<p>Would it make sense for Std to have a <code>split_ifs</code> tactic as a temporary workaround? It's an investment but it would't be too hard to implement. However, it wouldn't fix everything. It would be separate from <code>split</code> and would do only a subset of the work. Other tactics, from core or elsewhere, might still use <code>split</code> instead of <code>split_ifs</code> (for convenience or other reasons).</p>",
        "id": 385280492,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692130816
    },
    {
        "content": "<p>Echoing <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>'s comment on the issue:</p>\n<blockquote>\n<p>Moreover, making this change outside of core borders on completely infeasible, as one would have to duplicate the entirety of <code>split</code> and <code>simp</code> (which calls <code>split</code>)</p>\n</blockquote>",
        "id": 385292986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692137593
    },
    {
        "content": "<p>So <code>simp</code> is still not going to do what you want</p>",
        "id": 385293029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692137623
    },
    {
        "content": "<p>and I'm pretty sure a fair number of the \"accidental classical\" uses in std are due to <code>split</code> via <code>simp</code></p>",
        "id": 385294014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692138229
    },
    {
        "content": "<p>Can we do a hack with <code>implemented_by</code> to swap out the implementation of <code>splitIfAt?</code> in Std and downstream?</p>",
        "id": 385294493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692138504
    },
    {
        "content": "<p>Would that actually work???</p>",
        "id": 385294516,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692138527
    },
    {
        "content": "<p>Or does that not help because <code>simp</code> has already been compiled?</p>",
        "id": 385294520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692138531
    },
    {
        "content": "<p>That type of thing worked with <code>vm_override</code> in Lean 3</p>",
        "id": 385294532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692138541
    },
    {
        "content": "<p>it doesn't work, for either compiled or interpreted code</p>",
        "id": 385295635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692138966
    },
    {
        "content": "<p><code>implemented_by</code> is consulted by the compiler when it is compiling, once it has compiled a definition that's it</p>",
        "id": 385295681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692138994
    },
    {
        "content": "<p>The only way you can get behavior that is modified by downstream stuff is if you e.g. look up into a map in an <code>initialize</code> or environment extension that is extended later</p>",
        "id": 385295763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692139053
    },
    {
        "content": "<p>tactic evaluation is like this, so you can define another elab_rules for <code>split</code> and get the tactic to do something different even if others call it</p>",
        "id": 385295892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692139112
    },
    {
        "content": "<p>So no more monkey-patching implementation details then...</p>",
        "id": 385295981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692139142
    },
    {
        "content": "<p>but only if they do so via macro expansion or <code>evalTactic `(tactic| split)</code>, not if they call the <code>splitIfAt?</code> function directly</p>",
        "id": 385296010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692139154
    },
    {
        "content": "<p>Can I use <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>'s PR branch as a toolchain? Also, is it possible to force Std4 to use it in my local project?</p>",
        "id": 385333283,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692158110
    },
    {
        "content": "<p>At present, there aren't releases for every PR. Instead you need to push a tag to your own repo. There are some instructions at the very bottom of <a href=\"https://leanprover.github.io/lean4/doc/dev/index.html\">https://leanprover.github.io/lean4/doc/dev/index.html</a>.</p>",
        "id": 385333411,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692158198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433695\">@Jun Yoshida</span>, I pushed one for you. In ~90 minutes <code>semorrison/lean4:release-2023-08-17-split-ifs</code> should work in your <code>lean-toolchain</code> file.</p>",
        "id": 385333561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692158300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thank you very much!</p>",
        "id": 385333814,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692158458
    },
    {
        "content": "<p>Oh, elan says <code>error: binary package was not provided for 'linux'</code> I'll try following the manual you pointed out. Thanks anyway.</p>",
        "id": 385334317,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692158772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433695\">@Jun Yoshida</span>, it won't be ready until you see more green ticks here: <a href=\"https://github.com/semorrison/lean4/actions/runs/5874467371\">https://github.com/semorrison/lean4/actions/runs/5874467371</a></p>",
        "id": 385339994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692162063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I am sorry. I stupidly misunderstood your message. Now, I have got the toolchain successfully.</p>",
        "id": 385348803,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692166793
    },
    {
        "content": "<p>It works perfectly fine. I got the following with <code>semorrison/lean4:release-2023-08-17-split-ifs</code> on <code>lean-toolchain</code> file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n\n<span class=\"c1\">-- `Nat.le_min` in Std uses `split` tactic</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">Nat.le_min</span> <span class=\"c1\">-- 'Nat.le_min' depends on axioms: [propext]</span>\n</code></pre></div>\n<p>I deeply thank <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> and <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>.</p>",
        "id": 385392876,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1692173167
    }
]