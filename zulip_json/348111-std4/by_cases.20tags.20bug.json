[
    {
        "content": "<p>When using <code>Std</code>'s <code>by_cases</code> tactic, all goals' tags are overwritten to be called just <code>pos</code> or <code>neg</code>. E.g:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">by_cases</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">case pos</span>\n<span class=\"cm\">h✝¹: 1 = 2</span>\n<span class=\"cm\">h✝: 2 = 3</span>\n<span class=\"cm\">⊢ True</span>\n<span class=\"cm\">case neg</span>\n<span class=\"cm\">h✝¹: 1 = 2</span>\n<span class=\"cm\">h✝: ¬2 = 3</span>\n<span class=\"cm\">⊢ True</span>\n<span class=\"cm\">case pos</span>\n<span class=\"cm\">h✝¹: ¬1 = 2</span>\n<span class=\"cm\">h✝: 2 = 3</span>\n<span class=\"cm\">⊢ True</span>\n<span class=\"cm\">case neg</span>\n<span class=\"cm\">h✝¹: ¬1 = 2</span>\n<span class=\"cm\">h✝: ¬2 = 3</span>\n<span class=\"cm\">⊢ True</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is this a bug?</p>",
        "id": 345415921,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1680099395
    },
    {
        "content": "<p>It doesn't look ideal <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> It seems the problem has to do with <code>refine</code> which introduces sub-goals for the holes in the term it is given (see <a href=\"https://github.com/leanprover/std4/blob/5507f9d8409f93b984ce04eccf4914d534e6fca2/Std/Tactic/ByCases.lean#L18\">here</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_cases</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span> <span class=\"n\">refine</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"bp\">?</span><span class=\"n\">pos</span> <span class=\"k\">else</span> <span class=\"bp\">?</span><span class=\"n\">neg</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 345892797,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680255686
    },
    {
        "content": "<p>As a test, changing the last line to <code> `(tactic| open Classical in exact if $h:ident : $e then ?pos else ?neg) </code> yields the sub-goal names expected</p>",
        "id": 345893382,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680255843
    },
    {
        "content": "<p>It seems like pushing <code>refine</code> down the if-then-else's branches helps, though someone actually qualified will have to weigh in, this \"works\" for sub-case names but might be nonsensical for what <code>by_cases</code> is going for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_cases</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">cnd</span> <span class=\"o\">:=</span> <span class=\"n\">refine</span> <span class=\"bp\">$</span><span class=\"n\">e</span>\n      <span class=\"k\">let</span> <span class=\"n\">thn</span> <span class=\"o\">:=</span> <span class=\"n\">refine</span> <span class=\"bp\">?</span><span class=\"n\">pos</span>\n      <span class=\"k\">let</span> <span class=\"n\">els</span> <span class=\"o\">:=</span> <span class=\"n\">refine</span> <span class=\"bp\">?</span><span class=\"n\">neg</span>\n      <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">cnd</span> <span class=\"k\">then</span> <span class=\"n\">thn</span> <span class=\"k\">else</span> <span class=\"n\">els</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 345895030,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1680256227
    }
]