[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <a href=\"https://github.com/leanprover/std4/pull/392#discussion_r1406855469\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> Interesting. I wish we had an annotation to require / check tail-recursiveness...</p>\n</blockquote>\n<p>You mean like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">visitBody</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">IR.FunId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IR.FnBody</span> <span class=\"bp\">→</span> <span class=\"n\">StateM</span> <span class=\"o\">(</span><span class=\"n\">NameSet</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">vdecl</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tailcall</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ret</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fap</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">tailcall</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c</span> <span class=\"bp\">==</span> <span class=\"n\">f</span> <span class=\"k\">then</span> <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s.insert</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">pap</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s.insert</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"n\">visitBody</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">jdecl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">visitBody</span> <span class=\"n\">f</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"n\">visitBody</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">cs</span> <span class=\"k\">do</span> <span class=\"n\">visitBody</span> <span class=\"n\">f</span> <span class=\"n\">c.body</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">e.isTerminal</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"n\">visitBody</span> <span class=\"n\">f</span> <span class=\"n\">e.body</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#ir_stats \"</span> <span class=\"n\">decl</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">decl.getId</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">IR.declMapExt.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">name</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"IR declaration {name} not found\"</span>\n  <span class=\"k\">match</span> <span class=\"n\">decl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">extern</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} is external\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fdecl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">calls</span><span class=\"o\">,</span> <span class=\"n\">tailRec</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">visitBody</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">({},</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">calls.isEmpty</span> <span class=\"k\">then</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} calls (recursively) {calls.toList}\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">tailRec</span> <span class=\"k\">then</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} is tail-recursive\"</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">calls.contains</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} is properly recursive\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} is not recursive\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">specialize</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>    <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">as</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">mapTR</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">loop</span> <span class=\"n\">as</span> <span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"kd\">@[</span><span class=\"n\">specialize</span><span class=\"kd\">]</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span>    <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bs.reverse</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">ir_stats</span> <span class=\"n\">map._rarg</span> <span class=\"c1\">-- map._rarg is properly recursive</span>\n<span class=\"bp\">#</span><span class=\"n\">ir_stats</span> <span class=\"n\">mapTR.loop._rarg</span> <span class=\"c1\">-- mapTR.loop._rarg is tail-recursive</span>\n</code></pre></div>",
        "id": 404515501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701132695
    },
    {
        "content": "<p>Nice!</p>\n<p>Perhaps the name should just be <code>#check_recursive</code>?</p>",
        "id": 404536580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701142032
    },
    {
        "content": "<p>Could this go in <code>Lean.Util.Recursion</code>?</p>",
        "id": 404536624,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701142048
    },
    {
        "content": "<p>Would it make sense to allow leaving off the <code>._rarg</code>?</p>",
        "id": 404536790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701142100
    },
    {
        "content": "<p>The idea behind this interface was more to give general information about IR declarations, kind of like <code>#print</code> but for IR decls instead of regular decls. For checking for bounded stack space, I was thinking of a more all-in-one solution that traverses the whole dag of function declarations starting at the one you specify, and reports if any of them is properly recursive (or mutually recursive). That way you don't have to put the <code>_rarg</code>. That would also presumably work better as an attribute like you originally suggested.</p>\n<p>There is a limitation though: we can only inspect the definitions of declarations in the same file - the IR for other files is not available, only the signatures, so we have to treat any calls to upstream functions as opaque.</p>",
        "id": 404537706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701142368
    },
    {
        "content": "<p>I didn't show it above but the reason <code>#ir_stats</code> prints the direct calls is so that you can be lead to inspect the <code>_rarg</code> function, I didn't just guess those names above</p>",
        "id": 404537968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701142488
    }
]