[
    {
        "content": "<p>The <code>defLemma</code> linter is giving false positives on local instances for <code>Prop</code>-valued classes, like <code>Fact</code>. An example pops up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a>. </p>\n<p>How does one read the local instances in general?</p>",
        "id": 381606620,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691095706
    },
    {
        "content": "<p>I don't think this is a false positive per se, really the problem is the fact that <code>instance</code> is always a def even when it is prop valued, and this should at some point change (but its probably a core change). We _could_ make the linter check if the type of a declaration is a class, rather than checking if the declaration itselft is tagged as an instance to avoid them being reported for now. But imo these defs that should be lemmas really are defs that should be lemmas, not false positives.<br>\nUntil then using <code>@[local instance] theorem  isScalarTower_S_right := sorry</code> seems fine to me</p>",
        "id": 381613090,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691098143
    },
    {
        "content": "<p>I agree that is a worse problem. But apparently <code>defLemma</code> is already working around the problem with a regular <code>instance</code>.</p>",
        "id": 381613682,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691098351
    },
    {
        "content": "<p>Right its manually working around this by skipping global instances, but as far as I know <code>Std.Tactic.Lint</code> doesn't have access to the information of which local instances were set in some section somewhere in the library, so my suggestion of skipping all class valued defs would be the only way to make this happen. But why work around the issue if we can use <code>@[local instance] theorem</code> in place of <code>local instance</code> and get library that doesnt have this isuee.</p>",
        "id": 381614915,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691098889
    },
    {
        "content": "<p>Can we get the local context from declaration and find the local instances that way? (This is more about curiosity than anything. I am fine with any solution.)</p>",
        "id": 381615083,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691098969
    },
    {
        "content": "<p>notice the comment in <code>docBlame</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isAutoDecl</span> <span class=\"n\">declName</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">isGlobalInstance</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">declName</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">none</span> <span class=\"c1\">-- FIXME: scoped/local instances should also not be linted</span>\n</code></pre></div>\n<p>The information that something is defined as a scoped/local something or other is not stored in a sufficiently permanent way for <code>#lint</code> to tell. In theory you could work it out for scoped instances but you would have to check every namespace, it's not suitably indexed at all. For local instances the info is gone, I'm pretty sure it is impossible</p>",
        "id": 381666019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691123284
    },
    {
        "content": "<p>Is the core change to make <code>instance</code> use <code>theorem</code> controversial, or just low priority?</p>",
        "id": 381768518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691143627
    },
    {
        "content": "<p>And is switching mathlib to use <code>@[instance] theorem</code> instead of <code>instance</code> more or less controversial?</p>",
        "id": 381768700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691143653
    },
    {
        "content": "<p>How would the core change be done in theory? Can you figure out whether you have a <code>Prop</code> or not in <code>CommandElab</code>? </p>\n<p>For the latter, I think you want to switch to <code>@[instance] def</code> for uniformity also.</p>",
        "id": 381970206,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691181091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/local.20instances.20in.20.23lint/near/381768518\">said</a>:</p>\n<blockquote>\n<p>Is the core change to make <code>instance</code> use <code>theorem</code> controversial, or just low priority?</p>\n</blockquote>\n<p>it's fine by me. IIRC core accepted a patch to make nested recursive functions (let rec &amp; where) handle def/theorem correctly not too long ago, so I think this wouldn't be too different</p>",
        "id": 382101706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691232058
    }
]