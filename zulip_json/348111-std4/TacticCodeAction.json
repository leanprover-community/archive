[
    {
        "content": "<p>When defining a <code> TacticCodeAction</code> I get access to <code>(param : CodeActionParams) (snap : Snapshot)  (ctx : ContextInfo) (stack : Syntax.Stack)  (node : InfoTree)</code> and need to produce something in <code>RequestM</code>. More specifically, the <code>lazy?</code> field will work in <code>IO</code>. The question is: how to access the current goal?  In this case I know <code>node</code> will give me <code>info : TacticInfo</code> and I have <code>info.goalsBefore</code> that a list of <code>MVarId</code>. I know I also have <code>ctx.runMetaM</code> but I don't know where to find a <code>LocalContext</code>to feed to that function. For instance how to write a code action that will simply take the current goal and output 'show ...<code> where </code>...` is the current goal (approximately) as displayed in the infoview.</p>",
        "id": 374577215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689159951
    },
    {
        "content": "<p>I haven't look at this recently, but you might see what I did in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4109\">#4109</a> (hooking up <code>exact?</code> to every <code>sorry</code>).</p>",
        "id": 374577784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689160070
    },
    {
        "content": "<p>Sorry, I got distracted. In your case you get a <code>TermInfo</code> and not a <code>TacticInfo</code> so you do have a local context right there. I'm sure I can get one too, I just don't know where.</p>",
        "id": 374585355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689161739
    },
    {
        "content": "<p>Presumably the first <code>MVarId</code> in <code>goalsBefore</code> represents the current goal. You can get its local context with <code>mvarId.getLCtx</code>.</p>",
        "id": 374595156,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689163734
    },
    {
        "content": "<p>This function doesn't seem to exist.</p>",
        "id": 374601665,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689164999
    },
    {
        "content": "<p>There is a globally defined <code>getLCtx</code> function but it requires to be already in a monad providing a context.</p>",
        "id": 374601920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689165042
    },
    {
        "content": "<p>There is no way I'll be able to magically get a local context from a <code>MVarId</code> since a <code>MVarId</code> simply stores a name. The context has to come from somewhere else, this is why I wrote that long message listing everything I have floating around.</p>",
        "id": 374602436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689165159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> any hint for me?</p>",
        "id": 374602556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689165185
    },
    {
        "content": "<p>Ah, sorry. You can do <code>mvarId.withContext do getLCtx</code> or <code>(&lt;- mvarId.getDecl).lctx</code>.</p>\n<p>While an <code>MVarId</code> is just a name, the metavariable context always associates this name with a <code>MetavarDecl</code> containing a local context, the target type and additional metadata. <code>getDecl</code> obtains this information.</p>",
        "id": 374604980,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689165659
    },
    {
        "content": "<p>Again all those suggestions assume I'm already in a monad who knows more stuff than what IO does.</p>",
        "id": 374609293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689166467
    },
    {
        "content": "<p>Forget about it, Kyle helped me.</p>",
        "id": 374611449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689166871
    },
    {
        "content": "<p>If <code>ctx : ContextInfo</code> and <code>goal : MVarId</code> then it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ctx.runMetaM</span> <span class=\"o\">{}</span> <span class=\"k\">do</span>\n  <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- ... now you have the local context of the goal ...</span>\n</code></pre></div>",
        "id": 374611977,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689166956
    },
    {
        "content": "<p><code>ctx.runMetaM</code> sort of bootstraps the MetaM monad by giving you a metavariable context, and that lets <code>goal.withContext</code> find its local context and local instances</p>",
        "id": 374612252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689167014
    }
]