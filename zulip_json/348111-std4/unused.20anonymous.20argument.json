[
    {
        "content": "<p>Is the following linter error expected?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"sd\">/-- My foo function. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p>The underscore makes it clear I want this to be an unused argument.</p>",
        "id": 391982046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695151790
    },
    {
        "content": "<p>It is expected, yes. The mathlib/std unused arguments linter looks at the underlying expression and doesn't care about argument names</p>",
        "id": 391982403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695151926
    },
    {
        "content": "<p>Is this considered to be a bug or a feature?</p>",
        "id": 391982786,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695152102
    },
    {
        "content": "<p>a behavior <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 391982812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695152117
    },
    {
        "content": "<p>(unlike the core unused-arg linter, which fails to catch non-syntactic uses, right?)</p>",
        "id": 391982836,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695152130
    },
    {
        "content": "<p>I can see uses for it</p>",
        "id": 391982857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695152135
    },
    {
        "content": "<p>right <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span></p>",
        "id": 391982878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695152147
    },
    {
        "content": "<p>for instance you can use <code>def foo (_ : Nat) : Nat := by assumption</code> to make a non-constant function with an unnamed argument</p>",
        "id": 391982970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695152180
    },
    {
        "content": "<p>calling the variable <code>x</code> there would probably trigger the core linter</p>",
        "id": 391983006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695152201
    },
    {
        "content": "<p>the mathlib linter is more about actually detecting constant functions</p>",
        "id": 391983059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695152232
    }
]