[
    {
        "content": "<p>I started a review of <a href=\"https://github.com/leanprover/std4/pull/74\">std4#74</a>, and one of the big things it does is rename structure fields so that they can be exported. I'm wondering what our thoughts are on how willing we should be to pollute the toplevel namespace.</p>\n<p>Coming from something like OCaml modules, I sorta would prefer the toplevel namespace only have package namespaces, so for Std I'd want all new types under the <code>Std</code> namespace. I find it actually rather helpful to have to <code>open</code> relevant namespaces as you need them, since otherwise the namespace can get very large pretty quickly...</p>",
        "id": 373798468,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688948997
    },
    {
        "content": "<p>Part of the issue I think <a href=\"https://github.com/leanprover/std4/pull/74\">std4#74</a> is trying to address is that comparison functions don't have a namespace, so what would probably be most elegantly stated as <code>def Cmp.le_trans (c : Cmp A) [TransCmp c] : ...</code> is instead currently <code>TransCmp.le_trans</code>, which requires you to know the name of the typeclass from which this property is defined.</p>",
        "id": 373798803,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688949130
    },
    {
        "content": "<p>But we can obviously solve that instead by introducing a definition <code>def _root_.Std.Cmp A := A -&gt; A -&gt; Bool</code> and moving cmp related definitions into that namespace.</p>",
        "id": 373798908,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688949179
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover/std4/pull/74\">std4#74</a> is <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>'s PR, but I'd like to hear from anybody who has thoughts on why we might still want to put stuff in the toplevel namespace)</p>",
        "id": 373799236,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688949333
    },
    {
        "content": "<p>For what it's worth, I always thought this should go in the <code>Ord</code> namespace. (That's how it works in my personal stuff.) For some reason, there seems to be a (historical?) preference for using a comparison function parameter instead of the <code>Ord</code> class.</p>",
        "id": 373804072,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688951431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>'s issue <a href=\"https://github.com/leanprover/std4/issues/51\">#51</a> appears to suggest not everyone prefers using comparison function parameters and would rather use the <code>Ord</code> class.</p>",
        "id": 373805180,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688951930
    },
    {
        "content": "<p>Just to be clear about \"top-level namespace\": almost all of this stuff is in <code>Std</code> not in <code>_root_</code></p>",
        "id": 373818135,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688958590
    },
    {
        "content": "<p>that's a good clarification, I wasn't paying close enough attention to the PR <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> (although Std does export some stuff to _root_ iirc)</p>",
        "id": 373819449,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688959334
    },
    {
        "content": "<p>I do think of <code>Std</code> as a top-level namespace. I expect a lot of stuff to start with <code>open Std</code>. But it's not <em>the</em> top level namespace!</p>",
        "id": 373820335,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688959842
    },
    {
        "content": "<p>Now that I revisited this old PR, I see that I opted for adding the <code>cmp_</code> prefix everywhere instead of a proper namespace. If I remember correctly, my thought pattern was that this prefix was a shortcut that allowed me to use things like <code>cmp x y = .lt</code> by saying just <code>lt</code> instead of <code>cmp_eq_lt</code>. (<code>cmp_eq_eq</code> is really confusing!) I still think it's best to put all this in <code>Ord</code> but that would need some redesign.</p>",
        "id": 373822949,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688961145
    },
    {
        "content": "<p>Whatever redesign should keep in mind this old core issue <a href=\"https://github.com/leanprover/lean4/issues/1777\">#1777</a></p>",
        "id": 373823545,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688961469
    },
    {
        "content": "<p>another can of worms <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 373824213,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688961769
    },
    {
        "content": "<p>I'd be fine with putting all of it in an <code>Ord</code> namespace fwiw, but I assume there is a reason that was being avoided in Std. Will wait for Mario's 2c.</p>",
        "id": 373824367,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688961850
    },
    {
        "content": "<p>I don't mind putting it in a further namespace (<code>Std.Ord</code>? or just <code>Ord</code>?), but I didn't see much need to do so. In part the reason this setup is heavy on namespacing and light on re-exports is because it is intended primarily for internal use, it wasn't trying to be \"the official class for ordering\" which users would certainly expect from anything in the <code>_root_.Ord</code> real estate.</p>",
        "id": 373826016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688962923
    },
    {
        "content": "<p>This is also caused by the fact that it's a proof typeclass for comparator functions, which is quite awkward to use to begin with, so I'm not too excited to promulgate this interface too widely when it is so obviously suboptimal. I agree we want something like <code>Ord</code> in the future which allows using any of the notations or comparators as desired.</p>",
        "id": 373826237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688963096
    },
    {
        "content": "<p>Actually I think I want to restate my original statement: I would be against moving these declarations to the <code>Ord</code> namespace unless they are also modified to use the <code>Ord</code> typeclass.</p>",
        "id": 373826396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688963210
    },
    {
        "content": "<p>For \"historical context\", the reason <code>RBMap</code> and <code>HashMap</code> take their arguments the way they do is because the initial implementation was a copy of the version in <code>Lean</code>, which does the same thing. The provable version just adds the assumptions needed for the proofs without changing the interface. I'm not especially attached to the interface as it currently exists, although there are obviously some API issues to work out</p>",
        "id": 373826752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688963424
    },
    {
        "content": "<p>Sounds good to me. We can repurpose <a href=\"https://github.com/leanprover/std4/pull/74\">std4#74</a> to refactor all of the cmp stuff to work with <code>Ord</code> if that's good with everyone?</p>",
        "id": 373827402,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688963881
    },
    {
        "content": "<p>I think <code>Ord</code> itself needs to be fixed first</p>",
        "id": 373828936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688964716
    },
    {
        "content": "<p>Are you referring to <a href=\"https://github.com/leanprover/lean4/pull/1777\">lean4#1777</a> or a different issue?</p>",
        "id": 373830429,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688965419
    }
]