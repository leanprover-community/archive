[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6356\">#6356</a> removes some bitshift machinery in mathlib4 that duplicates what's already in core/std. Unfortunately, some of the natural simp lemmas are now rejected by the <code>simpNF</code> linter because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.shiftLeft_eq#doc\">docs#Nat.shiftLeft_eq</a> declares that <code>a &lt;&lt;&lt; b</code> is never simp-normal form. Is the suggestion there to remove the  simp attribute reasonable?</p>",
        "id": 386391850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692624760
    },
    {
        "content": "<p>do we really want <code>a &lt;&lt;&lt; b</code> to be simp-normal? It doesn't play well with stuff like <code>ring</code>/<code>linarith</code></p>",
        "id": 386476719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692652553
    },
    {
        "content": "<p>Well, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.shiftl#doc\">docs#Nat.shiftl</a> (the definition we're removing) was already simp-normal, so no one complained in Lean 3...</p>",
        "id": 386476806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692652587
    },
    {
        "content": "<p>My speculation is that when working with bit-shifts, you probably want to have manual control of switching back and forth between \"regular arithmetic\" and \"bitwise arithmetic\" lands, and would prefer not to have <code>simp</code> converting between them for you without asking</p>",
        "id": 386477026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692652702
    },
    {
        "content": "<p>the premise of this simp lemma is that there shouldn't be a \"bitwise arithmetic\" land in the first place</p>",
        "id": 386477113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692652767
    },
    {
        "content": "<p>I'm not sure mathlib is a very strong signal here because we don't have that much actual material on bitwise ops</p>",
        "id": 386477255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692652822
    },
    {
        "content": "<p>It would certainly be easier to align Std and Mathlib if we took the compromise of using Mathlib's simp-convention and Std's names</p>",
        "id": 386477706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692653048
    },
    {
        "content": "<p>Since I think mathlib still has more on bitwise ops than Std?</p>",
        "id": 386477729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692653063
    },
    {
        "content": "<p>Presumably all the bitwise stuff is at risk of being upstreamed to Std anyway, at which point it can all be refactored together</p>",
        "id": 386477765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692653095
    },
    {
        "content": "<p>The person on the PR says that they have to <code>simp [-Nat.shiftLeft_eq]</code> a lot but I only see one instance of this, on a lemma that can be proved directly without induction using that theorem</p>",
        "id": 386477789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692653112
    },
    {
        "content": "<p>I suspect this is just a mismatch of definitions when switching from the mathlib definition (which is effectively recursive doubling/halving) and the std definition (which does all the division in one go), meaning that the mathlib proofs are no longer optimal with the std definition</p>",
        "id": 386478041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692653251
    },
    {
        "content": "<p>this can manifest as needing to <code>simp [-Nat.shiftLeft_eq]</code> a lot if you don't change the structure of the original proofs</p>",
        "id": 386478074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692653282
    },
    {
        "content": "<p>Would your recommendation be just to deal with the new <code>simp</code> behavior for now and acquiesce to the linters demands?</p>",
        "id": 386478176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692653336
    },
    {
        "content": "<p>(and suggest the contributor clean up the proofs in a follow-up)</p>",
        "id": 386478203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692653346
    },
    {
        "content": "<p>Yes, I think we need more data to make an informed decision here so just leaving the status quo seems best</p>",
        "id": 386478383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692653425
    },
    {
        "content": "<p>suppressing the linter also seems fine</p>",
        "id": 386478434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692653450
    },
    {
        "content": "<p>There are two status quos here, so we have to pick one of them</p>",
        "id": 386478457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692653464
    },
    {
        "content": "<p>We could also <code>attribute [-simp]</code> the lemma in mathlib with a TODO</p>",
        "id": 386478484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692653483
    },
    {
        "content": "<p>does that actually work?</p>",
        "id": 386478499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692653490
    },
    {
        "content": "<p>Then both Std and mathlib get to keep their status quos</p>",
        "id": 386478500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692653491
    },
    {
        "content": "<p>I didn't try...</p>",
        "id": 386478508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692653497
    },
    {
        "content": "<p>If so then I agree that's fine but I think lean rejects it</p>",
        "id": 386478524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692653505
    },
    {
        "content": "<p><code>attribute [-simp]</code> is allowed, but maybe it's file-local</p>",
        "id": 386479640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692654193
    },
    {
        "content": "<p>I pushed a <code>nolint</code> to the PR</p>",
        "id": 386480249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692654563
    }
]