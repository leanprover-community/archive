[
    {
        "content": "<p>See:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">HashMap.empty</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span>  <span class=\"c1\">-- true</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">HashMap.empty.insert</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span>  <span class=\"c1\">-- false</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">HashMap.empty</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- okay</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">HashMap.empty.insert</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- type mismatch</span>\n</code></pre></div>\n<p>Two questions:</p>\n<ol>\n<li>How to I determine where this is failing, besides jumping to definition recursively on <code>HashMap.insert</code>?</li>\n<li>Is there any prospect of fixing this?</li>\n</ol>",
        "id": 403887177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700795303
    },
    {
        "content": "<p>(The same behaviour happens with <code>Lean.HashMap</code>: change <code>open Std</code> to <code>open Lean</code> above.)</p>",
        "id": 403890043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700796857
    },
    {
        "content": "<p>Oh:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- type mismatch</span>\n</code></pre></div>",
        "id": 403891392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700797637
    },
    {
        "content": "<p>I see, so it all comes down to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">System.Platform.numBits</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">System.Platform.numBits</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- type mismatch</span>\n</code></pre></div>",
        "id": 403892911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700798450
    },
    {
        "content": "<p>is the dependency on <code>numBits</code> from hashable or from hashmap?</p>",
        "id": 403893991,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700798978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>, see <a href=\"https://github.com/leanprover/std4/pull/390\">std4#390</a></p>",
        "id": 403894332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700799190
    },
    {
        "content": "<p>I've no idea if it has significant performance problems, but it makes my problem go away. :-)</p>",
        "id": 403894354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700799211
    },
    {
        "content": "<p>aha :-) 32bit platforms were out of date a decade ago, I feel okay with not caring heavily about performance on 32bit machines!</p>",
        "id": 403894553,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700799334
    },
    {
        "content": "<p>Couldn't we make <code>System.Platform.numBits</code> a thing that is specially handled by the kernel? That seems like a <em>very</em> conservative extension to the kernel.</p>",
        "id": 403922269,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700814936
    },
    {
        "content": "<p>Like in general the underlying issue here is not that you can't compute with <code>HashMap.insert</code> but instead with <code>USize</code> in the kernel which seems like something that we might want to do in general?</p>",
        "id": 403922391,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700814978
    },
    {
        "content": "<p>Be careful not to prove false by calculating <code>numBits</code> on one platform, then loading that <code>.olean</code> on a different platform and calculating again for a different answer...</p>",
        "id": 403923383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700815390
    },
    {
        "content": "<p>But thats a technical issue right? one could put in how many bits you expect on this platform etc. and don't load if the configuration doesn't match.</p>\n<p>Also Lean4checker should still notice one of the two configurations as false I think?</p>",
        "id": 403924516,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700815871
    },
    {
        "content": "<p>Yes, it's solvable. I'm just speculating as to why it's as it is now.</p>",
        "id": 403924851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700816019
    },
    {
        "content": "<p>what is the motivation for handling it in the kernel? we can design the simp normal form to push as much computation as possible out of <code>USize</code> if the concern is proof-stuff</p>",
        "id": 403996691,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700844237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/348111-std4/topic/no.20kernel.20reduction.20of.20HashMap.2Einsert/near/403894553\">said</a>:</p>\n<blockquote>\n<p>aha :-) 32bit platforms were out of date a decade ago, I feel okay with not caring heavily about performance on 32bit machines!</p>\n</blockquote>\n<p>I'm more concerned with making sure that Scott's change doesn't regress performance on 64-bit machines. I see some changes from <code>uset</code> to <code>set</code> in the PR</p>",
        "id": 404004294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700848678
    },
    {
        "content": "<p>Given the other thread about <code>Hashable</code> instances also blocking hash computation, I'm inclined to just leave things as is and use a simpler model for kernel computation like association lists</p>",
        "id": 404005026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700849080
    },
    {
        "content": "<p>Another reason not to make the hash algorithm visible to the kernel is that it will make details of it show up in proofs, which will make them more brittle to changes to the algorithm or the internals of HashMap. I don't think we want this to be public API</p>",
        "id": 404005289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700849247
    },
    {
        "content": "<p>I really don't like the idea that we're going to say \"no fast lookup tables in verified algorithms\".</p>\n<p>The Hashable problem is easy to work around: just write your own hash function.</p>",
        "id": 404032162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700870138
    },
    {
        "content": "<p>I think I've already said this in another thread, but to be clear, HashMap is not a \"fast lookup table in verified algorithms\". It has the same performance as AssocList when run in the kernel (probably much worse since it also needs to execute a hash function)</p>",
        "id": 404057231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700888252
    },
    {
        "content": "<p>Got it! I will try to remember to add some documentation to that effect at some point. :-)</p>",
        "id": 404057309,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700888312
    }
]