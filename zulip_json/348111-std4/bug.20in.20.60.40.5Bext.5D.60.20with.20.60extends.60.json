[
    {
        "content": "<p>The behavior of the <code>@[ext]</code> attribute on structures with <code>extends</code> clauses seems suboptimal to me, and doesn't match what happens when the <code>extends</code> fields are inlined. Below, I would expect both occurrences to generate <code>Prod''.ext</code>. That way, when this <code>ext</code> lemma is called, we can stop at an earlier step with <code>ext1</code>. Right now, for <code>extends</code> fields, it seems that <code>@[ext]</code> calls the <code>ext</code> lemmas on the structures being extended.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Prod'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Prod''</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toProd</span> <span class=\"o\">:=</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Prod'.ext</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Prod'.ext.{u_1, u_2} {α : Type u_1} {β : Type u_2} (x y : Prod' α β)</span>\n<span class=\"cm\">    (fst : x.toProd.fst = y.toProd.fst)</span>\n<span class=\"cm\">    (snd : x.toProd.snd = y.toProd.snd) : x = y</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Prod''.ext</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Prod''.ext.{u_1, u_2} {α : Type u_1} {β : Type u_2} (x y : Prod'' α β)</span>\n<span class=\"cm\">    (toProd : x.toProd = y.toProd) : x = y</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 376796649,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689802943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span>. I guess <code>ext</code> is in <code>Std</code> now. You can move it to that stream of it you want.</p>",
        "id": 376798100,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689803486
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/bug.20in.20.02klzzwxh.3A0000.03.20with.20.02klzzwxh.3A0001.03\">#mathlib4 &gt; bug in <code>@[ext]</code> with <code>extends</code></a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 376800183,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689804392
    },
    {
        "content": "<p>Lol, this has literally gone back and forth between these two behaviors already. There is a flag <code>@[ext (flat := false)]</code> to control it</p>",
        "id": 376800450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689804512
    },
    {
        "content": "<p>Hah! I was just looking at that flag and thought it might exist for this purpose. I can just use that flag. Where is the prior discussion about this behavior?</p>",
        "id": 376800884,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689804690
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/!4.233360.20new.20ext.20lemma.20generation/near/351102875\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/!4.233360.20new.20ext.20lemma.20generation/near/351102875</a></p>",
        "id": 376801079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689804783
    }
]