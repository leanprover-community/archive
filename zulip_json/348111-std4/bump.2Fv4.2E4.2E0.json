[
    {
        "content": "<p>Our first Lean adaptation PR under the <a href=\"https://leanprover-community.github.io/contribute/tags_and_branches.html\">new combined CI regime</a> is ready to go!</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and/or <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span>, could you please look at <a href=\"https://github.com/leanprover/std4/pull/383\">std#383</a> and merge it (into its base <code>bump/v4.4.0</code>).</p>",
        "id": 404185493,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700963305
    },
    {
        "content": "<p>The plan is that the <code>bump/v4.4.0</code> branch will accumulate already approved changes (unlike the no holds barred <code>nightly-testing</code>), and if all goes well when <code>v4.4.0-rc1</code> comes out we'll just have a straightforward merge of <code>bump/v4.4.0</code> into <code>main</code>.</p>",
        "id": 404185592,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700963373
    },
    {
        "content": "<p>Something I don't see in the regime document is a mechanism to merge the latest <code>master</code> back into <code>bump/v4.X.0</code> when they diverge; my suggestion would be that this is handled by making a PR against <code>bump/v4.X.0</code> from <code>master</code> (i.e. the reverse direction to the final merge) as necessary (i.e., just before opening a \"real\" PR against <code>bump/v4.X.0</code>). In an ideal world this is a no-op, but the reality is that it will have some downstream fallout that spilled over from the previous merges into the <code>bump</code> branch, and this ensure those are reviewed too.</p>",
        "id": 404276881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701020528
    },
    {
        "content": "<p>Last time someone opened a PR merging master into another branch, bors got very confused. Is this fixed?</p>",
        "id": 404276950,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701020613
    },
    {
        "content": "<p>Ah you're right, that did cause issues. I think it would be easy to hack bors not to do that, but you're right that if we do nothing (and leave the \"retarget branches\" setting on) then it makes a mess</p>",
        "id": 404281593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701024552
    },
    {
        "content": "<p>I think ease of integration with Lean changes is probably more important than retargetting branches automatically, so would be happy to switch that bors setting back off iff we adopt the workflow above.</p>",
        "id": 404281618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701024596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/bump.2Fv4.2E4.2E0/near/404185592\">said</a>:</p>\n<blockquote>\n<p>The plan is that the <code>bump/v4.4.0</code> branch will accumulate already approved changes (unlike the no holds barred <code>nightly-testing</code>), and if all goes well when <code>v4.4.0-rc1</code> comes out we'll just have a straightforward merge of <code>bump/v4.4.0</code> into <code>main</code>.</p>\n</blockquote>\n<p>Should this be a merge or a squash merge?</p>",
        "id": 404282595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701025432
    },
    {
        "content": "<p>I think a regular merge (done without bors) is best in terms of seeing why things were changed</p>",
        "id": 404285762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701028886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, if <code>bump/v4.4.0</code> is regular-merged into <code>master</code> (when its time to update the toolchain), I presume it is still okay to do regular merges of <code>master</code> into <code>bump/v4.4.0</code> to keep them in sync?</p>",
        "id": 404309407,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701047733
    },
    {
        "content": "<p>I think I would prefer a squash merge, my guess is that the history of <code>bump/v4.4.0</code> will be somewhat messy</p>",
        "id": 404309508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701047785
    },
    {
        "content": "<p>I'm worried that these will introduce extra commits that will later end up on <code>master</code>, too.</p>",
        "id": 404309511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701047790
    },
    {
        "content": "<p><code>bump/v4.4.0</code> will be merged into <code>master</code> via a PR, so the history is all still available at the PR.</p>",
        "id": 404309549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701047817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/348111-std4/topic/bump.2Fv4.2E4.2E0/near/404276950\">said</a>:</p>\n<blockquote>\n<p>Last time someone opened a PR merging master into another branch, bors got very confused. Is this fixed?</p>\n</blockquote>\n<p>Actually, this should be fixed: <a href=\"https://github.com/bors-ng/bors-ng/pull/1715\">https://github.com/bors-ng/bors-ng/pull/1715</a></p>",
        "id": 404368176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701077099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/bump.2Fv4.2E4.2E0/near/404309508\">said</a>:</p>\n<blockquote>\n<p>I think I would prefer a squash merge, my guess is that the history of <code>bump/v4.4.0</code> will be somewhat messy</p>\n</blockquote>\n<p>Ideally it would consist only of \"update bump/v4.4.0 for changes from lean4#XYZ\" and \"merge latest master into bump/v4.4.0\". Being worried about the mess sounds odd to me; the mess is precisely the thing that will have been reviewed.</p>",
        "id": 404368578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701077241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/bump.2Fv4.2E4.2E0/near/404309549\">said</a>:</p>\n<blockquote>\n<p><code>bump/v4.4.0</code> will be merged into <code>master</code> via a PR, so the history is all still available at the PR.</p>\n</blockquote>\n<p>Maybe GitHub will outlive us all, but my experience with numpy was that anything not recorded in the git history is at risk of becoming inaccessible; references to an old bug/PR tracking system that is offline and not archived anywhere are useless.</p>",
        "id": 404369286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701077444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/bump.2Fv4.2E4.2E0/near/404368578\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/bump.2Fv4.2E4.2E0/near/404309508\">said</a>:</p>\n<blockquote>\n<p>I think I would prefer a squash merge, my guess is that the history of <code>bump/v4.4.0</code> will be somewhat messy</p>\n</blockquote>\n<p>Ideally it would consist only of \"update bump/v4.4.0 for changes from lean4#XYZ\" and \"merge latest master into bump/v4.4.0\". Being worried about the mess sounds odd to me; the mess is precisely the thing that will have been reviewed.</p>\n</blockquote>\n<p>Note that the mess being difficult to review has been a problem with the last few iterations on this bump process.</p>",
        "id": 404371252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701078101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/bump.2Fv4.2E4.2E0/near/404369286\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/bump.2Fv4.2E4.2E0/near/404309549\">said</a>:</p>\n<blockquote>\n<p><code>bump/v4.4.0</code> will be merged into <code>master</code> via a PR, so the history is all still available at the PR.</p>\n</blockquote>\n<p>Maybe GitHub will outlive us all, but my experience with numpy was that anything not recorded in the git history is at risk of becoming inaccessible; references to an old bug/PR tracking system that is offline and not archived anywhere are useless.</p>\n</blockquote>\n<p>We very much rely on PR history as part of the archive, and we would need to take it with us if Github faces some future calamity. We should never have used squash merge if this was a concern.</p>",
        "id": 404371612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701078222
    },
    {
        "content": "<blockquote>\n<p>Note that the mess being difficult to review has been a problem with the last few iterations on this bump process.</p>\n</blockquote>\n<p>Arguably this is because we weren't able to manage <code>bump/v4.4.0</code> cleanly last time (I believe Scott said this was because we decided the strategy mid-cycle and it was too late?)</p>",
        "id": 404384658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701082030
    },
    {
        "content": "<p>So far this <code>bump/v4.4.0</code> is super simple. One PR each on Std and Mathlib, and we're only three days from the next version.</p>",
        "id": 404386479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701082630
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover/std4/pull/406\">std4#406</a> (moving <code>bump/v4.4.0</code> up to <code>nightly-2023-11-29</code>, and adjusting the lakefile for the new syntax for specifying options) is ready to go.</p>\n<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> and/or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could one of you please prioritize merging this? It will be necessary for the version bumps, which I'll hopefully be able to start in about +2 hours.</p>",
        "id": 404981883,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701306775
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover/std4/pull/409\">std4#409</a> is now the PR moving Std to <code>v4.3.0</code> (this is essentially no-op, because <code>v4.3.0</code> is identical to <code>v4.3.0-rc2</code>, but I want to make sure there is a commit on the master branch on each stable version!</p>",
        "id": 404997802,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701312505
    },
    {
        "content": "<p>Again, <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> /<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, it's helpful if this can be merged soon so downstream repos moving to <code>v4.3.0</code> can point at the right commit.</p>",
        "id": 404998021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701312575
    },
    {
        "content": "<p>I just did it myself, I think that's okay per previous discussion.</p>",
        "id": 405000443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701313272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could you take another look at fix: <a href=\"http://DiscrTreeCache.mk\">DiscrTreeCache.mk</a> init argument should be lazy <a href=\"https://github.com/leanprover/std4/pull/408\">std4#408</a>?</p>\n<p>Without this fix, if the <code>exact?</code> or <code>rw?</code> cache were built on a previous toolchain you get a crash on every file that imports them (as the <code>.olean</code> is eagerly loaded, and rejected because it has the wrong embedded hash).</p>",
        "id": 405228988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701388143
    },
    {
        "content": "<p>Hence I need this in Std before I can move Mathlib's <code>bump/v4.4.0</code> up to <code>nightly-2023-11-29</code> (and hence before I can move Mathlib to <code>v4.4.0-rc1</code>).</p>",
        "id": 405229043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701388177
    }
]