[
    {
        "content": "<p>strange MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">liftM_stateT_bind</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ma</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">s</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span> <span class=\"n\">liftM</span><span class=\"o\">,</span> <span class=\"n\">monadLift</span><span class=\"o\">,</span> <span class=\"n\">MonadLift.monadLift</span><span class=\"o\">,</span> <span class=\"n\">StateT.lift</span><span class=\"o\">,</span>\n          <span class=\"n\">StateT.instMonadStateT</span><span class=\"o\">,</span> <span class=\"n\">StateT.bind</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>does not return a reasonable list of simp lemmas. am I doing something wrong or is this a bug? this is on lean 03-28 with std4 <code>5507f9d</code></p>",
        "id": 345795120,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680213811
    },
    {
        "content": "<p>(came up while cleaning up some of the Dijkstra monad stuff :P)</p>",
        "id": 345795165,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680213834
    },
    {
        "content": "<p>note that this is actually implemented in core, <code>simp?</code> is just a syntax over <code>set_option tactic.simp.trace true in simp</code></p>",
        "id": 345799709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680215946
    },
    {
        "content": "<p>It doesn't seem to be a lie, <code>simp</code> actually does fewer rewrites when you give it <code>monadLift</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ma</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">liftM</span><span class=\"o\">,</span> <span class=\"n\">monadLift</span><span class=\"o\">,</span> <span class=\"n\">monadLift_self</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [Meta.Tactic.simp.rewrite] unfold liftM, liftM (ma &gt;&gt;= f) s ==&gt; monadLift (ma &gt;&gt;= f) s</span>\n<span class=\"c1\">-- [Meta.Tactic.simp.rewrite] @eq_self:1000, (ma &gt;&gt;= f) s = (ma &gt;&gt;= fun a =&gt; f a) s ==&gt; True</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ma</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">liftM</span><span class=\"o\">,</span> <span class=\"n\">monadLift_self</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [Meta.Tactic.simp.rewrite] unfold liftM, liftM (ma &gt;&gt;= f) s ==&gt; monadLift (ma &gt;&gt;= f) s</span>\n<span class=\"c1\">-- [Meta.Tactic.simp.rewrite] @monadLift_self:1000, monadLift (ma &gt;&gt;= f) ==&gt; ma &gt;&gt;= f</span>\n<span class=\"c1\">-- [Meta.Tactic.simp.rewrite] @eq_self:1000, (ma &gt;&gt;= f) s = (ma &gt;&gt;= fun a =&gt; f a) s ==&gt; True</span>\n</code></pre></div>",
        "id": 345800306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680216214
    },
    {
        "content": "<p>those simp lists don't close the goal for me...</p>",
        "id": 345801239,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680216630
    },
    {
        "content": "<p>are you on 03-28?</p>",
        "id": 345801315,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680216668
    },
    {
        "content": "<p>03-17</p>",
        "id": 345801345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680216683
    },
    {
        "content": "<p>oh dear</p>",
        "id": 345801361,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680216691
    },
    {
        "content": "<p>this is also with all of Std imported</p>",
        "id": 345801384,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680216702
    },
    {
        "content": "<p>mine is from an empty file</p>",
        "id": 345801502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680216738
    },
    {
        "content": "<p>but it still works with <code>import Std</code></p>",
        "id": 345801547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680216763
    },
    {
        "content": "<p>huh, works for me without Std imported</p>",
        "id": 345801558,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680216772
    },
    {
        "content": "<p>wait and with it imported</p>",
        "id": 345801574,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680216785
    },
    {
        "content": "<p>let me investigate, sorry for the noise</p>",
        "id": 345801582,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680216789
    },
    {
        "content": "<p>I think I sent an incorrectly-minimized MWE. this one works (fails?) for me with just Std imported:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">StateT.liftM_bind</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">liftM</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">instMonadLiftT</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ma</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">s</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">liftM</span><span class=\"o\">,</span> <span class=\"n\">monadLift</span><span class=\"o\">,</span> <span class=\"n\">MonadLift.monadLift</span><span class=\"o\">,</span> <span class=\"n\">StateT.lift</span><span class=\"o\">,</span>\n        <span class=\"n\">StateT.instMonadStateT</span><span class=\"o\">,</span> <span class=\"n\">StateT.bind</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>the statement is different from the one above</p>",
        "id": 345802009,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680216985
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">tactic.simp.trace</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monadLift</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ma</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">StateT.lift</span><span class=\"o\">,</span> <span class=\"n\">monadLift</span><span class=\"o\">,</span> <span class=\"n\">MonadLift.monadLift</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [Meta.Tactic.simp.rewrite] unfold StateT.lift, StateT.lift (monadLift ma) s ==&gt; do</span>\n<span class=\"c1\">--       let a ← monadLift ma</span>\n<span class=\"c1\">--       pure (a, s)</span>\n\n<span class=\"c1\">-- Try this: dsimp only [StateT.lift]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monadLift</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ma</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">StateT.lift</span><span class=\"o\">]</span>\n<span class=\"c1\">-- no rewrites</span>\n</code></pre></div>",
        "id": 345804559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680218171
    }
]