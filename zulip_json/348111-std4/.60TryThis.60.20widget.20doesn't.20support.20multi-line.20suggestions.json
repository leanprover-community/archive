[
    {
        "content": "<p>As reported in <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.02klzzwxh.3A0000.03.20produces.20invalid.20and.20redundant.20output\">#lean4 &gt; <code>aesop?</code> produces invalid and redundant output</a>  and <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Limits.20of.20Aesop.3F\">#lean4 &gt; Limits of Aesop?</a>, the <code>TryThis</code> widget currently has trouble with multi-line suggestions. In the first example of the following MWE, applying the \"Try this\" suggestion results in malformed syntax even though the syntax provided to the widget is wellformed. The second example shows that long lines don't trigger this issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Std.Tactic</span>\n\n<span class=\"c1\">-- Fails:</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test₁\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"n\">TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">tac</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test₁</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"c1\">-- Works:</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test₂\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"mi\">17</span><span class=\"o\">,</span> <span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"mi\">19</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">21</span><span class=\"o\">,</span> <span class=\"mi\">22</span><span class=\"o\">,</span> <span class=\"mi\">23</span><span class=\"o\">,</span> <span class=\"mi\">24</span><span class=\"o\">,</span> <span class=\"mi\">25</span><span class=\"o\">,</span> <span class=\"mi\">26</span><span class=\"o\">,</span> <span class=\"mi\">27</span><span class=\"o\">,</span> <span class=\"mi\">28</span><span class=\"o\">,</span> <span class=\"mi\">29</span><span class=\"o\">,</span> <span class=\"mi\">30</span><span class=\"o\">])</span>\n  <span class=\"n\">TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">tac</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test₂</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>I'm not familiar with the widgets stuff, so I'd be grateful if someone who knows this stuff could take a look.</p>",
        "id": 389936641,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694200705
    },
    {
        "content": "<p>I can't replicate, I get an unbroken <code>exact [...]</code> line when you trigger the 'try this' via either the code action or the button in the infoview</p>",
        "id": 389941281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694202857
    },
    {
        "content": "<p>your try this suggestions are a bit weird though, they don't typecheck</p>",
        "id": 389941478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694202944
    },
    {
        "content": "<p>Your test1 example is also probably getting confused by the <code>tactic.seq</code> syntax quotation: check the type of <code>tac</code>!</p>",
        "id": 389941639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694203012
    },
    {
        "content": "<p>Using a <code>tactic.seq</code> where a <code>tactic</code> is expected produces ill formed syntax</p>",
        "id": 389941725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694203051
    },
    {
        "content": "<p>Another thing you might not be aware of: the syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>is parsed as a sequence of three tactics <code>simp</code> <code>rfl</code> <code>trivial</code> with optional semicolons, where only <code>simp</code> has a semicolon after it</p>",
        "id": 389941908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694203124
    },
    {
        "content": "<p>it is not a sequence of two tactics <code>simp; rfl</code> <code>trivial</code> which is I think what you are expecting</p>",
        "id": 389941961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694203153
    },
    {
        "content": "<p>The <code>exact [...]</code> example works for me as well. The <code>simp; rfl</code> example indeed also works if I change the type of the quotation to <code>Lean.Parser.Tactic.tacticSeq</code>. However, this example doesn't work (also with <code>tacticSeq1Indented</code> and <code>tacticSeqBracketed</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Std.Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Lean.Parser.Tactic.tacticSeq</span><span class=\"bp\">|</span> <span class=\"n\">simp</span>\n                                            <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"n\">TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">tac</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>The message correctly prints</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Try this:\n  simp\n  rfl\n</code></pre></div>\n<p>but clicking on the <code>Try this</code> suggestion inserts the sequence indented, so I get</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>    simp\n    rfl\n  trivial\n</code></pre></div>",
        "id": 389952607,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694208602
    },
    {
        "content": "<p><code>addSuggestion</code> is expecting a syntax of type <code>tactic</code></p>",
        "id": 389952921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694208787
    },
    {
        "content": "<p>Okay. I need the generalisation to <code>tacticSeq</code> for Aesop's <code>aesop?</code>. I'll see if I can get this to work.</p>",
        "id": 389953811,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694209350
    },
    {
        "content": "<p>Are you willing to have parentheses in the tactics? If I remember correctly, <code> `(tactic| (simp; rfl))</code> for example would be a tactic instead of a tacticSeq</p>",
        "id": 389954242,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694209637
    },
    {
        "content": "<p>Yeah, parentheses help for that. They also works for multi-line tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">simp</span>\n                       <span class=\"n\">rfl</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- tac : TSyntax `tactic</span>\n</code></pre></div>",
        "id": 389954467,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694209769
    },
    {
        "content": "<p>With parentheses, the <code>Try this</code> is indeed formatted correctly. But having the parens in the output is obviously not ideal for the <code>aesop?</code> use case.</p>",
        "id": 389955296,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694210316
    },
    {
        "content": "<p>Btw, <a href=\"https://github.com/leanprover/std4/pull/215\">std#215</a> generalizes <code>addSuggestion</code>, and does not restrict you to <code>TSyntax `tactic</code> :)</p>",
        "id": 390377834,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694461887
    },
    {
        "content": "<p>I checked, and it looks like using <code>tacticSeq</code> for the suggestion works as you’d expect in <a href=\"https://github.com/leanprover/std4/pull/215\">std#215</a>. I noticed that it’s prettyprinted with an indent before each line, though.</p>\n<p>If it’s just a single suggestion, changing the header from <code>\"Try this: \"</code> to <code>\"Try this:\\n\"</code> in the inline case (<code>addSuggestion</code>) makes it look reasonable. Otherwise, the bulleted list given by <code>addSuggestions</code> looks okay, though the indent is apparent.</p>",
        "id": 390426286,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694483214
    },
    {
        "content": "<p>the bigger issue is that the indentation doesn't work in the code action</p>",
        "id": 390426958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694483465
    },
    {
        "content": "<p>Ah, right. The code action. The point of adding a suggestion in the first place. There is that. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 390592562,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694550984
    },
    {
        "content": "<p>I noticed two issues there: the indentation doesn't work, but also, if you use the code action immediately after a <code>·</code> focus, you get an extra newline but the correct indentation, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">·</span> <span class=\"n\">test</span> <span class=\"c1\">-- Try this: simp / rfl</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">·</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 390592862,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694551125
    },
    {
        "content": "<p>(When we're already a couple tactics into a focus block, the indentation is an issue again, but the newline isn't.)</p>",
        "id": 390592964,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694551198
    },
    {
        "content": "<p>this is creating malformed syntax, so it's not too surprising the formatting is a bit wonky. TBH it's surprising you see anything at all</p>",
        "id": 390595250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694552189
    },
    {
        "content": "<p>What's malformed? To be clear, I'm still working in the context of <a href=\"https://github.com/leanprover/std4/pull/215\">std4#215</a>, with <code>TSyntax `tacticSeq</code></p>",
        "id": 390596637,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694552718
    },
    {
        "content": "<p>(Actually, I retract the statement that it looks okay with the right header in this PR. I must have been doing something slightly different; it no longer looks okay.)</p>",
        "id": 390597778,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694553193
    },
    {
        "content": "<p>Hmm, I think I see two issues</p>\n<ul>\n<li>the code action behavior</li>\n<li>the way it displays as a suggestion in the infoview</li>\n</ul>\n<p>The reason these are different issues is that the inserted string often ought to include a bunch of indentation in front of each line that's not the first, even if we were using the right string for the code action, e.g. <code>\"simp\\n    rfl\"</code>. With header <code>\"Try this:\\n\"</code>, this displays as e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"n\">simp</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>which is not what we want. We want to trim the same amount of indentation off of each line for display. (We can't necessarily use the indent of the first line, either, since it might not be the most-indented line in general.)</p>",
        "id": 390601603,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694555075
    },
    {
        "content": "<p>I’m tempted to just handle the latter in JavaScript. That way, we don’t have to pass more info back and forth to the infoview.</p>",
        "id": 390603317,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694555914
    },
    {
        "content": "<p>Actually, we would have to pass one more piece of info anyway (the initial indent); I’m not sure how much it makes sense to optimize the sent JSON for size. Maybe we ought to just send two strings from Lean.</p>",
        "id": 390603670,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694556064
    },
    {
        "content": "<p>Re: the first issue (the code action), I'll note that the behavior is correct when following <code>by</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">test</span> <span class=\"c1\">-- Try this: simp / rfl</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>so it's probably treating <code>·</code> the same way.</p>",
        "id": 390604224,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694556309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/348111-std4/topic/.60TryThis.60.20widget.20doesn't.20support.20multi-line.20suggestions/near/390603670\">said</a>:</p>\n<blockquote>\n<p>Actually, we would have to pass one more piece of info anyway (the initial indent); I’m not sure how much it makes sense to optimize the sent JSON for size. Maybe we ought to just send two strings from Lean.</p>\n</blockquote>\n<p>I would say for this usecase, it does not matter. The JSON will only be sent when the user moves their cursor around or changes some text, and the blob will not be large to begin with.</p>",
        "id": 390622356,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694566650
    }
]