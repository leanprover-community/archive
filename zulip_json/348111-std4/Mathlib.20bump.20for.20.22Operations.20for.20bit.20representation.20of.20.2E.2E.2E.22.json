[
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/366\">std4#366</a> has gone through now, and it has caused some breakages in Mathlib.</p>\n<p>The adaptation PR is at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8700\">#8700</a>, but it is incomplete. Any assistance much appreciated.</p>\n<p>(Pinging <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> as the author of <a href=\"https://github.com/leanprover/std4/pull/366\">std4#366</a>.)</p>",
        "id": 404801443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701242613
    },
    {
        "content": "<p>I've fixed a bit more. I'm hoping that a file with module doc \"perhaps only of archaeological significance\" is allowed to have some hacky proofs.</p>",
        "id": 404807509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701245033
    },
    {
        "content": "<p>I've now either fixed everything, or commented out things that are broke but not used elsewhere in Mathlib.</p>\n<p>I'd really like a resolution to this PR by tomorrow, so I can release v4.3.0. This PR will potentially hold it up as Mathlib and Std are out of sync.</p>\n<p>Options:</p>\n<ul>\n<li>Someone enthusiastic about bitwise operations quickly patches these up. </li>\n<li>We leave the broken but unused theorems commented out for someone to fix later.</li>\n<li>We just delete these lemmas outright.</li>\n</ul>",
        "id": 404812460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701247196
    },
    {
        "content": "<p>Now that lots of material about bitwise operations has moved up to Std, and changed in the process, the treatment of bitwise operations in Mathlib is looking pretty bedraggled. Someone taking care of it more generally would be great!</p>",
        "id": 404812664,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701247264
    },
    {
        "content": "<p>Can we just rename the mathlib definitions for now and keep the theorems?</p>",
        "id": 404820085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701249704
    },
    {
        "content": "<p>(The theorems are also good candidates for <code>proof_wanted</code> in std BTW)</p>",
        "id": 404820367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701249794
    },
    {
        "content": "<p>Does anything in mathlib depend on bitwise operations?</p>",
        "id": 404825124,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701251493
    },
    {
        "content": "<p>Sadly yes, it is quite hard to rip this out.</p>",
        "id": 404826864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701252075
    },
    {
        "content": "<p>If someone wanted to do a refactor to separate out the material that is used in other files, vs the rest, that would be great!</p>",
        "id": 404826920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701252093
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib4/pull/8705\">#8705</a> is the alternative bump PR, that keeps Mathlib's <code>Nat.testBit</code>, renaming it to <code>Nat.testBit'</code>.</p>",
        "id": 404827979,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701252430
    },
    {
        "content": "<p>It would be great if one of these (probably <a href=\"https://github.com/leanprover-community/mathlib4/pull/8705\">#8705</a>) could be merged by tomorrow so I can do the v4.3.0 release. :-)</p>",
        "id": 404829145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701252785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20for.20.22Operations.20for.20bit.20representation.20of.20.2E.2E.2E.22/near/404820367\">said</a>:</p>\n<blockquote>\n<p>(The theorems are also good candidates for <code>proof_wanted</code> in std BTW)</p>\n</blockquote>\n<p>What does <code>proof_wanted</code> mean?</p>",
        "id": 404871838,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701266402
    },
    {
        "content": "<p>I fixed the broken proofs in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8700\">#8700</a>, so that one should be ready to merge</p>",
        "id": 404877788,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701268032
    },
    {
        "content": "<p>As I remark in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8700/files#r1409399960\">this comment</a>, it seems a shame that we're proving things from scratch in Std rather than copying across the in-some-cases neater mathlib proofs.</p>",
        "id": 404883156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701269474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20for.20.22Operations.20for.20bit.20representation.20of.20.2E.2E.2E.22/near/404871838\">said</a>:</p>\n<blockquote>\n<p>What does <code>proof_wanted</code> mean?</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/.60proof_wanted.60\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60proof_wanted.60</a></p>",
        "id": 404890827,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701271201
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, <span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span>  and others, per <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s comments, I'll look and see if any of the proofs that were affected and may have cleaner analogues in Mathlib.  I tried to mine Mathlib for proofs when there were clear Mathlib analogues in <a href=\"https://github.com/leanprover/std4/pull/366\">std4#366</a>.</p>\n<p><code>binaryRec</code> is a most significant to least-significant fold over nat and could be migrated now.</p>\n<p>The reason for the std changes were primarily to ensure we had foundation for a high-performance translation from a nat-based representation to a bool-vector based representation for <code>BitVec</code>.  This will be important for translating bit vector and <code>uintX</code> problems into SAT/SMT (which is a priority for the FRO).</p>\n<p>I also personally wanted to move away from some of the <code>bit</code>, <code>bit0</code> and <code>bit1</code> focused proofs that made less sense to me in Lean 4 due to kernel-level <code>Nat</code>.</p>",
        "id": 404901413,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1701274230
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.binaryRec%27#doc\">docs#Nat.binaryRec'</a> is also very useful; possibly more than the unprimed version</p>",
        "id": 404902639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701274663
    },
    {
        "content": "<p>Aside from the name, it's not clear to me why removing <code>bit</code> from proofs is beneficial; it enables a pretty natural recursion on least-significant bits.</p>",
        "id": 404902884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701274738
    },
    {
        "content": "<p>Certainly <code>bit0</code> and <code>bit1</code> should be eliminated; they're after all just remnants of the system that <code>OfNat</code> replaced</p>",
        "id": 404902968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701274764
    },
    {
        "content": "<p>I've been contemplating a refactor that uses the RHS of <code>bit_val</code> as the definition of <code>bit</code> and replaces all uses of <code>bit0</code> with <code>bit false</code> and <code>bit1</code> with <code>bit true</code> in theorems, allowing us to get rid of <code>bit1</code> and <code>bit0</code>. Would that be welcome?</p>",
        "id": 404904467,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701275206
    },
    {
        "content": "<p>I'm not sure I see the point of that</p>",
        "id": 404905535,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701275531
    },
    {
        "content": "<p><code>bit0</code> and <code>bit1</code> are deprecated, but are still used in the definition of (non-deprecated) <code>bit</code>, so in theorems we continuously have to turn of the deprecated linter. Furthermore, currently results that hold true for <code>bit b</code> in general have to be triplicated: once for <code>bit</code> and the concrete cases <code>bit1</code> and <code>bit0</code>, because of the <code>simp</code>-lemma that rewrites <code>bit true</code> and <code>bit false</code> into the former</p>",
        "id": 404906716,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701275892
    },
    {
        "content": "<p>The <code>bit_val</code> definition of <code>bit</code> seems like it may be useful.   <a href=\"https://github.com/leanprover/std4/blob/a93d4aab761b7962a6aab845b24837e192eaabc5/Std/Data/Nat/Bitwise.lean#L40-L41\"><code>div2Induction</code></a> plays a similar role to <code>binaryRec</code> but I found it sometimes tricky to decide which variable to induct on.  I found myself preferring using <a href=\"https://github.com/leanprover/std4/blob/a93d4aab761b7962a6aab845b24837e192eaabc5/Std/Data/Nat/Bitwise.lean#L137\"><code>eq_of_testbit_eq</code></a> as a blunt tool when reasoning about two Nat expressions involving a mix of binary and arithmetic operations, and then simplifying using testBit simplification lemmas.</p>\n<p>I'd really like to see omega land in <code>Std</code> and then see how much it can be used to simplify proofs.  Some of these may be needed for Omega itself, but I suspect many do not.  Once omega is landed and performs well, the lemmas we want to prioritize may change.</p>",
        "id": 404912687,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1701277619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20for.20.22Operations.20for.20bit.20representation.20of.20.2E.2E.2E.22/near/404902884\">said</a>:</p>\n<blockquote>\n<p>Aside from the name, it's not clear to me why removing <code>bit</code> from proofs is beneficial; it enables a pretty natural recursion on least-significant bits.</p>\n</blockquote>\n<p>I thought this made it to Std with a name like pushBit or shiftBit or something?</p>",
        "id": 404961585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701297264
    },
    {
        "content": "<p>There was some discussion around a PR which suggested that, but I don't think it got merged</p>",
        "id": 404964116,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701298540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20for.20.22Operations.20for.20bit.20representation.20of.20.2E.2E.2E.22/near/404961585\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20for.20.22Operations.20for.20bit.20representation.20of.20.2E.2E.2E.22/near/404902884\">said</a>:</p>\n<blockquote>\n<p>Aside from the name, it's not clear to me why removing <code>bit</code> from proofs is beneficial; it enables a pretty natural recursion on least-significant bits.</p>\n</blockquote>\n<p>I thought this made it to Std with a name like pushBit or shiftBit or something?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/std4/pull/314\">https://github.com/leanprover/std4/pull/314</a></p>",
        "id": 405069839,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701334793
    },
    {
        "content": "<p>There's one more conflict between mathlib4 and std4 here;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- mathlib4</span>\n<span class=\"kd\">def</span> <span class=\"n\">adc</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">BitVec</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- std4</span>\n<span class=\"kd\">def</span> <span class=\"n\">adc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">BitVec</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>for now I've primed the mathlib name.</p>",
        "id": 405123214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701352757
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/leanprover/std4/pull/314\">std4#314</a>, mathlib already has a second name for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bit#doc\">docs#bit</a>: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.BitVec.addLsb#doc\">docs#Std.BitVec.addLsb</a>. We should merge them with whatever name Std decides on</p>",
        "id": 405124176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701353016
    },
    {
        "content": "<p><code>addLsb</code>  is just an alias for <code>flip bit</code>, so it shouldn't be hard to drop it</p>",
        "id": 405124512,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701353109
    },
    {
        "content": "<p>.. or to drop <code>bit</code>, if we decide the other argument order is better</p>",
        "id": 405125036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701353274
    },
    {
        "content": "<p>It seems Std also flipped the order of multiplication in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mul_add_mod#doc\">docs#Nat.mul_add_mod</a> such that it no longer matches <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mul_add_mod_of_lt#doc\">docs#Nat.mul_add_mod_of_lt</a>. Was this intentional? For now, I've reintroduced <code>Nat.mul_add_mod'</code>to mathlib to preserve the original statement</p>",
        "id": 405125786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701353497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20for.20.22Operations.20for.20bit.20representation.20of.20.2E.2E.2E.22/near/405123214\">said</a>:</p>\n<blockquote>\n<p>There's one more conflict between mathlib4 and std4 here;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- mathlib4</span>\n<span class=\"kd\">def</span> <span class=\"n\">adc</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">BitVec</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- std4</span>\n<span class=\"kd\">def</span> <span class=\"n\">adc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">BitVec</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>for now I've primed the mathlib name.</p>\n</blockquote>\n<p>Should we deprecate the mathlib version, since it's trivially obtained from the std version?</p>",
        "id": 405139825,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701357588
    },
    {
        "content": "<p>In fact, there is more breakage in the <code>BitVec.Lemmas</code> file of mathlib, I'll have a look at that now</p>",
        "id": 405139969,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701357618
    },
    {
        "content": "<p>You might want to wait half an hour until a full cache is available</p>",
        "id": 405140113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701357675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20for.20.22Operations.20for.20bit.20representation.20of.20.2E.2E.2E.22/near/405125786\">said</a>:</p>\n<blockquote>\n<p>It seems Std also flipped the order of multiplication in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mul_add_mod#doc\">docs#Nat.mul_add_mod</a> such that it no longer matches <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mul_add_mod_of_lt#doc\">docs#Nat.mul_add_mod_of_lt</a>. Was this intentional? For now, I've reintroduced <code>Nat.mul_add_mod'</code>to mathlib to preserve the original statement</p>\n</blockquote>\n<p>Indeed, I don't know if there's an ideal choice, but I tried to consistently commute divisors in an expression to appear on the left of a multiply in other positions -- similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Nat/Div.html#Nat.div_add_mod\"><code>Nat.div_add_mod</code></a>.</p>",
        "id": 405188781,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1701373558
    },
    {
        "content": "<p>That tends to be backwards overall, because when naming things in the non-commutative setting you don't have that luxury and have to put the multiplication on the right to match the division. Of course for <code>%</code> the concern is irrelevant, but for <code>/</code> it's not, and it's nice for the two to be consistent</p>",
        "id": 405227870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701387513
    },
    {
        "content": "<p>Either way, this isn't something that needs to block the Std bump; I've sent <a href=\"https://github.com/leanprover-community/mathlib4/pull/8700\">#8700</a> to bors. We can always shuffle the names around in a future PR</p>",
        "id": 405228190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701387705
    },
    {
        "content": "<p>(Arguably the ideal choice in the face of no clear winner is the one that doesn't break downstream users that already expect the name to mean a certain thing; though admittedly the damage in mathlib was minimal)</p>",
        "id": 405228290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701387755
    },
    {
        "content": "<p>Thank you so much for all the work on <a href=\"https://github.com/leanprover-community/mathlib4/pull/8700\">#8700</a>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>. Very much appreciated.</p>",
        "id": 405228336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701387789
    },
    {
        "content": "<p>Most of the credit here goes to <span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span>, who actually fixed all the proofs; I just cleaned up</p>",
        "id": 405238637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701392096
    }
]