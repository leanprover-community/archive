[
    {
        "content": "<p>Currently I write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">baz</span> <span class=\"n\">at</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>In place of that, I would like to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"n\">foo</span> <span class=\"n\">to</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">baz</span>\n</code></pre></div>\n<p>Would it be easy to change the syntax of <code>change</code> in this way?<br>\nI am not proposing a change of Std; I just want it for my project.<br>\nIs there an easy way to do it?</p>",
        "id": 407230570,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702297841
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"change \"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" to \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">h</span> <span class=\"n\">to</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 407238414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702300642
    },
    {
        "content": "<p>Amazing! The <code>change foo to</code> version allows much nicer indentation when long expressions come into the picture!</p>",
        "id": 407254339,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702305780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 407254356,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702305785
    },
    {
        "content": "<p>Please remember that macros like this do have a downside: using them locally in projects is developing a locally dialect, and there is value to speaking the same dialect as everyone else (students reading projects don't get mislead, the barrier to moving results between repositories is lower, etc etc.).</p>",
        "id": 407331875,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702334298
    },
    {
        "content": "<p>along the lines that Scott mentions above: we use <code>at</code> in tactics whenever we want to perform the tactic on something in the local context, and in general <code>to</code> wouldn't make sense as a replacement. So using <code>change foo to bar</code> instead of <code>change bar at foo</code> breaks the parallelism with other tactics.</p>",
        "id": 407388552,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702358715
    },
    {
        "content": "<p>It's nice to have the consistency and symmetry for <code>apply</code>/<code>change</code>/<code>rw</code>/<code>simp</code>/<code>dsimp</code>/<code>zify</code>/<code>qify</code>/<code>rify</code>/ <code>intros</code>/<code>push_neg</code> wrt <code>at</code>, and would love to see more.</p>",
        "id": 407398715,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702362757
    },
    {
        "content": "<p>I use <code>change</code> <code>at</code>/<code>to</code> only for prototyping.  They will not be in the code I will contribute to Mathlib.</p>\n<p>I respect the \"parallelism\" argument, however, I never use <code>change</code> for goal, so in my personal point of view, <code>change</code> is not one of those tactics.</p>",
        "id": 407407971,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702365393
    }
]