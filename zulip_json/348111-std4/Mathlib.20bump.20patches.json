[
    {
        "content": "<p>I've taken the habit of creating Mathlib patch PR along with each of my Std PR. The purpose is two-fold: first to check for unexpected side effects, and then to help Mathlib maintainers following Std updates. There's a few issues in my current process and I'm wondering there might be a better way.</p>\n<p>The first part, testing a Std PR against Mathlib isn't problematic unless Mathlib is using an old version of Std. The best fix here is for Mathlib to track Std as closely as possible. Of course, the patches are helpful for exactly that!</p>\n<p>The second part is important after the Std PR is merged. Then, I need to update the patch so that the lakefile points to Std's main branch instead of the PR branch, update the lake-manifest to point to the right version of Std, re-run CI and hand off to Mathlib maintainers. So far so good but here's the first catch: the patches need to be applied in Mathlib in the exact same order as the PRs were merged into Std. The reason for that is that the CI step won't work until the previous patch has been applied. Mathlib maintainers can roll several patches into a larger bump patch to speed up this process but the pace of Std PRs is not that hectic.</p>\n<p>The second catch has to do with testing a Std PR against Mathlib. While waiting for the patches to be merged into Mathlib, testing becomes very difficult. The main options are to either use an old Std or to roll out your own temporary Mathlib patch. Neither option makes much sense.</p>\n<p>I'm not sure how to fix this. The key issue is to better communicate where these Mathlib patches are so that Mathlib maintainers can easily find them and also for Std contributors to use them to roll out a temporary patch when necessary. Note that Mathlib patches are not required for Std PRs and they are not always necessary, so looking around is not a reliable way to find them.</p>",
        "id": 385623850,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692260658
    },
    {
        "content": "<p>Thanks a lot for thinking about this problem! With lean 3 there were fewer moving parts but now there are more and we're clearly still getting to grips with this.</p>",
        "id": 385624151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692260769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> more descriptive titles for these PRs would be great. Just now I'm hunting to the ones about <code>Nat.strongRecOn</code>, and the one about the substring recursion, but after I reach <a href=\"https://github.com/leanprover-community/mathlib4/pulls/fgdorais\">https://github.com/leanprover-community/mathlib4/pulls/fgdorais</a> I just have to click through all of them.</p>",
        "id": 385643428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692267533
    },
    {
        "content": "<p>Further, for something like <a href=\"https://github.com/leanprover-community/mathlib4/pull/6622\">https://github.com/leanprover-community/mathlib4/pull/6622</a>, I would actually stack it on top of the dependent PR, so we can see that CI works.</p>\n<p>I've just bors'd the dependent PR, and I would like to put this on the queue too, but can't yet because of the lack of green tick.</p>",
        "id": 385643814,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692267688
    },
    {
        "content": "<p>Yes, I will definitely use more descriptive titles.</p>\n<p>The dependency issue is a bit more complex since I can't know in advance what will be merged when. It's also tricky to find other people's patches or whether they exist.</p>",
        "id": 385667376,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692276747
    },
    {
        "content": "<p>can we perhaps make a <code>std-bump</code> branch of mathlib which mathlib bump PRs target?</p>",
        "id": 385703204,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692287012
    },
    {
        "content": "<p>although it is easier to review each bump PR individually instead of multiple bump PRs melted together :/</p>",
        "id": 385703548,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692287092
    },
    {
        "content": "<p>We could set up a bot that tracks each std bump PR, and every time a PR is merged into Std the corresponding PR is put onto the stack of PRs a la <a href=\"https://github.com/ezyang/ghstack\">https://github.com/ezyang/ghstack</a> ?</p>",
        "id": 385703707,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692287146
    },
    {
        "content": "<p>But that's a lot of infrastructure for something that is not yet a huge problem</p>",
        "id": 385703824,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692287168
    },
    {
        "content": "<p>It's not a huge problem by any means, but I've delayed testing several Std PRs on Mathlib because Mathlib was behind Std. It also makes the task of testing against Mathlib tricky and confusing for new contributors.</p>",
        "id": 385707706,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692288357
    },
    {
        "content": "<p>Thanks for bringing up <code>ghstack</code>. It doesn't look like a good fit but it does open the realm of possibilities.</p>",
        "id": 385709046,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692288769
    },
    {
        "content": "<p>Another, perhaps tangential, issue is that it makes more sense for the Mathlib patch to be reviewed along side the Std PR. As a concrete example, I got a <a href=\"https://github.com/leanprover/std4/pull/193#discussion_r1297052545\">good question</a> on an already merged PR this morning. It's always possible to make correction PRs when necessary but that can degenerate into a feedback loop. (Not in this particular example but it's not hard to imagine how that could happen.)</p>",
        "id": 385711614,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692289611
    },
    {
        "content": "<p>yep, agreed</p>",
        "id": 385720221,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692292850
    },
    {
        "content": "<p>mario agrees that we need a dependent PR bot. maybe some day.</p>",
        "id": 385733756,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692298574
    },
    {
        "content": "<p>I think a lot of the suffering of keeping Mathlib and Std in sync would be ameliorated by some automation that does the trivial bumps.</p>\n<p>Proposal, round one:</p>\n<ul>\n<li>every commit to Std master automatically generates a Mathlib branch that just runs <code>lake update std</code> and commits the manifest.</li>\n<li>at the conclusion of CI,<ul>\n<li>on success, create Mathlib PR with <code>auto-merge-after-CI</code></li>\n<li>on failure, post on a topic here, with a link to the CI failure</li>\n</ul>\n</li>\n</ul>\n<p>Proposal, round two:</p>\n<ul>\n<li>at every commit to Std master, check if there is an existing Mathlib branch that is labelled as corresponding to underlying Std PR<ul>\n<li>if so, and that branch has a green tick, edit its lakefile to point back to <code>main</code> on Std, run <code>lake update std</code>, and commit, and add the label <code>auto-merge-after-CI</code></li>\n</ul>\n</li>\n<li>if such a branch doesn't exist, follow the routine of round one.</li>\n</ul>",
        "id": 386971071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692839428
    },
    {
        "content": "<p>I'm not volunteering to write this quite yet, but it seems plausible we could make this happen if needed.</p>",
        "id": 386971103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692839472
    },
    {
        "content": "<p>I'm volunteering to write it :) I'm gonna work on it this weekend</p>",
        "id": 386989825,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692849956
    },
    {
        "content": "<p>Great. This will require that Std CI can create Mathlib branches, Mathlib PRs, and label Mathlib PRs. I think I will need to create a token for you and install it as a secret on the Std repository.</p>\n<p>Unless you tell me it needs to work differently, I will create a token under the <code>leanprover-community-mathlib4-bot</code> account, with relevant permissions on the Mathlib repository, and install it as <code>secrets.MATHLIB4_TOKEN</code> on the Std repository.</p>\n<p>(I'm presuming here that you're going to implement everything as a github action.)</p>",
        "id": 386991596,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692850520
    },
    {
        "content": "<p>I actually wanted to ask about this, do we have a general purpose bot we can add code to? Where is the code hosted?</p>",
        "id": 386991778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692850573
    },
    {
        "content": "<p>No, everything is github actions.</p>",
        "id": 386991846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692850596
    },
    {
        "content": "<p>I was gonna make a GH action/bot that works on generic Lean repos cuz I wanna also use it for other projects downstream of Std</p>",
        "id": 386991863,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692850603
    },
    {
        "content": "<p>that sounds like a \"yes\"</p>",
        "id": 386991894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692850619
    },
    {
        "content": "<p>I don't really know how bots are piloted</p>",
        "id": 386991949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692850644
    },
    {
        "content": "<p>Sometimes the github actions framework is a pain to work with, for perfectly reasonable security reasons. </p>\n<p>But I think in James' case here, everything is running after a commit to master, so the action has access to the secrets.</p>",
        "id": 386992291,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692850765
    },
    {
        "content": "<p>I do need to figure out where to store some of the state/configuration we need to store for each repo... maybe a lean file in the root? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 386992556,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692850848
    },
    {
        "content": "<p>actually maybe annotations in the lake file</p>",
        "id": 386993054,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692851043
    },
    {
        "content": "<p>What state is that? Stateless is always nice. :-)</p>",
        "id": 386993187,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692851091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>, <code>MATHLIB4_TOKEN</code> should be available on the Std repo now. It expires Aug 24 2024, but that is recorded in our big list of tokens. :-)</p>",
        "id": 386994341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692851569
    },
    {
        "content": "<p>I'm sort of hoping that I don't need it, but thank you in advance for when I do <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 386995750,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692852274
    },
    {
        "content": "<p>Thank gosh we just built a simple http library! :)</p>",
        "id": 386996369,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692852595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20patches/near/386993187\">said</a>:</p>\n<blockquote>\n<p>What state is that? Stateless is always nice. :-)</p>\n</blockquote>\n<p>Rather than having heuristics for \"is this Mathlib PR associated with this Std commit/PR?\" I want to just track that info explicitly. Stateless is nice though. This is a thinker <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 387003486,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692857023
    },
    {
        "content": "<p>I also need to double-check how much I can steal from a former employer's internal tooling without violating my NDA.</p>",
        "id": 387003793,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692857239
    },
    {
        "content": "<p>Nevermind, they've published a whole talk on the design :-)</p>",
        "id": 387004040,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692857422
    },
    {
        "content": "<p>I'd highly recommend doing the simple thing first (i.e. what I suggested in \"round one\"), and only if that works and is usable bother doing any of the complex stuff (\"round two\") that requires matching up PRs.</p>",
        "id": 387005478,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692858469
    },
    {
        "content": "<p>Storing any state outside of the github PRs is I think a no go. I don't think we want to make commits to the repositories, or rely on non-github servers. I think links between PRs, comments on PRs, and labels has to be enough.</p>",
        "id": 387005657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692858587
    },
    {
        "content": "<p>There's also the option of using GitHub job artifacts</p>",
        "id": 387022261,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1692866814
    },
    {
        "content": "<p>Regarding testing GitHub workflows, there is nektos/act</p>",
        "id": 387022309,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1692866840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20patches/near/387005657\">said</a>:</p>\n<blockquote>\n<p>Storing any state outside of the github PRs is I think a no go. I don't think we want to make commits to the repositories, or rely on non-github servers. I think links between PRs, comments on PRs, and labels has to be enough.</p>\n</blockquote>\n<p>at minimum I'd like to have a centralized server to do the webhook dance of propagating updates (ie letting repos \"subscribe\" to dependency repo's updates) to avoid the complexity of storing tokens for downstream projects in upstream projects</p>",
        "id": 387101256,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692889832
    },
    {
        "content": "<p>but yes for now we can limit ourselves to Std and Mathlib so that we can test the workflow without doing that</p>",
        "id": 387101384,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692889862
    },
    {
        "content": "<p>So, I've been thinking about this lots. I think I've settled on a very good abstraction that can be built on top of GH, but it will require lots of infrastructure and heavy control over both VC and CI in the participating repos, so I'm gonna hold off there.</p>\n<p>From Scott's proposals, here's what I'm thinking as the goal:</p>\n<blockquote>\n<p>in an Std PR, when given !update-mathlib comment:</p>\n<ul>\n<li>open Mathlib branch &amp; PR. mark with some tag like <code>blocked-on-std-pr</code></li>\n<li>commit to branch with <code>lakefile</code> pointing to the Std PR branch and manifest updated</li>\n<li>reply to the PR with the link to the new Mathlib branch (use this to track the connection later)</li>\n</ul>\n<p>every commit to Std main:</p>\n<ul>\n<li>figure out if it's from a PR or was just a direct commit<ul>\n<li>this is .. not easy. but given that Std uses squash-merge we can get the info from the commit name I think</li>\n</ul>\n</li>\n<li>if PR:<ul>\n<li>find corresponding Mathlib PR link in comments (if no exist, see below)</li>\n<li>remove <code>blocked-on-std-pr</code> tag</li>\n<li>push commit to branch with <code>lakefile</code> pointing to Std main and manifest updated to the corresponding commit<ul>\n<li>note: this might change the actual dependency version, since nothing is keeping mathlib bump PRs updated when Std PRs are updated</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>if direct commit or no existing Mathlib PR:<ul>\n<li>open Mathlib branch &amp; PR</li>\n<li>commit an updated manifest pointing to the commit</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>A few questions I have:<br>\n1) How does <code>auto-merge-after-CI</code> work? If a PR is <code>auto-merge-after-CI</code> and fails CI, is the tag removed?<br>\n2) How should we handle keeping Mathlib PRs up to date as a Std PR changes? I know this was not in scope in Scott's original proposals, but it would be very helpful to me personally :)<br>\n3) <strong>How do we merge Mathlib PRs in the order they were merged in Std?</strong> And do we allow for merging two update PRs into one so that they don't need to be stacked correctly?</p>",
        "id": 388390432,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693509093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20patches/near/388390432\">said</a>:</p>\n<blockquote>\n<ul>\n<li>figure out if it's from a PR or was just a direct commit<ul>\n<li>this is .. not easy. but given that Std uses squash-merge we can get the info from the commit name I think</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>Can this not be easily done with a GitHub Action on <a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges\">a PR merge</a>?</p>",
        "id": 388393444,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693510522
    },
    {
        "content": "<p>but then how do I tell the direct commit action to not trigger? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 388395325,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693511210
    },
    {
        "content": "<p>honestly i'd be pretty okay with just never committing directly to main, but that's mostly up to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 388395373,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693511239
    },
    {
        "content": "<p>Yeah, rather than looking for the commit you can just check whether github thinks the PR has been merged</p>",
        "id": 388395541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693511326
    },
    {
        "content": "<p>and you don't need an \"every commit\" action, it can just be a scheduled action which does nothing if master hasn't changed</p>",
        "id": 388395746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693511417
    },
    {
        "content": "<p>same thing for the PR actions, that can be a scheduled bot</p>",
        "id": 388395997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693511531
    },
    {
        "content": "<p>sorry, I don't really understand what you mean. do you mean Mathlib have a scheduled bot to check whether the upstream Std PR has been merged?</p>",
        "id": 388396944,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693511943
    },
    {
        "content": "<p>I agree that that is the much nicer direction to go (and much simpler), but I'm not sure how we'd ensure Mathlib bump PRs are merged in the same order as Std PRs</p>",
        "id": 388416018,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693521395
    },
    {
        "content": "<p>maybe once a PR is merged into Std, we keep track of the base commit and head commit of the PR (which in the case of squash merge is the parent of the squashed commit and the squashed commit, respectively), and then we only allow a bump PR to merge if the current <code>master</code>'s std commit matches the expected base commit.</p>",
        "id": 388416272,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693521576
    },
    {
        "content": "<p>If all commits to Std <code>main</code> are PRs, this would actually work quite well I think.</p>",
        "id": 388416373,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693521632
    },
    {
        "content": "<p>the mathlib merging doesn't happen automatically anyway, the bot should only be labeling things as ready to merge</p>",
        "id": 388416881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693521989
    },
    {
        "content": "<p>Scott seemed to indicate he'd be happy with auto-merging, but that's up to the mathlib maintainers.</p>",
        "id": 388416999,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693522089
    },
    {
        "content": "<p>If there are no mathlib changes, an auto-merge seems okay, but if there are any changes required then it needs a review</p>",
        "id": 388417044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693522133
    },
    {
        "content": "<p>but if there are no mathlib changes then there aren't PR ordering issues in the first place</p>",
        "id": 388417084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693522172
    },
    {
        "content": "<p>I want to avoid accidentally reverting the manifest in some weird race condition bors edge case <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> but tracking the base commit seems like a reasonable solution anyways.</p>",
        "id": 388417258,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693522293
    },
    {
        "content": "<p>this is why you never commit to master <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 388417475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693522436
    },
    {
        "content": "<p>bors is the only one with the keys</p>",
        "id": 388417533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693522454
    },
    {
        "content": "<p>one other thing -- do we plan to merge Std PRs before the mathlib bump PR is compiling?</p>\n<p>suppose Std has two PRs open, A and B<br>\nMathlib has a bump PR for A which does not compile, and a bump PR for B which does<br>\nthen Std merges A and B</p>\n<p>If we blindly updated mathlib's bump PR for B to point to the merge commit for B, then bump PR B will be broken for reasons unrelated to B</p>",
        "id": 388418480,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693523028
    },
    {
        "content": "<p>There is of course a general way to handle this, where we change the base commit for the B bump PR to point to the A bump PR (that way it's obvious why B bump PR is broken). But that's much more difficult <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 388418687,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693523144
    },
    {
        "content": "<p>but for Std/Mathlib it seems reasonable for us to just straight up say that we won't commit to Std until the bump PR compiles on Mathlib.</p>",
        "id": 388418834,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693523215
    },
    {
        "content": "<p>One general thing to keep in mind here is that this might be a finite process, and not warrant automation. Obviously we plan for infinitely many more commits to Std. :-) But the fraction of them that require Mathlib changes will hopefully eventually drop off, once we have:</p>\n<ul>\n<li>migrated all the theory out of Mathlib that belongs in Std</li>\n<li>established the right criteria so <em>new</em> material is not introduced to Mathlib that should be in Std</li>\n<li>similarly for tactics.</li>\n</ul>\n<p>If that's really the case, the argument for automating coordination of PRs is weaker (although obviously it is tempting not to suffer in the short term).</p>",
        "id": 388420076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693524030
    },
    {
        "content": "<p>I have secret incentives for working out the PR coordination stuff here -- I need it for managing my already-not-small DAG of projects, which are currently unmaintainable due to the dependency coordination problem ;)</p>",
        "id": 388420310,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693524204
    },
    {
        "content": "<p>Maybe we need a \"virtual mono repo\" that compiles PRs down to the constituent repos!</p>",
        "id": 388422231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693525445
    },
    {
        "content": "<p>I think <a href=\"https://github.com/josh-project/josh\">https://github.com/josh-project/josh</a> is intended for that, although I don't know too much about it</p>",
        "id": 388427725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693528511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20patches/near/388422231\">said</a>:</p>\n<blockquote>\n<p>Maybe we need a \"virtual mono repo\" that compiles PRs down to the constituent repos!</p>\n</blockquote>\n<p>That's my bigger plan, at least. Once you add some extra structure on top of the VC (\"features\", which are like a branch + a base commit in a parent branch), you can have really nice monorepo-esque behavior across repos.</p>\n<p>Josh seems to do the opposite, breaking an actual monorepo up into multiple git repos? which seems odd but //</p>",
        "id": 388433981,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693531157
    },
    {
        "content": "<p>is there a reasonable way to automatically rewrite a project lakefile from a lakescript? since it's a Lean file and we haven't actually worked out pretty-print/autoformatting I'm not sure there's a better approach than calling out to sed...</p>",
        "id": 388457837,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693547256
    },
    {
        "content": "<p>although <code>require std from git ...</code> is a super clean pattern to replace, so I think I'm overthinking it</p>",
        "id": 388458399,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693547650
    },
    {
        "content": "<p>If you don't care about whitespace, or human-readability, pretty printing a lakefile should be fine.</p>",
        "id": 388463787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693550720
    },
    {
        "content": "<p>But I have to say: if you are thinking about automatically generated lakefiles ...</p>",
        "id": 388463807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693550732
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 388463808,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693550733
    },
    {
        "content": "<p>Not the whole lakefile, just for the step of substituting PR/main branches into the lakefile <code>require</code>. Alternatively, I could leave the lakefile untouched, just changing the manifest, and tell people to not <code>lake update</code>? Alternatively-alternatively, there could be another file tracking the desired git repo/branch and I just read from that into the lakefile</p>",
        "id": 388535155,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693578641
    },
    {
        "content": "<p>I think I most prefer having a separate json file for auto-tracked dependencies, and reading that in for the lakefile. Thoughts?</p>",
        "id": 388535785,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693578834
    },
    {
        "content": "<p>You can safely assume no one is doing <code>lake update</code></p>",
        "id": 388537684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693579386
    },
    {
        "content": "<p>although if you change the URL in the lake-manifest.json lake will complain that it doesn't match and suggest you run <code>lake update</code></p>",
        "id": 388537826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693579425
    },
    {
        "content": "<p>aw shucks, okay. then that's a non-option, given that most Std PRs come from forks</p>",
        "id": 388538081,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693579501
    },
    {
        "content": "<p>the downside is that you yourself can't run <code>lake update</code> because it will clobber your changes, but without that you might be missing changes to other repos</p>",
        "id": 388538083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693579501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20patches/near/388537826\">said</a>:</p>\n<blockquote>\n<p>although if you change the URL in the lake-manifest.json lake will complain that it doesn't match and suggest you run <code>lake update</code></p>\n</blockquote>\n<p>The complaint is a warning, it will honor the lake-manifest.json anyway</p>",
        "id": 388538172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693579533
    },
    {
        "content": "<p>Not a great UX here for Lake to tell people to run <code>lake update</code> if <code>lake update</code> causes everything to break <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 388538277,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693579564
    },
    {
        "content": "<p>yeah this has been discussed elsewhere, lake can't tell if you are a user or maintainer and outputs maintainer-focused messages</p>",
        "id": 388538410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693579601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20patches/near/388538083\">said</a>:</p>\n<blockquote>\n<p>without that you might be missing changes to other repos</p>\n</blockquote>\n<p>Yeah -- that's partially why I think it's best to have a separate manifest and have the <code>lakefile</code> read from there.</p>",
        "id": 388538546,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693579647
    },
    {
        "content": "<p>sed</p>",
        "id": 388538613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693579671
    },
    {
        "content": "<p>I'm pretty sure this matches most historical examples of mathlib bump patches</p>",
        "id": 388538782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693579708
    },
    {
        "content": "<p>agree -- for v0.1 sed's fine <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 388538898,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693579728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20patches/near/388538277\">said</a>:</p>\n<blockquote>\n<p>Not a great UX here for Lake to tell people to run <code>lake update</code> if <code>lake update</code> causes everything to break <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>We should have a bot posting that message everyday instead of having to find a different human to do it.</p>",
        "id": 388548791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693582279
    },
    {
        "content": "<p>So, small update on this -- I don't think GH Actions lets you run a scheduled job on a PR branch. So if we want to have bump PRs automatically incorporate upstream changes we'll need to go through some sort of centralized thing. Not ideal.</p>",
        "id": 389347268,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693981957
    },
    {
        "content": "<p>Now I'm wondering how dependabot does it</p>",
        "id": 389347531,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693982107
    },
    {
        "content": "<p>Scheduled jobs can run <code>actions/checkout</code> on any branch they like</p>",
        "id": 389349606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693983144
    },
    {
        "content": "<p>You only have a problem if the workflow.yaml only exists on a branch</p>",
        "id": 389349652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693983177
    },
    {
        "content": "<p>Yeah. It just means the job has to be run for every PR on the repo, instead of being run separately. I can still do it in the framework of github actions but it becomes substantially more annoying</p>",
        "id": 389350129,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693983459
    },
    {
        "content": "<p>unless there's a way to use the matrix job workflow somehow ?? I will investigate</p>",
        "id": 389350221,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693983497
    },
    {
        "content": "<p>actually, we could use the Std token to just update Mathlib bump patches directly (in addition to opening patches when PRs are opened on Std).</p>\n<p>so then Std has a few workflows:</p>\n<ul>\n<li>on PR opened: open a PR on Mathlib</li>\n<li>on PR commit push: push update to respective bump PR</li>\n<li>on PR merge: push update to respective bump PR with new manifest commit</li>\n</ul>",
        "id": 389521836,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694037212
    },
    {
        "content": "<p>this is much nicer than trying to iterate through PRs... I'll try to implement it on two of my libraries and keep y'all posted</p>",
        "id": 389521926,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694037252
    }
]