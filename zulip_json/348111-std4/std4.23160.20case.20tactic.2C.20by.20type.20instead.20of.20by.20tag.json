[
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/160\">std4#160</a> is a tactic where <code>case : t =&gt; tac</code> means \"focus on the goal that unifies with <code>t</code>\" vs <code>case t =&gt; tac</code> for \"focus on the goal with tag <code>t</code>.\" There are <code>case</code>-like variations, such as <code>case : t1 | t2 =&gt; tac</code> for <code>(case : t1 =&gt; tac); (case : t2 =&gt; tac)</code> or <code>case : t with n₁ ... nₘ =&gt; tac</code> for renaming inaccessible variables. The tactic is meant to be a replacement for the Lean 3 <code>show</code> tactic, but more amenable for structured proofs.</p>\n<p>It's been in the PR queue for a couple months, so I figured I'd bring it up here for feedback/attention.</p>",
        "id": 387669705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693229546
    },
    {
        "content": "<p>Last time I looked at it I recall it had some syntax that was inconsistent with <code>case</code> and/or some more general extensions... <code>case : t with n =&gt; tac</code> should probably be <code>case _ n : t =&gt; tac</code>, and <code>case : t1 | t2 =&gt; tac</code> seems like it should be more like <code>case : t1 | : t2 =&gt; tac</code> if the body is supposed to be a matcher</p>",
        "id": 387674924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693231199
    },
    {
        "content": "<p>It's also a bit misleading/inconsistent to use <code>|</code> here when <code>case : t | t =&gt; tac</code> selects two goals but <code>match x with | t | t =&gt; tac</code> has an unreachable pattern</p>",
        "id": 387675340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693231315
    },
    {
        "content": "<p>Perhaps it could select all goals that match <code>t</code> rather than a single goal that matches <code>t</code>?</p>",
        "id": 387772467,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693264857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> I figured that if you want to run some tactic on all the matches, you could compose it with the <code>repeat</code> tactic, where if you wanted to go the other way and only select a single match there's not much you can do.</p>",
        "id": 387774710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693266324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I've pushed changes to <a href=\"https://github.com/leanprover/std4/pull/160\">std4#160</a> to make it be an extension to <code>case</code> syntax. It's now <code>case _ : t =&gt; tac</code> and <code>case _ : t1 | _ : t2 =&gt; tac</code>, where the <code>_</code>'s can be tag names like in <code>case</code>. Rather than <code>with</code>, now it's <code>case _ n₁ ... nₘ : t =&gt; tac</code>.</p>\n<p>The <code>|</code> is coming from <code>case</code> itself, and it's operating in a similar way to that. I agree that it could be misleading that the way it allows <code>case _ : t | _ : t =&gt; tac</code> diverges from how <code>match</code> is processed, but I'm not really sure if there are any alternatives other than detecting it and disallowing it (I don't want to be so authoritarian here). On the other hand the type ascriptions are just a further refinement to tag-based matching, so maybe it's OK?</p>",
        "id": 387774711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693266325
    },
    {
        "content": "<p>For simplicity (and to be sure the syntax isn't ambiguous between core <code>case</code> and this <code>case</code>), I made it so that if you're using <code>|</code>, then all cases need a type ascription.</p>",
        "id": 387774870,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693266416
    },
    {
        "content": "<p>Fun fact about <code>case</code> tag matching: <code>case tag</code> looks for a goal whose name is <code>tag</code> exactly, or otherwise if that fails a goal with <code>tag</code> as a suffix, or otherwise if that fails a goal with <code>tag</code> as a prefix.</p>",
        "id": 387775170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693266608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/348111-std4/topic/std4.23160.20case.20tactic.2C.20by.20type.20instead.20of.20by.20tag/near/387774870\">said</a>:</p>\n<blockquote>\n<p>For simplicity (and to be sure the syntax isn't ambiguous between core <code>case</code> and this <code>case</code>), I made it so that if you're using <code>|</code>, then all cases need a type ascription.</p>\n</blockquote>\n<p>You could avoid ambiguity by setting the priority of the syntax lower than the core <code>case</code></p>",
        "id": 387776588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693267515
    },
    {
        "content": "<p>I think it also makes sense to have <code>case'</code> with the same syntax</p>",
        "id": 387777593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693268098
    },
    {
        "content": "<p>(which does the same thing as <code>case</code> but doesn't require that the goal is closed at the end)</p>",
        "id": 387777656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693268126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std4.23160.20case.20tactic.2C.20by.20type.20instead.20of.20by.20tag/near/387776588\">said</a>:</p>\n<blockquote>\n<p>You could avoid ambiguity by setting the priority of the syntax lower than the core <code>case</code></p>\n</blockquote>\n<p>Ok, you got it. I pushed a version that allows optional type ascriptions.</p>",
        "id": 387778026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693268322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std4.23160.20case.20tactic.2C.20by.20type.20instead.20of.20by.20tag/near/387777593\">said</a>:</p>\n<blockquote>\n<p>I think it also makes sense to have <code>case'</code> with the same syntax</p>\n</blockquote>\n<p>Now this is in there too.</p>",
        "id": 387787171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693272529
    },
    {
        "content": "<p>Is there anything else that's blocking <a href=\"https://github.com/leanprover/std4/pull/160\">std#160</a>? <em>Edit:</em> it's been merged, thanks!</p>",
        "id": 390736348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694615277
    }
]