[
    {
        "content": "<p>I was gonna start making more PRs to move useful definitions from mathlib to standard, but it seems like there's a pretty big PR backlog -- is there any way to help with reviewing PRs before I start adding to the backlog <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?</p>",
        "id": 369502657,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687726148
    },
    {
        "content": "<p>Certainly adding your voice to existing PRs, pointing out that a PR is blocking this or that, or reviewing will all help with this. I would love to get some mathlib maintainers involved in std as well.</p>",
        "id": 369564394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687758096
    },
    {
        "content": "<p>I don't think you should use the backlog as a reason not to add more PRs, unless you are building a string of dependent PRs and don't want to go too far in a certain direction without affirmation</p>",
        "id": 369564659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687758171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Keep in mind that some PRs are unrelated to mathlib! (Since I rarely ever need to use mathlib, this is 100% the case for my PRs!) How should I motivate reviews? All of my projects depend on std and none depend on mathlib...</p>\n<p>Right now I use my own libraries (which were mostly written before std4 existed) but I eventually want to get rid of most of that since it's pointless to duplicate the work.</p>",
        "id": 369606004,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687768152
    },
    {
        "content": "<p>Perhaps we review each others' PRs :) I am in the same boat as a non-mathlib user</p>",
        "id": 369606491,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687768243
    },
    {
        "content": "<p>I don't think I said that PRs are related to mathlib, I mean that mathlib maintainers might also get involved in std maintenance as well</p>",
        "id": 369607455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687768434
    },
    {
        "content": "<p>But that doesn't answer the main question:  how can I (and James and others) motivate PR reviews? Almost nothing gets through unless it's mathlib related!</p>",
        "id": 369609488,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687768873
    },
    {
        "content": "<p>I just noticed that I am now able to review PRs on Std4. I'm assuming I have to thank Mario? Thank you very much!</p>",
        "id": 369613555,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687769676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/348111-std4/topic/PR.20backlog/near/369609488\">said</a>:</p>\n<blockquote>\n<p>But that doesn't answer the main question:  how can I (and James and others) motivate PR reviews? Almost nothing gets through unless it's mathlib related!</p>\n</blockquote>\n<p>I like to have second opinions on new design stuff, and if it's just me it's hard to get second opinions about things. Mathlib has a leg up here because it has been through one review process and people have given their opinions already, but I don't think I am explicitly selecting for mathlib-sourced PRs.</p>",
        "id": 369627275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687772313
    },
    {
        "content": "<p>I didn't mean to sound harsh, sorry! I know you have been doing the best you could. I promise to help a lot more in July. (And whenever I can otherwise but I do have a day job <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>)</p>",
        "id": 369629062,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687772644
    },
    {
        "content": "<p>I think the biggest thing here is that I really don't have much time to spend on std reviews. Keep poking me if it looks like it's just waiting for merge, but if it's waiting on design review open a topic here and get people to agree it's a good idea</p>",
        "id": 369629954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687772841
    },
    {
        "content": "<p>Sounds good! First ping: <a href=\"https://github.com/leanprover/std4/pull/96\">PR#96</a> is ready to merge.</p>\n<p>PS: I'll be very busy this week but I will be back in July.</p>",
        "id": 369631417,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687773142
    },
    {
        "content": "<p>Could I request a review of <a href=\"https://github.com/leanprover/std4/pull/129\">https://github.com/leanprover/std4/pull/129</a>? There's now a <em>second</em> place I'd like to have this functionality. :-)</p>",
        "id": 369871770,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687831577
    },
    {
        "content": "<p>Trying to get everything up to List.Perm merged this week -- <a href=\"https://github.com/leanprover/std4/pull/99\">std4#99</a> is next in the chain and should be good for review/merge if anyone has some time.</p>",
        "id": 370263870,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687923070
    },
    {
        "content": "<p>My eyes admittedly glaze over trying to review these mathlib lemma files, but I'll give it another read myself...</p>",
        "id": 370264270,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687923249
    },
    {
        "content": "<p>(And as Mario has said, mathlib's content has been through development cycles already, so maybe these reviews don't have to be in-depth :P)</p>",
        "id": 370264401,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687923316
    },
    {
        "content": "<p>Actually last time I read <a href=\"https://github.com/leanprover/std4/pull/99\">std4#99</a> I started refactoring and petered out after I couldn't get it done in one sitting. Perhaps it was a bit too big to chew off at once...</p>",
        "id": 370265144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687923639
    },
    {
        "content": "<p>Yeah. It does seem like .. just a <em>lot</em> of theorems about countp <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 370265696,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687923880
    },
    {
        "content": "<p>almost certainly more than we need for <a href=\"https://github.com/leanprover/std4/pull/100\">std4#100</a>, but it felt weird to cherrypick since I don't really know what else downstream might be pulled into Std</p>",
        "id": 370265783,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687923913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> The main issue I saw as a glance are some debatable simps. I think Std should be conservative with simps to allow users to tailor their own simp NF.</p>\n<p>I don't have a neatly packaged example of this, but there are a few instances where I wanted to locally reverse some simps for one file... the bottom line was that it's easier to add simps than to remove them.</p>",
        "id": 370356465,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687946031
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/151\">std4#151</a> golfs proofs in <code>Data.String.Lemmas</code>.  <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, can you take a quick look at this PR and merge it? (Edit: it's now merged! Thanks.)</p>",
        "id": 370645211,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688018279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/348111-std4/topic/PR.20backlog/near/370356465\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> The main issue I saw as a glance are some debatable simps. I think Std should be conservative with simps to allow users to tailor their own simp NF.</p>\n<p>I don't have a neatly packaged example of this, but there are a few instances where I wanted to locally reverse some simps for one file... the bottom line was that it's easier to add simps than to remove them.</p>\n</blockquote>\n<p>Yeah, I should check how often they are being used in mathlib</p>",
        "id": 370961503,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688087369
    },
    {
        "content": "<p>will go thru the ones you pointed out!</p>",
        "id": 370961522,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688087380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"https://github.com/leanprover/std4/pull/174\">std4#174</a> is a first step in cleaning up Nat lemmas. I just reorganized everything into sections. I did not change any of the lemmas. The purpose is to make actual cleanup easier later on.</p>",
        "id": 372048796,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688398078
    },
    {
        "content": "<p>I did a bunch of golfing and cleaning of Nat lemmas in <a href=\"https://github.com/leanprover/std4/pull/177\">std4#177</a>. There's no rush but if anyone has spare time to review, please go ahead!</p>",
        "id": 372669558,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688578461
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover/std4/pull/110\">std4#110</a> is ready to merge.</p>",
        "id": 372973763,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688664416
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover/std4/pull/179\">std4#179</a> needs maintainer attention. It looks good to me but github workflow needs to run first.</p>",
        "id": 373328035,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688763775
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover/std4/pull/179\">std4#179</a> looks good to merge.</p>",
        "id": 373530015,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688835884
    },
    {
        "content": "<p>My PR <a href=\"https://github.com/leanprover/std4/pull/178\">std4#178</a> (KMP Matching) which now includes <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> PR <a href=\"https://github.com/leanprover/std4/pull/172\">std4#172</a> (S[ubs]tring.{posOf,contains}S[ubs]tr) is ready for review.</p>",
        "id": 373530476,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688836051
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover/std4/pull/112\">std4#112</a> only needs a tiny edit.</p>",
        "id": 373531188,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688836313
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover/std4/pull/176\">std4#176</a> which was <a href=\"#narrow/stream/348111-std4/topic/tailrec.20pmap/near/372770961\">discussed on zulip</a> looks good to me.</p>",
        "id": 373531757,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688836508
    },
    {
        "content": "<p>FYI I will be travelling this week, so expect little movement on std stuff</p>",
        "id": 373559813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688848081
    },
    {
        "content": "<p>How far are we to be able to bump mathlib to current Std?</p>",
        "id": 373561670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688849038
    },
    {
        "content": "<p>I think the blockage is now on the Mathlib end: <a href=\"#narrow/stream/287929-mathlib4/topic/std4.20.2F.20Lean4.20bump/near/373469912\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/std4.20.2F.20Lean4.20bump/near/373469912</a></p>",
        "id": 373562013,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688849169
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 373564251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688850546
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover/std4/pull/181\">std4#181</a> is a quick fix for issue <a href=\"https://github.com/leanprover-community/mathlib4/pull/90\">#90</a></p>",
        "id": 373582858,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688862184
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover/std4/pull/184\">std4#184</a> simply moves the <code>alias</code> tactic from Mathlib.</p>",
        "id": 374106823,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689034292
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>:  Here are some PRs in the queue that can be merged with little effort when you have a chance.</p>\n<p><del>std4#112 is ready as is.</del><br>\n<del>std4#125 is ready with a few edits.</del> (awaiting-author)<br>\n<del>std4#176 is ready as is.</del><br>\n<del>std4#179 is ready as is.</del><br>\n<del>std4#184 is ready, it just moves alias from Mathlib verbatim.</del> (superseded by <a href=\"https://github.com/leanprover/std4/pull/200\">std4#200</a>) <br>\n<del>std4#185 is ready as is.</del> (awaiting-author)</p>",
        "id": 376327949,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689682765
    },
    {
        "content": "<p>Update <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>:</p>\n<p><del>std4#112 is ready to merge.</del><br>\n<del>std4#125 could use awaiting-author tag.</del></p>\n<p>I don't like pressing for my own PRs but <a href=\"https://github.com/leanprover/std4/pull/200\">std4#200</a> <del>and <a href=\"https://github.com/leanprover/std4/pull/193\">std4#193</a></del> are high priority for my projects.</p>",
        "id": 383658490,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1691679458
    },
    {
        "content": "<p>Could I ping on <a href=\"https://github.com/leanprover/std4/pull/210\">std4#210</a> <a href=\"https://github.com/leanprover/std4/pull/211\">std4#211</a> <a href=\"https://github.com/leanprover/std4/pull/212\">std4#212</a> <a href=\"https://github.com/leanprover/std4/pull/213\">std4#213</a>, prerequisities for upstreaming <code>exact?</code>?</p>",
        "id": 385845997,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692344789
    },
    {
        "content": "<p>Okay, minor milestone: every PR to <code>std4</code> has at least one label. :-) Ideally everyone will ensure that their own PRs always have exactly one of <code>awaiting-review</code> / <code>awaiting-author</code> / <code>WIP</code>, and this is up-to-date. If you don't have permission to change labels you'll need to ask here.</p>",
        "id": 386286676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692583583
    },
    {
        "content": "<p>Could I get permission to change labels? :)</p>",
        "id": 386532413,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692682770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> RE the chain of list file upstreams, I think I'm not gonna update the later PRs until they're at the head of the stack (it doesn't take me long to rebase the PR and get stuff compiling, but is a decent amount of manual work that I have to redo every time the dependent PR changes). I'm marking the dependent PRs as drafts for now!</p>",
        "id": 386540562,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692686397
    },
    {
        "content": "<p>Maybe we try to get <a href=\"https://github.com/leanprover/std4/pull/99\">std4#99</a> merged in the next day or two? We can always do further refactors once it's in Std :)</p>",
        "id": 386540936,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692686579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>, I've incorporated your changes from <a href=\"https://github.com/leanprover-community/mathlib4/pull/6575\">#6575</a>  into the larger Std bump at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6721\">#6721</a>. I doubt it builds yet.</p>",
        "id": 386555211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692692661
    },
    {
        "content": "<p>It should build after incorporating <a href=\"https://github.com/leanprover-community/mathlib4/pull/6172\">#6172</a>. This is the issue that I <a href=\"#narrow/stream/348111-std4/topic/Mathlib.20bump.20patches\">mentioned before</a> where Std patches to Mathlib often need to be merged in the same order they were merged into Std. That's an annoying issue that needs a better solution. Unfortunately, I do not have an easy solution.</p>",
        "id": 386707790,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692744555
    },
    {
        "content": "<p>No, it seems to build by itself. I will agitate for someone to merge.</p>",
        "id": 386713137,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692748065
    },
    {
        "content": "<p>It builds on top of <code>61a6507...</code> but that doesn't actually include <a href=\"https://github.com/leanprover/std4/pull/99\">std4#99</a> which is at <code>d9c3146...</code> so it sounds like you're just testing an old branch.</p>",
        "id": 386714326,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692748835
    },
    {
        "content": "<p>Sorry, <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>, I don't understand your comment. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6721\">#6721</a> has a green tick, and is using b5f7bd40d2162fe148e585543f284a5d8cc0ef26 from Std4, which is exactly <code>main</code>.</p>",
        "id": 386714824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692749150
    },
    {
        "content": "<p>Sorry, my bad. It's shocking though. I guess the old Mathlib alias completely shadows the new alias in Std. That is really lucky!</p>",
        "id": 386715466,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692749505
    },
    {
        "content": "<p>May I have permission to edit labels?</p>",
        "id": 387136396,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692899941
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> also needs that. </p>\n<p>Is there a way to add that permission to everyone after their first accepted PR? That way it would work as intended even if they didn't encounter the need to ask.</p>",
        "id": 387140110,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692901210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I added <code>awaiting-review</code> for you since that seemed to be the one you needed.</p>",
        "id": 387140679,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692901328
    },
    {
        "content": "<p>If someone wants to write (or find...?) the github action!</p>",
        "id": 387170624,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692916095
    },
    {
        "content": "<p>I couldn't resist: GPT claims to be able to <a href=\"https://chat.openai.com/share/252a380b-d075-4194-949f-d30107bbc8df\">write this action</a>. I only looked for 30 seconds, but it doesn't seem obviously insane. :-)</p>",
        "id": 387170722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692916171
    },
    {
        "content": "<p>I would probably ask it to use github-script so a to avoid it committing the atrocity of parsing json with regex!</p>",
        "id": 388474775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693555889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could we please review and/or merge <a href=\"https://github.com/leanprover/std4/pull/210\">std4#210</a> and <a href=\"https://github.com/leanprover/std4/pull/213\">std4#213</a>, which have been open for almost a month, and are steps towards upstreaming <code>exact?</code>.</p>",
        "id": 389064352,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693868951
    },
    {
        "content": "<p>Also <a href=\"https://github.com/leanprover/std4/pull/238\">std4#238</a> is I think ready to go after your reviews yesterday (this is the <code>left</code> and <code>right</code> tactic upstream).</p>",
        "id": 389064385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693868988
    },
    {
        "content": "<p>PRs belonging to others that I think should be merged when possible: <a href=\"https://github.com/leanprover/std4/pull/237\">std4#237</a> <a href=\"https://github.com/leanprover/std4/pull/183\">std4#183</a> <a href=\"https://github.com/leanprover/std4/pull/100\">std4#100</a> <a href=\"https://github.com/leanprover/std4/pull/194\">std4#194</a> <a href=\"https://github.com/leanprover/std4/pull/195\">std4#195</a> <a href=\"https://github.com/leanprover/std4/pull/196\">std4#196</a> <a href=\"https://github.com/leanprover/std4/pull/197\">std4#197</a> <a href=\"https://github.com/leanprover/std4/pull/203\">std4#203</a></p>",
        "id": 389084333,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693879747
    },
    {
        "content": "<p>(note, I'm at AITP this week so I will not be very responsive)</p>",
        "id": 389141514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693905385
    },
    {
        "content": "<p>Most useful to me in the near future would be review of <a href=\"https://github.com/leanprover/std4/pull/244\">std4#244</a>  (upstream of <code>symm</code> tactic) and <a href=\"https://github.com/leanprover/std4/pull/254\">std4#254</a> (upstream of <code>MVarId.isIndependentOf</code>).</p>\n<p>(These are both on the path to <code>exact?</code>.)</p>",
        "id": 390613975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694561664
    },
    {
        "content": "<p>Also on the path to <code>exact?</code>: <a href=\"https://github.com/leanprover/std4/pull/213\">std4#213</a> (the <code>DeclCache</code> mechanism) and <a href=\"https://github.com/leanprover/std4/pull/258\">std4#258</a> (<code>register_label_attr</code>).</p>",
        "id": 390620049,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694565407
    },
    {
        "content": "<p>RE: <a href=\"https://github.com/leanprover/std4/pull/100\">std4#100</a>, does someone know where all the relevant mathlib bumps are to get mathlib back up to speed?</p>",
        "id": 391578570,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694988134
    },
    {
        "content": "<p>(the bump for <a href=\"https://github.com/leanprover/std4/pull/100\">std4#100</a> seems to not compile for other-std-change reasons)</p>",
        "id": 391578657,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694988162
    },
    {
        "content": "<p>I don't think there are any significant bumps in between, <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>.</p>",
        "id": 391587323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694994570
    },
    {
        "content": "<p>mathlib <code>master</code> already uses <code>80089ff4cd1808ad1506a62dac557517d9b875ff</code> of Std, and after that there are two minor changes that shouldn't matter, and then your <code>std4#100</code>.</p>",
        "id": 391587345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694994602
    },
    {
        "content": "<p>Of course you should expect to have to merge master into your Mathlib bump PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6743\">#6743</a>, because master has moved on since.</p>",
        "id": 391587415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694994627
    },
    {
        "content": "<p>I'm doing that locally, and so far the only error I've seen is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Pairwise.lean</span><span class=\"o\">:</span><span class=\"mi\">209</span><span class=\"o\">:</span><span class=\"mi\">33</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Declaration</span> <span class=\"n\">List.pwFilter_idempotent</span> <span class=\"n\">not</span> <span class=\"n\">found.</span>\n</code></pre></div>\n<p>which sounds like it is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6743\">#6743</a>'s responsibility.</p>",
        "id": 391587458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694994679
    },
    {
        "content": "<p>That error is just a missed rename of <code>pwFilter_idempotent</code> to <code>pwFilter_idem</code>.</p>",
        "id": 391587611,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694994809
    },
    {
        "content": "<p>I've pushed the fixes and <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span>'d.</p>",
        "id": 391588259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694995358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/PR.20backlog/near/391587415\">said</a>:</p>\n<blockquote>\n<p>Of course you should expect to have to merge master into your Mathlib bump PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6743\">#6743</a>, because master has moved on since.</p>\n</blockquote>\n<p><span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> I forgot step 2 of how to be a bump bot</p>",
        "id": 391588495,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694995531
    },
    {
        "content": "<p>It's essential to have gotten every step wrong yourself, before you're ready to write the bot. :-)</p>",
        "id": 391589846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694996510
    },
    {
        "content": "<p>I would like to have <a href=\"https://github.com/leanprover/std4/pull/260\">std4#260</a> and <a href=\"https://github.com/leanprover/std4/pull/261\">std4#261</a> reviewed and merged. I am maintaining a branch of Mathlib that relies on both, making it essentially  impossible for me to also keep up with master.</p>",
        "id": 391598498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695000864
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/260\">std4#260</a> seems unobjectionable. broken simp lemmas should be removed even if they're not replaced immediately...</p>",
        "id": 391604269,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695004405
    },
    {
        "content": "<p>Both of these PRs have matching mathlib PRs, <a href=\"https://github.com/leanprover-community/mathlib4/pull/7134\">#7134</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/7141\">#7141</a>.</p>",
        "id": 391613605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695009997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, would you be able to take another look at <a href=\"https://github.com/leanprover/std4/pull/260\">std4#260</a>? It is a moderately impactful PR on mathlib, as it changes the simp set substantially. There is a matching mathlib PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7134\">#7134</a>.</p>",
        "id": 393346158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695770390
    },
    {
        "content": "<p>Still holding up <code>exact?</code>:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/std4/pull/244\">std4#244</a> (<code>symm</code>)</li>\n<li><a href=\"https://github.com/leanprover/std4/pull/254\">std4#254</a> (<code>MVarId.isIndependentOf</code>)</li>\n<li><a href=\"https://github.com/leanprover/std4/pull/213\">std4#213</a> (<code>DeclCache</code>)</li>\n</ul>",
        "id": 394732469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696380359
    },
    {
        "content": "<p>Could I have PR labelling permissions? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 394951022,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696474257
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 395332731,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696628675
    },
    {
        "content": "<p>Can I bmup <a href=\"https://github.com/leanprover/std4/pull/268\">https://github.com/leanprover/std4/pull/268</a> ? It's not especially important of course but it already approved once so hopefully not too hard to review</p>",
        "id": 396678157,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697318199
    },
    {
        "content": "<p>I submitted <a href=\"https://github.com/leanprover/std4/pull/194\">std4#194</a> (Nat order lemmas) and <a href=\"https://github.com/leanprover/std4/pull/196\">std4#196</a> (Nat min/max lemmas) this summer since I expected I would need those this fall... Well, now I need them for real!</p>\n<p>I just fixed recent issues with <a href=\"https://github.com/leanprover/std4/pull/196\">std4#196</a> that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> pointed out (thanks!). I think that one is fine now but it needs further review.</p>\n<p>As for <a href=\"https://github.com/leanprover/std4/pull/194\">std4#194</a>, there are still issues because there are so many synonyms! I purposefully did not choose one over any other and I tried to collect them together in one spot. I also used the <code>alias</code> command to emphasize the fact that these are synonyms. There's a lot of potential debate here. I'm hoping we can get this version with all variants merged in and then deprecate some variants in later updates but I understand if the community prefers a different path.</p>",
        "id": 397888744,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1697935349
    },
    {
        "content": "<p>I've just revived <a href=\"https://github.com/leanprover-community/mathlib4/pull/210\">#210</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/254\">#254</a>, which had recently acquired conflicts. <a href=\"https://github.com/leanprover-community/mathlib4/pull/254\">#254</a> is blocking progress on upstreaming <code>exact?</code> (and has been doing so for more than a month now :-)</p>",
        "id": 398207287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698125797
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover/std4/pull/210\">std#210</a>, <a href=\"https://github.com/leanprover/std4/pull/254\">std#254</a>)</p>",
        "id": 398207611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698126030
    },
    {
        "content": "<p>I see that <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> has recently updated his Std PRs upstreaming lemmas about <code>Nat</code>:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/std4/pull/194\">std#194</a></li>\n<li><a href=\"https://github.com/leanprover/std4/pull/196\">std#196</a></li>\n<li><a href=\"https://github.com/leanprover/std4/pull/203\">std#203</a></li>\n<li><a href=\"https://github.com/leanprover/std4/pull/195\">std#195</a></li>\n<li><a href=\"https://github.com/leanprover/std4/pull/198\">std#198</a></li>\n</ul>\n<p>As they have simultaneously revived the matching Mathlib PRs, now might be an opportune moment to get these reviewed and in, as keeping Mathlib up to date will be easier until these rot again.</p>",
        "id": 399657171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698814783
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>! </p>\n<p>By the way, Scott, is there a patch for <a href=\"https://github.com/leanprover/std4/pull/340\">std4#340</a>?</p>",
        "id": 399741909,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1698850610
    },
    {
        "content": "<p>nvm, the patch is just two lines.</p>",
        "id": 399749339,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1698852769
    },
    {
        "content": "<p>Where are we at with bumping Mathlib to catch up to Std? There are lots of changes to coordinate, I think.</p>",
        "id": 399819400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698881846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>, you said \"the patch is just two line\". Is this somewhere?</p>",
        "id": 399819417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698881862
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover-community/mathlib4/pull/8074\">#8074</a> is the one that needs to go first?</p>",
        "id": 399819632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698882024
    },
    {
        "content": "<p>Or do we need to do the patch for <a href=\"https://github.com/leanprover/std4/pull/340\">std4#340</a> separately first?</p>",
        "id": 399819834,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698882194
    },
    {
        "content": "<p>Okay's here my plan for catching up (I'll edit this message in place):</p>\n<ul>\n<li><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\">  <a href=\"https://github.com/leanprover-community/mathlib4/pull/8104\">#8104</a> for <a href=\"https://github.com/leanprover/std4/pull/340\">std4#340</a> @ 123e2f1e31355f79b95396b2d83de61bd9b485e7</li>\n<li><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\">   <a href=\"https://github.com/leanprover-community/mathlib4/pull/8074\">#8074</a> for <a href=\"https://github.com/leanprover/std4/pull/196\">std4#196</a> @ b541ac2085f0970ef3d3a2d44daba50e34488aab</li>\n<li><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"> <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/8105\">#8105</a> for <a href=\"https://github.com/leanprover/std4/pull/329\">std#329</a> @ fb43b83c13d10b90299d10d96512d20d33daa658</li>\n<li>nothing required? for <a href=\"https://github.com/leanprover/std4/pull/328\">std#328</a></li>\n<li>nothing required? for <a href=\"https://github.com/leanprover/std4/pull/325\">std#325</a></li>\n<li>rip out <code>left</code> and <code>right</code> for <a href=\"https://github.com/leanprover/std4/pull/238\">std#238</a></li>\n<li>rip out <code>Cache</code> stuff for <a href=\"https://github.com/leanprover/std4/pull/213\">std#213</a></li>\n<li><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"> <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span>  <a href=\"https://github.com/leanprover-community/mathlib4/pull/8106\">#8106</a> rip out <code> MVarId.isIndependentOf</code> for <a href=\"https://github.com/leanprover/std4/pull/254\">std#254</a> @ 795918af0b01cd79aea67f828f215cca71699eca</li>\n</ul>",
        "id": 399820375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698882600
    },
    {
        "content": "<p>Hopefully the last three can happen all at once.</p>",
        "id": 399820726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698882848
    },
    {
        "content": "<p>There is <a href=\"https://github.com/leanprover-community/mathlib4/pull/8005\">#8005</a> for <a href=\"https://github.com/leanprover/std4/pull/329\">std#329</a>, but it seems to be completely borked and I can't make head or tail of it. I think I will try starting over for that step?</p>",
        "id": 399822023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698883616
    },
    {
        "content": "<p>Okay, I've replaced <a href=\"https://github.com/leanprover-community/mathlib4/pull/8005\">#8005</a> with <a href=\"https://github.com/leanprover-community/mathlib4/pull/8105\">#8105</a></p>",
        "id": 399824487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698884478
    },
    {
        "content": "<p>Okay, hopefully we are good to go here, and we will have caught up with Std after this.</p>",
        "id": 399826784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698885351
    },
    {
        "content": "<p>Thanks for fixing <a href=\"https://github.com/leanprover-community/mathlib4/pull/8005\">#8005</a>, I got busy with other things and had to leave it incomplete. <a href=\"https://github.com/leanprover-community/mathlib4/pull/8105\">#8105</a> looks good to me! I'll be busy for the next couple of days but I'm always happy to help!</p>",
        "id": 399872713,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1698910817
    },
    {
        "content": "<p>Okay, hopefully we are there soon!</p>",
        "id": 399892711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698918245
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/259\">std#259</a> is a requested linter PR that was perhaps forgotten</p>",
        "id": 400245698,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699070004
    },
    {
        "content": "<p>I just refreshed <a href=\"https://github.com/leanprover/std4/pull/194\">std4#194</a> (order lemmas for Nat) and <a href=\"https://github.com/leanprover/std4/pull/195\">std4#195</a> (succ/pred lemmas for Nat) along with their Mathlib patches. Both were approved by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> a few days ago. Now would be a great time to merge them especially since <a href=\"https://github.com/leanprover/std4/pull/194\">std4#194</a> tends to break quickly.</p>",
        "id": 400334572,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1699140720
    },
    {
        "content": "<p>note for the future: use merge, not rebase, if you are making changes to a PR that has already been reviewed. Otherwise it is difficult to review the changes that happened since the last review</p>",
        "id": 400334981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699141214
    },
    {
        "content": "<p>Ah! Noted. (I'm afraid I just did the wrong thing again :/)</p>",
        "id": 400336498,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1699142880
    },
    {
        "content": "<p>Thank you Mario!</p>",
        "id": 400336641,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1699143001
    },
    {
        "content": "<p>Ugh, replacing <code>Nat.succ_eq_one_add</code> with <code>\\l Nat.one_add</code> seems like a terrible change.</p>",
        "id": 400341498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146203
    },
    {
        "content": "<p>Lemmas should be written with simp normal form on the RHS?</p>",
        "id": 400341519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146220
    },
    {
        "content": "<p>Actually, <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>, I don't understand why you have removed uses on <code>succ_eq_one_add</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6203\">#6203</a></p>",
        "id": 400341680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146317
    },
    {
        "content": "<p><code>succ_eq_one_add</code> is still available?</p>",
        "id": 400341699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146333
    },
    {
        "content": "<p>Historical reasons, it was deprecated for a bit then came back.</p>",
        "id": 400341785,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1699146374
    },
    {
        "content": "<p>I see. Can we undo that in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6203\">#6203</a>?</p>",
        "id": 400341864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146433
    },
    {
        "content": "<p>I would like to merge the mathlib PRs asap, so they don't rot and we can stay close to Std's main branch.</p>",
        "id": 400341890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146452
    },
    {
        "content": "<p>Yes, I will do in a second.</p>",
        "id": 400341966,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1699146491
    },
    {
        "content": "<p>Changing <code>eq_zero_of_nonpos</code> to <code>eq_zero_of_not_pos</code> seems contrary to the naming conventions.</p>",
        "id": 400342042,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146557
    },
    {
        "content": "<p>I can do the <code>succ_eq_one_add</code> reverts if you prefer to address my other questions first. :-)</p>",
        "id": 400342188,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146656
    },
    {
        "content": "<p>Apparently not, that one came from Mario: nonpos is <code>≤ 0</code> but the lemma uses <code>¬ 0 &lt; </code></p>",
        "id": 400342254,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1699146701
    },
    {
        "content": "<p>Are you seeing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Util</span><span class=\"bp\">/</span><span class=\"n\">DischargerAsTactic.lean</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">namespace</span> <span class=\"bp\">'</span><span class=\"n\">Tactic'</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Util</span><span class=\"bp\">/</span><span class=\"n\">DischargerAsTactic.lean</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">Simp.Discharge'</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Util</span><span class=\"bp\">/</span><span class=\"n\">DischargerAsTactic.lean</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">TacticM'</span>\n</code></pre></div>\n<p>on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6203\">#6203</a>?</p>",
        "id": 400342349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146764
    },
    {
        "content": "<p>I had this on another branch recently and don't understand how it is occurring.</p>",
        "id": 400342359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146781
    },
    {
        "content": "<p>I can transplant the fix from another branch.</p>",
        "id": 400342375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699146795
    },
    {
        "content": "<p>Besides the query about @[simp] I'm happy with this one.</p>",
        "id": 400342719,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699147041
    },
    {
        "content": "<p>I am going to merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/6203\">#6203</a> into <a href=\"https://github.com/leanprover-community/mathlib4/pull/8077\">#8077</a>, so there are ready to go one after the other.</p>",
        "id": 400342873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699147156
    },
    {
        "content": "<p>THe changes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8077\">#8077</a> relative to <a href=\"https://github.com/leanprover-community/mathlib4/pull/6203\">#6203</a> look fine.</p>\n<p>I've <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"> <a href=\"https://github.com/leanprover-community/mathlib4/pull/6203\">#6203</a> and <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/8077\">#8077</a>.</p>",
        "id": 400343152,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699147327
    },
    {
        "content": "<p>Thanks Scott!</p>",
        "id": 400343357,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1699147477
    },
    {
        "content": "<p>Both of these are merged now.</p>",
        "id": 400353692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699154387
    },
    {
        "content": "<p>Here are my Std PRs that I would like to see reviewed soon, mostly because I want them for <code>omega</code>:</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/leanprover/std4/pull/351\">std4#351</a> upstream <code>norm_cast</code></li>\n<li>[ ] <a href=\"https://github.com/leanprover/std4/pull/347\">std4#347</a> upstream <code>@[simps]</code> attribute</li>\n<li>[ ] <a href=\"https://github.com/leanprover/std4/pull/345\">std4#345</a> upstream <code>change at</code> tactic</li>\n<li>[ ] <a href=\"https://github.com/leanprover/std4/pull/324\">std4#324</a> lemmas about if-then-else</li>\n<li>[ ] <a href=\"https://github.com/leanprover/std4/pull/293\">std4#293</a> lemmas about <code>List.findIdx?</code></li>\n<li>[ ] <a href=\"https://github.com/leanprover/std4/pull/291\">std4#291</a> simp lemmas about <code>Int</code></li>\n</ul>",
        "id": 400363844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699163575
    },
    {
        "content": "<p>are you working on <code>omega</code>? <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span></p>",
        "id": 400363966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699163692
    },
    {
        "content": "<p>Getting there. I have a basic version working over <code>Int</code> (no \"dark\" and \"grey\" shadows yet, so only a semidecision procedure), but it needs lots of speedups. I'm going to build more of the <code>Nat</code> preprocessing frontend next, so it's usable, and then go back to completeness/optimization.</p>",
        "id": 400364789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699164367
    },
    {
        "content": "<p>I was kind of hoping someone would pick up my <code>micromega</code> port (which despite the name is quite a comprehensive suite of tactics and more complete than the lean 3 <code>omega</code> tactic)</p>",
        "id": 400366372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699165863
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/micromega\">https://github.com/leanprover-community/mathlib4/tree/micromega</a> (note: it's very old)</p>",
        "id": 400366447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699165928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> At a quick glance, mircomega looks like a good fit for Std. It's light weight and powerful. Why did you drop it?</p>",
        "id": 400419043,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1699213954
    },
    {
        "content": "<p>PS: I just paid closer attention to the year... Summer 2022 wasn't the right time! I get it now.</p>",
        "id": 400421687,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1699217195
    },
    {
        "content": "<p>even before upstreaming, it first has to be written and used in mathlib</p>",
        "id": 400449345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699240173
    },
    {
        "content": "<p>I still don't understand how it's not called omicron</p>",
        "id": 400450264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1699240847
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/351\">std4#351</a> and then <a href=\"https://github.com/leanprover-community/mathlib4/pull/8122\">#8122</a> (upstreaming <code>norm_cast</code> to Std) would be very useful for me, as I'll be depending on these branches in the interim.</p>",
        "id": 400488588,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699261682
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/368\">std4#368</a> and <a href=\"https://github.com/leanprover/std4/pull/369\">std4#369</a> are easy bug fixes / improvements, that each have a mathlib PR waiting for them that improves the behaviour of <code>exact?</code>.</p>",
        "id": 402609297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700193180
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/354\">std4#354</a> would be a nice usability improvement for mathlib, and <a href=\"#narrow/stream/287929-mathlib4/topic/Bringing.20back.20.E2.87.91/near/401155790\">seems to have reasonable buy-in</a></p>",
        "id": 402715139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700232897
    },
    {
        "content": "<p>I finally did a careful read through of <a href=\"https://github.com/leanprover/std4/pull/89\">std4#89</a> and left some comments/work for myself. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> if you have some time to look over the comments I'd appreciate bikeshedding input on lemma names and statements.</p>",
        "id": 402988731,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700385638
    },
    {
        "content": "<p>Three easy PRs for Std:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/std4/pull/291\">std4#291</a>, some <code>@[simp]</code> attributes for <code>Int</code></li>\n<li><a href=\"https://github.com/leanprover/std4/pull/369\">std4#369</a>, making <code>DiscrTreeCache.mk</code> more flexible by deferring an opinionated filter to the caller</li>\n<li><a href=\"https://github.com/leanprover/std4/pull/372\">std4#372</a>, some basic lemmas about LT and LE.</li>\n</ul>",
        "id": 402996903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700390251
    },
    {
        "content": "<p>(There are many others in my <a href=\"https://github.com/leanprover/std4/pulls?q=is%3Apr+author%3Asemorrison+sort%3Aupdated-desc+is%3Aopen\">open backlog</a> that I'd like to see merged, but those three should require very little effort!)</p>",
        "id": 402996953,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700390283
    },
    {
        "content": "<p>two down, but the remaining one is more than a 20 second job, looks like something broke in DivMod when reverting the alias import</p>",
        "id": 402998153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700390950
    },
    {
        "content": "<p>Oops, <code>main</code> is broken.  <a href=\"https://github.com/leanprover/std4/pull/375\">https://github.com/leanprover/std4/pull/375</a></p>",
        "id": 402998518,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700391162
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/leanprover/std4/pull/372\">std4#372</a> is good to go again.</p>",
        "id": 402999044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700391492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, oh, I missed something in <a href=\"https://github.com/leanprover/std4/pull/372\">std4#372</a>. The <code>Std</code> namespace was opened at the top of the file, so the <code>le_of_le_of_eq</code> lemmas I added are in the <code>Std</code> namespace instead of <code>_root_</code> as I intended.</p>\n<p>Presumably it is okay to change this quickly?</p>",
        "id": 403000806,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700392512
    },
    {
        "content": "<p>Hmm, actually my take is that most of the file is right, but <code>byKey</code> should be <code>Ordering.byKey</code> rather than <code>Std.byKey</code>, and then the new theorems should be in <code>_root_</code>.</p>",
        "id": 403001060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700392662
    },
    {
        "content": "<p>SGTM</p>",
        "id": 403001147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700392701
    },
    {
        "content": "<p>I don't think <code>byKey</code> is used outside of Std, so I don't anticipate any breakage</p>",
        "id": 403001189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700392730
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/377\">std4#377</a> looks good to go.</p>",
        "id": 403001619,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700392975
    },
    {
        "content": "<p>The <code>awaiting-review</code> + has an approving review list has 8 items on it: <a href=\"https://github.com/leanprover/std4/pulls?q=is%3Apr+is%3Aopen+label%3Aawaiting-review+review%3Aapproved+-label%3Amerge-conflict\">https://github.com/leanprover/std4/pulls?q=is%3Apr+is%3Aopen+label%3Aawaiting-review+review%3Aapproved+-label%3Amerge-conflict</a></p>\n<p>Perhaps this would be a good place to start to clear the backlog?</p>\n<p>(Only one is mine! :-)</p>",
        "id": 403088381,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700452948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I have time to refresh and finalize <a href=\"https://github.com/leanprover/std4/pull/197\">std4#197</a> (Nat add) and <a href=\"https://github.com/leanprover/std4/pull/203\">std4#203</a> (Nat sub) and Mathlib patches tomorrow. Is this a good time? (I'm flexible.)</p>",
        "id": 403265028,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700524043
    },
    {
        "content": "<p>All done, waiting on some CI. Incidentally, I had to make the Mathlib bump to the current Std: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8548\">#8548</a></p>",
        "id": 403366961,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700568365
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 403370598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700569633
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/89\">std4#89</a> is good for review; I'll make a mathlib patch tonight or tomorrow, since this one is going to be messy</p>",
        "id": 403489432,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700614384
    },
    {
        "content": "<p>RE: <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>' review of <a href=\"https://github.com/leanprover/std4/pull/89\">std4#89</a> is there any stylistic or maintenance preference between term-mode and tactic-mode proofs in Std? The suggested proof changes are essentially tactic mode translations of the current term mode proofs.</p>",
        "id": 403715796,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700716012
    },
    {
        "content": "<p>The tactic mode proofs are a bit more readable, but I don't mind short term-mode proofs.</p>",
        "id": 403715875,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700716080
    },
    {
        "content": "<p>I like short term-mode proofs. I'm sure there is no style preference for tactic-mode proofs in general. The suggestions are made are all about using the induction tactic instead of using <code>Perm.rec</code> directly. The goal there is readability since recursors are not generally meant for human consumption.</p>",
        "id": 403732336,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700725124
    },
    {
        "content": "<p>Bulleted arguments would also work well here: <a href=\"#narrow/stream/270676-lean4/topic/Fun.20macro.20-.20bulleted.20argument.20lists\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Fun.20macro.20-.20bulleted.20argument.20lists</a></p>\n<p>Maybe that should be included in Std?</p>",
        "id": 403735969,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700726574
    },
    {
        "content": "<p>I just clarified the review comments...</p>",
        "id": 403782946,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700743911
    },
    {
        "content": "<p>the only reason they were written with recursors in the first place was because lean 3 <code>induction</code> did not work in that position. I think we should have a style rule saying don't use <code>T.rec</code> if there are any other options which are not significantly worse on other axes</p>",
        "id": 403818603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700756508
    },
    {
        "content": "<p>(I believe this rule is currently followed in std, in the sense that you will not find any direct references to <code>T.rec</code> theorems, except for some use of <code>Or.rec</code> and <code>And.rec</code> in some golfed <code>Std.Logic</code> proofs)</p>",
        "id": 403819262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700756784
    },
    {
        "content": "<p>Got it, will push those changes real quick</p>",
        "id": 403824568,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700759198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> could either one of you enable CI on PR <a href=\"https://github.com/leanprover/std4/pull/394\">std4#394</a>. I think that would really help this first-time contributor.</p>",
        "id": 404292009,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1701034398
    },
    {
        "content": "<p>Thanks Mario!</p>",
        "id": 404292617,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1701034930
    },
    {
        "content": "<p>Does CI need to be re-enabled every time until they get a merged PR? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span></p>",
        "id": 404494397,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1701121651
    },
    {
        "content": "<p>yes</p>",
        "id": 404494412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701121661
    },
    {
        "content": "<p>nothing I can do about that unfortunately</p>",
        "id": 404494434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701121675
    },
    {
        "content": "<p>bummer :/</p>",
        "id": 404494500,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1701121693
    },
    {
        "content": "<p>Thanks again!</p>",
        "id": 404495737,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1701122348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/PR.20backlog/near/404494434\">said</a>:</p>\n<blockquote>\n<p>nothing I can do about that unfortunately</p>\n</blockquote>\n<p>You could recommend they open a trivial documentation PR fixing a typo somewhere; as soon as the first PR is merged, this behavior goes away</p>",
        "id": 404501434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701125167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if you could speed through <a href=\"https://github.com/leanprover/std4/pull/405\">std4#405</a> then that would resolve this recurring problem.</p>",
        "id": 404509934,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1701129970
    },
    {
        "content": "<p>It's merged</p>",
        "id": 404511572,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1701130912
    },
    {
        "content": "<p>We got a couple of PRs from new contributors who need CI authorization: <a href=\"https://github.com/leanprover/std4/pull/417\">std4#417</a>, <a href=\"https://github.com/leanprover/std4/pull/412\">std4#412</a></p>",
        "id": 405607993,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1701583189
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/197\">std4#197</a> (Nat add lemmas) got forgotten somehow. It's ready to merge.</p>",
        "id": 406679382,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1702010859
    },
    {
        "content": "<p>Thanks for persisting!</p>",
        "id": 406682894,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1702013041
    }
]