[
    {
        "content": "<p>I don't see an implementation of the standard amortized O(1) deque (two lists, one reversed) anywhere, should I PR one?</p>",
        "id": 375851496,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689550659
    },
    {
        "content": "<p>(And does someone already have an implementation with proper lemmas and such?</p>",
        "id": 375851560,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689550686
    },
    {
        "content": "<p>Okay, I started implementing one and it's somewhat unclear whether I should quotient by the equivalence relation. I suspect I should not.</p>",
        "id": 375854146,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689552642
    },
    {
        "content": "<p>This should be PR to Std4, just like any of the standard textbook data structures. Correctness proofs can follow later, I think, but they are not that hard in this case. I think this should go in <code>Std/Data/List/Deque.lean</code> but I'm not sure.</p>",
        "id": 375886357,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1689569005
    },
    {
        "content": "<p>Just gonna call it <code>Std.Deque</code> in <code>Std/Data/Deque.lean</code>.</p>",
        "id": 375887452,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689569525
    },
    {
        "content": "<p>hmm, although you're right that it's not the best deque impl.</p>",
        "id": 375887491,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689569545
    },
    {
        "content": "<p>There is <code>Init.Data.Queue</code> already</p>",
        "id": 376008459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689597784
    },
    {
        "content": "<p>aha :) I knew it'd be somewhere. sorry for the noise!</p>",
        "id": 376069341,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689607913
    }
]