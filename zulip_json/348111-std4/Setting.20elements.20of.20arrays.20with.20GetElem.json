[
    {
        "content": "<p>Do we have something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">natSet</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">as.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">get_elem_tactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Array.set</span> <span class=\"n\">as</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>As far as I can tell, we only have <code>Array.set</code> which takes in a <code>Fin</code> index, <code>Array.setD</code> which does nothing if the index is out of bound, and <code>Array.set!</code> which panics.</p>",
        "id": 406668690,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1702006276
    },
    {
        "content": "<p>While we are at it, would it be good to have notation like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n  <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>that desugars to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a.natSet</span> <span class=\"n\">i</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>?</p>",
        "id": 406713993,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702025260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> See <a href=\"https://github.com/leanprover/lean4/pull/905\">lean4#905</a> for an old discussion of better <code>do</code> notation assignment syntax. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 406714891,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702025622
    },
    {
        "content": "<p>Patrick and I experimented earlier this year with <code>a[i] := x</code> notation. We did <code>set a[i] := x</code> since that made it be unambiguous (the normal <code>x := v</code> parser parses any term <code>x</code> for the LHS and interprets it as a pattern -- maybe we could have carved out indexing notation, but I don't remember if we tried).</p>\n<p>In action it looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">matrix.swapRowsp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">row'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hrow</span> <span class=\"o\">:</span> <span class=\"n\">row</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">set_elem_tac</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hrow'</span> <span class=\"o\">:</span> <span class=\"n\">row'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">set_elem_tac</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">row</span> <span class=\"bp\">==</span> <span class=\"n\">row'</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">A</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"o\">[</span><span class=\"n\">row</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">]</span>\n    <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">[</span><span class=\"n\">row</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"o\">[</span><span class=\"n\">row'</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">]</span>\n    <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">[</span><span class=\"n\">row'</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">tmp</span>\n  <span class=\"n\">return</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>(<code>set_elem_tac</code> is like <code>get_elem_tac</code>, and I don't remember if it's any different. These were extended to deal with tuple indexing though.)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">! # SetElem class</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SetElem</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"bp\">→</span> <span class=\"n\">idx</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/--</span>\n<span class=\"sd\">  Like `GetElem.getElem` but for setting.</span>\n\n<span class=\"sd\">  Given a `mut` variable `arr` in a `do` block:</span>\n<span class=\"sd\">  * `set arr[i] := v`: proves the proof side goal by `get_elem_tactic`</span>\n<span class=\"sd\">  * `set arr[i]! := v`: panics `i` is out of bounds</span>\n<span class=\"sd\">  * `set arr[i]? := v`: does nothing if `i` is out of bounds</span>\n<span class=\"sd\">  * `set arr[i]'h := v`: uses `h` to prove the side goal</span>\n<span class=\"sd\">  -/</span>\n  <span class=\"n\">setElem</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">cont</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">elem</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dom</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cont</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">SetElem</span> <span class=\"o\">(</span><span class=\"n\">setElem</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">never_extract</span><span class=\"kd\">]</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">outOfBounds</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"index out of bounds\"</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Set `xs[i] := v` or panic if `i` is out of bounds.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">setElem</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">SetElem</span> <span class=\"n\">cont</span> <span class=\"n\">idx</span> <span class=\"n\">elem</span> <span class=\"n\">dom</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">cont</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">elem</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">cont</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"k\">then</span>\n    <span class=\"n\">setElem</span> <span class=\"n\">xs</span> <span class=\"n\">i</span> <span class=\"n\">v</span> <span class=\"n\">h</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">cont</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">⟩</span>\n    <span class=\"n\">outOfBounds</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Set `xs[i] := v` if `i` is within bounds, otherwise do nothing.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">setElem</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">SetElem</span> <span class=\"n\">cont</span> <span class=\"n\">idx</span> <span class=\"n\">elem</span> <span class=\"n\">dom</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">cont</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">elem</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">cont</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"k\">then</span> <span class=\"n\">setElem</span> <span class=\"n\">xs</span> <span class=\"n\">i</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">xs</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">setExpr</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">setExpr</span>\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">setElem</span><span class=\"kd\">]</span> <span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">setExpr</span>\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">setElem</span><span class=\"kd\">]</span> <span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\"]'\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:</span> <span class=\"n\">setExpr</span>\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">setElem</span><span class=\"kd\">]</span> <span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\"]\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"!\"</span> <span class=\"o\">:</span> <span class=\"n\">setExpr</span>\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">setElem</span><span class=\"kd\">]</span> <span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\"]\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"?\"</span> <span class=\"o\">:</span> <span class=\"n\">setExpr</span>\n\n<span class=\"sd\">/-- Notation for updating a value. -/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"set \"</span> <span class=\"n\">setExpr</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">setElem</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">get_elem_tactic</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'$</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">setElem</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">val</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">setElem</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">setElem</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Also support `set x[i1,i2,i3] := v` for `set x[(i1,i2,i3)] := v`</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">'$</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)]</span><span class=\"bp\">'$</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)]</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 406796298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702053090
    },
    {
        "content": "<p>It's nice having array indexing have a symmetry before and after the <code>:=</code> for code like this.</p>",
        "id": 406796470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702053124
    },
    {
        "content": "<p>More generally, it's nice when a language has a concept of lvalues, which are expressions that come with assignment semantics. Common Lisp has a cool system of composable \"<code>setf</code> macros\", where in <code>(setf p v)</code> you explain for a given form <code>p</code> how to do the assignment <code>v -&gt; p</code>.</p>\n<p>Using Lean notation, that could mean macros that turn <code>set s.x[1] := v</code> into <code>s := {s with x := s.x.set 1 v}</code>. The macros could be written to be more careful about affine usage of the variables than this.</p>",
        "id": 406797411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702053335
    },
    {
        "content": "<p>(In fact, <code>setf</code> macros were what justified prefixing these assignments with <code>set</code> for me. It also serves as a warning that there might possibly be non-affine uses of variables.)</p>",
        "id": 406797736,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702053456
    },
    {
        "content": "<p>Lean already has lvalues, they just haven't made it to <code>do</code> yet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">fst.fst</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 406800078,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1702054283
    },
    {
        "content": "<p>If we had <code>setf</code>-style lvalues, then we could do something more general than what's available to structure notation, or at least I think -- I don't know if what you can do with structures is extensible.</p>\n<p>The idea of <code>setf</code> is to make accessing and storing look the same, no matter the accessor function. For example, if you have a hash map <code>m</code>, you can do <code>m.find! k</code> to access, so you should be able to define a <code>set</code> macro so that <code>set m.find! k := v</code> means <code>m := m.insert k v</code>. (Justification for using <code>find!</code>: after this, <code>m.find! k</code> evaluates to <code>v</code>.)</p>\n<p>I believe the lenses were invented for this sort of transformation, but we're in Lean and we have metaprogramming :-)</p>",
        "id": 406840926,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702071178
    },
    {
        "content": "<p>Common Lisp Hyperspec: <a href=\"https://www.lispworks.com/documentation/lw61/CLHS/Body/m_setf_.htm\"><code>setf</code></a> and <a href=\"https://www.lispworks.com/documentation/lw61/CLHS/Body/05_ab.htm\">kinds of places</a></p>",
        "id": 406841458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702071471
    }
]