[
    {
        "content": "<p>Is there are reason <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Zero#doc\">docs#Zero</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=One#doc\">docs#One</a> are defined in Mathlib and not Std? (or core for that matter)</p>",
        "id": 405423171,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701457779
    },
    {
        "content": "<p>Is it because users are just supposed to write an instance of <code>OfNat M 1</code> instead?</p>",
        "id": 405423412,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701457856
    },
    {
        "content": "<p>I think it would be plausible to move these up. I have some Std-destined code that could be type polymorphic if <code>Zero</code> and <code>One</code> existed alongside <code>Add</code> and <code>Mul</code>.</p>",
        "id": 405459321,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701476432
    },
    {
        "content": "<p>For example?</p>",
        "id": 405473849,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1701483396
    },
    {
        "content": "<p>A bunch of API around <code>List Int</code> with algebraic operations treating them as finitely supported functions (i.e. you can right pad with zeroes as necessary).</p>",
        "id": 405486473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701489359
    },
    {
        "content": "<p>All the operations would be stateable with just Mul/Add/Zero/One.</p>",
        "id": 405486553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701489375
    },
    {
        "content": "<p>But none of the laws hold at this level because I don't trim trailing zeroes, so functions don't have unique representations.</p>",
        "id": 405486656,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701489412
    },
    {
        "content": "<p>I think the material for omega should just be treated as a private implementation detail, including any <code>Zero</code>/<code>One</code> class used for code reuse purposes</p>",
        "id": 405489328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701490722
    }
]