[
    {
        "content": "<p>I'd like to upstream the <code>ToExpr</code> derive handler, and have PR'd this as <a href=\"https://github.com/leanprover/std4/pull/221\">https://github.com/leanprover/std4/pull/221</a>. <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, we are missing some doc-strings here, as these files were added to Mathlib while we had the doc-string linter turned off. Is there any chance you would be able to write the missing doc-strings? If you don't have availability I will come up with something!</p>",
        "id": 386191925,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692513310
    },
    {
        "content": "<p>This will conflict with the <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a> from <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  and me. Does Std4 take a Qq dependency?</p>",
        "id": 386246211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692554378
    },
    {
        "content": "<p>No, std has no dependencies. I think if we are considering that then Qq should perhaps be merged with either std or lean core</p>",
        "id": 386248401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692556438
    },
    {
        "content": "<p>If there's some contention here, can we PR the docstrings to mathlib first so that we have them either way?</p>",
        "id": 386250589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692558424
    },
    {
        "content": "<p>I'd written this as a comment to Eric on the std4 PR about <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a>, and I'll copy it here:</p>\n<p>I'd prefer if <code>ToExpr</code> were left alone and there be a completely new <code>ToExprQ</code>, mainly because <code>ToExpr</code> still exists in core. I know that you have <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952/files#diff-dad17c6cb38f553f37edcc70d3af686741a8caf719522e01b25bc75b32755238R59\">this instance</a> so <code>deriving ToExprQ</code> gives you a <code>ToExpr</code> instance, but still, I'd like to see <code>ToExpr</code> be deprecated in favor of <code>ToExprQ</code> rather than be replaced by it.</p>",
        "id": 386283957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692582153
    },
    {
        "content": "<p>This sounds correct. <code>ToExpr</code> in core is not going to change, and the derive handler is useful for people who don't need <code>Qq</code>.</p>",
        "id": 386284257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692582340
    },
    {
        "content": "<p>Can we avoid having two almost-duplicates of Kyle's derive handler?</p>",
        "id": 386350118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692611624
    },
    {
        "content": "<p>Do we need a <code>ToExpr</code> derive handler? We can just have an instance that derives it from <code>ToExprQ</code></p>",
        "id": 386350410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692611696
    },
    {
        "content": "<p>The claim is that people not using mathlib/Qq need the ToExpr handler</p>",
        "id": 386350549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692611738
    },
    {
        "content": "<p>why?</p>",
        "id": 386350583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692611748
    },
    {
        "content": "<p>Because they don't have toExprQ available to them</p>",
        "id": 386350639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692611763
    },
    {
        "content": "<p>I think anyone using std will have ToExprQ if we are providing a derive handler for it</p>",
        "id": 386350714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692611785
    },
    {
        "content": "<p>Are you arguing that std should depend on/absorb Qq?</p>",
        "id": 386350775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692611807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386248401\">said</a>:</p>\n<blockquote>\n<p>No, std has no dependencies. I think if we are considering that then Qq should perhaps be merged with either std or lean core</p>\n</blockquote>",
        "id": 386350798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692611817
    },
    {
        "content": "<p>Sorry, what I meant was \"are you using that message to argue against Kyle's point above?\"</p>",
        "id": 386350902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692611852
    },
    {
        "content": "<p>I think it's a pretty good candidate, I need Qq in any reasonably complicated tactic writing</p>",
        "id": 386350920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692611857
    },
    {
        "content": "<p>I think that for the purpose of this PR we need <code>ToExprQ</code> to be defined in std, but I guess the issue is that this class already exists and is defined in Qq?</p>",
        "id": 386351173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692611921
    },
    {
        "content": "<p>Maybe the least disruptive option would be to have std get a copy of Qq, just like it made a copy of <code>Lean</code> data structures</p>",
        "id": 386351478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692612018
    },
    {
        "content": "<p>and then people can migrate to <code>Std.Qq</code> if they are already depending on std and otherwise keep using <code>Qq</code></p>",
        "id": 386351561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692612049
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 386351578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692612057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386250589\">said</a>:</p>\n<blockquote>\n<p>If there's some contention here, can we PR the docstrings to mathlib first so that we have them either way?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6699\">#6699</a>, <code>git apply</code>d from the Std PR</p>",
        "id": 386351896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692612151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386351173\">said</a>:</p>\n<blockquote>\n<p>but I guess the issue is that this class already exists and is defined in Qq?</p>\n</blockquote>\n<p>ToExprQ currently exists nowhere except <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a></p>",
        "id": 386352513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692612338
    },
    {
        "content": "<p>but <code>ToExprQ</code> has a type that needs <code>Qq</code> to state</p>",
        "id": 386352830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692612429
    },
    {
        "content": "<p>So right now our choices are:</p>\n<ol>\n<li>Merge <a href=\"https://github.com/leanprover/std4/pull/221\">std4#221</a>, stranding <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a></li>\n<li>Merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a>, stranding  <a href=\"https://github.com/leanprover/std4/pull/221\">std4#221</a></li>\n<li>Duplicate Kyle's code for the toExpr handler (Std4) and the toExprQ handler (Mathlib 4)</li>\n<li>Make Qq available inside Std4</li>\n</ol>",
        "id": 386353147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692612516
    },
    {
        "content": "<p>I think we should just not upstream this derive handler, and wait for the Qq situation to resolve</p>",
        "id": 386353158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692612518
    },
    {
        "content": "<p>merging <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a> SGTM</p>",
        "id": 386353269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692612559
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a> is blocked by <a href=\"https://github.com/leanprover-community/mathlib4/pull/6699\">#6699</a> for the same reason as the first message in this thread</p>",
        "id": 386353528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692612615
    },
    {
        "content": "<p>Urgh, okay, I upstreamed the derive handler in order to make a project not depend on Mathlib, but now that is waiting on an indefinite project with no owner (migrating Qq into Std).</p>\n<p>I guess I don't really care about not depending on Mathlib. <span aria-label=\"woman shrugging\" class=\"emoji emoji-1f937-200d-2640\" role=\"img\" title=\"woman shrugging\">:woman_shrugging:</span></p>",
        "id": 386355971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692613257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386351478\">said</a>:</p>\n<blockquote>\n<p>Maybe the least disruptive option would be to have std get a copy of Qq, just like it made a copy of <code>Lean</code> data structures</p>\n</blockquote>\n<p>It seems to me that the least disruptive option is to merge <a href=\"https://github.com/leanprover/std4/pull/211\">std4#211</a>, then once there's an owner for the project to migrate Qq into Std proceed to turn it into a <code>ToExprQ</code> handler.</p>",
        "id": 386363779,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692615916
    },
    {
        "content": "<p>What's the motivation for the migration to Std here? Is it to allow the derive handler to be used in a dependency <em>of</em> mathlib?</p>",
        "id": 386364343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692616113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386350549\">said</a>:</p>\n<blockquote>\n<p>The claim is that people not using mathlib/Qq need the ToExpr handler</p>\n</blockquote>\n<p>This isn't the point I was trying to make myself. I'm saying that we already have a <code>ToExpr</code> handler, so a reasonable way forward engineering-wise is to introduce a <code>ToExprQ</code> handler and deprecate the <code>ToExpr</code> one (and maybe delete the <code>ToExpr</code> one too; we can make a <code>ToExpr</code> handler that throws an error saying to derive <code>ToExprQ</code> instead). In the short term, it's true that since std doesn't have Qq then you'd need a <code>ToExpr</code> handler.</p>",
        "id": 386364639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692616222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I think Scott explained it: \"I upstreamed the derive handler in order to make a project not depend on Mathlib\"</p>",
        "id": 386364814,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692616296
    },
    {
        "content": "<p>I'm also happy to see it be upstreamed because it really doesn't depend on mathlib in any way. It could even be in core in principle.</p>",
        "id": 386364992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692616358
    },
    {
        "content": "<p>Sure, I guess my question was actually \"what's the motivation for not depending on mathlib\"?</p>",
        "id": 386365032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692616379
    },
    {
        "content": "<p>It's a project that compiles other projects, extracting information at goal states, etc. I would like it to have minimal imports so people can use it by importing it into their project temporarily and running the scripts.</p>",
        "id": 386365436,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692616533
    },
    {
        "content": "<p>For the short term, where all I'm going to be running it on is mathlib itself, it is no particular problem to flip the dependency chain and depend on mathlib.</p>",
        "id": 386365542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692616566
    },
    {
        "content": "<p>(Do we need to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> this to determine whether it's appropriate to upstream this derive handler? For what it's worth, I only contributed the ToExpr handler to mathlib rather than std because it was a bit more convenient for me.)</p>",
        "id": 386365602,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692616592
    },
    {
        "content": "<p>But generally, I would really like to get generally useful programming stuff out of Mathlib --- it is a bad look for programming users if stuff they need is stuck in Mathlib.</p>",
        "id": 386365687,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692616626
    },
    {
        "content": "<p>(And I appreciate that a good long term solution is to move all this stuff, Qq and ToExprQ etc, into Std. But I like short term solutions with owners. :-)</p>",
        "id": 386365775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692616665
    },
    {
        "content": "<p>Until we upstream Qq into Std, there's a tradeoff here between having more features, fewer dependencies, or duplicated code.</p>",
        "id": 386365869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692616696
    },
    {
        "content": "<p>Maybe the compromise is just to have the code duplication, with an almost identical <code>ToExprQ</code>in mathlib alongside <code>ToExpr</code> in Std4</p>",
        "id": 386365929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692616731
    },
    {
        "content": "<p>I think not upstreaming something because we want to upstream more stuff is a recipe for not getting anything done, and unnecessary overhead.</p>",
        "id": 386365956,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692616744
    },
    {
        "content": "<p>The duplication is cheap to do, and hopefully motivates someone to do the work of migrating Qq and then upstreaming ToExprQ.</p>",
        "id": 386366030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692616777
    },
    {
        "content": "<p>Will merging <a href=\"https://github.com/leanprover/std4/pull/221\">std4#221</a> force us to delete the toExpr handler from mathlib?</p>",
        "id": 386366265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692616864
    },
    {
        "content": "<p>It will be easier to review <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a> if it can be left intact as a duplicate</p>",
        "id": 386366318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692616883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386365956\">said</a>:</p>\n<blockquote>\n<p>I think not upstreaming something because we want to upstream more stuff is a recipe for not getting anything done, and unnecessary overhead.</p>\n</blockquote>\n<p>Yeah, this is part of the subtext behind my original comment on the PR.</p>",
        "id": 386366358,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692616904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386366318\">said</a>:</p>\n<blockquote>\n<p>It will be easier to review <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a> if it can be left intact as a duplicate</p>\n</blockquote>\n<p>Honestly, I'd be happier to review <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a> as a PR to a fresh file</p>\n<p>I'm a little uncomfortable with this re-using-the-file-to-hatch-a-beautiful-butterfly, even if I like the butterfly</p>",
        "id": 386366528,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692616958
    },
    {
        "content": "<p>the reason why my impression of this discussion is that we shouldn't upstream the ToExpr handler is that it seems it will soon be out of date, and I prefer not to put things in std4 which are going to change because I want to minimize churn for users of std</p>",
        "id": 386366844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692617081
    },
    {
        "content": "<p>mathlib is a better place to get something out quick and iterate on the design</p>",
        "id": 386367099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692617168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The problem is that it only <em>might</em> be soon, since it doesn't seem like anyone is really taking ownership to guarantee it will be soon.</p>\n<p>The deprecation of the <code>ToExpr</code> derive handler could be done in a way that users never notice, since it could call the <code>ToExprQ</code> derive handler instead.</p>",
        "id": 386367132,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692617186
    },
    {
        "content": "<p>Isn't the <code>ToExpr</code> class fundamentally broken? Like, it doesn't track levels properly</p>",
        "id": 386367258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692617237
    },
    {
        "content": "<p>std isn't in a hurry to grow though, so if no one takes charge to work on the prerequisites then it might just be a while and that's fine by me</p>",
        "id": 386367492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692617333
    },
    {
        "content": "<p>I'd rather not rush a poor design and have to back it out later or be stuck with it</p>",
        "id": 386367692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692617407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/ToExpr.20derive.20handler/near/386367258\">said</a>:</p>\n<blockquote>\n<p>Isn't the <code>ToExpr</code> class fundamentally broken? Like, it doesn't track levels properly</p>\n</blockquote>\n<p>I wouldn't say it's fundamentally broken. The class itself doesn't track levels, but instances can use the <code>ToLevel</code> class, and it can assemble expressions with the correct levels just fine.</p>",
        "id": 386367738,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692617424
    },
    {
        "content": "<p>There are some bad instances in core that don't track levels, but I added some instances that override these.</p>",
        "id": 386367764,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692617434
    },
    {
        "content": "<p>Is it possible to build a <code>ToExprQ</code> instance on a <code>ToExpr</code> instance?</p>",
        "id": 386367949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692617506
    },
    {
        "content": "<p>\"Yes\" in that you can get the universe level of the type if you have access to <code>MetaM</code>, but \"no\" in that the class is non-monadic.</p>\n<p>It should be easy to write a function <code>ToExpr X -&gt; MetaM (ToExprQ X)</code>.</p>",
        "id": 386368272,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692617625
    },
    {
        "content": "<p>yeah, that makes me want to just ignore <code>ToExpr</code> then, this is just some bootstrapping thing that no one else should need to care about</p>",
        "id": 386369064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692617918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could you just summarize the plan? I'm left a little unsure what has been decided here.</p>",
        "id": 386381570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692622204
    },
    {
        "content": "<p>For now, nothing in std; we want to hunt down Gabriel and have a discussion about moving Qq and then we might move the ToExprQ version of the derive handler later. You should either depend on mathlib or copy that handler into your project in the meantime.</p>",
        "id": 386476438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692652398
    },
    {
        "content": "<p>In the meantime we may as well merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/6699\">#6699</a>, right?</p>",
        "id": 386476693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692652534
    },
    {
        "content": "<p>Okay, I have updated the <code>compile_time_search_path%</code> upstreaming PR <a href=\"https://github.com/leanprover/std4/pull/222\">std4#222</a> so that it doesn't rely on the <code>ToExpr</code> derive handler anymore. Review appreciated, as I'd like to reduce the steady duplication of this across projects! :-)</p>",
        "id": 386507161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692670341
    }
]