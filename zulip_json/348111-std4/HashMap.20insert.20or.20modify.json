[
    {
        "content": "<p>I was surprised to not find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Std.HashMap.insertOrModify</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">self.contains</span> <span class=\"n\">a</span> <span class=\"k\">then</span>\n  <span class=\"n\">self.modify</span> <span class=\"n\">a</span> <span class=\"n\">f</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">self.insert</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Is it somewhere? Is it a bad idea?</p>",
        "id": 408368563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702753431
    },
    {
        "content": "<p>It would be nice if there were an interface where you could avoid computing <code>b</code> if it's not needed.</p>\n<p>You could implement <code>insertOrModify</code> with this interface:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Std.HashMap.modify'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>The function <code>f</code> would be passed the original key and, if present, the existing value.</p>\n<p>More generally, it could be <code>f : α → Option β → Option β</code> so that it can decide to remove the value (and I guess when inserting, to not insert).</p>",
        "id": 408369433,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702754184
    },
    {
        "content": "<p>Implementation-wise, it would be nice if it didn't find the element twice. The <code>modify</code> function finds the bucket where the value is stored and modifies it directly, rather than finding the value, updating it, then re-inserting.</p>",
        "id": 408369560,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702754306
    },
    {
        "content": "<p>this is kind of similar to the <code>alter</code> function which exists on <code>RBMap</code></p>",
        "id": 408369712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702754462
    },
    {
        "content": "<p>A use case for having <code>f</code> return an <code>Option</code> is that you can use it to help implement the addition operation for data structures like sparse polynomials, where you don't want to store any <code>0</code>'s</p>",
        "id": 408369791,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702754547
    },
    {
        "content": "<p>I added a slight variation of this to the <code>Trie</code> functions once.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Data.Trie.upsert</span> <span class=\"n\">Lean.Data.Trie</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Lean.Data.Trie</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Lean.Data.Trie</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>It’s a bit like Kyle’s <code>modify'</code>, but with <code>f</code> not taking a key (which is always <code>a</code> anyways, at least in this case).</p>",
        "id": 408373511,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702758713
    },
    {
        "content": "<p>Ok, I'll use my version until a nicer one gets implemented.</p>",
        "id": 408374063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702759422
    },
    {
        "content": "<p>I like the <code>f : α → Option β → Option β</code> signature. Can we bikeshed a name for this? I will likely want to implement some of these soon.</p>",
        "id": 408387326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702772626
    },
    {
        "content": "<p>Haskell precedent is also <a href=\"https://hackage.haskell.org/package/containers-0.4.0.0/docs/Data-Map.html#g:6\"><code>alter</code></a>. While you're at it, you could also have the function look up the element that was previously associated with the key, like Haskell's <code>updateLookupWithKey</code>. I think that would be the most general function operating on a single entry.</p>",
        "id": 408567999,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702891388
    },
    {
        "content": "<p>A downside though is that if you return the original value you can lose linearity. Imagine a HashMap of Arrays and you want to push an element to the end of one of the Arrays. If you return the original value, then the Array will necessarily be copied.</p>",
        "id": 408635832,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702913761
    },
    {
        "content": "<p>Sure. So I guess the <code>alterAndLookup</code> function should exist (it's not a footgun since the loss of linearity is inevitable), but similar functions should not be implemented in terms of it.</p>",
        "id": 408675017,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702927749
    },
    {
        "content": "<p>Of course that's something that should be mentioned in the docstring. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 408676282,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702928372
    },
    {
        "content": "<p>You don't necessarily lose linearity if you replace the value before returning it.  It's worth taking at how <a href=\"https://github.com/leanprover/lean4/blob/67bfa19ce0264f120087dafe8506cf8a2f4a4b60/src/Init/Data/Array/Basic.lean#L120\"><code>Array.modifyM</code></a> achieves this.</p>",
        "id": 408677440,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1702928909
    },
    {
        "content": "<p>I think in the version Kyle describes you necessarily have a copy because the extended array is in the hash map and the unextended array is in the return value and they are being returned as a pair</p>",
        "id": 408726835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702952457
    },
    {
        "content": "<p>If you returned the new value just added to the hashmap, then there would not necessarily need to be a copy although you would be passing back a value which is shared and should probably be discarded if you want to keep using the value linearly</p>",
        "id": 408727131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702952537
    },
    {
        "content": "<p>(FYI: that the haskell version is also called <code>alter</code> is not a coincidence, I borrowed the name and API from haskell maps)</p>",
        "id": 408727302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702952591
    }
]