[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>, your PR yesterday to Std adding lots of lemmas in the <code>Nat</code> namespace is now causing countless errors in mathlib4 of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span><span class=\"n\">Additive</span><span class=\"bp\">/</span><span class=\"n\">PluenneckeRuzsa.lean</span><span class=\"o\">:</span><span class=\"mi\">232</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ambiguous</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">_root_.pow_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.239330</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n\n  <span class=\"n\">Nat.pow_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span>\n</code></pre></div>\n<p>Is there a plan to address this?</p>",
        "id": 367087213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686989120
    },
    {
        "content": "<p>I see that some lemmas in Std/Data/Nat/Lemmas.lean are <code>protected</code> and others aren't (including all the new lemmas from yesterday), but I don't see the rule.</p>",
        "id": 367089132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686989585
    },
    {
        "content": "<p>It seems a bit unfortunate that we're ending up with a parallel development of a bunch of mathematics specialized to Nat again, though I also don't have a better proposal</p>",
        "id": 367090185,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686989861
    },
    {
        "content": "<p>Could we just protect all these lemmas?</p>",
        "id": 367090364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686989893
    },
    {
        "content": "<p>They should have all been protected</p>",
        "id": 367210240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687018516
    },
    {
        "content": "<p>the rule is that anything which has an unnamespaced version in mathlib is protected (and possibly some others where such a lemma is likely)</p>",
        "id": 367210537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687018634
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/157\">https://github.com/leanprover/std4/pull/157</a></p>",
        "id": 367284374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687056170
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 367701380,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687193500
    }
]