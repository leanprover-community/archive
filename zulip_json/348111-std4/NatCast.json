[
    {
        "content": "<p>How can I find out more about the purpose of <code>NatCast</code> and it's helper function <code>Nat.cast</code>?</p>\n<p>I noticed a simp rule in <code>Std.Data.Int.Lemmas</code> rewrites <code>Int.ofNat</code> to <code>Nat.cast</code>, so it seems like it's considered an important canonical  representation (for a ring solver?).  However, the documentation only references <code>AddMonoidWithOne</code> which isn't defined in <code>std</code>.</p>",
        "id": 400634248,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699317166
    },
    {
        "content": "<p>It's in <code>Mathlib</code>.</p>",
        "id": 400641645,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699320950
    },
    {
        "content": "<p>In Mathlib, we want to have a canonical function for the cast from <code>Nat</code> to a (semi)ring (or, more generally, an additive monoid with one).</p>",
        "id": 400641722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699320988
    },
    {
        "content": "<p>So, we define <code>NatCast</code> typeclass and use it.</p>",
        "id": 400641736,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699321001
    },
    {
        "content": "<p>Not sure how much was (or going to be) moved to Std.</p>",
        "id": 400641783,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699321043
    },
    {
        "content": "<p>It might look like Int and Rat are the only potential use cases in Std but there's a bit more use cases behind the scenes. It's too early to tell but I predict a small amount of this will make its way into Std, probably in a backgroundish manner though.</p>",
        "id": 400653495,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1699326924
    },
    {
        "content": "<p>Yeah, I see both it and <code>IntCast</code> are very common in Mathlib.  <code>BitVec</code> also could use it potentially.</p>\n<p>I have pretty mixed feelings about the cast operations.  The Nat coercion in Mathlib 3 was one of the blockers for using Mathlib3 in my projects with Lean 3, but this design seems to avoid the specific issues with that design.  Using it means better compatibility with Mathlib, and I don't object to having this coercion as long as syntax is required.</p>\n<p>I think my main concrete concern is that it means importing <code>Std</code> introduces the coercion <code>Nat -&gt; Int</code> and simp rule for rewriting <code>Int.ofNat</code>.  That seems unexpected given those types are purely in Lean core.   For me, it lead to a bunch of proofs breaking when I upgraded an old project to the latest Lean and Std.  It might be worth either considering this is important enough to put in Lean core or reconsider whether it really belongs in <code>Std</code>.</p>",
        "id": 400658022,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699329364
    },
    {
        "content": "<p>I did not originally want to have this class in std, but it is important for compatibility with mathlib to only have one canonical representation for the function and after discussion we ended up with <code>Nat.cast</code> existing but not being any more than a notation typeclass as far as Std is concerned. (It <em>is</em> a notation typeclass, it enables the up arrow syntax.)</p>",
        "id": 400681941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699342812
    },
    {
        "content": "<p>Originally std would have these lemmas directly about <code>Int.ofNat</code> but the problem was that they did not interoperate well with mathlib lemmas and the simp set. If it is introducing issues relative to Init, we may need to push this class up to core. Do you have some concrete examples of problems / regressions you have observed?</p>",
        "id": 400682236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699343006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span></p>",
        "id": 400682243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699343013
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/287929-mathlib4/topic/Int.2EofNat.20and.20Nat.2ECast/near/314947732\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Int.2EofNat.20and.20Nat.2ECast/near/314947732</a></p>",
        "id": 400682495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699343148
    },
    {
        "content": "<blockquote>\n<p>That seems unexpected given those types are purely in Lean core.</p>\n</blockquote>\n<p>By the way, on this point, std does quite a lot with definitions from <code>Init</code>, in particular adding many lemmas. I think of definitions like <code>Nat</code>, <code>String</code>, <code>List</code> as morally part of std but a large part of the lemma-free fragment of their API is provided in core because of bootstrapping issues. If we ever get to a properly bootstrapped std then it would be in the same library.</p>",
        "id": 400683073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699343467
    },
    {
        "content": "<p>Thanks for the link to the discussion.   The only issue I ran into tried upgrading a library that provided a tactic similar to <code>zify</code> had a lot of Int theorems using <code>Int.ofNat</code>.  I think that's a one time cost though and the conflicts would have been unavoidable due to Std getting all these lemmas.  I do still have some issues, but that's largely due to differences in rewrite rule orientations.</p>\n<p>I think ideally packages will just use <code>Std</code> and so always see these theorems.  If core starts needing <code>Int</code> lemmas then this should be made upstream to core.</p>",
        "id": 400782250,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699376630
    },
    {
        "content": "<p>Note that there was an idea floating around in mathlib to eliminate <code>Nat.cast</code> and <code>Int.cast</code> in favor of a single <code>Algebra.cast</code>; we even started that refactor in lean3, but it got reverted during the port</p>",
        "id": 400787733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699378783
    },
    {
        "content": "<p>The idea is to avoid having both <code>algebraMap Nat Int n</code> and <code>(Nat.cast n : Int)</code> as spellings, because every time you have two spellings of the same thing and fail to declare one canonical, you double the number of lemmas you need</p>",
        "id": 400787811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699378807
    }
]