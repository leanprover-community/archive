[
    {
        "content": "<p>With mathlib open in VS Code, I just jumped to definition to a definition in Std and found that the file (<code>Std.Logic</code>) didn't compile in VS Code any more -- looks like the issue is no autoimplicits. I've been a way for a week so might have missed the memo -- is this expected?</p>",
        "id": 386560289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692694334
    },
    {
        "content": "<p>unfortunately yes</p>",
        "id": 386560385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692694370
    },
    {
        "content": "<p>there was a previous zulip thread about it, but it looks like change might be hard</p>",
        "id": 386560457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692694397
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376826199\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Lake.20server.20uses.20options.20from.20the.20wrong.20package/near/376826199</a></p>",
        "id": 386560670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692694476
    },
    {
        "content": "<p>We could turn back on <code>autoImplicit</code> in mathlib... Just sayin' :-)</p>",
        "id": 386561262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692694668
    },
    {
        "content": "<p>actually this is odd, if I <code>import Lake.Util.Proc</code> then I can see and compile some autoimplicits there (e.g. <code>Lake.logProcCmd</code>) even from a server rooted in mathlib4, even though if I copy-paste that definition into a fresh file it doesn't work in mathlib itself. But <code>Std.Logic</code> is indeed broken</p>",
        "id": 386563394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692695346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386561262\">said</a>:</p>\n<blockquote>\n<p>We could turn back on <code>autoImplicit</code> in mathlib... Just sayin' :-)</p>\n</blockquote>\n<p>Or off in std :-)</p>",
        "id": 386572572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692698761
    },
    {
        "content": "<p>Won't you have the same issue jumping to things in core / aesop / etc too?</p>",
        "id": 386581815,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692701972
    },
    {
        "content": "<p>Yes, that was a joke, sorry.</p>",
        "id": 386597984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692707719
    },
    {
        "content": "<p>But this isn't new with <code>autoImplicit false</code>, we already had this problem with <code>relaxedAutoImplicit</code></p>",
        "id": 386598085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692707757
    },
    {
        "content": "<p>If this is really obnoxious, perhaps we should have a <code>mathlib_preamble</code> command that runs at the top of every file, and use that instead of fiddling with global options that have the wrong scope</p>",
        "id": 386598717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692707939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386581815\">said</a>:</p>\n<blockquote>\n<p>Won't you have the same issue jumping to things in core / aesop / etc too?</p>\n</blockquote>\n<p>Apparently not core / lake, that was the topic of my message above. I don't really understand why, but they are different from other dependencies since lake doesn't build them.</p>",
        "id": 386657197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692723948
    },
    {
        "content": "<p>I am all of a sudden much keener on having autoImplicits back. I still loathe them but this consequence is quite unpleasant.</p>",
        "id": 386657613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692724088
    },
    {
        "content": "<p>this is pretty clearly a lake/server bug though, the same thing would happen for any global option. If we capitulate on this then we will basically be giving up on global (project-specific) options entirely</p>",
        "id": 386661070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692725189
    },
    {
        "content": "<p>Jireh points out via DM that I should say that it was the multi-character autoImplicits which I loathed.</p>",
        "id": 386665457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692726459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386661070\">said</a>:</p>\n<blockquote>\n<p>this is pretty clearly a lake/server bug though</p>\n</blockquote>\n<p>This is not a bug. This is an expected limitation of the current implementation of the Lean server (and the editor integrations). Workspace / Server configurations effect all files opened in the same instance of the editor. Support for multiple workspaces in the same editor in the future is under consideration, but if it comes, it will be an new feature, not a fix.</p>",
        "id": 386722821,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692752440
    },
    {
        "content": "<p>This limitation also extends beyond go-to-def, it is that same reason why, for instance, opening file in a test or example in Lake codebase when editing the whole Lake package will have import failures (because the workspace uses the Lake package configuration not the examples or tests).</p>",
        "id": 386723315,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692752643
    },
    {
        "content": "<p>However, I should note, I certainly would love to support these use cases in the future! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 386723491,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692752711
    },
    {
        "content": "<p>These are very highly desired features! Thank you for considering them!</p>",
        "id": 386730440,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1692756265
    },
    {
        "content": "<p>Haha! The Mathlib tests don't work with Mathlib any more.</p>\n<p>Open up e.g. <code>test/rewrites.lean</code>, and it is full of errors.</p>\n<p>Explanation:</p>\n<ul>\n<li>in CI it is running without turning off <code>autoImplicit</code>, but</li>\n<li>when opened in VSCode <code>autoImplicit</code> is turned off.</li>\n</ul>",
        "id": 386787918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692778384
    },
    {
        "content": "<p>My solution to this would be to turn <code>autoImplicit</code> back on, so perhaps someone else can fix this. :-)</p>",
        "id": 386788023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692778432
    },
    {
        "content": "<p>I thought <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> made a PR to fix this</p>",
        "id": 386801866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692783291
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6597\">#6597</a>, which is already merged</p>",
        "id": 386802081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692783361
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6597\">#6597</a> looks like I didn't touch rewrites for some reason. Maybe it was ok before some other recent change to that file?</p>",
        "id": 386802334,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692783433
    },
    {
        "content": "<p>I would guess the missing piece is setting the flags in CI to ensure it doesn't regress</p>",
        "id": 386803336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692783818
    },
    {
        "content": "<p>I'm not sure what to do really. To make that PR I had to make <code>test</code> a package in the lake file so that I could run lake build on the whole directory. Surely there is a better way to do it. But I'm still a bit surprised <code>lake env lean test/</code> doesn't use the args</p>",
        "id": 386806749,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692785095
    },
    {
        "content": "<p>That doesn't surprise me at all, I think that just means \"set environment variables then run <code>lean test/</code>\"</p>",
        "id": 386808618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692785650
    },
    {
        "content": "<p>If we want to pass args to lean we need to do so with <code>lean -DautoImplicit=false test</code> or similar</p>",
        "id": 386808672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692785672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> , could we ask you the best way to do this? We would like the Mathlib tests to run with the arguments (e.g. autoImplicit=false) that are set in the lakefile?</p>",
        "id": 386809074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692785804
    },
    {
        "content": "<p>I guess this would also mean the tests run with <code>pp.unicode_fun</code> or whatever it's called</p>",
        "id": 386809997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692786132
    },
    {
        "content": "<p>This was part of <a href=\"https://github.com/leanprover/lake/pull/147\">lake#147</a></p>",
        "id": 386903751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692805700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> For now, I would just suggest manually passing the options on CLI in the test runner (i.e., the Makefile).</p>",
        "id": 386930071,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692815347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386722821\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386661070\">said</a>:</p>\n<blockquote>\n<p>this is pretty clearly a lake/server bug though</p>\n</blockquote>\n<p>This is not a bug. This is an expected limitation of the current implementation of the Lean server (and the editor integrations). Workspace / Server configurations effect all files opened in the same instance of the editor. Support for multiple workspaces in the same editor in the future is under consideration, but if it comes, it will be an new feature, not a fix.</p>\n</blockquote>\n<p>I think this is very clearly a bug in the sense \"these features (project-specific option setting, lean server mode) do not work together as would be expected by anyone who understands what they are supposed to do\"</p>",
        "id": 386932295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692816381
    },
    {
        "content": "<p>the fix may indeed require some rearchitecting</p>",
        "id": 386932343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692816406
    },
    {
        "content": "<p>I don't think there was ever a point at which this \"feature\" was considered and rejected as out of scope for the server mode</p>",
        "id": 386932588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692816486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I would like to politely disagree. First, <code>moreServerArgs</code> is not a project-specific option, it is a workspace-global one (workspace configuration is simply inherited from the root package), and this is by design . In many cases, this is what is desired (i.e.,  if a user sets <code>pp.unicode_fun=true</code>, they probably want to see it in dependent packages as well). Second, global server options were originally a design decision of the <code>lean --server</code>, not Lake. If you were to skip Lake entirely and run <code>lean --server -DautoImplicit=false</code>, you would get the same behavior.  Finally, <code>moreLeanArgs</code> is the package-specific option. Where the feature proposed here to be added, it would use those <em>plus</em> <code>moreServerArgs</code> of the workspace to instantiate file workers based on where the package the file resides. However, the Lean server currently does not support per-file-worker arguments, so that cannot be done without a significant change in design.</p>",
        "id": 386982298,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692847553
    },
    {
        "content": "<p>the issue here is not <code>moreServerArgs</code>, it is <code>moreLeanArgs</code> being set per-project</p>",
        "id": 386982492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692847622
    },
    {
        "content": "<p>the reason mathlib sets <code>moreServerArgs</code> is because if you don't set them then mathlib can't even compile itself in the server</p>",
        "id": 386982719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692847732
    },
    {
        "content": "<blockquote>\n<p>However, the Lean server currently does not support per-file-worker arguments, so that cannot be done without a significant change in design.</p>\n</blockquote>\n<p>aka \"it's a bug but it will be hard to fix without re-architecting\"</p>",
        "id": 386982941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692847809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386982941\">said</a>:</p>\n<blockquote>\n<p>aka \"it's a bug but it will be hard to fix without re-architecting\"</p>\n</blockquote>\n<p>An unsupported feature is not a bug.</p>",
        "id": 386983032,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692847858
    },
    {
        "content": "<p>It's a feature that already exists and was not implemented correctly</p>",
        "id": 386983117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692847891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386982719\">said</a>:</p>\n<blockquote>\n<p>the reason mathlib sets <code>moreServerArgs</code> is because if you don't set them then mathlib can't even compile itself in the server</p>\n</blockquote>\n<p>What do you mean by this? Mathlib would certainly compile without <code>-DautoImplicit=false</code>.</p>",
        "id": 386983126,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692847894
    },
    {
        "content": "<p>If mathlib's lakefile was to set <code>moreLeanArgs</code> but not <code>moreServerArgs</code> then you wouldn't be able to open any file, and the title of this topic would be \"mathlib doesn't work within mathlib anymore\" instead</p>",
        "id": 386983287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692847947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386983117\">said</a>:</p>\n<blockquote>\n<p>It's a feature that already exists and was not implemented correctly</p>\n</blockquote>\n<p><code>moreLeanArgs</code> explicitly states that it only effects <code>lean</code> compilation (not interactive editing)</p>",
        "id": 386983303,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692847950
    },
    {
        "content": "<p>Options are not optional for lean. If you get them wrong everything breaks. So I do not accept this reasoning of \"it's just not an implemented feature\", this is just wrong behavior. If we didn't want to handle this we shouldn't have added project-specific options</p>",
        "id": 386983630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386983126\">said</a>:</p>\n<blockquote>\n<p>What do you mean by this? Mathlib would certainly compile without <code>-DautoImplicit=false</code>.</p>\n</blockquote>\n<p>Maybe this one, but if you turn off <code>-Dpp.unicode.fun=true</code> then tests break</p>",
        "id": 386983830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386983287\">said</a>:</p>\n<blockquote>\n<p>If mathlib's lakefile was to set <code>moreLeanArgs</code> but not <code>moreServerArgs</code> then you wouldn't be able to open any file</p>\n</blockquote>\n<p>Why? None of Mathlib's server configuration options <code>pp.unicode.fun=true</code>,<code>autoImplicit=false</code>,<code>relazedAutoImplicit=false</code> should have this effect (one is meant to be purely visual, and the other two just disable features, meaning that the code they support is a strict subset of the default supported code).</p>",
        "id": 386983831,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692848143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386983830\">said</a>:</p>\n<blockquote>\n<p>Maybe this one, but if you turn off <code>-Dpp.unicode.fun=true</code> then tests break</p>\n</blockquote>\n<p>True, though I could argue that is a bug with <code>#guard_msgs</code> being dependent on visual customization options.</p>",
        "id": 386983956,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692848186
    },
    {
        "content": "<p>Hardly. The fact is, all options can potentially change behavior, if only by changing what the result of <code>getOption</code> returns, so in general only the user (or package maintainer) can make the call on whether adding/removing it is safe for the project</p>",
        "id": 386984167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848271
    },
    {
        "content": "<p>anyway we wouldn't be having this discussion if turning these options on / off was harmless</p>",
        "id": 386984382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848342
    },
    {
        "content": "<p>it <em>has</em> broken code due to its misapplication</p>",
        "id": 386984444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848366
    },
    {
        "content": "<p>and there is currently no way to set options to avoid the breakage</p>",
        "id": 386984517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848395
    },
    {
        "content": "<p>other than just not setting options at all, which again is just saying the feature is broken</p>",
        "id": 386984608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386984167\">said</a>:</p>\n<blockquote>\n<p>general only the user (or package maintainer) can make the call on whether adding/removing it is safe for the project</p>\n</blockquote>\n<p>Yes, this a decision by the package manager to determine which set of options they choose to <em>support</em>.</p>",
        "id": 386984641,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692848425
    },
    {
        "content": "<p>I certainly think users should ideally be able to choose workspace-wide presentation options. I do not think all options should be package-specific.</p>",
        "id": 386984956,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692848525
    },
    {
        "content": "<p>Sure. These are supposed to be package-specific options though</p>",
        "id": 386985002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848543
    },
    {
        "content": "<p>no one is interested in workspace-wide options here</p>",
        "id": 386985038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848557
    },
    {
        "content": "<p>those are useful for sure, but most packages will be in no position to set them</p>",
        "id": 386985094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386983830\">said</a>:</p>\n<blockquote>\n<p>Maybe this one, but if you turn off <code>-Dpp.unicode.fun=true</code> then tests break</p>\n</blockquote>\n<p>Also, this does not actually currently break tests because the tests that need it currently set this at the top of the file (or otherwise they would break the CI which does not set this).</p>",
        "id": 386985096,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692848580
    },
    {
        "content": "<p>yes, that's the workaround. Your point?</p>",
        "id": 386985234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848621
    },
    {
        "content": "<p>it's still broken behavior</p>",
        "id": 386985285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386985038\">said</a>:</p>\n<blockquote>\n<p>no one is interested in workspace-wide options here</p>\n</blockquote>\n<p>At the very least, I am. That is why I added <code>moreServerArgs</code> in the first place.</p>",
        "id": 386985299,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692848642
    },
    {
        "content": "<p>I mean, they aren't the cause of the issue here</p>",
        "id": 386985531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848713
    },
    {
        "content": "<p>They kind of indirectly are, because mathlib sets <code>moreServerArgs</code> as well as <code>moreLeanArgs</code>, but it only does that because the server doesn't use project-specific options correctly</p>",
        "id": 386985710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848771
    },
    {
        "content": "<p>I'd rather talk about how we fix the root cause, and pass project-specific options to the server</p>",
        "id": 386986013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692848876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386985285\">said</a>:</p>\n<blockquote>\n<p>it's still broken behavior</p>\n</blockquote>\n<p>Okay, I get the feeling we are not going to come to an agreement here. You and I fundamentally disagree on what should be the expected behavior of these programs, and that is fine. I just wanted to clarify that the current behavior is expected and intended from the developer's perspective.</p>",
        "id": 386986488,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692849015
    },
    {
        "content": "<p>it's intended for opening std from mathlib or vice versa to break?</p>",
        "id": 386986585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849050
    },
    {
        "content": "<p>It might be <em>expected</em>, but <em>intended</em> seems a bit unlikely</p>",
        "id": 386986655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, if one globally disables a feature the other one relies on being enabled.</p>",
        "id": 386986733,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692849104
    },
    {
        "content": "<p>okay, let's say no one sets <code>moreServerArgs</code>. No global options here. Only now you can't even open mathlib files in mathlib</p>",
        "id": 386986906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Again, I am very confused about this assertion, why does this break mathlib? That does seem like a bug somewhere since nothing I know of should depend on those arguments being set.</p>",
        "id": 386987059,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692849201
    },
    {
        "content": "<p>sigh. The details of the options aren't that important here, let's suppose <code>autoImplicit</code> was off by default and enabled by mathlib if it helps</p>",
        "id": 386987240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849252
    },
    {
        "content": "<p>it's just as unacceptable for mathlib to incorrectly accept code as to incorrectly reject code</p>",
        "id": 386987298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> There are many cases were the server accepts (or rejects) code that would not be if the module is compiled. (For instance, <code>#eval</code>'ing an <code>extern</code> definition).</p>",
        "id": 386987890,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692849422
    },
    {
        "content": "<p>Honestly, setting <code>-DautoImplicit=false</code> in the args to be used by CI isn't even that important. It is <em>primarily</em> used for its effect on the server</p>",
        "id": 386987924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849435
    },
    {
        "content": "<p>but it needs to be an effect on the server <em>when it is compiling a file from mathlib</em> and not otherwise</p>",
        "id": 386987983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, I agree that this is nice to have. I am also confident it can be implemented. My only goal was to make clear that this is known to be currently unsupported.</p>",
        "id": 386988490,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692849599
    },
    {
        "content": "<p>Yes I know you know that the bug exists</p>",
        "id": 386988596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849614
    },
    {
        "content": "<p>I would like us to fix it though</p>",
        "id": 386988666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849632
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 386988804,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692849668
    },
    {
        "content": "<p>because more people are noticing, and it really does degrade the cross-project go to def experience</p>",
        "id": 386988820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849674
    },
    {
        "content": "<p>as far as lake changes are concerned, I do think there is one place it can help, namely to have a <code>moreServerArgs</code> field in <code>LeanConfig</code></p>",
        "id": 386989336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692849809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This feature requires the server to figure out what package each file belongs to, get that information from Lake and use it to configure the workers.  That requires tighter integration between Lean and Lake than is currently supported. So, this will require rework. Whether that is the highest priority is something that has to be internally discussed. However, if you want to make an issue about it on the lean 4 repo and gather support, feel free to do so!</p>",
        "id": 386990172,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692850071
    },
    {
        "content": "<p>I am willing to write a patch</p>",
        "id": 386990251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692850086
    },
    {
        "content": "<p>the simpler implementation I am thinking of would be to have the server ask lake for the lean options for a given file</p>",
        "id": 386990445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692850156
    },
    {
        "content": "<p>although it might be hampered by the issue where lake takes 1 second to do anything</p>",
        "id": 386990729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692850237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/386990729\">said</a>:</p>\n<blockquote>\n<p>although it might be hampered by the issue where lake takes 1 second to do anything</p>\n</blockquote>\n<p>That is a performance bug that I am working on addressing. <a href=\"https://github.com/leanprover/lean4/pull/2444\">lean4#2444</a> is one step in that direction.</p>",
        "id": 386991125,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692850365
    },
    {
        "content": "<p>And also a great example of something that could be considered higher priority than this feature. To be clear, <strong>I want to add the feature mentioned in this thread.</strong> It just is not my current highest priority.</p>",
        "id": 386991460,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692850475
    },
    {
        "content": "<p>Another stance on the issue, which would solve (or at least sidestep) this problem without adding more logic and coupling to our tools, could be this:<br>\nit's not desirable of the meaning of a lean file is unclear without consulting additional information elsewhere. This makes it harder for humans to read it, or to copy it into separate projects etc.<br>\nSo setting options that, in a way, change how the language work elsewhere isn't great.<br>\nThe conclusion would be that every file should be explicit about every deviation from the standard lean settings!<br>\nYes, this would mean that every file in mathlib4, would turn autoImplicits off. But as a reader of files, I'd actually appreciate that! Else switching between projects I have to remember which settings are where.<br>\nIf the boiler plate at the beginning of the files gets too big, one could probably define and use a <code>mathlib_options</code> macro (as was suggested before).<br>\nAt least until per-package-options are implemented, this might be the lesser evil, compared to not being able to open std files in a mathlib workspace?<br>\n(This opinion is influenced by best practices around Haskell language extensions, which are quite like these language-changing options, and per-package configuration in the build tool is possible, but not encouraged.)</p>",
        "id": 387009618,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692860958
    },
    {
        "content": "<p>this was how lean 3 worked BTW</p>",
        "id": 387009670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692860994
    },
    {
        "content": "<p>Was it bad?</p>",
        "id": 387009734,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692861015
    },
    {
        "content": "<p>I think it's fair to say there was an unfilled niche</p>",
        "id": 387009778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692861039
    },
    {
        "content": "<p>mathlib still scrambles sometimes to determine where \"the first file\" is so that it can shove a bunch of initialization in there</p>",
        "id": 387009832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692861072
    },
    {
        "content": "<p>in any case I don't like the idea of using implementation difficulties as a justification here</p>",
        "id": 387010250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692861300
    },
    {
        "content": "<p>I'd say the resulting implementation simplicity (no urgent need for per-package-configuration options) is just a nice side-benefit, and the main justification would be ‚Äúexplicit is better than implicit‚Äù and maybe also easy portability of files between projects.</p>",
        "id": 387010970,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692861688
    },
    {
        "content": "<p>your suggestion wouldn't exactly make portability easier since the target project doesn't have <code>mathlib_options</code></p>",
        "id": 387011094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692861739
    },
    {
        "content": "<p>I'm not sure it would be any more explicit either, you still have to look up the definition of <code>mathlib_options</code> to find out what the settings are</p>",
        "id": 387011594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692861975
    },
    {
        "content": "<p>My (primary) suggestion is to write out the option explicitly, which (certainly as long as it‚Äôs only one option) I‚Äôd prefer over the macro.</p>\n<p>The macro still has the advantage of being explicit in ‚Äúsomething changes‚Äù and offering the user a tooltip to find out more. And it would also work in projects that import mathlib, wouldn‚Äôt it?</p>",
        "id": 387018077,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692865070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/348111-std4/topic/std.20doesn't.20work.20within.20mathlib.20any.20more/near/387009618\">said</a>:</p>\n<blockquote>\n<p>At least until per-package-options are implemented, this might be the lesser evil, compared to not being able to open std files in a mathlib workspace?</p>\n</blockquote>\n<p>I agree this seems like the best solution (combined with a linter to enforce it be used in every file), assuming there are enough people impacted by not being able to open std files.</p>",
        "id": 387018544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692865251
    },
    {
        "content": "<p>(to be clear, I am not suggesting we enforce disable autoImplicit; but that we enforce that enabling it be spelt <code>mathlib_options; set_option autoImplicit true</code>)</p>",
        "id": 387020831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692866190
    },
    {
        "content": "<p>In any case, I put up an implementation at <a href=\"https://github.com/leanprover/lean4/pull/2456\">lean4#2456</a></p>",
        "id": 387021808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692866631
    },
    {
        "content": "<p>Is there progress on this? It came up in LftCM that Std is full of errors if you open it from mathlib4</p>",
        "id": 389201388,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693923586
    },
    {
        "content": "<p>Or is the problem that it's full of errors if you open it from LftCM?</p>",
        "id": 389207840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693925181
    },
    {
        "content": "<p>This was for mathlib4, opened from my clone of mathlib4 not my clone of LftCM</p>",
        "id": 389210937,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693925967
    },
    {
        "content": "<p>it's blocked on the RFC <a href=\"https://github.com/leanprover/lean4/pull/2455\">lean4#2455</a>. If you want to see progress on it please upvote / comment on the thread because I don't know any other way to move this stuff forward</p>",
        "id": 389231144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693931416
    },
    {
        "content": "<p>Or poke <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> since I think he's the one in charge of this part of the code (there is some server code too, not sure who owns that right now cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> )</p>",
        "id": 389231503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693931540
    },
    {
        "content": "<p>Yes, this is slightly awkward timing with server ownership being moved from me to Marc. Please bear with us. As a workaround, does opening it as a separate workspace root work (I didn't check if that was discussed before)?</p>",
        "id": 389232712,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693931891
    },
    {
        "content": "<p>it does</p>",
        "id": 389233196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693932028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The PR still has some problems that need to be addressed (see <a href=\"https://github.com/leanprover/lean4/pull/2456#discussion_r1305821308\">my comment</a>). That is why nothing has happened lately on it from my end.</p>",
        "id": 389255598,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693938272
    }
]