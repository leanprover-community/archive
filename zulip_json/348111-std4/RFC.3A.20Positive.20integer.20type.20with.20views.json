[
    {
        "content": "<p>I have developed a positive integer type that can function simultaneously as:</p>\n<ul>\n<li>A subtype of <code>Nat</code>, so that basic operations can benefit from special handling of <code>Nat</code>.</li>\n<li>An inductive type with one base and one recursive constructor:  <code>one = 1</code> and  <code>succ x = x+1</code>.</li>\n<li>An inductive type with one base and two recursive constructors:<code>one = 1</code>, <code>bit0 x = 2*x</code>, <code>bit1 x = 2*x+1</code>.</li>\n</ul>\n<p>This is an extension of <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>'s example of type views <a href=\"https://github.com/leanprover/lean4/blob/d37bbf4292c72798afdff8bf5488df09193fde58/tests/lean/run/posView.lean\">here</a> (following an old <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Error.3A.20unknown.20free.20variable.20\" title=\"_uniq.2E402\">zulip discussion</a>).</p>\n<p>Automation for type views doesn't exist yet but it can be done once we have some use cases, such as this!</p>\n<p>The RFC is currently available from the <a href=\"https://github.com/fgdorais/std4/tree/pos\"><code>pos</code> branch</a> my personal Std4 fork: <a href=\"https://github.com/fgdorais/std4/blob/pos/Std/Data/Pos/Basic.lean\">https://github.com/fgdorais/std4/blob/pos/Std/Data/Pos/Basic.lean</a></p>\n<p>If there is support for this, I will turn it into a PR for Std4.</p>",
        "id": 375869587,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689559829
    },
    {
        "content": "<p>For what it's worth, the code generated for <code>Pos.log2</code> and <code>Pos.log2TR</code> is just as good as what I would generate manually (without knowing about GMP/BigNum support).</p>",
        "id": 375872928,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689561513
    },
    {
        "content": "<p>Note that <code>Mathlib</code> uses name <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat#doc\">docs#PNat</a> for a similar type.</p>",
        "id": 375876705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689563583
    },
    {
        "content": "<p>Recorded! But doesn't  <code>PNat</code> that suggest just the basic subtype structure without the additional views?</p>",
        "id": 375881476,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689566226
    },
    {
        "content": "<p>Also <code>Pos</code> does sometimes suggest \"position\", as in <code>String.Pos</code>, which is another naming issue.</p>",
        "id": 375881713,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689566343
    },
    {
        "content": "<p>PS: This is partly from old personal Lean4 stuff prior to Mathlib4 and Std4; my naming convention doesn't fit but I will fix that before submitting a PR.</p>",
        "id": 375883131,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689567047
    },
    {
        "content": "<p>What about <code>PInt</code> or <code>PosInt</code>? Added with an easier coercion to <code>Int</code>?</p>",
        "id": 375883893,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689567561
    },
    {
        "content": "<p>What do the views (as custom data structures) add compared to custom recursion/induction principles?</p>",
        "id": 375885705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689568620
    },
    {
        "content": "<p>I'm not sure what you mean? They _are_ the custom recursion/induction principles! However, they are data oriented by design. The idea is to write code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lg2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x.toBinView</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bit0</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lg2</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bit1</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lg2</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Right now this works provided the helper lemmas are supplied but that could be automated quite easily.</p>",
        "id": 375887518,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689569553
    }
]