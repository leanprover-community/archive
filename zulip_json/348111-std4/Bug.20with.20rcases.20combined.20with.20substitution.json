[
    {
        "content": "<p>It looks like there's a bug when using <code>rcases</code> with substitution, see the following execution. The metavariable (should be) assigned but isn't shown in the pretty printer until later on.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">box_def</span> <span class=\"o\">:</span> <span class=\"n\">box</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">box_def</span> <span class=\"bp\">▸</span> <span class=\"n\">box_def</span> <span class=\"k\">with</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- a : ?m ⊢ 1 = 1</span>\n  <span class=\"k\">show</span> <span class=\"n\">_</span> <span class=\"c1\">-- seems like putting most tactics here also causes the display to fix itself</span>\n  <span class=\"c1\">-- a : 1 = 1 ⊢ 1 = 1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 369048260,
        "sender_full_name": "Grant Barkley",
        "timestamp": 1687566730
    },
    {
        "content": "<p>May be a missing <code>instantiateMVars</code></p>",
        "id": 369048382,
        "sender_full_name": "Grant Barkley",
        "timestamp": 1687566804
    },
    {
        "content": "<p>I find this pretty printing behavior to be weird on its own (and note that <code>skip</code> in place of <code>show _</code> keeps the type as <code>?m</code>).</p>\n<p>Some more examples more localized to <code>rcases</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">box_def</span> <span class=\"bp\">▸</span> <span class=\"n\">box_def</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"c1\">-- rcases tactic failed: x✝ : ?m.4286 is not an inductive datatype</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">box_def</span> <span class=\"bp\">▸</span> <span class=\"n\">box_def</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"c1\">-- ok</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 369049341,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687567251
    },
    {
        "content": "<p><code>rcases</code> has a <code>whnfD</code>, so it should be instantiating the metavariables it needs to to keep that first error from happening. That makes me wonder if <code>rcases</code> is missing a <code>synthesizeSyntheticMVars</code>?</p>",
        "id": 369049518,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687567329
    },
    {
        "content": "<p>Yeah, this suggests it has to do with the fact that <code>\\triangle</code> postpones:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"synthMVars \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- Term.synthesizeSyntheticMVars isn't enough</span>\n  <span class=\"n\">Term.synthesizeSyntheticMVarsNoPostponing</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">box_def</span> <span class=\"bp\">▸</span> <span class=\"n\">box_def</span> <span class=\"k\">with</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- a : ?m</span>\n  <span class=\"n\">synthMVars</span>\n  <span class=\"c1\">-- a : 1 = 1</span>\n</code></pre></div>",
        "id": 369050058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687567565
    }
]