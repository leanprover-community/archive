[
    {
        "content": "<p>I don't really buy that we would save by factoring <code>a.get!</code> into <code>a.get?.get!</code>. Rust uses <code>a[i]</code> instead of <code>a.get(i).unwrap()</code> even though the latter functions are pretty much designed for the purpose and this is zero overhead</p>",
        "id": 370281477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687929874
    },
    {
        "content": "<p>These are just incredibly common functions, such that a shorthand is warranted</p>",
        "id": 370281548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687929912
    },
    {
        "content": "<p>(Even if we ignore the fact that <code>a.get?.get!</code> is <em>not</em> zero cost in lean)</p>",
        "id": 370281605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687929944
    },
    {
        "content": "<p>RE: <code>get</code>/<code>getD</code>/<code>get!</code>/<code>get?</code> all over the standard collections APIs -- do we think it's possible to get a zero-cost implementation of <code>Partial</code>, where values are not boxed into a thunk? e.g. the runtime representation of <code>Partial A h</code> is the same as <code>A</code> if <code>h</code> is true, and undefined if <code>h</code> is not true</p>",
        "id": 370281606,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687929945
    },
    {
        "content": "<p>To me, <code>(some operation).get.!</code> reads just as fine as <code>(some operation).get!</code>, and cuts down on the size of the API that we need to maintain.</p>",
        "id": 370281746,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687930007
    },
    {
        "content": "<p>The problem is that you would have to evaluate the expression to get something of type <code>A</code></p>",
        "id": 370281778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687930021
    },
    {
        "content": "<p>but if it's undefined then this could cause UB</p>",
        "id": 370281809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687930030
    },
    {
        "content": "<p>so you have to leave it unevaluated, hence it's a thunk</p>",
        "id": 370281868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687930059
    },
    {
        "content": "<p>you can't evaluate it until you receive evidence that h is actually true</p>",
        "id": 370281893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687930076
    },
    {
        "content": "<p>Yeah, I guess the compiler would have to inline whatever produces the <code>Partial</code></p>",
        "id": 370282281,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687930205
    },
    {
        "content": "<p>in order to then optimize the box(0) application away</p>",
        "id": 370282333,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687930227
    },
    {
        "content": "<p>So I guess the question then is whether we could get compiler support for optimizing eliminators of <code>Partial</code>, which seems substantially less likely</p>",
        "id": 370282460,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687930277
    },
    {
        "content": "<p>that almost certainly already exists, assuming <code>Partial</code> = <code>Option</code></p>",
        "id": 370282644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687930352
    },
    {
        "content": "<p>you just have to inline enough stuff to make it possible to do</p>",
        "id": 370282701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687930371
    },
    {
        "content": "<p>ah, hm</p>",
        "id": 370282807,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687930405
    },
    {
        "content": "<p>Let me see if I can get a <code>Partial</code> version of <code>Array.get</code> to produce identical bytecode</p>",
        "id": 370282975,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687930450
    },
    {
        "content": "<p>I guess it almost makes more sense to have an API for producing <code>Fin n</code>s by panicking on out of bounds <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 370284066,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687930852
    },
    {
        "content": "<p>that's fine, although you can't define it for n = 0</p>",
        "id": 370284155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687930883
    },
    {
        "content": "<p>which makes it a lot less ergonomic than alternatives</p>",
        "id": 370284202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687930906
    },
    {
        "content": "<p>that's an ergonomic issue of panic! generally, where there's no easy way to say that you want to escape to a farther out context which is <code>Inhabited</code>. the only solution I have to that ergonomics issue would be to start putting lots of stuff in an <code>Except</code> monad instead of panicking.</p>",
        "id": 370284756,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687931096
    },
    {
        "content": "<p><code>get! : [Inhabited A] -&gt; Except E A -&gt; A</code></p>",
        "id": 370284923,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687931148
    },
    {
        "content": "<p>is that supposed to be returning something of type <code>A</code>?</p>",
        "id": 370285196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687931257
    },
    {
        "content": "<p>maybe add a <code>[ToString E]</code> parameter to put in the panic message</p>",
        "id": 370285336,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687931299
    },
    {
        "content": "<p>maybe we have a <code>ifOk : [IfOk E A B] -&gt; A -&gt; Except E B</code> API for decidably failing coercions</p>",
        "id": 370285670,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687931406
    },
    {
        "content": "<p><code>get! &lt;| do return A.get (←ifOk 0)</code> does start to look absurd though :)</p>",
        "id": 370285749,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687931441
    },
    {
        "content": "<p>yeah, I'm not seeing the ergonomic gain</p>",
        "id": 370285824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687931471
    },
    {
        "content": "<p>I've definitely written code that would be cleaner with these abstractions, and not even niche code. But for small use cases it doesn't make sense.</p>",
        "id": 370286302,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687931621
    },
    {
        "content": "<p>Idk. I will push through the repetitive API for now</p>",
        "id": 370286420,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687931646
    },
    {
        "content": "<p>Honestly, textbook rust just opens <code>Except String</code> monad contexts everywhere and uses <code>?</code> as a synonym for <code>.←</code>.  I feel somewhat justified in doing the same in Lean.</p>",
        "id": 370289970,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687932838
    },
    {
        "content": "<p>okay, but that's not the API in question</p>",
        "id": 370291074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687933149
    },
    {
        "content": "<p>Now is not a good time for redesigning <code>Array</code>. The API exists, we are just making the dependent version</p>",
        "id": 370291561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687933289
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> will revisit this at some point</p>",
        "id": 370291742,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687933357
    },
    {
        "content": "<p>Sounds to me that the general end goal here is a more seamless interface for \"safe laziness\"? I've been wondering about that for a while too.</p>",
        "id": 370358147,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687946334
    },
    {
        "content": "<p>Not laziness but just better interfaces for handling quotients and partials</p>",
        "id": 370961720,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688087464
    },
    {
        "content": "<p>I believe I had a proposal once for unified ?!D but I wouldn't know where to even start looking for it...</p>",
        "id": 371030194,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688110204
    }
]