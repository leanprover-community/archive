[
    {
        "content": "<p>Is <code>Equiv</code> a reasonable Std addition? I'm working on incorporating SciLean's <a href=\"https://github.com/lecopivo/SciLean/blob/master/SciLean/Mathlib/Data/Enumtype.lean\"><code>Enumtype</code></a> and having Equiv would make it a good deal cleaner. Seems highly useful in programming contexts.</p>",
        "id": 384721565,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692008248
    },
    {
        "content": "<p>Would <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunLike#doc\">docs#FunLike</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EquivLike#doc\">docs#EquivLike</a> move with it?</p>",
        "id": 384755002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692015071
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Embedding#doc\">docs#Function.Embedding</a> ?</p>",
        "id": 384755047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692015079
    },
    {
        "content": "<p>I think <code>Equiv</code> would be good in Std. It's useful to transport structure and I also use it a lot to manipulate encodings (I guess that's what <code>Enumtype</code> is about).</p>\n<p><code>FunLike</code> and <code>EquivLike</code> are interesting abstractions but I don't see the necessity to move these at the same time.  I think<code>Function.Embedding</code> doesn't need to move at all and the main connection with <code>Equiv</code> is noncomputable.</p>",
        "id": 384816383,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692026573
    },
    {
        "content": "<p>If we don't move <code>FunLike</code>, then now std and mathlib have different ways to write function application, and simp lemmas are going to be a mess</p>",
        "id": 384818206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692026853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/348111-std4/topic/Equiv/near/384816383\">said</a>:</p>\n<blockquote>\n<p>I think<code>Function.Embedding</code> doesn't need to move at all and the main connection with <code>Equiv</code> is noncomputable.</p>\n</blockquote>\n<p>The main connection in my mind is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.toEmbedding#doc\">docs#Equiv.toEmbedding</a>, which is definitely computable...</p>",
        "id": 384818430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692026884
    },
    {
        "content": "<p>I don't think it's necessary for <code>Equiv</code> to have function application API in Std, that can stay in Mathlib. That's not the kind of thing that's useful for programming.</p>",
        "id": 384819542,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692027081
    },
    {
        "content": "<p>I think the problem here is that every <code>e.toFun x</code> is \"the wrong way to write it\" according to Mathlib. Without moving <code>FunLike</code>, you can't talk about <code>e.toFun x</code> and still have these lemma ergonomic in Mathlib. Hopefully I'm wrong here....?</p>",
        "id": 384820336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692027212
    },
    {
        "content": "<p>I think I understand the issue. It sounds like something that would need a surgical division.</p>",
        "id": 384825130,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692028082
    },
    {
        "content": "<p>Scott's summary is exactly the point I was trying to make</p>",
        "id": 384826296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692028318
    },
    {
        "content": "<p>Two reasonable options in my mind are:</p>\n<ul>\n<li>Move <code>FunLike</code> too. This means you also need <code>Function.Injective</code> to move, which I can see being undesirable</li>\n<li>Create a <code>PreFunlike</code> in Std which provide <code>PreFunLike.coe</code> (and no injectivity field), and then have <code>FunLike</code> in mathlib extend it. All the mathlib lemmas would still be about <code>PreFunLike.coe</code>, so the issue Scott describes wouldn't occur (or call it <code>FunLike</code> and <code>FaithfulFunLike</code>)</li>\n</ul>",
        "id": 384827918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692028675
    },
    {
        "content": "<p>In essence, the purpose of <code>PreFunLike</code> is just to restore the Lean3 <code>coeFn</code> behavior where all function coercions used the same head symbol...</p>",
        "id": 384829534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692028956
    },
    {
        "content": "<p>After taking a look at Mathlib's <code>Equiv</code> API and comparing with my own version, I see that they are wildly different and incompatible in many ways. I think it even makes sense to have two <code>Equiv</code> types with a bridge to connect the two when necessary!</p>\n<p>To see the incompatibility from the other point of view: for my main application of <code>Equiv</code>, the forward function is actually implemented by an <code>Array</code> and having a coercion to function would be very annoying! The important feature of <code>Equiv</code> for me is composability, the forward and reverse functions are \"implementation details\".</p>",
        "id": 384832696,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692029558
    },
    {
        "content": "<p>It's probably also worth noting that <code>Enumtype</code> already exists in some form in mathlib as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinEnum#doc\">docs#FinEnum</a></p>",
        "id": 384832968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692029616
    },
    {
        "content": "<p>Perhaps we should refactor it there in mathlib first before attempting to move it to Std4</p>",
        "id": 384833183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692029648
    },
    {
        "content": "<p>Maybe it's easier to approach the issue differently. It's not about moving <code>Equiv</code> from Mathlib to Std, it's that both Mathlib and Std have some need for an <code>Equiv</code> type. The two types may as well be the same for binary compatibility. However, there is no need for the two API to be the same. That is not sustainable. We can't think of Std as \"the part of Mathlib that's not math\".</p>\n<p>I think it makes sense to proceed this way:</p>\n<ol>\n<li>Move the <code>Equiv</code> type (only) to Std.</li>\n<li>Develop a <code>Std.Equiv</code> API, probably borrowing lots of code from Mathlib but with no aim for compatibility. In particular no <code>≃</code>, <code>↪</code>, <code>↑</code>.</li>\n<li>Reimplement some parts of the Mathlib <code>Equiv</code> API using <code>Std.Equiv</code> to avoid code duplication while maintaining Mathlib's API as-is.</li>\n</ol>\n<p>That does mean that some things will have different names in Std and Mathlib but that's bound to happen anyway.</p>",
        "id": 384843471,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692031885
    },
    {
        "content": "<p>I don't see why we wouldn't make the API the same given we have the option to</p>",
        "id": 384843920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692031991
    },
    {
        "content": "<p>If Std and mathlib disagree on how to write function application that's a pretty major disagreement. And if your <code>Equiv</code> doesn't use function application then I'm not sure how it's used at all...</p>",
        "id": 384844103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692032023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It's not a disagreement about how to write function application: there simply is no need for the coercion to function in Std, it's not a useful feature.</p>",
        "id": 384844646,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692032148
    },
    {
        "content": "<p>Well that's a disagreement about whether to write <code>e.toFun x</code> or <code>e x</code></p>",
        "id": 384844934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692032207
    },
    {
        "content": "<p>The equivs are composed to construct more complex equivs without fussing about implementation details.</p>",
        "id": 384844949,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692032210
    },
    {
        "content": "<p>Are you saying <code>toFun</code> is not part of the API at all?</p>",
        "id": 384845056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692032226
    },
    {
        "content": "<p>It is, but it's an implementation detail.</p>",
        "id": 384845157,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692032249
    },
    {
        "content": "<p>For me, the equiv is a way not to worry about the functions.</p>",
        "id": 384845304,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692032281
    },
    {
        "content": "<p>What _is_ in the API then?</p>",
        "id": 384845437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692032302
    },
    {
        "content": "<p>Groupoid laws.</p>",
        "id": 384845719,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692032362
    },
    {
        "content": "<p>And transport defs.</p>",
        "id": 384846200,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692032450
    },
    {
        "content": "<p>Do you envisage having APi that says <code>List X</code> is equivalent to <code>List Y</code> when <code>X</code> is equivalent to <code>Y</code>? If so, would Std contain the lemma about how that acts on <code>nil</code> / <code>cons</code>?</p>",
        "id": 384846350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692032486
    },
    {
        "content": "<p>I have that equivalence in my API, I never needed to know it preserves operations. That would be an isomorphism, not just an equivalence.</p>",
        "id": 384847154,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692032670
    },
    {
        "content": "<p>I think I'm missing the application here. If all you ever do with equivs is construct more equivs with them, what's the computational application that justifies them being data?</p>",
        "id": 384849143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692033099
    },
    {
        "content": "<p>Here's an example where <code>Equiv</code> comes in extremely handy. Some of my students are doing research on finite automata. The more efficient implementations of transitions and reachability algorithms use Boolean matrix multiplication. These matrix algorithms are implemented using arrays, but the machine states are typically more complex, with data about how the machine was constructed or the purpose of each state. To connect these two, I need an <code>Equiv</code> from my machine's state type to <code>Fin n</code> (say). How that <code>Equiv</code> works is irrelevant. There's a transport function that uses that <code>Equiv</code> so I can use matrix multiplication for calculation. The correctness proofs do have to fiddle with the forward and reverse functions but they only need to know that they are inverses of each other, so the <code>Equiv</code> is really a black box.</p>",
        "id": 384852472,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692033846
    },
    {
        "content": "<p>hm, this spawned a lot of conversation...</p>\n<p>I'm not opposed to refactoring <code>FinEnum</code>; I think it was probably designed before any programming usage was intended. But if <code>FinEnum</code> uses <code>Equiv</code>, I'd still want to move <code>Equiv</code> into Std.</p>\n<p>We've discussed moving <code>FunLike</code> before. But I am guessing we'd want to refactor out the injectivity field as Eric said.</p>",
        "id": 384856358,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692034644
    },
    {
        "content": "<p>I think a lot of my confusion would be resolved by seeing actual code written against the current <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv#doc\">docs#Equiv</a> that demonstrates a practical situation where application is irrelevant. It sounds like <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>'s <code>Equiv</code> would have a strict subset of the API it has in mathlib4, so that demo could be built without first extracting to Std4.</p>",
        "id": 384857141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692034805
    },
    {
        "content": "<p><code>FinEnum</code> as it currently exists in mathlib is probably ok computationally for the typeclass, but all the instances are awful as they go back and forth via lists. A complete redesign along the lines of <code>Enumtype</code> certainly seems like a reasonable choice.</p>",
        "id": 384857514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692034890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/Equiv/near/384857141\">said</a>:</p>\n<blockquote>\n<p>seeing actual code written against the current <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv#doc\">docs#Equiv</a> that demonstrates a practical situation where application is irrelevant.</p>\n</blockquote>\n<p>It's never irrelevant -- but in my application, it didn't matter whether I wrote <code>e x</code> or <code>e.toFun x</code> because I wasn't proving anything and therefore didn't need any simp lemmas. But that's a bad excuse for not moving it to Std :-)</p>",
        "id": 384858500,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692035115
    },
    {
        "content": "<p>I'll start working on a refactor of <code>FinEnum</code>.</p>",
        "id": 384859846,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692035413
    },
    {
        "content": "<p>That's right, it's not irrelevant but it's a black box and doesn't need special treatment. That said, I much prefer writing <code>e.toFun x</code> than <code>e x</code> since it's hard to see invisible things :-)</p>",
        "id": 384859865,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692035417
    },
    {
        "content": "<p>(you can see the equivalence <code>e</code>, so it doesn't feel quite as invisible as coercions usually are...)</p>",
        "id": 384860538,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692035574
    },
    {
        "content": "<p>BTW, what's the reason for <code>FunLike</code> to have the injectivity constraint? Is it acting as a safeguard against <code>FunLike</code> instances that are antipatterns?</p>",
        "id": 384861755,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692035846
    },
    {
        "content": "<p>It's to allow <code>ext</code> (and a handful of similar lemmas) to be generalized</p>",
        "id": 384863908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692036210
    },
    {
        "content": "<p>So you can write <code>FunLike.ext</code> and it works for <code>Embedding</code>, <code>Equiv</code>, <code>AddHom</code>, etc</p>",
        "id": 384864041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692036228
    },
    {
        "content": "<p>I think Std4 could probably justify dropping the injectivity bit if moving<code>Function.Injective</code> is undesirable (but maybe it's not?)</p>",
        "id": 384864516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692036307
    },
    {
        "content": "<p>It seems useful in Std4, but I can imagine situations coming up where people want the notation without proving injectivity. Would it be reasonable to refactor in Mathlib the injectivity as another class? (<code>LawfulFunLike</code>? <code>FunLike.Inj</code>?)</p>",
        "id": 384865666,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692036502
    },
    {
        "content": "<p>I think the current name is best kept as the injective version</p>",
        "id": 384866643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692036709
    },
    {
        "content": "<p>I think it's fine to have a plain <code>ToFun</code> class in Std that can act as a grandparent to all of these. I can also get used to the coercion if that's what everybody wants.</p>",
        "id": 384871556,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692037836
    },
    {
        "content": "<p>To save on name bikeshedding, maybe we should just not prematurely refactor; once someone has a <code>FunLike</code> that's not trivially injective we can come back to it <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 384872336,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692038006
    },
    {
        "content": "<p>(I was using <code>ToFun</code> as a description, not a suggestion. I'm actually surprised to see that it doesn't already exist somewhere.)</p>",
        "id": 384873811,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692038381
    },
    {
        "content": "<p>Well, the builtin is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeFun#doc\">docs#CoeFun</a> but that has elaboration magic that we don't want</p>",
        "id": 384874408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692038540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I love that magic but I hate it sometimes. I often have to make silly aliases to make things work. How often do you run into this and how?</p>",
        "id": 384899021,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692044325
    },
    {
        "content": "<p>How often do I run into magic that we don't want with <code>CoeFun</code>, you mean?</p>",
        "id": 384899151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692044351
    },
    {
        "content": "<p>If we used the default <code>CoeFun</code> then <code>algebraMap R A r</code> would be <code>(algebraMap R A).toAddMonoidHom.toAddHom.toFun r</code> or something, which is then syntactically different from <code>(algebraMap R A).toMonoidHom.toMulHom.toFun r</code>, and now we have a whole tree of different paths to rewrite between when we don't care about any of them.</p>",
        "id": 384899532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692044443
    },
    {
        "content": "<p>Things that don't hook right? Other things that can only be fixed by first rewriting into something with no magic...</p>\n<p>(This is re the first part only.)</p>",
        "id": 384899713,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692044484
    },
    {
        "content": "<p>I'm afraid I'm not sure which message you're referring to (and I think there's a typo that's not helping)</p>",
        "id": 384900220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692044623
    },
    {
        "content": "<p>Lag confusion... \"the first part\" was an answer to the sentence that ends with \"you mean?\"</p>",
        "id": 384900697,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692044744
    },
    {
        "content": "<p>I assume \"hook\" means \"look\" (as opposed to \"hook right (arrow)\" aka <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Embedding#doc\">docs#Embedding</a>)</p>",
        "id": 384900976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692044815
    },
    {
        "content": "<p>No, it means hook as in fishing. It's an analogy with getting the right bait for the fish. Sorry for using that analogy, I thought it was common.</p>",
        "id": 384902349,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692045155
    },
    {
        "content": "<p>I think it would be reasonable to move <code>Equiv</code> to Std, along with a minimal <code>FunLike</code> port including <code>Function.Injective</code>. (injective, surjective, bijective were once part of lean 3 core, and most things in the lean 3 core library are candidates for std, even if they have since migrated out of the core library.) <code>FinEnum</code> / <code>Enumtype</code> is a different matter and should probably not be discussed in this topic</p>",
        "id": 384917871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692050503
    },
    {
        "content": "<p>We had to do something similar when porting <code>Int</code>/<code>Rat</code> lemmas, we had to move <code>NatCast</code> for consistency with mathlib even though it's just notation</p>",
        "id": 384918176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692050613
    },
    {
        "content": "<p>I think the main usage of <code>Equiv</code> is as a \"vocabulary type\", we want everyone talking about equivs to use the same type to do so</p>",
        "id": 384918282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692050646
    },
    {
        "content": "<p>It's also not horrible computationally, although it's not something you want to use unless you have to</p>",
        "id": 384918421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692050691
    },
    {
        "content": "<p>I'm hoping we can get Lean to inline enough stuff to find idempotent <code>e \\circ e.symm</code> applications and csimp them away, but that's a ways off :)</p>",
        "id": 384919047,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692050967
    },
    {
        "content": "<p>that would be cool, but csimp definitely doesn't support it</p>",
        "id": 384921035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692051904
    },
    {
        "content": "<p>ah, right, only constants. well. another thing to put on the pile of \"useful if csimp supported non-constant rewrites\"</p>",
        "id": 384921124,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692051942
    }
]