[
    {
        "content": "<p>The following code is copy-pasted from Lean core <code>calc</code> tactic except that it tries to report Lsp ranges for individual calc steps. But the reported ranges seem completely off.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Calc</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.ElabTerm</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Std.Lean.Position</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/-- A variation on elabCalcSteps from core. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">myElabCalcSteps</span> <span class=\"o\">(</span><span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">calcSteps</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">result</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">prevRhs</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"n\">for</span> <span class=\"n\">step</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getCalcSteps</span> <span class=\"n\">steps</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pred</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">proofTerm</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">step</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n\n    <span class=\"c1\">-- The next two lines are new compared to core.</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">stxRange</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFileMap</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rangeOfStx</span><span class=\"bp\">?</span> <span class=\"n\">step</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">toJson</span> <span class=\"n\">stxRange</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">prevRhs</span> <span class=\"o\">:=</span> <span class=\"n\">prevRhs</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n        <span class=\"n\">annotateFirstHoleWithType</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">prevRhs</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">pure</span> <span class=\"n\">pred</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">getCalcRelation</span><span class=\"bp\">?</span> <span class=\"n\">type</span> <span class=\"bp\">|</span>\n      <span class=\"n\">throwErrorAt</span> <span class=\"n\">pred</span> <span class=\"s2\">\"invalid 'calc' step, relation expected{indentExpr type}\"</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">prevRhs</span> <span class=\"o\">:=</span> <span class=\"n\">prevRhs</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEqGuarded</span> <span class=\"n\">lhs</span> <span class=\"n\">prevRhs</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">throwErrorAt</span> <span class=\"n\">pred</span> <span class=\"s2\">\"invalid 'calc' step, left-hand-side is{indentD m!\"</span><span class=\"o\">{</span><span class=\"n\">lhs</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">lhs</span><span class=\"o\">}</span><span class=\"s2\">\"}</span><span class=\"se\">\\n</span><span class=\"s2\">previous right-hand-side is{indentD m!\"</span><span class=\"o\">{</span><span class=\"n\">prevRhs</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">prevRhs</span><span class=\"o\">}</span><span class=\"s2\">\"}\"</span> <span class=\"c1\">-- \"</span>\n    <span class=\"k\">let</span> <span class=\"n\">proof</span> <span class=\"bp\">←</span> <span class=\"n\">withFreshMacroScope</span> <span class=\"k\">do</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">proofTerm</span> <span class=\"n\">type</span>\n    <span class=\"n\">result</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">resultType</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">result</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n        <span class=\"n\">synthesizeSyntheticMVarsUsingDefault</span>\n        <span class=\"n\">withRef</span> <span class=\"n\">pred</span> <span class=\"k\">do</span> <span class=\"n\">mkCalcTrans</span> <span class=\"n\">result</span> <span class=\"n\">resultType</span> <span class=\"n\">proof</span> <span class=\"n\">type</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n    <span class=\"n\">prevRhs</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">rhs</span>\n  <span class=\"n\">return</span> <span class=\"n\">result</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Elab.Term</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/-- Elaborator for the `calc` tactic mode variant. The only difference with the core version</span>\n<span class=\"sd\">from Lean/Elab/Tactic/Calc.lean is the call to `myElabCalcSteps` instead of `elabCalcSteps`. -/</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">calc</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">calcSteps</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">stx</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">mvarIds</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withCollectingNewGoalsFrom</span> <span class=\"o\">(</span><span class=\"n\">tagSuffix</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"k\">calc</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n    <span class=\"k\">let</span> <span class=\"n\">tag</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTag</span>\n    <span class=\"n\">runTermElab</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">Term.myElabCalcSteps</span> <span class=\"n\">steps</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">valType</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">val</span>\n    <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">valType</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">throwFailed</span> <span class=\"o\">:=</span>\n        <span class=\"n\">throwError</span> <span class=\"s2\">\"'calc' tactic failed, has type{indentExpr valType}</span><span class=\"se\">\\n</span><span class=\"s2\">but it is expected to have type{indentExpr target}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Term.getCalcRelation</span><span class=\"bp\">?</span> <span class=\"n\">valType</span> <span class=\"bp\">|</span> <span class=\"n\">throwFailed</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rhs'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Term.getCalcRelation</span><span class=\"bp\">?</span> <span class=\"n\">target</span> <span class=\"bp\">|</span> <span class=\"n\">throwFailed</span>\n      <span class=\"k\">let</span> <span class=\"n\">lastStep</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp2</span> <span class=\"n\">r</span> <span class=\"n\">rhs</span> <span class=\"n\">rhs'</span>\n      <span class=\"k\">let</span> <span class=\"n\">lastStepGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprSyntheticOpaqueMVar</span> <span class=\"n\">lastStep</span> <span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"o\">:=</span> <span class=\"n\">tag</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"k\">calc</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">valType</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Term.mkCalcTrans</span> <span class=\"n\">val</span> <span class=\"n\">valType</span> <span class=\"n\">lastStepGoal</span> <span class=\"n\">lastStep</span>\n      <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">valType</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"k\">do</span> <span class=\"n\">throwFailed</span>\n    <span class=\"n\">return</span> <span class=\"n\">val</span>\n  <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">assign</span> <span class=\"n\">val</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"n\">mvarIds</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span>\n  <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n<span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n<span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">h₃</span>\n</code></pre></div>",
        "id": 372698643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688586172
    },
    {
        "content": "<p>Trying <code>let some leanRange := step.raw.getRange? | throwError \"no range\"</code>, it would appear that the Lean ranges themselves are messed up. Possibly <code>getCalcSteps</code> results in this inconsistency because the range for <code>steps</code> appears correct.</p>",
        "id": 372701663,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1688587151
    },
    {
        "content": "<p>How do you interpret <code>leanRange</code>? I get results like <code>{ start := { byteIdx := 2963 }, stop := { byteIdx := 3020 } }</code></p>",
        "id": 372704546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688588036
    },
    {
        "content": "<p>Only the first step is off, and that's because <code>getCalcSteps</code> transforms the syntax of the first step (the first step has a different syntax than the rest!).</p>",
        "id": 372704626,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688588047
    },
    {
        "content": "<p>One way to fix this would be to add a <code>withRef step0 do</code> at the beginning of <code>getCalcFirstStep</code>.</p>",
        "id": 372704972,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688588160
    },
    {
        "content": "<p>Probably you ought to set <code>(canonicalOnly := true)</code> in the call to <code>Syntax.getRange?</code> so that the synthetic <code>:=</code> injected by <code>getCalcFirstStep</code> does not get picked up.</p>",
        "id": 372705038,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1688588168
    },
    {
        "content": "<p>Maybe I got extra confused because the line count starts at 0 and VSCode starts at 1.</p>",
        "id": 372705305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688588267
    },
    {
        "content": "<p>The <code>withRef step0 do</code> suggestion seems to work! (combined with knowing lines starts at 0...)</p>",
        "id": 372706025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688588508
    },
    {
        "content": "<p>Thanks Wojciech and Gabriel!</p>",
        "id": 372706306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688588599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/348111-std4/topic/Random.20calc.20ranges/near/372704546\">said</a>:</p>\n<blockquote>\n<p>How do you interpret <code>leanRange</code>? I get results like <code>{ start := { byteIdx := 2963 }, stop := { byteIdx := 3020 } }</code></p>\n</blockquote>\n<p>I didn't try to read them off literally (they are UTF-8 offsets), but you can see that they overlap in a way that doesn't make sense.</p>",
        "id": 372707255,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1688588911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/348111-std4/topic/Random.20calc.20ranges/near/372705038\">said</a>:</p>\n<blockquote>\n<p>Probably you ought to set <code>(canonicalOnly := true)</code> in the call to <code>Syntax.getRange?</code> so that the synthetic <code>:=</code> injected by <code>getCalcFirstStep</code> does not get picked up.</p>\n</blockquote>\n<p>Ah, this doesn't work since <code>canonicalOnly := true</code> will not to find \"the earliest canonical range\" but rather expects the top-level one to be canonical and otherwise returns <code>none</code>.</p>",
        "id": 372707362,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1688588950
    }
]