[
    {
        "content": "<p>Thoughts on a linter that disallows numerical structure projections? E.g. for <code>e : Iff _ _</code> I find <code>e.1</code> and <code>e.2</code> much less readable than <code>.mp</code> and <code>.mpr</code>. I feel like the only case where I use the numbers is for tuples.</p>",
        "id": 373567537,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688852515
    },
    {
        "content": "<p>Not sure how much that syntax is used in Std/Mathlib at the moment, but it feels like bad style to me</p>",
        "id": 373567614,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688852551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  appears to be a fan of numerical projections.  Personally, I am not a fan but I am not against it. That said, <code>.mp</code> and <code>.mpr</code> are pretty obscure for non-logicians (FYI: \"modus ponens\" and \"modus ponens reverse\", which should probably be <code>.mpc</code> or <code>.mpv</code> to avoid mixing Latin and English. This name choice goes back to Lean 2 and perhaps Lean 1.)</p>",
        "id": 373568715,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688853258
    },
    {
        "content": "<p>yes, especially for <code>.mp</code> and <code>.mpr</code> I don't find the names much more than a waste of space</p>",
        "id": 373568755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853310
    },
    {
        "content": "<p>..really? what if you change the order of the fields in a structure? if it's just to save characters I'm not really convinced of the utility</p>",
        "id": 373568871,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688853364
    },
    {
        "content": "<p>I disagree about renaming them to full latin though, modus ponens is the very standard name for this operation</p>",
        "id": 373568894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853368
    },
    {
        "content": "<p>For iff specifically, that isn't going to happen</p>",
        "id": 373568933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853392
    },
    {
        "content": "<p>for other structures, maybe not, but for <code>And</code> and <code>Iff</code> the field order is absolutely a stable promise</p>",
        "id": 373568965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853417
    },
    {
        "content": "<p>That was a joke, of course!</p>",
        "id": 373568991,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688853436
    },
    {
        "content": "<p>also sigma and subtype</p>",
        "id": 373569025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853465
    },
    {
        "content": "<p>I can't think of too many other structures where the field order is part of the primary interface</p>",
        "id": 373569084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853485
    },
    {
        "content": "<p>All the basic logic operators really</p>",
        "id": 373569115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853512
    },
    {
        "content": "<p>For <code>And</code>/<code>Sigma</code> I totally see the justification, because they're tuples, and the structure names are <code>fst</code>/<code>snd</code> anyways. But <code>Iff</code> could be written in either order, the fields aren't <code>fst</code> and <code>snd</code></p>",
        "id": 373569123,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688853517
    },
    {
        "content": "<p>Iff is to be thought of as a conjunction <code>(P -&gt; Q) /\\ (Q -&gt; P)</code></p>",
        "id": 373569141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853538
    },
    {
        "content": "<p>I think it was actually defined as this once</p>",
        "id": 373569153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853547
    },
    {
        "content": "<p>and the order of conjuncts there is important: forward direction first, then backward</p>",
        "id": 373569164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853570
    },
    {
        "content": "<p>if you changed the field order you would not only break <code>.1</code> and <code>.2</code> but also <code>\\&lt;_, _\\&gt;</code> and every proof using <code>constructor</code></p>",
        "id": 373569266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853611
    },
    {
        "content": "<p>the only thing that wouldn't break is <code>{ mp := _, mpr := _ }</code> and literally no one writes that</p>",
        "id": 373569304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853639
    },
    {
        "content": "<p>I dunno. Not gonna shed any tears over it, just seems weird to me. Maybe we have some annotation on structures that should never change field order and then lint for number projections for all other structures.</p>",
        "id": 373569456,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688853742
    },
    {
        "content": "<p>Also I think <code>.1</code> on any one element structure should be okay</p>",
        "id": 373569489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853774
    },
    {
        "content": "<p>Before rolling out any lint along these lines I would want data on how often it is actually violated, excepting the cases I mentioned</p>",
        "id": 373569586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688853844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/lint.20structure.20projections/near/373569153\">said</a>:</p>\n<blockquote>\n<p>I think it was actually defined as this once</p>\n</blockquote>\n<p>I don't think it was but I do think it should be.</p>\n<p>I'm pretty sure I used <code>iff.mp</code> and <code>iff.mpr</code> back in the Lean 2 days but I'm too lazy to go an check that far in time. (It might have been defined as a conjunction in Lean 1, I wasn't around back then.) Though it could be that these were theorems, but dot notation didn't work as well as now back then so I'm thinking they were actual projections.</p>\n<p>In any case, since dot notation works really well by now, I think it makes perfect sense to define <code>Iff a b</code> as <code>a -&gt; b /\\ b -&gt; a</code> and then add <code>Iff.mp</code> and <code>Iff.mpr</code> as theorems so nothing breaks downstream. The current definition is, I believe, just a historical artifact.</p>",
        "id": 373571993,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688855500
    },
    {
        "content": "<p>those declarations definitely existed, but that's not inconsistent with the definition being a conjunction</p>",
        "id": 373572195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688855609
    },
    {
        "content": "<p><code>or.intro_left</code> and <code>or.inl</code> both existed as well but only one is the constructor</p>",
        "id": 373572246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688855642
    },
    {
        "content": "<p>dot notation has worked on arbitrary declarations as long as I can remember, although it wasn't always a dot, it was <code>e^.left</code> back in the day because of ambiguity with namespaced names (which is still the case, we just developed a more sophisticated system to handle the ambiguity)</p>",
        "id": 373572401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688855719
    },
    {
        "content": "<p>I'd be wary of defining <code>Iff</code> as an <code>And</code> just to be sure tactics never accidentally unfold it, and also to make sure that dot notation will always refer to the <code>Iff</code> namespace.</p>",
        "id": 373572629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688855856
    },
    {
        "content": "<p>Lean 4 has been trending towards more structures and less defs, so I think the split is deliberate</p>",
        "id": 373572634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688855857
    },
    {
        "content": "<p>what kyle said</p>",
        "id": 373572644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688855866
    },
    {
        "content": "<p>More fun would be <code>structure Iff (p q : Prop) extends And (p → q) (q → p)</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 373572870,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688856013
    },
    {
        "content": "<p>(I'm not seriously suggesting this! It's just interesting that it'd be possible, though with differences, like how <code>.1</code> gives you the <code>Iff</code> as an <code>And</code>.)</p>",
        "id": 373572907,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688856045
    },
    {
        "content": "<p>You're totally right Mario! <a href=\"https://github.com/leanprover/lean2/blob/master/library/init/logic.lean#L291C3-L291C3\">https://github.com/leanprover/lean2/blob/master/library/init/logic.lean#L291C3-L291C3</a></p>",
        "id": 373572939,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688856068
    },
    {
        "content": "<p>Going back to the Latin/English issue: it's now possible to have <code>Iff.by</code> and <code>Iff.of</code>! Not that I think there is any reason to change <code>Iff.mp</code> and <code>Iff.mpr</code> at this point or ever...</p>",
        "id": 373578404,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1688859179
    },
    {
        "content": "<p>I'm also not a really big fan of having two ways to refer to the same thing (numerical and named projections). IMO, it would be nice to make the numerical projections opt-in, say with a <code>tuple</code> attribute. This would serve as an explicit promise that a structure is intended to be used like a tuple, and that fields won't be re-ordered</p>",
        "id": 373897048,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1688983367
    },
    {
        "content": "<p>Yeah, I'm curious how many structures would need to be opted in for mathlib to compile. I suspect <code>constructor</code>/<code>langlerangle</code> are pretty heavily used but maybe only on a small subset of structures.</p>",
        "id": 374025352,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689007633
    },
    {
        "content": "<p>27 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4/topic/isn.27t.20.22iff.22.20obscure.3F\">#std4 &gt; isn't \"iff\" obscure?</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 375593605,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689439892
    },
    {
        "content": "<p>I've got a case where this kind of linting would be useful.</p>\n<p>I was testing a std4 PR against Mathlib to see what would break. I found <a href=\"https://github.com/leanprover-community/mathlib4/blob/2c8ded28b951c081725355ff1dfcc99ba0051021/Mathlib/Analysis/BoxIntegral/Basic.lean#L822-L823\">this example</a> in Mathlib.Analysis.BoxIntegral.Basic: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">l.bHenstock</span> <span class=\"o\">:=</span> <span class=\"n\">hl.2.1.resolve_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n  <span class=\"n\">HasIntegral.of_bRiemann_eq_false_of_forall_isLittleO</span> <span class=\"o\">(</span><span class=\"n\">hl.1.resolve_right</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))</span> <span class=\"n\">B</span> <span class=\"n\">hB0</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">H₁</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">true_imp_iff</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">H₂</span>\n</code></pre></div>\n<p>There seems to be a coercion involved which makes resolving the issue extremely difficult. Some hidden definition has changed in my PR so that <code>resolve_left</code> and <code>resolve_right</code> no longer make sense. I still haven't figured it out!</p>",
        "id": 378512603,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690297915
    },
    {
        "content": "<p>Those are almost certainly <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Or.resolve_left#doc\">docs4#Or.resolve_left</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Or.resolve_right#doc\">docs4#Or.resolve_right</a></p>",
        "id": 378550392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690305002
    },
    {
        "content": "<p>One nice Lean 4 gotcha is that in <code>theorem Or.thing ...</code> you can refer to <code>Or.resolve_left</code> just as <code>resolve_left</code>, but if you change the name of the theorem to <code>theorem Or_thing ...</code> then this no longer works.</p>",
        "id": 378551176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690305170
    },
    {
        "content": "<p>Does it make things clearer to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">hl</span>\n</code></pre></div>\n<p>at the top of the proof?</p>",
        "id": 378551332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690305202
    },
    {
        "content": "<p>The issue is that the ors are no longer ors after the PR. The ands are still ands but it's not easy to figure out what they are from the <a href=\"https://github.com/leanprover-community/mathlib4/blob/6b4ff5d9cb4e0ee1e766220ca85f4dad0f10900a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L207\">relevant definition</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Auxiliary equivalence with a product type used to lift an order. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">equivProd</span> <span class=\"o\">:</span> <span class=\"n\">IntegrationParams</span> <span class=\"bp\">≃</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">l.1</span><span class=\"o\">,</span> <span class=\"n\">OrderDual.toDual</span> <span class=\"n\">l.2</span><span class=\"o\">,</span> <span class=\"n\">OrderDual.toDual</span> <span class=\"n\">l.3</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">l.1</span><span class=\"o\">,</span> <span class=\"n\">OrderDual.ofDual</span> <span class=\"n\">l.2.1</span><span class=\"o\">,</span> <span class=\"n\">OrderDual.ofDual</span> <span class=\"n\">l.2.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">box_integral.integration_params.equiv_prod</span> <span class=\"n\">BoxIntegral.IntegrationParams.equivProd</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">IntegrationParams</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PartialOrder.lift</span> <span class=\"n\">equivProd</span> <span class=\"n\">equivProd.injective</span>\n</code></pre></div>",
        "id": 378765565,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690371399
    },
    {
        "content": "<p>the or is coming from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bool.linearOrder#src\">src4#Bool.linearOrder</a></p>",
        "id": 378766359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690371546
    },
    {
        "content": "<p><code>a &lt;= b</code> on bool is defined as <code>a = false \\/ b = true</code> apparently</p>",
        "id": 378766465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690371565
    },
    {
        "content": "<p>TBH I don't think that's a very good definition, <code>a = true -&gt; b = true</code> would be better</p>",
        "id": 378766753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690371617
    },
    {
        "content": "<p>but that's a whole refactor I'm sure</p>",
        "id": 378766818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690371630
    },
    {
        "content": "<p>Actually, <a href=\"https://github.com/leanprover/std4/pull/183\">std4#183</a> fixes a lot of this (but not with that definition, I used <code>leOfOrd</code> forward thinking to an upcoming <code>Ord</code> rehash). This issue came up while attempting to make a Mathlib patch for that std4 PR.</p>",
        "id": 378769809,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690372181
    },
    {
        "content": "<p>I figured that was why you were having porting pains</p>",
        "id": 378770363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690372276
    },
    {
        "content": "<p>Why do we need a LE instance on bool?</p>",
        "id": 378770424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690372290
    },
    {
        "content": "<p>Presumably mathlib wants one so that it provide a <code>BooleanAlgebra</code> instance</p>",
        "id": 378770719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690372339
    },
    {
        "content": "<p>We at least need an <code>Ord</code> instance so that deriving <code>Ord</code> works properly.</p>",
        "id": 378770759,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690372350
    },
    {
        "content": "<p>But that's of course not a reason for Std4</p>",
        "id": 378770763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690372351
    },
    {
        "content": "<p>Also <code>Ord</code> should give default LE and LT as in &lt;<a href=\"https://github.com/leanprover/lean4/issues/1777\">https://github.com/leanprover/lean4/issues/1777</a>&gt;</p>",
        "id": 378771356,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690372457
    },
    {
        "content": "<p>And that would mean that <code>leOfOrd</code> and <code>ltOfOrd</code> are the default implementations...</p>",
        "id": 378771648,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690372512
    },
    {
        "content": "<p>actually since <code>false &lt; true</code> in rust, haskell, C, python I think it's probably good enough to have this instance in std</p>",
        "id": 378771865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690372561
    },
    {
        "content": "<p>I think so too, but my reasoning is based on making &lt;<a href=\"https://github.com/leanprover/lean4/issues/1777\">https://github.com/leanprover/lean4/issues/1777</a>&gt; work with minimal pain.</p>",
        "id": 378772328,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690372646
    },
    {
        "content": "<p>I don't think it is necessarily a goal to have the implementations be defeq to <code>leOfOrd</code></p>",
        "id": 378772368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690372656
    },
    {
        "content": "<p>No, but then we can just delete the definition and everything will still work.</p>",
        "id": 378772548,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690372695
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1777\">lean4#1777</a> hasn't been implemented yet. Until it is we have to make do with the class we have</p>",
        "id": 378772716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690372728
    },
    {
        "content": "<p>which means a <code>LawfulOrd</code> style class</p>",
        "id": 378772774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690372741
    },
    {
        "content": "<p>or rather, whatever classes exist in core/std already for lawful ordering</p>",
        "id": 378772914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690372776
    },
    {
        "content": "<p>and leave anything else for mathlib</p>",
        "id": 378772973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690372791
    },
    {
        "content": "<p>I know, but it's apparently a life goal of mine to make <a href=\"https://github.com/leanprover/lean4/pull/1777\">lean4#1777</a> happen! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 378773240,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690372833
    },
    {
        "content": "<p>I think you need to learn the joy of programming with <code>Ord</code>! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 378773642,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690372919
    },
    {
        "content": "<p>I don't disagree with the sentiment but I don't really want to write code \"as if\" we had Ord when we actually don't</p>",
        "id": 378773867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690372959
    },
    {
        "content": "<p>in particular, in a hypothetical future with such a class there won't be any requirement that LE is derived from Ord, they will be separate fields with a compatibility theorem</p>",
        "id": 378774253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373032
    },
    {
        "content": "<p>Yes, but this is not a disruptive decision. It makes a lot of ugly stuff in Mathlib cleaner. The issue here is the first annoying one I ran into where it strongly relied on the definition of <code>le</code> for <code>Bool</code> to be an <code>Or</code>. That's a bad idea anyway, so I don't think it's an issue to fix that.</p>",
        "id": 378775178,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690373199
    },
    {
        "content": "<p>sure but changing the defeq for bool LE is a mathlib refactor that requires discussion</p>",
        "id": 378775545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373272
    },
    {
        "content": "<p>My patch is almost done, you can look at it tomorrow.</p>",
        "id": 378775759,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690373309
    },
    {
        "content": "<p>I'm fairly sure that <code>leOfOrd</code> doesn't give you the <code>a = true -&gt; b = true</code> definition either</p>",
        "id": 378775792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373316
    },
    {
        "content": "<p>No, but that is never used, and the <code>Or</code> definition is only used in obscure places.</p>",
        "id": 378776086,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690373378
    },
    {
        "content": "<p>instead you get something awkward like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">lt</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">gt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">lt</span>\n</code></pre></div>",
        "id": 378776139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373390
    },
    {
        "content": "<p>On the other hand, it makes <code>min</code> and <code>max</code> behave normally.</p>",
        "id": 378776275,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690373412
    },
    {
        "content": "<p>You'll see the patch tomorrow when I'm done...</p>",
        "id": 378776437,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690373450
    },
    {
        "content": "<p>if the argument is \"it's fine because you shouldn't care about the defeq anyway\" then it shouldn't need to be changed in the first place</p>",
        "id": 378776603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/lint.20structure.20projections/near/378775545\">said</a>:</p>\n<blockquote>\n<p>sure but changing the defeq for bool LE is a mathlib refactor that requires discussion</p>\n</blockquote>\n<p>I think changing to <code>a = true -&gt; b = true</code> (aka <code>(a = true) &lt;= (b = true)</code>) would be uncontroversial, as it means <code>le</code> is preserved under casting to/from bool by defeq</p>",
        "id": 378777038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690373574
    },
    {
        "content": "<p>It's not a change, it's a move to Std. We're arguing about hypotheticals where both of us have partial info, so let's resume tomorrow after you see the patch. I don't take such decisions lightly, which is why I'm working through the patch for <a href=\"https://github.com/leanprover-community/std/pull/183\">std#183</a>.</p>",
        "id": 378777563,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690373681
    },
    {
        "content": "<p>right, but <span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> is changing the defeq to something else in his refactor</p>",
        "id": 378777577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373684
    },
    {
        "content": "<p>I'm pretty sure the result of unfolding <code>leOfOrd</code> is what I posted <a href=\"#narrow/stream/348111-std4/topic/lint.20structure.20projections/near/378776139\">above</a></p>",
        "id": 378777836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> It's not a move, AFAICT almost all of the code in <a href=\"https://github.com/leanprover/std4/pull/183\">std4#183</a> is new code, not copied from mathlib or else modified heavily such that I can't see the relation</p>",
        "id": 378778342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373838
    },
    {
        "content": "<p>that's not necessarily a bad thing but it makes review a bit harder</p>",
        "id": 378778529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373882
    },
    {
        "content": "<p>and to the extent that it forces mathlib to change its definitions to be consistent with std, it is a change to mathlib</p>",
        "id": 378778797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373932
    },
    {
        "content": "<p>mathlib could make a definition of LE on bool which is different from the std one but this will cause the same kind of confusion as the overridden <code>Div Int</code> instance in std</p>",
        "id": 378779096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690373990
    },
    {
        "content": "<p>As I said, that's why I'm working through the Mathlib patch...</p>",
        "id": 378780179,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690374190
    },
    {
        "content": "<p>I think if we're adding things to std4 that are intended to replace things in mathlib but don't match exactly, the easiest approach is to make a PR to mathlib first. Then we're sure the std4 dependency update will only require removing code</p>",
        "id": 378790809,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690376224
    },
    {
        "content": "<p>I rushed the patch and here it is: &lt;<a href=\"https://github.com/leanprover-community/mathlib4/tree/fgdorais-bool\">https://github.com/leanprover-community/mathlib4/tree/fgdorais-bool</a>&gt;</p>\n<p>It will take an hour or so for the CI to get done. It compiles fine on my machine but I haven't run linters and such yet. Look at the next to last commit, the last commit is just to point std to the branch <a href=\"https://github.com/leanprover/std4/pull/183\">std4#183</a> is on.  For some reason that I can't recall at the moment, I included the patch for <a href=\"https://github.com/leanprover-community/std/pull/184\">std#184</a> in that one commit. It's not hard tell which is which, but it makes the patch uselessly bigger since <a href=\"https://github.com/leanprover/std4/pull/184\">std4#184</a> will be obsoleted by <a href=\"https://github.com/leanprover/std4/pull/200\">std4#200</a>.</p>\n<p>As you can see the changes are mostly deletions. It also nicely cleans up the mess discussed on <a href=\"#narrow/stream/287929-mathlib4/topic/LinearOrder.20in.20mathlib3.2F4/near/305410433\">Zulip</a> a long while ago. There was exactly one file in Mathlib that relied on <code>le</code> for <code>Bool</code> being an <code>Or</code>, and that was fixed nicely using lemmas that were already in Mathlib.</p>\n<p>So, like I said before, all we need is more information. There is no harm to Mathlib nor Std, in fact, there are benefits to both!</p>",
        "id": 378814687,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690380245
    },
    {
        "content": "<p>Actually, this uses a slightly outdated version of <a href=\"https://github.com/leanprover/std4/pull/183\">std4#183</a> (that's the price of rushing it...) but it should work fine with the more recent version except for <code>xor</code> which should just become an <code>export Bool (xor)</code> in Mathlib.Init.Bool.Basic.</p>",
        "id": 378816063,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690380462
    },
    {
        "content": "<p>Oh bummer, compilation is fine but it looks like there's a bunch of simp redundancies that were found by the simp linter... I don't intend to get around to that since <a href=\"https://github.com/leanprover/std4/pull/200\">std4#200</a> is more important for now.</p>",
        "id": 378818962,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690380853
    }
]