[
    {
        "content": "<p>I am using pmap in one of my projects that has a relatively large list constant. Since <code>pmap</code> is not tailrec it causes eval to stack overflow. I know this is one of the functions that should be compiled to the identity function, but thoughts on adding a tailrec implementation with a csimp lemma?</p>",
        "id": 372367576,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688488595
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/176\">std4#176</a> in case it is desired</p>",
        "id": 372369083,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688489033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>  This inspired me and led me to a generalization of <code>pmap</code>. Like <code>ite</code> vs <code>dite</code>, we can define a <code>memMap</code> function that carries the knowledge that each mapped <code>a</code> is <code>a \\mem l</code> and then <code>pmap</code> is just a specific application of that function. Below is a PoC. I am curious what you think of it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">`memMap` is like `map` but with a proof that `f` is only applied to elements</span>\n<span class=\"sd\">of the list.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[specialize]</span> <span class=\"kd\">def</span> <span class=\"n\">memMap</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mem_cons.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">::</span>\n    <span class=\"n\">memMap</span> <span class=\"n\">as</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mem_cons.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Tail-recursive version of `memMap`. -/</span>\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">memMapTR</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">loop</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"kd\">@[specialize]</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.reverse</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">loop</span> <span class=\"n\">as</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_cons.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mem_cons.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[csimp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">memMap_eq_memMapTR</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">memMap</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">memMapTR</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">l</span> <span class=\"n\">f</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">memMapTR</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"n\">acc.reverse</span> <span class=\"bp\">++</span> <span class=\"n\">memMap</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">memMapTR.loop</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"n\">acc</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">[]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span>\n  <span class=\"n\">intro</span> <span class=\"n\">acc</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">acc</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">memMap</span><span class=\"o\">,</span> <span class=\"n\">memMapTR.loop</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">memMap</span><span class=\"o\">,</span> <span class=\"n\">memMapTR.loop</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">pmap</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.memMap</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">mh</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">mh</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 372413894,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688503924
    },
    {
        "content": "<p>I guess <code>memMap</code> could also be called <code>dmap</code> to fit with <code>dite</code>, but I am not sure if that is appropriate.</p>",
        "id": 372414519,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688504264
    },
    {
        "content": "<p><code>pmap</code>, <code>memMap</code> and <code>attach</code> are all inter-definable</p>",
        "id": 372414524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688504268
    },
    {
        "content": "<p>performance-wise, I guess we should bias toward using <code>attach</code>, since that one is always O(1) while <code>pmap</code> is more like a <code>map</code> equivalent</p>",
        "id": 372414702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688504357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Oh, I did not see <code>attach</code>. Yeah, everything should probably be phrased with <code>attach</code> as that can be <code>@[extern]</code> as <code>id</code>.</p>",
        "id": 372414822,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688504412
    },
    {
        "content": "<p>it can also be <code>implemented_by</code> as <code>unsafeCast</code></p>",
        "id": 372414879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688504443
    },
    {
        "content": "<p>It would be neat if the new compiler could have <code>@[id]</code> attribute that works like <code>unsafeCast</code>/<code>@[extern]</code> does a type-safe check to ensure the data layouts are, in fact, identitical.</p>",
        "id": 372415072,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688504526
    },
    {
        "content": "<p>if it gets smart enough to do that, it may as well just do the optimization without annotation</p>",
        "id": 372415146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688504577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>@[id]</code> would just require checking the function type signatures (at a data level), the compiler may not have enough information to determine the if the function is actually a no-op. Furthermore, it like e.g. <code>@{musttail]</code> would allow for a quick user-level check that an optimization is occurring as expected.</p>",
        "id": 372415380,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688504723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> from Mario's note, it seems like the best implementation of <code>pmap</code> is thus:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">pmap</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.attach.map</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mh</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">mh</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 372415799,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688504963
    },
    {
        "content": "<p>That way we get the tail-recursion for free (and the function is essentially identical to just <code>map</code>).</p>",
        "id": 372415894,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688505004
    },
    {
        "content": "<p>oh totally. are we cool with just having the unsafe implementedBy in Std? cuz I'll PR that instead in a heartbeat :P</p>",
        "id": 372416037,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688505096
    },
    {
        "content": "<p>It is used a lot in core, so I would assume it is legal in Std?</p>",
        "id": 372416140,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688505154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?</p>",
        "id": 372416711,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688505542
    },
    {
        "content": "<p>yup</p>",
        "id": 372416744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688505568
    },
    {
        "content": "<p>obviously any <code>implemented_by</code> need to be sound</p>",
        "id": 372416759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688505586
    },
    {
        "content": "<p>will PR</p>",
        "id": 372416836,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688505613
    },
    {
        "content": "<p>note, what mac has written is the implementation of <code>pmap</code>, not the definition of <code>pmap</code> which should remain as it is</p>",
        "id": 372416897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688505647
    },
    {
        "content": "<p>i.e. both <code>pmap</code> and <code>attach</code> will get <code>implemented_by</code>, with <code>attach</code> implemented as id and <code>pmap</code> implemented using map and attach</p>",
        "id": 372416952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688505696
    },
    {
        "content": "<p>we could do a csimp lemma for pmap since it's provably equivalent</p>",
        "id": 372417041,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688505735
    },
    {
        "content": "<p>true</p>",
        "id": 372417057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688505745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/tailrec.20pmap/near/372416897\">said</a>:</p>\n<blockquote>\n<p>note, what mac has written is the implementation of <code>pmap</code>, not the definition of <code>pmap</code> which should remain as it is</p>\n</blockquote>\n<p>I am curious about this Mario. What makes <code>attach + map</code> less useful for proofs than <code>pmap</code>'s current implementation? I would think they would be pretty similar when unfolded.</p>",
        "id": 372417389,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688505949
    },
    {
        "content": "<p>attach just unfolds less nicely iirc</p>",
        "id": 372417616,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688506079
    },
    {
        "content": "<p>like we probably still want a simp lemma that turns it into a pmap</p>",
        "id": 372417673,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688506092
    },
    {
        "content": "<p>yeah, <code>pmap</code> has a better recursive structure for reasoning since <code>p</code> and <code>f</code> can stay fixed</p>",
        "id": 372417760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688506143
    },
    {
        "content": "<p>attach is just horrible to work with recursively, you have to cast it on every iteration</p>",
        "id": 372417820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688506181
    },
    {
        "content": "<p>Ah, make sense then. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  I would have thought there was some way to easily simp away differences, but apparently not.</p>",
        "id": 372421067,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688508141
    },
    {
        "content": "<p>Pushed a new version. It's a little bit of a hacky order, I define attach in terms of pmap still, but with an unsafe <code>implemented_by</code>, and then I prove a <code>csimp</code> lemma that substitutes attach+map for pmap.</p>",
        "id": 372444409,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688521183
    },
    {
        "content": "<p>If possible I'd like to get this merged soonish so it's upstreamed to mathlib soonish!</p>",
        "id": 372770961,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688620847
    }
]