[
    {
        "content": "<p>Hi! I have a very exciting project idea. Essentially, there are these cool monads in Lean 4 now. However, it seems that their current purpose is only to compute. But this is Lean! So I want to prove things about them.<br>\nI decided to start with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ff'</span> <span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">ff'</span>\n</code></pre></div>\n<p>I have gotten some progress after working on it for couple hours (I am beginner), result can be found at <a href=\"https://github.com/grhkm21/lean4/blob/master/src/monad.lean\">https://github.com/grhkm21/lean4/blob/master/src/monad.lean</a> There are two <code>sorry</code>s, and also a few theorems used are very ad-hoc and specific for the theorem I am proving.<br>\nI think this will be very interesting to have more people to help, and I am definitely excited to prove that imperative programs like the one at <a href=\"https://github.com/grhkm21/lean4/blob/master/src/q10.lean\">https://github.com/grhkm21/lean4/blob/master/src/q10.lean</a> (computing sum of primes sublinearly) is correct.<br>\nCC <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> who discussed on Discord</p>",
        "id": 338209148,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677448777
    },
    {
        "content": "<p>push (self advertisement)</p>",
        "id": 338211641,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677450914
    },
    {
        "content": "<p>More repo advertisement - I refactored the code of <code>for</code> loop monad a bit. Specifically I removed the <code>fuel</code> variable and modified the behaviour of a for loop such that a range of <code>step := 0</code> will do nothing instead of doing something. Looking at help might be easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"c1\">-- Syntax: [start : stop : step]</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fff</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>I changed it to return 0 instead of returning 5, which I think makes more sense? This will make proving statements easier, since now we don't have to deal with the <code>fuel</code> variable when unwrapping to the loop</p>",
        "id": 338213253,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677452399
    },
    {
        "content": "<p><a href=\"https://github.com/grhkm21/lean4/blob/master/src/range.lean#L23\">https://github.com/grhkm21/lean4/blob/master/src/range.lean#L23</a></p>",
        "id": 338213316,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677452409
    },
    {
        "content": "<p>I'm not super familiar with the for monad, but I'm curious how you  removed the <code>fuel</code> variable, and whether your version still has the same expressive power.<br>\nThe name <code>fuel</code> implies it has to do with ensuring termination for otherwise potentially non-terminating loops, how does your version deal with that?</p>",
        "id": 338272991,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677489443
    },
    {
        "content": "<p>The idea is cool, though. It would be very interesting to prove theorems about imperative-style monadic code in Lean.</p>",
        "id": 338273163,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677489493
    },
    {
        "content": "<p>The original code called the loop with <code>fuel = range.end</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">Std.Range.forIn</span> <span class=\"n\">range</span> <span class=\"n\">init</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Std.Range.forIn.loop</span> <span class=\"n\">f</span> <span class=\"n\">range.stop</span> <span class=\"n\">range.start</span> <span class=\"n\">range.stop</span> <span class=\"n\">range.step</span> <span class=\"n\">init</span>\n</code></pre></div>\n<p>I believe my code has the same expressive power. I don't want to spam code lmao but here are the two codes (line highlighted, check it out):<br>\nMy new code: <a href=\"https://github.com/grhkm21/lean4/blob/master/Lean4/Range.lean\">https://github.com/grhkm21/lean4/blob/master/Lean4/Range.lean</a> (There is a TLDR at the top)<br>\nPrevious code: <a href=\"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Range.lean#L23-L33\">https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Range.lean#L23-L33</a><br>\nIf you look at the code, it's extremely similar, except that I removed <code>fuel</code> and added a well-foundedness proof.</p>",
        "id": 338340809,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677507870
    },
    {
        "content": "<p>You might want to move this to <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> if it's about a definition in core, or <a class=\"stream\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4\">#std4</a> if it's a question about <code>std4</code>.</p>",
        "id": 338341131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677507942
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/teTCCYmuTh_gzN4wPaHI_mju/Screenshot-2023-02-27-at-14.27.33.png\">Screenshot-2023-02-27-at-14.27.33.png</a> Hmm... It doesn't let me move it to other streams</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/teTCCYmuTh_gzN4wPaHI_mju/Screenshot-2023-02-27-at-14.27.33.png\" title=\"Screenshot-2023-02-27-at-14.27.33.png\"><img src=\"/user_uploads/3121/teTCCYmuTh_gzN4wPaHI_mju/Screenshot-2023-02-27-at-14.27.33.png\"></a></div>",
        "id": 338341691,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677508072
    },
    {
        "content": "<p>But #std4 is probably more appropriate</p>",
        "id": 338341968,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677508130
    },
    {
        "content": "<p>Then maybe just start a new thread. I think the right people need to be reading your question. BTW there's no harm in spamming code. Zulip folds it up.</p>",
        "id": 338342605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677508261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span>: I can move it to another stream, where would you like it to go?</p>",
        "id": 338344493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677508600
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4\">#std4</a> is probably more appropriate, thank you! :)</p>",
        "id": 338344686,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677508642
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Proving.20theorems.20about.20monads\">#mathlib4 &gt; Proving theorems about monads</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 338345312,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677508768
    },
    {
        "content": "<p>There are definitely a number of missing theorems for Range.forIn, but here's a proof anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ff'</span> <span class=\"o\">:</span> <span class=\"n\">ff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">forIn</span><span class=\"o\">,</span> <span class=\"n\">Std.Range.forIn</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">fuel</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fuel</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n      <span class=\"n\">Id.run</span> <span class=\"o\">(</span><span class=\"n\">Std.Range.forIn.loop</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">fuel</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Std.Range.forIn.loop</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Std.Range.forIn.loop</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span>\n    <span class=\"bp\">·</span> <span class=\"n\">next</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">Nat.le_add_left</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">next</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 338398617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677518283
    },
    {
        "content": "<p>Oh god I overcomplicated it so much hahaha, thank you so much! You are definitely correct that there are a lot of missing theorems for forIn :)</p>",
        "id": 338410070,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677520504
    },
    {
        "content": "<p>Doesn't it become pretty hard to even state these theorems as soon as you leave the <code>Id</code> monad?</p>",
        "id": 338410723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677520649
    },
    {
        "content": "<p>You can state how it computes on lawful monads</p>",
        "id": 338425764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677524549
    },
    {
        "content": "<p>i.e. <code>forIn_succ</code> type theorems</p>",
        "id": 338425804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677524560
    },
    {
        "content": "<p>that way we wouldn't have to unfold all the way to <code>Range.forIn.loop</code> which has a bunch of incomprehensible arguments, including <code>fuel</code> which you should never need to deal with directly</p>",
        "id": 338425958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677524603
    },
    {
        "content": "<p>Hi Mario, do you know why the <code>fuel</code> variable is even there? It seems that a version without <code>fuel</code> also works (shown below). Some other people suggested it might be that the compiler/VM can optimise away loops with <code>fuel</code>, but I can't seem to reproduce the behaviour.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Syntax: `loop f i stop step b hs`</span>\n<span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">stop</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">stop</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">b</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.sub_sub</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"n\">_</span> <span class=\"n\">hs</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.zero_lt_sub_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_not_ge</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ForInStep.done</span> <span class=\"n\">b</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">b</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ForInStep.yield</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"n\">stop</span> <span class=\"n\">step</span> <span class=\"n\">b</span> <span class=\"n\">hs</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n\n<span class=\"c1\">-- Syntax: `forIn range init f`</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">forIn</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">Range</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">range.step</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">init</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">loop</span> <span class=\"n\">f</span> <span class=\"n\">range.start</span> <span class=\"n\">range.stop</span> <span class=\"n\">range.step</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_iff_ne_zero.2</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 338450209,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677531987
    },
    {
        "content": "<p>my guess is either that <code>termination_by</code> was not ready when this code was written (I would not be surprised if it is one of the very early bits of lean 4) or that structural induction on natural numbers yields better defeqs for some scenario</p>",
        "id": 338450972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677532255
    },
    {
        "content": "<p>I see, maybe I will (later) suggest changing it to without the fuel variables as above, that should simplify some proofs since it reduces one variable/case</p>",
        "id": 338452136,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677532701
    },
    {
        "content": "<p>In this case I would not use that as a justification for changing the definition -- if you want to improve the proof experience you should prove some definitional lemmas instead</p>",
        "id": 338453752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677533298
    },
    {
        "content": "<p>So prove that my definition is equivalent to the existing one? (Also, I did some digging, and this is the original commit from 2020: <a href=\"https://github.com/leanprover/lean4/commit/eacdb5ff83135077d57239d2e1ba2ceeb785a59c\">https://github.com/leanprover/lean4/commit/eacdb5ff83135077d57239d2e1ba2ceeb785a59c</a>)</p>",
        "id": 338454117,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677533444
    },
    {
        "content": "<p>no, to prove that the existing definition has an unfolding lemma resembling yours</p>",
        "id": 338454457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677533587
    },
    {
        "content": "<p>Sorry, can you explain a bit more, I am a bit lost haha</p>",
        "id": 338455019,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677533806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Proving.20theorems.20about.20monads/near/338425764\">said</a>:</p>\n<blockquote>\n<p>You can state how it computes on lawful monads</p>\n</blockquote>\n<p>Can you explain this a bit more? For example, I want to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rangeDecompose</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">mid</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">mid</span> <span class=\"bp\">∧</span> <span class=\"n\">mid</span> <span class=\"bp\">≤</span> <span class=\"n\">stop</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isYield</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Range.forIn</span> <span class=\"o\">(</span><span class=\"n\">mkRange'</span> <span class=\"n\">start</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"n\">init</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Range.forIn</span> <span class=\"o\">(</span><span class=\"n\">mkRange'</span> <span class=\"n\">mid</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Id.run</span> <span class=\"o\">(</span><span class=\"n\">Range.forIn</span> <span class=\"o\">(</span><span class=\"n\">mkRange'</span> <span class=\"n\">start</span> <span class=\"n\">mid</span><span class=\"o\">)</span> <span class=\"n\">init</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Which just states that two for loops combined equals to the larger for loop - the <code>hf</code> condition just states that there are no <code>break</code> or other things. How should I generalise this for monads apart from <code>Id</code>?</p>",
        "id": 338475770,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677543022
    },
    {
        "content": "<p>Instead of using <code>Id.run</code> in the middle you should use <code>&gt;&gt;= </code> to connect the two parts</p>",
        "id": 338476918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677543668
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rangeDecompose</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">mid</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">mid</span> <span class=\"bp\">∧</span> <span class=\"n\">mid</span> <span class=\"bp\">≤</span> <span class=\"n\">stop</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Range.forIn</span> <span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">:</span><span class=\"n\">stop</span><span class=\"o\">]</span> <span class=\"n\">init</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Range.forIn</span> <span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">:</span><span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"n\">init</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Range.forIn</span> <span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">:</span><span class=\"n\">stop</span><span class=\"o\">]</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 338477135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677543809
    },
    {
        "content": "<p>The <code>hf</code> assumption is a bit awkward / unrealistic for arbitrary monads, but you can do it using <code>SatisfiesM</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ForInStep.isYield</span> <span class=\"o\">:</span> <span class=\"n\">ForInStep</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">yield</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rangeDecompose</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">mid</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">mid</span> <span class=\"bp\">∧</span> <span class=\"n\">mid</span> <span class=\"bp\">≤</span> <span class=\"n\">stop</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">SatisfiesM</span> <span class=\"n\">ForInStep.isYield</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">Range.forIn</span> <span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">:</span><span class=\"n\">stop</span><span class=\"o\">]</span> <span class=\"n\">init</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Range.forIn</span> <span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">:</span><span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"n\">init</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Range.forIn</span> <span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">:</span><span class=\"n\">stop</span><span class=\"o\">]</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 338477737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677544103
    },
    {
        "content": "<p>Oh wow, I just learned like 20 new syntax in this code or something. Thanks so much! :D</p>",
        "id": 338479448,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677544958
    }
]