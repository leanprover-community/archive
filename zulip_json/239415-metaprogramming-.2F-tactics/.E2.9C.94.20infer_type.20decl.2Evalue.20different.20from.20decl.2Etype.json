[
    {
        "content": "<p>Hi,</p>\n<p>Sometimes I have noticed that the proof term type (as inferred by <code>tactic.infer_type</code>) is different from the type of a given theorem. Not by a lot, but still.</p>\n<p>I have a hard time finding a minimal working example, so this is some real-life thing I have stumbled upon:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounds</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">myth</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_least</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">|</span> <span class=\"mi\">30</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"mi\">42</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">47</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"mi\">39</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int.coe_nat_le.1</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">check_decl_type</span> <span class=\"o\">(</span><span class=\"n\">decl_nm</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">env.get</span> <span class=\"n\">decl_nm</span><span class=\"o\">,</span>\n  <span class=\"n\">decl_ty</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">decl.value</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">expr.alpha_eqv</span> <span class=\"n\">decl.type</span> <span class=\"n\">decl_ty</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">check_decl_type</span> <span class=\"bp\">`</span><span class=\"n\">myth</span>\n<span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 269574192,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1643291520
    },
    {
        "content": "<p>Without more information that's not very surprising, for example the type of a theorem could be a specialization of the inferred type of its proof.</p>",
        "id": 269574981,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643291861
    },
    {
        "content": "<p>Wait, I think that's wrong. But it's definitely true that the inferred type of the proof will often not be <em>alpha-equivalent</em> to the theorem statement. For example in <code>lemma x : 1 + 1 = 2 := rfl</code> the inferred type of the proof will be either <code>1 + 1 = 1 + 1</code> or <code>2 = 2</code>.</p>",
        "id": 269593125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643298965
    },
    {
        "content": "<p>Please forgive my ignorance but: how is it possible?  the type of <code>lemma x</code> <em>has to be</em> the same as the one of its proof term, hasn't it?</p>\n<p>in your example, basically the elaborator fills out the blanks by <code>lemma x : 1 + 1 = 2 := @rfl.{1} nat (has_add.add.{0} nat nat.has_add (has_one.one.{0} nat nat.has_one) (has_one.one.{0} nat nat.has_one))</code></p>\n<p>so it really does <code>lemma x : 1 + 1 = 2 := &lt;rfl \"1+1\"&gt;</code>, so to speak. Hence I understand why <code>1 + 1 = 1 + 1</code>, but not why the right hand side can be recasted as a <code>2</code></p>",
        "id": 269598888,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1643301263
    },
    {
        "content": "<p>The types are definitionally equal, but not alpha equivalent</p>",
        "id": 269599279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643301419
    },
    {
        "content": "<p>there is a rule that says that if <code>x : t</code> and <code>t</code> is definitionally equal to <code>t'</code>, then <code>x : t'</code> also</p>",
        "id": 269599343,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643301439
    },
    {
        "content": "<p>and there are a whole bunch of definitional equality rules between types (or terms) that are not alpha-equivalent; for instance replacing something by its definition</p>",
        "id": 269599515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643301498
    },
    {
        "content": "<p>Alright, thanks! I didn't know about this \"definitional equality\" concept. So in your example, I suppose that somewhere <code>2</code> is defined as <code>1+1</code>, and the typechecker is able to reduce all constants to their definition and compare able to able, correct?</p>",
        "id": 269625108,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1643311877
    },
    {
        "content": "<p>Section 3.7 of <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">the reference manual</a> talks about definitional equality, and I just wrote a far more informal explanation about it in <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_B/equality.html#definitional-equality\">my course notes</a></p>",
        "id": 269698528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643356577
    },
    {
        "content": "<p>Do you know if by any chance there Is there a Lean function to check whether or not two <code>expr</code> are *definitionally equal\"? it seems that it is what I am after</p>",
        "id": 269709729,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1643362826
    },
    {
        "content": "<p><code>tactic.is_def_eq</code>?</p>",
        "id": 269709997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643362977
    },
    {
        "content": "<p>Indeed! Thanks a lot!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">check_decl_type</span> <span class=\"o\">(</span><span class=\"n\">decl_nm</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">env.get</span> <span class=\"n\">decl_nm</span><span class=\"o\">,</span>\n  <span class=\"n\">decl_ty</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">decl.value</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"s2\">\"α-eq \"</span><span class=\"bp\">++</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">expr.alpha_eqv</span> <span class=\"n\">decl.type</span> <span class=\"n\">decl_ty</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"s2\">\"True\"</span> <span class=\"k\">else</span> <span class=\"s2\">\"False\"</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">tactic.is_def_eq</span> <span class=\"n\">decl.type</span> <span class=\"n\">decl_ty</span><span class=\"o\">,</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"def-eq:</span><span class=\"se\">\\t</span><span class=\"s2\">True\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">tactic.trace</span> <span class=\"s2\">\"def-eq:</span><span class=\"se\">\\t</span><span class=\"s2\">False\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">check_decl_type</span> <span class=\"bp\">`</span><span class=\"n\">x</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">α-eq False</span>\n<span class=\"cm\">def-eq: True</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 269712389,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1643364237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"324140\">Xavier Martinet</span> has marked this topic as resolved.</p>",
        "id": 269712582,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643364359
    }
]