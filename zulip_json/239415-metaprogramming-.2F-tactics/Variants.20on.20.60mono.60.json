[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Would you be interested in trying out my <a href=\"#narrow/stream/113488-general/topic/Proofs.20that.20should.20be.20automatic/near/297484869\">work-in-progress</a> tactic <a href=\"https://github.com/hrmacbeth/math2001/blob/edc8fed22e6a8f600974c081fc858d585399ff2e/src/tactics/inequalities.lean#L119\"><code>ineq_congr</code></a> on parts of <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/New.20tactic.3A.20.60positivity.60/near/300565922\">the Szemeredi</a> argument?  It should deal with some of the <code>mul_le_mul_of_nonneg_left</code> and similar.</p>",
        "id": 300576208,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664047834
    },
    {
        "content": "<p>This is supposed to be a tactic which turns a goal state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>to the goal state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>(so it's kind of a cousin of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#mono\">tactic#mono</a>)</p>",
        "id": 300576833,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664048328
    },
    {
        "content": "<p>Absolutely! I could feel that my uses of <code>positivity</code> were what you expected so I was hoping your fancy new tactic would help further.</p>",
        "id": 300579221,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664050144
    },
    {
        "content": "<p>Great.  Looking forward to your experiments!</p>",
        "id": 300579361,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664050251
    },
    {
        "content": "<p>My hope a year ago was to get SRL merged rather quickly (what a dream...). Now I see it's a perfect test case for automation, especially those two ugly files that pile up calculations.</p>",
        "id": 300579418,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664050285
    },
    {
        "content": "<p>So I am now seeking to shorten the proof significantly by writing more automation (hence the many <code>positivity</code> extensions I PRed recently).</p>",
        "id": 300579531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664050354
    },
    {
        "content": "<p>What does the Isabelle version look like? Do they have some of this automation already?</p>",
        "id": 300579533,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664050355
    },
    {
        "content": "<p>It's an unfair comparison because the version of SRL they formalised only needs a watered down version of those calculations.</p>",
        "id": 300583166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664053654
    },
    {
        "content": "<p><a href=\"https://www.isa-afp.org/theories/szemeredi_regularity/#Szemeredi.html#Szemeredi.exists_refinement|fact\">This Isabelle lemma</a> roughly corresponds to our two files <a href=\"https://github.com/leanprover-community/mathlib/tree/szemeredi/src/combinatorics/szemeredi/chunk.lean\"><code>chunk</code></a> and <a href=\"https://github.com/leanprover-community/mathlib/tree/szemeredi/src/combinatorics/szemeredi/increment.lean\"><code>increment</code></a></p>",
        "id": 300583841,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664054265
    },
    {
        "content": "<p>By the way, is <code>ineq_congr</code> meant to be \"fancy\"? That is, will it leave a possibly changing goal and thus should only be followed by other \"fancy\" tactics like <code>simp</code> and <code>linarith</code>?</p>",
        "id": 300584816,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664054914
    },
    {
        "content": "<p>I don't follow, sorry, what do you mean by \"a possibly changing goal\"?</p>",
        "id": 300585707,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664055405
    },
    {
        "content": "<p>I think Yaël means that \"fancy\" tactics have output which might change with different versions of mathlib (like <code>simp</code> with a changing <code>simp</code> set), and we generally recommend that such tactics should only be followed by other fancy tactics. Whereas <code>refine</code> would be a \"simple\" tactic, and a tactic sequence like <code>simp, refine</code> would be prone to breakage.</p>",
        "id": 300595123,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1664065232
    },
    {
        "content": "<p>I see.  I would imagine this to be a non-\"fancy\" tactic, safe to use at any stage of a proof.  (As <code>congr</code> is.). But this question seems implementation-dependent to me so I think it's too early to say for sure.  This is just a few lines of prototype code, the point is just to confirm or refute the idea that it's a tactic we'd use -- it would get completely rewritten before joining mathlib.</p>",
        "id": 300602476,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664074584
    }
]