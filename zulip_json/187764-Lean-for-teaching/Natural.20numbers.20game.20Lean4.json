[
    {
        "content": "<p>Hi,</p>\n<p>I recently tried playing around with NNG4 and I found it very difficult to parse! </p>\n<p>I remember really enjoying NNG when I first learned Lean3, and looking back the simplicity of each page really helped. With the Lean4 NNG, I'm just finding it hard to keep track of so many things on the page.</p>\n<p>I understand that it must have taken a lot of effort to get this site running (which I'm grateful for), but I think that the pages are really cluttered and difficult to learn from. IMO, the Lean3 NNG UI was much more conducive to learning. </p>\n<p>I'm curious to hear what other people think about this.</p>",
        "id": 389487945,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694021920
    },
    {
        "content": "<p>Here are the first levels of \"Addition World\" on the two sites for quick reference:</p>\n<p><a href=\"/user_uploads/3121/UwiuhxpTrp3sW2qOsj5qeLdQ/Screenshot-2023-09-06-at-1.41.48-PM.png\">Screenshot-2023-09-06-at-1.41.48-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UwiuhxpTrp3sW2qOsj5qeLdQ/Screenshot-2023-09-06-at-1.41.48-PM.png\" title=\"Screenshot-2023-09-06-at-1.41.48-PM.png\"><img src=\"/user_uploads/3121/UwiuhxpTrp3sW2qOsj5qeLdQ/Screenshot-2023-09-06-at-1.41.48-PM.png\"></a></div><p><a href=\"/user_uploads/3121/X-N9twdp7ddKthrw4RKXKne1/Screenshot-2023-09-06-at-1.42.02-PM.png\">Screenshot-2023-09-06-at-1.42.02-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/X-N9twdp7ddKthrw4RKXKne1/Screenshot-2023-09-06-at-1.42.02-PM.png\" title=\"Screenshot-2023-09-06-at-1.42.02-PM.png\"><img src=\"/user_uploads/3121/X-N9twdp7ddKthrw4RKXKne1/Screenshot-2023-09-06-at-1.42.02-PM.png\"></a></div>",
        "id": 389488615,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694022218
    },
    {
        "content": "<p>What's the difference? Is it just that NNG3 had folded-up tactics and theorem names?</p>",
        "id": 389489034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694022371
    },
    {
        "content": "<p>Not just that, there is \"Proof History\", \"Objects\", \"Assumptions\". There is a commentary going on above the goal window and the Goal window looks nothing like in VSCode.</p>",
        "id": 389489405,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694022526
    },
    {
        "content": "<p>You can click on the editor mode button if you want to get back an editor.</p>",
        "id": 389489672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694022633
    },
    {
        "content": "<p>I think you are too much used to the VSCode interface to be impartial. You are so used to it that you forgot it was also very complicated to understand.</p>",
        "id": 389489767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694022682
    },
    {
        "content": "<p>but that could be accomplished by having a page explain the infoview :p<br>\ninfoview is a pretty well-designed UI, and if it's the primary way people interact with Lean I'd rather be introduced to it quickly as a beginner</p>",
        "id": 389490086,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694022782
    },
    {
        "content": "<p>but it's probably good to have a choice, since I imagine some people would prefer a softer introduction</p>",
        "id": 389490183,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694022811
    },
    {
        "content": "<p>Yeah, switching to the editor mode is the first thing I did xD</p>\n<p>But isn't VSCode the defacto method of interacting with Lean (I so wish it wasn't)?</p>",
        "id": 389490812,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694023070
    },
    {
        "content": "<p>I just noticed that even the Goals are split in two: \"Current Goal\" and \"Further Goals\" :(</p>",
        "id": 389491721,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694023405
    },
    {
        "content": "<p>And there is a third \"Goal\" at the bottom :(</p>",
        "id": 389491874,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694023452
    },
    {
        "content": "<p>I really like that. In NNG3 I had to emphasize that tactics only acted on the top goal.</p>",
        "id": 389492008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694023506
    },
    {
        "content": "<p>For me, NNG3 was the perfect learning guide! I never had students complain about any aspect of it.</p>",
        "id": 389493616,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694024206
    },
    {
        "content": "<p>My gripe with NNG4 is just with the UI. The site is really cool and clearly a lot of work went into it. But why change the UI so drastically?</p>",
        "id": 389494007,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694024393
    },
    {
        "content": "<p>honestly having the objects and assumptions and current goal and future goals separated seems fine to me. a couple UI things I don't love:</p>\n<ul>\n<li>the goal is below the input line (?) which feels quite confusing to me, since I have to go back and forth from top to bottom to get all the information</li>\n<li>in editor mode, the <code>example</code> line doesn't actually correspond to current tactic state: <a href=\"/user_uploads/3121/Zm4Lf96ChYHdYQ1BBfBgyLbm/image.png\">image.png</a><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Zm4Lf96ChYHdYQ1BBfBgyLbm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Zm4Lf96ChYHdYQ1BBfBgyLbm/image.png\"></a></div></li>\n<li>black text on blue background is pretty hard to read. if anything, I'd prefer the <em>code</em> be distinguished from the text, not the text be distinguished from the code. I also find the different background color on <code>code snippet</code>s to be very distracting</li>\n</ul>\n<p>thoughts?</p>",
        "id": 389494728,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694024687
    },
    {
        "content": "<p>I am certainly not an expert in UI, I just design the levels. I'll mention again that in September there will be a big revamp/expansion of the game but at the end of the day I'm just writing lean code and it's lean4game which is translating it into a website</p>",
        "id": 389495251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694024945
    },
    {
        "content": "<p>is lean4game still running lean on the host server instead of in browser?</p>",
        "id": 389495708,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694025127
    },
    {
        "content": "<p>Yes, unless you managed to compile Lean 4 to WASM (with a reasonable size) and forgot to tell us.</p>",
        "id": 389495851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694025198
    },
    {
        "content": "<p>got it, I'll maybe put together a PR on that repo then</p>",
        "id": 389496137,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694025317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span> thank you for the feedback! You will be pleased to know that many of the concerns have already been addressed when we redesigned the UI after that first draft, in particular decluttering it. This basically just waits on deployment.</p>\n<p>Some thoughts on various other points mentioned here:</p>",
        "id": 389543756,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1694050350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Natural.20numbers.20game.20Lean4/near/389490086\">said</a>:</p>\n<blockquote>\n<p>but that could be accomplished by having a page explain the infoview :p<br>\ninfoview is a pretty well-designed UI, and if it's the primary way people interact with Lean I'd rather be introduced to it quickly as a beginner</p>\n</blockquote>\n<p>In which case you can just download MIL and learn lean that way ;)</p>",
        "id": 389544025,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1694050501
    },
    {
        "content": "<blockquote>\n<p>honestly having the objects and assumptions and current goal and future goals separated seems fine to me. a couple UI things I don't love:</p>\n<ul>\n<li>the goal is below the input line (?) which feels quite confusing to me, since I have to go back and forth from top to bottom to get all the information</li>\n</ul>\n</blockquote>\n<p><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> That's already done, too. I had the same strong feelings about this <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n<blockquote>\n<ul>\n<li>in editor mode, the <code>example</code> line doesn't actually correspond to current tactic state: <a href=\"/user_uploads/3121/Zm4Lf96ChYHdYQ1BBfBgyLbm/image.png\">image.png</a></li>\n</ul>\n</blockquote>\n<p>I have to look at this. That is definitely related to <a href=\"https://github.com/leanprover-community/lean4game/issues/84\">lean4game#84</a>.</p>\n<blockquote>\n<ul>\n<li>black text on blue background is pretty hard to read. if anything, I'd prefer the <em>code</em> be distinguished from the text, not the text be distinguished from the code. I also find the different background color on <code>code snippet</code>s to be very distracting</li>\n</ul>\n</blockquote>\n<p>I always thought that blue background is not ideal for anybody who has problems with lower contrasts... So far I haven't changed the default values but that's a trivial change.</p>",
        "id": 389545772,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1694051381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Natural.20numbers.20game.20Lean4/near/389543756\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> thank you for the feedback! You will be pleased to know that many of the concerns have already been addressed when we redesigned the UI after that first draft, in particular decluttering it. This basically just waits on deployment.</p>\n<p>Some thoughts on various other points mentioned here:</p>\n</blockquote>\n<p>This is great! I'm really looking forward to it.</p>",
        "id": 389546037,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694051511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Natural.20numbers.20game.20Lean4/near/389495708\">said</a>:</p>\n<blockquote>\n<p>is lean4game still running lean on the host server instead of in browser?</p>\n</blockquote>\n<p>Yes,  and it's unlikely that will change. But it means you will be able to play the new design on your mobile, once that's live :)</p>\n<p>and please feel welcomed to submit PRs! I'm also happy to talk about it and any open issues we know of.</p>",
        "id": 389546122,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1694051535
    },
    {
        "content": "<p>thanks for the response!! and for maintaining NNG post-port :)</p>",
        "id": 389547009,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694051988
    },
    {
        "content": "<p>I think that ability to play on mobile is fabulous news</p>",
        "id": 389577493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694066456
    },
    {
        "content": "<p>Yes, that will be a hit with students!</p>",
        "id": 389577588,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694066494
    },
    {
        "content": "<p>anyone knows what i should do when <a href=\"https://github.com/leanprover-community/lean4game/issues/102\">https://github.com/leanprover-community/lean4game/issues/102</a>...?</p>",
        "id": 389777869,
        "sender_full_name": "Hypatia du Bois-Marie",
        "timestamp": 1694131728
    },
    {
        "content": "<p>I dont think codespaces has ever been setup at all to start the game locally, yet. I'll have a look later and see if I can set that up</p>",
        "id": 389818819,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1694154606
    },
    {
        "content": "<p>Was the removal of the proposition worlds (from NNG3 to NNG4) done to try to refocus the game on ℕ? I thought function and proposition world were a cheeky (fun) way of showing Curry–Howard correspondence.</p>",
        "id": 400553186,
        "sender_full_name": "Treq",
        "timestamp": 1699283835
    },
    {
        "content": "<p>Yes and yes. I have always had terrible problems with the <code>apply</code> tactic, and I thought that by showing it all in this level of abstraction would help. But in NNG4 I decided a different approach -- persuade someone to write <code>apply ... at</code>. Preliminary testing seemed to indicate that this was a really good idea, mathematicians understand it much better, so I didn't need to stress the analogue that a proof is a function, so I ripped out all the abstract proposition stuff precisely, as you say, because it's not about numbers. Think of it as an opportunity -- there's now plenty of room for a logic game! The issue is that every proof in the logic game is <code>tauto</code>, whereas by the time to have got to advanced addition world one has to sometimes start thinking.</p>",
        "id": 400590293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699295708
    },
    {
        "content": "<p>In my experience it's the CS people who like the abstract Prop stuff more, and the maths people who complain about it, and I am very much targetting the maths people.</p>",
        "id": 400590352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699295735
    },
    {
        "content": "<p>I'm a beginner, but I assume once you're doing predicate logic you can't just tauto all of it. If I understand the description in NNG4, tauto can prove anything whose semantics can be denoted by a truth table.</p>\n<p>Maybe a separate logic game would be fun. I wonder if Lean would let me create puzzles in sub-structural or multiple-valued logics in a way that's still ergonomic/fun. I'm not sure if anybody has any intuition if such a project would be fruitful. Might be a good back-burner project as I learn some lean :)</p>",
        "id": 400592746,
        "sender_full_name": "Treq",
        "timestamp": 1699296863
    },
    {
        "content": "<p>I've been playing around with the idea of a set theory game--which would be pretty close to a logic game, since, for example, complement, intersection, and union are closely related to \"not\", \"and\", and \"or\", and intersections and unions of families of sets are closely related to \"for all\" and \"there exists\".</p>",
        "id": 400646817,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1699323810
    },
    {
        "content": "<p>Sounds fun! Plus, it would give the interested user a chance to see how basic logical connectors are implemented as inductive types in Lean. Let me know if you need more people to work on this (→ a logic game) <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 400648701,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1699324756
    },
    {
        "content": "<p>That's not a bad idea, but of course you'd still have to introduce FOL if you're going to be foundational.  Set theory (any of its various forms) is not just theories of sets; they are theories of sets and propositions. Pretty quickly you'll have to create an account of the rules for forming first-order formulas. Which can be type theoretic, but amounts to some ambient logic. At least that's how I understand what's happening...</p>\n<p>One of the things that makes type theory interesting is that first-order logic in type theory is just a special case of the type-forming rules. A proposition is merely a certain type; to prove it is to exhibit an element of that type. Set theory doesn't have that, so you need specify how all logical formulas are to be interpreted. Which <em>I think</em> means either assuming how that's done or starting with a logic game that turns into a set-theory game.</p>",
        "id": 400648950,
        "sender_full_name": "Treq",
        "timestamp": 1699324873
    },
    {
        "content": "<p>Treq, I think you misunderstood the proposal. I guess Dan met naive set theory, not set theory as a foundation.</p>",
        "id": 400650974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699325977
    },
    {
        "content": "<p>SI just stumbled across this: though it would need to update it for lean 4. <a href=\"https://lean-lang.org/logic_and_proof/sets_in_lean.html\">https://lean-lang.org/logic_and_proof/sets_in_lean.html</a></p>\n<p>Patrick; yeah, I suppose that's right. NNG4 introduces and uses the tactics that manipulate logical formulas without really being a logic game. So there's no reason you can't do the same with a set theory game.</p>",
        "id": 400651838,
        "sender_full_name": "Treq",
        "timestamp": 1699326370
    },
    {
        "content": "<p>Logic and proof is unlikely to be updated to Lean 4 soon, but that section should be very close to the corresponding section in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a></p>",
        "id": 400652185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699326487
    },
    {
        "content": "<p>Yes, Patrick is right.  What I have in mind is naive set theory, and at a pretty elementary level.  The idea would be to use set theory as a vehicle to introduce some basic Lean tactics and theorems.</p>",
        "id": 400742233,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1699364531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> That sounds like a fun game to me. I'd definitely play!</p>",
        "id": 400752524,
        "sender_full_name": "Treq",
        "timestamp": 1699367799
    },
    {
        "content": "<p>A \"logic game\" and a rudimentary \"naive set theory game\" are planned as parts of the Formaloversum game, a first version of which can also be found at <a href=\"https://adam.math.hhu.de\">https://adam.math.hhu.de</a>. My aim for this game is to cover topics from the first year of lecture courses at a typical German university, in the order in which they typically appear — regardless of the merits of that choice of topics or that particular order. I would simply like students to be able to play this alongside of their lectures.</p>",
        "id": 401143588,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1699531791
    },
    {
        "content": "<p>The \"logic game\" is ready for consumption. It consist of the three planets Logos, Implis, and Quantus, and ends with a formalization of the drinker's paradox. If 'apply at' gets included in mathlib, I would be keen to rewrite the levels accordingly.</p>",
        "id": 401143687,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1699531816
    },
    {
        "content": "<p>The \"naive set theory planet\" is not ready. It will be rewritten.</p>",
        "id": 401143713,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1699531828
    },
    {
        "content": "<p>The development of the Formaloversum has stalled a bit, simply because I did not sufficiently anticipate how much work would need to go into the Lean game engine. But we are still hopeful we can make significant progress next year.</p>",
        "id": 401143733,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1699531839
    },
    {
        "content": "<p><code>apply at</code> is already in mathlib.</p>",
        "id": 401144981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699532387
    },
    {
        "content": "<p>Sorry, I missed that. This community is too fast for me.</p>",
        "id": 401146008,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1699532829
    },
    {
        "content": "<p>Are there any circumstances in which <code>... := by exact expr</code> would differ from <code>... := expr</code>? where <code>expr</code> is just some well formed expression?</p>",
        "id": 403446182,
        "sender_full_name": "Treq",
        "timestamp": 1700593912
    },
    {
        "content": "<p>Sure: <a href=\"#narrow/stream/113489-new-members/topic/tactic.20.60by.20exact.60.20vs.20proof.20term/near/385926214\">this</a> is a recent example.</p>",
        "id": 403447589,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700594528
    },
    {
        "content": "<p>Ah, awesome. I should've searched first! Thanks for your help.</p>",
        "id": 403452470,
        "sender_full_name": "Treq",
        "timestamp": 1700596206
    },
    {
        "content": "<p>So the Peano axioms are used to define MyNat, right? Would it be correct to not think of them as axioms in this context? MyNat is built on-top of some type-forming axioms, so it's not like you could alter the definition to create an inconsistent system that proves <code>False</code>. We can't prove that calc of constructions is consistent, but when defining MyNat we haven't taken on any additional burden in that regard?</p>",
        "id": 408479337,
        "sender_full_name": "Treq",
        "timestamp": 1702846093
    },
    {
        "content": "<p>Sure you can think of them as axioms. They don't have proofs after all. We've just assumed CIC</p>",
        "id": 408483575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702850396
    },
    {
        "content": "<p>There are equiconsistency results. Mario's thesis is a good place to start if you're interested in this: <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">https://github.com/digama0/lean-type-theory/releases/tag/v1.0</a></p>",
        "id": 408489591,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702856111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Natural.20numbers.20game.20Lean4/near/408483575\">said</a>:</p>\n<blockquote>\n<p>Sure you can think of them as axioms. They don't have proofs after all. We've just assumed CIC</p>\n</blockquote>\n<p>I suppose that's my question. Doesn't CIC just give us MyNat? That feels sort of proof-like to me.</p>\n<p>This is sort of how I'm understanding this at the moment: Lean's dependent type theory has type forming rules that let you form a new type from constants and functions that create terms of that type. This is what allows NNG4 write something like <code>inductive MyNat where ...</code> and Lean can interpret MyNat as an inductive type. Is that not a sort of constructive proof from the point of view of CIC or am I thinking about this poorly?</p>\n<p>My 1000\" view is that Lean offers dependent function types, inductive types, and a hierarchy of universes with Prop at the bottom as it's axioms. Thereafter deductive rules basically define how terms are constructed and simplified. This foundation is enough to encode the propositional operators like <code>∧ ∨ ¬ → ↔</code> and objects like <code>MyNat</code> but there are things this simply can't do. For example, to encode a tactic like <code>xyzzy</code>, your system requires an additional axiom - after which it's easy to show your system is no longer sound.</p>",
        "id": 408631579,
        "sender_full_name": "Treq",
        "timestamp": 1702912463
    },
    {
        "content": "<p>Yes CIC just gives us MyNat.</p>",
        "id": 408658765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702921315
    },
    {
        "content": "<p>The things that a system \"just gives us\" are usually called axioms. If rules for inductives were tweaked just a bit it would allow you to have types like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>from which one can prove a contradiction.</p>",
        "id": 408713055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702946734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Natural.20numbers.20game.20Lean4/near/408713055\">said</a>:</p>\n<blockquote>\n<p>[...] from which one can prove a contradiction.</p>\n</blockquote>\n<p>Ah, I see. Though, just to clarify... it's true (as far as we know) that introducing a new inductives (as they exist today) doesn't allow us to prove contradictions. It seems like otherwise we would be forever wondering if a formalization is hiding a contradiction.</p>",
        "id": 408723100,
        "sender_full_name": "Treq",
        "timestamp": 1702950986
    },
    {
        "content": "<p>This is the content of my paper <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a></p>",
        "id": 408729376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702953240
    },
    {
        "content": "<p>it's a surprisingly nontrivial claim (actually I suppose it's not that surprising that the claim would be complicated to prove). Probably an even better argument than the proof is the social proof: It's used as the basis for a proof assistant so there are many people with a vested interest in ensuring you can't prove false in it, and if the theory happens to be broken we'll fix the theory until it isn't broken anymore</p>",
        "id": 408729813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702953374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Natural.20numbers.20game.20Lean4/near/408729376\">said</a>:</p>\n<blockquote>\n<p>This is the content of my paper <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a></p>\n</blockquote>\n<p>Awesome. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> linked it last night and I've started reading it, though I'm a relative beginner in all this so it's a slow going process.</p>",
        "id": 408729930,
        "sender_full_name": "Treq",
        "timestamp": 1702953412
    },
    {
        "content": "<p>Also, yes - I don't really think the theory can be broken in any serious way. Or at least, I don't think I can. I'm not coming at this from a perspective of skepticism, just one curiosity. I've been reading a bit about syntax vs semantics and the role of axioms in various deductive systems. Just making sure I have the right ideas about what parts of the language are functioning in which capacity.</p>",
        "id": 408730714,
        "sender_full_name": "Treq",
        "timestamp": 1702953656
    },
    {
        "content": "<p>I come from the perspective of someone who has found soundness bugs in lean and other systems in the past. Without a formal proof I don't have a very strong belief that the system is actually completely correct, while the social proof is more a reflection of the beliefs and goals of the community around the tool. (Which is part of why I've been working on <a href=\"https://github.com/digama0/lean4lean\">https://github.com/digama0/lean4lean</a> as a formalization of <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a>, because I am still not entirely convinced even though I am the one who wrote the paper proof.)</p>",
        "id": 408744923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702956510
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> is not really beginner reading though. Regarding terminology, in CIC we do not usually call inductive types axioms (even though with my proof theory hat on they absolutely are), and reserve that term for constants that have no \"computation rules\" associated to them (and in lean these are the ones you construct with the <code>axiom</code> keyword). Lean 4 also muddies the water here because it has a thing called <code>opaque</code> which are constants with no computation rules, but which do not incur any additional soundness burden because they are typechecked like a <code>def</code>, so you can only inhabit types that are already inhabitable.</p>",
        "id": 408746480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702956772
    },
    {
        "content": "<p>Thanks you for your time. I think you've answered my questions very well and given me a bit of extra context too. :)</p>",
        "id": 408933750,
        "sender_full_name": "Treq",
        "timestamp": 1702992418
    }
]