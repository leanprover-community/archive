[
    {
        "content": "<p>I want to ask my students to solve the following exercise using the <code>induction</code> tactic in <code>Lean 3</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fac</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fac_pos</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fac</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It works as expected but, for some reason, when I start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>the tactic state that I get is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">nat.zero</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fac</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">case</span> <span class=\"n\">nat.succ</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fac</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fac</span> <span class=\"n\">n.succ</span>\n</code></pre></div>\n<p>and I would like the <code>n.succ</code> at the end to be <code>succ n</code> or, better yet, <code>(n + 1)</code>.</p>\n<p>How can I do that? It certainly works that way in the NNG :-)</p>",
        "id": 370335690,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1687942383
    },
    {
        "content": "<p>Does induction' help?</p>",
        "id": 370354959,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687945809
    },
    {
        "content": "<p>I get an <code>unknown identifier 'induction''</code> message .</p>\n<p>Is this a tactic that should be in the library? I hope I did not mess anything up <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 370358055,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1687946316
    },
    {
        "content": "<p><code>n.succ</code> is the way of writing <code>(succ n)</code> in Lean. NNG was changed to make it look friendlier to new users.<br>\nIf you want your students to not see this, you can add <code>attribute [pp_nodot] nat.succ</code> in a file that is imported by the students' file. That should print it as <code>succ n</code>.</p>",
        "id": 370359834,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687946608
    },
    {
        "content": "<p>The lemma which turns <code>succ n</code> (which is syntactically equal to <code>n.succ</code>) into <code>n + 1</code> is called <code>succ_eq_add_one</code> so rewrite that (or possibly <code>nat.succ_eq_add_one</code>)</p>",
        "id": 370360152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687946658
    },
    {
        "content": "<p>There should really be some kind of lemma saying that to prove something for all nats you only need to do it for 0 and n+1 (rather than n.succ), this should be a lemma <code>foo</code> and then you would be able to do <code>induction n using foo</code> or something (I'm already forgetting lean 3 syntax)</p>",
        "id": 370360407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687946708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/An.20exercise.20using.20induction/near/370359834\">said</a>:</p>\n<blockquote>\n<p><code>n.succ</code> is the way of writing <code>(succ n)</code> in Lean. NNG was changed to make it look friendlier to new users.</p>\n</blockquote>\n<p>OK, that's what I suspected was going on but it clarifies things to have it confirmed, thanks <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span> </p>\n<blockquote>\n<p>If you want your students to not see this, you can add <code>attribute [pp_nodot] nat.succ</code> in a file that is imported by the students' file. That should print it as <code>succ n</code>.</p>\n</blockquote>\n<p>Yes, it does! Thank you very much <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<p>I was aware of <code>n.succ</code> being the way of writing <code>succ n</code> in Lean, and those of my students who are CS majors will certainly have no issue with that. But the course is mostly directed to math majors, so I think I will follow the notation used in NNG.</p>\n<p>Thanks for the explanation!</p>",
        "id": 370363859,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1687947284
    },
    {
        "content": "<p>We really need to turn on a better default induction principle for <code>Nat</code> in mathlib4...</p>",
        "id": 370365516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687947520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/An.20exercise.20using.20induction/near/370360407\">said</a>:</p>\n<blockquote>\n<p>There should really be some kind of lemma saying that to prove something for all nats you only need to do it for 0 and n+1 (rather than n.succ), this should be a lemma <code>foo</code> and then you would be able to do <code>induction n using foo</code> or something </p>\n</blockquote>\n<p>I see, I will look into that, thanks!</p>\n<blockquote>\n<p>(I'm already forgetting lean 3 syntax)</p>\n</blockquote>\n<p>I was happy to teach formal proofs in Lean 3 this semester, but next time will be using Lean 4 <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 370367345,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1687947818
    },
    {
        "content": "<p>Everyone knows about this, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"c1\">-- yucky goals about `P Nat.zero` and `P (Nat.succ n)`</span>\n  <span class=\"n\">all_goals</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[eliminator]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.rec'</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.rec</span> <span class=\"n\">zero</span> <span class=\"n\">add_one</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"c1\">-- yummy goals about `P 0` and `P (n + 1)`</span>\n  <span class=\"n\">all_goals</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm sort of surprised no one has installed it in mathlib4 yet.</p>",
        "id": 370369951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687948158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/An.20exercise.20using.20induction/near/370365516\">said</a>:</p>\n<blockquote>\n<p>We really need to turn on a better default induction principle for <code>Nat</code> in mathlib4...</p>\n</blockquote>\n<p>Do you think it is possible to write it in a way that makes everybody happy?</p>\n<p>By that I mean, the induction principle as it is (In Lean 3) was working perfectly in my example. I was just unhappy with the notation because it is not the same as the one that I have been using for years, but maybe I am being too rigid about that?</p>\n<p>It's not a very serious question, I am just curious  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 370369987,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1687948163
    },
    {
        "content": "<p>What is there to be unhappy about? <code>Nat.zero</code> and <code>Nat.succ</code> should neither be seen nor heard. :-)</p>",
        "id": 370370960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687948266
    },
    {
        "content": "<p>In NNG I hacked the <code>induction</code> tactic so that after every application it replaced all <code>Nat.zero</code>s with <code>0</code>, because this was super-confusing for new users.</p>",
        "id": 370427077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687958357
    },
    {
        "content": "<p>I believe that replacing the default eliminator like in Scott's example causes bugs in <code>cases</code>.  But for teaching, you can wrap Scott's induction principle under some other name like <code>simple_induction</code> and then tell the students that the tactic for induction is called <code>simple_induction</code>.  I took this approach from <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>.</p>",
        "id": 370432063,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687959241
    },
    {
        "content": "<p>When I borrowed this approach from Rob I also set it up to run <code>push_cast</code> on each of the cases.  Here it is, in my course's repo:<br>\n<a href=\"https://github.com/hrmacbeth/math2001/blob/f57fd5651d58408238d6d4af5e4fb601dd4f5a12/Library/Tactic/Induction.lean#L49\">https://github.com/hrmacbeth/math2001/blob/f57fd5651d58408238d6d4af5e4fb601dd4f5a12/Library/Tactic/Induction.lean#L49</a><br>\nAnd now the standard <code>n * (n + 1) / 2</code> induction problem works as stated, without any <code>succ</code>-wrangling or Nat-division problems!<br>\n<a href=\"https://github.com/hrmacbeth/math2001/blob/f57fd5651d58408238d6d4af5e4fb601dd4f5a12/Math2001/06_Induction/02_Recurrence_Relations.lean#L71\">https://github.com/hrmacbeth/math2001/blob/f57fd5651d58408238d6d4af5e4fb601dd4f5a12/Math2001/06_Induction/02_Recurrence_Relations.lean#L71</a></p>",
        "id": 370433492,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687959480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , in the last step of your <code>n * (n + 1) / 2</code> proof you use <code>ring</code>.  That step doesn't work on my computer.  Did you modify <code>ring</code> in some way to make that work?</p>",
        "id": 370447063,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1687961691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span>, do you want to share the specific example that doesn't work for you?  I don't know if you noticed that silently my problem is working over the rationals and casts have been normalized:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/An.20exercise.20using.20induction/near/370433492\">said</a>:</p>\n<blockquote>\n<p>When I borrowed this approach from Rob I also set it up to run <code>push_cast</code> on each of the cases.</p>\n</blockquote>",
        "id": 370448743,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687961975
    },
    {
        "content": "<p>I even turn off <code>Int</code> and <code>Nat</code> division at the beginning of every file to make it impossible to write down something which would behave badly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Int.instDivInt_1</span> <span class=\"n\">Int.instDivInt</span> <span class=\"n\">EuclideanDomain.instDiv</span> <span class=\"n\">Nat.instDivNat</span>\n</code></pre></div>",
        "id": 370449182,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687962037
    },
    {
        "content": "<p>Oh, I didn't notice that your function <code>A</code> was giving a rational result.  That explains it.</p>",
        "id": 370449297,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1687962054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/An.20exercise.20using.20induction/near/370433492\">said</a>:</p>\n<blockquote>\n<p>When I borrowed this approach from Rob I also set it up to run <code>push_cast</code> on each of the cases.  Here it is, in my course's repo:<br>\n<a href=\"https://github.com/hrmacbeth/math2001/blob/f57fd5651d58408238d6d4af5e4fb601dd4f5a12/Library/Tactic/Induction.lean#L49\">https://github.com/hrmacbeth/math2001/blob/f57fd5651d58408238d6d4af5e4fb601dd4f5a12/Library/Tactic/Induction.lean#L49</a><br>\nAnd now the standard <code>n * (n + 1) / 2</code> induction problem works as stated, without any <code>succ</code>-wrangling or Nat-division problems!<br>\n<a href=\"https://github.com/hrmacbeth/math2001/blob/f57fd5651d58408238d6d4af5e4fb601dd4f5a12/Math2001/06_Induction/02_Recurrence_Relations.lean#L71\">https://github.com/hrmacbeth/math2001/blob/f57fd5651d58408238d6d4af5e4fb601dd4f5a12/Math2001/06_Induction/02_Recurrence_Relations.lean#L71</a></p>\n</blockquote>\n<p>This is really cool <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span> Thanks!</p>\n<p>By the way, I tried to introduce the notation <code>n!</code> for <code>fac n</code> and it seems to be accepted by Lean, but then it generates an error in the statement of the theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"n\">fac</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fac_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives me <code>invalid definition,  '|' or ':=' expected</code>.</p>\n<p>I also tried <code>notation n `!`  := fac n</code>, but to no avail <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>Would anyone have a tip for me?</p>",
        "id": 370498920,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1687970109
    },
    {
        "content": "<p>you can just use <code>open_locale nat</code>, which defines this notation: it's defined as <code>notation (name := nat.factorial) n `!`:10000 := nat.factorial n</code>. I think the issue is that you need a high binding power on <code>!</code> because otherwise  Lean would rather do other stuff</p>",
        "id": 370506742,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687971595
    },
    {
        "content": "<p>It worked perfectly, thanks <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span>  (even with just <code>notation n `!`:1 := fac n</code>).</p>\n<p>And now it is even more urgent that I incoporate what Scott, Kevin and Heather were  talking about, because otherwise no one will get that <code>succ n!</code> means <code>(n + 1)!</code>, not <code>n! + 1</code>...</p>",
        "id": 370510615,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1687972322
    },
    {
        "content": "<p>The fact that parentheses are missing is caused by using <code>:1</code> instead of <code>:10000</code>. It should not be the case if you <code>open_locale nat</code>.</p>",
        "id": 370515719,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687973305
    },
    {
        "content": "<p>Indeed! Thanks :-)</p>",
        "id": 370516060,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1687973381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> has marked this topic as resolved.</p>",
        "id": 370516124,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687973394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> has marked this topic as unresolved.</p>",
        "id": 370546997,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687979287
    },
    {
        "content": "<p>Sorry, just <em>one last thing</em>. I have tried to take into account all your comments, making some minor adjustments to make it work in Lean 3, and some other adjustments to just make it work in my setting.</p>\n<p>I am sure that the solution is not optimal in terms of the code, and all further comments on that are most welcome. But visually it does exactly what I wanted: in the definition/proof of the term <code>fac_pos</code>, I see neither <code>n.succ</code>, <code>succ n</code> or <code>fac n</code>, only <code>n+1</code>  and <code>n!</code> (except at one point, when I have to write <code>rw fac</code>).</p>\n<p>Complete code below, thanks again!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_nodot</span><span class=\"o\">]</span> <span class=\"n\">nat.succ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fac</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">n</span> <span class=\"bp\">`!`</span><span class=\"o\">:</span><span class=\"mi\">10000</span> <span class=\"o\">:=</span> <span class=\"n\">fac</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simple_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fac_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">simple_induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- I have to use `apply` here, which is different from the usual `induction` tactic</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fac</span><span class=\"o\">,</span> <span class=\"c1\">-- here, replacing `fac`with `!` does not work</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">succ_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 370549297,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1687979826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/An.20exercise.20using.20induction/near/370432063\">said</a>:</p>\n<blockquote>\n<p>I believe that replacing the default eliminator like in Scott's example causes bugs in <code>cases</code>. </p>\n</blockquote>\n<p>Do we have a branch / WIP PR? It would be good to get this fixed.</p>",
        "id": 370574198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687986108
    },
    {
        "content": "<p>I haven't verified the existence of these bugs myself, but <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> mentioned them:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/issues/1558#issuecomment-1396444356\">https://github.com/leanprover-community/mathlib4/issues/1558#issuecomment-1396444356</a></p>",
        "id": 370575112,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687986375
    },
    {
        "content": "<p>Here's a branch demonstrating the bug in <code>cases</code> when you replace the eliminator for <code>Nat</code>. <a href=\"https://github.com/leanprover-community/mathlib4/pull/5562\">#5562</a></p>",
        "id": 370588598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687990947
    },
    {
        "content": "<p>I don't think I'll pursue this, but if someone else would like to I think it would be a great change.</p>",
        "id": 370588626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687990967
    },
    {
        "content": "<p>I detailed the weird effects on <code>cases</code> in another discussion: <a href=\"#narrow/stream/287929-mathlib4/topic/default.20induction/near/362292193\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/default.20induction/near/362292193</a></p>",
        "id": 370604249,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1687999099
    }
]