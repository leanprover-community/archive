[
    {
        "content": "<p>Given a Lean4 project, how can I verify with a command that a theorem defined there is proved correctly without using <code>sorry</code>?</p>",
        "id": 386884870,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1692801114
    },
    {
        "content": "<p>For example, if the code is placed on GitHub, how can we verify that the GitHub action correctly proves all the lemmas and theorems defined in lean files?</p>",
        "id": 386885692,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1692801282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/113489-new-members/topic/Automatic.20grading.20of.20lean4.20codes/near/386884870\">said</a>:</p>\n<blockquote>\n<p>Given a Lean4 project, how can I verify with a command that a theorem defined there is proved correctly without using <code>sorry</code>?</p>\n</blockquote>\n<p>For this you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">your_theorem</span>\n</code></pre></div>\n<p>in VSCode, and check <code>sorryAx</code>is not on the list.</p>",
        "id": 386888934,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1692802080
    },
    {
        "content": "<p>Check out <a href=\"https://github.com/adamtopaz/lean_grader\">https://github.com/adamtopaz/lean_grader</a> (still under development)</p>",
        "id": 386891939,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692802705
    },
    {
        "content": "<p>In addition to <code>#print axioms</code>, I would recommend also checking that the theorem statement is equal to the intended theorem statement :)</p>",
        "id": 386906086,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1692806331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Automatic.20grading.20of.20lean4.20codes/near/386891939\">said</a>:</p>\n<blockquote>\n<p>Check out <a href=\"https://github.com/adamtopaz/lean_grader\">https://github.com/adamtopaz/lean_grader</a> (still under development)</p>\n</blockquote>\n<p>Thank you. How can I use this lean_grader?</p>",
        "id": 387039753,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1692872646
    },
    {
        "content": "<p>I would like to perform the check as a CI instead of checking on the VSCode screen. I would like to make an error if <code>sorry</code> is used in the proof, and not make an error if <code>sorry</code> is not used and the proof is correct.</p>",
        "id": 387047748,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1692875489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"626349\">@Asei Inoue</span> take a look at the following: <a href=\"https://github.com/adamtopaz/hw_template\">https://github.com/adamtopaz/hw_template</a></p>\n<p>This is a hw template using the repo I mentioned above. To use it: clone the <code>hw_template</code> repo and run <code>lake exe grade ***</code> where <code>***</code> is the (lean4) hash of <code>Nat</code> as an <code>Expr</code>. You can use <code>#type_hash solution</code> to obtain this hash (in general, if <code>solution : X</code> then <code>#type_hash solution</code> gives the hash of <code>X</code> as an <code>Expr</code>).  This hash should be changed for each assignment, to match the hash of the required type of <code>solution</code>.</p>\n<p>This checks whether a declaration named <code>solution</code> in the file <code>Solution.lean</code> exists, whether the type of <code>solution</code> has a hash matching the one provided, and whether the definition of <code>solution</code> uses any axioms (<code>sorryAx</code> is the axiom used when you use <code>sorry</code>, so this  checks for uses of <code>sorry</code>, among other axioms).</p>",
        "id": 387088975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692887317
    },
    {
        "content": "<p>As I said, this is still under development. Right now it only checks a single declaration <code>solution</code> in a file called <code>Solution.lean</code> in the root of the homework project directory. But I hope the code is simple enough to understand that it can be modified to suite your needs.</p>",
        "id": 387089785,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692887478
    },
    {
        "content": "<p><code>lake exe grade ***</code> will return an exit code of <code>0</code> for success, and a code of <code>1</code> for failure, so it can be directly used in github's CI as part of a script, for example.</p>",
        "id": 387090337,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692887561
    },
    {
        "content": "<p>The homework template repo also has some stuff in the <code>.github</code> folder which makes it usable with github classrooms.</p>",
        "id": 387090503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692887604
    },
    {
        "content": "<p>Thank you very much! I have tried it, but it behaves strangely. Why does \"Solution is valid\" message appear?</p>\n<p><a href=\"/user_uploads/3121/Fbtk5cjbb6SCoMvCkckCbhsY/screenshot_lean_grader.png\">screenshot_lean_grader.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Fbtk5cjbb6SCoMvCkckCbhsY/screenshot_lean_grader.png\" title=\"screenshot_lean_grader.png\"><img src=\"/user_uploads/3121/Fbtk5cjbb6SCoMvCkckCbhsY/screenshot_lean_grader.png\"></a></div>",
        "id": 387259484,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1692963170
    },
    {
        "content": "<p>What's the purpose of the hash here? (vs getting the true statement from a golden file)</p>",
        "id": 387260446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692963653
    },
    {
        "content": "<p>That’s a bug that was fixed bu I guess I forgot to update the lake manifest in the homework template. Please run <code>lake update</code></p>",
        "id": 387271664,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692968341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Automatic.20grading.20of.20lean4.20codes/near/387271664\">said</a>:</p>\n<blockquote>\n<p>That’s a bug that was fixed bu I guess I forgot to update the lake manifest in the homework template. Please run <code>lake update</code></p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 387272059,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1692968493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I don’t know what you mean by a “golden file”.</p>",
        "id": 387274763,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692969551
    },
    {
        "content": "<p>I mean that you have a file that you ask students not to edit (or provide with the grading setup) that contains <code>def TheIntendedStatement : Prop := whatever</code> and check that <code>example : TheIntendedStatement := theStudentAnswer</code> typechecks</p>",
        "id": 387274922,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692969605
    },
    {
        "content": "<p>(or an analogous metaprogram)</p>",
        "id": 387274940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692969614
    },
    {
        "content": "<p>That's essentially how codewars graded submissions in Lean 3</p>",
        "id": 387275377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692969798
    },
    {
        "content": "<p>Yeah that would work too, but the point is that students can edit everything in the git repo, at least with GitHub classrooms.</p>",
        "id": 387275619,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692969887
    },
    {
        "content": "<p>I was trying to come up with something that would be as hands-off as possible, so I didn’t really want to check whether students modified some “untouchable” file. But at the end of the day, the students can even edit the CI files themselves, so something has to be checked.</p>",
        "id": 387276038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692970077
    },
    {
        "content": "<p>Have CI file that decrypts an encrypted url string and curls the real CI file ;)</p>",
        "id": 387276262,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692970161
    },
    {
        "content": "<p>But they can just change that CI file!</p>",
        "id": 387276312,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692970182
    },
    {
        "content": "<p>The real CI file should do something random and specific</p>",
        "id": 387276456,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692970219
    },
    {
        "content": "<p>I am only half serious here. I think if students are skilled and motivated enough to do this then you can pass them just fine</p>",
        "id": 387276564,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692970259
    },
    {
        "content": "<p>So what I’m doing now is having the CI emit the sha hash of the valid CI files. So I only have to check that those hashes match</p>",
        "id": 387276634,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692970285
    },
    {
        "content": "<p>If you’re one of my students, please forget everything you read above ;)</p>",
        "id": 387277314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692970531
    },
    {
        "content": "<p>I vote for \"Professor Topaz, would you like to play a game?\" if students dig too far in :)</p>",
        "id": 387278547,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692970984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Automatic.20grading.20of.20lean4.20codes/near/387276312\">said</a>:</p>\n<blockquote>\n<p>But they can just change that CI file!</p>\n</blockquote>\n<p>You put the CI file and grading script in a separate repository</p>",
        "id": 387280738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692971688
    },
    {
        "content": "<p>Like I did <a href=\"https://github.com/sigproc-classrooms/sf2_competition_template/blob/main/.github/workflows/competition.yml#L30-L31\">here</a> for a non-lean course I ran</p>",
        "id": 387280869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692971725
    },
    {
        "content": "<p>But that line can still be changed!</p>",
        "id": 387280940,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692971749
    },
    {
        "content": "<p>30 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Automatic.20grading.20of.20lean4.20codes\">#new members &gt; Automatic grading of lean4 codes</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 387280944,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692971750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Automatic.20grading.20of.20lean4.20codes/near/387280940\">said</a>:</p>\n<blockquote>\n<p>But that line can still be changed!</p>\n</blockquote>\n<p>Sure, but they could also replace the CI script with one that does nothing to produce a green check!</p>",
        "id": 387281521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692971914
    },
    {
        "content": "<p>Yeah exactly. This is a pretty glaring hole in GitHub classrooms IMO</p>",
        "id": 387282819,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692972215
    },
    {
        "content": "<p>You can also override your \"points\" to something arbitrary; I actually do this to award students things like <code>176/10</code> (aka 17.6) which is their score on our optimization problem</p>",
        "id": 387284085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692972476
    },
    {
        "content": "<p>Maybe this is already accounted for, but it's also necessary to check that the list of axioms used only contains a set of allowed axioms</p>",
        "id": 387284924,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1692972666
    },
    {
        "content": "<p>Right now it checks if the list of axioms is empty</p>",
        "id": 387286001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692972909
    },
    {
        "content": "<p>It would be easy to modify the script to check for a specific collection of axioms (specified by name)</p>",
        "id": 387286160,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692972936
    },
    {
        "content": "<p>why not using pull_request_target trigger?</p>",
        "id": 387303609,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1692979341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Automatic.20grading.20of.20lean4.20codes/near/387271664\">said</a>:</p>\n<blockquote>\n<p>That’s a bug that was fixed bu I guess I forgot to update the lake manifest in the homework template. Please run <code>lake update</code></p>\n</blockquote>\n<p>After running \"lake update\",\"lake exe cache get\" failed. \"Not found\" error occurs.</p>",
        "id": 387305185,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1692979924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Automatic.20grading.20of.20lean4.20codes/near/387303609\">said</a>:</p>\n<blockquote>\n<p>why not using pull_request_target trigger?</p>\n</blockquote>\n<p>Github classroom doesn't encourage the use of pull requests against an upstream repo</p>",
        "id": 387305260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692979959
    },
    {
        "content": "<p>Instead it makes a duplicate of the course repository with no history and no in-git link back to the template</p>",
        "id": 387305294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692979978
    },
    {
        "content": "<p>I'm not sure if anyone is seriously using <a href=\"https://github.com/adamtopaz/lean_grader\">https://github.com/adamtopaz/lean_grader</a> and the template <a href=\"https://github.com/adamtopaz/hw_template\">https://github.com/adamtopaz/hw_template</a> but just in case, I should mention that I made some significant modifications to this.</p>\n<p>Instead of just checking that the hash of some expression matches something passed in as an argument, I now check whether two expressions are defeq. Really what's happening is that the <code>grade</code> command provided by <a href=\"https://github.com/adamtopaz/lean_grader\">https://github.com/adamtopaz/lean_grader</a> has two subcommands: <code>save</code> and <code>compare</code>.</p>\n<ol>\n<li><code>save</code> will save the expression associated to a term <code>solution</code> in the file <code>Solution.lean</code> to the filesystem (using Std's pickle).</li>\n<li><code>compare</code> loads such pickles into memory and checks if they are defeq.</li>\n</ol>\n<p>These commands now all use the CLI package, so usage is described using the <code>--help</code> flag.</p>",
        "id": 390375953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694460963
    },
    {
        "content": "<p>Here is a small test of the CI action for github classroom: <a href=\"https://github.com/adamtopaz/hw_template_test\">https://github.com/adamtopaz/hw_template_test</a></p>",
        "id": 390376026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694460991
    }
]