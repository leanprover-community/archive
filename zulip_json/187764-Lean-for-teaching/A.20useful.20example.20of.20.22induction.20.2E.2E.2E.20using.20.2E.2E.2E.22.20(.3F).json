[
    {
        "content": "<p>I don't know if it is a correct place for sharing \"course tips\" ... sorry if it is not.</p>\n<p>In the context of a course \"specification and verification of programs\"  I am giving since 2021 using Lean4   (replacing Coq ...) at Sorbonne University  (for CS students),  I was looking for a good example of when the tactic <code>induction ... using ...</code> would be useful.  <a href=\"https://stackoverflow.com/questions/33071903/how-to-use-a-custom-induction-principle-in-coq\">Triggered by this stack overflow question</a>, I ended up with what follows.</p>\n<p>It is a little bit longer than I expected (I did not try to make it as concise at what would be needed), but it might be useful  if you want to illustrate this feature of the induction tactic. </p>\n<p>I am of course interested by other similar examples ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I use a separate LList type to be self-contained</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">LList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">LList</span> <span class=\"n\">α</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">LList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lappend</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LList.cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">lappend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lappend_nil</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"n\">lappend</span> <span class=\"n\">xs</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lappend</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">Hind</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lappend</span><span class=\"o\">,</span> <span class=\"n\">Hind</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lappend_assoc</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">zs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"n\">lappend</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">lappend</span> <span class=\"n\">ys</span> <span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lappend</span> <span class=\"o\">(</span><span class=\"n\">lappend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">zs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lappend</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">Hind</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lappend</span><span class=\"o\">,</span> <span class=\"n\">Hind</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">snoc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lappend</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">nil</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rev_snoc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rev</span><span class=\"o\">,</span> <span class=\"n\">lappend</span><span class=\"o\">,</span> <span class=\"n\">snoc</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">xs</span> <span class=\"n\">Hind</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rev</span><span class=\"o\">,</span> <span class=\"n\">lappend</span><span class=\"o\">,</span> <span class=\"n\">snoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Hind</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hind</span><span class=\"o\">,</span> <span class=\"n\">lappend</span><span class=\"o\">,</span> <span class=\"n\">snoc</span><span class=\"o\">,</span> <span class=\"n\">rev</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rev_rev</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rev</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">Hind</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rev</span><span class=\"o\">,</span> <span class=\"n\">snoc</span><span class=\"o\">]</span>\n    <span class=\"k\">show</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rev_snoc</span><span class=\"o\">,</span> <span class=\"n\">Hind</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- a first induction principle, easy to prove but unusable because</span>\n<span class=\"c1\">-- the conclusion is not in a `(motive &lt;var&gt;)` form ...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">list_ind_rev_snoc</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span>\n    <span class=\"n\">P</span> <span class=\"n\">nil</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n    <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">Hnil</span> <span class=\"n\">Hsnoc</span> <span class=\"n\">xs</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">Hind</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rev</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Hsnoc</span>\n    <span class=\"n\">assumption</span>\n\n<span class=\"c1\">-- this is ugly but it is a valid induction principle now...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">list_ind_rev_rev_snoc</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span>\n    <span class=\"n\">P</span> <span class=\"n\">nil</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)))</span>\n    <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">Hnil</span> <span class=\"n\">Hsnoc</span> <span class=\"n\">xs</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hrev</span><span class=\"o\">:</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">rev_rev</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Hrev</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list_ind_rev_snoc</span>\n  <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">ys</span> <span class=\"n\">HP</span>\n    <span class=\"n\">clear</span> <span class=\"n\">Hrev</span>\n    <span class=\"k\">have</span> <span class=\"n\">Hrev</span><span class=\"o\">:</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">rev_rev</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Hrev</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Hsnoc</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hrev</span><span class=\"o\">,</span> <span class=\"n\">HP</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- this one is trivial, but it's the key I was missing at first</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">list_ind_snoc_lemma</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span>\n <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">H1</span> <span class=\"n\">x</span> <span class=\"n\">xs</span>\n  <span class=\"n\">apply</span> <span class=\"n\">H1</span>\n\n<span class=\"c1\">-- this is what I wanted first ... but I ended up going the \"rev\" way</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">list_ind_snoc</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span>\n    <span class=\"n\">P</span> <span class=\"n\">nil</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n    <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">Hnil</span> <span class=\"n\">Hsnoc'</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hsnoc</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">list_ind_snoc_lemma</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list_ind_rev_rev_snoc</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n\n<span class=\"c1\">-- this is where thing become interesting</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lappend_snoc</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lappend</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">snoc</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">lappend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ys</span> <span class=\"n\">using</span> <span class=\"n\">list_ind_snoc</span>\n  <span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lappend_nil</span><span class=\"o\">,</span> <span class=\"n\">snoc</span><span class=\"o\">,</span> <span class=\"n\">lappend</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">ys</span> <span class=\"n\">Hind</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hind</span><span class=\"o\">,</span> <span class=\"n\">snoc</span><span class=\"o\">,</span> <span class=\"n\">lappend_assoc</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- and there you are stack overflow !</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rev_lappend</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">lappend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lappend</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ys</span> <span class=\"n\">using</span> <span class=\"n\">list_ind_snoc</span>\n  <span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rev</span><span class=\"o\">,</span> <span class=\"n\">lappend</span><span class=\"o\">,</span> <span class=\"n\">lappend_nil</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">ys</span> <span class=\"n\">Hind</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rev_snoc</span><span class=\"o\">,</span> <span class=\"n\">lappend</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Hind</span><span class=\"o\">,</span> <span class=\"n\">lappend_snoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 407590181,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1702423982
    },
    {
        "content": "<p>Not about lists and perhaps not as interesting but there are a few examples in Std: <a href=\"https://github.com/leanprover/std4/blob/483fd2846f9fe5107011ece0cc3d8d88af1a8603/Std/Data/Nat/Lemmas.lean#L704C1-L727C1\">https://github.com/leanprover/std4/blob/483fd2846f9fe5107011ece0cc3d8d88af1a8603/Std/Data/Nat/Lemmas.lean#L704C1-L727C1</a></p>",
        "id": 407591331,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1702424724
    },
    {
        "content": "<p>This type of diagonal induction is also useful for proving theorems about <code>zip</code>.</p>",
        "id": 407591672,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1702424944
    },
    {
        "content": "<p>We have several induction principles for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset#doc\">docs#Finset</a>. The default \"destruct into a <code>Multiset</code> and a proof of <code>NoDup</code>\" is the least useful one.</p>",
        "id": 407635720,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702441776
    },
    {
        "content": "<p>Also, you can add an induction principle</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cauchy_induction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_two</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- get `p (2 ^ (n + 1))` from `one` and `mul_two`, then use `lt`</span>\n</code></pre></div>\n<p>then use it to prove the AM-GM inequality: the <code>mul_two</code> step is basically <code>2ab ≤ a²+b²</code> and the <code>lt</code> step can be done by setting the last <code>n - m</code> numbers to the arithmetic mean of the first <code>m</code> numbers.</p>",
        "id": 407635964,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702441923
    },
    {
        "content": "<p>These are excellent examples ... thank you !</p>",
        "id": 407666156,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1702455009
    },
    {
        "content": "<p>Looking at <code>recDiagAux</code> I get it that it is better to give names to assumptions, e.g. :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">list_ind_snoc</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">nil</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">))):</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>so that the case names are e.g. <code>nil</code>  and <code>ind</code>  (inductive...)</p>",
        "id": 407667374,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1702455497
    },
    {
        "content": "<p>it's also better to use the names of existing functions when possible, so that hover works</p>",
        "id": 407668796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702455907
    },
    {
        "content": "<p>so in that example I would suggest using the names <code>nil</code> and <code>snoc</code></p>",
        "id": 407668860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702455929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/A.20useful.20example.20of.20.22induction.20.2E.2E.2E.20using.20.2E.2E.2E.22.20.28.3F.29/near/407668860\">said</a>:</p>\n<blockquote>\n<p>so in that example I would suggest using the names <code>nil</code> and <code>snoc</code></p>\n</blockquote>\n<p>When I do that, there seems to be a name collision maybe because <code>snoc</code> is a <code>def</code> and not a constructor ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">LList.nil</span>\n<span class=\"n\">snoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">_root_.snoc</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>(and a type error ...)</p>\n<p>I don't know exactly what happens here...</p>",
        "id": 407672614,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1702457017
    },
    {
        "content": "<p>yes, that is expected</p>",
        "id": 407674788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702457763
    },
    {
        "content": "<p>the type error is not</p>",
        "id": 407674833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702457769
    },
    {
        "content": "<p>I think it only works if <code>snoc</code> is a definition in the <code>LList</code> namespace</p>",
        "id": 407674909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702457794
    },
    {
        "content": "<p>it's a bit weird that it is not here</p>",
        "id": 407674942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702457805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/A.20useful.20example.20of.20.22induction.20.2E.2E.2E.20using.20.2E.2E.2E.22.20.28.3F.29/near/407674909\">said</a>:</p>\n<blockquote>\n<p>I think it only works if <code>snoc</code> is a definition in the <code>LList</code> namespace</p>\n</blockquote>\n<p>This works, thanks !</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">LList</span>\n<span class=\"kd\">def</span> <span class=\"n\">snoc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lappend</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">nil</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">LList</span>\n</code></pre></div>\n<p>However, I need to do that :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">list_ind_snoc</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">nil</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">snoc</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">))):</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">LList</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hsnoc</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">LList.snoc</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">xs</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">list_ind_snoc_lemma</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list_ind_rev_rev_snoc</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>(remark the <code>LList.snoc</code> otherwise I get the same type error ... probably because the namespace is opened...)</p>",
        "id": 407698874,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1702464797
    },
    {
        "content": "<p>I don't know what this is being compared to, or what the type error was</p>",
        "id": 407699180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702464879
    },
    {
        "content": "<p>You probably want <code>list_ind_snoc</code> to also be in the <code>LList</code> namespace, in which case you won't need to use <code>LList.snoc</code> in the proof</p>",
        "id": 407699348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702464928
    },
    {
        "content": "<p>you can also use <code>.snoc</code> to avoid writing the namespace even if it's not open</p>",
        "id": 407699482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702464965
    }
]