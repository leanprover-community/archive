[
    {
        "content": "<p>Hi, I am new to Lean and want to explore whether I can use Lean for teaching logic. I am trying to find the simplest possible example. So I started to define my own natural numbers.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">N</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">N.o</span>\n<span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">N.s</span> <span class=\"n\">N.o</span>\n<span class=\"kd\">def</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">N.s</span> <span class=\"n\">one</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N.o</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N.s</span> <span class=\"n\">m'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N.s</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m'</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">add</span> <span class=\"n\">one</span> <span class=\"n\">two</span>\n</code></pre></div>\n<p>But now, when I hover over eval, I get an error message and not the expected result (N.s(N.s(N.s N.o))). I dont understand why that happens as add is just a functional program that should run.</p>",
        "id": 394100448,
        "sender_full_name": "Alexander Kurz",
        "timestamp": 1696093634
    },
    {
        "content": "<p>Did you read the error message which carefully tells you the problem and exactly what you need to do to fix it?</p>",
        "id": 394100551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696093757
    },
    {
        "content": "<p>yes, but I dont understand why eval \"failed to be synthesized\" ... in fact, I dont understand why we need to synthesize eval in the first place ... if Lean is a functional programming language (as I read somewhere) it should already have an interpreter than can evaluate functional programs like 'add'</p>",
        "id": 394100665,
        "sender_full_name": "Alexander Kurz",
        "timestamp": 1696093896
    },
    {
        "content": "<p>It is <code>Repr</code>, not <code>#eval</code>, which failed to be synthesized. <code>#eval</code> outputs a string. You have not told Lean how to turn the term of type N into a string.</p>",
        "id": 394100714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696093926
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">N.eval</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"o\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"s(\"</span> <span class=\"bp\">++</span> <span class=\"n\">N.eval</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N.eval</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">add</span> <span class=\"n\">one</span> <span class=\"n\">two</span> <span class=\"c1\">-- s(s(s(o)))</span>\n</code></pre></div>",
        "id": 394100771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696094029
    },
    {
        "content": "<p>You just need a <code>Repr</code> instance, and you just need to tell Lean to derive one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">N</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>",
        "id": 394100846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696094103
    },
    {
        "content": "<p>Not every inductive type can have a faithful <code>Repr</code> instance, so it's up to you to tell it to generate one.</p>",
        "id": 394100858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696094134
    },
    {
        "content": "<p>Off-topic (1): it might be best to do <code>namespace N</code> before defining things like <code>zero</code>, giving it the better name of <code>N.zero</code>. Off-topic (2) Addition on Lean's naturals is defined by induction on the 2nd variable not the first, so if at some point you want to compare your <code>N</code> with Lean's <code>Nat</code> then this might be something to bear in mind.</p>",
        "id": 394100975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696094280
    },
    {
        "content": "<p>I am not sure I understand correctly, but I take what you say to mean that Lean, as opposed to functional programming languages like Idris, does not have an interpreter. Rather, I need to implement my own interpreter ... Edit: I understand this now ... thanks for your help <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 394101038,
        "sender_full_name": "Alexander Kurz",
        "timestamp": 1696094330
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  that works for me. Now I can continue :-)</p>",
        "id": 394101356,
        "sender_full_name": "Alexander Kurz",
        "timestamp": 1696094693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> the <code>namespace N</code> trick is really useful ... thanks</p>",
        "id": 394101918,
        "sender_full_name": "Alexander Kurz",
        "timestamp": 1696095254
    },
    {
        "content": "<p>Yeah, then you can just talk about <code>s</code> and <code>o</code> rather than <code>N.s</code> etc; it makes exposition in the classroom much less cluttered.</p>",
        "id": 394102336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696095705
    },
    {
        "content": "<p>(I also teach natural numbers to undergraduates using Lean and indeed I even have a school talk where I do what you are doing above)</p>",
        "id": 394102399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696095750
    },
    {
        "content": "<p>It took me some time to find where the official <code>Nat</code> is defined ... it is here, right? <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L1038\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L1038</a></p>",
        "id": 394105595,
        "sender_full_name": "Alexander Kurz",
        "timestamp": 1696099178
    },
    {
        "content": "<p>Yes, that's it</p>",
        "id": 394106088,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696099751
    },
    {
        "content": "<p>You can use the mathlib documentation to locate things. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs#Nat</a> is a link to the documentation and click \"source\". You can also do things like type <code>#check Nat</code> in VS Code and then right click on <code>Nat</code> and click \"Go to definition\"</p>",
        "id": 394106170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696099845
    },
    {
        "content": "<p>The simplest possible example is probably the type Bool; prove basic stuff like DeMorgan.</p>",
        "id": 394106247,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696099926
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=False#doc\">docs#False</a> is pretty simple too.</p>",
        "id": 394107222,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696101007
    },
    {
        "content": "<p>Thanks to all of you ... I am blown away by how helpful this community is ... looking forward to spending more time on Lean.</p>",
        "id": 394107458,
        "sender_full_name": "Alexander Kurz",
        "timestamp": 1696101325
    }
]