[
    {
        "content": "<p>How would you explain the difference between <code>Bool</code> and <code>Prop</code> to (smart) highschoolers?</p>",
        "id": 408424274,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702802992
    },
    {
        "content": "<p>They're the same thing, but at different levels in the hierarchy: one is a type and one is a universe. I usually explain universes, types and terms on day 1</p>",
        "id": 408433654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702811330
    },
    {
        "content": "<p>That said, why do you want to explain that to highschoolers? If you are just teaching them a bit about formalizing maths and not about computation it seems an unnecessary confusion to even introduce Bool at all</p>",
        "id": 408444385,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702821960
    },
    {
        "content": "<p>Actually, I first taught them about computation, during which <code>Bool</code> appeared. Now I teach them about proving.</p>",
        "id": 408445231,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702822686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Bool.20vs.20Prop/near/408433654\">said</a>:</p>\n<blockquote>\n<p>They're the same thing, but at different levels in the hierarchy: one is a type and one is a universe. I usually explain universes, types and terms on day 1</p>\n</blockquote>\n<p>D-D-D-Day 1? I hoped I could avoid talking about universes altogether!</p>",
        "id": 408445323,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702822786
    },
    {
        "content": "<p>well, once you say \"everything has a type\" it's a pretty natural question to ask what the type of <code>Type</code> is, even at a high school level. For extra fun you can climb the universe hierarchy using lean's nested hovers</p>",
        "id": 408445629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702823042
    },
    {
        "content": "<p>I say x : Real : Type and proof : statement : Prop and that's about it as far as type theory is concerned, so Prop is explained on day 1 yes. I never talk about bool because I'm talking to mathematicians</p>",
        "id": 408446576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702823851
    },
    {
        "content": "<p>There are quite a few open questions that can be explained to high schoolers. E.g., \"every triangle admits a periodic billiard trajectory\". That's a <code>Prop</code> that you don't know how to convert to <code>Bool</code>.</p>",
        "id": 408447743,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702824829
    },
    {
        "content": "<p>A <code>Bool</code> is either true or false, and if you let Lean run for long enough it will tell you which it is. A <code>Prop</code> is either True or False, but you can't depend on Lean to tell you -- but you can try to write a proof.</p>\n<p>You need some passing familiarity with incompleteness to appreciate that there really is a distinction. Otherwise, I guess you could say something like what Yury is suggesting, that <code>Prop</code> is like <code>Bool</code> but it doesn't come with any algorithms to evaluate the statements. (How would you evaluate a universal quantifier over Nat? That's like an infinite <code>for</code> loop.)</p>",
        "id": 408451151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702827690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Bool.20vs.20Prop/near/408445231\">said</a>:</p>\n<blockquote>\n<p>Actually, I first taught them about computation, during which <code>Bool</code> appeared. Now I teach them about proving.</p>\n</blockquote>\n<p>How about giving them some intuition of what a decidable proposition is, and then say that a decidable proposition can be converted into a boolean value?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testAge</span> <span class=\"o\">(</span><span class=\"n\">age</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">age</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">40</span>\n<span class=\"k\">#check</span> <span class=\"n\">testAge</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- testAge 21 : Prop</span>\n<span class=\"k\">#eval</span> <span class=\"n\">testAge</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- failed to synthesize  Decidable (testAge 21)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testAgeBool</span> <span class=\"o\">(</span><span class=\"n\">age</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">age</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">40</span>\n<span class=\"k\">#check</span> <span class=\"n\">testAgeBool</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- testAgeBool 21 : Bool</span>\n<span class=\"k\">#eval</span> <span class=\"n\">testAgeBool</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- false</span>\n</code></pre></div>\n<p>Conversely, a term <code>b : Bool</code> can be converted into the proposition <code>P := Eq b true </code> and we see that <code>P</code> has a proof if <code>b = true </code> and that <code>¬P</code> has a proof if <code>b = false</code>.</p>\n<p>Surely, somebody will ask if every proposition is decidable <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 408460820,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1702834100
    },
    {
        "content": "<p>That looks like a lousy pedagogical example, because it leaves the reader baffled over whether <code>age &gt; 40</code> is decidable or not</p>",
        "id": 408583307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702896632
    },
    {
        "content": "<p>Yes, that's the whole point.</p>",
        "id": 408586622,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1702897778
    },
    {
        "content": "<p>So is the point in that example to teach the reader about reducibility?</p>",
        "id": 408595951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702900806
    },
    {
        "content": "<p>Because certainly that seems to be what this extended example shows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testAge</span> <span class=\"o\">(</span><span class=\"n\">age</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">age</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">40</span>\n<span class=\"k\">#check</span> <span class=\"n\">testAge</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- testAge 21 : Prop</span>\n<span class=\"k\">#eval</span> <span class=\"n\">testAge</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- failed to synthesize  Decidable (testAge 21)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">testAgeAbbrev</span> <span class=\"o\">(</span><span class=\"n\">age</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">age</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">40</span>\n<span class=\"k\">#check</span> <span class=\"n\">testAgeAbbrev</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- testAgeAbbrev 21 : Prop</span>\n<span class=\"k\">#eval</span> <span class=\"n\">testAgeAbbrev</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testAgeBool</span> <span class=\"o\">(</span><span class=\"n\">age</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">age</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">40</span>\n<span class=\"k\">#check</span> <span class=\"n\">testAgeBool</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- testAgeBool 21 : Bool</span>\n<span class=\"k\">#eval</span> <span class=\"n\">testAgeBool</span> <span class=\"mi\">21</span>  <span class=\"c1\">-- false</span>\n</code></pre></div>",
        "id": 408596207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702900888
    },
    {
        "content": "<p>Oh, I see. </p>\n<p>But no, I was hoping it would trigger questions surrounding decidability instead, in relation with <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#decPropToBool\">#decPropToBool</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decPropToBool</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"kt\">Prop</span> <span class=\"n\">p</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">decide</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>So, to sum up, two (hoped for) points:</p>\n<ol>\n<li>Show that a decidable proposition can be converted into a boolean value.</li>\n<li>Discuss non-decidable propositions (informally).</li>\n</ol>",
        "id": 408604922,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1702904082
    }
]