[
    {
        "content": "<p>I will be giving an intro to Lean4 at the mathematics department of my university this week. Has anyone made a cheatsheet of tactics for Lean4? I think it would be nice for the participants to have one while we are formalising.</p>",
        "id": 340120718,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678198714
    },
    {
        "content": "<p>I have a cheatsheet, but it is useful only if you already know Lean 3 tactics:<br>\n<a href=\"https://github.com/madvorak/lean3-tactic-lean4\">https://github.com/madvorak/lean3-tactic-lean4</a></p>",
        "id": 340121376,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678198872
    },
    {
        "content": "<p>You would probably like to have something like \"if the goal looks like ABC, you can try XYZ\", right?</p>",
        "id": 340121792,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678198976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340121792\">said</a>:</p>\n<blockquote>\n<p>You would probably like to have something like \"if the goal looks like ABC, you can try XYZ\", right?</p>\n</blockquote>\n<p>Yes, preferrably</p>",
        "id": 340122312,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678199111
    },
    {
        "content": "<p>I can create a draft, but someone else would have to polish it.</p>",
        "id": 340122566,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678199167
    },
    {
        "content": "<p>I found this: <a href=\"https://leanprover-community.github.io//img/lean-tactics.pdf\">https://leanprover-community.github.io//img/lean-tactics.pdf</a> but it is for Lean 3 right?</p>",
        "id": 340122701,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678199211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340122566\">said</a>:</p>\n<blockquote>\n<p>I can create a draft, but someone else would have to polish it.</p>\n</blockquote>\n<p>That would be awesome!</p>",
        "id": 340122748,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678199225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"576805\">Elisabeth Bonnevier</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340122701\">said</a>:</p>\n<blockquote>\n<p>I found this: <a href=\"https://leanprover-community.github.io//img/lean-tactics.pdf\">https://leanprover-community.github.io//img/lean-tactics.pdf</a> but it is for Lean 3 right?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 340122779,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678199233
    },
    {
        "content": "<p>Oh, this is an English version of my old teaching cheatsheet!</p>",
        "id": 340123267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678199369
    },
    {
        "content": "<p>Can you provide a <code>.tex</code> file of that document?</p>",
        "id": 340123894,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678199498
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lftcm2020/blob/master/lean-tactics.tex\">https://github.com/leanprover-community/lftcm2020/blob/master/lean-tactics.tex</a></p>",
        "id": 340137318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678202514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340137318\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/lftcm2020/blob/master/lean-tactics.tex\">https://github.com/leanprover-community/lftcm2020/blob/master/lean-tactics.tex</a></p>\n</blockquote>\n<p>Do you allow me to fork it and create a Lean 4 version?</p>",
        "id": 340138322,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678202743
    },
    {
        "content": "<p>Sure.</p>",
        "id": 340139085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678202879
    },
    {
        "content": "<p>Actually, does it have to be a fork, or can I simply copy the one document into a new repository I will create? In such a case, how can I acknowledge you as the original author?</p>",
        "id": 340139483,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678202980
    },
    {
        "content": "<p>Forking seems overkill. Just leave a comment in the TeX with some acknowledgements and a pointer to the original.</p>",
        "id": 340140130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678203136
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 340140212,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678203158
    },
    {
        "content": "<p>My English copy doesn't even acknowledge Patrick <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 340140273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678203177
    },
    {
        "content": "<p>So my copy will acknowledge you both, ok?</p>",
        "id": 340140380,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678203203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"576805\">Elisabeth Bonnevier</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340122748\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340122566\">said</a>:</p>\n<blockquote>\n<p>I can create a draft, but someone else would have to polish it.</p>\n</blockquote>\n<p>That would be awesome!</p>\n</blockquote>\n<p><a href=\"https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf\">https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf</a></p>",
        "id": 340192255,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678216406
    },
    {
        "content": "<p>Please PR any improvements you will have!<br>\n<a href=\"https://github.com/madvorak/lean4-cheatsheet\">https://github.com/madvorak/lean4-cheatsheet</a></p>",
        "id": 340192446,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678216451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340192255\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"576805\">Elisabeth Bonnevier</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340122748\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340122566\">said</a>:</p>\n<blockquote>\n<p>I can create a draft, but someone else would have to polish it.</p>\n</blockquote>\n<p>That would be awesome!</p>\n</blockquote>\n<p><a href=\"https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf\">https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf</a></p>\n</blockquote>\n<p>This is great! Thank you so much!</p>",
        "id": 340200599,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678218932
    },
    {
        "content": "<p>Will you be importing all of Mathlib4 by default? Or should I add what imports are needed for each tactic?</p>",
        "id": 340201230,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678219099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340201230\">said</a>:</p>\n<blockquote>\n<p>Will you be importing all of Mathlib4 by default? Or should I add what imports are needed for each tactic?</p>\n</blockquote>\n<p>It would be nice to have which imports are needed <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 340201468,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678219168
    },
    {
        "content": "<p>OK, I'll add it!</p>",
        "id": 340201570,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678219198
    },
    {
        "content": "<p>Done.<br>\n<a href=\"https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf\">https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf</a><br>\nThe document is not more cluttered, but hopefully still readable.</p>",
        "id": 340211565,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678222532
    },
    {
        "content": "<p>PS: I also wrote <code>import Mathlib.Tactic.Have</code> even though a tactic <code>have</code> exists outside of Mathlib as well (but with a different syntax).</p>",
        "id": 340212504,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678222705
    },
    {
        "content": "<p>I don't think we should be recommending people to use <code>cases'</code> except in porting situations</p>",
        "id": 340212810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678222795
    },
    {
        "content": "<p>there really isn't any reason to prefer it over either <code>cases</code> or <code>rcases</code></p>",
        "id": 340212919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678222814
    },
    {
        "content": "<p>also a good portion of uses are covered also by <code>have &lt;a, b&gt; := e</code></p>",
        "id": 340213008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678222842
    },
    {
        "content": "<p>What is the syntax of <code>cases</code> without additional symbol?</p>",
        "id": 340213142,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678222883
    },
    {
        "content": "<p>Or should I recommend <code>rcases</code> there?</p>",
        "id": 340213211,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678222906
    },
    {
        "content": "<p>what do you mean without additional symbol?</p>",
        "id": 340213332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678222932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340212810\">said</a>:</p>\n<blockquote>\n<p>I don't think we should be recommending people to use <code>cases'</code> except in porting situations</p>\n</blockquote>\n<p>It also applies to:<br>\n<a href=\"https://github.com/madvorak/lean3-tactic-lean4\">https://github.com/madvorak/lean3-tactic-lean4</a></p>",
        "id": 340213343,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678222936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340213332\">said</a>:</p>\n<blockquote>\n<p>what do you mean without additional symbol?</p>\n</blockquote>\n<p>not <code>cases'</code> but <code>cases</code></p>",
        "id": 340213387,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678222949
    },
    {
        "content": "<p>Sorry for cluttering the sentence; I didn't feel like ending the backtick right before the question mark, so I added extra words.</p>",
        "id": 340213521,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678222991
    },
    {
        "content": "<p>for unpacking an or it looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 340213569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223012
    },
    {
        "content": "<p>Well, I don't want to use this syntax.</p>",
        "id": 340213608,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223031
    },
    {
        "content": "<p>So <code>cases'</code> and <code>rcases</code> are my options.</p>",
        "id": 340213696,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223053
    },
    {
        "content": "<p>Why do you not want to use that syntax? It gives a more structure idea of what is happening doesn't it?</p>",
        "id": 340213743,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678223073
    },
    {
        "content": "<p><code>rcases</code> is closer to <code>cases'</code> if you like the way it looks, it just adds <code>|</code> between the names</p>",
        "id": 340213752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340213743\">said</a>:</p>\n<blockquote>\n<p>Why do you not want to use that syntax? It gives a more structure idea of what is happening doesn't it?</p>\n</blockquote>\n<p>I am lazy to write so many lines/symbols.</p>",
        "id": 340213864,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223126
    },
    {
        "content": "<p>you can also use <code>obtain</code> which is the same as <code>rcases</code> but with a syntax closer to <code>have</code></p>",
        "id": 340213872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223133
    },
    {
        "content": "<p><code>obtain a | b := e</code></p>",
        "id": 340213895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340213864\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340213743\">said</a>:</p>\n<blockquote>\n<p>Why do you not want to use that syntax? It gives a more structure idea of what is happening doesn't it?</p>\n</blockquote>\n<p>I am lazy to write so many lines/symbols.</p>\n</blockquote>\n<p>Ideally there will be autocomplete thingies for this</p>",
        "id": 340214042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223182
    },
    {
        "content": "<p>I don't think that alone is a good argument for changing preferred style guides</p>",
        "id": 340214110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223213
    },
    {
        "content": "<p>I suppose here<br>\n<a href=\"https://github.com/madvorak/lean3-tactic-lean4\">https://github.com/madvorak/lean3-tactic-lean4</a><br>\nI will keep <code>cases'</code> as the other options have different syntax.</p>",
        "id": 340214227,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223259
    },
    {
        "content": "<p>On the other hand, here<br>\n<a href=\"https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf\">https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf</a><br>\nI will change it to whatever you tell me to use instead.</p>",
        "id": 340214276,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223279
    },
    {
        "content": "<p>if you are transcribing lean 3 code then yes you should use <code>cases'</code>, and in that case linters and the like will tell you how to fix it</p>",
        "id": 340214367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223300
    },
    {
        "content": "<p>These two documents (repos) have different use cases. I think I don't have to keep them in sync.</p>",
        "id": 340214485,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223366
    },
    {
        "content": "<p>So just tell me which tactic is desirable for the Lean 4 Cheatsheet.</p>",
        "id": 340214524,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223388
    },
    {
        "content": "<p>I think you should recommend <code>cases</code> in the cheatsheet</p>",
        "id": 340214530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223390
    },
    {
        "content": "<p>there are several alternative options, I don't know whether you want to elaborate on them on the page</p>",
        "id": 340214629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223422
    },
    {
        "content": "<p>OK, and the whole line in the column \"Appears in hypothesis\" should be?</p>",
        "id": 340214658,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223438
    },
    {
        "content": "<p>I think that mentioning all those imports is completely useless in such a document. You should mention only one import that bring all those tactics. This document is intended only for beginners and they shouldn't need to worry about minimal imports here.</p>",
        "id": 340214688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678223456
    },
    {
        "content": "<p>I need to describe it concisely.</p>",
        "id": 340214691,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340214688\">said</a>:</p>\n<blockquote>\n<p>I think that mentioning all those imports is completely useless in such a document. You should mention only one import that bring all those tactics. This document is intended only for beginners and they shouldn't need to worry about minimal imports here.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"576805\">@Elisabeth Bonnevier</span> wanted to see the imports specifically.</p>",
        "id": 340214779,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340214658\">said</a>:</p>\n<blockquote>\n<p>OK, and the whole line in the column \"Appears in hypothesis\" should be?</p>\n</blockquote>\n<p>what I posted above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">new_name</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">proof</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">new_name</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">proof</span>\n</code></pre></div>",
        "id": 340214804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223507
    },
    {
        "content": "<p>yeah, it's not one line. Some tactics are like that</p>",
        "id": 340214888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223530
    },
    {
        "content": "<p>I see it is not one line. But for the sake of the document, I need to fit it into two lines.</p>",
        "id": 340214964,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223558
    },
    {
        "content": "<p>I think you shouldn't</p>",
        "id": 340215028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223590
    },
    {
        "content": "<p>I am pretty sure she didn't expect to have one import per tactic. Otherwise I can only tell her what I told you: this is a bad idea for beginners.</p>",
        "id": 340215050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678223598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340201230\">said</a>:</p>\n<blockquote>\n<p>Will you be importing all of Mathlib4 by default? Or should I add what imports are needed for each tactic?</p>\n</blockquote>\n<p>This is what I asked.</p>",
        "id": 340215152,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223638
    },
    {
        "content": "<p>if you try to compress the syntax for <code>cases</code> onto one line it will be confusing for readers to figure out how to use it correctly in multiline scenarios</p>",
        "id": 340215251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223662
    },
    {
        "content": "<p>Martin, you can use rcases for all this. I agree those Lean4-style branching tactics are much harder to explain.</p>",
        "id": 340215380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678223717
    },
    {
        "content": "<p>(It is technically legal to use <code>cases expr with | inl new_name =&gt; proof | inr new_name =&gt; proof</code> but this doesn't scale very well)</p>",
        "id": 340215384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340215028\">said</a>:</p>\n<blockquote>\n<p>I think you shouldn't</p>\n</blockquote>\n<p>The document is at its limit. I either have to keep <code>cases'</code> or change it to <code>rcases</code> or (in order to to allow <code>cases</code> as we want) I have to delete something else.</p>",
        "id": 340215461,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223756
    },
    {
        "content": "<p><code>cases expr with match_arms</code></p>",
        "id": 340215594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340215594\">said</a>:</p>\n<blockquote>\n<p><code>cases expr with ...</code></p>\n</blockquote>\n<p>OK, this goes into the document?</p>",
        "id": 340215707,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223837
    },
    {
        "content": "<p>yes</p>",
        "id": 340215731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223848
    },
    {
        "content": "<p>What is <code>match_arms</code> in your edited response?</p>",
        "id": 340215749,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223853
    },
    {
        "content": "<p>another metavariable-looking thing</p>",
        "id": 340215793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223869
    },
    {
        "content": "<p>you aren't going to be able to explain the full syntax in these constraints</p>",
        "id": 340215810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340215707\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340215594\">said</a>:</p>\n<blockquote>\n<p><code>cases expr with ...</code></p>\n</blockquote>\n<p>OK, this goes into the document?</p>\n</blockquote>\n<p>Into all three occurences?</p>",
        "id": 340215911,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678223901
    },
    {
        "content": "<p>for both 'and' and 'exists' you can use <code>let &lt;x, hx&gt; := e</code></p>",
        "id": 340215977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223937
    },
    {
        "content": "<p>or <code>have</code>, it doesn't really matter</p>",
        "id": 340216006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678223947
    },
    {
        "content": "<p>Or I can use <code>rcases</code> for all three and the syntax fits into the lines?</p>",
        "id": 340216129,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678224000
    },
    {
        "content": "<p>I don't know, this seems to be mixing concerns about space in the document and best practices for tactic usage in a way that is hard to navigate</p>",
        "id": 340216325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678224058
    },
    {
        "content": "<p>Is <code>rcases</code> bad as a practice?</p>",
        "id": 340216564,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678224140
    },
    {
        "content": "<p>I'm not a teacher. For classes you often need to specifically curate tactic lists which are optimized to keep the lexicon small</p>",
        "id": 340216654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678224176
    },
    {
        "content": "<p><code>rcases</code> isn't bad, as I said there is more than one way to do it</p>",
        "id": 340216691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678224189
    },
    {
        "content": "<p>Well, since this isn't for my class, I will wait for what <span class=\"user-mention\" data-user-id=\"576805\">@Elisabeth Bonnevier</span> prefers.</p>",
        "id": 340216780,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678224231
    },
    {
        "content": "<p>but asking for one way to be the 'best' is hard, I expect that to be context dependent</p>",
        "id": 340216789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678224237
    },
    {
        "content": "<p>I can also make more branches of the repo, if more than one person is interested in having a document of this type.</p>",
        "id": 340216895,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678224263
    },
    {
        "content": "<p>I will eventually also create a version in Czech (my native language) which might possibly differ in the content as well.</p>",
        "id": 340217224,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678224398
    },
    {
        "content": "<p>Here are the ways to perform and elimination I can think of off the top of my head:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- and elim</span>\n<span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n<span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n<span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n<span class=\"bp\">·</span> <span class=\"n\">rcases</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n<span class=\"bp\">·</span> <span class=\"n\">cases'</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">·</span> <span class=\"n\">induction'</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">·</span> <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">e</span>\n  <span class=\"n\">next</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">·</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">e</span>\n  <span class=\"n\">next</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">e.elim</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n\n<span class=\"c1\">-- and elim + intro</span>\n<span class=\"bp\">·</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n<span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n<span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 340217633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678224556
    },
    {
        "content": "<p>interestingly, <em>all</em> of those examples work for exists elimination as well</p>",
        "id": 340218082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678224723
    },
    {
        "content": "<p>Some of them require more lines, right?</p>",
        "id": 340218238,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678224779
    },
    {
        "content": "<p>what do you mean? As you can see some of them are two lines but none of them require more than is shown</p>",
        "id": 340218327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678224825
    },
    {
        "content": "<p>Oh sorry. I thought your claim was about <code>or</code> elimination. My bad!</p>",
        "id": 340218507,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678224887
    },
    {
        "content": "<p>for or elimination the list is a bit different</p>",
        "id": 340218533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678224903
    },
    {
        "content": "<p>Here's another for your list Mario:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">e</span>\n<span class=\"n\">next</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 340218559,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678224915
    },
    {
        "content": "<p>Eliminating <code>exists</code> in the same way as <code>and</code> sounds believable.</p>",
        "id": 340218595,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678224930
    },
    {
        "content": "<p>Here's the list for or elim:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- or elim</span>\n<span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n<span class=\"bp\">·</span> <span class=\"n\">rcases</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span>\n<span class=\"bp\">·</span> <span class=\"n\">cases'</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">·</span> <span class=\"n\">induction'</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">·</span> <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">e</span>\n  <span class=\"n\">next</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"n\">next</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">e</span>\n  <span class=\"n\">next</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"n\">next</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">e.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- or elim + intro</span>\n<span class=\"bp\">·</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">intro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340219103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678225128
    },
    {
        "content": "<p>Nice! I saved it.</p>",
        "id": 340220968,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678225860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340201230\">said</a>:</p>\n<blockquote>\n<p>Will you be importing all of Mathlib4 by default? Or should I add what imports are needed for each tactic?</p>\n</blockquote>\n<p>How do I import all of Mathlib4 by default? I only know how to import specific files with import statements at the start of the file.</p>",
        "id": 340293757,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678263741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340214779\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340214688\">said</a>:</p>\n<blockquote>\n<p>I think that mentioning all those imports is completely useless in such a document. You should mention only one import that bring all those tactics. This document is intended only for beginners and they shouldn't need to worry about minimal imports here.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"576805\">Elisabeth Bonnevier</span> wanted to see the imports specifically.</p>\n</blockquote>\n<p>If it is better to have one import that brings all, then do that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 340294802,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678264064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340216780\">said</a>:</p>\n<blockquote>\n<p>Well, since this isn't for my class, I will wait for what <span class=\"user-mention silent\" data-user-id=\"576805\">Elisabeth Bonnevier</span> prefers.</p>\n</blockquote>\n<p>I am an Agda user and have only learned basic Lean 4 in order to give an introduction to computer formalisation to mathematicians. So I don't know what the best tactics are. You who are more experienced with Lean should decide what would be best to recommend to beginners and I will adapt to that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 340295353,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678264250
    },
    {
        "content": "<p>You can import all of mathlib4 with <code>import Mathlib</code>. For my beginner mathematician students working with lean 3 I start every file with <code>import tactic</code> which imports essentially all the mathlib3 tactics; as far as I know there is no analogue of this yet, and perhaps there should be (I want all the tactics available to students to minimise misunderstanding but I don't necessarily want all the technical results about measure theory, functional analysis and commutative algebra to be available at all times!). </p>\n<p>Note that <code>import Mathlib</code> should succeed in just a few seconds. If it doesn't then you need to type <code>lake exe cache get</code> into the command line, and this can be a bit flaky (you have to have a relatively recent <code>curl</code> for example). Lean 4 and the tools we use to play with it are still more of a project in places, rather than a finished product. This is why I still teach with lean 3 (well, that and the fact that I need all of the maths library because I'm doing more advanced mathematics with final year students, and only 40% of the maths library is ported to lean 4 right now)</p>",
        "id": 340298553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678265246
    },
    {
        "content": "<p>After you decide <span class=\"user-mention\" data-user-id=\"576805\">@Elisabeth Bonnevier</span> tell me how you want me to change the document.<br>\n(1) Keep or remove the imports?<br>\n(2) Keep <code>cases'</code> or change it to <code>cases</code> or to <code>rcases</code> (I personally prefer the latter)?</p>",
        "id": 340300603,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678265895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340300603\">said</a>:</p>\n<blockquote>\n<p>After you decide <span class=\"user-mention silent\" data-user-id=\"576805\">Elisabeth Bonnevier</span> tell me how you want me to change the document.<br>\n(1) Keep or remove the imports?<br>\n(2) Keep <code>cases'</code> or change it to <code>cases</code> or to <code>rcases</code> (I personally prefer the latter)?</p>\n</blockquote>\n<p>Okay, if it's up to me, I would:<br>\n(1) keep the information about where the tactics are imported from<br>\n(2) use <code>cases</code> (that's what I've been using so far)</p>",
        "id": 340302274,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1678266439
    },
    {
        "content": "<p><a href=\"https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf\">https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf</a></p>",
        "id": 340337269,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678275880
    },
    {
        "content": "<p>For the sake of consistency, wouldn't it be better to write the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">new_name</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n</code></pre></div>",
        "id": 340337788,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678276018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/340298553\">said</a>:</p>\n<blockquote>\n<p>as far as I know there is no analogue of this yet, and perhaps there should be</p>\n</blockquote>\n<p>Maybe we should make a file like <a href=\"https://github.com/leanprover-community/mathport/blob/e898d4a1467fae2a9941c37081d8fff5041d617c/Mathport/Syntax/Translate/Tactic/Mathlib.lean\">https://github.com/leanprover-community/mathport/blob/e898d4a1467fae2a9941c37081d8fff5041d617c/Mathport/Syntax/Translate/Tactic/Mathlib.lean</a> but for actual Lean 4 / Std4 / Mathlib4 tactics.</p>",
        "id": 340338244,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678276148
    },
    {
        "content": "<p>Now that we have covered <span class=\"user-mention\" data-user-id=\"576805\">@Elisabeth Bonnevier</span> 's use case, what do yall want me to change in the document so it will be useful for other teachers/users?</p>",
        "id": 340391744,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678289006
    },
    {
        "content": "<p>What do you want me to change in<br>\n<a href=\"https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf\">https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf</a><br>\nfor better usability in other courses or groups?</p>",
        "id": 345454128,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1680106736
    },
    {
        "content": "<p>I should probably remove the imports. Anything else?</p>",
        "id": 345635814,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1680174508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span>  I like that you have put the imports: this type of information is not easy to find when you start, so it is useful to have it here,  at least in my view (even if you don't need it, you will wonder about it). Thanks for putting the cheatsheet together <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 346219201,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1680365028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> noticed an important problem: <code>simp</code> is missing in the cheatsheet.<br>\nI will add it, of course.<br>\nHowever, the cheatsheet is getting too long.<br>\nI suggest we should remove a few tactics, too.<br>\nMy candidates for removal are <code>apply?</code> because it has never ever helped me (but other people say it is useful, so I am confused) and <code>exfalso</code> because students can use <code>by_contra</code> instead (I already removed <code>contrapose</code> for similar reasons).<br>\nWhat do you think?</p>",
        "id": 393565417,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695846258
    },
    {
        "content": "<p>As I said in the other thread while I like convert_to I don't think it belongs on a cheatsheet one page long necessarily</p>",
        "id": 393566569,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695846806
    },
    {
        "content": "<p>My personal experience: when learning Lean, I <em>never</em> used <code>convert_to</code>, while I hoped a lot to get help using <code>library_search</code>.  For this reason, I would remove <code>convert_to</code> before <code>exact?/apply?</code>.  It might be reasonable to join the two in the same entry, though.</p>\n<p>As for <code>exfalso</code>, I found it very useful as a beginner.</p>",
        "id": 393566578,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695846813
    },
    {
        "content": "<p>Having rw appear twice seems a bit excessive to me also . Especially as in lean 4 the brackets are not optional so the syntax should already be quite reminiscent of a list</p>",
        "id": 393566851,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695846939
    },
    {
        "content": "<p>rw and simp can do the job of unfold most of the time so I'm not sure that needs to be there either</p>",
        "id": 393566974,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695846972
    },
    {
        "content": "<p>I love <code>exfalso</code> because it documents the intention very well (and it is also a very cool name).<br>\nI love <code>convert_to</code> for it saved my ass so many times.<br>\nI agree that <code>simp</code> is a must.<br>\nI am quite unsure about one <code>rw</code> versus more of them.<br>\nAbout removing <code>unfold</code> I am quite worried (sure, we teach them <code>simp</code> but not <code>dsimp only</code> or what they would need to do the unfolding only).</p>",
        "id": 393567219,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695847109
    },
    {
        "content": "<p><code>unfold</code> I think should go</p>",
        "id": 393567758,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695847378
    },
    {
        "content": "<p>I would maybe merge <code>exact?</code>/<code>apply?</code> and maybe even <code>rw?</code> together</p>",
        "id": 393567796,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695847398
    },
    {
        "content": "<p>Of course <code>gcongr</code> should be present, and <code>aesop</code>.</p>",
        "id": 393567804,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695847400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/393567804\">said</a>:</p>\n<blockquote>\n<p>Of course <code>gcongr</code> should be present, and <code>aesop</code>.</p>\n</blockquote>\n<p>I'll first have to learn myself how to use these tactics! I am adding it to my TODO list.</p>",
        "id": 393567996,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695847500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/393566851\">said</a>:</p>\n<blockquote>\n<p>Having rw appear twice seems a bit excessive to me also . Especially as in lean 4 the brackets are not optional so the syntax should already be quite reminiscent of a list</p>\n</blockquote>\n<p>Would you keep the first <code>rw</code> entry only?</p>",
        "id": 393568380,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695847695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/393566569\">said</a>:</p>\n<blockquote>\n<p>As I said in the other thread while I like convert_to I don't think it belongs on a cheatsheet one page long necessarily</p>\n</blockquote>\n<p>I am a bit worried that if I show only <code>convert</code> then students might think that <code>convert</code> has the effect of <code>convert_to</code> instead.<br>\nThe comparison makes you kinda understand both tactics, I believe.</p>",
        "id": 393568820,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695847935
    },
    {
        "content": "<p>I'm still not completely sold on the \"one page only\" restriction.</p>",
        "id": 393569241,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695848167
    },
    {
        "content": "<p>You could do one page for the basic stuff, and then two pages with extra stuff</p>",
        "id": 393570547,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695848816
    },
    {
        "content": "<p>I can make a markdown version that is not restricted by the page (A4) size, which can contain more tactics than the LaTeX version (pdf). Still, I believe that for the document to be useful as a cheatsheet, it shouldn't contain much more stuff than it already does.</p>",
        "id": 393570604,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695848844
    },
    {
        "content": "<p>I think <code>refine</code> should be there as well, I find this tactic very undertaught given how useful it is.</p>",
        "id": 393585298,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1695857938
    },
    {
        "content": "<p>I've also never used <code>convert_to</code>. Are all these tactics available in <code>Mathlib.Tactic.Core</code>? If so, I would just write that (once).</p>",
        "id": 393707701,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695905207
    },
    {
        "content": "<p>In some contexts, apply? is very efficient.</p>",
        "id": 394095251,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1696089053
    },
    {
        "content": "<p>Maybe, tactics could be grouped according to how they are used. <br>\nsimp, rw, are close, and so are apply, refine, convert...</p>",
        "id": 394095359,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1696089141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/394095251\">said</a>:</p>\n<blockquote>\n<p>In some contexts, apply? is very efficient.</p>\n</blockquote>\n<p>Can you please give me an example? I have never benefited from what <code>apply?</code> gave me.</p>\n<p>I don't doubt your claim. I just want to understand where or when <code>apply?</code> is useful.</p>",
        "id": 394103012,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696096345
    },
    {
        "content": "<p>I would say <a href=\"https://github.com/alexjbest/lorentz/blob/master/Lorentz/MondayDemo.lean#L70\">https://github.com/alexjbest/lorentz/blob/master/Lorentz/MondayDemo.lean#L70</a> is a situation where iterating <code>apply?</code> is the easiest way to construct the proof (ok the continuity tactic also exists, but in some similar situation where there is no existing tactic <code>apply?</code> is a life saver when you don't know the names of all the lemmas by heart)</p>",
        "id": 394107769,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696101715
    },
    {
        "content": "<p>The first two steps were good!<br>\nSubsequently, I couldn't persuade <code>apply?</code> to give me <code>Continuous.comp continuous_sin</code>.<br>\nShould I introduce a different intermediate goal in order to get there?<br>\nI tried the following but failed...</p>\n<p>The goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I introduced a simpler goal, for which <code>exact?</code> succeeded:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sin</span> <span class=\"n\">x</span>\n<span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">continuous_sin</span>\n</code></pre></div>\n<p>Unfortunately, I cannot extrapolate from this to the original goal. If I simple write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">continuous_sin</span>\n</code></pre></div>\n<p>as the next step, it fails. How did you obtain a hint towards</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">Continuous.comp</span> <span class=\"n\">continuous_sin</span>\n</code></pre></div>\n<p>in your proof?</p>",
        "id": 394454630,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696258887
    },
    {
        "content": "<p>I just did it again and indeed it likes <code>Continuous.comp'</code> more, I ended up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">Continuous.add</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hg</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Continuous.pow</span> <span class=\"bp\">?</span><span class=\"n\">hf.h</span> <span class=\"mi\">3</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Continuous.comp'</span> <span class=\"bp\">?</span><span class=\"n\">hf.h.hg</span> <span class=\"bp\">?</span><span class=\"n\">hf.h.hf</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_sin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_pow</span> <span class=\"mi\">2</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Continuous.comp'</span> <span class=\"bp\">?</span><span class=\"n\">hg.hg</span> <span class=\"bp\">?</span><span class=\"n\">hg.hf</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_cos</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_mul_left</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 394461882,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696261011
    },
    {
        "content": "<p>The proof I wrote was hand written (note it uses apply not refine) but the tactic gets roughly the same proof</p>",
        "id": 394461993,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696261047
    },
    {
        "content": "<p>Unfortunately <code>Continuous.comp'</code> is pretty low in the output and it doesn't strike me as useful when reading only its name.</p>",
        "id": 394462955,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696261334
    },
    {
        "content": "<p>You should also read that remaining goals, that' s by far the most important piece of information.</p>",
        "id": 394463145,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696261405
    },
    {
        "content": "<p>Note also the case of continuity goals is pretty special because there are so many lemmas whose conclusion is a continuity statement and which potentially apply everywhere.  For instance, in the case of continuous functions between metric spaces, <code>apply?</code> will always suggest to prove the function is uniformly continuous, or prove it is sequentially continuous, or prove it is continuous at every point, etc. It would be nice if <code>apply?</code> could have heuristic to push these down the list, but this isn' t so obvious (but you can still hope <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> will prove me wrong).</p>",
        "id": 394463790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696261603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/394462955\">said</a>:</p>\n<blockquote>\n<p>Unfortunately <code>Continuous.comp'</code> is pretty low in the output and it doesn't strike me as useful when reading only its name.</p>\n</blockquote>\n<p>Its certainly true that the ordering could be improved! but that is a nontrivial problem, as it verges on automated theorem proving <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> a good algorithm for ordering that always puts what your next step will be at the top very quickly leads to a decent auto proof tactic</p>",
        "id": 394463792,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696261604
    },
    {
        "content": "<p>Thats not to say we shouldn't improve it with good heuristics, I'd still think there is some low hanging fruit there</p>",
        "id": 394463961,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696261666
    },
    {
        "content": "<p>How about ordering by some measure of \"total number of characters in all remaining goals\" for a start?</p>",
        "id": 394464121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696261706
    },
    {
        "content": "<p>It took me pretty long to realize that <code>Continuous.comp'</code> was about function composition.<br>\nClearly, I'm the problem here.</p>",
        "id": 394464562,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696261864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/394103012\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/394095251\">said</a>:</p>\n<blockquote>\n<p>In some contexts, apply? is very efficient.</p>\n</blockquote>\n<p>Can you please give me an example? I have never benefited from what <code>apply?</code> gave me.</p>\n<p>I don't doubt your claim. I just want to understand where or when <code>apply?</code> is useful.</p>\n</blockquote>\n<p>Working about permutations,  their cycle types, their support, etc there are many equivalent ways of passing from one formulation to another, equivalences which mathlib knows and — at least I felt it so — finds by itself.</p>",
        "id": 394483809,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1696268698
    },
    {
        "content": "<p>I'm getting a feeling that you guys use <code>apply?</code> in situations where I use <code>convert_to</code> followed by <code>exact?</code> usually.<br>\nI think that, if you have the proof idea already in your head, <code>convert_to</code> leads to a pretty consistent workflow.<br>\nHowever, I am willing to believe that <code>apply?</code> is easier for most Lean users.</p>",
        "id": 394485516,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696269341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/394464121\">said</a>:</p>\n<blockquote>\n<p>How about ordering by some measure of \"total number of characters in all remaining goals\" for a start?</p>\n</blockquote>\n<p>Won't that just put <code>False.elim</code> at the top every time or something like that?</p>",
        "id": 394514302,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696281431
    },
    {
        "content": "<p>Yes, that's part of why this question isn't easy.</p>",
        "id": 394514913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696281765
    },
    {
        "content": "<p>Maybe it is because I am too used to lean3, but I don't use the syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>in lean4.</p>\n<p>Instead, I use the <code>cases'</code> tactic, which works like the <code>cases</code>one did in lean3.</p>",
        "id": 394516986,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1696282900
    },
    {
        "content": "<p>I was using <code>cases'</code> until very recently, too.<br>\nHowever, with the new quick-fix lightbulb  in the VS Code <code>lean4</code> plugin, I find <code>cases</code> easy to use.<br>\nNow I like <code>cases</code> better.</p>",
        "id": 394587875,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696322912
    },
    {
        "content": "<p>Yeah the lightbulb was crucial for me too</p>",
        "id": 394597188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696326426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/393570604\">said</a>:</p>\n<blockquote>\n<p>I can make a markdown version that is not restricted by the page (A4) size, which can contain more tactics than the LaTeX version (pdf). Still, I believe that for the document to be useful as a cheatsheet, it shouldn't contain much more stuff than it already does.</p>\n</blockquote>\n<p>I started turning the original table into a markdown version:<br>\n<a href=\"https://github.com/madvorak/lean4-tactics/tree/main\">https://github.com/madvorak/lean4-tactics/tree/main</a><br>\nUnfortunately, GitHub alternates row background between white and gray.<br>\nThe latter makes the boundary between code and text hard to see.<br>\nCan I set the background of all rows to white?<br>\nIf not, does it make sense to do it (the longer version of the cheatsheet) as a markdown document on GitHub?</p>",
        "id": 394791803,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696409666
    },
    {
        "content": "<p>I think that it does make sense to have the <code>md</code> version.  I use dark mode, and I can barely notice the parity difference in cell coloring, but the code still stands out.</p>\n<p>Also, I think that avoiding the parity with markdown may not be possible.  If you really wanted, you might write the html equivalent and that <em>may</em> not get autoformatted, but I am not even sure about that.</p>",
        "id": 394801000,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696412956
    },
    {
        "content": "<p>It looks OK in the dark mode (both the high-contrast version and the normal one).<br>\nDo you recommend that I continue with the formatting I started with?</p>",
        "id": 394801671,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696413213
    },
    {
        "content": "<p>Martin, if you are happy to go on with the webpage, I will certainly link it from the webpage for my module!  I already have a link to your cheatsheet!</p>",
        "id": 394803524,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696413854
    },
    {
        "content": "<p>Imma finish the markdown version in a few days.<br>\nToday, I was using to spend some time when Mathlib was building.</p>",
        "id": 394813110,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696416618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/394791803\">said</a>:</p>\n<blockquote>\n<p>Can I set the background of all rows to white?</p>\n</blockquote>\n<p>(You cannot FWIW, at least not while using GitHub Markdown syntax for it and not pure HTML -- but if you're satanic you can hack around it by inserting empty rows in your table -- i.e. <a href=\"https://gist.github.com/Julian/1e06883d37d0448685f3cf8417469e0a\">https://gist.github.com/Julian/1e06883d37d0448685f3cf8417469e0a</a></p>",
        "id": 394838111,
        "sender_full_name": "Julian Berman",
        "timestamp": 1696425212
    },
    {
        "content": "<p>Haha, nice! And it works even better without the <code>&lt;tr&gt;&lt;/tr&gt;</code> at the very end.</p>",
        "id": 394839213,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696425538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/394803524\">said</a>:</p>\n<blockquote>\n<p>Martin, if you are happy to go on with the webpage, I will certainly link it from the webpage for my module!  I already have a link to your cheatsheet!</p>\n</blockquote>\n<p>My part is done. Link here:<br>\n<a href=\"https://github.com/madvorak/lean4-tactics\">https://github.com/madvorak/lean4-tactics</a></p>\n<p>There are four rows with TODOs now.<br>\nThey correspond to tactics that I don't personally use, but people wanted them in the cheatsheet.<br>\nSomebody will certainly fill them in.</p>",
        "id": 394840223,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696425867
    },
    {
        "content": "<p>This page will be very useful (has already been).<br>\nSome minor comments :</p>\n<ul>\n<li>\n<p>for some tactics, such as <code>rw</code>, the <code>(at expr)</code> indication suggest that parentheses have to be inserted, and it seems to be the part “in parentheses” which is optional, while the part “in brackets” has to be there!</p>\n</li>\n<li>\n<p>sometimes <code>expr</code> means <em>one</em> name, sometimes it means a list.</p>\n</li>\n<li>\n<p>I wouldn't insist on <code>new_name</code>: it can be an already used name, although that makes the preceding uses of that name unusable. </p>\n</li>\n<li>\n<p><code>simp?</code> is useful, and almost unavoidable if one wishes not to leave bare <code>simp</code> commands in Lean code.</p>\n</li>\n</ul>",
        "id": 394996341,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1696496970
    },
    {
        "content": "<p>Thanks a lot for noticing that parentheses vs brackets were messed up!!</p>\n<p>I updated the document according to your suggestions (but <code>new_name</code> stayed there).</p>",
        "id": 395050752,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696514574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <br>\n<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nDo you [any subset of you] want credits for creating the previous-previous document? If so, in which form?</p>",
        "id": 395051174,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696514690
    },
    {
        "content": "<p>I think the correct action is to make this into a community owned resource, without attribution.</p>",
        "id": 395051347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696514750
    },
    {
        "content": "<p>Should it be written in the (Un)license file?</p>",
        "id": 395051945,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696514906
    },
    {
        "content": "<p>I think it should simply be put on the community website.</p>",
        "id": 395053392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696515259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/395053392\">said</a>:</p>\n<blockquote>\n<p>I think it should simply be put on the community website.</p>\n</blockquote>\n<p>If you are the community website maintainer, feel free to fork it or hardcopy it to the community website; after all, I unlicensed the document.</p>\n<p>Nevertheless, I will keep the original version on my GitHub (in case that I don't like new redesigns, I will simply keep distributing my version to my students).</p>",
        "id": 395054854,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696515677
    },
    {
        "content": "<p>Of course you can distribute whatever you want to your students.</p>",
        "id": 395055961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696516007
    },
    {
        "content": "<p>Also this table<br>\n<a href=\"https://github.com/madvorak/lean3-tactic-lean4\">https://github.com/madvorak/lean3-tactic-lean4</a><br>\ncould be hardcopied into<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users\">https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users</a><br>\n(Lean 4 survival guide for Lean 3 users).</p>",
        "id": 395056288,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696516105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/395056288\">said</a>:</p>\n<blockquote>\n<p>Also this table<br>\n<a href=\"https://github.com/madvorak/lean3-tactic-lean4\">https://github.com/madvorak/lean3-tactic-lean4</a><br>\ncould be hardcopied into<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users\">https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users</a><br>\n(Lean 4 survival guide for Lean 3 users).</p>\n</blockquote>\n<p>If there is a more general community article that is something like \"Lean 4 survival guide <del>for Lean 3 users</del>\", then that would be a more appropriate place. Otherwise new people like me who never got to use lean3 and generally avoid guides that assume I used lean3 before, would never stumble on such a useful cheatsheet.</p>",
        "id": 395208967,
        "sender_full_name": "Somo S.",
        "timestamp": 1696581574
    },
    {
        "content": "<p>If you never used Lean 3, then <a href=\"https://github.com/madvorak/lean3-tactic-lean4\">https://github.com/madvorak/lean3-tactic-lean4</a> is not for you.</p>",
        "id": 395210779,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696582272
    },
    {
        "content": "<p>oh sorry, my fault .. should have read the discussion more carefully.. i though that was a link to your <a href=\"https://github.com/madvorak/lean4-tactics\">tactic cheatsheet</a> .. which i found very useful despite not having learned lean3</p>",
        "id": 395211398,
        "sender_full_name": "Somo S.",
        "timestamp": 1696582496
    },
    {
        "content": "<p>speaking of which anyway, is the tactic cheatsheet going to be published somewhere on the Community website?</p>",
        "id": 395211546,
        "sender_full_name": "Somo S.",
        "timestamp": 1696582546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/395211398\">said</a>:</p>\n<blockquote>\n<p>oh sorry, my fault .. should have read the discussion more carefully.. i though that was a link to your <a href=\"https://github.com/madvorak/lean4-tactics\">tactic cheatsheet</a> .. which i found very useful despite not having learned lean3</p>\n</blockquote>\n<p>Yeah, I have been maintaining more than one sheet. Different users have different needs.</p>",
        "id": 395217020,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696584464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/395211546\">said</a>:</p>\n<blockquote>\n<p>speaking of which anyway, is the tactic cheatsheet going to be published somewhere on the Community website?</p>\n</blockquote>\n<p>I think so; <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> is in favor of putting it there.</p>",
        "id": 395217134,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696584506
    },
    {
        "content": "<p>Yes, I didn't have time for that yet, but anyone can open a PR to the website repository.</p>",
        "id": 395252599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696596388
    },
    {
        "content": "<p>There were some design decisions that I didn't like in Martin's cheat sheet, so I made my own for my Lean course: <a href=\"https://github.com/fpvandoorn/LeanCourse23/blob/master/lean-tactics.pdf\">https://github.com/fpvandoorn/LeanCourse23/blob/master/lean-tactics.pdf</a><br>\nMartin's version was of course very helpful to get started.</p>\n<p>Some changes:</p>\n<ul>\n<li>don't give import suggestions (except for a \"please import <code>Mathlib.Tactic</code>\" at the top)</li>\n<li>prefer <code>rcases</code> over <code>cases</code></li>\n<li>simplify the syntax by suggesting names of hypotheses and removing parentheses</li>\n<li>different selection of tactics</li>\n<li>give more variants of tactics</li>\n</ul>",
        "id": 396984840,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697494709
    },
    {
        "content": "<p>I like your version! It looks very clean and clear.</p>",
        "id": 397036805,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697523979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> just making sure you've seen this. No action necessary. :-)</p>",
        "id": 397041401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697526047
    },
    {
        "content": "<p>Relatedly Terry Tao has just recently made his own cheatsheet at <a href=\"https://docs.google.com/spreadsheets/d/1Gsn5al4hlpNc_xKoXdU6XGmMyLiX4q-LFesFVsMlANo/edit#gid=0\">https://docs.google.com/spreadsheets/d/1Gsn5al4hlpNc_xKoXdU6XGmMyLiX4q-LFesFVsMlANo/edit#gid=0</a></p>",
        "id": 397041451,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697526064
    },
    {
        "content": "<p>Tao's version is well organized, it can even support a simple tactic possibly named <code>hint</code> with an optional query to match goal/selected hypotheses and optional fuzzy matching the \"mathematical English\".</p>",
        "id": 397044451,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697527212
    },
    {
        "content": "<p>It's a pity we never ported <code>hint</code> from mathlib3. I liked it!</p>",
        "id": 397045184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697527485
    },
    {
        "content": "<p>Simple, extensible and helpful, like a triage for tactics</p>",
        "id": 397047315,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697528259
    },
    {
        "content": "<p>I'm hoping <a href=\"https://github.com/leanprover/std4/pull/215\">std4#215</a> will eventually be merged. It is a great common UI for suggestion tactics.</p>",
        "id": 397048252,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697528572
    },
    {
        "content": "<p>I really like how Tao named the notion of terms used in proofs as \"reasons\" (e.g. for <code>exact</code> and <code>have</code>).</p>",
        "id": 397155076,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697564229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/396984840\">said</a>:</p>\n<blockquote>\n<p>There were some design decisions that I didn't like in Martin's cheat sheet, so I made my own for my Lean course: <a href=\"https://github.com/fpvandoorn/LeanCourse23/blob/master/lean-tactics.pdf\">https://github.com/fpvandoorn/LeanCourse23/blob/master/lean-tactics.pdf</a><br>\nMartin's version was of course very helpful to get started.</p>\n<p>Some changes:</p>\n<ul>\n<li>don't give import suggestions (except for a \"please import <code>Mathlib.Tactic</code>\" at the top)</li>\n</ul>\n</blockquote>\n<p>nice, though personally, i would prefer to know exactly where <code>Mathlib.Tactic</code> or <code>Std.Tactic</code> is required ahead of time. I think maybe it would be better if you indicated that with a less noisy annotation at the end of each description wherever that applies e.g.  \"This tactic does xyz[1]\" (where [1] is a footnote at the bottom that says \"requires <code>Std.Tactic</code>\").</p>\n<p>Alternatively, there could there could be a hyperlink to the definition of such a tactic, by following that link one could know ahead of time, if they need to import extra things</p>",
        "id": 397217231,
        "sender_full_name": "Somo S.",
        "timestamp": 1697598122
    },
    {
        "content": "<p>\"don't give import suggestions\" helps to reduce visual noise for a cheat sheet, a general tip can be given at the top or in footnote to find where the tactic is, either by hover and click into the definition, or look for the name under <code>Mathlib.Tactic</code> source or doc.</p>\n<p>Just as <span class=\"user-mention\" data-user-id=\"582386\">@Somo S.</span> suggested, one might need to know if a tactic can be used without Mathlib (maybe for minimal deps in teaching), a small icon with hyperlink (to its definition in Mathlib or Std/Lean) might suffice for this purpose. But I'm afraid there are many subtle differences between the tactics with and without Mathlib, which might create more confusion as opposed to the intention of simplifying things, so one is better just get familiarized with the Mathlib flavor.</p>",
        "id": 397220518,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697599754
    },
    {
        "content": "<p>anyway, I think what can only end up ultimately emerging, is different kinds of cheatsheets for different kinds of usecases or pedagogies. In my work, I find it important to try to avoid mathlib or std wherever its not necessary or to favor clarity (of what lean is doing) over brevity.</p>",
        "id": 397222180,
        "sender_full_name": "Somo S.",
        "timestamp": 1697600356
    },
    {
        "content": "<p>I think that a \"please import <code>Mathlib.Tactic</code>\" is totally fine for a cheatsheet for beginners. I understand that other use cases are perfectly valid, but I wouldn't clutter a cheat sheet for maths students such info.</p>",
        "id": 397227850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697603406
    },
    {
        "content": "<blockquote>\n<p><code>import Mathlib.Tactic</code> is totally fine for a cheatsheet for beginners</p>\n</blockquote>\n<p>... assuming <code>lake exe cache get</code> works on their computer!</p>",
        "id": 397238026,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697609483
    },
    {
        "content": "<p>If lake exe cache get doesn't work on someone's computer then they should stop what they're doing and get it working, not read a tactic cheatsheet</p>",
        "id": 397239363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697610135
    },
    {
        "content": "<p>agreed, <code>lake exe cache get</code> not working is similar to getting the <code>unknown package 'Mathlib'</code> error: you should debug the issue because you don't yet have a working install</p>",
        "id": 397239849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697610376
    },
    {
        "content": "<p>We should have a troubleshooting page for common installation issues but it would be weird to have such information in a tactic cheatsheet</p>",
        "id": 397240034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697610483
    },
    {
        "content": "<p>I already created a PR for this</p>",
        "id": 397265849,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697620039
    },
    {
        "content": "<p>For the trouble shooting page</p>",
        "id": 397265877,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697620049
    },
    {
        "content": "<p>On the community website this is PR 370</p>",
        "id": 397265899,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697620059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet/near/397227850\">said</a>:</p>\n<blockquote>\n<p>I wouldn't clutter a cheat sheet for maths students such info.</p>\n</blockquote>\n<p>I thought its a general cheatsheet for anyone learning lean not just for math students? Again maybe there should be one thats for everyone or multiple that emphasize different usecases/applications.</p>",
        "id": 397427373,
        "sender_full_name": "Somo S.",
        "timestamp": 1697689816
    },
    {
        "content": "<p>The one by Floris was designed for a course for math students.</p>",
        "id": 397427432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697689879
    },
    {
        "content": "<p>Can somebody (who understands given tactics) please fill those TODOs?<br>\n<a href=\"https://github.com/madvorak/lean4-tactics\">https://github.com/madvorak/lean4-tactics</a><br>\nAfter that, the cheatsheet should be ready to go to the Lean community website.</p>",
        "id": 403537304,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700639167
    },
    {
        "content": "<p>Most of them have an explanation here: <a href=\"https://github.com/fpvandoorn/LeanCourse23/blob/master/lean-tactics.pdf\">https://github.com/fpvandoorn/LeanCourse23/blob/master/lean-tactics.pdf</a></p>",
        "id": 403547481,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700643565
    },
    {
        "content": "<p>Catalan version:<br>\n<a href=\"https://github.com/madvorak/lean4-tactics/blob/main/README-CAT.md\">https://github.com/madvorak/lean4-tactics/blob/main/README-CAT.md</a><br>\nCzech version:<br>\n<a href=\"https://github.com/madvorak/lean4-tactics/blob/main/README-CZE.md\">https://github.com/madvorak/lean4-tactics/blob/main/README-CZE.md</a></p>",
        "id": 407528594,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702402658
    }
]