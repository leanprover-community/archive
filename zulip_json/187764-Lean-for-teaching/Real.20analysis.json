[
    {
        "content": "<p>If I understand correctly, <span class=\"user-mention\" data-user-id=\"210574\">@Patrick Massot</span> has taught a whole real analysis course in Lean.  I would like to do this someday, but as a test last semester I had two real analysis students do some optional exercises:</p>",
        "id": 196926248,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588959332
    },
    {
        "content": "<p>(By the way, since it was just two students, I could give just a few more difficult problems, rather than working up to them with large numbers of easier problems.)</p>",
        "id": 196926471,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588959446
    },
    {
        "content": "<p>This is not quite the situation. Students have a whole real analysis course during the first semester with zero Lean (or any proof assistant). They see epsilons during lectures, but the exams are 100% about calculating stuff. During the second semester they have twelve weeks with me, doing two hours of Lean with me. What we cover in those 12 weeks is a strict subset of the first semester course.</p>",
        "id": 196926594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588959493
    },
    {
        "content": "<p>project 1:  I wrote a proof that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Lemma</span> <span class=\"n\">limitX</span> <span class=\"o\">:</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">INR</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">INR</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">INR</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n</code></pre></div>\n\n\n<p>and had them adapt it to a proof that </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Lemma</span> <span class=\"n\">limitX</span> <span class=\"o\">:</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">INR</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">INR</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">INR</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 196926867,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588959619
    },
    {
        "content": "<p>project 2: I wrote a proof that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Lemma</span> <span class=\"n\">limit_plus</span> <span class=\"o\">:</span>  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">Xn</span> <span class=\"n\">Yn</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">limit</span> <span class=\"n\">Xn</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">limit</span> <span class=\"n\">Yn</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Xn</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">Yn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>\n\n\n<p>and had them adapt it to a proof that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Lemma</span> <span class=\"n\">limit_mult</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">Xn</span> <span class=\"n\">Yn</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">limit</span> <span class=\"n\">Xn</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">limit</span> <span class=\"n\">Yn</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Xn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Yn</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 196927168,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588959777
    },
    {
        "content": "<p>project 3: I indicated this section of the textbook and had them formalize it themselves:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Definition</span> <span class=\"n\">monotone_incr</span> <span class=\"o\">(</span><span class=\"n\">Xn</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">forall</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Xn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=</span> <span class=\"o\">(</span><span class=\"n\">Xn</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Lemma</span> <span class=\"n\">monotone_conv</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">Xn</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">monotone_incr</span> <span class=\"n\">Xn</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bound</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">R</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">exists</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">Xn</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">exists</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"n\">Xn</span> <span class=\"n\">x</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 196927487,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588959934
    },
    {
        "content": "<p><code>INR n</code> is the real number corresponding to the natural number <code>n</code>?</p>",
        "id": 196927510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588959945
    },
    {
        "content": "<p>Yes. (For those new to the thread, this is Coq, not Lean.)</p>",
        "id": 196927617,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588959979
    },
    {
        "content": "<p>I am sure there is a clever way to do type conversions in Coq, but since I was new to it myself, I only knew the clunky way.</p>",
        "id": 196927658,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588960005
    },
    {
        "content": "<p>I am new to Lean but I have already discovered that it has nice type conversion commands!</p>",
        "id": 196927794,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588960075
    },
    {
        "content": "<p>You can just coerce in Lean: given <code>n : ℕ</code> you can just talk about <code>n : ℝ</code>. It's great that you're showing mathematicians formal proof verification systems! I use Lean in my undergraduate lectures but it's 100% optional; I run a club on Thursday evenings where people can talk to me about it.</p>",
        "id": 196928147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588960251
    },
    {
        "content": "<p>Did anyone manage to do project 3? It looks pretty tough. Are there good introductions to mathematics in Coq? We're frantically trying to make Lean teaching materials for mathematicians.</p>",
        "id": 196928211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588960298
    },
    {
        "content": "<p>It was a good experience and the students seemed to learn a lot from it (as did I).  I think real analysis is a very good playground for formalized proof:  the proof structures are complicated (all those for-alls and there-exists), but also more or less the same every time, so the students can get the hang of it fast.</p>",
        "id": 196928292,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588960325
    },
    {
        "content": "<p>Yes, they did all 3 projects!  I spent a <em>lot</em> of time helping, but they took the big steps themselves.</p>",
        "id": 196928376,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588960372
    },
    {
        "content": "<p>I guess I can prove these things in Lean but I have no idea how these things would look like in Coq. Are there specialised tools for solving this sort of thing? For the first lemma I would just show that for n sufficiently large the abs value of the numerator was at most 2n and the abs value of the denominator was at least 1/2*n^4, which would be a bit of a kerfuffle</p>",
        "id": 196928484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588960425
    },
    {
        "content": "<p>For me, the mess of absolute values and epsilons is the point -- I think this is what introductory real analysis course should teach them :)</p>",
        "id": 196928684,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588960512
    },
    {
        "content": "<p>I hesitate to say \"Coq can't do this or that\", because I am also fairly new to Coq -- but I do not know how to do the analogue of a <code>calc</code> proof or <code>library_search</code> in Coq.</p>",
        "id": 196928847,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588960583
    },
    {
        "content": "<p>These are both great features of Lean, which make it more natural.  I plan to switch to Lean if/when I do this again.</p>",
        "id": 196928901,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588960609
    },
    {
        "content": "<p>But conversely you could envisage a more conceptual proof along the lines of \"by a tactic, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo>−</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><msup><mi>n</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">(n^4-3n+3)/n^4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span> tends to 1, so by a theorem we can replace the denominator by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span> etc</p>",
        "id": 196928922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588960617
    },
    {
        "content": "<p>But such a tactic doesn't exist in Lean (although the theorem does) so one would have to work in a more low-level manner. It would not surprise me if one could solve all these questions with a tactic in Isabelle/HOL</p>",
        "id": 196929031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588960670
    },
    {
        "content": "<p>But on the other hand, did you say you were a differential geometer? Trying to define tangent bundles in Isabelle/HOL would be a nightmare, that's why I am using a system with dependent types</p>",
        "id": 196929152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588960714
    },
    {
        "content": "<p>Indeed, it would be possible to write tactics to do all these problems.  But I think the experience of doing them \"on paper\" as a beginning analysis student is better replicated by typing out the proofs by hand, rather than by invoking a tactic.  My dream is to set a homework assignment full of epsilon-delta problems, and have the computer grade it!</p>",
        "id": 196929444,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588960846
    },
    {
        "content": "<p>It would take some guts to do this sort of thing in a differential geometry course though :-) I taught algebraic geometry last term and I formalised about 1/3 of the course but then I got bogged down by the Nullstellensatz and eventually got so far behind that I put the entire thing on hold</p>",
        "id": 196929467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588960855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/187764-Lean-for.20teaching/topic/Real.20analysis/near/196929444\" title=\"#narrow/stream/187764-Lean-for.20teaching/topic/Real.20analysis/near/196929444\">said</a>:</p>\n<blockquote>\n<p>My dream is to set a homework assignment full of epsilon-delta problems, and have the computer grade it!</p>\n</blockquote>\n<p>Right! The problem is that I don't think my university would at this point buy the idea of forcing 1st years to learn a system such as this. Course they're doing this sort of thing in computer science departments everywhere!</p>",
        "id": 196929594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588960916
    },
    {
        "content": "<p>Though Coq does have one lower-level tactic that helps with these -- it's called <code>nra</code>, \"nonlinear real arithmetic\", and it's a (limited) nonlinear version of Lean's <code>linarith</code>. Great for inequalities.</p>",
        "id": 196929703,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588960957
    },
    {
        "content": "<p>I spent some time today grading Richard Thomas' 1st year analysis exam, and in Q2 he divides by zero! If he'd formalised his solutions in Lean he would have noticed :-)</p>",
        "id": 196929782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588960996
    },
    {
        "content": "<p>So it's not just the teachers who get a better deal if the students are formalising solutions in Lean, the students would also not have to deal with annoying typos in an exam situation</p>",
        "id": 196929868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961039
    },
    {
        "content": "<p>\"2(b): For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n\\geq0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msqrt><mo>−</mo><msqrt><mi>n</mi></msqrt><mo>≤</mo><mfrac><mn>1</mn><mrow><mn>2</mn><msqrt><mi>n</mi></msqrt></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sqrt{n+1}-\\sqrt{n}\\leq\\frac{1}{2\\sqrt{n}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.17444499999999996em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8655550000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.825555em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17444499999999996em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.383108em;vertical-align:-0.538em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6258665em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord sqrt mtight\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8059050000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mtight\" style=\"padding-left:0.833em;\"><span class=\"mord mathdefault mtight\">n</span></span></span><span style=\"top:-2.765905em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail mtight\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.234095em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.538em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\"</p>",
        "id": 196929942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961068
    },
    {
        "content": "<p>Fortunately I was marking Q3 so I don't get to see what the students thought of that...</p>",
        "id": 196929986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961086
    },
    {
        "content": "<p>In Lean 1/0=0 so the question is actually false :-)</p>",
        "id": 196930012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961101
    },
    {
        "content": "<p>One more lower-level tactic that does not exist in Coq, so far as I know, but would be great:  something like <code>ring</code> or <code>linarith</code> but which also manipulates absolute values (at least <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mi>b</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>b</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|ab|=|a||b|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">b</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">a</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">b</span><span class=\"mord\">∣</span></span></span></span>, but maybe also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mo>+</mo><mi>b</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>b</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|a+b|\\leq |a|+|b|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">a</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">b</span><span class=\"mord\">∣</span></span></span></span>).  Maybe Lean's <code>simp</code> does this?</p>",
        "id": 196930039,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588961112
    },
    {
        "content": "<p>I formalised my exam! But I am a bit of an extremist...</p>",
        "id": 196930065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961122
    },
    {
        "content": "<p><code>simp</code> only rewrites equalities, so it won't use the triangle inequality</p>",
        "id": 196930121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961149
    },
    {
        "content": "<p>Oh dear.  That hits close to home, I just corrected an in-progress exam (we are teaching remotely and asynchronously) with a sign error.</p>",
        "id": 196930225,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588961182
    },
    {
        "content": "<p>and I don't think <code>linarith</code> uses the triangle inequality either. But I've formalised a bunch of stuff like this in Lean (and got students to formalise more at my club) and the trick is that there are lemmas called things like <code>abs_le</code> and you rewrite those first</p>",
        "id": 196930276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961213
    },
    {
        "content": "<p>You replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">|x|\\leq a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>a</mi><mo>≤</mo><mi>x</mi><mo>≤</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">-a\\leq x\\leq a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> and then <code>linarith</code> can do its magic</p>",
        "id": 196930323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961243
    },
    {
        "content": "<p>One of my undergraduates got quite into it and made <a href=\"https://github.com/JasonKYi/M4000x_LEAN_formalisation\" title=\"https://github.com/JasonKYi/M4000x_LEAN_formalisation\">this</a></p>",
        "id": 196930481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961312
    },
    {
        "content": "<p>!!!</p>",
        "id": 196930627,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588961392
    },
    {
        "content": "<p>It's pretty cool what undergraduates can do if you encourage them; he's doing basic stuff with differentiability and continuity in Lean, just formalising the lectures himself -- I taught him Lean and he just decided to go for it. There is a bunch of elementary analysis there.</p>",
        "id": 196930631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588961394
    }
]