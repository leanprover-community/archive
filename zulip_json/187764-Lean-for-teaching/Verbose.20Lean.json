[
    {
        "content": "<p>After a lot of demands, I finally took a day to translate my verbose Lean teaching tactics into (very fake) English. I'm sorry some people have been waiting for this for nearly one year. The result can be found at <a href=\"https://github.com/PatrickMassot/lean-verbose\">https://github.com/PatrickMassot/lean-verbose</a>. I didn't spend time figuring out the best translation, for lack of time and English language fluency. I'm sure people will soon suggest nice improvements. Please keep in mind this is a hack that will probably be very easy to improve in Lean 4 (see the <a href=\"https://github.com/PatrickMassot/lean-verbose/blob/master/README.md\">README</a> for information about the price to pay for abusing the Lean 3 parser). And I guess even the Lean 4 won't be able to compete with actual controlled natural language dedicated parsers, but <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  should feel very free to prove me wrong.</p>",
        "id": 264073706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638912041
    },
    {
        "content": "<p>For the impatient people: you can have a look at <a href=\"https://github.com/PatrickMassot/lean-verbose/blob/master/test/sample.lean\">sample.lean</a> but beware that GitHub syntax highlighting is completely wrong and misleading here.</p>",
        "id": 264073927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638912146
    },
    {
        "content": "<p>Unfortunately I currently don't have a solution better than using a custom version of the VSCode syntax highlighting if you want proper highlighting as in my <a href=\"https://www.imo.universite-paris-saclay.fr/~pmassot/files/exposition/why_formalize.pdf\">essay</a>.</p>",
        "id": 264074045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638912214
    },
    {
        "content": "<p>Maybe I should warn Sebastian to get a glass of Whisky ready before opening <a href=\"https://github.com/PatrickMassot/lean-verbose/blob/master/src/parsers.lean\">https://github.com/PatrickMassot/lean-verbose/blob/master/src/parsers.lean</a>, just in case.</p>",
        "id": 264074370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638912350
    },
    {
        "content": "<p>Looks perfectly reasonable to me</p>",
        "id": 264076605,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638913244
    },
    {
        "content": "<p>But maybe that's the whiskey talking</p>",
        "id": 264076881,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638913356
    },
    {
        "content": "<p>Is there any hope to avoid the long list of new tokens from the beginning of that file in Lean 4?</p>",
        "id": 264077361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638913597
    },
    {
        "content": "<p>Any tokens used in parsers are registered automatically in Lean 4</p>",
        "id": 264077984,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638913864
    },
    {
        "content": "<p>I have completed a first Lean 4 version of my Lean verbose library. You can find it at <a href=\"https://github.com/PatrickMassot/verbose-lean4\">https://github.com/PatrickMassot/verbose-lean4</a>. This time the French and English versions are hosted in the same repository and share their backend so hopefully the English version will stay up to date. But I haven't yet ported the help tactic that was only in the French Lean 3 version. The Lean 4 version is far from being thoroughly tested but interested people can already play with it. The examples file from starts with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Verbose.English.ExampleLib</span>\n\n<span class=\"n\">Exercise</span> <span class=\"s2\">\"Continuity implies sequential continuity\"</span>\n  <span class=\"n\">Given</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"n\">Assume</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">converges</span> <span class=\"n\">to</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">is</span> <span class=\"n\">continuous</span> <span class=\"n\">at</span> <span class=\"n\">x₀</span><span class=\"o\">)</span>\n  <span class=\"n\">Conclusion</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">converges</span> <span class=\"n\">to</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span>\n<span class=\"n\">Proof</span><span class=\"o\">:</span>\n  <span class=\"n\">Let's</span> <span class=\"n\">prove</span> <span class=\"n\">that</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n  <span class=\"n\">Fix</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"n\">By</span> <span class=\"n\">hf</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"n\">ε</span> <span class=\"n\">using</span> <span class=\"n\">ε_pos</span> <span class=\"n\">we</span> <span class=\"n\">get</span> <span class=\"n\">δ</span> <span class=\"n\">such</span> <span class=\"n\">that</span>\n    <span class=\"o\">(</span><span class=\"n\">δ_pos</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"n\">By</span> <span class=\"n\">hu</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"n\">δ</span> <span class=\"n\">using</span> <span class=\"n\">δ_pos</span> <span class=\"n\">we</span> <span class=\"n\">get</span> <span class=\"n\">N</span> <span class=\"n\">such</span> <span class=\"n\">that</span> <span class=\"n\">Hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span>\n  <span class=\"n\">Let's</span> <span class=\"n\">prove</span> <span class=\"n\">that</span> <span class=\"n\">N</span> <span class=\"n\">works</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n  <span class=\"n\">Fix</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span>\n  <span class=\"n\">By</span> <span class=\"n\">Hf</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"n\">it</span> <span class=\"k\">suffices</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">δ</span>\n  <span class=\"n\">We</span> <span class=\"n\">conclude</span> <span class=\"kd\">by</span> <span class=\"n\">Hu</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">n_ge</span>\n<span class=\"n\">QED</span>\n</code></pre></div>\n<p>For people not familiar with Lean verbose, let me emphasize the above snippet is actual game content, not a cinematic.  And it is properly highlighted in VSCode (unless you switch off semantic highlighting).</p>",
        "id": 403099900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700460408
    },
    {
        "content": "<p>An important consequence of the new code layout is that adding support for more languages would be very easy, with essentially no meta-programming knowledge required.</p>",
        "id": 403100244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700460651
    },
    {
        "content": "<p>This is really fun!</p>",
        "id": 403149775,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1700479670
    },
    {
        "content": "<p>Very nice! It looks really good.</p>\n<p>The phrases <code>We discuss using h</code> / <code>We discuss depending on P</code> sound very weird to me. <br>\nI would suggest <code>We do case analysis using h</code> or <code>We do cases on h</code>.</p>",
        "id": 403149787,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700479676
    },
    {
        "content": "<p>Every suggestion about English phrasing is very welcome. There are lots of things that sound much better in French but I don't know how to improve in English. My plan was to ask local people in Pittsburgh who teach math but know no Lean. In particular I'm afraid that \"We do cases on h\" is Lean-inspired. Would normal people say that?</p>",
        "id": 403177853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700489441
    },
    {
        "content": "<p>Another remark about this library: it can be useful even if you don't focus on teaching proofs on paper. Tactics can be used with a different syntax. Some are simply wrappers around standard tactics. But others do actual extra work. For instance <code>By foo we get bar baz</code> will first try <code>rcases foo with ⟨bar, baz⟩</code> but if that fail then it tries to apply lemmas tagged with <code>anonymous_split_lemma</code>. This how you can see things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">By</span> <span class=\"n\">hN</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">n_ge</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">we</span> <span class=\"n\">get</span> <span class=\"n\">hN'</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"n\">By</span> <span class=\"n\">hN'</span> <span class=\"n\">we</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403178674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700489695
    },
    {
        "content": "<p>Which of course can also be written as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">By</span> <span class=\"n\">hN</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">n_ge</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">we</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403178783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700489733
    },
    {
        "content": "<p>My non-native ears like <code>We do case analysis using h</code>.</p>",
        "id": 403204724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700497681
    },
    {
        "content": "<p>How bout \"Let's do a case analysis on <code>h</code>\"?</p>",
        "id": 403213740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700500985
    },
    {
        "content": "<p>\"Let's do a case distinction on <code>P</code>\", when <code>P</code> is a Prop. But when <code>h</code> has type <code>P \\or Q</code>, would you write \"case analysis <em>on</em> <code>h</code>\", or \"using <code>h</code>\"?</p>",
        "id": 403215288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700501562
    },
    {
        "content": "<p>I would say \"on\".</p>",
        "id": 403216182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700501918
    },
    {
        "content": "<p>But either one works, I guess...</p>",
        "id": 403216211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700501933
    },
    {
        "content": "<p>\"We proceed by cases\" is common wording, but usually you figure out what the cases are by reading the cases. In a wordy text, I could imagine \"We proceed by cases on whether P is true or Q is true\", so that supports \"on\"</p>",
        "id": 403217133,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700502303
    },
    {
        "content": "<p>\"Let's split <code>h</code> into cases.\"</p>",
        "id": 403217625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700502507
    },
    {
        "content": "<p>Anyway there are of course hundreds of permutations that could sound valid, but I guess Patrick has to make a choice at the end of the day.</p>",
        "id": 403217730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700502567
    },
    {
        "content": "<p>And let's not split on those cases here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 403218090,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700502719
    },
    {
        "content": "<p>I'm sure I understand what is the conclusion here. Indeed a big part of the issue is to distinguish <code>rcases  h with h1|h2</code> from <code>by_cases h : P</code> (which is of course the abbreviation of <code>rcases Classical.em P with  h|h</code>. One could argue that real math doesn't see any distinction and we should use the same tactic, but somehow my Lean-induced distorsion fights back.</p>",
        "id": 403242018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700512676
    },
    {
        "content": "<p>\"We case bash on h\"</p>",
        "id": 403268243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700525867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Verbose.20Lean/near/403217730\">said</a>:</p>\n<blockquote>\n<p>Anyway there are of course hundreds of permutations that could sound valid, but I guess Patrick has to make a choice at the end of the day.</p>\n</blockquote>\n<p>or does he? He could just have multiple valid syntax rules that all delaborate to the same thing, ight? Or is having a very rigid syntax an explicit design goal of verbose Lean?</p>",
        "id": 403761888,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1700735876
    },
    {
        "content": "<p>Also, new syntaxes are additive in Lean, so people can add variants of their liking</p>\n<p>Btw, this looks <em>awesome</em></p>",
        "id": 403770996,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1700739181
    },
    {
        "content": "<p>Adding variants of syntax is very easy. There are already a couple of variations allowed. The danger with adding many more variations is that users could start thinking this is completely free form and get very frustrated when things don't work. Having lots of close variations doing different things also complicates having good error messages. Anyway, Lean Verbose is a library, you can use it as you like, you don't need me to add syntax. That being said, the current version is still pretty far from having everything that I plan. There should be a first feature-full version before Christmas.</p>",
        "id": 403818460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700756438
    },
    {
        "content": "<p>I think this is one of the problems with Naproche that new users struggle with a lot: tiny variations mean different things. Filler words that we usually regard as synonymous in mathematical english have slightly different meanings withing the formal language, and if you don't realize this, you're lost.</p>",
        "id": 403819102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700756721
    },
    {
        "content": "<p>After years of learning lean I had become quite content with the looks of it, but yesterday I demoed a Catalan port of this to a new-to-Lean audience and they were very amazed at how much nicer it looks. I confirm also that one needs very little knowledge of metaprogramming to add a new language. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> are you interested in PRs?</p>",
        "id": 404840244,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1701255929
    },
    {
        "content": "<p>My impression with general audience talks is that the audience love it if they see something new; some of your audience may have seen Lean code or a video of a Lean talk or whatever, but then you show them lean being used in a different \"mode\" that wasn't in the video, and this is exciting.</p>",
        "id": 404852470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701260459
    },
    {
        "content": "<p>Yes, I'm interested in PRs adding new languages, as long as you promise to try to maintain the new language. I plan to work more on this project before Christmas so there will be some instability in the beginning, but then it should be more stable.</p>",
        "id": 404860651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701262927
    }
]