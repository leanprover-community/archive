[
    {
        "content": "<p>When I try running <code>lean +lean4-stage0 tests/lean/run/28.lean</code> (on linux) it works, and does not complain about missing <code>olean</code> files or <code>missing package 'Init'</code>, but the <code>stage0/</code> directory contains no olean files in it. Running <code>strace</code>, I can see that it is very sneakily loading stage1 oleans:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">openat</span><span class=\"o\">(</span><span class=\"n\">AT_FDCWD</span><span class=\"o\">,</span> <span class=\"s2\">\"/home/mario/Documents/lean/lean4/build/release/stage0/../stage1/lib/lean/Init/Data/Stream.olean\"</span><span class=\"o\">,</span> <span class=\"n\">O_RDONLY</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>This is being called with an empty <code>LEAN_PATH</code>, so who is responsible for this redirection? (I would normally be fine leaving this as is, but I'm trying to do a windows test right now and the magic trick doesn't seem to work there.)</p>\n<p>EDIT: the trick is implemented <a href=\"https://github.com/leanprover/lean4/blob/65d08fdcdd9fb825b588660cce4e082a758954fa/src/Lean/Util/Path.lean#L66-L68\">here</a></p>",
        "id": 402941722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700359469
    },
    {
        "content": "<p>I think I see the issue: on windows this is resolving to <code>C:\\Users\\Mario\\.elan\\toolchains\\lean4-stage0\\..\\stage1\\lib\\lean</code> where <code>.elan\\toolchains\\lean4-stage0</code> is a symbolic link of some kind generated by elan, and I guess this does not resolve as intended</p>",
        "id": 402944996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700361608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> How does this behave on your machine?</p>",
        "id": 402945084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700361653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm confused. What is the problem here? You mentioned that it works on Linux, but you did say not what is the error on Windows.</p>",
        "id": 402946489,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700362208
    },
    {
        "content": "<p><code>lean +lean4-stage0 test.lean</code> fails on windows and works on linux</p>",
        "id": 402946526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700362224
    },
    {
        "content": "<p>specifically, it isn't able to find <code>Init</code></p>",
        "id": 402946594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700362258
    },
    {
        "content": "<p>Yep, same problem.</p>",
        "id": 402946865,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700362354
    },
    {
        "content": "<p>amd my diagnosis is that elan will create a \"junction\" at <code>.elan\\toolchains\\lean4-stage0</code> on windows, and for this kind of link using <code>..</code> takes you to <code>.elan\\toolchains</code>, rather than <code>realpath</code>-ing <code>.elan\\toolchains\\lean4-stage0</code> to <code>lean4\\build\\release\\stage0</code> first so that <code>..</code> gets to <code>build\\release</code> and <code>..\\stage1</code> is the desired location</p>",
        "id": 402947032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700362428
    },
    {
        "content": "<p>That trick definitely wouldn't work on Windows because <code>..</code> just backs up the executable path (i.e., the one in the Elan toolchain folder), it doesn't follow work up symlinked path like it does on Linux.</p>",
        "id": 402947040,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700362432
    },
    {
        "content": "<p>Is <code>realpath</code> available on windows? We could apply it manually there</p>",
        "id": 402947189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700362480
    },
    {
        "content": "<p>The problem is that <code>realpath</code> is the source not the destination for symbolic link  on Windows (whereas it is vice versa on Linux).</p>",
        "id": 402947291,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700362526
    },
    {
        "content": "<p>hack solution: <code>elan toolchain link stage1 build/release/stage1</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 402947763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700362708
    },
    {
        "content": "<p>Yeah, that would work</p>",
        "id": 402947810,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700362728
    },
    {
        "content": "<p><code>realpath</code> indeed doesn't seem to do anything. Does it ever differ from the identity function?</p>",
        "id": 402947910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700362768
    },
    {
        "content": "<p>It gives an absolute path if you give it a relative one?</p>",
        "id": 402948025,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700362798
    },
    {
        "content": "<p>The underlying Windows API function name is called <code>GetFullPathName</code>/<code>_fullpath</code></p>",
        "id": 402948315,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700362895
    },
    {
        "content": "<p>There is no Linux-style  <code>realpath</code> notion in Windows.</p>",
        "id": 402948452,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700362939
    },
    {
        "content": "<p>I see that <code>readlink</code> exists though</p>",
        "id": 402948501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700362969
    },
    {
        "content": "<p>nevermind, you can implement <code>readlink</code> with a pile of windows code but it's not built in</p>",
        "id": 402948765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700363073
    },
    {
        "content": "<p>For example, Python's <code>os.path.realpath</code> <a href=\"https://stackoverflow.com/a/73837506\">apparently</a> uses <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfinalpathnamebyhandlew\"><code>GetFinalPathNameByHandleW</code></a>.</p>",
        "id": 402948985,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700363187
    },
    {
        "content": "<p>the docs seem to suggest that it will follow symbolic links</p>",
        "id": 402949116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700363271
    },
    {
        "content": "<p>Oh, true.</p>",
        "id": 402949332,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700363406
    },
    {
        "content": "<p>There are two other problems:</p>\n<ul>\n<li><code>IO.FS.realpath</code> uses <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfullpathnamea\"><code>GetFullPathName</code></a> instead of <code>GetFinalPathNameByHandle</code></li>\n<li>Lean never calls <code>realpath</code> on the <code>IO.appPath</code> which just uses <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulehandlea\"><code>GetModuleHandle</code></a></li>\n</ul>",
        "id": 402949617,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700363623
    },
    {
        "content": "<p>I think it's fine not to do (2), as long as we explicitly use <code>realPath</code> in the <code>../stage1</code> trick (which is only used in the very rare circumstance of a stage0 build)</p>",
        "id": 402949766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700363718
    },
    {
        "content": "<p>Investigating a bit more, you are right that <code>FinalPath</code> follows symlinks, but it does not appear to follow backlinks.</p>",
        "id": 402949777,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700363735
    },
    {
        "content": "<p>That is <code>../stage1</code> would still resolve into the toolchains directory rather than the destination directory.</p>",
        "id": 402949908,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700363815
    },
    {
        "content": "<p>That is, we would change that line to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span> <span class=\"n\">Internal.isStage0</span> <span class=\"o\">()</span> <span class=\"k\">then</span>\n    <span class=\"n\">buildDir</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">followSymlink</span> <span class=\"n\">buildDir</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"s2\">\"..\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"stage1\"</span>\n</code></pre></div>\n<p>where <code>followSymlink</code> may or may not be spelled as <code>realPath</code></p>",
        "id": 402949909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700363816
    },
    {
        "content": "<p>here <code>followSymlink</code> can even be implemented as \"read the specified symbolic link and return the target\"</p>",
        "id": 402950063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700363914
    },
    {
        "content": "<p>because we know that we only care about the target itself being a symbolic link (being set up by elan)</p>",
        "id": 402950087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700363940
    },
    {
        "content": "<p>This is missing a description of the use case. Don't use stage 0 for anything but building stage 1.</p>",
        "id": 402980590,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700381420
    },
    {
        "content": "<p>In this case I was using it to test how stage0 and stage1 differ on a test case</p>",
        "id": 402980653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700381465
    },
    {
        "content": "<p>Until stumbling on this issue I had no idea that stage0 was not a \"real\" lean compiler, I've used it for compiling things with elan before (indeed, there's almost no point in the <code>lean4-stage0</code> toolchain link if it never works)</p>",
        "id": 402980922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700381604
    },
    {
        "content": "<p>maybe a less hackish way to make this work would be to symlink the stage1 lib/lean into stage0</p>",
        "id": 402981044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700381662
    },
    {
        "content": "<p>Actually I take it back, there is an even more important reason to make this work: you can't browse the lean sources using the stage0 compiler without this</p>",
        "id": 402981365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700381842
    },
    {
        "content": "<p>that is, on linux I have <code>elan toolchain override lean4-stage0</code> in the project root, and this fails on windows</p>",
        "id": 402981539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700381921
    },
    {
        "content": "<p>(note, the documentation says to set <code>lean4</code> in <code>/</code> and <code>lean4-stage0</code> in <code>src/</code>, but this is known to not work with vscode and I do <code>lean4</code> in <code>tests/</code> and <code>lean4-stage0</code> in <code>/</code>)</p>",
        "id": 402981791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700382039
    },
    {
        "content": "<p>I think that's the wrong workaround, you'll want to put lean4-stage0 into src/lean-toolchain</p>",
        "id": 402982350,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700382314
    },
    {
        "content": "<p>sure, that's isomorphic I guess?</p>",
        "id": 402982391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700382340
    },
    {
        "content": "<p>in any case it won't solve the issue of stage0 not finding oleans</p>",
        "id": 402982427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700382357
    },
    {
        "content": "<p>I believe elan is the only part of our infrastructure brave enough to attempt something like symlinks on Windows. I cannot put into words what a mess that platform is.</p>",
        "id": 402982565,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700382409
    },
    {
        "content": "<p>(IMO this infrastructure is the one that is a mess, this stage0 -&gt; stage1 thing is such a hack)</p>",
        "id": 402982692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700382472
    },
    {
        "content": "<p>I've been thinking about doing a boostrap build outside the context of the lean4 repo repository structure but it seems completely impossible</p>",
        "id": 402982862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700382561
    },
    {
        "content": "<p>I think that workaround exists solely for editor integration. During the build we can set LEAN_PATH properly.</p>",
        "id": 402983034,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700382632
    },
    {
        "content": "<p>why can't lean root just have some information regarding the LEAN_PATH? Or dare I say, a lakefile</p>",
        "id": 402983124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700382688
    }
]