[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> and me were trying to add a syntax extension in the usual <code>declare_syntax_cat</code> <code>syntax</code> <code>macro_rules</code> style to the compiler in order to allow users to write LLVM IR on their own but our language server is refusing to speak with us now :( </p>\n<p>But we are already doing stuff like this in <code>Init</code> right? Is there somethiign special about the <code>Lean</code> package that doesnn't allow us to use these extensions? And if there is, is there a nice reference we can copy from within <code>Lean</code> to implement our syntax extension?</p>",
        "id": 347916748,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680986567
    },
    {
        "content": "<p>Syntax extensions in lean core are a bit weird because of the bootstrap</p>",
        "id": 347916875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680986673
    },
    {
        "content": "<p>If it's just an extension and not a modification it is not too bad, you first write the new syntax declarations, then <code>update-stage0</code> and then write the usage code</p>",
        "id": 347916930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680986735
    },
    {
        "content": "<p>if you aren't using the syntax at all in core you shouldn't even need a bootstrap, you just add the syntax and the elaborator and then it should be usable with the stage1 compiler</p>",
        "id": 347917016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680986808
    },
    {
        "content": "<p>So we just tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">llvm_test</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">llvm_test</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[test|\"</span> <span class=\"n\">llvm_test</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">test</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>in a Lean 4 compiler file. Ran update-stage0 and our LSP died still. Is there something we are doing wrong?</p>",
        "id": 347922857,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680991951
    },
    {
        "content": "<p>We avoid <code>syntax</code> in <code>Lean</code> in favor of builtin parsers, which don't have to be imported to be used. But your example seems to work for me...</p>",
        "id": 347964729,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681022053
    }
]