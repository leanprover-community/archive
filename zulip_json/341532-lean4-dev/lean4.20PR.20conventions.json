[
    {
        "content": "<p>&lt;<a href=\"https://github.com/leanprover/lean4/blob/master/doc/contributions.md\">https://github.com/leanprover/lean4/blob/master/doc/contributions.md</a>&gt; is a good start, but it still left some questions open for me, in particular </p>\n<ul>\n<li>should PR branches have a clean, curated commit history, or a honest, chronological one</li>\n<li>will merges happen as squash or no-ff merges</li>\n<li>where does the commit message come from.</li>\n</ul>\n<p>Empirically, it seems that</p>\n<ul>\n<li>PR commit history doesn’t matter and can be honest, chronological</li>\n<li>PRs are merged as squash merges</li>\n<li>Commit message titles are taken from the PR title, and no body.</li>\n</ul>\n<p>The first two of these happen to match my preferred workflow (messy, honest commit history on branches, no rebases, squash-merged for a cleaner <code>master</code>  history). <br>\nThe last one makes me wonder if that’s just the path of least resistance when manually merging, or is it an intentional choice?<br>\n(Personally, I like it when the final commit message is taken from the PR description, or a part of it, just like in mathlib).</p>\n<p>Once confirmed by the devs, I am happy to update the documentation to clarify these points. And cross-link with &lt;<a href=\"https://github.com/leanprover/lean4/blob/master/doc/dev/commit_convention.md\">https://github.com/leanprover/lean4/blob/master/doc/dev/commit_convention.md</a>&gt; and &lt;<a href=\"https://github.com/leanprover/lean4/blob/master/CONTRIBUTING.md\">https://github.com/leanprover/lean4/blob/master/CONTRIBUTING.md</a>&gt;.</p>\n<p>Or is this all in flux anyways and the introduction of some form of automerging (like bors or mergify) is planned soon?</p>",
        "id": 392203876,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695242447
    },
    {
        "content": "<p>I think in practice the current rule is that PRs can be merged <em>either</em> as a curated history with multiple commits, <em>or</em> as a squash merge.</p>\n<p>For now, all PRs from external contributors are being squash merged (as the path of least resistance), although I think it would be fine if a contributor explicitly stated they wanted commits preserved.</p>\n<p>I agree we should make this clearer and simpler!</p>",
        "id": 392221797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695252960
    },
    {
        "content": "<p>Note that PRs that include an update-stage0 cannot be squash merged</p>",
        "id": 392222863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695253805
    },
    {
        "content": "<blockquote>\n<p>For now, all PRs from external contributors are being squash merged (as the path of least resistance), although I think it would be fine if a contributor explicitly stated they wanted commits preserved.</p>\n</blockquote>\n<p>I only squash external PRs when the commits are not following our naming conventions or are messy (e.g., there is a commit that reverts a change made in the same PR).</p>",
        "id": 392231830,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1695262606
    },
    {
        "content": "<p>For the contribution guidelines, it should be sufficient to say that at the end of the review cycle, PRs should have a well-structured commit history conforming to the commit message conventions. We can still squash-merge (or ask for improving the history) when that's not the case.</p>",
        "id": 392259113,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695279333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/lean4.20PR.20conventions/near/392203876\">said</a>:</p>\n<blockquote>\n<p>Or is this all in flux anyways and the introduction of some form of automerging (like bors or mergify) is planned soon?</p>\n</blockquote>\n<p>I don't think it will be affected by that</p>",
        "id": 392260081,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695279781
    },
    {
        "content": "<p>I see, a “smart merge” strategy :-)</p>\n<p>My preference is to not bother with clean commit messages on branches (it's busywork, and hard to review/edit) and instead require good _PR_ descriptions (much more prominent, easier to edit by all parties), and use squash merge by default using the PR title/description.</p>\n<p>This has the additional benefit that there is no need to rebase/force push feature branches. Force pushing makes it harder to see what happened (GitHub's infamous “cant find this commit” instead of nicely showing the differences) and harder to juggle multiple feature branches. And as a reviewer I find it easier to follow if a new “fix typo and add EOL at EOF” commit shows up, rather than a unlabeled force push that could have changed anything.</p>",
        "id": 392263858,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695281514
    },
    {
        "content": "<p>This is my preference too, but I have sometimes erred too far on the side of messy git histories on Mathlib!</p>",
        "id": 392278043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695286665
    },
    {
        "content": "<p>How can it be too far? Once the PR is squash-merged, the branch git history is, eh, history :-)</p>",
        "id": 392278510,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695286816
    },
    {
        "content": "<p>When the list of commits starts obscuring everything else on the github PR page, you've gone too far. I have since got better at rebasing.</p>",
        "id": 392279289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695287061
    },
    {
        "content": "<p>In mathlib3 rebasing was very undesirable because <code>leanproject get-cache</code> couldn't understand it (it resulted in discarding all the caches from your PR branch). That's now fixed with <code>lake exe cache get</code> which is content-addressed not git-hash-addressed.</p>",
        "id": 392282559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695288173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/lean4.20PR.20conventions/near/392263858\">said</a>:</p>\n<blockquote>\n<p>This has the additional benefit that there is no need to rebase/force push feature branches. Force pushing makes it harder to see what happened (GitHub's infamous “cant find this commit” instead of nicely showing the differences)</p>\n</blockquote>\n<p>I use rebasing/force pushing specifically to hide / make it hard to see the development process. I like presenting a crisp concise view of what was changed to the public by a  logical grouping of commits rather than a messy debug log. But then again, maybe that just implies that I care too much about my appearance?  <span aria-label=\"mirror\" class=\"emoji emoji-1fa9e\" role=\"img\" title=\"mirror\">:mirror:</span>  <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 392369587,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695318783
    },
    {
        "content": "<p>Maybe … I fully understand that the appeal of providing a super polished commit sequence, have done that before. But is it really worth the effort? By squash-merging by default the incentive to spend time on branch appearance is maybe reduce, which is maybe a good thing?<br>\n(Of course, I don't mind polished branches, especially not before the first review, but I wouldn't require onr expect it.)<br>\nAnd in cases where a feature can really be turned into independent steps, separate PRs are probably preferable anyways?</p>",
        "id": 392375986,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695321350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/lean4.20PR.20conventions/near/392375986\">said</a>:</p>\n<blockquote>\n<p>separate PRs are probably preferable anyways?</p>\n</blockquote>\n<p>This is definitely true for external contributions from the maintainers' perspective (and thus should likely be enforced there). As a regular developer PR to my own code, though, separate feature branches can require a lot switch back and forth and resolving merge conflicts as they grow independently. Also, it can require more work to extract the separate features coherently into separate PRs (since there maybe be independence even with logical separation in goal).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/lean4.20PR.20conventions/near/392375986\">said</a>:</p>\n<blockquote>\n<p>Maybe … I fully understand that the appeal of providing a super polished commit sequence, have done that before. But is it really worth the effort?</p>\n</blockquote>\n<p>For me, I find <code>git add . &amp;&amp; git commit --no-edit --amend &amp;&amp; git push --force</code> to be an easily replayed command when making logically related fixes and it does not require a mental break to come up with a commit message. But I suspect that is just preference.</p>",
        "id": 392378901,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695322508
    },
    {
        "content": "<p>Good points. PRing your own code might certainly require a different workflow.</p>",
        "id": 392392596,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695328561
    }
]