[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/343223966\">said</a>:</p>\n<blockquote>\n<p>If you want to build Lean without Nix, you need overrides for the stage0/stage1 toolchains.</p>\n</blockquote>\n<p>There's no reason we couldn't use <code>lean-toolchain</code> for that though</p>",
        "id": 343311808,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679389876
    },
    {
        "content": "<p>Sure sure. This would even remove one manual step from the build process, which would be nice. Other than that, I don't think I've ever used overrides for anything.</p>",
        "id": 343323999,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679393264
    },
    {
        "content": "<p>Note that strictly speaking it's not the build but the editor setup that needs this step</p>",
        "id": 343325400,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679393606
    },
    {
        "content": "<p>+1 to disabling overrides then (I've never used it so I have nothing against this proposal)</p>",
        "id": 343347857,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679399572
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Rethinking.20elan.20toolchain.20management\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Rethinking.20elan.20toolchain.20management</a></p>",
        "id": 343356358,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679401663
    },
    {
        "content": "<blockquote>\n<p>There's no reason we couldn't use <code>lean-toolchain</code> for that though</p>\n</blockquote>\n<p>What is the concrete proposal here?  Add <code>lean-toolchain</code> to <code>.gitignore</code>?  Hard-code a \"well-known\" <code>üö≤üè†</code> toolchain name for \"the\" local Lean 4 build?  Support relative paths in <code>lean-toolchain</code> (and hardcode the <code>build/release/stage1</code> path)?</p>",
        "id": 343458918,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679415301
    },
    {
        "content": "<p>And how would you switch between stage0 and stage1?</p>",
        "id": 343458974,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679415314
    },
    {
        "content": "<p>FWIW, I use <code>env ELAN_TOOLCHAIN=4stage0 nvim</code> for that.</p>",
        "id": 343459101,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679415353
    },
    {
        "content": "<p>\"Well-known toolchain name\" sounds perfectly fine to me, I wouldn't be surprised if no-one ever deviated from the suggestions in the manual. The current instructions would be covered by one <code>lean-toolchain</code> in <code>/</code> and one in <code>/src</code>, are you thinking of a different workflow when talking about switching?</p>",
        "id": 343465934,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679417031
    },
    {
        "content": "<p>My workflow is from before the manual had this section. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  I usually use the stage1 build for <code>src/</code> as well, but I don't mind changing that.</p>",
        "id": 343467670,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679417433
    },
    {
        "content": "<p>What's more painful though is that I usually have several lean checkouts (for long-running branches, upstream, etc.) and they obviously all have different toolchain names.</p>",
        "id": 343468114,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679417527
    },
    {
        "content": "<p>I see. It shows that I haven't actually used the elan setup in a long time :) . But if you've already created separate toolchain names in this case, I'm assuming setting them in the <code>lean-toolchain</code> files would not be particularly more work than installing the overrides. Would having the changed files show up in <code>git status</code> be annoying?</p>",
        "id": 343476817,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679419852
    },
    {
        "content": "<p>However I'm warming up to the idea of supporting relative paths and hard-coding <code>build/release</code>; it doesn't seem more controversial or harder to change locally than hard-coding the toolchain names.</p>",
        "id": 343476988,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679419910
    },
    {
        "content": "<blockquote>\n<p>Would having the changed files show up in git status be annoying?</p>\n</blockquote>\n<p>Yes, very much because it breaks <code>git commit -a</code>.  If we're going to remove <code>elan override</code>, then I'd prefer not to have <code>lean-toolchain</code> files checked into Lean core at all.  (Or we support <code>lean-toolchain.override</code> files.)</p>",
        "id": 343481828,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679421219
    },
    {
        "content": "<p>I think this discussion would be better placed in the thread Sebastian started in #general for more visibility and archiving organization</p>",
        "id": 343485321,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679422038
    },
    {
        "content": "<p>15 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get\">#mathlib4 &gt; lake exe cache get</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 343608584,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679474978
    },
    {
        "content": "<p>Let's continue here in the dev channel</p>",
        "id": 343608903,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679475061
    },
    {
        "content": "<p>I feel like relative paths in <code>lean-toolchain</code> are the obvious solution for Lean itself. Then you can have <code>/lean-toolchain</code> with <code>./build/release/stage1</code> and <code>/src/lean-toolchain</code> with <code>./build/release/stage0</code>.</p>",
        "id": 343611930,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679475873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/Build.20setup.20under.20elan.20proposal/near/343476988\">said</a>:</p>\n<blockquote>\n<p>However I'm warming up to the idea of supporting relative paths and hard-coding <code>build/release</code>; it doesn't seem more controversial or harder to change locally than hard-coding the toolchain names.</p>\n</blockquote>\n<p>I can personally attested to have used many different build directories including <code>debug</code>, <code>gcc-release</code>, <code>clang-release</code>, <code>clang-debug</code> at various points when I sometimes had to debug windows builds on my machine to see what was wrong with my build configuration and/or lean.</p>",
        "id": 344041618,
        "sender_full_name": "Mac Malone",
        "timestamp": 1679590575
    },
    {
        "content": "<p>You can still change the lean-toolchain file, it's not more work than changing the override</p>",
        "id": 344042037,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679590690
    },
    {
        "content": "<p>And again, this does not affect building, only editing</p>",
        "id": 344042200,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679590732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> True, but that has the same problem <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> mentioned of annoyingly breaking <code>git commit -a</code>.</p>",
        "id": 344042251,
        "sender_full_name": "Mac Malone",
        "timestamp": 1679590742
    },
    {
        "content": "<p>I think his suggestion of <code>lean-toolchain.override</code> would be the best solution.</p>",
        "id": 344042593,
        "sender_full_name": "Mac Malone",
        "timestamp": 1679590815
    },
    {
        "content": "<p>It allows users to override the Git-sensitive <code>lean-toolchain</code> in a non Git-sensitive manner. which is pretty much the primary utility of <code>elan override</code> atm.</p>",
        "id": 344043108,
        "sender_full_name": "Mac Malone",
        "timestamp": 1679590922
    },
    {
        "content": "<p>It also has the advantage of being more visible than the current <code>elan override</code>.</p>",
        "id": 344043333,
        "sender_full_name": "Mac Malone",
        "timestamp": 1679590966
    },
    {
        "content": "<p>And people will remember to remove that untracked file when they finish their experiment?</p>",
        "id": 344043483,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679590999
    },
    {
        "content": "<p>I'm a bit surprised about how many developers use git from the cmdline, but I don't mind giving people the choice between dirty file or untracked file</p>",
        "id": 344044424,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679591168
    }
]