[
    {
        "content": "<p>Hello! I attended <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>'s great talk yesterday on Lean 4 and in it he mentioned how there are multiple independent implementations of the lean kernel. I assume he meant for lean 3? I am curious if there are any independent implementations of the lean4 kernel?</p>\n<p>I am asking because I am wondering if trying my hand at implementing my own version of the lean 4 kernel could be a good learning exercise, to get a practice dependent type theory with a clear scope. </p>\n<p>I see that the current kernel is here: <a href=\"https://github.com/leanprover/lean4/tree/master/src/kernel\">https://github.com/leanprover/lean4/tree/master/src/kernel</a> and I saw elsewhere that lean communicates with this over FFI. </p>\n<p>So if I say wrote my own kernel in another language, could I hook it up to lean 4 to get it to use it to try it? Also, is the kernel language/API specified somewhere?</p>\n<p>Thanks!</p>",
        "id": 389909551,
        "sender_full_name": "Saul Shanabrook",
        "timestamp": 1694188965
    },
    {
        "content": "<p>Hi Saul! As far as I know, there are no independent type checkers for Lean 4 yet, no; I believe <a href=\"https://github.com/ammkrn/nanoda\">https://github.com/ammkrn/nanoda</a> had/has some partial support.</p>\n<p>Contributing a checker would be very welcome and could be an interesting exercise if you are already familiar with using type theory and want to learn about the minute details of implementing one. Note that this will invariably consist of consulting the C++ code as well as <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> and <a href=\"https://leanprover.github.io/papers/thesis-sebastian.pdf#section.3.2\">my thesis on Lean 4</a> tell you about the rules of the type system, but not how to implement them.</p>\n<p>Independent checkers in Lean 3 made use of a simple text format that could be exported by Lean. I have a tool for doing this in Lean 4 as well: <a href=\"https://github.com/Kha/lean4export\">https://github.com/Kha/lean4export</a>. There is also code in mathlib4 for this but I don't know how they compare.</p>",
        "id": 389911761,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694189805
    },
    {
        "content": "<p>We built a Lean 4 typechecker in Lean 4, but it typechecks content-addressed versions of definitions, theorems etc. It might serve as a reference.</p>\n<p><a href=\"https://github.com/lurk-lab/yatima/tree/main/Yatima/Typechecker\">https://github.com/lurk-lab/yatima/tree/main/Yatima/Typechecker</a></p>",
        "id": 389912232,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694189990
    },
    {
        "content": "<p>Adapting a Lean 3 checker is also a possibility. 90+% of the code should be unaffected.</p>",
        "id": 389912403,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694190047
    },
    {
        "content": "<p>Thank you for all of the pointers!</p>\n<blockquote>\n<p>Independent checkers in Lean 3 made use of a simple text format that could be exported by Lean. I have a tool for doing this in Lean 4 as well: <a href=\"https://github.com/Kha/lean4export\">https://github.com/Kha/lean4export</a>. There is also code in mathlib4 for this but I don't know how they compare.</p>\n</blockquote>\n<p>I see the one that was added in mathlib4: <a href=\"https://github.com/leanprover-community/mathlib4/commit/8f76c3bafc98c3362b2dd1c6af3a7c0f3050fb4f\">https://github.com/leanprover-community/mathlib4/commit/8f76c3bafc98c3362b2dd1c6af3a7c0f3050fb4f</a> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you know how it  compares to lean4export?</p>\n<blockquote>\n<p>We built a Lean 4 typechecker in Lean 4, but it typechecks content-addressed versions of definitions, theorems etc.</p>\n</blockquote>\n<p>When you say its content-addressed versions, you mean each one has a unique ID to reference it? And this makes the kernel different to implement?</p>",
        "id": 389917248,
        "sender_full_name": "Saul Shanabrook",
        "timestamp": 1694192067
    },
    {
        "content": "<p>It's content-addressed and name-agnostic, to be more precise.</p>\n<p><code>def foo := Nat.zero</code> and <code>def goo := Nat.zero</code> are hashed to the same hash. There are further consequences of this design choice though.</p>",
        "id": 389918270,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694192504
    },
    {
        "content": "<p>Ah I see how that could affect the structure of the checker.</p>",
        "id": 389918517,
        "sender_full_name": "Saul Shanabrook",
        "timestamp": 1694192585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218939\">Saul Shanabrook</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/Implementing.20independent.20kernel/near/389917248\">said</a>:</p>\n<blockquote>\n<p>Thank you for all of the pointers!</p>\n<blockquote>\n<p>Independent checkers in Lean 3 made use of a simple text format that could be exported by Lean. I have a tool for doing this in Lean 4 as well: <a href=\"https://github.com/Kha/lean4export\">https://github.com/Kha/lean4export</a>. There is also code in mathlib4 for this but I don't know how they compare.</p>\n</blockquote>\n<p>I see the one that was added in mathlib4: <a href=\"https://github.com/leanprover-community/mathlib4/commit/8f76c3bafc98c3362b2dd1c6af3a7c0f3050fb4f\">https://github.com/leanprover-community/mathlib4/commit/8f76c3bafc98c3362b2dd1c6af3a7c0f3050fb4f</a> <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> do you know how it  compares to lean4export?</p>\n<blockquote>\n<p>We built a Lean 4 typechecker in Lean 4, but it typechecks content-addressed versions of definitions, theorems etc.</p>\n</blockquote>\n<p>When you say its content-addressed versions, you mean each one has a unique ID to reference it? And this makes the kernel different to implement?</p>\n</blockquote>\n<p>I actually forgot about both lean4export and this old Util.Export implementation. It's probably worth making them compatible with each other, and maybe upstreaming it to Std</p>",
        "id": 389940690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694202602
    }
]