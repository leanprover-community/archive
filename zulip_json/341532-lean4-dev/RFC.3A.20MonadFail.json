[
    {
        "content": "<p>Another suggestion from <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> and my experiences^^</p>\n<p>While writing an abstraction that allows users to construct LLVM for a declaration themselves we<br>\nended up trying to write the library on a general transformer instead of a concrete monad, in case the<br>\nuser wants to use a custom monad to generate their LLVM. As a simplified example consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">MyT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Context</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">State</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>While implementing the API based on this however there are of course cases where the user can provide malformed input (for example referring to a non existing function), so we want to throw an error. However just based on <code>[Monad m]</code> this is not possible. And we did also not want to force the user to have a <code>[MonadExcept String m]</code> instance because for example <code>IO</code> does not have this since it deals with <code>IO.Error</code>s (which do happen to have the case <code>userError : String -&gt; IO.Error</code> though). So basically we ended up reimplementing Haskells <a href=\"https://hackage.haskell.org/package/base-4.18.0.0/docs/Prelude.html#t:MonadFail\">MonadFail</a> and declaring an instance for <code>IO</code>.</p>\n<p>Would it be reasonable to have this API in general in core? That is a typeclass like <code>MonadFail</code> that allows us to throw a string as an error? And possibly on top of that also an <code>instance [MonadExcept String m] : MonadFail m</code> to make it play nicely with the existing abstractions.</p>",
        "id": 349045642,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681376600
    },
    {
        "content": "<p>Don't we already have <code>MonadExcept</code>, <code>MonadExceptOf</code>, <code>Alternative</code>, and <code>MonadError</code>? I'm really not a fan of having five different typeclasses for \"you can throw errors\"</p>",
        "id": 349074856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681383906
    },
    {
        "content": "<p>I think <code>MonadError</code> is the most sensible thing to build on for LLVM errors. In particular it gives you the <code>throwError</code> macro, which lets you interpolate various kinds of structured objects sensibly into the error message. Using strings will lead to a low quality experience by default</p>",
        "id": 349075037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681383945
    },
    {
        "content": "<p>Oh we didn't see monad error, thanks a lot! We'll just use that instead then ^^</p>",
        "id": 349080651,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681385507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/RFC.3A.20MonadFail/near/349074856\">said</a>:</p>\n<blockquote>\n<p>Don't we already have <code>MonadExcept</code>, <code>MonadExceptOf</code>, <code>Alternative</code>, and <code>MonadError</code>? I'm really not a fan of having five different typeclasses for \"you can throw errors\"</p>\n</blockquote>\n<p>Which <code>MonadError</code>? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span>  Both Lake and Lean have one (I named it that before realizing there was already a different one in the Lean core). I would say Lake's is more appropriate for <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> 's request.  The Lean <code>MonadError</code> does a whole lot more. For example, it stores structured Lean-specific <code>MessageData</code> (and thus imports <code>Lean.Environment</code>, hence making it not very appropriate for non-meta code). However, if this is just to be used within Lean for Lean monads, then it may be sufficient.</p>",
        "id": 350286095,
        "sender_full_name": "Mac Malone",
        "timestamp": 1681639638
    }
]