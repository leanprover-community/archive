[
    {
        "content": "<p>I have an <code>Array Syntax</code>, and I want to create the syntax for a tuple, <code>(b,c,d)</code>. How do I do that? Here is what I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">vs</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">body</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">vs</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n    <span class=\"n\">logInfo</span> <span class=\"s2\">\"{vs} {body}\"</span>\n</code></pre></div>",
        "id": 401402332,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699631060
    },
    {
        "content": "<p>I guess I can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.Quotation.mkTuple#doc\">docs#Lean.Elab.Term.Quotation.mkTuple</a> instead of using quotation syntax (but still curious how that would work)</p>",
        "id": 401406511,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699632691
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 401408996,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699633818
    },
    {
        "content": "<p>The syntax for tuples is <code>\"(\" term \", \" sepBy1(term, \", \") \")\"</code>, so you have to handle three cases.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkTuple</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lean.MonadQuotation</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs.size</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(())</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">xs'</span> <span class=\"o\">:=</span> <span class=\"n\">xs.extract</span> <span class=\"mi\">1</span> <span class=\"n\">xs.size</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">vs</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toArray.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">body</span> <span class=\"bp\">←</span> <span class=\"n\">mkTuple</span> <span class=\"n\">vs</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{vs} {body}\"</span>\n</code></pre></div>",
        "id": 402759997,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700248161
    },
    {
        "content": "<p>If you know your array has length &gt;= 2 then you could jump right into this third case, but you have to split your array up like this. Probably easier to use <code>Lean.Elab.Term.Quotation.mkTuple</code>.</p>",
        "id": 402760122,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700248209
    },
    {
        "content": "<p>Thanks! I ended up with this: <a href=\"https://github.com/leanprover/lean4/blob/e8b6cb330547201ecb049bc9bb91d0ee50fada53/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L606\">https://github.com/leanprover/lean4/blob/e8b6cb330547201ecb049bc9bb91d0ee50fada53/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L606</a></p>\n<p>Will refine with how you do the separators later!</p>",
        "id": 402762684,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700249343
    },
    {
        "content": "<p>Huh, I didn't know that subarrays could be spliced. The third case in my code can just be <code>| _ =&gt; `(term| ($(xs[0]!), $(xs[1:]),*))</code> then</p>",
        "id": 402769975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700250653
    },
    {
        "content": "<p>I assume it's just syntax for <code>extract</code>?</p>",
        "id": 402770182,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700250768
    },
    {
        "content": "<p>Nope, it gives a <code>Subarray</code>, which is an array along with a start and stop index, so potentially it's a bit more efficient.</p>",
        "id": 402770295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700250833
    },
    {
        "content": "<p>But Lean has an unusual coercion from <code>Subarray</code> to <code>Array</code> which severely limits the efficiency.</p>",
        "id": 402771316,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700251250
    }
]