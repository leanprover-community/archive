[
    {
        "content": "<p>I want to store the state of my current<code>ElabTermM</code> context and resume it later. If I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">savedState</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n      <span class=\"n\">restoreState</span> <span class=\"n\">savedState</span>\n</code></pre></div>\n<p>that seems to be a proper no-op, as expected. But if I <code>saveState</code> in two different places, and then restore them later, I get <code>unknown free variable '</code>.<br>\nIs <a href=\"https://github.com/leanprover/lean4/blob/baa4b68a71926a722b77d4ec2cba34bfc76cc5aa/src/Lean/Elab/Term.lean#L246\"><code>saveState</code></a> here not a good way of doing that?</p>\n<p>(Sorry for begin rather vague, I should try to <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> this issue.)</p>",
        "id": 401370178,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699620221
    },
    {
        "content": "<p>Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that doesn’t quite reproduce the issue I am facing, but certainly demonstrates a misunderstanding on my side:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">demo</span><span class=\"o\">)</span> <span class=\"s2\">\"demo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">Expr.lam</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withoutModifyingState</span> <span class=\"bp\">$</span> <span class=\"n\">withLocalDecl</span> <span class=\"n\">n</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">b'</span> <span class=\"o\">:=</span> <span class=\"n\">b.instantiate1</span> <span class=\"n\">x</span>\n        <span class=\"n\">check</span> <span class=\"n\">b'</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Inside : {((← getLCtx).find? b'.fvarId!).isSome}\"</span>\n        <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- let (_body,_s) ← withoutModifyingState $  withLocalDecl n c d fun x =&gt; do</span>\n    <span class=\"c1\">--     let b' := b.instantiate1 x</span>\n    <span class=\"c1\">--     check b'</span>\n    <span class=\"c1\">--     pure (b', ← saveState)</span>\n    <span class=\"c1\">-- variable is not available, this is expected:</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Outside 1: {((← getLCtx).find? body.fvarId!).isSome}\"</span>\n    <span class=\"n\">check</span> <span class=\"n\">body</span> <span class=\"c1\">-- shouldn't this fail, because the local decl is not available</span>\n    <span class=\"n\">restoreState</span> <span class=\"n\">s</span>\n    <span class=\"c1\">-- variable still not available, this is unexpected</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Outside 2: {((← getLCtx).find? body.fvarId!).isSome}\"</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"{body}\"</span>\n\n<span class=\"n\">demo</span>\n</code></pre></div>\n<p>The <code>b'</code> inside the <code>withLocalDecl</code> is the FVar that was introduced by <code>withLocalDecl</code>. It is in scope, as the <code>dbg_trace</code> shows. <br>\nOutside, it is no longer part of the of the environment, as expected. (Oddly, <code>check</code> doesn’t complain).<br>\nBut after <code>restoreSTate</code> is it <em>still</em> not part of the local context. Why?</p>",
        "id": 401374411,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699621244
    },
    {
        "content": "<p>Ah, <code>saveState</code> and <code>restore</code> doesn’t actually touch the <code>MetaM</code> <code>Context</code>! Does that mean that these states are not meant to be <code>restored</code> in a different context?</p>",
        "id": 401375024,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699621360
    },
    {
        "content": "<p>So this looks like it might work; I am not sure how kosher that is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">demo</span><span class=\"o\">)</span> <span class=\"s2\">\"demo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">Expr.lam</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">mc</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withoutModifyingState</span> <span class=\"bp\">$</span> <span class=\"n\">withLocalDecl</span> <span class=\"n\">n</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">b'</span> <span class=\"o\">:=</span> <span class=\"n\">b.instantiate1</span> <span class=\"n\">x</span>\n        <span class=\"n\">check</span> <span class=\"n\">b'</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Inside : {((← getLCtx).find? b'.fvarId!).isSome}\"</span>\n        <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">readThe</span> <span class=\"n\">Meta.Context</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- let (_body,_s) ← withoutModifyingState $  withLocalDecl n c d fun x =&gt; do</span>\n    <span class=\"c1\">--     let b' := b.instantiate1 x</span>\n    <span class=\"c1\">--     check b'</span>\n    <span class=\"c1\">--     pure (b', ← saveState)</span>\n    <span class=\"c1\">-- variable is not available, this is expected:</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Outside 1: {((← getLCtx).find? body.fvarId!).isSome}\"</span>\n    <span class=\"n\">check</span> <span class=\"n\">body</span> <span class=\"c1\">-- shouldn't this fail, because the local decl is not available</span>\n    <span class=\"n\">withTheReader</span> <span class=\"n\">Meta.Context</span>  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mc</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n      <span class=\"n\">restoreState</span> <span class=\"n\">s</span>\n      <span class=\"c1\">-- variable still not available, this is unexpected</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Outside 2: {((← getLCtx).find? body.fvarId!).isSome}\"</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"{body}\"</span>\n\n<span class=\"n\">demo</span>\n</code></pre></div>",
        "id": 401376188,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699621645
    },
    {
        "content": "<p>Looks okay to me, though not exactly idiomatic. I would save the <code>LocalContext</code> in which <code>body</code> is valid, rather than the <code>MetaM.Context</code>.</p>",
        "id": 401383064,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699623939
    },
    {
        "content": "<p>Hmm, make sense, but  I’d be worried about breaking invariants, e.g. between <code>lctx</code> and <code>localInstances</code> then:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Context</span> <span class=\"n\">where</span>\n  <span class=\"n\">config</span>            <span class=\"o\">:</span> <span class=\"n\">Config</span>               <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"sd\">/-- Local context -/</span>\n  <span class=\"n\">lctx</span>              <span class=\"o\">:</span> <span class=\"n\">LocalContext</span>         <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"sd\">/-- Local instances in `lctx`. -/</span>\n  <span class=\"n\">localInstances</span>    <span class=\"o\">:</span> <span class=\"n\">LocalInstances</span>       <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 401389430,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699626252
    },
    {
        "content": "<p>Ah yes, you'll need the <code>LocalInstances</code> as well. But <code>withLCtx</code> would have told you this as well.</p>",
        "id": 401406832,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699632825
    },
    {
        "content": "<p>Other than that, I don't think there are any invariants attached to <code>LocalContext</code>; after all, <code>withContext</code> is an ever-popular function.</p>",
        "id": 401406942,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699632866
    },
    {
        "content": "<p>Thanks! Changed accordingly.</p>",
        "id": 401407194,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699632980
    }
]