[
    {
        "content": "<p>Hi all! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm new here. I'm pretty new to formal verification and lean, and I'm really trying to make an effort to lean how to formally verify simple programs. After trying to prove a theorem about one of the clever popcount implementations that you can find in the C++ Folly library (and other places), and trying out a bunch of different tools to get the job done (Ada/SPARK, Viper, Nagini, Agda, etc.), I finally decided to take a crack at it using Lean4. I got about as far as I did with the other systems, which is to say I got stuck <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> But I've learned a lot along the way.</p>\n<p>So I've scaled back my ambitions a bit, and instead of trying to prove correctness of popcount, I've written a tiny simple function <code>getBits</code> that returns the least significant bits of binary representation of an input <code>UInt64</code> number. You can supply the number of bits that you want to receive as an argument. I figure, if I can prove _something_ interesting about this program, I might be able to get some momentum with proving other things about other programs.</p>\n<p>But despite my efforts, I'm stuck on this one too. There's really great documentation out there for lean4, but it's hard to find anything substantial about program verification. The way I'm going about it may be laughably wrong. I'd really appreciate some guidance.</p>\n<p>Here's the function and a couple <code>#eval</code> statements to spot check the output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\"> - Returns the `numBits` least significant bits of `x`</span>\n<span class=\"cm\"> -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getBits</span> <span class=\"o\">(</span><span class=\"n\">numBits</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bits</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">depth</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bits</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">d2</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">bit</span> <span class=\"o\">:=</span> <span class=\"n\">x.mod</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span>\n      <span class=\"k\">let</span> <span class=\"n\">residual</span> <span class=\"o\">:=</span> <span class=\"n\">x.shiftRight</span> <span class=\"mi\">1</span>\n      <span class=\"n\">helper</span> <span class=\"n\">d2</span> <span class=\"o\">(</span><span class=\"n\">bits.concat</span> <span class=\"n\">bit</span><span class=\"o\">)</span> <span class=\"n\">residual</span>\n  <span class=\"n\">helper</span> <span class=\"n\">numBits</span> <span class=\"o\">[]</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">getBits</span> <span class=\"mi\">0</span> <span class=\"mi\">42</span>  <span class=\"c1\">-- Prints out []</span>\n<span class=\"k\">#eval</span> <span class=\"n\">getBits</span> <span class=\"mi\">3</span> <span class=\"mi\">42</span>  <span class=\"c1\">-- Prints out [false, true, false]</span>\n</code></pre></div>\n<p>And here's the theorem I'm trying to prove. Basically, I want to prove, \"If you ask for <code>numBits</code> bits, then you'll get back <code>numBits</code> bits.\" I'm stuck at the <code>sorry</code> bit. I've tried a bunch of different things, but my flailing isn't getting me anywhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">getBitsLength</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">numBits</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">),</span>\n    <span class=\"n\">numBits</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">getBits</span> <span class=\"n\">numBits</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">numBits</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction</span> <span class=\"n\">numBits</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">numBits</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Many thanks in advance for your help!</p>",
        "id": 383792808,
        "sender_full_name": "William Harvey",
        "timestamp": 1691715884
    },
    {
        "content": "<ul>\n<li>Since you are doing induction, the thing to do in the inductive case <code>succ</code> is to try to get your goal into such a shape that the inductive hypothesis can be applied to it somewhere. Trying <code>unfold getBits; unfold getBits.helper</code> is a start. But when you do that, you'll realize that your induction hypothesis is not strong enough. It should universally quantify over more stuff. You can achieve this using <code>induction .. generalizing .. with</code>.</li>\n<li>In general, when proving something about a recursive program you wrote in dependent type theory, your proof will most likely have the same structure as the original program. In your case, you have a <code>let rec</code> helper, so it helps to also have a <code>let rec helper</code> theorem that proves some property of <code>getBits.helper</code>. Stating such a helper theorem may help you see the right inductive hypothesis. Here is a start:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">getBitsLength</span> <span class=\"o\">(</span><span class=\"n\">numBits</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">numBits</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">getBits</span> <span class=\"n\">numBits</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bits</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"o\">(</span><span class=\"n\">getBits.helper</span> <span class=\"n\">depth</span> <span class=\"n\">bits</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">induction</span> <span class=\"n\">depth</span> <span class=\"n\">generalizing</span> <span class=\"bp\">???</span> <span class=\"k\">with</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383800953,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1691719226
    },
    {
        "content": "<p>As to why there aren't many resources on program verification, it is true that most software verification these days is done using other systems such as Coq, F⋆, various automated provers and model checkers, etc. Afaict, so far Lean has been used mostly for pure mathematics, although this is perhaps slowly changing.</p>",
        "id": 383801604,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1691719332
    },
    {
        "content": "<p>Thank you so much for your help! By golly I think we finally did it!!! <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span>  Here's the final result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">getBitsLengthHelper</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bits</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">),</span>\n                              <span class=\"o\">(</span><span class=\"n\">getBits.helper</span> <span class=\"n\">depth</span> <span class=\"n\">bits</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">depth</span> <span class=\"bp\">+</span> <span class=\"n\">bits.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">depth</span> <span class=\"n\">bits</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction</span> <span class=\"n\">depth</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">bits</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">getBits.helper</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">depth</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">getBits.helper</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">getBitsLength</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">numBits</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">),</span>\n                        <span class=\"o\">(</span><span class=\"n\">getBits</span> <span class=\"n\">numBits</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">numBits</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">getBits</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">getBitsLengthHelper</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>All of your advice was spot-on. The thing that I was missing from my repertoire was understanding what it means to strengthen the induction hypothesis and how that corresponds to <code>generalizing</code>.</p>\n<p>I was stuck for like two weeks on trying to finish this proof. I only get very small amounts of time to work on this stuff each day (if I'm lucky), so two weeks doesn't add up to a large number of hours. The good news is that I filled in a lot of knowledge gaps along the way, and I'm feeling more and more confident that I'll be able to use Lean4 for some real stuff soon.</p>\n<p>Feels awesome to finally have this proof done. Thank you again!! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 384373905,
        "sender_full_name": "William Harvey",
        "timestamp": 1691889052
    }
]