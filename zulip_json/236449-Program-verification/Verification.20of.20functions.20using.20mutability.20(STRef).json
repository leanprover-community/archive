[
    {
        "content": "<p>Sorry for the broad question but I am wondering if in general functions using mutability such as STRefs in Lean are amenable to verification, so if it is possible to prove theorems about those functions in Lean. Interested in any thoughts about this.</p>",
        "id": 407523068,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702400741
    },
    {
        "content": "<p>As it stands, no. Lean would need to provide a semantics for <code>IO</code> actions, which are currently completely opaque (i.e. you can't prove anything about them). In principle, sure, such a semantics could be provided.</p>",
        "id": 407526505,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702402003
    },
    {
        "content": "<p>To what degree is this an open question?</p>",
        "id": 407526642,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702402040
    },
    {
        "content": "<p>Don't know. I imagine someone must have experimented with stuff like this though.</p>",
        "id": 407526978,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702402158
    },
    {
        "content": "<p>Here's a relevant <a href=\"https://github.com/leanprover/std4/pull/416#issuecomment-1837869453\">quote</a> from me on the matter:</p>\n<blockquote>\n<p>By the way (on the subject of \"This conflicts with my belief that monadic code should also be able to be proven correct\"), I have a strong suspicion that <code>ST</code> is inconsistent, or at least <code>ST</code> augmented with reasonable axioms for how references behave, although I have not been able to prove it. (The short version is that <code>ST ω Unit</code> is an impossibly big type, since it seems to hold the state of an arbitrary number of references in arbitrarily large types, including <code>ST ω Unit</code> itself.)</p>\n</blockquote>",
        "id": 407534659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702404385
    },
    {
        "content": "<p>Continued in a PM with <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> (I think there is nothing in here which can't be reprinted):</p>\n<blockquote>\n<p>Mario Carneiro: The <code>ST</code> monad lets you create new references with <code>ST.mkRef</code>, and these references can store values of any type</p>\n<p>Mario Carneiro: and the current state of all references is conceptually \"stored in\" the monad state</p>\n<p>Mario Carneiro: This is in stark contrast to <code>StateT</code>, which has space for exactly one \"reference\", and the type of this reference is part of the monad itself</p>\n<p>Joe Hendrix: Oh, I interpreted that as meaning types in bigger universes. It does seem tricky to formalize.</p>\n<p>Mario Carneiro: Well the fact that it's any type in the same universe is already bad</p>\n<p>Mario Carneiro: If <code>ST</code> lived one universe up it would be fine</p>\n<p>Mario Carneiro: but you can create <code>ST.Refs</code> containing the whole monad state, this is a short trip to cantor's paradox</p>\n<p>Mario Carneiro: <code>ST</code> was originally designed for haskell, which uses System F as it's underlying theory, and there the whole thing with quantifying over types as a means of abstraction works marvelously. But in lean we can't do this because it's basically <code>Type : Type</code>, and in the context of a universe hierarchy it is deeply suspicious that ST doesn't involve a universe bump</p>\n</blockquote>",
        "id": 407535149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702404575
    },
    {
        "content": "<p>Thanks Mario.  Monadic verification is something I plan to work on in 2024.  Lean should support Hoare triples on monadic computations.  There's some <a href=\"https://github.com/leanprover/std4/blob/483fd2846f9fe5107011ece0cc3d8d88af1a8603/Std/Classes/LawfulMonad.lean#L69\">existing work in <code>Std</code></a> due to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>.</p>\n<p>Due to the above foundational issues, I think we may not be able to reason about <code>IO</code>, but rather some  subset that includes no references or constrained references.</p>",
        "id": 407535891,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1702404834
    },
    {
        "content": "<p>Are there literature references you would recommend to someone who wishes to work on this problem. For reference I am currently taking a graduate semantics course which covers basic stuff upto system F and then switches to separation logic (iris) in the second half.</p>",
        "id": 407540989,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702406492
    },
    {
        "content": "<p>I haven't looked closely myself.  Relational Hoare triples is a topic that comes up in this context, and <a href=\"https://arxiv.org/pdf/1703.00055.pdf\">this</a> was one of the first results when searching for papers on the topic.</p>",
        "id": 407543438,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1702407289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Verification.20of.20functions.20using.20mutability.20.28STRef.29/near/407534659\">said</a>:</p>\n<blockquote>\n<p>a strong suspicion that <code>ST</code> is inconsistent, or at least <code>ST</code> augmented with reasonable axioms for how references behave</p>\n</blockquote>\n<p>I'd be interested in seeing a draft of what these axioms could be</p>",
        "id": 408370488,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702755384
    }
]