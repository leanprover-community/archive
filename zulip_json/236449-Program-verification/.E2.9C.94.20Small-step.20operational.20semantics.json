[
    {
        "content": "<p>Hey there !</p>\n<p>I am on the quest of building a very simple certified compiler, but alogn the way I am learning about small-step operational semantics.</p>\n<p>I stumbled upon <a href=\"https://www.cs.cornell.edu/courses/cs4160/2020sp/sf/plf/terse/Smallstep.html\">this explanation</a>, that I am trying to convert to Lean4.</p>\n<p>For the moment I am stuck at the proof that the smallstep relation is deterministic.</p>\n<p>Is there anyone willing to help me ?</p>",
        "id": 403436218,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700589794
    },
    {
        "content": "<p>Maybe that's not really the best stream for this though.</p>",
        "id": 403436279,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700589815
    },
    {
        "content": "<p>Small step semantics being deterministic or not depends on your reduction rules.</p>",
        "id": 403436541,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700589916
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Small-step.20operational.20semantics\">#Is there code for X? &gt; Small-step operational semantics</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 403436575,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700589927
    },
    {
        "content": "<p>I have used the very same implementation than that in the article mentionned, which is deterministic.</p>",
        "id": 403436754,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700589986
    },
    {
        "content": "<p>This is usually just an induction over the step inductive type</p>",
        "id": 403436765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700589992
    },
    {
        "content": "<p>'just'</p>",
        "id": 403436787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700590001
    },
    {
        "content": "<p>What Mario says, but where precisely are you stuck?</p>",
        "id": 403436830,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590017
    },
    {
        "content": "<p>It helps if we get an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 403436899,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590044
    },
    {
        "content": "<p>Here's the mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Term.eval</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"n\">left</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left.eval</span> <span class=\"bp\">+</span> <span class=\"n\">right.eval</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvPlusConstConst</span> <span class=\"o\">:</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvPlusLeft</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">EvalSmallStep</span> <span class=\"n\">t₁</span> <span class=\"n\">t₁'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"n\">t₁'</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvPlusRight</span> <span class=\"o\">:</span> <span class=\"n\">EvalSmallStep</span> <span class=\"n\">t₂</span> <span class=\"n\">t₂'</span> <span class=\"bp\">→</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">t₂'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- infixl:27 \" ==&gt; \" =&gt; EvalSmallStep</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Relation</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Relation.deterministic</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">Relation</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y₁</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y₂</span> <span class=\"bp\">→</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalSmallStep.deterministic</span> <span class=\"o\">:</span> <span class=\"n\">Relation.deterministic</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Relation.deterministic</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"n\">hy₁</span> <span class=\"n\">hy₂</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hy₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EvPlusConstConst</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hy₂</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h2</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EvPlusLeft</span> <span class=\"n\">redleft</span> <span class=\"n\">hredleft</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hy₂</span>\n    <span class=\"bp\">·</span> <span class=\"n\">contradiction</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">redleft</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EvPlusRight</span> <span class=\"n\">right</span> <span class=\"n\">hredright</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I am stuck at the first <code>sorry</code> for now</p>",
        "id": 403437032,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590099
    },
    {
        "content": "<p>The article talks about something called an <code>inversion</code> though I see lean does not have such a tactic.</p>\n<p>I am willing to learn about writing tactics though, so I am fine trying to write that.</p>",
        "id": 403437137,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590142
    },
    {
        "content": "<p><code>inversion</code> is <code>cases</code> in lean</p>",
        "id": 403437270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700590198
    },
    {
        "content": "<p>May I ask for a little more explanation in this ?</p>",
        "id": 403437343,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590215
    },
    {
        "content": "<p>inversion is what coq people call it when you take an object and figure out how you constructed it</p>",
        "id": 403437390,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590235
    },
    {
        "content": "<p>Okay, that's clearer then already</p>",
        "id": 403437466,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590269
    },
    {
        "content": "<p>You'll find an explanation in the first volume of SF</p>",
        "id": 403437510,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590290
    },
    {
        "content": "<p>SF ?</p>",
        "id": 403437532,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590300
    },
    {
        "content": "<p>Software Foundations</p>",
        "id": 403437635,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590329
    },
    {
        "content": "<p>The book you just linked to</p>",
        "id": 403437638,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590333
    },
    {
        "content": "<p>Oh okay</p>",
        "id": 403437641,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Small-step.20operational.20semantics/near/403437638\">said</a>:</p>\n<blockquote>\n<p>The book you just linked to</p>\n</blockquote>\n<p>Indeed, I had not realize</p>",
        "id": 403437689,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590360
    },
    {
        "content": "<p>At some point I had the proof written, but Lean complained about that fact that termination was not guaranteed</p>",
        "id": 403437951,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590466
    },
    {
        "content": "<p>that means you referred to the theorem in its own body, which you shouldn't do if you are also using <code>induction</code> at the same time</p>",
        "id": 403438044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700590505
    },
    {
        "content": "<p>The thing is that I am not able to prove the theorem without doing that...</p>",
        "id": 403438087,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590526
    },
    {
        "content": "<p>Let me try to find how I did that</p>",
        "id": 403438106,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590534
    },
    {
        "content": "<p>you get an induction hypothesis.</p>",
        "id": 403438132,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590544
    },
    {
        "content": "<p>you have to use it</p>",
        "id": 403438156,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590555
    },
    {
        "content": "<p>Aside: <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> : I tried that <code>induction with</code> thing. Now it throws errors after I type with but shows no tooltip on the web editor</p>",
        "id": 403438354,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590628
    },
    {
        "content": "<p>See the same mwe without the induction arms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Term.eval</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"n\">left</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left.eval</span> <span class=\"bp\">+</span> <span class=\"n\">right.eval</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvPlusConstConst</span> <span class=\"o\">:</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvPlusLeft</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₁'</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">EvalSmallStep</span> <span class=\"n\">t₁</span> <span class=\"n\">t₁'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"n\">t₁'</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">EvPlusRight</span> <span class=\"o\">(</span><span class=\"n\">t₂</span> <span class=\"n\">t₂'</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">):</span> <span class=\"n\">EvalSmallStep</span> <span class=\"n\">t₂</span> <span class=\"n\">t₂'</span> <span class=\"bp\">→</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">t₂'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- infixl:27 \" ==&gt; \" =&gt; EvalSmallStep</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Relation</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Relation.deterministic</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">Relation</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y₁</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y₂</span> <span class=\"bp\">→</span> <span class=\"n\">y₁</span> <span class=\"bp\">=</span> <span class=\"n\">y₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EvalSmallStep.deterministic</span> <span class=\"o\">:</span> <span class=\"n\">Relation.deterministic</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Relation.deterministic</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"n\">hy₁</span> <span class=\"n\">hy₂</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hy₂</span> <span class=\"k\">with</span>\n\n\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 403438410,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590654
    },
    {
        "content": "<p>you have to finish the syntax, it takes <code>| foo =&gt; ...</code> arms</p>",
        "id": 403438428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700590659
    },
    {
        "content": "<p>But isn't that the induction arm that the tool tip volunteers to generate normally?</p>",
        "id": 403438561,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590710
    },
    {
        "content": "<p>you haven't imported tooltips</p>",
        "id": 403438606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700590728
    },
    {
        "content": "<p><code>import Std.CodeAction</code></p>",
        "id": 403438647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700590750
    },
    {
        "content": "<p>Okay, works now</p>",
        "id": 403438693,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700590772
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">EvalSmallStep.deterministic</span> <span class=\"o\">:</span> <span class=\"n\">Relation.deterministic</span> <span class=\"n\">EvalSmallStep</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Relation.deterministic</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"n\">hy₁</span> <span class=\"n\">hy₂</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hy₁</span> <span class=\"n\">generalizing</span> <span class=\"n\">y₂</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EvPlusConstConst</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hy₂</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h2</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">EvPlusLeft</span> <span class=\"n\">a</span> <span class=\"n\">a₁</span> <span class=\"n\">b</span> <span class=\"n\">h₁</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hy₂</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">EvPlusConstConst</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">EvPlusLeft</span> <span class=\"n\">_</span> <span class=\"n\">a₂</span> <span class=\"n\">_</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IH</span> <span class=\"n\">h₂</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">EvPlusRight</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EvPlusRight</span> <span class=\"n\">right</span> <span class=\"n\">hredright</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 403438967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700590886
    },
    {
        "content": "<p>Okay, let me wrap my head around that</p>",
        "id": 403439025,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700590917
    },
    {
        "content": "<p>the key point is the <code>generalizing y₂</code> at the start</p>",
        "id": 403439176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700590976
    },
    {
        "content": "<p>without this your induction hypothesis only applies for the original <code>y₂</code>, which is not good since you want to <code>cases</code> on it</p>",
        "id": 403439265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700591012
    },
    {
        "content": "<p>Hmmm, I am not sure I understand what <code>generalizing</code> is actually doing though</p>",
        "id": 403439687,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700591164
    },
    {
        "content": "<p>When you intro y2, you essentially say, for the rest of the proof here is an arbitrary but fixed y2</p>",
        "id": 403440171,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700591356
    },
    {
        "content": "<p>Oh and generalizing does the opposite, I just realized that in the proof context</p>",
        "id": 403440302,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700591409
    },
    {
        "content": "<p>Whereas you want a more powerful statement that allows you to have arbitrary y2 in each induction arm.</p>",
        "id": 403440342,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700591427
    },
    {
        "content": "<p>Okay I managed to prove the other case (mainly by mimicing the previous one) !</p>",
        "id": 403442343,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700592224
    },
    {
        "content": "<p>Thank you very much for your help !</p>",
        "id": 403442376,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700592240
    },
    {
        "content": "<p>Final question: it seems I can't use the \"\\langle\" \"\\rangle\" notation for some reason in <code>let</code> statements, is there a reason for that ?</p>",
        "id": 403444719,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700593306
    },
    {
        "content": "<p>Try it by replacing the word \"let\" with \"obtain\". If you get some annoying error about obtain not being found, add <code>import Mathlib Tactic</code> at the top</p>",
        "id": 403445096,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700593438
    },
    {
        "content": "<p>Argh, I'd like to avoid a dependency to mathlib if possible...<br>\nIs there another way to break <code>exists</code> in Stdlib ?</p>",
        "id": 403445407,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700593575
    },
    {
        "content": "<p>I am not sure where obtain is. Ideally it should be in Std, but I don't remember.</p>",
        "id": 403445588,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700593655
    },
    {
        "content": "<p>The \"ideally\" bit is just my opinion, nothing more</p>",
        "id": 403445703,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700593693
    },
    {
        "content": "<p>Well there's probably a way to write a tiny tactic to do that ?</p>",
        "id": 403445934,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700593802
    },
    {
        "content": "<p>obtain is in Std</p>",
        "id": 403446056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700593851
    },
    {
        "content": "<p><code>import Std.Tactic.RCases</code></p>",
        "id": 403446100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700593872
    },
    {
        "content": "<p>Indeed, thanks !</p>",
        "id": 403446313,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700593949
    },
    {
        "content": "<p>Now the final final question: if I have an inductive type with only one parameter and constructor ?<br>\n<code>obtain</code> does not seem to work</p>",
        "id": 403460782,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700600068
    },
    {
        "content": "<p>Can you show us what precisely doesn't work?</p>",
        "id": 403463641,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700601363
    },
    {
        "content": "<p>Basically I changed the mwe above to have a predicate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">vConst</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And sometimes I have <code>Value v</code> in my context and I want to unwrap that into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 403463817,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700601452
    },
    {
        "content": "<p>For now I had to (if <code>h : Value v</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 403464002,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700601536
    },
    {
        "content": "<p><code>let \\&lt;n\\&gt; := h</code></p>",
        "id": 403464537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700601795
    },
    {
        "content": "<p>or <code>obtain</code></p>",
        "id": 403464549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700601799
    },
    {
        "content": "<p>Neither of them work for me</p>",
        "id": 403464720,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700601875
    },
    {
        "content": "<p>Oh, so the problem was that my indictive definition had an implicit argument instead of an explicit argument</p>",
        "id": 403464842,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700601937
    },
    {
        "content": "<p>in that case <code>let/obtain \\&lt;\\&gt; := h</code> should work</p>",
        "id": 403465298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700602111
    },
    {
        "content": "<p>you can also use <code>@</code> with obtain, i.e. <code>obtain @\\&lt;n\\&gt; := h</code></p>",
        "id": 403465341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700602134
    },
    {
        "content": "<p>And if I want to capture the <code>n</code> in some cases, how would I do ?</p>",
        "id": 403465367,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700602144
    },
    {
        "content": "<p>for <code>let</code> you would have to use the constructor name, <code>let @Value.vConst n := h</code></p>",
        "id": 403465432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700602178
    },
    {
        "content": "<p>Okay that works great with <code>@\\&lt;n\\&gt;</code></p>\n<p>Thanks again !</p>\n<p>Thanks for you patience, I learned a lot !</p>",
        "id": 403465568,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700602235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> has marked this topic as resolved.</p>",
        "id": 403465573,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700602238
    },
    {
        "content": "<p>Is there anything like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Reserved</span> <span class=\"n\">Notation</span> <span class=\"s2\">\" t '==&gt;' n \"</span> <span class=\"o\">(</span><span class=\"n\">at</span> <span class=\"n\">level</span> <span class=\"mi\">50</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"n\">associativity</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">Inductive</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E_Const</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">E_Plus</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span><span class=\"o\">,</span>\n      <span class=\"n\">t1</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">n1</span> <span class=\"bp\">→</span>\n      <span class=\"n\">t2</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">n2</span> <span class=\"bp\">→</span>\n      <span class=\"n\">P</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">==&gt;</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"n\">n2</span><span class=\"o\">)</span>\n<span class=\"n\">where</span> <span class=\"s2\">\" t '==&gt;' n \"</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">t</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>in Lean where you can declare a notation first, use it in a definition then assign the notation to the definition?</p>",
        "id": 404065555,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700895101
    },
    {
        "content": "<p>see <a href=\"#narrow/stream/270676-lean4/topic/Prettyprinting.20the.20result.20of.20an.20.23eval/near/403046669\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Prettyprinting.20the.20result.20of.20an.20.23eval/near/403046669</a></p>",
        "id": 404069487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700896845
    },
    {
        "content": "<p>Thanks, the solution feels a bit like <code>set_option quotPrecheck false</code>. (UPDATE: that doesn't work)</p>",
        "id": 404072443,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700898083
    }
]