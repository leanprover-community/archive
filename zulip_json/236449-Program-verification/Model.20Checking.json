[
    {
        "content": "<p>Hey all <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm interested in working on integrating model checking with Lean (in what exact form is yet to be determined). So I was wondering what the current state of model checking in Lean is? The only related threads I've found are:</p>\n<ul>\n<li><a href=\"#narrow/stream/113489-new-members/topic/Model.20Checking\">new members &gt; Model Checking</a></li>\n<li><a href=\"#narrow/stream/113488-general/topic/Model.20checking.20in.20Lean\">general &gt; Model checking in Lean</a></li>\n<li><a href=\"#narrow/stream/236449-Program-verification/topic/Projects/near/215764510\">Program verification &gt; Projects</a></li>\n</ul>\n<p>In these threads there are various examples of people having developed certain parts of temporal logics in Lean, but no model checking algorithms or integration with existing model checkers.<br>\nIf things have changed wrt. model checking since those threads were started I would love to hear about it!</p>",
        "id": 356068695,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1683295319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Model.20Checking/near/356068695\">said</a>:</p>\n<blockquote>\n<p>Hey all <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm interested in working on integrating model checking with Lean (in what exact form is yet to be determined). So I was wondering what the current state of model checking in Lean is? The only related threads I've found are:</p>\n<ul>\n<li><a href=\"#narrow/stream/113489-new-members/topic/Model.20Checking\">new members &gt; Model Checking</a></li>\n<li><a href=\"#narrow/stream/113488-general/topic/Model.20checking.20in.20Lean\">general &gt; Model checking in Lean</a></li>\n<li><a href=\"#narrow/stream/236449-Program-verification/topic/Projects/near/215764510\">Program verification &gt; Projects</a></li>\n</ul>\n<p>In these threads there are various examples of people having developed certain parts of temporal logics in Lean, but no model checking algorithms or integration with existing model checkers.<br>\nIf things have changed wrt. model checking since those threads were started I would love to hear about it!</p>\n</blockquote>\n<p>I think the issue that will bother you first when you try to add model checking algorithms is that there is no agreement on how to add algorithms to Lean.</p>",
        "id": 356072624,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683296024
    },
    {
        "content": "<p>There are different people pursuing different approaches in the Computational Complexity thread in the general stream</p>",
        "id": 356072820,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683296066
    },
    {
        "content": "<p>There was also another thread about checking that DFS works (i.e. all nodes are visited), by <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span>  who might know more about that.</p>",
        "id": 356073075,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683296127
    },
    {
        "content": "<p>There was also this PR : <a href=\"https://github.com/leanprover-community/mathlib4/pull/3221\">https://github.com/leanprover-community/mathlib4/pull/3221</a></p>",
        "id": 356073856,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683296299
    },
    {
        "content": "<p>The isabelle community has some algorithm verification people who have developed frameworks for this. For example : <a href=\"https://dl.acm.org/doi/10.1145/2676724.2693165\">https://dl.acm.org/doi/10.1145/2676724.2693165</a></p>",
        "id": 356074235,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683296376
    },
    {
        "content": "<p>I can't say much about other aspects of model checking. The computability section of mathlib has some machinery for automaton, but I haven't found any description of Buchi automata yet, to give one example.</p>",
        "id": 356074811,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683296491
    },
    {
        "content": "<p>Wow, thanks <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>! My rough idea was to call a model checker (like SPIN, PRISM, ...) from Lean and somehow use <a href=\"https://www.sosy-lab.org/research/pub/2022-TOSEM.Verification_Witnesses.pdf\">verification witnesses</a> to generate proofs in Lean. Then I wouldn't have to implement the model checking algorithms myself. Though I don't know how much model checking <em>theory</em> would need to be defined in  order to turn verification witnesses into proofs.</p>",
        "id": 356083654,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1683298184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Model.20Checking/near/356083654\">said</a>:</p>\n<blockquote>\n<p>Wow, thanks <span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span>! My rough idea was to call a model checker (like SPIN, PRISM, ...) from Lean and somehow use <a href=\"https://www.sosy-lab.org/research/pub/2022-TOSEM.Verification_Witnesses.pdf\">verification witnesses</a> to generate proofs in Lean. Then I wouldn't have to implement the model checking algorithms myself. Though I don't know how much model checking <em>theory</em> would need to be defined in  order to turn verification witnesses into proofs.</p>\n</blockquote>\n<p>In principle one part of this is similar to a hammer for lean, except this hammer calls verification tools rather than SMT solvers. You might want to check those threads.  </p>\n<p>The other part is interpreting certificates. You will need the relevant theories in which you analyse the certificates. There is a thread on Separation Logics for example ,which points to a (presently unmaintained) library of separation logic that is a port of Coq's Iris.</p>",
        "id": 356089417,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683299379
    },
    {
        "content": "<p>And there <del>are</del> might be other similar libraries for some other logics as you point out.</p>\n<p>A lot depends on what level of verification you are looking for :  Presumably you will need to implement the algorithms in the paper itself, but you could argue that you trust your implementation and not verify their correctness in lean. Or you could carefully implement and verify them in lean.</p>",
        "id": 356090178,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683299531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Model.20Checking/near/356089417\">said</a>:</p>\n<blockquote>\n<p>The other part is interpreting certificates. You will need the relevant theories in which you analyse the certificates. There is a thread on Separation Logics for example ,which points to a (presently unmaintained) library of separation logic that is a port of Coq's Iris.</p>\n</blockquote>\n<p>oh interesting that you mention that, what's the relationship between separation logic and model checking/temporal logics? is there an obvious connection there that I'm missing?</p>",
        "id": 356447634,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683452463
    },
    {
        "content": "<p>There's also some verified implementation of some basic model checking algorithms in Coq too, like <a href=\"https://link.springer.com/chapter/10.1007/3-540-44464-5_13\">this</a> or <a href=\"https://link.springer.com/chapter/10.1007/BFb0054171\">this</a>. An option is to have a verified basic version in Lean and an unverified external version (say, through an FFI or just calling the programs) to a mature model checker like SPIN or PRISM, so you can re-check minimal subsystems that those return, or where you can decide wether or not to trust the external tool, like is done e.g. with GMP currently</p>",
        "id": 356448201,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683452707
    },
    {
        "content": "<p>This thread is timely for me because I recently went through the first half of \"Principles of Model Checking\" textbook (stopping just short of CTL* and Bisimulation) and wrote up most of the algorithms in Lean. I also wrote up a simple widget to visualize transition systems in VSCode.<br>\n<a href=\"https://gitlab.com/Izzimach/solifugid-z\">https://gitlab.com/Izzimach/solifugid-z</a></p>\n<p>However since my background is systems programming and not theorem-proving all my Lean code is just algorithms with no proofs. Also, the data structures are generally not well-suited for theorem proving. I'd like to go back and rewrite some parts so that they would be useful for theorem proving and more \"compatible\" with mathlib in general.<br>\nBased on some of the links listed here I guess I should work on providing a Prop of the form <code>ts |= e</code> where <code>ts</code> is some transition system and <code>e</code> is some LTL/CTL expression. Also I know that mathlib4 has several sections concerning graphs and DFA/NFA so would it be useful to make my transition system representation compatible/isomorphic with those?</p>",
        "id": 358496884,
        "sender_full_name": "Gary Haussmann",
        "timestamp": 1684165192
    },
    {
        "content": "<p>for CTL and friends, state of the art in Coq is this: <a href=\"https://github.com/coq-community/comp-dec-modal\">https://github.com/coq-community/comp-dec-modal</a></p>",
        "id": 358503838,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1684166588
    },
    {
        "content": "<p>I'd agree that a Prop that looks something like ts |= e could be useful. Furthermore, you could maybe than prove soundness theorem that says ts |= e iff algo(ts,e)=true. However, I am not sure how to connect it to mathlib. DFAs\\NFAs are afaik not isomorphic to transition systems due to FAs having a certain accepting condition. LTL Model Checking uses Büchi accepting criterias instead of FAs accepting criterias anyway.</p>",
        "id": 358917355,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1684310933
    },
    {
        "content": "<p>From just looking around, I saw that mathlib offers methods for computing the transition system of a turing machine. Maybe this could be something to look into?</p>",
        "id": 358918781,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1684311402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571277\">Ira Fesefeldt</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Model.20Checking/near/358917355\">said</a>:</p>\n<blockquote>\n<p>I'd agree that a Prop that looks something like ts |= e could be useful. Furthermore, you could maybe than prove soundness theorem that says ts |= e iff algo(ts,e)=true. However, I am not sure how to connect it to mathlib. DFAs\\NFAs are afaik not isomorphic to transition systems due to FAs having a certain accepting condition. LTL Model Checking uses Büchi accepting criterias instead of FAs accepting criterias anyway.</p>\n</blockquote>\n<p>but you can transform them to equivalent transition systems/kripke structures, can't you? Where for every accepting state in an NFA/DFA you just have a transition to itself</p>",
        "id": 358947961,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1684319844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Model.20Checking/near/358947961\">said</a>:</p>\n<blockquote>\n<p>but you can transform them to equivalent transition systems/kripke structures, can't you? Where for every accepting state in an NFA/DFA you just have a transition to itself</p>\n</blockquote>\n<p>I am not sure that this is always the transition system you actually would like to have? Alternatively, one could consider the transition system where instead of a self-loop, there is a transition from accepting states to some sink state? Or even another alternative, you could only label accepting states with a label accept? I  would claim that it is not trivial, on which transformation from FA to transition system you would like to do model checking.</p>",
        "id": 358959781,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1684323386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571277\">Ira Fesefeldt</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Model.20Checking/near/358917355\">said</a>:</p>\n<blockquote>\n<p>I'd agree that a Prop that looks something like ts |= e could be useful. Furthermore, you could maybe than prove soundness theorem that says ts |= e iff algo(ts,e)=true. However, I am not sure how to connect it to mathlib. DFAs\\NFAs are afaik not isomorphic to transition systems due to FAs having a certain accepting condition. LTL Model Checking uses Büchi accepting criterias instead of FAs accepting criterias anyway.</p>\n</blockquote>\n<p>I think changing this is not difficult. For DFAs, the terminating condition is being in a set (i.e. satisfying some property), instead we replace this with some property suitable for Buchi automaton. There must be some way to express that some state occurs infinitely in an accepting run.</p>",
        "id": 358968663,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684326091
    },
    {
        "content": "<p>Where I got stuck in my naive attempt was that there was no explicit way to do transfinite induction.</p>",
        "id": 358969950,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684326447
    },
    {
        "content": "<p>If the transition system is a directed graph then the Buchi criteria could be that a (reachable) cycle exists containing the accepting set.<br>\nIf I want to create/use theorems regarding model checking I think both the transition system and the temporal logic expressions need to be of a form that Lean tactics can easily manipulate.</p>",
        "id": 359540329,
        "sender_full_name": "Gary Haussmann",
        "timestamp": 1684469641
    }
]