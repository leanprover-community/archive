[
    {
        "content": "<p>I hope this is good place to ask this.</p>\n<p>Here is the what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">/\\</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">/\\</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H0</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"n\">H</span> <span class=\"n\">H0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span>\n    <span class=\"k\">then</span> <span class=\"k\">match</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span> <span class=\"k\">with</span>\n         <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">highest1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">n1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">highest1</span> <span class=\"k\">with</span>\n                             <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">highest2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"n\">n2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"n\">highest2</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">loop</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Tactic <code>termination_by</code> seems to ignore/lose the link between <code>n2</code> and <code>n</code>, because the proof state I see is such:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"n\">n2</span> <span class=\"n\">highest2</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Am I doing this wrong way? Big thanks for any hints!</p>",
        "id": 404626056,
        "sender_full_name": "Lessness",
        "timestamp": 1701175002
    },
    {
        "content": "<p>try naming the match condition (similar to what you have done for if). You should get the equations that apply in each match arm as the hypothesis.</p>",
        "id": 404647538,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701181808
    },
    {
        "content": "<p>Oh, thank you. Will try it immediately.</p>",
        "id": 404647662,
        "sender_full_name": "Lessness",
        "timestamp": 1701181839
    },
    {
        "content": "<p>Thank you, it worked! <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 404648065,
        "sender_full_name": "Lessness",
        "timestamp": 1701181949
    },
    {
        "content": "<p>This is a good answer, and if it works, great!<br>\nAnother option, especially if <code>repeatedDiv</code>isn’t used anywhere else, is to make its type carry the fact that the result is smaller or equal,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 404648126,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701181973
    },
    {
        "content": "<p>One question from my side: what is the parameter <code>highest</code> doing/denoting?</p>",
        "id": 404695270,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701197146
    },
    {
        "content": "<p>It will be the highest divisor of n (if n isn't a prime).</p>",
        "id": 404702870,
        "sender_full_name": "Lessness",
        "timestamp": 1701199492
    },
    {
        "content": "<p>It's the 3rd exercise from Project Euler.</p>",
        "id": 404702992,
        "sender_full_name": "Lessness",
        "timestamp": 1701199543
    },
    {
        "content": "<p>How to 'force' this <code>if .. then .. else ..</code> construction in the proof of the <code>repeatedDivLe</code> to simplify to <code>else</code> branch?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">/\\</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">/\\</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H0</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"n\">H</span> <span class=\"n\">H0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">repeatedDivLe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">repeatedDiv</span>\n    <span class=\"k\">have</span> <span class=\"n\">H2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">/\\</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">/\\</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intros</span> <span class=\"n\">H2</span>\n      <span class=\"n\">cases</span> <span class=\"n\">H2</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H2</span> <span class=\"n\">H3</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">H3</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">H4</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thank you!</p>",
        "id": 404945918,
        "sender_full_name": "Lessness",
        "timestamp": 1701290342
    },
    {
        "content": "<p>I’d start like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">/\\</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">/\\</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H0</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"n\">H</span> <span class=\"n\">H0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">repeatedDivLe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">repeatedDiv</span>\n    <span class=\"n\">split</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">IH</span> <span class=\"o\">:=</span> <span class=\"n\">repeatedDivLe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H0</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"n\">H</span> <span class=\"n\">H0</span>\n</code></pre></div>",
        "id": 404946969,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701290817
    },
    {
        "content": "<p>Found it by some googling and luck.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">repeatedDivLe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">repeatedDiv</span>\n    <span class=\"k\">have</span> <span class=\"n\">H2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">/\\</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">/\\</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intros</span> <span class=\"n\">H2</span>\n      <span class=\"n\">cases</span> <span class=\"n\">H2</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H2</span> <span class=\"n\">H3</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">H3</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">H4</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">H2</span>\n</code></pre></div>",
        "id": 404946990,
        "sender_full_name": "Lessness",
        "timestamp": 1701290826
    },
    {
        "content": "<p>Now looking at your answer, too. Thank you!</p>",
        "id": 404947097,
        "sender_full_name": "Lessness",
        "timestamp": 1701290878
    },
    {
        "content": "<p>Ah, nevermind, your proof isn’t actually inductive, and only goes into the second case of the function definition. Then <code>if_neg</code> works well.</p>",
        "id": 404948236,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701291329
    },
    {
        "content": "<p>You don’t need the first three assumptions, btw:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">repeatedDivLe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span>  <span class=\"n\">H1</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">repeatedDiv</span>\n    <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 404948519,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701291429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/236449-Program-verification/topic/How.20to.20approach.20proving.20termination.20here.3F/near/404946969\">said</a>:</p>\n<blockquote>\n<p>I’d start like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">/\\</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">/\\</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"n\">repeatedDiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">repeatedDiv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H0</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"n\">H</span> <span class=\"n\">H0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">repeatedDivLe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">repeatedDiv</span>\n    <span class=\"n\">split</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">IH</span> <span class=\"o\">:=</span> <span class=\"n\">repeatedDivLe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H0</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"n\">H</span> <span class=\"n\">H0</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I tried to run your answer in <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> and it said at <code>termination_by _ a b c =&gt; a</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.7785</span>\n</code></pre></div>",
        "id": 404979451,
        "sender_full_name": "Lessness",
        "timestamp": 1701305732
    },
    {
        "content": "<p>Why is it so? It seems to me that <code>a</code> denotes the first parameter, not the fourth or <code>1 &lt;= n</code> ... :O</p>",
        "id": 404979742,
        "sender_full_name": "Lessness",
        "timestamp": 1701305860
    },
    {
        "content": "<p>Ah, yes, my bad. Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"n\">decreasing_by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"n\">H</span> <span class=\"n\">H0</span>\n</code></pre></div>",
        "id": 405060147,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701331048
    },
    {
        "content": "<p>Another way to deal with these termination proofs is to just prove that the relevant number is decreasing at a strategic location in the function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">repeatedDivLe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">f</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">repeatedDiv</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">repeatedDiv</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">h.2.2</span><span class=\"o\">)</span>\n      <span class=\"k\">have</span> <span class=\"n\">IH</span> <span class=\"o\">:=</span> <span class=\"n\">repeatedDivLe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">f</span> <span class=\"n\">highest</span><span class=\"o\">)</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 405139165,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1701357379
    }
]