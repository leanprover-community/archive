[
    {
        "content": "<p>Do we have a library for separation logics in lean? Apparently there are quite a few in Coq. I attended a talk today where the speaker was talking about program synthesis and verifying the synthesised program. For complicated pre and post conditions, their synthesis tool translates to Coq and generates lemmas (and even some proofs). The speaker mentioned that one of the critical issues was that Coq insisted on constructive proofs only and this was an obstacle for proof synthesis.</p>",
        "id": 342525146,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679050157
    },
    {
        "content": "<p>I asked if this issue disappears if constructivism is not a constraint. For e.g. : Lean's tactics seem to take a  more laissez faire approach with the use of classical logic.</p>",
        "id": 342525621,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679050300
    },
    {
        "content": "<p>The speaker said that this might be an interesting question to explore but he was unaware of any library for separation logics in lean.</p>",
        "id": 342525797,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679050344
    },
    {
        "content": "<p>I do plan to work on a flavor of separation logic in lean, but I am not aware of any previous work in lean. Most work on separation logic I encountered was either in coq or isabelle.</p>",
        "id": 342527027,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1679050686
    },
    {
        "content": "<p>I am starting some work on this as well. This might potentially tie into my work on circuits (reinterpreting certain stateful parts of a circuit).</p>",
        "id": 342528170,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679050939
    },
    {
        "content": "<p><a href=\"https://github.com/larsk21/iris-lean\">https://github.com/larsk21/iris-lean</a> is a separation logic framework in lean</p>",
        "id": 342528476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679050994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Separation.20Logic/near/342525146\">said</a>:</p>\n<blockquote>\n<p>Coq insisted on constructive proofs only</p>\n</blockquote>\n<p>For what it's worth, I'm pretty sure \"insisted\" is way too strong here</p>",
        "id": 342533876,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679052479
    },
    {
        "content": "<p>most high-level proof automation in Coq supports using LEM, for example, <a href=\"https://gitlab.inria.fr/fbesson/itauto\">itauto</a> uses NNPP whenever the <code>Classical_Prop</code> module is loaded</p>",
        "id": 342536656,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1679053198
    },
    {
        "content": "<p>arguably the most famous Coq project, CompCert, uses LEM and some other axioms like functional extensionality (at least last I checked). In my experience, serious Coq users value having <em>the choice</em> of using LEM or not, but if they insist on anything, it's declaring your axiom choices up front (rather than staying constructive in itself)</p>",
        "id": 342541977,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1679054695
    },
    {
        "content": "<p>Interesting. The speaker did admit to not being aware about the exact place where constructivism was an obstacle (he mentioned that he has a PhD student who does the coq stuff)</p>",
        "id": 342544820,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679055501
    },
    {
        "content": "<p>But could this be an issue with specific libraries or tactics?</p>",
        "id": 342544935,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679055537
    },
    {
        "content": "<p>to my knowledge, CoqHammer's sauto (<a href=\"https://coqhammer.github.io/#sauto\">https://coqhammer.github.io/#sauto</a>) was developed from the start as a constructive first-order solver, so LEM is just another axiom to it without much bells and whistles. There are probably some LEM-specific optimizations you can do in a hammer system that weren't done in CoqHammer</p>",
        "id": 342548708,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1679056597
    },
    {
        "content": "<p>Is it true that this repository is not maintained anymore?<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Separation.20Logic/near/342528476\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/larsk21/iris-lean\">https://github.com/larsk21/iris-lean</a> is a separation logic framework in lean</p>\n</blockquote>",
        "id": 342624433,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679073839
    },
    {
        "content": "<p>It is. It was a student project and the student graduated</p>",
        "id": 342624728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679073921
    },
    {
        "content": "<p>I would like to see work on it continue though</p>",
        "id": 342624793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679073945
    },
    {
        "content": "<p>I'm quite interested in separation logic and would love to continue that work. I just worry about whether it would be novel enough to incorporate into my PhD topic and would find it hard to find the time to work on it if not</p>",
        "id": 342732359,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1679128646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Separation.20Logic/near/342528476\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/larsk21/iris-lean\">https://github.com/larsk21/iris-lean</a> is a separation logic framework in lean</p>\n</blockquote>\n<p>I have again looked into this project. It seems, it is currently not compatible with mathlib4, since they use incompatible versions. Are there plans to upgrade iris-lean at some point? Maybe when mathlib4 uses a stable lean4 version again?</p>",
        "id": 363048602,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1685712126
    },
    {
        "content": "<p>I don't think there is much sense in holding out for a stable version, you might pass a few important stages of life before seeing it happen</p>",
        "id": 363052125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685712783
    },
    {
        "content": "<p>It just needs periodic upkeep, like any other project</p>",
        "id": 363052357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685712830
    },
    {
        "content": "<p>I am quite weak in this meta programming... But I like to have the power of mathlib for doing real arithmetic with separation logic. So I guess I now either learn how to upgrade this project or switch to coq :D</p>",
        "id": 364353926,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1686159872
    },
    {
        "content": "<p>I had a quick look and it seems like fairly non-trivial meta programming stuff indeed. Some issues were simple to fix and I started here: <a href=\"https://github.com/goens/iris-lean/commit/fab0b67d3c4a1d65f1e7c51a0e14f0e66500ed03\">https://github.com/goens/iris-lean/commit/fab0b67d3c4a1d65f1e7c51a0e14f0e66500ed03</a> but I'm also stumped by a timeout and type error I got from it:</p>\n<div class=\"codehilite\" data-code-language=\"Text output\"><pre><span></span><code><span class=\"go\">error: &gt; LEAN_PATH=./build/lib DYLD_LIBRARY_PATH=/Users/goens/.elan/toolchains/leanprover--lean4---nightly-2023-05-31/lib:./build/lib /Users/goens/.elan.arm/toolchains/leanprover--lean4---nightly-2023-05-31/bin/lean ././src//./Iris/BI/Interface.lean -R ././src//. -o ./build/lib/Iris/BI/Interface.olean -i ./build/lib/Iris/BI/Interface.ilean -c ./build/ir/Iris/BI/Interface.c</span>\n<span class=\"go\">error: stdout:</span>\n<span class=\"go\">././src//./Iris/BI/Interface.lean:52:0: error: (deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"go\">././src//./Iris/BI/Interface.lean:132:67: error: type expected, got</span>\n<span class=\"go\">  (Ψ a : car)</span>\n<span class=\"go\">././src//./Iris/BI/Interface.lean:133:44: error: type expected, got</span>\n<span class=\"go\">  (Ψ a : car)</span>\n</code></pre></div>\n<p>Maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> might have a good overview of what happened, as he also supervised the person who did this?</p>",
        "id": 364504216,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1686218190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Separation.20Logic/near/364504216\">said</a>:</p>\n<blockquote>\n<p>I had a quick look and it seems like fairly non-trivial meta programming stuff indeed. Some issues were simple to fix and I started here: <a href=\"https://github.com/goens/iris-lean/commit/fab0b67d3c4a1d65f1e7c51a0e14f0e66500ed03\">https://github.com/goens/iris-lean/commit/fab0b67d3c4a1d65f1e7c51a0e14f0e66500ed03</a> but I'm also stumped by a timeout and type error I got from it:</p>\n<div class=\"codehilite\" data-code-language=\"Text output\"><pre><span></span><code><span class=\"go\">error: &gt; LEAN_PATH=./build/lib DYLD_LIBRARY_PATH=/Users/goens/.elan/toolchains/leanprover--lean4---nightly-2023-05-31/lib:./build/lib /Users/goens/.elan.arm/toolchains/leanprover--lean4---nightly-2023-05-31/bin/lean ././src//./Iris/BI/Interface.lean -R ././src//. -o ./build/lib/Iris/BI/Interface.olean -i ./build/lib/Iris/BI/Interface.ilean -c ./build/ir/Iris/BI/Interface.c</span>\n<span class=\"go\">error: stdout:</span>\n<span class=\"go\">././src//./Iris/BI/Interface.lean:52:0: error: (deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"go\">././src//./Iris/BI/Interface.lean:132:67: error: type expected, got</span>\n<span class=\"go\">  (Ψ a : car)</span>\n<span class=\"go\">././src//./Iris/BI/Interface.lean:133:44: error: type expected, got</span>\n<span class=\"go\">  (Ψ a : car)</span>\n</code></pre></div>\n<p>Maybe <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> might have a good overview of what happened, as he also supervised the person who did this?</p>\n</blockquote>\n<p>I believe the code there takes roughly 30 seconds to process. And thus is catched by the timeout of 20 seconds. At least for me, using exactly what is written in the error as solution works. Setting maxHeartbeats to e.g. 400000 solves the error.</p>",
        "id": 369719660,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1687788925
    },
    {
        "content": "<p>(Although there are still other errors, which I did not solve yet)</p>",
        "id": 369720310,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1687789038
    },
    {
        "content": "<p>Unfortunately I am also stuck with the next error:</p>\n<div class=\"codehilite\" data-code-language=\"Text output\"><pre><span></span><code><span class=\"go\">error: &gt; LEAN_PATH=./build/lib LD_LIBRARY_PATH=./build/lib /home/phoenix/.elan/toolchains/leanprover--lean4---nightly-2023-05-31/bin/lean ././src//./Iris/Proofmode/Classes.lean -R ././src//. -o ./build/lib/Iris/Proofmode/Classes.olean -i ./build/lib/Iris/Proofmode/Classes.ilean -c ./build/ir/Iris/Proofmode/Classes.c</span>\n<span class=\"go\">error: stdout:</span>\n<span class=\"go\">././src//./Iris/Proofmode/Classes.lean:20:11: error: cannot find synthesization order for instance @AsEmpValid1.bi with type</span>\n<span class=\"go\">  {φ : outParam Prop} → {PROP : Type} → (P : PROP) → [self : AsEmpValid1 φ P] → BI PROP</span>\n<span class=\"go\">all remaining arguments have metavariables:</span>\n<span class=\"go\">  @AsEmpValid1 ?φ PROP ?P</span>\n<span class=\"go\">././src//./Iris/Proofmode/Classes.lean:21:11: error: cannot find synthesization order for instance AsEmpValid2.bi with type</span>\n<span class=\"go\">  (φ : Prop) → {PROP : outParam Type} → {P : outParam PROP} → [self : AsEmpValid2 φ P] → BI PROP</span>\n<span class=\"go\">all remaining arguments have metavariables:</span>\n<span class=\"go\">  @AsEmpValid2 ?φ PROP ?P</span>\n<span class=\"go\">././src//./Iris/Proofmode/Classes.lean:25:2: error: cannot find synthesization order for instance @AsEmpValid.toAsEmpValid1 with type</span>\n<span class=\"go\">  {φ : Prop} → {PROP : Type} → {P : PROP} → [self : AsEmpValid φ P] → AsEmpValid1 φ P</span>\n<span class=\"go\">all remaining arguments have metavariables:</span>\n<span class=\"go\">  @AsEmpValid ?φ PROP P</span>\n<span class=\"go\">././src//./Iris/Proofmode/Classes.lean:25:2: error: cannot find synthesization order for instance @AsEmpValid.toAsEmpValid2 with type</span>\n<span class=\"go\">  {φ : Prop} → {PROP : Type} → {P : PROP} → [self : AsEmpValid φ P] → AsEmpValid2 φ P</span>\n<span class=\"go\">all remaining arguments have metavariables:</span>\n<span class=\"go\">  @AsEmpValid φ ?PROP ?P</span>\n<span class=\"go\">././src//./Iris/Proofmode/Classes.lean:29:55: error: typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"go\">  BIBase ?m.360</span>\n</code></pre></div>\n<p>What does \"cannot find synthesization order for instance\" even mean?</p>",
        "id": 370059173,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1687871771
    },
    {
        "content": "<p>You can search this Zulip for that phrase, but it usually means \"this is not a good instance because it will never fire\" (e.g. because it needs information not available to the typeclass inference system). I didn't look at your exact problem though, so treat this advice with a pinch of salt.</p>",
        "id": 370070955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687873685
    },
    {
        "content": "<p>I just found that too, thanks!</p>\n<p>The solution to deactivate the option synthInstance.checkSynthOrder does remove all errors except for the last one. I.e.</p>\n<div class=\"codehilite\" data-code-language=\"Text output\"><pre><span></span><code><span class=\"go\">error: stdout:</span>\n<span class=\"go\">././src//./Iris/Proofmode/Classes.lean:31:55: error: typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"go\">  BIBase ?m.360</span>\n</code></pre></div>",
        "id": 370072452,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1687873932
    },
    {
        "content": "<p>We did have to adjust the Coq typeclasses a bit during porting because Coq's typeclass system is much more \"free-form\", but they might still not quite conform to Lean expectations. We definitely should not ignore those errors.</p>",
        "id": 370072856,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687874000
    },
    {
        "content": "<p>That the last exception remains (in a similar form) is also an indicator for me that the errors are not spurious</p>",
        "id": 370073586,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1687874110
    }
]