[
    {
        "content": "<p>I'm preparing a PR introducing additive characters.</p>",
        "id": 290005886,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658169302
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15499\">#15499</a></p>",
        "id": 290006041,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658169365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Maybe you'd like to have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/15499\">#15499</a>.</p>",
        "id": 290006160,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658169437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I left some questions related to your comments at <a href=\"https://github.com/leanprover-community/mathlib/pull/15499\">#15499</a>.</p>",
        "id": 290293779,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658348788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/15499#pullrequestreview-1046919329\">said in a comment on #15499</a>:</p>\n<blockquote>\n<p>For me this PR raises an interesting question. My impression is that the community are not keen on adding the structure of maps f:A -&gt; G such that f(a+b)=f(a)*f(b), because then we have to make an API for it, and how it composes with additive maps on one side and multiplicative maps on the other side, and then there are maps G -&gt; A and etc etc. Another proposal is to define add_char so that it contains an application of of_add : R -&gt; multiplicative R and then just write add_char.map_add : \\psi (a + b) = \\psi a * \\psi b and a bit more API for it.</p>\n<p>My position on this has come from a huge struggle I had in the past using with_top because it would often leak to option, and if you were working with with_top and with_bot then you didn't know whether none was bot or top. Being principled with types in statements of results goes a long way towards stopping this kind of leakage.</p>\n</blockquote>\n<p>To add to Kevin 's comment above, I find it quite painful to have to use <code>multiplicative R →* R'</code> instead of something like, say, <code>R +→* R'</code> and having to convert between <code>R</code> and <code>multiplicative R</code> via <code>of_add</code> and <code>to_add</code>. (And as one can see from Kevin's comments on the PR, I didn't manage to do it completely right...). If homomorphisms between additive and multiplicative structures also occur in some other places, it may be worth the effort of having dedicated type classes and API for them. Maybe there is a way of auto-generate them, something like a \"left\" or \"right\" version of to_additive?</p>",
        "id": 290429680,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658435206
    },
    {
        "content": "<p>We've done a lot of work recently to plug the holes of the with_top and with_bot implementation to prevent the leaking of some and none, without having to resort to irreducible.</p>",
        "id": 290459001,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658458823
    },
    {
        "content": "<p>Part of the leakage often occurs with \"cute\" proofs that (ab)use the fact that the underlying type is the same. What we need better are useful recursors</p>",
        "id": 290459033,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658458883
    },
    {
        "content": "<p>Like we know have with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.rec_top_coe\">docs#with_top.rec_top_coe</a> for example</p>",
        "id": 290459042,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658458901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Additive.20characters/near/290429680\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/15499#pullrequestreview-1046919329\">said in a comment on #15499</a>:</p>\n<blockquote>\n<p>For me this PR raises an interesting question. My impression is that the community are not keen on adding the structure of maps f:A -&gt; G such that f(a+b)=f(a)*f(b), because then we have to make an API for it, and how it composes with additive maps on one side and multiplicative maps on the other side, and then there are maps G -&gt; A and etc etc. Another proposal is to define add_char so that it contains an application of of_add : R -&gt; multiplicative R and then just write add_char.map_add : \\psi (a + b) = \\psi a * \\psi b and a bit more API for it.</p>\n<p>My position on this has come from a huge struggle I had in the past using with_top because it would often leak to option, and if you were working with with_top and with_bot then you didn't know whether none was bot or top. Being principled with types in statements of results goes a long way towards stopping this kind of leakage.</p>\n</blockquote>\n<p>To add to Kevin 's comment above, I find it quite painful to have to use <code>multiplicative R →* R'</code> instead of something like, say, <code>R +→* R'</code> and having to convert between <code>R</code> and <code>multiplicative R</code> via <code>of_add</code> and <code>to_add</code>. (And as one can see from Kevin's comments on the PR, I didn't manage to do it completely right...). If homomorphisms between additive and multiplicative structures also occur in some other places, it may be worth the effort of having dedicated type classes and API for them. Maybe there is a way of auto-generate them, something like a \"left\" or \"right\" version of to_additive?</p>\n</blockquote>\n<p>I am all for having some kind of <code>+→*</code>. From my experience this occurs in quite a few places I care about: additive valuations, Kummer theory, complete 2-descent, Galois cohomology, etc. It was incredibly annoying for me as well, especially when trying to do a <code>quotient_group.map</code> of homomorphisms from + to * to define things like Selmer groups.</p>",
        "id": 290483564,
        "sender_full_name": "David Ang",
        "timestamp": 1658482054
    },
    {
        "content": "<p>There is a discussion of this in the \"map from mult gp to add gp\" topic in the general stream.</p>",
        "id": 290483730,
        "sender_full_name": "David Ang",
        "timestamp": 1658482178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464700\">David Ang</span> <a href=\"#narrow/stream/116395-maths/topic/Additive.20characters/near/290483730\">said</a>:</p>\n<blockquote>\n<p>There is a discussion of this in the \"map from mult gp to add gp\" topic in the general stream.</p>\n</blockquote>\n<p>Here is a <a href=\"#narrow/stream/113488-general/topic/map.20from.20mult.20gp.20to.20add.20gp/near/271703529\">link</a> to the other topic.</p>",
        "id": 290497376,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658491823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239459\">@riccardo lasagno</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> The discussion in the other topic notwithstanding, I would like to get the additive characters stuff (<a href=\"https://github.com/leanprover-community/mathlib/pull/15499\">#15499</a>) into mathlib. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has looked through it and I think he is OK with it (after the changes I made that he had suggested). When homomorphisms from additive monoids to (multiplicative) monoids are availble, I'll happily adapt the code; it should then be less cumbersome and easier to read and understand. But short-term, I'd like to be able to define Gauss sums (albeit in an ugly way) and prove stuff about them (this would likely be my next PR).</p>",
        "id": 290523681,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658502851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> I'm interested in knowing whether you would still prefer to have <code>+-&gt;*</code>.</p>",
        "id": 290529044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658505063
    },
    {
        "content": "<p>Because your <code>add_char</code> is exactly that.</p>",
        "id": 290529053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658505072
    },
    {
        "content": "<p>If you define it for <code>add_monoid</code> and <code>monoid</code> instead of for two rings, then you have your definition.</p>",
        "id": 290529094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658505096
    },
    {
        "content": "<p>Yes, of course. But what I then do in the file is mostly geared towards the intended use with Gauss sums.</p>",
        "id": 290529245,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658505152
    },
    {
        "content": "<p>I.e., I wouldn't want to (have to) provide the complete API for general homomorphisms from additive monoids to monoids. But when this eventually exists somewhere, I would very much like to use it. However, my impression is that this may take some time, so I'd prefer to proceed for now with what is there (i.e., <code>multiplicative R</code> and friends).</p>",
        "id": 290529569,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658505286
    },
    {
        "content": "<p>Ok. I still think that it is good to make the definition with the weakest assumptions possible, even if you then restrict to <code>comm_ring</code>s directly afterwards.</p>",
        "id": 290531091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658505881
    },
    {
        "content": "<p>I've changed the definition so that the domain only needs to be an <code>add_monoid</code> and the target, a <code>monoid</code>. I've also removed the definition of <code>trivial</code> and replaced the occurrences by <code>(1 : add_char R R')</code>. And I changed the lemma names as suggested.</p>",
        "id": 290548867,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658513953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> If you have time, could you push it to the merge queue? (Unless there is something else that should be changed.)</p>",
        "id": 290603774,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1658568028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, we're using <code>add_char</code> for <a href=\"https://yaeldillies.github.io/LeanAPAP/\">LeanAPAP</a> and we need to talk about the double dual embedding (eg <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/src/mathlib/number_theory/legendre_symbol/add_char/duality.lean#L183-L210\">here</a>).</p>",
        "id": 378826757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690382126
    },
    {
        "content": "<p>Currently, our definition of the double dual embedding is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">double_dual_emb</span> <span class=\"o\">:</span> <span class=\"n\">add_char</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">add_char</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"bp\">$</span> <span class=\"n\">add_char</span> <span class=\"n\">G</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">monoid_hom.eval</span>\n</code></pre></div>\n<p>and we're pretty annoyed about the fact that we need this <code>additive</code> because the operation on <code>add_char</code> is multiplication.</p>",
        "id": 378827048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690382170
    },
    {
        "content": "<p>In fact, this is a general problem in our project, because we're doing <em>additive</em> combinatorics, not multiplicative combinatorics, and the fact that <code>add_char</code> is a multiplicative group forces us to go through weird hoops to use our definitions.</p>",
        "id": 378827772,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690382308
    },
    {
        "content": "<p>What do you think of changing the operation from <code>*</code> to <code>+</code>?</p>",
        "id": 378827892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690382327
    },
    {
        "content": "<p>I'm against that, since in all number theoretic applications, additive characters are homomorphisms from an additive to a multiplicative group. In particular, everywhere in the (NT) literature, additive characters on a given domain are considered as a multiplicative group.</p>\n<p>How bad is it to set up an API that does the translation into a form that is suitable for you?</p>\n<p>I had to fight fairly hard to find a way to set it up so that it is not too painful to use in the context we need in number theory (i.e., so that one does not have to do the additive/multiplicative conversion by hand every time)...</p>",
        "id": 378832092,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1690383059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Additive.20characters/near/378832092\">said</a>:</p>\n<blockquote>\n<p>in all number theoretic applications, additive characters are homomorphisms from an additive to a multiplicative group. In particular, everywhere in the (NT) literature, additive characters on a given domain are considered as a multiplicative group.</p>\n</blockquote>\n<p>How does the second sentence follow from the first? There's several design decisions at play here: the operation on the domain, the operation on the codomain, and the operation on the characters.</p>",
        "id": 378833154,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690383246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Additive.20characters/near/378832092\">said</a>:</p>\n<blockquote>\n<p>I had to fight fairly hard to find a way to set it up so that it is not too painful to use in the context we need in number theory (i.e., so that one does not have to do the additive/multiplicative conversion by hand every time)...</p>\n</blockquote>\n<p>Doing additive combinatorics, I'm currently at this stage of converting everywhere...</p>",
        "id": 378833386,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690383286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> would it work for LeanAPAP to use <code>add_monoid_hom</code> and convert the codomain <code>R</code> into an additive gadget with <code>additive</code>?</p>",
        "id": 378836494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690383797
    },
    {
        "content": "<p>No, because we're talking about complex-valued characters and we need to add the values.</p>",
        "id": 378836805,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690383844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Additive.20characters/near/378833154\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Additive.20characters/near/378832092\">said</a>:</p>\n<blockquote>\n<p>in all number theoretic applications, additive characters are homomorphisms from an additive to a multiplicative group. In particular, everywhere in the (NT) literature, additive characters on a given domain are considered as a multiplicative group.</p>\n</blockquote>\n<p>How does the second sentence follow from the first? There's several design decisions at play here: the operation on the domain, the operation on the codomain, and the operation on the characters.</p>\n</blockquote>\n<p>Well, usually the group structure on maps is defined via the group structure on the target, which is multiplicative here.</p>",
        "id": 378837475,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1690383930
    },
    {
        "content": "<p>That I understand, but the fact that characters are maps is an implementation issue, at least in additive combinatorics.</p>",
        "id": 378838196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690384003
    },
    {
        "content": "<p>What's important is that characters act on the original group.</p>",
        "id": 378839598,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690384148
    },
    {
        "content": "<p>Do they, in mathlib?</p>",
        "id": 378845640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690384914
    },
    {
        "content": "<p>In the number theory context, an additive character is a group homomorphism from the additive group of a (finite) field or ring into the multiplicative group of a field (or maybe ring). <code>add_char</code> is basically a wrapper around homomorphisms plus switching additive and multiplicative structures. The latter was the main point of the exercise; otherwise something like <code>add_group_hom</code> would just do.</p>",
        "id": 378848629,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1690385401
    },
    {
        "content": "<p>What do you mean by \"acting\" on the original (= source?) group?</p>",
        "id": 378848910,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1690385441
    },
    {
        "content": "<p>Michael, your message explains why <code>add_char G R</code> is defined as <code>multiplicative G →* R</code> (or <code>G →+ additive R</code>), but it doesn't explain why the group operation on <code>add_char G R</code> is multiplication.</p>",
        "id": 378866165,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690388406
    },
    {
        "content": "<p>Can you link to the operation you mean, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>?</p>",
        "id": 378866344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690388438
    },
    {
        "content": "<p>I'm talking about <code>comm_monoid (add_char G R)</code> from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_char.comm_monoid\">docs3#add_char.comm_monoid</a>. I'm arguing for turning that into <code>add_comm_monoid (add_char G R)</code>.</p>",
        "id": 378866668,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690388501
    },
    {
        "content": "<p>So far, the only argument that Michael has advanced for the current instance is that it means we have <code>(ψ * χ) x = ψ x * χ x</code>. WIth my instance, it would be <code>(ψ + χ) x = ψ x * χ x</code>. To me, that's a much better option than all the pain I'm currently going through.</p>",
        "id": 378868765,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690388867
    },
    {
        "content": "<p>In fact, we could have both instances simultaneously and I would be happy with that even if that's possibly not very elegant.</p>",
        "id": 378868939,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690388898
    },
    {
        "content": "<p>I'm fine with having both instances.<br>\n(I find <code>(ψ * χ) x = ψ x * χ x</code> much more natural than <code>(ψ + χ) x = ψ x * χ x</code>, but my main point is that this is what people in number theory are used to; I think mathlib should try to be as close notation-wise as possible to what mathematicians actually use.)</p>",
        "id": 378870289,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1690389131
    },
    {
        "content": "<p>With no other context, the <code>(ψ * χ) x = ψ x * χ x</code> we currently have seems much more natural (and consistent with the rest of mathlib) to me.</p>",
        "id": 378872067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690389421
    },
    {
        "content": "<p>Eric, try defining the double dual embedding and come back to me <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 378874277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690389830
    },
    {
        "content": "<p>And we can play this game the other way around, actually. Currently we have <code>ψ⁻¹ x = ψ (-x)</code>. With my instance, this becomes <code>(-ψ) x = ψ (-x)</code>.</p>",
        "id": 378875127,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690389983
    },
    {
        "content": "<p>Did you mean <code>ψ⁻¹ x = (ψ x)⁻¹</code>? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 378890971,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1690393096
    },
    {
        "content": "<p>Mathlib is pretty consistent that operations on fun_like objects commute with coercion. What you're proposing <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> would violate that, and AFAIK is the only such case</p>",
        "id": 378899832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690395022
    },
    {
        "content": "<p>I agree it's pretty rare but I don't believe it would be the only such case. At any rate, I'm happy to break this rule (is it any important?) if it means I can use <code>add_char (add_char G complex) complex</code> for the double dual instead of <code>additive (add_char (additive $ add_char G complex) complex)</code>.</p>",
        "id": 378947040,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690405871
    },
    {
        "content": "<p>Is <code>additive (add_char (additive $ add_char G complex) complex)</code> the same as<br>\n<code>additive (add_char G complex →* complex)</code>?</p>",
        "id": 378949993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690406901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, indeed there's at least another case where function coercion doesn't commute with an algebraic operation on a <code>fun_like</code> type: multiplication on <code>monoid.End</code> is given by composition, namely (f * g) a = f (g a)`.</p>",
        "id": 379008315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690435491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Additive.20characters/near/378949993\">said</a>:</p>\n<blockquote>\n<p>Is <code>additive (add_char (additive $ add_char G complex) complex)</code> the same as<br>\n<code>additive (add_char G complex →* complex)</code>?</p>\n</blockquote>\n<p>Yes it is, but if the codomain of your double dual embedding is this, then <code>double_dual_emb</code> is not an <code>add_char</code>! You would need to peel off the <code>additive</code> and also turn the inner <code>-&gt;*</code> into an <code>add_char</code> every time you want to use it as a character.</p>",
        "id": 379009472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690435877
    },
    {
        "content": "<p>I have just tried endowing <code>add_char</code> with an <code>add_comm_monoid</code>/<code>add_comm_group</code> instance in LeanAPAP, and everything became suddenly much easier. No more mentions of <code>additive</code>, less mentions of <code>multiplicative</code>, and I don't have to keep both an additive and multiplicative version of the definitions that are internal to the proof anymore.</p>",
        "id": 379010033,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690436046
    }
]