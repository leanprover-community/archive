[
    {
        "content": "<p>Am I correct that we don't have any type class of the following form? The purpose of such a type class would be that for an instance of such a class we could define the function <code>half</code>. Of course, the multiplicativized version of this would give us a generic <code>sqrt</code> function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">EvenType</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">isEven</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Even</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">half</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">EvenType</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choose</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">EvenType.isEven</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">half_add_half</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">EvenType</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">half</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">half</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">EvenType.isEven</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Why I'm thinking about it: currently, we only have a multiplication on <code>selfAdjoint R</code> when <code>R</code> is a <em>commutative</em> star ring. But <code>selfAdjoint R</code> has a natural non-associative multiplication given by <code>x y ‚Ü¶ (x * y + y * x)/2</code> which makes it into a JB-algebra (with appropriate extra structure on <code>R</code>). However, we currently can't really define this multiplication by itself because of the <code>/ 2</code>. Of course, one could take an <code>[Module ‚Ñö R]</code> argument and use <code>(1 / 2) ‚Ä¢ (x * y + y * x)</code>, but (a) gross and (b) you'll rarely have a <code>[Module ‚Ñö R]</code> assumption in practice, and you wouldn't get it from things like <code>[Module ‚Ñù R]</code> (nor should you). Possibly we could just use <code>[Module ‚Ñù R]</code>, but that seems awfully overly specific.</p>\n<p>Another option would be to <em>only</em> define a <code>Mul</code>on <code>selfAdjoint R</code> by bundling it into an <code>Algebra ùïú (selfAdjoint R)</code> instance when <code>ùïú</code> is a field with trivial star. But this faces it's own major problems: two <code>Algebra ùïú (selfAdjoint R)</code>  and <code>Algebra ùïú' (selfAdjoint R)</code> instances now give you non-defeq <code>Mul</code> instances on <code>selfAdjoint R</code>. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> </p>\n<p>I really have no idea how to do this properly. The <code>EvenType</code> idea even suffers from its own problems: any instance of the form <code>instance [Field ùïú] [Module ùïú (selfAdjoint R)] : EvenType (selfAdjoint R)</code> is going to be bad because there will be no reasonable synthesization order. So how would we even arrive at <code>EvenType (selfAdjoint R)</code> instances unless we only used specific fields (like <code>‚Ñù</code>, <code>‚Ñö</code>, <code>‚ÑÇ</code>) for <code>ùïú</code>?</p>",
        "id": 377389266,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689963069
    },
    {
        "content": "<p>There's also the option to use <code>[Invertible (2 : R)]</code>.</p>",
        "id": 377391044,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1689963554
    },
    {
        "content": "<p>That only works if <code>R</code> is unital <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 377392529,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689963935
    },
    {
        "content": "<p>Oh. Indeed.</p>",
        "id": 377399833,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1689965608
    },
    {
        "content": "<p>Do we have <a href=\"https://en.wikipedia.org/wiki/Divisible_group\">divisible groups</a> anywhere? It's overkill as an assumption if you just want to divide by 2, but for that there's also the notion of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-divisible group.</p>",
        "id": 377401641,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689966045
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DivisibleBy#doc\">docs#DivisibleBy</a></p>",
        "id": 377402220,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689966179
    },
    {
        "content": "<p>Don't we already have that multiplication you're talking about? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SymAlg#doc\">docs#SymAlg</a></p>",
        "id": 377421737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689971613
    },
    {
        "content": "<p>There we use <code>Invertible 2</code>, but I guess both assume unitality.</p>",
        "id": 377422133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689971740
    },
    {
        "content": "<p>If you introduce a <code>Module ‚Ñ§[1/2] Œ±</code> assumption, I do not think that this will require a unit in <code>Œ±</code>.</p>\n<p>It is also likely stronger than the instance you proposed, since halves are now constructed, rather than chosen.</p>\n<p>Also, fields of characteristic two would likely not be \"even types\" regardless of the definition of \"even type\"!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 377449672,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689982747
    },
    {
        "content": "<p>Eric, <code>SymAlg</code> is for when you <em>already</em> have a multiplication, and you want the new one. We don't have any generic <code>Mul</code> instance on <code>selfAdjoint R</code></p>",
        "id": 377450128,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689983054
    },
    {
        "content": "<p><code>DivisibleBy (Submonoid.powers (2 : Nat)) M</code> is another option.</p>",
        "id": 377453361,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689984819
    }
]