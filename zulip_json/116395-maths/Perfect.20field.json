[
    {
        "content": "<p>Currently this is my definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- A perfect field is a field of characteristic p that has p-th root. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">perfect_field</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pth_root</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">frobenius_pth_root</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">frobenius</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">pth_root</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135957480,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539764793
    },
    {
        "content": "<p>Do you guys have a better suggestion?</p>",
        "id": 135957484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539764797
    },
    {
        "content": "<p>My idea is that we can change the definition once we have enough theory about separable polynomials.</p>",
        "id": 135957489,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539764821
    },
    {
        "content": "<p>And go with this definition for now.</p>",
        "id": 135957495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539764827
    },
    {
        "content": "<p>use <code>discrete_field</code></p>",
        "id": 135990765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539800168
    },
    {
        "content": "<p><code>field</code> is deprecated</p>",
        "id": 135990773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539800177
    },
    {
        "content": "<p>Sorry for bumping this thread, but I have two concerns:<br>\n(1) recently the <code>perfect_field</code> is removed from mathlib in favor of <code>perfect_ring</code> (in <code>field_theory.perfect_closure</code>). <br>\n(2) the current definition of <code>perfect_ring</code> (as well as the previous <code>perfect_field</code>) require that the characteristic is a prime and must be given in the definition.<br>\nThis makes the following assertion tedious to write: \"if the field K is of characteristic 2, moreover require that K is perfect\". <code>char_p K 2 → @perfect_field K _ 2 (by norm_num) (by assumption)</code></p>",
        "id": 220954160,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608968189
    },
    {
        "content": "<p>And I think perfect field is not necessarily of characteristic p, and the correct definitions are the following three equivalent definitions:</p>\n<ul>\n<li>K is of characteristic zero, or K is of characteristic p and the Frobenius map is surjective (equivalent to isomorphism).</li>\n<li>Any irreducible polynomial f over K has no multiple roots, equivalently, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><msup><mi>f</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\"> (f,f')=1 </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>Any finite algebraic extension of K is separable.</li>\n</ul>\n<p>Do we have codes for them?</p>",
        "id": 220954413,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608968808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> I agree with you.</p>",
        "id": 220954556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608969153
    },
    {
        "content": "<p>By now we have separable polynomials and separable extensions. So it makes sense to go with the second/third option.</p>",
        "id": 220954558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608969177
    },
    {
        "content": "<p>I think by now mathlib even has the equivalence of points 2 and 3.</p>",
        "id": 220954569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608969225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> Would you agree that the current definition of <code>perfect_ring</code> should stay the way it is? For general rings, I don't know of a definition that doesn't assume <code>char_p R p</code> from the start.</p>",
        "id": 220954719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608969567
    },
    {
        "content": "<p>(Aside: I just learned that there is conflicting terminology. Apparently <em>perfect ring</em> also means <a href=\"https://en.wikipedia.org/wiki/Perfect_ring\">https://en.wikipedia.org/wiki/Perfect_ring</a>)</p>",
        "id": 220954770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608969609
    },
    {
        "content": "<p>Maybe the thing in the wiki page can be <code>perfect_ring'</code> /s</p>",
        "id": 220956122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608972370
    },
    {
        "content": "<p>Yes, I think the definition of perfect ring should not be changed for now.</p>",
        "id": 220956825,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608973862
    },
    {
        "content": "<p>For my usage I just use the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nth_power_surjective</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_perfect_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_char</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">nth_power_surjective</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I write <code>ring_char K = 2 → my_perfect_field K</code>.</p>",
        "id": 220956940,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608974162
    },
    {
        "content": "<p>Sorry to bump this thread again. I tried to define <code>PerfecField</code> in lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.PerfectClosure</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PerfectField</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">separable</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f.Separable</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">PerfectField.ofCharZero</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharZero</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">PerfectField</span> <span class=\"n\">F</span> <span class=\"n\">where</span>\n  <span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">Irreducible.separable</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PerfectRing</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">separable_of_perfect_ring</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.Separable</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Polynomial.separable_or</span> <span class=\"n\">p</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exfalso</span>\n    <span class=\"k\">have</span> <span class=\"n\">hcomp</span> <span class=\"o\">:</span> <span class=\"n\">RingHom.comp</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pthRoot</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">RingHom.id</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n      <span class=\"n\">RingHom.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">RingHom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pthRoot</span><span class=\"o\">,</span> <span class=\"n\">RingHom.id_apply</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g.map</span> <span class=\"o\">(</span><span class=\"n\">pthRoot</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">expand_char</span> <span class=\"n\">p</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.map_expand</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_map</span><span class=\"o\">,</span> <span class=\"n\">hcomp</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_id</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Irreducible.not_unit</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IsUnit.pow</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">of_irreducible_pow</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime.ne_one</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Fact.out</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span><span class=\"o\">))</span> <span class=\"n\">hf</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">cannot find synthesization order for instance ofCharP with type</span>\n<span class=\"cm\">  ∀ (F : Type u) [inst : Field F] (p : ℕ) [hp : Fact (Nat.Prime p)] [inst_1 : CharP F p] [inst_2 : PerfectRing F p],</span>\n<span class=\"cm\">    PerfectField F</span>\n<span class=\"cm\">all remaining arguments have metavariables:</span>\n<span class=\"cm\">  Fact (Nat.Prime ?p)</span>\n<span class=\"cm\">  @CharP F AddGroupWithOne.toAddMonoidWithOne ?p</span>\n<span class=\"cm\">  @PerfectRing F Semifield.toCommSemiring ?p ?hp ?inst✝</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">PerfectField.ofCharP</span> <span class=\"o\">:</span> <span class=\"n\">PerfectField</span> <span class=\"n\">F</span> <span class=\"n\">where</span>\n  <span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">separable_of_perfect_ring</span> <span class=\"n\">F</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It basically works except for the last instance for char p. I got error which I don't understand.</p>",
        "id": 378053225,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690190702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Perfect.20field/near/220954770\">said</a>:</p>\n<blockquote>\n<p>(Aside: I just learned that there is conflicting terminology. Apparently <em>perfect ring</em> also means <a href=\"https://en.wikipedia.org/wiki/Perfect_ring\">https://en.wikipedia.org/wiki/Perfect_ring</a>)</p>\n</blockquote>\n<p>I check this again, it looks like things concerning on <strong>perfect complex</strong>.</p>",
        "id": 378054275,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690190919
    },
    {
        "content": "<p>So maybe it could be <code>protected class HomologicalAlgebra.PerfectRing</code>.</p>",
        "id": 378054648,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690190986
    },
    {
        "content": "<p>Using <code>class CharPOut (R) [Ring R] (p : outParam ℕ) extends CharP R p</code> instead of <code>CharP</code> works</p>",
        "id": 378060186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690191996
    },
    {
        "content": "<p>What's going on here is that Lean can't work out <code>p</code> for <code>CharP</code>; this is by design because Lean doesn't know if you want to find <code>p = 3</code> or <code>p = ringChar F</code>.</p>",
        "id": 378060452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690192041
    },
    {
        "content": "<p>By using <code>outParam</code>, you're saying \"I don't care what <code>p</code> is, just pick one\"</p>",
        "id": 378060613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690192072
    },
    {
        "content": "<p>That being said, I'm not sure if <code>CharPOut</code> is actually a <em>good idea</em>; it just happens to be a workaround to your issue</p>",
        "id": 378060858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690192115
    },
    {
        "content": "<p>Perfect complexes have nothing to do with perfect rings BTW. That's just the cool mathematician naming style, designed to confuse newcomers and keep them out of our patch.</p>",
        "id": 378100753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690198153
    },
    {
        "content": "<p>Perfect naming</p>",
        "id": 378115723,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690200804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Perfect.20field/near/378060452\">said</a>:</p>\n<blockquote>\n<p>What's going on here is that Lean can't work out <code>p</code> for <code>CharP</code>; this is by design because Lean doesn't know if you want to find <code>p = 3</code> or <code>p = ringChar F</code>.</p>\n</blockquote>\n<p>But why in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Perfection.html#Perfection.perfectRing\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Perfection.html#Perfection.perfectRing</a> the <code>p</code> can be worked out? I'm confused.</p>",
        "id": 378208750,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690216948
    },
    {
        "content": "<p>In that example the <code>p</code> appears on the right of the colon (or more importantly, in the final conclusion)</p>",
        "id": 378214663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690218186
    },
    {
        "content": "<p>Is our definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PerfectRing#doc\">docs#PerfectRing</a> correct?</p>\n<p>My understanding is that this should be a Prop-valued class and should not contain data.</p>",
        "id": 378516635,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690298565
    },
    {
        "content": "<p>I also think it should be prop valued.</p>",
        "id": 378520272,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690299125
    },
    {
        "content": "<p>I think this is wrong in more than one way. I can't write <code>PerfectRing \\Q</code> which is silly.</p>",
        "id": 378521057,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690299263
    },
    {
        "content": "<p>What even is a perfect ring? Probably we should stick to perfect fields? (:= all finite extensions are separable)</p>",
        "id": 378524693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690299925
    },
    {
        "content": "<p>Ugh, it's even worse than you think: <a href=\"https://en.wikipedia.org/wiki/Perfect_ring\">https://en.wikipedia.org/wiki/Perfect_ring</a></p>",
        "id": 378526951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690300357
    },
    {
        "content": "<p>But I think a \"perfect ring\" is perfectly ( <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> ) well defined by saying that all the residue fields are perfect fields.</p>",
        "id": 378527426,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690300443
    },
    {
        "content": "<p>at least that should work for reduced rings.</p>",
        "id": 378527542,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690300465
    },
    {
        "content": "<p>I don't know what the definition should be (or should be equivalent to) in the non-reduced case.</p>",
        "id": 378527646,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690300487
    },
    {
        "content": "<p>o_O we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSeparable#doc\">docs#IsSeparable</a> for ring extensions! So we could define perfect to mean that any integral extension is separable?</p>",
        "id": 378542642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690303473
    },
    {
        "content": "<p>what's the minimal polynomial over a ring that's not a field?</p>",
        "id": 378543025,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690303551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Perfect.20field/near/378527426\">said</a>:</p>\n<blockquote>\n<p>Ugh, it's even worse than you think: <a href=\"https://en.wikipedia.org/wiki/Perfect_ring\">https://en.wikipedia.org/wiki/Perfect_ring</a></p>\n</blockquote>\n<p>I checked that page again, found that there is a line of text barely noticeable:</p>\n<blockquote>\n<p>This article is about perfect rings as introduced by Hyman Bass. For perfect rings of characteristic p generalizing perfect fields, see <a href=\"https://en.wikipedia.org/wiki/Perfect_field\">https://en.wikipedia.org/wiki/Perfect_field</a>.</p>\n</blockquote>\n<p>So I think such perfect ring should be <code>BassRing</code> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>\n<blockquote>\n<p>But I think a \"perfect ring\" is perfectly ( <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> ) well defined by saying that all the residue fields are perfect fields.</p>\n</blockquote>\n<p>Oops, then <code>Z</code> is also a prefect ring? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 378543046,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690303556
    },
    {
        "content": "<p>Should <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> not be perfect?</p>",
        "id": 378543231,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690303589
    },
    {
        "content": "<p>Yes, the Wikipedia page for perfect ring is about a completely different concept (typically used in the non-commutative case).</p>",
        "id": 378543253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690303595
    },
    {
        "content": "<p>The Wikipedia page for perfect fields says</p>\n<p>\"More generally, a ring of characteristic p (p a prime) is called perfect if the Frobenius endomorphism is an automorphism.[1] (When restricted to integral domains, this is equivalent to the above condition \"every element of k is a pth power\".)\"</p>\n<p>so if that is used in the literature it should probably be the mathlib definition. Note that the page for fields says \"see also\" and links (incorrectly, in my opinion) to the page for rings.</p>",
        "id": 378543757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690303696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Kenny Lau was going through a huge constructivist phase in 2018, this is probably what's behind it all.</p>",
        "id": 378544113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690303763
    },
    {
        "content": "<p>Ok, maybe there isn't a good definition for arbitrary rings. I think the thing I said about residue fields is probably not the best def (e.g. maybe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> shouldn't be considered as perfect? E.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> is not perfect<em>oid</em>).</p>",
        "id": 378544959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690303933
    },
    {
        "content": "<p>What's wrong with the data-carrying version?</p>",
        "id": 378553796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690305764
    },
    {
        "content": "<p>For fields of characteristic p, if something has a pth root then the pth root is unique. For general rings of characteristic p this isn't true (e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Z/p\\Z[X]/(X^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> has both the solutions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>p</mi></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x^p=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>) so there's more than one <code>PerfectRing</code> structure on a given ring, which is mathematically not correct.</p>",
        "id": 378564866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690308378
    },
    {
        "content": "<p>Wait, but in that case <code>Frobenius</code> is not an automorphism...</p>",
        "id": 378568325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690309179
    },
    {
        "content": "<p>Oh you're right: the current mathlib definition implies this, so my example is no good. So in fact this is a subsingleton. </p>\n<p>BTW I only just noticed that if you scroll up to the top of this thread you see Kenny's discussion with Mario about this; the issue was that he wanted perfect fields but we didn't have separable extensions yet.</p>",
        "id": 378570155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690309592
    },
    {
        "content": "<p>But, if I understand correctly, it is still an open (mathlib) question how to unify the definition of perfect ring in char p with the definition of perfect field in char 0...</p>",
        "id": 378571442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690309908
    },
    {
        "content": "<p>Our definition is <code>PerfectRing R p</code> and typeclass inference has to find <code>CharP R p</code>. In particular right now we have to supply p. Is that what we want?</p>",
        "id": 378577580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690311318
    },
    {
        "content": "<p>We could have a variant of the typeclass that bundles p</p>",
        "id": 378593826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690315802
    },
    {
        "content": "<p>For when you need the ring to be perfect but your statement doesn't mention <code>p</code></p>",
        "id": 378593920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690315824
    },
    {
        "content": "<p>The definition in Wikipedia for fields doesn't have a p because all fields of characteristic zero are perfect; currently we can't say this (although we can say that all finite extensions are separable). I think that Kenny's definition shouldn't be taken too seriously. Around that time he got very interested in constructivism and so he's just given a constructive definition, it's finset v finite all over again, but the combinatorics people seem to appreciate constructive finsets; I don't think anyone appreciates constructive perfect fields (and if you want to invert pth power in a situation where it's constructive you can just do it yourself)</p>",
        "id": 378601473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690318190
    },
    {
        "content": "<p>I use <code>PerfectField R p</code> instead of <code>PerfectField R</code> as a workaround, similar to <code>CharP R p</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.PerfectClosure</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> ad-hoc workaround: `PerfectField R p` means `R` is of characteristic `p` and any irreducible</span>\n<span class=\"cm\">polynomial on `R` is separable (i.e. coprime with its derivative)</span>\n<span class=\"cm\">FIXME: currently the `p` need to be provided in the type class -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">PerfectField</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">separable</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f.Separable</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">PerfectField.ofCharZero</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharZero</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">PerfectField</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">Irreducible.separable</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PerfectRing</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">separable_of_perfect_ring</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.Separable</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Polynomial.separable_or</span> <span class=\"n\">p</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exfalso</span>\n    <span class=\"k\">have</span> <span class=\"n\">hcomp</span> <span class=\"o\">:</span> <span class=\"n\">RingHom.comp</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pthRoot</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">RingHom.id</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n      <span class=\"n\">RingHom.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">RingHom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">frobenius_pthRoot</span><span class=\"o\">,</span> <span class=\"n\">RingHom.id_apply</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g.map</span> <span class=\"o\">(</span><span class=\"n\">pthRoot</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">expand_char</span> <span class=\"n\">p</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.map_expand</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_map</span><span class=\"o\">,</span> <span class=\"n\">hcomp</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_id</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Irreducible.not_unit</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IsUnit.pow</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">of_irreducible_pow</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime.ne_one</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Fact.out</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span><span class=\"o\">))</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">PerfectField.ofCharP</span> <span class=\"o\">:</span> <span class=\"n\">PerfectField</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">separable</span> <span class=\"o\">:=</span> <span class=\"n\">separable_of_perfect_ring</span> <span class=\"n\">F</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 378628005,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690329669
    },
    {
        "content": "<p>Is the following an accurate summary of this thread:</p>\n<ol>\n<li>We currently have no way to state that a field of characteristic zero is perfect?</li>\n<li>We currently can only state that a field is perfect if we already know its characteristic?</li>\n<li>We are not sure if the concept of being perfect should extend from fields to rings. In particular we're not even sure if <code>ℤ</code> should be perfect, to say nothing of non-reduced rings.</li>\n<li>There is a totally <a href=\"https://en.wikipedia.org/wiki/Perfect_ring\">distinct concept</a> which already owns the terminology \"Perfect Ring\".</li>\n<li>We should have a <code>Prop</code>-valued typeclass to state that a field is perfect (with no assumptions on characteristic).</li>\n<li>The following is a correct definition which could replace <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PerfectRing#doc\">docs#PerfectRing</a></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsPerfectField</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">separable_of_irreducible</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">K</span><span class=\"o\">},</span> <span class=\"n\">Irreducible</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">f.Separable</span>\n</code></pre></div>",
        "id": 378755971,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690369532
    },
    {
        "content": "<p>One last comment: I have just pulled Serre's \"Local Fields\" off my bookshelf and on page 35 he says:</p>\n<blockquote>\n<p>We will say that a ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span> of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> is <em>perfect</em> if the endomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x \\mapsto x^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> is an <em>automorphism</em> (i.e., is surjective). Every element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">x \\in \\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span> then hsa a unique <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> th root, denoted <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><msup><mi>p</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></msup></mrow><annotation encoding=\"application/x-tex\">x^{p^{-1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9869em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>. When <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span> is a field, this is the usual definition of a perfect field.</p>\n</blockquote>",
        "id": 378756601,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690369647
    },
    {
        "content": "<p>So then we have two definitions of perfect ring in the literature :-/</p>",
        "id": 378761374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690370545
    },
    {
        "content": "<p>BTW I've noticed before on Zulip that $$p$$th doesn't render as LaTeX because of no space after the closing dollars. You have to write <code>$$p$$ th</code> (which makes a little space after the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>)</p>",
        "id": 378761545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690370588
    },
    {
        "content": "<p>Does <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>\\ th work to eliminate the space? (edit: no)</p>",
        "id": 378763727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690371024
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th works, I believe</p>",
        "id": 378765039,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690371297
    },
    {
        "content": "<p>I think it would be good to cover Serre's definition of perfect ring (i.e., not restrict to just fields) because this shows up in p-adic geometry/cohomology kind of stuff. E.g. I think prisms need perfect rings, not just fields.</p>",
        "id": 378769428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690372100
    },
    {
        "content": "<p>I guess we could always ask some expert if there is a characteristic-zero generalisation of Serre's perfect rings. Failing that, how about we switch to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A perfect field.</span>\n\n<span class=\"sd\">See also `IsPerfectRing` for a generalisation in positive characteristic. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">PerfectField</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">separable_of_irreducible</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">K</span><span class=\"o\">},</span> <span class=\"n\">Irreducible</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">f.Separable</span>\n\n<span class=\"sd\">/-- A perfect ring in the sense of Serre.</span>\n\n<span class=\"sd\">NB: This is not related to the concept with the same name introduced by Bass (related to projective</span>\n<span class=\"sd\">covers of modules). -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">PerfectRing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">bijective_frobenius</span> <span class=\"o\">:</span> <span class=\"n\">Bijective</span> <span class=\"bp\">$</span> <span class=\"n\">frobenius</span> <span class=\"n\">R</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">PerfectField.perfectRing</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PerfectField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">PerfectRing</span> <span class=\"n\">K</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378798339,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690377509
    },
    {
        "content": "<p>Serre’s definition only really makes sense when the characteristic of the ring is prime</p>",
        "id": 378818669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690380810
    },
    {
        "content": "<blockquote>\n<p>how about we switch to the following:</p>\n</blockquote>\n<p>Looks good to me. The only problem is that currently we cannot make an instance of <code>PerfectRing -&gt; PerfectField</code> (unless we remove the requirement <code>p</code> from <code>PerfectRing</code>); we can only make a <code>lemma</code> and asks the user to call it manually everytime they need to use it.</p>",
        "id": 378827868,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690382324
    },
    {
        "content": "<p>Right, you're saying this lemma cannot be an instance because <code>p</code> underdetermined.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">PerfectRing.toPerfectField</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PerfectRing</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">PerfectField</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I agree. We could of course solve this by instead making the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PerfectRing'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_bijective_frobenius</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">Bijective</span> <span class=\"bp\">$</span> <span class=\"n\">frobenius</span> <span class=\"n\">R</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>but I think the same problem will arise elsewhere. Indeed since <code>PerfectRing'</code> is a prime characteristic phenomenon, users will need to use the fact that a ring satisfying <code>PerfectRing' R</code> has prime characteristic in their proofs, and to do so we'll have to write lemmas which cannot be instances for the same reason: <code>p</code> will be underdetermined.</p>",
        "id": 378864462,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690388108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Perfect.20field/near/378818669\">said</a>:</p>\n<blockquote>\n<p>Serre’s definition only really makes sense when the characteristic of the ring is prime</p>\n</blockquote>\n<p>I did not read the whole conversation, so you may already know this: Serre's definition could make sense in characteristic zero if one uses the \"characteristic exponent\" instead of the usual characteristic. In this case, the Frobenius is the identity map and thus trivially a bijection. I am not sure if this definition is useful in general, though.</p>",
        "id": 378868940,
        "sender_full_name": "Niels Feld",
        "timestamp": 1690388898
    },
    {
        "content": "<p>That's a nice idea!</p>",
        "id": 378878167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690390536
    },
    {
        "content": "<p>Does this mean we think <code>ℤ</code> should be perfect after all? Adam had <a href=\"#narrow/stream/116395-maths/topic/Perfect.20field/near/378544959\">some doubts</a> ?</p>",
        "id": 378879943,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690390863
    },
    {
        "content": "<p>Oh wait -- we probably don't want all char 0 rings to be perfect, right?</p>",
        "id": 378884547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690391730
    },
    {
        "content": "<p>For example, should <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(\\mathbb{F}_p(t))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span></span></span></span> be considered as perfect? Probably not.</p>",
        "id": 378898979,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690394860
    },
    {
        "content": "<p>Anyway, this is a mathematical discussion, not really about formalization of existing concepts. I think Oliver's code above is the right approach right now.</p>",
        "id": 378899436,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690394950
    },
    {
        "content": "<p>I made some time to define / refactor perfect fields this afternoon and I now have a WIP PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6182\">#6182</a> I probably won't have time to return to this till tomorrow afternoon so if someone wants to take it further while I'm busy with other things, that would be great!</p>",
        "id": 379201257,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690470938
    },
    {
        "content": "<p>I have some code <a href=\"https://github.com/acmepjz/my-lean-test/blob/fd1bb144adc9ccd23794a867a2dd2cf57648b089/myhelper/separable_closed.lean#L40\">https://github.com/acmepjz/my-lean-test/blob/fd1bb144adc9ccd23794a867a2dd2cf57648b089/myhelper/separable_closed.lean#L40</a> which should be relevant to your half-finished <code>PerfectField.toPerfectRing</code>.</p>",
        "id": 379229176,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690475469
    },
    {
        "content": "<p>Oh by the way, are there separable closed field and separable closure available in mathlib4?</p>",
        "id": 379233262,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690476213
    },
    {
        "content": "<p>I don't think that they are. They would be a very welcome addition! For separable closure a simple approach would be to define it as a subfield of the algebraic closure.</p>",
        "id": 379262332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690482017
    },
    {
        "content": "<p>The PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6182\">#6182</a> with the new definitions is now ready for review.</p>",
        "id": 380130798,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690750145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Perfect.20field/near/379262332\">said</a>:</p>\n<blockquote>\n<p>I don't think that they are. They would be a very welcome addition! For separable closure a simple approach would be to define it as a subfield of the algebraic closure.</p>\n</blockquote>\n<p>I have just made a work-in-progress at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6285\">https://github.com/leanprover-community/mathlib4/pull/6285</a></p>",
        "id": 380666896,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690890498
    },
    {
        "content": "<p>Currently it is mostly a copy-and-paste of <code>IsAlgClosed</code>, though.</p>",
        "id": 380667160,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690890545
    },
    {
        "content": "<p>I've left a review.</p>",
        "id": 380817366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690918179
    },
    {
        "content": "<p>Currently in the file <code>Mathlib/FieldTheory/IsAlgClosed/Basic.lean</code> there is a namespace <code>lift</code> (line 196) defined globally. I think maybe it's better to move this namespace inside <code>IsAlgClosed</code> since this is used to prove <code>IsAlgClosed.lift</code>? I assume that there will be other namespace <code>lift</code> in a lot of irrelevant files. Do you think it's a good idea?</p>",
        "id": 385896552,
        "sender_full_name": "Jz Pan",
        "timestamp": 1692359707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Perfect.20field/near/378571442\">said</a>:</p>\n<blockquote>\n<p>But, if I understand correctly, it is still an open (mathlib) question how to unify the definition of perfect ring in char p with the definition of perfect field in char 0...</p>\n</blockquote>\n<p>P.S. for me perfect fields are very intimately related to separable field extensions. So if there  is a definition of a commutative ring R being perfect that would work nicely regardless of the characteristic and in larger generality, then we would first make sure that we have the right definition of separability of R algebras. For me it is a priori not clear wether the definition <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSeparable#doc\">docs#IsSeparable</a> we have now in lean is equivalent to the notion that is quite standard in the literature: <a href=\"https://projecteuclid.org/journals/osaka-journal-of-mathematics/volume-4/issue-2/On-separable-algebras-over-a-commutative-ring/ojm/1200691953.full\">https://projecteuclid.org/journals/osaka-journal-of-mathematics/volume-4/issue-2/On-separable-algebras-over-a-commutative-ring/ojm/1200691953.full</a> .<br>\nI.e. one could try to take as definition of a commutative ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> being  perfect that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is reduced and for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> algebra's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> one has that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is reduced implies that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is a separable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> algebra.</p>",
        "id": 386016406,
        "sender_full_name": "Maarten Derickx",
        "timestamp": 1692406696
    },
    {
        "content": "<p>I also wouldn't be surprised that there are different notions of being perfect that will be the correct one depending on the context. For example if one cares more about embedding your ring into a perfect ring (perfect closure) or cares more about having having map from a perfect ring to your ring (perfection).</p>",
        "id": 386018008,
        "sender_full_name": "Maarten Derickx",
        "timestamp": 1692407211
    },
    {
        "content": "<p>ps. I am fairly certain that we have the wrong definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSeparable#doc\">docs#IsSeparable</a>  for greater generality. The current definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsSeparable</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">isIntegral'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n  <span class=\"n\">separable'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Separable</span>\n</code></pre></div>\n<p>However if $F$ is not a domain (which is allowed by the generality of the defintion) then <code>minpoly F x~</code> is not unique and <code>(minpoly F x).Separable</code> actually depends on the choice of minimal polynomial. Indeed let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mo>=</mo><mi mathvariant=\"double-struck\">Q</mi><mo>×</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">F := \\mathbb Q \\times \\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>:</mo><mo>=</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>37</mn></msqrt><mo stretchy=\"false\">)</mo><mo>×</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">K := \\mathbb Q(\\sqrt{37}) \\times \\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1572em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">37</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> then both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub><mo>:</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mo stretchy=\"false\">(</mo><mn>37</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_1 := x^2  - (37,0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">37</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>2</mn></msub><mo>:</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>x</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mn>37</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_2 := x^2 + (0,1)x - (37,0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">37</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> are minimal polynomials of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msqrt><mn>37</mn></msqrt><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\sqrt{37},0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">37</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, however <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is not separable while <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">f_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is separable.</p>\n<p>However, now I do not know what interpretation to attach to instances <code>class IsSeparable</code>. Does it mean that <br>\n1) There exists a minimal polynomial of f of x such that f is separable.<br>\n2) For all minimal polynomials f of x one has that f is separable?</p>",
        "id": 386153087,
        "sender_full_name": "Maarten Derickx",
        "timestamp": 1692487057
    },
    {
        "content": "<blockquote>\n<p>However, now I do not know what interpretation to attach to instances class IsSeparable. Does it mean that<br>\n1) There exists a minimal polynomial of f of x such that f is separable.<br>\n2) For all minimal polynomials f of x one has that f is separable?</p>\n</blockquote>\n<p>I think: if you have a <code>IsSeparable</code> as a hypothesis, you effectively can only use 1), while if you need to prove <code>IsSeparable</code>, you effectively must prove 2).</p>",
        "id": 386181627,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692504685
    },
    {
        "content": "<p>If you want a good and general definition,  I'd say it should guarantee that for a ring extension R to S, an element s of S  which is separable over R leads to a separable algebra R[s].<br>\nIt also needs to agree with the definition for field which encompasses transcendental extensions.</p>",
        "id": 386305230,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692594602
    },
    {
        "content": "<p>I would think it is sufficient to cover the case of field extensions (including transcendental ones). Otherwise, this is more an algebraic geometry matter: defining (formally) étale/mooth morphisms. (Anyway, before we have a good definition for the transcendental case, a quick patch could be to rename the current <code>IsSeparable</code> as  <code>IsAlgebraicSeparable</code>.)</p>",
        "id": 387564662,
        "sender_full_name": "Joël Riou",
        "timestamp": 1693175460
    },
    {
        "content": "<p>We have formal smoothness in mathlib, right?</p>",
        "id": 387661967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693226939
    },
    {
        "content": "<p>Yes, in <code>RingTheory.Etale</code>.</p>",
        "id": 387755157,
        "sender_full_name": "Joël Riou",
        "timestamp": 1693256106
    }
]