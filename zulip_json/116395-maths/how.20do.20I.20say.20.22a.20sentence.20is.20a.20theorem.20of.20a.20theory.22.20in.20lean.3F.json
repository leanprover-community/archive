[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/Formalizing.20St.2E.20Anselm's.20ontological.20argument/near/399021294\">said</a>:</p>\n<blockquote>\n<p>A user of a Korean-speaking philosophy discussion forum <a href=\"https://forum.owlofsogang.com/t/lean/3613/9\">said</a>, \"You didn't prove that <code>∃ (x : Being), isGod x ∧ inReality x</code> is not a theorem of a theory whose axioms are the premises of St. Anselm's argument (and the axioms of Lean's type theory).\"</p>\n</blockquote>\n<p>How can I construct a <a href=\"https://en.wikipedia.org/wiki/Theory_(mathematical_logic)\">theory</a> <code>T</code> and state that a proposition <code>φ</code> is not a theorem of <code>T</code> in Lean?</p>",
        "id": 399026223,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698481405
    },
    {
        "content": "<p>Of course, the first step is \"Learn proof theory and model theory.\"</p>",
        "id": 399027464,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698482421
    },
    {
        "content": "<p>In your case you just need to demonstrate that for some instantiation of your class the proposition is false. E.g. for <code>Anselm Nat</code> with <code>Conceivable := fun _ =&gt; True</code> there is provably no <code>x</code> such that <code>IsMax x Conceivable</code>.</p>",
        "id": 399042805,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1698493609
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span>. Here's <a href=\"https://git.sr.ht/~chabulhwi/lean-notes/tree/cb2a864e3631eb2d35f060252cb61b4a8e58b8e1/item/Notes/Anselm.lean#L69-93\">my attempt</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Anselm</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n  <span class=\"n\">conceivable</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">True</span>\n  <span class=\"n\">inUnderstanding</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">True</span>\n  <span class=\"n\">inReality</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"n\">lt_of_inUnderstanding_not_inReality_inReality</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"bp\">|</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">not_false</span><span class=\"o\">])</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n    <span class=\"k\">calc</span>\n      <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Int.negSucc_lt_zero</span> <span class=\"n\">n</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero_le_ofNat</span> <span class=\"n\">m</span>\n  <span class=\"n\">isMax_conceivable_inUnderstanding</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">exists_conceivable_and_inReality</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exists</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_exists_int_isGod</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">isGod</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hex</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hex</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">god</span><span class=\"o\">,</span> <span class=\"n\">_hcg</span><span class=\"o\">,</span> <span class=\"n\">hleg</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">god_lt_succ_god</span> <span class=\"o\">:</span> <span class=\"n\">god</span> <span class=\"bp\">&lt;</span> <span class=\"n\">god</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Int.lt_succ</span> <span class=\"n\">god</span>\n  <span class=\"k\">have</span> <span class=\"n\">succ_god_le_god</span> <span class=\"o\">:</span> <span class=\"n\">god</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">god</span> <span class=\"o\">:=</span> <span class=\"n\">hleg</span> <span class=\"o\">(</span><span class=\"n\">god</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">god_lt_succ_god</span> <span class=\"n\">succ_god_le_god</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 399070843,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1698515458
    }
]