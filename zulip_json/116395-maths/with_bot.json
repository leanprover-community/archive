[
    {
        "content": "<p>Hello, <br>\nI'm reading a little the theory of degree in <code>data.polynomial</code> and there is a strange object : <code> with_bot \\N</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Do you have an idea to deal with bot ?  For example !  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span>\n<span class=\"kn\">open</span> <span class=\"n\">with_bot</span>\n<span class=\"kn\">example</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196812378,
        "sender_full_name": "orlando",
        "timestamp": 1588876401
    },
    {
        "content": "<p>what is <code>bot+1</code> supposed to be in this statement?</p>",
        "id": 196813746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588876980
    },
    {
        "content": "<p>That's true as long as you are talking about nats, and nats embed in <code>with_bot nat</code></p>",
        "id": 196813805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588877016
    },
    {
        "content": "<p>Hello Mario, </p>\n<p>For me  <code>bot + 1 =  bot </code>  so i each case it ok !  <br>\nBut i don't understand who to deal in lean ?   Is there is a file where this arithmetic property are state ?</p>",
        "id": 196816320,
        "sender_full_name": "orlando",
        "timestamp": 1588878176
    },
    {
        "content": "<p>Just do cases on a and b?</p>",
        "id": 196816795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588878376
    },
    {
        "content": "<p>Yep i can cases ... but but but <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rcases</span>  <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n     <span class=\"n\">rw</span> <span class=\"n\">none_eq_bot</span>  <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">some_eq_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">rw</span>  <span class=\"n\">le_bot_iff</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n     <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">none_eq_bot</span>  <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">some_eq_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n     <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">some_eq_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n   <span class=\"n\">not</span> <span class=\"n\">finish</span>\n</code></pre></div>",
        "id": 196818498,
        "sender_full_name": "orlando",
        "timestamp": 1588879240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> Note that there is also <code>nat_degree</code>.</p>",
        "id": 196818556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588879274
    },
    {
        "content": "<p>They are the same, except for the zero polynomial</p>",
        "id": 196818568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588879284
    },
    {
        "content": "<p>Yep Johan, but a  try to use   the theorem   : in    <span class=\"tex-error\">$$ \\C $$</span> all polynomial of  <code>0 &lt; degree </code> have roots ... and i have   to deal i little with <code> degree</code>  <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 196818965,
        "sender_full_name": "orlando",
        "timestamp": 1588879468
    },
    {
        "content": "<p>I little better </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span>  <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">erw</span>  <span class=\"n\">le_bot_iff</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span>  <span class=\"n\">some_le_some</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">some_le_some</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196821297,
        "sender_full_name": "orlando",
        "timestamp": 1588880656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> There is a lemma <code>degree_eq_nat_degree</code>, which is probably useful</p>",
        "id": 196821301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588880658
    },
    {
        "content": "<p>Of course it comes with the assumption that the polynomial is not zero</p>",
        "id": 196821384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588880706
    },
    {
        "content": "<p>perhaps it help me ! I'm trying to make caracteristic polynomial of a matrix. And i  have to proof that the degree of the polynomial is equal to the dimension of the matrix.</p>",
        "id": 196822402,
        "sender_full_name": "orlando",
        "timestamp": 1588881273
    },
    {
        "content": "<p>where is this <code>+</code> even defined?</p>",
        "id": 196823659,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588881945
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">add_semigroup</span>\n</code></pre></div>",
        "id": 196823757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588881983
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">o₁</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">o₂</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"bp\">..@</span><span class=\"n\">additive</span><span class=\"bp\">.</span><span class=\"n\">add_semigroup</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">@</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I blame Mario</p>",
        "id": 196823795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882003
    },
    {
        "content": "<p>I can't find <code>some x + some y = some (x+y)</code></p>",
        "id": 196823889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882063
    },
    {
        "content": "<p><code>norm_cast</code> won't do it</p>",
        "id": 196823913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882077
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">with_bot</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">add_semigroup</span>\n\n<span class=\"kn\">example</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span>  <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">none_eq_bot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">bot_add</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">bot_le</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">none_eq_bot</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">le_bot_iff</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hab</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">some_le_some</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Everything else is easy</p>",
        "id": 196824054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/196823757\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/196823757\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">add_semigroup</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>okay thanks, then the proof is <code>add_le_add_right'</code>.</p>",
        "id": 196824218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> because you don't format your code properly it's difficult for other people to read. You should use <code>{}</code> instead of having multiple goals open at once</p>",
        "id": 196824252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882219
    },
    {
        "content": "<p>I don't know why <code>apply</code> can't apply this or why <code>library_search</code> can't find it though.</p>",
        "id": 196824264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882227
    },
    {
        "content": "<p>Orlando is doing induction on a but the issue isn't going to go away: the other goal is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>It all hinges on <code>some</code> being a monoid hom.</p>",
        "id": 196824526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/with_bot/near/196824264\" title=\"#narrow/stream/116395-maths/topic/with_bot/near/196824264\">said</a>:</p>\n<blockquote>\n<p>I don't know why <code>apply</code> can't apply this</p>\n</blockquote>\n<p>Aha, because <code>le</code> is cleverly implemented as a forall/function.</p>",
        "id": 196824563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882436
    },
    {
        "content": "<p>aah, <code>coe_add</code> isn't tagged with one of these <code>norm_cast</code> tags.</p>",
        "id": 196824565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882438
    },
    {
        "content": "<p>Why are you mucking around with casts and stuff?</p>",
        "id": 196824614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882447
    },
    {
        "content": "<p>because I couldn't find the algebraic class which with_bot nat was</p>",
        "id": 196824662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882489
    },
    {
        "content": "<p>It's annoying how hard it is to find instances.</p>",
        "id": 196824707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882520
    },
    {
        "content": "<p>but you're right, it's an <code>ordered_add_comm_monoid</code>.</p>",
        "id": 196824740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span>\n<span class=\"kn\">open</span> <span class=\"n\">with_bot</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">han</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">m</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"n\">han</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196824761,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588882557
    },
    {
        "content": "<p>my proof is shorter than kenny's <span aria-label=\"hole in one\" class=\"emoji emoji-26f3\" role=\"img\" title=\"hole in one\">:hole_in_one:</span></p>",
        "id": 196824820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882572
    },
    {
        "content": "<p>oh</p>",
        "id": 196824861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588882596
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">coe_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">o</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>gaargh</p>",
        "id": 196824918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882630
    },
    {
        "content": "<p>that's not what <code>coe_le</code> is supposed to say</p>",
        "id": 196824959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882655
    },
    {
        "content": "<p>proposition to make <code>\\le</code> inductive</p>",
        "id": 196825078,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588882716
    },
    {
        "content": "<p>Hopefully it goes better than when I tried to do that to <code>continuous</code>...</p>",
        "id": 196825143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588882762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>   ... <code> add_le_add_right' </code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 196825470,
        "sender_full_name": "orlando",
        "timestamp": 1588882935
    },
    {
        "content": "<p>The trick is to realise that it's an <code>ordered_add_comm_monoid</code></p>",
        "id": 196825514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588882970
    },
    {
        "content": "<p>Yep Kevin ! That give property ! That good !</p>",
        "id": 196825568,
        "sender_full_name": "orlando",
        "timestamp": 1588883013
    },
    {
        "content": "<p>I see. So somehow the correct way to proceed would have been to say to Lean \"hey Lean, give me the complete list of instances on <code>with_bot nat</code> because I can't remember the axioms for half of them and so don't actually know if it's an ordered semigroup or even if Lean has ordered semigroups\"</p>",
        "id": 196826643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588883631
    },
    {
        "content": "<p>Well, ideally <code>library_search</code> would have simply worked but probably it ran into the apply bug</p>",
        "id": 196826737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588883662
    },
    {
        "content": "<p>But otherwise, yes that would be nice to have.</p>",
        "id": 196826764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588883676
    },
    {
        "content": "<p><code> libraty_search </code> and <code>suggest </code> are nice tactic !!!</p>",
        "id": 196827084,
        "sender_full_name": "orlando",
        "timestamp": 1588883872
    },
    {
        "content": "<p>\"and then tell me all the lemmas which apply to that object\". I see. That's what <code>library_search</code>is supposed to do?</p>",
        "id": 196827220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588883950
    },
    {
        "content": "<p>In 10 years lean will work on his own, we will just have to watch him prove theorems <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 196827589,
        "sender_full_name": "orlando",
        "timestamp": 1588884151
    }
]