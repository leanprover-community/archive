[
    {
        "content": "<p>I kept MWEing for so long that I lost the big picture of what I want to prove.<br>\nAs a sanity check, can somebody please tell me whether the following theorem holds?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.CompleteLattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Multiset.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">OrderedAddCommMonoidCLattice</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IamConfused</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedAddCommMonoidCLattice</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">A.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">≤</span>\n      <span class=\"o\">(</span><span class=\"n\">B.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">≤</span>\n    <span class=\"o\">(</span><span class=\"n\">B.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Don't bother proving it; it will be my struggle.<br>\nJust tell me whether you think it is true.</p>",
        "id": 406115407,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1701799053
    },
    {
        "content": "<p>Less abstract:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.ENNReal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">A.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">≤</span>\n      <span class=\"o\">(</span><span class=\"n\">B.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">≤</span>\n    <span class=\"o\">(</span><span class=\"n\">B.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If you get to have a look at it, just PM me with your guess [whether it holds] (you don't have to be sure).</p>",
        "id": 406119664,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1701800464
    },
    {
        "content": "<p>I have a finite counterexample.</p>",
        "id": 406144808,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701804393
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Counterexample</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.ENNReal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">{()}</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">cond</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">y</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">y</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">B.map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">·</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">≤</span>\n    <span class=\"o\">(</span><span class=\"n\">B.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">Set.setOf_or</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 406144932,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701804451
    },
    {
        "content": "<p>The <code>simp</code> in the example is not deterministic but it's not a code for mathlib.</p>",
        "id": 406145064,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701804498
    },
    {
        "content": "<p>Thanks a lot !!!!!!!!!!</p>",
        "id": 406145120,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1701804527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 406148242,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701805827
    },
    {
        "content": "<p>Automation can find this when? Could tactics in other systems find that?</p>",
        "id": 406181942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701821638
    },
    {
        "content": "<p>slim_check would need to learn to sample from types, which is incompatible with a refactor that Scott has in the works that lets it sample from Reals (but also not particularly practical with the current design either)</p>",
        "id": 406187546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701824098
    },
    {
        "content": "<p>I believe (but didn't check) that in Isabelle you would have seen the system tell you about a counter example the moment you wrote the original lemma, without you even asking for it.  So there is some catching up to do for us.</p>",
        "id": 406248473,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701848323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/116395-maths/topic/.E2.9C.94.20I.20am.20confused/near/406248473\">said</a>:</p>\n<blockquote>\n<p>I believe (but didn't check) that in Isabelle you would have seen the system tell you about a counter example the moment you wrote the original lemma, without you even asking for it.  So there is some catching up to do for us.</p>\n</blockquote>\n<p>yes Isabelle does have an auto quickcheck mechanism like this</p>",
        "id": 406249887,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1701848924
    }
]