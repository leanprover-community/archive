[
    {
        "content": "<p>I guess I don't understand how Lean 3 synthesizes placeholders. When I try to take <code>star S</code>, where <code>star</code> is of the following type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abstract_simplicial_complex.star</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">abstract_simplicial_complex</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">subset_asc</span> <span class=\"n\">S</span> <span class=\"n\">K</span><span class=\"o\">],</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">abstract_simplicial_complex</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">subset_asc</span> <span class=\"n\">S</span> <span class=\"n\">K</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">abstract_simplicial_complex</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>For some more context, <code>abstract_simplicial_complex</code> is a class which takes one argument, <code>(A : Type*)</code>.</p>\n<p>It seems very obvious to me to use <code>K</code> in this context, so am I missing something?</p>",
        "id": 324766518,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1675109070
    },
    {
        "content": "<p>Unification doesn't look at your local context. Inputs in <code>{}</code> brackets should just be inferrable from other inputs. Is <code>abstract_simplicial_complex.star</code> your own definition?</p>",
        "id": 324767483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675109409
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/abstract_simplicial_complex\">docs#abstract_simplicial_complex</a></p>",
        "id": 324767588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675109456
    },
    {
        "content": "<p>An example of how <code>{}</code> works is <code>id {X : Type} (a : X)  : X</code> where lean can figure out <code>X</code> from <code>a</code>. Imagine the chaos if it looked in your local context and just threw in the first type it found!</p>",
        "id": 324767905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675109575
    },
    {
        "content": "<p>Oh wait -- you say it's a <em>class</em>? Then use <code>[]</code> brackets, that's exactly what they're for</p>",
        "id": 324768135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675109646
    },
    {
        "content": "<p>made up alternate error, following Kevin:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">K1</span> <span class=\"o\">:</span> <span class=\"n\">abstract_simplicial_complex</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">K2</span> <span class=\"o\">:</span> <span class=\"n\">abstract_simplicial_complex</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">subset_asc</span> <span class=\"n\">S</span> <span class=\"n\">K1</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">subset_asc</span> <span class=\"n\">S</span> <span class=\"n\">K2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">abstract_simplicial_complex</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 324768243,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675109689
    },
    {
        "content": "<p>But if this thing is (a) a class and (b) supposed to be a class, then that won't happen.</p>",
        "id": 324768402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675109747
    },
    {
        "content": "<p>(b) seems unbelievable, but yes.</p>",
        "id": 324768414,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675109755
    },
    {
        "content": "<p>I think that the way to proceed with this conversation is that you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 324768825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675109886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/don't.20know.20how.20to.20synthesize.20placeholder/near/324768135\">said</a>:</p>\n<blockquote>\n<p>Oh wait -- you say it's a <em>class</em>? Then use <code>[]</code> brackets, that's exactly what they're for</p>\n</blockquote>\n<p>Ahhh, that works (for that issue, at least)</p>",
        "id": 324778767,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1675113501
    },
    {
        "content": "<p>It also guarantees that for every type <code>A</code>, there will be at most one term of type <code>abstract_simplicial_complex A</code>, or your code will break (for basically the same reason as Reid's example above)</p>",
        "id": 324784036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675115610
    }
]