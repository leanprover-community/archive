[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/6468\">!4#6468</a> I defined the first order theory of fields. Most references I've seen in FOL don't include <code>inv</code> as a symbol, they use that language of rings and include an axiom that says inverses exist. I included <code>inv</code> as a symbol along with axioms along the lines of Lean's field axioms. Does anyone have opinions on this, or can think of implications of it? My analysis is as follows</p>\n<ul>\n<li>Potential diamonds around linking models for the theory of fields with Lean's fields are not an issue. These diagrams won't commute by definition anyway and I had to other find ways around this.</li>\n<li>Including <code>inv</code> makes it slightly easier to write down a first order formula, although you can always multiply out the inverses in any equation so it might not be that much of an issue.</li>\n<li>If someone wants to prove the theory of algebraically closed fields admits quantifier elimination then this is arguably a weaker statement if <code>inv</code> is included in the language, but you can multiply out inverses so maybe not a huge problem (maybe annoying zero issues here though).</li>\n<li>Maybe when working with the theory of comm rings and the theory of fields at the same time it's easy if they're defined over the same language.</li>\n</ul>",
        "id": 384205383,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1691833263
    },
    {
        "content": "<p>It's important that inverse is not in the language, for then terms without quantifiers are just polynomials and not rational fractions.</p>",
        "id": 384214874,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691835618
    },
    {
        "content": "<p>I think that this is an argument for an API for working with definable functions, as the only thing that you really want to include <code>inv</code> for is to make explicitly writing formulas easier. Morally speaking, you want to be flexible as to whether you include <code>inv</code>, for the reasons mentioned above, and so that you can control whether substructures are subrings or subfields (this is just a consequence of what the terms are).</p>",
        "id": 384604598,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1691971495
    },
    {
        "content": "<p>I think the real reason people avoid putting <code>inv</code> in the language in the literature is to avoid partial functions though, which in Lean is clearly not a good reason.</p>",
        "id": 384604689,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1691971546
    },
    {
        "content": "<p>What is a definable function ? Is it a true sentence of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><msub><mi>x</mi><mn>1</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mo stretchy=\"false\">!</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>ϕ</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\forall x_1...x_n, \\exists ! y, \\phi(x_1,...,x_n,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">...</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∃</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>? I agree that this would be very useful.</p>",
        "id": 384610270,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1691973631
    },
    {
        "content": "<p>The way I think of it is as a function whose graph is a definable subset.</p>",
        "id": 384629435,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691980333
    },
    {
        "content": "<p>In some cases, it is important to retain a particular choice of a formula that defines a graph uniformly in all models.</p>",
        "id": 384703632,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692004451
    }
]