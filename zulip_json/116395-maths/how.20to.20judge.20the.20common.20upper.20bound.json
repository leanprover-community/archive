[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Sets.Closeds</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"n\">Function</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">EReal</span><span class=\"o\">)[</span><span class=\"n\">SMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">EReal</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">EReal</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">f1</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">r</span><span class=\"o\">)(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f2</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"n\">f1</span><span class=\"o\">,</span> <span class=\"n\">f2</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can someone please help me to complete this sorry?</p>",
        "id": 388435480,
        "sender_full_name": "Billlie Franch",
        "timestamp": 1693531940
    },
    {
        "content": "<p>I came up with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">f1</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">r</span><span class=\"o\">)(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f2</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"n\">f1</span><span class=\"o\">,</span> <span class=\"n\">f2</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sSup_le</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">hw</span><span class=\"o\">‚ü©,</span><span class=\"n\">rfl</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_insert_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hw</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hw</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>Is there any particular reason you're using <code>sSup</code>? Using <code>sup</code> or <code>max</code> in this case would probably be easier.</p>",
        "id": 388437920,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693533440
    }
]