[
    {
        "content": "<p>I'm trying to find a way to introduce a manifold instance on a <code>NormedAddTorsor</code> over a normed space without generating diamonds.</p>",
        "id": 372352342,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688485135
    },
    {
        "content": "<p>No progress so far.</p>",
        "id": 372352368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688485141
    },
    {
        "content": "<p>The problem is that the normed space itself is an affine space over itself.</p>",
        "id": 372352485,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688485167
    },
    {
        "content": "<p>So, the most natural atlas (as in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ChartedSpace#doc\">docs#ChartedSpace</a>) for an affine space (given by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AffineEquiv.vaddConst#doc\">docs#AffineEquiv.vaddConst</a> at every point) conflicts with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=chartedSpaceSelf#doc\">docs#chartedSpaceSelf</a> for <code>E</code> as an affine space over <code>E</code>.</p>",
        "id": 372353220,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688485323
    },
    {
        "content": "<p>Any ideas?</p>",
        "id": 372353252,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688485326
    },
    {
        "content": "<p>One way would be to change the standard atlas on a vector space: instead of just using the identity, we could use all the translations to get the same atlas as what would come from the AddTorsor structure. I don't know if we use a lot the current choice of atlas currently.</p>",
        "id": 372357241,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688486224
    },
    {
        "content": "<p>E.g., we use <code>chartedSpaceSelf</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mdifferentiable_chart#doc\">docs#mdifferentiable_chart</a></p>",
        "id": 372357922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688486397
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=contMDiffOn_chart#doc\">docs#contMDiffOn_chart</a></p>",
        "id": 372358513,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688486515
    },
    {
        "content": "<p>All these statements would still be true, right? If we just have to fix a few proofs, it doesn't look too bad.</p>",
        "id": 372364127,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688487721
    },
    {
        "content": "<p>No, for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EuclideanHalfSpace#doc\">docs#EuclideanHalfSpace</a> we need the old instance.</p>",
        "id": 372365399,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688488054
    },
    {
        "content": "<p>I mean, for the codomain of the <code>EuclideanHalfSpace</code>.</p>",
        "id": 372365705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688488134
    },
    {
        "content": "<p>Can we completely drop <code>ChartedSpace</code> and formulate the definition of a manifold in terms of what is now called extended charts?</p>",
        "id": 372392344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688496090
    },
    {
        "content": "<p>Something like (not tested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ModelWithCorners</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AdddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span>\n  <span class=\"n\">uniqueDiffOn</span> <span class=\"o\">:</span> <span class=\"n\">UniqueDiffOn</span> <span class=\"n\">carrier</span>\n  <span class=\"n\">isClosed_carrier</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">carrier</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ManifoldChart</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AdddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">LocalEquiv</span> <span class=\"n\">M</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"n\">open_source</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">source</span>\n  <span class=\"n\">continuous_toFun</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"n\">toFun</span> <span class=\"n\">source</span>\n  <span class=\"n\">continuous_invFun</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"n\">invFun</span> <span class=\"n\">target</span>\n  <span class=\"n\">target_subset</span> <span class=\"o\">:</span> <span class=\"n\">target</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">I.carrier</span>\n  <span class=\"n\">nhdsWithin_target</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">target</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"n\">I.carrier</span><span class=\"o\">]</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p><code>nhdsWithin_target</code> is equivalent to <code>IsOpen (target ‚à™ I.carrier·∂ú)</code> or <code>IsOpen ((‚Üë) ‚Åª¬π' target : Set I.carrier)</code></p>",
        "id": 372415638,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688504882
    },
    {
        "content": "<p>We still need a <code>ModelWithCorners</code> as an extra tag to choose between two non-defeq atlases on <code>E √ó F</code>.</p>",
        "id": 372416850,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688505626
    },
    {
        "content": "<p>I don't see a reason why it wouldn't work, although it would probably be a crazy refactor. Some things would become more complicated (like recasting a complex manifold as a real manifold, or composing manifold instances -- if <code>E</code> is a charted space modelled on <code>F</code>, and <code>F</code> is a charted space modelled on <code>G</code>, then <code>E</code> is a charted space modelled on <code>G</code>). Some applications of charted spaces I have in mind (like flat surfaces, where some charts go into a vector space, other charts go into a branched cover of a vector space over a point) would not be possible any more, though, so I would have to be convinced that the reduced generality has clear gains to compensate for the losses.</p>",
        "id": 372465990,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688534160
    },
    {
        "content": "<p>I would welcome the thoughts of <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> on this.</p>",
        "id": 372466142,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688534214
    },
    {
        "content": "<p>In any case, I suggest that we redefine the <code>ModelWithCorners</code> as a <code>Set</code> + properties.</p>",
        "id": 372473896,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688537250
    },
    {
        "content": "<p>This way we can avoid the <code>ModelProd</code> + <code>simp</code> issues.</p>",
        "id": 372473972,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688537274
    },
    {
        "content": "<p>BTW, this could solve the diamond with affine spaces too.</p>",
        "id": 372474146,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688537331
    },
    {
        "content": "<p>It's 1am here, so I'll think about it again in the morning.</p>",
        "id": 372474177,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688537347
    },
    {
        "content": "<p>Though this means that we'll have to use <code>Set.prod</code> in place of <code>ModelProd</code>.</p>",
        "id": 372476776,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688538272
    },
    {
        "content": "<p>No longer sure if this is a good idea.</p>",
        "id": 372476833,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688538286
    },
    {
        "content": "<p>I think that I found another solution both to the \"affine space as a manifold\" and to the \"<code>ModelProd</code> in <code>simp</code>\".</p>\n<ol>\n<li>We introduce</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ModelWithCorners.Self</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>(or <code>Model.Self</code>; BTW, should we move it to <code>Manifold.Model</code>?)</p>\n<ol start=\"2\">\n<li>We drop <code>ModelProd</code> and <code>ModelPi</code>. Instead, we can tell the difference between <code>Model.Self E √ó Model.Self F</code> vs <code>Model.Self (E √ó F)</code>.</li>\n<li>We introduce an instance <code>[NormedAddTorsor E PE] : ChartedSpace (Model.Self E) PE</code> that uses shifts by constants. It no longer conflicts with <code>ChartedSpace Œ± Œ±</code>.</li>\n</ol>",
        "id": 373835171,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688967542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 373835215,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688967561
    },
    {
        "content": "<p>No, we'll still have a diamond for <code>ChartedSpace (Œ± √ó Œ±) (Œ± √ó Œ±)</code>.</p>",
        "id": 373835962,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688967885
    },
    {
        "content": "<p>Possible solution: drop the instance for <code>ChartedSpace Œ± Œ±</code>, add it as a <code>def Homeomorph.chartedSpace</code>, and add an instance for <code>ChartedSpace (Model.Self Œ±) (Model.Self Œ±)</code> so that we can talk about smoothness of <code>chartAt</code>.</p>",
        "id": 373836877,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688968274
    }
]