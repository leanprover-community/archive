[
    {
        "content": "<p>The inclusion arrows in a coproduct are \"obviously\" in 1-1 correspondence with the indexing set. I've defined a map from the indexing set to the corresponding <code>Presieve.ofArrows</code> and proved that it's surjective, but I'm running into problems with injectivity. The simp lemma <code>Sigma.mk.inj_iff</code> gives me a heterogenous equality in <code>h</code> below. Is there any way to work with that? Is there a better way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Sites.Sieves</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Products</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasCoproduct</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"bp\">∐</span> <span class=\"n\">Z</span> <span class=\"bp\">//</span> <span class=\"n\">Presieve.ofArrows</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"n\">Sigma.ι</span> <span class=\"n\">Z</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Z</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"n\">Sigma.ι</span> <span class=\"n\">Z</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Presieve.ofArrows.mk</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">surj</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">cases'</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">Sigma.mk.inj_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"c1\">-- Gives: h: Z a = Z b ∧</span>\n    <span class=\"c1\">--   HEq { val := Sigma.ι Z a, property := _ } { val := Sigma.ι Z b, property := _ }</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396882363,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1697455871
    },
    {
        "content": "<p>In your example, <code>map Z</code> may not be injective. Let us say <code>C</code> is a category with only one object and only one map. This category <code>C</code> has coproducts (e.g. this category is equivalent to the category of sheaves of sets over the empty space). Then, if you take any family <code>Z : α → C</code>, all the injections into the coproduct are the same map, even though <code>α</code> may contain several distinct elements.</p>",
        "id": 396916307,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697466646
    },
    {
        "content": "<p>Thanks! In my application, the category <code>C</code> is <code>Extensive</code>, which is hopefully enough, I'll have to think more about that. </p>\n<p>But in general, is heterogenous equality of morphisms in categories at all useful?</p>",
        "id": 396922001,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1697468290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"519559\">Dagur Asgeirsson</span> <a href=\"#narrow/stream/116395-maths/topic/Presieve.20of.20arrows.20for.20coproduct.20inclusions/near/396922001\">said</a>:</p>\n<blockquote>\n<p>But in general, is heterogenous equality of morphisms in categories at all useful?</p>\n</blockquote>\n<p>If we can avoid this, it is usually better.</p>",
        "id": 396923555,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697468716
    }
]