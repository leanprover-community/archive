[
    {
        "content": "<p>With <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> we were discussing about how nice the proof that a natural that is a square and a cube is either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> modulo <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span> can be made. He had a super-cool 3-lines proof in Coq, and challenged me on Lean. I came up with the following one, and I would be happy to see some <span aria-label=\"golf\" class=\"emoji emoji-1f3cc\" role=\"img\" title=\"golf\">:golf:</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span>  <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span>  <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}})</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_mod</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">Nat.pow_mod</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n    <span class=\"n\">fconstructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span>\n      <span class=\"n\">all_goals</span> <span class=\"n\">aesop</span>\n    <span class=\"bp\">·</span> <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">hc1</span><span class=\"o\">,</span> <span class=\"n\">hc2</span>\n      <span class=\"n\">all_goals</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>Up to increasing the maximal recursion from <code> 512</code> to <code>700</code> I can improve it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">700</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span>  <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span>  <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}})</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_mod</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">Nat.pow_mod</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n  <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">hb1</span><span class=\"o\">,</span> <span class=\"n\">hb2</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">hc1</span><span class=\"o\">,</span> <span class=\"n\">hc2</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>A part from the <span aria-label=\"golf\" class=\"emoji emoji-1f3cc\" role=\"img\" title=\"golf\">:golf:</span> ing contest, I was unable to insert in the <code>interval_cases</code> the proof term directly, writing for instance <code>interval_cases (b % 7) using (b % 7).zero_le, Nat.mod_lt _ (by linarith)</code> (at least the first one...); this forced the first four \"useless\" <code>have</code>. Am I missing something, is it intentional?</p>",
        "id": 408233078,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702663493
    },
    {
        "content": "<p>I should probably add that we were <em>aiming</em> at a proof that does not go \"modulo <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span><code>, but sticks to </code>Nat`; most probably one can work in the finite field with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span> elements, but that was not the point of our discussion.</p>",
        "id": 408234006,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702663875
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.one_mod</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.zero_mod</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ZMod.nat_cast_eq_nat_cast_iff'</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ZMod.nat_cast_eq_nat_cast_iff'</span><span class=\"o\">]</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">hab</span> <span class=\"n\">hac</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>\n<p>I just wrote this to come back to your second message :b the <code>simp</code> line is ostentively a bug in <code>generalize</code>; it should generalise everywhere, I'd say.</p>",
        "id": 408234614,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702664139
    },
    {
        "content": "<p>what's the coq proof?</p>",
        "id": 408234740,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702664182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/Proving.20congruences.20by.20cases/near/408234614\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.one_mod</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.zero_mod</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ZMod.nat_cast_eq_nat_cast_iff'</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ZMod.nat_cast_eq_nat_cast_iff'</span><span class=\"o\">]</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">hab</span> <span class=\"n\">hac</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>\n<p>I just wrote this to come back to your second message :b the <code>simp</code> line is ostentively a bug in <code>generalize</code>; it should generalise everywhere, I'd say.</p>\n</blockquote>\n<p>Nice!</p>",
        "id": 408234782,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702664197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/Proving.20congruences.20by.20cases/near/408234740\">said</a>:</p>\n<blockquote>\n<p>what's the coq proof?</p>\n</blockquote>\n<p>I leave it to <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span></p>",
        "id": 408234805,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702664210
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"kn\">From</span> <span class=\"n\">mathcomp</span> <span class=\"kn\">Require</span> <span class=\"kn\">Import</span> <span class=\"n\">all_ssreflect</span><span class=\"o\">.</span>\n\n<span class=\"kn\">Lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">^</span> <span class=\"mi\">2</span> <span class=\"o\">-&gt;</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">p</span> <span class=\"o\">^</span> <span class=\"mi\">3</span> <span class=\"o\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">%[</span><span class=\"n\">mod</span> <span class=\"mi\">7</span><span class=\"o\">])</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">%[</span><span class=\"n\">mod</span> <span class=\"mi\">7</span><span class=\"o\">]).</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n<span class=\"k\">move</span><span class=\"o\">=&gt;</span> <span class=\"o\">-&gt;</span> <span class=\"o\">/(</span><span class=\"n\">congr1</span> <span class=\"o\">(</span><span class=\"n\">modn</span><span class=\"o\">^~</span> <span class=\"mi\">7</span><span class=\"o\">));</span> <span class=\"k\">rewrite</span> <span class=\"o\">-</span><span class=\"n\">modnXm</span> <span class=\"o\">-[</span><span class=\"k\">in</span> <span class=\"n\">RHS</span><span class=\"o\">]</span><span class=\"n\">modnXm</span><span class=\"o\">.</span>\n<span class=\"k\">move</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">%%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">%%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(@</span><span class=\"n\">ltn_pmod</span> <span class=\"n\">n</span> <span class=\"mi\">7</span> <span class=\"n\">isT</span><span class=\"o\">)</span> <span class=\"o\">(@</span><span class=\"n\">ltn_pmod</span> <span class=\"n\">p</span> <span class=\"mi\">7</span> <span class=\"n\">isT</span><span class=\"o\">).</span>\n<span class=\"kp\">by</span> <span class=\"kr\">do</span> <span class=\"mi\">7</span><span class=\"o\">?[</span><span class=\"k\">case</span><span class=\"o\">=&gt;</span> <span class=\"o\">//];</span> <span class=\"kr\">do</span> <span class=\"mi\">7</span><span class=\"o\">?[</span><span class=\"k\">case</span><span class=\"o\">=&gt;</span> <span class=\"o\">//].</span>\n<span class=\"kn\">Qed</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 408235289,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1702664423
    },
    {
        "content": "<p>(but I'm still working on the ½ line version <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 408235411,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1702664479
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">%</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.mod_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b.mod_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.mod_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_mod</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_mod</span><span class=\"o\">])</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>\n<p>a Lean 3-liner (although you can argue one of the lines is a bit long!)</p>",
        "id": 408236356,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702664902
    },
    {
        "content": "<p>Does decide immediately prove the same statement modulo <code>7</code>?</p>",
        "id": 408237420,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702665397
    },
    {
        "content": "<p>I mean, when all the variables are module 7</p>",
        "id": 408237443,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702665408
    },
    {
        "content": "<p><code>decide</code> or <code>fin_cases</code></p>",
        "id": 408237500,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702665433
    },
    {
        "content": "<p>Yes: This works (although it is not exactly the statement you want):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 408237503,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702665434
    },
    {
        "content": "<p>I would argue that the statement mod 7 is the good one.</p>",
        "id": 408237566,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702665471
    },
    {
        "content": "<p>It seems to be the least painful way of proving statements about conguences.</p>",
        "id": 408237708,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702665523
    },
    {
        "content": "<p>Sure, we agree; but we arrived at the discussion coming from a different path, so the point was \"try to make it readable even before introducing (to students) the ring-hom of reduction modulo <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>\".</p>",
        "id": 408237790,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702665565
    },
    {
        "content": "<p>maybe some meta code magic could automatize that we can move to <code>ZMod 7</code> even if we want a statement about <code>Nat</code></p>",
        "id": 408237802,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702665569
    },
    {
        "content": "<p>This \"meta code magic\" will soon exist in Coq....</p>",
        "id": 408237867,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702665595
    },
    {
        "content": "<p>well, then we also want it!</p>",
        "id": 408237949,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702665613
    },
    {
        "content": "<p>Yes, actually that's the ½ line proof I'm still working on</p>",
        "id": 408238579,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1702665912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/Proving.20congruences.20by.20cases/near/408236356\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">%</span><span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.mod_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b.mod_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.mod_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_mod</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_mod</span><span class=\"o\">])</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>\n<p>a Lean 3-liner (although you can argue one of the lines is a bit long!)</p>\n</blockquote>\n<p>I'd argue this proof could be much nicer if we could do <code>?_</code>s in the <code>simpa</code> invocation, as every required parameter could be solved by (probably, on tube) <code>simp_arith [*, Nat.pow_mod]</code></p>",
        "id": 408240050,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702666580
    },
    {
        "content": "<p>Yes, good point.</p>",
        "id": 408240141,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702666629
    },
    {
        "content": "<p><code>simpa</code> not supporting placeholders is a pain point for me too.</p>",
        "id": 408240188,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702666659
    },
    {
        "content": "<p>And is it clear to you why we cannot use terms in the <code>interval_cases</code>? Apart from the fact that my proof was too complicated, isn't it also a pain?</p>",
        "id": 408240230,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702666679
    },
    {
        "content": "<p>it should be possible to do this with <code>mod_cases</code></p>",
        "id": 408240500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702666802
    },
    {
        "content": "<p>it was designed for exactly this kind of problem</p>",
        "id": 408240605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702666823
    },
    {
        "content": "<p>The problem is that it switches from <code>%</code> to <code>MOD</code> and you have to go back-and-forth</p>",
        "id": 408240677,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702666848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Proving.20congruences.20by.20cases/near/408240500\">said</a>:</p>\n<blockquote>\n<p>it should be possible to do this with <code>mod_cases</code></p>\n</blockquote>\n<p>I put up a pull request a while ago to make <code>mod_cases</code> work on natural numbers:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/3922\">https://github.com/leanprover-community/mathlib4/pull/3922</a></p>",
        "id": 408251675,
        "sender_full_name": "David Renshaw",
        "timestamp": 1702671765
    },
    {
        "content": "<p>(looking at resolving the merge conflict now...)</p>",
        "id": 408252607,
        "sender_full_name": "David Renshaw",
        "timestamp": 1702672231
    },
    {
        "content": "<p>Great!</p>",
        "id": 408264494,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1702678193
    }
]