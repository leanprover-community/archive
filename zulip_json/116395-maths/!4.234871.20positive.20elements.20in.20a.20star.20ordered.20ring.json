[
    {
        "content": "<p>Note: this is a new feature PR, not a porting PR. I couldn't help myself. This is what I want to use as the primary definition of positive elements <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>, <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  (ping whoever else you wish to see this) in a C⋆-algebra (unital or non-unital) and for bounded linear operators on a Hilbert space. Of course, one can define whatever <code>≤</code> they want on a type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddSubmonoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">AddSubmonoid.closure</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">star</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 364678287,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686258278
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4871\">!4#4871</a> for mobile</p>",
        "id": 364678751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686258443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> , <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span></p>",
        "id": 364678790,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686258463
    },
    {
        "content": "<p>Is there a reason not to define it with the carrier defeq to <code>0 ≤ x</code>?</p>",
        "id": 364680030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686258912
    },
    {
        "content": "<p>That way it doesn't need to assume a star structure at all</p>",
        "id": 364680054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686258923
    },
    {
        "content": "<p>And surely it should be <code>nonneg</code> not <code>positive</code>!</p>",
        "id": 364680285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686259013
    },
    {
        "content": "<p>I guess it holds more generally for whenever <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_nonneg\">docs#add_nonneg</a> does</p>",
        "id": 364680387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686259055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234871.20positive.20elements.20in.20a.20star.20ordered.20ring/near/364680030\">said</a>:</p>\n<blockquote>\n<p>Is there a reason not to define it with the carrier defeq to <code>0 ≤ x</code>?</p>\n</blockquote>\n<p>The point is that in this context you go the other way around: you define <code>a \\le b</code> as <code>0 \\le b - a</code><br>\nEDIT: I had missed the <code>StarOrderedRing</code> assumption</p>",
        "id": 364680612,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686259139
    },
    {
        "content": "<p>Right, but the two are equivalent anyway with <code>star_ordered_ring</code>; but my suggestion holds much more generally</p>",
        "id": 364681258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686259421
    },
    {
        "content": "<p>Eric, you would still need <code>CovariantClass</code> to make it an <code>AddSubmonoid</code>.</p>",
        "id": 364682844,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686260000
    },
    {
        "content": "<p>And see my note about the naming in the PR comment.</p>",
        "id": 364682938,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686260036
    },
    {
        "content": "<p><del>The current definition doesn't use <code>StarOrderedRing</code> at all, right? <code>Star</code> alone would be enough.</del></p>",
        "id": 364684036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686260486
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_submonoid.nonneg\">docs#add_submonoid.nonneg</a> already exists?</p>",
        "id": 364684275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686260574
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.214.234871.20positive.20elements.20in.20a.20star.20ordered.20ring\">#mathlib4 &gt; !4#4871 positive elements in a star ordered ring</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 364684349,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686260601
    },
    {
        "content": "<p>Sure, for the current definition <code>Star</code> is enough.</p>",
        "id": 364684871,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686260803
    },
    {
        "content": "<p>Independent of your motivation, I think we should have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_submonoid.nonneg</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"n\">add_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">le_rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 364684976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686260839
    },
    {
        "content": "<p>And then the question is \"do we need a propositionally equal special case?\"</p>",
        "id": 364685184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686260907
    },
    {
        "content": "<p>Heck, we already have most of this in the stuff we use to set up <code>nnreal</code></p>",
        "id": 364685437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686261011
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonneg.semiring\">docs#nonneg.semiring</a>?)</p>",
        "id": 364685530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686261050
    },
    {
        "content": "<p>I don't care much what the carrier is definitionally, so <code>0 \\le x</code> is fine.</p>",
        "id": 364686059,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686261256
    },
    {
        "content": "<p>This is what you want: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonneg.ordered_add_comm_monoid\">docs#nonneg.ordered_add_comm_monoid</a></p>",
        "id": 364686350,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686261403
    },
    {
        "content": "<p>Okay, I could use that as the definition.</p>",
        "id": 364686479,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686261472
    },
    {
        "content": "<p>We should definitively only use <code>Star</code>, reason being that the unbounded operators only satisfy <code>Star</code> and not much else (<code>StarModule</code> also is true), but nevertheless the self-adjoint elements <code>E →.ₗ[R] E</code> are exactly the self-adjoint elements in <code>Star (E →.ₗ[R] E)</code>, therefore we can get away with one positivity condition in all cases.</p>",
        "id": 364692946,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1686264410
    },
    {
        "content": "<p>ah crap, this still does not work because we probably don't have <code>NonUnitalSemiring</code> (we haven't defined addition and multiplication, but there are sensible candidates by restricting the domains so that everything is defined)</p>",
        "id": 364693750,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1686264826
    },
    {
        "content": "<p>for instance <code>0 * a = 0</code> is not true because the domain of <code>a</code> is in general not the whole space</p>",
        "id": 364693871,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1686264890
    },
    {
        "content": "<p>so we definitively need both <code>IsPositive</code> and <code>positive</code> (and the later is only useful for bounded operators/C^* stuff)</p>",
        "id": 364694100,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1686265051
    },
    {
        "content": "<p>Moritz, you could get away with having an 'OrderedAddCommGroup` though right?</p>",
        "id": 364707386,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686272994
    },
    {
        "content": "<p>We can avoid multiplication in the definition that way.</p>",
        "id": 364707480,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686273020
    },
    {
        "content": "<p>Regarding naming, related to Hilbert's 17th problem, there is a coincidence of sums of squares and <em>totally</em> positive elements.  However, searching with Google \"totally positive\" suggests that this is something that is not so widespread as a concept.</p>",
        "id": 364761596,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686297132
    },
    {
        "content": "<p>I've pushed some changes, including a refactor to make the carrier <code>{ x : R | 0 ≤ x }</code> and weakening the type class assumptions (<span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>). I generalized a few lemmas about <code>Nat.cast</code> so that they apply to <code>StarOrderedRing</code>s, as well as the <code>selfAdjoint</code> and <code>positive</code> parts thereof. Now, for example, with <code>[Ring R] [StarOrderedRing R] [PartialOrder R]</code> we get <code>strictMono (Nat.cast ℕ → positive R)</code> from <code>Nat.strictMono_cast</code> for free.</p>",
        "id": 364978237,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686348260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/!4.234871.20positive.20elements.20in.20a.20star.20ordered.20ring/near/364684976\">said</a>:</p>\n<blockquote>\n<p>Independent of your motivation, I think we should have:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_submonoid.nonneg</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"n\">add_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">le_rfl</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Has this ever been added?</p>",
        "id": 372054735,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688399149
    },
    {
        "content": "<p>It's in the PR, but that PR is not merged.</p>",
        "id": 372436908,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688517699
    }
]