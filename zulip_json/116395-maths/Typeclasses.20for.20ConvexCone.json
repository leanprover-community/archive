[
    {
        "content": "<p>Should we turn <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexCone.Pointed#doc\">docs#ConvexCone.Pointed</a> into a class? This came in <a href=\"#narrow/stream/116395-maths/topic/OfNat.2C.20Subtypes.20issues.20for.20ConvexCone.2EPointed\">another thread</a>. This will also let me convert <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProperCone#doc\">docs#ProperCone</a> to a class. Both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexCone.Pointed#doc\">docs#ConvexCone.Pointed</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProperCone#doc\">docs#ProperCone</a> have nice algebraic structures (<code>AddCommMonoid</code>, <code>Module (k \\ge 0)</code>, maybe more?).</p>",
        "id": 379279160,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690485669
    },
    {
        "content": "<p>I don't think it would make any sense for <code>ProperCone</code> to be a class</p>",
        "id": 379284063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690486850
    },
    {
        "content": "<p>I need the <code>Module</code> structure on either <code>PointedCone</code> or <code>ProperCone</code> to then define direct sums. Should I just keep using <code>Fact Pointed</code>?</p>",
        "id": 379288389,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690487910
    },
    {
        "content": "<p>Or is there a less hacky way than using <code>Fact</code></p>",
        "id": 379288511,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690487955
    },
    {
        "content": "<p>Why not have a <code>PointedCone</code> type?</p>",
        "id": 379295537,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690489867
    },
    {
        "content": "<p>Oh, I didn't say that <code>ConvexCone.Pointed</code> is a nonsensical typeclass; it's perhaps controversial, but it would certainly be one approach to what you're trying to do</p>",
        "id": 379306316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690493364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Typeclasses.20for.20ConvexCone/near/379295537\">said</a>:</p>\n<blockquote>\n<p>Why not have a <code>PointedCone</code> type?</p>\n</blockquote>\n<p>The problem I'm facing is with typeclass inferencing. Just defining a <code>Type</code> will probably still keep the issue unresolved.</p>",
        "id": 379315424,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690497084
    },
    {
        "content": "<p>I need to build a heirarchy of structures on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProperCone#doc\">docs#ProperCone</a> to define direct sums and without a \"Cone\" typeclass the code is getting very hacky.</p>",
        "id": 379315674,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690497221
    },
    {
        "content": "<p>You might want a <code>ConeClass</code> typeclass to mirror how we have <code>AddSubmonoid</code> and <code>AddSubmonoidClass</code></p>",
        "id": 379316629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690497715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 379349477,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690514058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as unresolved.</p>",
        "id": 380387074,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690816873
    }
]