[
    {
        "content": "<p>What's the mathlib-preferable way to show R-algebras are a monoidal category? You could transport an instance across the equivalence with the category of monoid objects in R-Mod, but I thought proving that the resulting structure behaves as it should might be a pain. I've emulated the file <code>algebra.category.Module.monoidal</code> instead, which was still a bit painful as things kept timing out. Or maybe there's a better way than these two?</p>",
        "id": 352904163,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1682530696
    },
    {
        "content": "<p><del>I think <code>Module R</code> should just have a monoidal instance?</del> sorry, misread</p>",
        "id": 352929731,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682536990
    },
    {
        "content": "<p>Dumb question: do we have the category of R-algebras? I guess it could be defined as some slice category in the category of rings, or perhaps directly using <code>bumdled</code> somehow?</p>",
        "id": 352954496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682546358
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Algebra\">docs#Algebra</a>?</p>",
        "id": 352955711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682546588
    },
    {
        "content": "<p>Well, I guess the question is what does \"Algebra\" mean? Are you thinking of commutative rings only?</p>",
        "id": 352956260,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682546678
    },
    {
        "content": "<p>I suspect that Amelia was talking about commutative R-algebras. If you drop commutativity then are they a monoidal category?</p>",
        "id": 352956344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682546699
    },
    {
        "content": "<p>You can take the cartesian monoidal structure, I guess, but I assume Amelia is looking for the cocartesian structure on commutative algebras (where the tensor product is the \"usual\" tensor product of algebras)</p>",
        "id": 352957197,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682546859
    },
    {
        "content": "<p>She's thinking about R-schemes so I suspect that the commutative case is the relevant one.</p>",
        "id": 352957510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682546914
    },
    {
        "content": "<p>Unfortunately I think you've reached the bleeding edge here. :-)</p>\n<p>The dream way to do it is to transport the monoidal structure over from the <code>CommMon_ (Module R)</code>, and get lucky that the transported structure is actually usable. :-)</p>\n<p>I don't remember trying to do that myself, although it was on my radar at some point. I would be very interested to know how it turns out!</p>",
        "id": 352991178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682553686
    },
    {
        "content": "<p>I do ultimately need this for <code>CommAlg R</code> (not in mathlib but I have it in a file), yeah. I didn't use <code>Mon_</code> to do this for <code>Algebra R</code> but I'll try using <code>CommMon_</code> for commutative algebras and see if it's easier</p>",
        "id": 353176645,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1682586185
    },
    {
        "content": "<p>I've made a start on this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7598\">#7598</a></p>",
        "id": 395766452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696887911
    },
    {
        "content": "<p><del>The <code>sorry</code>s are all very boring, but they're also very slow and there is a lot of noise to clean up</del> now sorry-free</p>",
        "id": 395766505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696887957
    },
    {
        "content": "<p>I would guess now that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraCat.instMonoidalCategory#doc\">docs#AlgebraCat.instMonoidalCategory</a>, it's pretty easy to transfer that strategy to your <code>CommAlg R</code> via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Monoidal.induced#doc\">docs#CategoryTheory.Monoidal.induced</a></p>",
        "id": 396531046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697212167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Monoidal.20instance.20on.20R-algebras/near/352991178\">said</a>:</p>\n<blockquote>\n<p>The dream way to do it is to transport the monoidal structure over from the <code>CommMon_ (Module R)</code>, and get lucky that the transported structure is actually usable. :-)</p>\n</blockquote>\n<p>Presumably we should instead show there's an isomorphism between the two that preserves the monoidal structure?</p>",
        "id": 396531593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697212405
    }
]