[
    {
        "content": "<p>I previously brought up <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392266572\">degree-bound polynomials</a> in the context of computability. It has occurred to me since then that if you consider the type of polynomials with a \"degree bound\" tacked on, this is actually still a semiring, because the degree bound has the structure of a tropical semiring.</p>\n<p>Is there a name for this concept? The first thing that came to mind was \"Tropical Polynomial\" but <a href=\"#narrow/stream/113489-new-members/topic/Tropical.20polynomials/near/390037418\">per this discussion</a>, I think this just means \"polynomial over a tropical ring\".</p>",
        "id": 399788444,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698866762
    },
    {
        "content": "<p>What is the tropical ring? Tropicals are a semiring normally.</p>",
        "id": 399789234,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698866991
    },
    {
        "content": "<p>Good point, I guess I mean semiring, will edit.</p>",
        "id": 399789554,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698867093
    },
    {
        "content": "<p>Could you explain a little more what you mean by \"degree bound\"?  Specifically, how do you define multiplication.</p>\n<p>Say the bound is 1, so that <code>X</code> should be allowed.  Shouldn't <code>X * X</code> not be allowed?</p>",
        "id": 399797397,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698869854
    },
    {
        "content": "<p>The type is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TropicallyBoundPolynomials</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">Tropical</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">//</span> <span class=\"n\">p.1.natDegree</span> <span class=\"bp\">≤</span> <span class=\"n\">p.2.untrop</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 399797470,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698869884
    },
    {
        "content": "<p>Multiplication is defined as <code>(p1, b1) * (p2, b2) = (p1 * p2, b1 + b2)</code></p>",
        "id": 399797566,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698869928
    },
    {
        "content": "<p>So <code>(X, 1) * (X, 1) = (X^2, 2)</code></p>",
        "id": 399797651,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698869981
    },
    {
        "content": "<p>And addition is <code>(p1, b1) + (p2, b2) = (p1 + p2, max b1 b2)</code></p>",
        "id": 399797883,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698870090
    },
    {
        "content": "<p>So each polynomial appears <em>a lot</em> of times as the first coordinate, right?</p>",
        "id": 399798113,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698870197
    },
    {
        "content": "<p>Yes</p>",
        "id": 399798189,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698870237
    },
    {
        "content": "<p>Hmm,  is it really a Semiring?</p>",
        "id": 399798294,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698870272
    },
    {
        "content": "<p>And even if you start with a <code>CommRing</code>, what you obtain is not even cancellative.</p>",
        "id": 399798299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698870275
    },
    {
        "content": "<p>Good point. Do we have a typeclass for whatever this is?</p>",
        "id": 399798512,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698870380
    },
    {
        "content": "<p>It <em>might</em> be a <code>Semiring</code>, but it is certainly not much more than a <code>Semiring</code>, even if <code>R</code> is a <code>Field</code>.</p>",
        "id": 399798861,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698870534
    },
    {
        "content": "<p>I'm trying to figure out whether 0 is (0, 0) or if I should add infinity to the set of bounds and let the zero be (0, infinity)</p>",
        "id": 399798901,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698870552
    },
    {
        "content": "<p>Btw, the <code>compute_degree</code> tactic exploits this and basically operates under the assumption that the actual degree of what you feed it is the least nat satisfying all the constraints.</p>",
        "id": 399798960,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698870582
    },
    {
        "content": "<p><code>(0, 0)</code> is not zero, since <code>(X,1) * (0,0) = (0,1)</code> and not <code>(0,0)</code>.</p>",
        "id": 399799155,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698870671
    },
    {
        "content": "<p>So you should maybe use <code>degree</code> rather than <code>natDegree</code>.</p>",
        "id": 399799188,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698870685
    },
    {
        "content": "<p>Well, that's adding a bottom in the wrong direction, right?</p>",
        "id": 399799313,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698870732
    },
    {
        "content": "<p>Even if I'm using degree, <code>(X,1) * (0,bot) = (0,1)</code></p>",
        "id": 399799354,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698870754
    },
    {
        "content": "<p>What I need, I think, is to take the order dual of (Nat with Top)</p>",
        "id": 399799411,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698870785
    },
    {
        "content": "<p>Hmm, I think that doesn't work either</p>",
        "id": 399799614,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698870900
    },
    {
        "content": "<p>Yes, it seems that <code>(0, top)</code> is not a zero for addition, right?</p>",
        "id": 399799687,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698870939
    },
    {
        "content": "<p>Because it absorbs all degrees to <code>top</code>.</p>",
        "id": 399799710,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698870951
    },
    {
        "content": "<p>So, <code>(0,top) + (X,1) = (X,top)</code>, but if <code>(0,top)</code> were <code>0</code>, then the answer would have to be <code>(X,1)</code>.</p>",
        "id": 399799917,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698871024
    },
    {
        "content": "<p>Yes, I think there's a problem either way<br>\nif the zero is (0,0) then (x, 1) * (0, 0) = (0, 1), so mul_zero fails<br>\nif the zero is (0,top) then (x, 1) + (0, top) = (x, top), so add_zero fails</p>",
        "id": 399799972,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698871066
    },
    {
        "content": "<p>Shucks</p>",
        "id": 399800005,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698871084
    },
    {
        "content": "<p>I'm still a bit confused where I went wrong. Wikipedia says there is such a thing as a \"<a href=\"https://en.wikipedia.org/wiki/Tropical_geometry\">max tropical semiring</a>\"</p>",
        "id": 399801785,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698871996
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">Tropical</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Foo</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Prod.instCommSemiring</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">--failed to synthesize CommSemiring (Tropical (WithBot ℕ)ᵒᵈ)</span>\n</code></pre></div>\n<p>How do I get it to not compain about failed to synthesize and let me try to synthesize this myself?</p>",
        "id": 399801891,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698872043
    },
    {
        "content": "<p>I want to apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Tropical.instCommSemiringTropical#doc\">docs#Tropical.instCommSemiringTropical</a></p>",
        "id": 399802229,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698872198
    },
    {
        "content": "<p>I guess the problem is that while Nat is a monoid, (WithBot Nat) is not?</p>",
        "id": 399802302,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698872234
    },
    {
        "content": "<p>Something like <code>apply (config := { allowSynthFailures := true }) ...</code></p>",
        "id": 399803386,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698872660
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 399805167,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698873594
    },
    {
        "content": "<p>Ok last ditch effort. If I artificially redefine the type as <code>Option { p : (Polynomial R × Tropical (OrderDual ℕ)) // p.1.natDegree ≤ p.2.untrop }</code> and define <code>none</code> as the zero and give it the behavior to satisfy <code>add_zero, mul_zero</code>, is it a Semiring then?</p>",
        "id": 399805516,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698873774
    },
    {
        "content": "<p>This actually works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Degree.Definitions</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">__</span> <span class=\"o\">:</span> <span class=\"n\">Top</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">le_top</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">bot_le</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"n\">top_add'</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">WithBot.bot_add</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">Tropical</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 399805725,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698873891
    },
    {
        "content": "<p>Wait what? What is the zero of this instance and what is <code>(X, 1) * 0</code>?</p>",
        "id": 399805939,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698873985
    },
    {
        "content": "<p>The zero in <code>Polynomial R × Tropical (OrderDual (WithBot ℕ))</code> is surely <code>(0, 0)</code>, and <del>the zero in <code>OrderDual (WithBot ℕ)</code> should be <code>toDual ↑0</code>.</del> (sorry, forgot about <code>Tropical</code>)<br>\n<code>(X, 1) * 0</code> has to be 0 for it to be a semiring.</p>",
        "id": 399806530,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698874305
    },
    {
        "content": "<p>I am excited but confused. What is the definition of the multiplication operation then?</p>",
        "id": 399806740,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698874426
    },
    {
        "content": "<p>The zero in <code>Tropical (OrderDual (WithBot ℕ))</code> is defined by<br>\n<code>Tropical.instZeroTropical = { zero := Tropical.trop ⊤ }</code>, so <code>trop (toDual ⊥)</code> in this case.<br>\nAnd multiplication is addition on <code>WithBot ℕ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tropical.instMulTropical</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tropical.trop</span> <span class=\"o\">(</span><span class=\"n\">Tropical.untrop</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">Tropical.untrop</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 399806821,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698874469
    },
    {
        "content": "<p>Ah ok, maybe I was wrong about Damiano's comment being wrong about needing to do <code>degree</code> rather than <code>natDegree</code></p>",
        "id": 399806992,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698874579
    },
    {
        "content": "<p>Yeah with <code>degree</code> I think the carrier should be <code>{p | p.1.degree ≤ OrderDual.ofDual (p.2.untrop)}</code></p>",
        "id": 399807059,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698874623
    },
    {
        "content": "<p>I suspect that what is going on is that the product of semirings is a semiring (pretty clear), but then I at least got confused on whether we were supposed to take <code>max</code> or <code>min</code> on the tropical component.</p>",
        "id": 399807125,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698874661
    },
    {
        "content": "<p>Needing to use <code>OrderDual</code> is unhelpful for clarity on that front.</p>",
        "id": 399807216,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698874703
    },
    {
        "content": "<p>Also, both conventions <code>max</code> and <code>min</code> are used in informal maths for tropical semirings.</p>",
        "id": 399807354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698874785
    },
    {
        "content": "<p>I think I can definitively say that what we are interested in is what wikipedia calls the \"max tropical semiring\".</p>",
        "id": 399807446,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698874823
    },
    {
        "content": "<p>So the conclusion is that the identity on the tropical side is <code>bot</code>, since the operation is <code>max</code>, right?</p>",
        "id": 399807704,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698874991
    },
    {
        "content": "<blockquote>\n<p>multiplication is addition on WithBot ℕ</p>\n</blockquote>\n<p>So I guess the point is that the bot absorbs everything, so the zero can be (0, bot) and when I multiply this by anything and get (0, bot)</p>",
        "id": 399807737,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698875015
    },
    {
        "content": "<p>My mental image of trop is \"min-plus algebras\", so I will get confused about this frequently.</p>",
        "id": 399807779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698875043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/116395-maths/topic/Tropically.20degree-bound.20polynomials/near/399807737\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>multiplication is addition on WithBot ℕ</p>\n</blockquote>\n<p>So I guess the point is that the bot absorbs everything, so the zero can be (0, bot) and when I multiply this by anything and get (0, bot)</p>\n</blockquote>\n<p>I think so: what you are calling \"multiplication\" is the operation on the product that is multiplication on polynomials.  That operation converts to <em>addition</em> on the tropical component: when you add anything to <code>bot</code> you get <code>bot</code>.</p>",
        "id": 399808150,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698875234
    },
    {
        "content": "<p>Anyway this is what you originally want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Degree.Definitions</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">__</span> <span class=\"o\">:</span> <span class=\"n\">Top</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">le_top</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">bot_le</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"n\">top_add'</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">WithBot.bot_add</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">Tropical</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Subsemiring</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">Tropical</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">p.1.degree</span> <span class=\"bp\">≤</span> <span class=\"n\">OrderDual.ofDual</span> <span class=\"n\">p.2.untrop</span><span class=\"o\">}</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p.1.degree_mul_le</span> <span class=\"n\">q.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.degree_one_le</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p.1.degree_add_le</span> <span class=\"n\">q.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">max_le_max</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.degree_zero.le</span>\n</code></pre></div>",
        "id": 399808368,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698875344
    },
    {
        "content": "<p>Do I see that you need to dualise what you need to input in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Tropical#doc\">docs#Tropical</a> ? <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> and I concluded a while back that it was probably better to define addition on <code>Tropical</code> using <code>max</code>, not <code>min</code>.</p>",
        "id": 399868293,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698908621
    },
    {
        "content": "<p>To handle these two classical normalizations, what's the best move? Reformulate everything in terms of a well chosen one? ‘max‘, ‘*‘ would also be natural in certain contexts. Unfortunately, I have no axiomatic characterization to offer.</p>",
        "id": 399974584,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698940963
    }
]