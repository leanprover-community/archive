[
    {
        "content": "<p>Mathlib has R-algebra morphisms but I cannot find a definition for R-algebra equivalences, and I'd like to make use of the concept. Am I missing something, or should I just PR a definition + basic properties?</p>",
        "id": 196684284,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793239
    },
    {
        "content": "<p>I was about to say \"aargh no, all that algebra stuff is built on <code>is_ring_hom</code> which needs to be replaced by <code>ring_hom</code> first\", but I see that <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> has refactored!</p>",
        "id": 196684970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588793491
    },
    {
        "content": "<p>Well I can hold off of course.</p>",
        "id": 196685171,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793563
    },
    {
        "content": "<p>No I can't see any reason not to make a PR (<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> might want to comment though). Making an \"equiv\" PR is actually a rather nice kind of PR to make.</p>",
        "id": 196685271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588793609
    },
    {
        "content": "<p>OK, I'll go for it and if someone disagrees I can just close the PR.</p>",
        "id": 196685351,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793641
    },
    {
        "content": "<p>You prove <a href=\"http://algebra_equiv.id\" title=\"http://algebra_equiv.id\">algebra_equiv.id</a> and algebra_equiv.comp, and a few more bits and bobs and it's all over.</p>",
        "id": 196685412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588793647
    },
    {
        "content": "<p>Yep</p>",
        "id": 196685460,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793666
    },
    {
        "content": "<p>You should look to see what is done with e.g. mul_equiv first.</p>",
        "id": 196685465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588793668
    },
    {
        "content": "<p>Thanks, will do.</p>",
        "id": 196685482,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793676
    },
    {
        "content": "<p>You should extend <code>ring_equiv</code> copying an extra axiom from <code>alg_hom</code>.</p>",
        "id": 196685649,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588793749
    },
    {
        "content": "<p>Thanks! I actually have a working local definition and that's what I did.</p>",
        "id": 196685749,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793778
    },
    {
        "content": "<p>OK, then I'll wait till you PR it.</p>",
        "id": 196685791,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588793796
    },
    {
        "content": "<p>I wish we had better support for superstructures or some tactic to copy standard <code>equiv</code> theory to a new kind of <code>*_equiv</code>.</p>",
        "id": 196685870,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588793847
    },
    {
        "content": "<p>Oh wait, sorry that's not what I did.</p>",
        "id": 196685873,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793848
    },
    {
        "content": "<p>But I can do that.</p>",
        "id": 196685879,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793851
    },
    {
        "content": "<p>What did you do?</p>",
        "id": 196685893,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588793858
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n<span class=\"kn\">structure</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A&#39;</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"err\">≃</span> <span class=\"n\">A&#39;</span> <span class=\"c1\">-- Probably better to extend ≃+*</span>\n</code></pre></div>",
        "id": 196685896,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793861
    },
    {
        "content": "<p>Note that <code>alg_hom</code> includes unnecessary axioms like <code>map_zero'</code></p>",
        "id": 196685971,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588793886
    },
    {
        "content": "<p>Yeah I did notice that.</p>",
        "id": 196685988,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793895
    },
    {
        "content": "<p>OK I have one other bit of work to finish first and then I'll pick this up and extend <code>ring_equiv</code> as you suggest.</p>",
        "id": 196686056,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588793943
    },
    {
        "content": "<p>BTW, other <code>equiv</code>s follow naming scheme <code>*_equiv</code>, not <code>*.equiv</code>. So it should be <code>alg_equiv</code> to match <code>alg_hom</code>.</p>",
        "id": 196686165,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588793992
    }
]