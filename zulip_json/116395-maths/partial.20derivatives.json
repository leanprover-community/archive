[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partial_deriv</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- p.sum $ λ v r, C r * (add_monoid.smul (v i) (X i ^ (v i - 1)) * v.prod (λ j n, if i = j then 1 else (mv_polynomial.X j)^n))</span>\n<span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- #exit</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_zero_index</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">zero_apply</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">monomial</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hji</span> <span class=\"n\">hij</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hji</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hij</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hij</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hji</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hji</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">C_1</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">C_mul&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">smul_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">hfv</span> <span class=\"n\">hs</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">monomial</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">smul_single</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_smul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_smul_index&#39;</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_sum</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">smul_single</span><span class=\"o\">,</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">j</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hij</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">hkj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hkj</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hjw</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hjw</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">hkj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hkj</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hjw</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hjw</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">r</span> <span class=\"n\">p</span> <span class=\"n\">hpv</span> <span class=\"n\">hr</span> <span class=\"n\">ihp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">partial_deriv_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">ihp</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm₄</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">q</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"n\">s</span> <span class=\"n\">q</span> <span class=\"n\">hqw</span> <span class=\"n\">hs</span> <span class=\"n\">ihq</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">partial_deriv_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">ihq</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm₄</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_smul_one</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_smul_one</span> <span class=\"n\">w</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_eq_smul_one</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv_smul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_smul</span><span class=\"o\">,</span> <span class=\"n\">partial_deriv_smul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul&#39;&#39;</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm₄</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm₄</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">partial_deriv</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_mul_single</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">],</span> <span class=\"n\">erw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span> <span class=\"n\">erw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">hw</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">vars_add</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">⊆</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_add</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span>\n  <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">degrees_add</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">sup_le</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">vars_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">⊆</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"err\">∪</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">vars</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">vars</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_add</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"o\">(</span><span class=\"n\">degrees_mul</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">vars_X_subset</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"o\">(</span><span class=\"n\">degrees_X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hj</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">of_not_mem_vars</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∉</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">not_mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hiv</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">to_multiset</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">degrees</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_sup</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">to_multiset</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">single_le_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hiv</span><span class=\"o\">,</span>\n<span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"n\">h1</span> <span class=\"err\">$</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">subset_of_le</span> <span class=\"n\">h2</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"err\">$</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hiv</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_cons_self</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_deriv_of_not_mem_vars</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∉</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">partial_deriv</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_not_mem_vars</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mv_polynomial</span>\n</pre></div>",
        "id": 170727198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562942573
    },
    {
        "content": "<p>PR-ready?</p>",
        "id": 170727214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562942584
    },
    {
        "content": "<p>Looks pretty good to me. Maybe <code>C_mul''</code> can be called <code>C_mul_eq_smul</code>?</p>",
        "id": 170728887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562943791
    },
    {
        "content": "<p>I've started thinking about a proper way to introduce partial derivatives into <code>mathlib</code>.</p>",
        "id": 212204845,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785022
    },
    {
        "content": "<p>It's clear how to define <code>pderiv</code> for a function <code>f : (fin n → k) → E</code></p>",
        "id": 212205074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785474
    },
    {
        "content": "<p>But this definition won't work, e.g., for <code>f : k × k → E</code> or <code>f : k → E</code>, and this doesn't sound good for a mathematician.</p>",
        "id": 212205083,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785526
    },
    {
        "content": "<p>I suggest introducing something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_canonical_basis</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212205205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785770
    },
    {
        "content": "<p>With instances for <code>σ → k</code>, <code>euclidean_space</code>, <code>E × F</code> (using <code>σ = σE ⊕ σF</code>), <code>k</code> (using <code>σ = unit</code>).</p>",
        "id": 212205257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> What do you think?</p>",
        "id": 212205276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601785905
    },
    {
        "content": "<p>We have the same problem in the omin repository. We introduced a <code>has_coordinates</code> typeclass.</p>",
        "id": 212207352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you think it is ready for PR?</p>",
        "id": 212207353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790104
    },
    {
        "content": "<p>(Of course it doesn't assume any <code>normed*</code> stuff. So we'll have to think whether it is good enough, or maybe you need some <code>has_normed_coordinates</code> extending it.</p>",
        "id": 212207406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790170
    },
    {
        "content": "<p>Actually, we can just upgrade from <code>linear_equiv</code> to <code>continuous_linear_equiv</code> using finiteness of <code>σ</code>.</p>",
        "id": 212207478,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601790312
    },
    {
        "content": "<p>Could you please post a link to your <code>has_coordinates</code> code?</p>",
        "id": 212207505,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601790362
    },
    {
        "content": "<p><a href=\"https://github.com/rwbarton/lean-omin/blob/master/src/o_minimal/coordinates.lean\">https://github.com/rwbarton/lean-omin/blob/master/src/o_minimal/coordinates.lean</a></p>",
        "id": 212207598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790487
    },
    {
        "content": "<p>There is also Patrick's <code>has_uncurry</code> class in mathlib, which might be the right solution for your use case</p>",
        "id": 212207670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601790615
    },
    {
        "content": "<p>No, it will uncurry <code>f : k × k → E</code> to <code>k → k → E</code>, not to <code>(fin 2 → k) → E</code>.</p>",
        "id": 212207864,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601790998
    },
    {
        "content": "<p>Or <code>(unit ⊕ unit → k) → E</code></p>",
        "id": 212207874,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601791028
    },
    {
        "content": "<p>I would prefer to have any <code>(σ : Type*) [fintype σ]</code> as an index type, not necessarily <code>fin n</code>.</p>",
        "id": 212207942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601791164
    },
    {
        "content": "<p>Because for <code>E × F</code> it's easier to deal with <code>sum.inl k</code> than some <code>fin</code> magic.</p>",
        "id": 212207971,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601791204
    },
    {
        "content": "<p>And I need coordinates to be linear. So, probably I'll add another typeclass.</p>",
        "id": 212208020,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601791318
    },
    {
        "content": "<p>There is still the issue that, on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>⊕</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E \\oplus F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, some people call partial derivative the derivative with respect to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> (so, it's not a number, it's really a matrix). But it is impossible to get a notion that covers all these variants, so I think your idea is a very nice one to cover one-dimensional partial derivatives.</p>",
        "id": 212210858,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1601796684
    },
    {
        "content": "<p>We can mention that <code>∂f/∂x : E →L[k] G</code> for <code>f : E × F → G</code> can be written as <code>fderiv (λ x, f (x, y))</code>.</p>",
        "id": 212211037,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601797027
    },
    {
        "content": "<p>Yes, sure!</p>",
        "id": 212211038,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1601797059
    },
    {
        "content": "<p>In general, the problem is how to replace a given fin.dim. R-vector space with some fixed model R^ι (ι a finite type) or R^n in a conventional way. For some purposes the order of coordinates is irrelevant, and then R^ι is enough, but for other purposes the order really matters and you need R^n. For example, consider row reduction of the matrices that represent linear maps, or classifying subspaces by how they meet the standard flag inside R^n. Likewise in model theory, quantifier elimination works by eliminating one variable at a time, say, the \"last\" one, and for this it's again better to work with R^(n+1) than with fintypes. (Actually row reduction of matrices is basically a special case of this, I think.)</p>",
        "id": 212226947,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601824017
    },
    {
        "content": "<p>So, unless we think it makes sense to have both concepts, I think the R^n version is better.</p>",
        "id": 212227059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601824205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/partial.20derivatives/near/212207971\">said</a>:</p>\n<blockquote>\n<p>Because for <code>E × F</code> it's easier to deal with <code>sum.inl k</code> than some <code>fin</code> magic.</p>\n</blockquote>\n<p>With some version of the \"<a href=\"https://github.com/rwbarton/lean-omin/blob/master/src/o_minimal/coordinates.lean#L116\">reindexing</a>\" concept you can hide the details of exactly how the coordinates of <code>(x, y) : E × F</code> are related to those of <code>x : E</code> and <code>y : F</code>.</p>",
        "id": 212227168,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601824419
    },
    {
        "content": "<p>The main advantage of a <code>fintype</code> version would be that you can have an instance for <code>ι → R</code> itself whose coordinates are given by the identity and so, in particular, the coordinates for <code>(ι ⊕ ι') → R</code> are related to those for <code>ι → R</code> and <code>ι' → R</code> specifically by composing with <code>sum.inl</code> and <code>sum.inr</code>. In lean-omin this has never come up because we have actually never had a use for specifically <code>ι → R</code> with <code>[fintype ι]</code>. But, you could have an instance which uses <code>choice</code> to pick an ordering on <code>ι</code> and uses it to define coordinates. In that case, there would be no specific relationship between the coordinates for <code>(ι ⊕ ι') → R</code> and <code>ι → R</code> and <code>ι' → R</code>. I claim this doesn't really matter because you can describe the coordinate change as a reindexing, anyways. However, probably a sensible thing to do would be to only have a global instance when <code>ι</code> is an instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_enum\">docs#fin_enum</a> and then ensure that <code>ι ⊕ ι'</code> has a sensible <code>fin_enum</code> instance.</p>",
        "id": 212227556,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825064
    },
    {
        "content": "<p>Is <code>R^ι</code> with a <code>decidable_linear_order</code> on <code>ι</code> any worse than <code>fin n</code>?</p>",
        "id": 212227561,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601825077
    },
    {
        "content": "<p>Another consideration about the <code>fintype</code> version is that either you introduce a second universe variable, or in the <code>ι → R</code> instance you only handle <code>ι</code> in <code>Type 0</code>.</p>",
        "id": 212227586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825156
    },
    {
        "content": "<p>It is worse because <code>fin n</code> has a bunch of API that is not conveniently available on an arbitrary finite decidable linear order, as well as somewhat better definitional behavior.</p>",
        "id": 212227628,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825188
    },
    {
        "content": "<p>(Also, conceptually the point of this whole construction is to reduce some problem/construction from general fin.dim. vector spaces to specific model spaces, so why stop at <code>R^ι</code> when you could go all the way to <code>R^n</code>?)</p>",
        "id": 212227687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825287
    },
    {
        "content": "<p>Once you're working in this setting, the general objects are like <code>(V : Type*) [has_coordinates R V]</code> and the specific objects are like <code>fin n -&gt; R</code>, so there's no longer any special significance to <code>ι → R</code> with <code>[fintype ι]</code>.</p>",
        "id": 212227894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825659
    },
    {
        "content": "<p>It only comes up if you have a <code>[fintype ι]</code> that comes from outside, so to speak. And then perhaps it would be better to have <code>[fin_enum ι]</code> which is basically the non-linear analogue of this setup.</p>",
        "id": 212227914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825730
    },
    {
        "content": "<p>OK, I'll try <code>fin n</code>. Thank you for the explanation.</p>",
        "id": 212228022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601825902
    },
    {
        "content": "<p>I should probably also add that in lean-omin this reindexing stuff is only ever used to prove <code>Prop</code>s, but you would probably also want to for example say what the partial derivatives of <code>prod.fst : E \\x F -&gt; E</code> are, so that might affect the design.</p>",
        "id": 212228598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601826790
    },
    {
        "content": "<p>I'll just declare an instance on <code>E × F</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.sum_fin_sum_equiv\">docs#equiv.sum_fin_sum_equiv</a>.</p>",
        "id": 212228754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601826984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> what is the current status of partial derivatives and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> functions? Say for instance I have a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mi>E</mi><mo>×</mo><mi>F</mi><mo>→</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">F : E \\times F \\to G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>. How am I meant to express that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∂</mi><mi>F</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">∂</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">\\partial F/\\partial e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">/</span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">e</span></span></span></span> is a continuous function?</p>",
        "id": 261640749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637069756
    },
    {
        "content": "<p>And how should I prove this? Is it already somewhere?</p>",
        "id": 261640895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637069813
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∂</mi><mi>F</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">∂</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">\\partial F / \\partial e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">/</span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">e</span></span></span></span> is just the composition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">DF</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> with the injection of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>×</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E \\times F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. I don't think we have a special notation for it (unless Yury has introduced something when doing the implicit function theorem, where this kind of thing is used all the time).</p>",
        "id": 261707076,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1637096934
    },
    {
        "content": "<p>I had a look in the implicit function file, having exactly this idea in mind, but I didn't see anything relevant.</p>",
        "id": 261707314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637097057
    },
    {
        "content": "<p>The continuity issue is related to the trichotomy of <code>has_fderiv</code> <code>fderiv</code> and <code>times_cont_diff</code> which complicates everything.</p>",
        "id": 261707519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637097162
    },
    {
        "content": "<p>And actually I think what I needed when I posted this message was the continuity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>↦</mo><mi mathvariant=\"normal\">∂</mi><mi>F</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">∂</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e \\mapsto \\partial F/\\partial x(e, x_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">/</span><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> or something like this which makes things even more complicated in Lean (but still obvious on paper).</p>",
        "id": 261707624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637097224
    },
    {
        "content": "<p>I did not introduce any notation. Probably you need something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.compL\">docs#continuous_linear_map.compL</a> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.inl\">docs#continuous_linear_map.inl</a>. To make things worse, you might need to use <code>flip</code> on <code>compL</code>.</p>\n<p>Do other proof assistants have automation for things like this? How does it work?</p>",
        "id": 261861314,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637188856
    },
    {
        "content": "<p>Hello everyone, <br>\nI am wondering how to work around the partial derivatives, since I realized they are not formalized. Under the Schwartz space page #<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/schwartz_space.html#schwartz_map\">analysis.schwartz_space</a> they say they have defined rapid decay in such a way <code> ‖x‖^k * ‖iterated_fderiv ℝ n f x‖ &lt; C. This approach completely avoids using partial derivatives as well as polynomials</code>. <br>\nI am just not sure how to work with <code>x : fin d → ℝ</code> then. As an undergraduate student, I am sure I have enough mathematical background to fully work around partial derivatives in Lean.  I have yet to find a way to transform <code>iterated_fderiv </code> into something I can work with. In one dimension, I used that <code>‖(λ (x : ℝ), eval ↑x p * cexp (-a * ↑x ^ 2)) x‖ ≤ C</code>.<br>\nAny help would be greatly appreciated as I am a bit stuck at the moment.<br>\nKind regards,<br>\nSonia</p>",
        "id": 344039484,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679590077
    },
    {
        "content": "<p>It probably depends on what you want to do with the partial derivatives. I may misunderstand the question, but I'll have a go.<br>\nIf f is a function on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(e_1,\\ldots,e_k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is the canonical basis, then <code>iterated_fderiv R n f x</code> will be a n-linear function on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>, let's call it <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F_n(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>. You can go between it and the partial derivatives by the formula:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><msup><mi mathvariant=\"normal\">∂</mi><mi>n</mi></msup><mi>f</mi></mrow><mrow><msup><mi mathvariant=\"normal\">∂</mi><msub><mi>n</mi><mn>1</mn></msub></msup><msub><mi>x</mi><mn>1</mn></msub><mo>…</mo><msup><mi mathvariant=\"normal\">∂</mi><msub><mi>n</mi><mi>k</mi></msub></msup><msub><mi>x</mi><mi>k</mi></msub></mrow></mfrac><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>k</mi></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial^n f}{\\partial^{n_1}x_1\\ldots\\partial^{n_k}x_k}(x)=F_n(x)(e_1,\\ldots,e_1,\\ldots,e_k,\\ldots,e_k),</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.2074em;vertical-align:-0.836em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5904em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5904em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1512em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span></span></span></span></span></p>\n<p>where each basis element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is repeated <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">n_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> times, at least for f nice enough and if I didn't get confused in my indices. Here I am implicitly assuming that Schwartz's theorem holds, so it doesn't matter in which order I take the partial derivatives; this means that the <code>iterated_fderiv R f n x</code> should be a symmetric multilinear map if f is nice enough (one problem being to give optimal conditions on f for this to hold). I couldn't find that statement in mathlib, except for n=2 (see <code>fderiv_symmetric</code>); technically the case n=2 implies the general case but it might be a pain to prove.</p>",
        "id": 344049094,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1679592242
    },
    {
        "content": "<p>Sonia, we need a more specific question to give you a more specific answer.</p>",
        "id": 344049806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1679592410
    },
    {
        "content": "<p>My students have been finding this issue as well. Basically there are vector spaces, and there is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>. If you work with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> then you get concrete vectors (lists of numbers) and matrices and things. If you work with vector spaces then you get abstract vectors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> and linear maps. If you choose a basis then there's a dictionary between one language and the other. But mathlib prefers to not choose a basis if it can avoid doing so.</p>",
        "id": 344092937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679602805
    },
    {
        "content": "<p>I also prefer to avoid choosing a basis, including when I'm teaching! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 344108690,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679608342
    },
    {
        "content": "<p>I think the answer to the question \"how do I prove that something is a Schwartz function\" is to hold your breath until Sebastien's PR that gives API for the norms of <code>iterated_fderiv</code> exists.</p>",
        "id": 344121463,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679613724
    },
    {
        "content": "<p>You should also not work with <code>fin d → ℝ</code>, but with <code>inner_product_space</code>.</p>",
        "id": 344122276,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679614183
    },
    {
        "content": "<p>ie don't choose a basis :-)</p>",
        "id": 344126329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679616593
    },
    {
        "content": "<p>yes, I wanted to give the answer to the question what is the correct level of generality.</p>",
        "id": 344130278,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679618636
    },
    {
        "content": "<p>If you really want to work on this now, you could start from the branch  <a href=\"https://github.com/leanprover-community/mathlib/pull/18643\">#18643</a>, in which I prove bounds for the <code>n</code>-th derivative of a composition. But note that this is not in mathlib master yet!</p>",
        "id": 344209267,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1679651518
    },
    {
        "content": "<p>Hello again everyone, <br>\nThank you so much for your input :D <br>\nSo to answer Patrick's question about more information: I am working with Stein &amp; Shakarchi's book on Fourier Analysis, and specifically Chapter: The Fourier Transform on ℝ^d. I ideally want to formalize theorem 2.4. <a href=\"/user_uploads/3121/iNgZe-7WfvsYPOjhN9CjZ8Nk/image.png\">image.png</a> <br>\nThe norm needs to be Euclidean norm. And the derivative is defined as the following <a href=\"/user_uploads/3121/Zkj8A4RTEPhJGwxzBzSzDAWq/image.png\">image.png</a> thus I need to prove <a href=\"/user_uploads/3121/hvr1GLYaXWTDLoKaJxx8NtCc/image.png\">image.png</a>.<br>\nNow, I am not sure how the the <code>{n: N} ‖iterated_fderiv ℝ n f x‖</code> is equivalent to the multi-index β, or if I am misunderstanding this. <br>\nI was thinking I could just try to work with my own definition between the connection between <code>iterated_fderiv R n f x </code>  and the partial derivative in defined in the book. But I would be nervous to build all of my work on a potentially incorrect definition :)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iNgZe-7WfvsYPOjhN9CjZ8Nk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/iNgZe-7WfvsYPOjhN9CjZ8Nk/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Zkj8A4RTEPhJGwxzBzSzDAWq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Zkj8A4RTEPhJGwxzBzSzDAWq/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hvr1GLYaXWTDLoKaJxx8NtCc/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hvr1GLYaXWTDLoKaJxx8NtCc/image.png\"></a></div>",
        "id": 344314376,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679675131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/116395-maths/topic/partial.20derivatives/near/344049094\">said</a>:</p>\n<blockquote>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><msup><mi mathvariant=\"normal\">∂</mi><mi>n</mi></msup><mi>f</mi></mrow><mrow><msup><mi mathvariant=\"normal\">∂</mi><msub><mi>n</mi><mn>1</mn></msub></msup><msub><mi>x</mi><mn>1</mn></msub><mo>…</mo><msup><mi mathvariant=\"normal\">∂</mi><msub><mi>n</mi><mi>k</mi></msub></msup><msub><mi>x</mi><mi>k</mi></msub></mrow></mfrac><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>F</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>k</mi></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial^n f}{\\partial^{n_1}x_1\\ldots\\partial^{n_k}x_k}(x)=F_n(x)(e_1,\\ldots,e_1,\\ldots,e_k,\\ldots,e_k),</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.2074em;vertical-align:-0.836em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5904em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5904em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1512em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span></span></span></span></span><br>\n</p>\n</blockquote>\n<p>Looks very similar, except for the norm at </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>a</mi><msup><mi>l</mi><mi mathvariant=\"normal\">∣</mi></msup><mi>n</mi><mi mathvariant=\"normal\">∣</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\"> partial^ |n| f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">ia</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∣</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span></p>\n<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/116395-maths/topic/partial.20derivatives/near/344049094\">said</a>:</p>\n<blockquote>\n<p><code>fderiv_symmetric</code></p>\n</blockquote>\n<p>I could not find this in mathlib</p>",
        "id": 344315364,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679675374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/partial.20derivatives/near/344092937\">said</a>:</p>\n<blockquote>\n<p>My students have been finding this issue as well. </p>\n</blockquote>\n<p>What do you then tell them? Do they manage to work around it, or do they just not work further on it? <br>\nHow do you not choose a basis?</p>",
        "id": 344316116,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679675551
    },
    {
        "content": "<p>This is a little bit related, I was trying to perhaps switch from <code>R^d</code> to  the euclidean norm space, and I was not allowed to apply <code> cont_diff_norm_sq</code> . I haven't tried with <code>inner_product_space</code>, I will try that later, but for now I am unsure why it is upset. Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> </p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import data.nat.choose.sum\nimport data.complex.exponential\nimport analysis.normed_space.exponential\nimport analysis.special_functions.log.basic\nimport data.polynomial.basic\nimport data.polynomial.eval\nimport analysis.schwartz_space\nimport analysis.normed_space.exponential\nimport tactic\nimport topology.basic\nimport analysis.special_functions.log.base\nimport analysis.calculus.cont_diff\nimport analysis.calculus.iterated_deriv\nimport analysis.special_functions.exp_deriv\nimport number_theory.dioph\nimport analysis.complex.real_deriv\nimport analysis.special_functions.gaussian\nimport analysis.inner_product_space.calculus\n\nopen complex\n\nlemma  complex.cont_diff_coe2  {d:ℕ } {f : ((fin d)→ ℝ)→ ℝ} (hf : cont_diff ℝ   ⊤ (λ (x : (fin d)→ ℝ  ), f x)): cont_diff ℝ ⊤ (λ y,  (f y : ℂ)) :=\nbegin\n  apply cont_diff.comp _ hf,\n  show cont_diff ℝ _ complex.of_real_clm,\n  exact of_real_clm.cont_diff,\nend\n\n\nlemma  complex.cont_diff_coe2_euclid  {d:ℕ } {f : euclidean_space ℝ (fin d)→ ℝ} (hf : cont_diff ℝ   ⊤ (λ (x : euclidean_space ℝ (fin d)  ), f x)): cont_diff ℝ ⊤ (λ y,  (f y : ℂ)) :=\nbegin\n  apply cont_diff.comp _ hf,\n  show cont_diff ℝ _ complex.of_real_clm,\n  exact of_real_clm.cont_diff,\nend\n\n\n\ndef gaussian_complex  {d:ℕ } {a:ℂ} (ha:0&lt;a.re): schwartz_map (fin d -&gt; ℝ)   ℂ :=\n  { to_fun := λ x : (fin d -&gt; ℝ), complex.exp (-a * ‖x‖^2),\n    smooth' :=\n    begin\n      refine cont_diff.comp _ _,\n      apply cont_diff.cexp,\n      exact cont_diff_id,\n      refine cont_diff.mul _ _,\n      exact cont_diff_const,\n      norm_cast,\n      refine complex.cont_diff_coe2 _,\n      convert cont_diff_norm_sq,\n    end,\n    decay' := sorry,}\n\n\n\ndef gaussian_complex_euclidean_space  {d:ℕ } {a:ℂ} (ha:0&lt;a.re): schwartz_map (euclidean_space ℝ (fin d))   ℂ :=\n  { to_fun := λ x : (euclidean_space ℝ (fin d)), complex.exp (-a * ‖x‖^2),\n    smooth' :=\n    begin\n      refine cont_diff.comp _ _,\n      apply cont_diff.cexp,\n      exact cont_diff_id,\n      refine cont_diff.mul _ _,\n      exact cont_diff_const,\n      norm_cast,\n      refine complex.cont_diff_coe2_euclid _,\n      convert cont_diff_norm_sq,\n    end,\n    decay' := sorry,}\n</code></pre></div>",
        "id": 344319222,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679676358
    },
    {
        "content": "<p>You would have an easier time if you follow the advise we are giving:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span>  <span class=\"n\">complex.cont_diff_coe2_euclid</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span>   <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)):</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cont_diff.comp</span> <span class=\"n\">_</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">complex.of_real_clm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">of_real_clm.cont_diff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">gaussian_complex_euclidean_space</span>  <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a.re</span><span class=\"o\">):</span> <span class=\"n\">schwartz_map</span> <span class=\"n\">E</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">smooth'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">refine</span> <span class=\"n\">cont_diff.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">cont_diff.cexp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cont_diff_id</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">cont_diff.mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cont_diff_const</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">complex.cont_diff_coe2_euclid</span> <span class=\"n\">cont_diff_norm_sq</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">decay'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,}</span>\n</code></pre></div>",
        "id": 344391634,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679703756
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><code>fderiv_symmetric</code></p>\n</blockquote>\n<p>I could not find this in mathlib</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/fderiv_symmetric.html\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/fderiv_symmetric.html</a></p>",
        "id": 344391950,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679703961
    },
    {
        "content": "<blockquote>\n<p>If you really want to work on this now, you could start from the branch  <a href=\"https://github.com/leanprover-community/mathlib/pull/18643\">#18643</a>, in which I prove bounds for the <code>n</code>-th derivative of a composition. But note that this is not in mathlib master yet!</p>\n</blockquote>\n<p>I got too excited and proved the multiplication result for Schwartz functions: <a href=\"https://github.com/leanprover-community/mathlib/pull/18649\">#18649</a></p>",
        "id": 344415247,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679721372
    },
    {
        "content": "<p>Composition should be very similar and if <span class=\"user-mention\" data-user-id=\"590693\">@rtertr (Sonia)</span> does not object, then I will prove that as well.</p>",
        "id": 344415494,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679721582
    },
    {
        "content": "<p>Hi Moritz, this looks very great! Interesting to see new tactics and way of doing proofs! <br>\nNow I have not looked too much at it yet, I will have more time tomorrow. <br>\nBut when it comes to the bilinear proof, why is it not possible to do it by induction? :D<br>\nAlso a proof of Composition would be great!<br>\nKind regards, Sonia</p>",
        "id": 344539305,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679768923
    },
    {
        "content": "<p>It is certainly possible to prove everything by induction, but it is way more convenient to use general bounds for the iterated derivative. Half a year ago or so I've tried to use an the induction argument by hand and gave up because it is very messy, since iterated derivatives are so annoying to deal with. If you look at Sebastien's PR you will see what I mean.</p>",
        "id": 344584651,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679801229
    },
    {
        "content": "<p>After working a bit on the composition, I think it is easier in your case to use the bound on the <code>iterated_fderiv</code> for the composition directly, rather than using some theorem for Schwartz functions. The amount of hoops one has to jump through to get the Gaussian into a sensible composition is probably not worth the effort.</p>",
        "id": 344594344,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679806942
    },
    {
        "content": "<p>Hi Moritz,<br>\nWas working a bit with updating my Lean. <br>\nNow, oddly enough, after updating, I run into issues with the <code>inner_product_space</code>.<br>\nBefore it worked perfectly, but since I updated Lean, it is now unhappy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.choose.sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.schwartz_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log.base</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.iterated_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.dioph</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.real_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.gaussian</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.calculus</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span>  <span class=\"n\">complex.cont_diff_coe2_euclid</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span>   <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)):</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cont_diff.comp</span> <span class=\"n\">_</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">complex.of_real_clm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">complex.of_real_clm.cont_diff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">gaussian_complex_euclidean_space</span>  <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a.re</span><span class=\"o\">):</span> <span class=\"n\">schwartz_map</span> <span class=\"n\">E</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">smooth'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">refine</span> <span class=\"n\">cont_diff.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">cont_diff.cexp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cont_diff_id</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">cont_diff.mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cont_diff_const</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">complex.cont_diff_coe2_euclid</span> <span class=\"n\">cont_diff_norm_sq</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">decay'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,}</span>\n</code></pre></div>",
        "id": 344685655,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679846481
    },
    {
        "content": "<p>It now says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>And if I add that, it asks for <code>[normed_space ℝ E]</code>.  And if I add that, it no longer wants to apply </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">complex.cont_diff_coe2_euclid</span> <span class=\"n\">cont_diff_norm_sq</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">cont_diff_norm_sq</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">},</span>\n    <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344685904,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679846645
    },
    {
        "content": "<p>Can you show the version after you \"added that\"?</p>",
        "id": 344686116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679846734
    },
    {
        "content": "<p>Do you understand the current error? Just fix it.</p>",
        "id": 344686136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679846742
    },
    {
        "content": "<p>Eric I think the issue now is simply that Sonia hasn't given k explicitly.</p>",
        "id": 344686194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679846764
    },
    {
        "content": "<p>I would not expect adding <code>[normed_space ℝ E]</code> to be necessary</p>",
        "id": 344686250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679846782
    },
    {
        "content": "<p>Or in other words, adding it would almost certainly be a mistake</p>",
        "id": 344686294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679846812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/partial.20derivatives/near/344686116\">said</a>:</p>\n<blockquote>\n<p>Can you show the version after you \"added that\"?</p>\n</blockquote>\n<p>Like, I put as a condition on E. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.choose.sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.schwartz_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log.base</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.iterated_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.dioph</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.real_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.gaussian</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.calculus</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span>  <span class=\"n\">complex.cont_diff_coe2_euclid</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span>   <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)):</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cont_diff.comp</span> <span class=\"n\">_</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">complex.of_real_clm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">complex.of_real_clm.cont_diff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">gaussian_complex_euclidean_space</span>  <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a.re</span><span class=\"o\">):</span> <span class=\"n\">schwartz_map</span> <span class=\"n\">E</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">smooth'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">refine</span> <span class=\"n\">cont_diff.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">cont_diff.cexp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cont_diff_id</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">cont_diff.mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cont_diff_const</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">complex.cont_diff_coe2_euclid</span> <span class=\"n\">cont_diff_norm_sq</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">decay'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,}</span>\n</code></pre></div>",
        "id": 344686367,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679846867
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a></p>",
        "id": 344687164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679847345
    },
    {
        "content": "<p>Oh I don't know if the docs are up to date. This is a very recent change.</p>",
        "id": 344687241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679847367
    },
    {
        "content": "<p>Have you posted the actual code you're running? <code>inner_product_space</code> shoudln't compile without <code>normed_add_comm_group</code> and in your posting you have them the wrong way around.</p>",
        "id": 344687515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679847508
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.schwartz_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.calculus</span>\n</code></pre></div>\n<p>are the only imports you need by the way. Why are you importing all this other stuff?</p>",
        "id": 344687853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679847669
    },
    {
        "content": "<p>Yeah, I tend just to import at the thing I have open on my main file :D  but it seems to still give the same issue. If I change the order, I still get the same issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">complex.cont_diff_coe2_euclid</span> <span class=\"n\">cont_diff_norm_sq</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">cont_diff_norm_sq</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">},</span>\n    <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It is just so odd because it used to work so smoothly :)</p>",
        "id": 344688432,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679847998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/partial.20derivatives/near/344687241\">said</a>:</p>\n<blockquote>\n<p>Oh I don't know if the docs are up to date. This is a very recent change.</p>\n</blockquote>\n<p>They are up to date</p>",
        "id": 344688720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679848189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590693\">@rtertr (Sonia)</span>  Yes but this is what happens when you upgrade mathlib, things change. It is not backwards compatible, so it's not odd. Read the error messge and fix the error.</p>",
        "id": 344688724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679848192
    },
    {
        "content": "<blockquote>\n<p>It is just so odd because it used to work so smoothly :)</p>\n</blockquote>\n<p>Mathlib changes quickly, you shouldn't expect code on an old version to work perfectly on a newer version.<br>\nHowever, this particular issue is trivial to fix, the error message is telling you everything you need to know</p>",
        "id": 344688811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679848229
    },
    {
        "content": "<p>Sorry I was gone for a few minutes. I tried to add it the conditions, but I unfortunately can't get it work quite, but I will try to talk with someone about in person this week :D</p>",
        "id": 344691277,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1679849578
    }
]