[
    {
        "content": "<p>MWE of the final step of some proof. Help would be appreciated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">asymptotics</span> <span class=\"n\">real</span> <span class=\"n\">normed_space</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ruesDiff</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Full definition at https://github.com/Nazgand/NazgandMathBook</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">diagonalSumSimp</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 364718895,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686279990
    },
    {
        "content": "<p>Isn't your sum missing a term? The left-hand side has <code>ruesDiff n 0 z₀ * ruesDiff n 0 z₁</code>, the right-hand side does not.</p>",
        "id": 364726750,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1686284893
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_product\">docs#finset.sum_product</a>, then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_ite\">docs#finset.sum_ite</a> to rewrite LHS as a sum over <code>((range n).product (range n)).filter _</code></p>",
        "id": 364729017,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686286300
    },
    {
        "content": "<p>Then you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_bij\">docs#finset.sum_bij</a> to do the last step.</p>",
        "id": 364729107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686286329
    },
    {
        "content": "<p>(I didn't check if the formula is true)</p>",
        "id": 364729159,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686286345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/116395-maths/topic/Diagonal.20sum.20simplification.20request.2E/near/364726750\">said</a>:</p>\n<blockquote>\n<p>Isn't your sum missing a term? The left-hand side has <code>ruesDiff n 0 z₀ * ruesDiff n 0 z₁</code>, the right-hand side does not.</p>\n</blockquote>\n<p>Ah, perhaps I should have included more information in the post. It is included in the link.<br>\nThis missing information in contains </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">missingInfo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Thus, <code>ruesDiff n 0 z₀ * ruesDiff n 0 z₁</code> is in disguise on the right side.</p>",
        "id": 364960833,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686341732
    },
    {
        "content": "<p>You don't need to assume <code>0 &lt; n</code> in this lemma. For <code>n = 0</code>, it is trivial.</p>",
        "id": 364961671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686342004
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ahPGFmtcLkK7ZQlqmThcq4Uh/image.png\">image.png</a><br>\nIn this image, how do I <code>give the compiler a hint</code> about <code>?m_2</code> being <code>range n</code> for example.<br>\nImage shows my attempt.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ahPGFmtcLkK7ZQlqmThcq4Uh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ahPGFmtcLkK7ZQlqmThcq4Uh/image.png\"></a></div><p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Diagonal.20sum.20simplification.20request.2E/near/364961671\">said</a>:</p>\n<blockquote>\n<p>You don't need to assume <code>0 &lt; n</code> in this lemma. For <code>n = 0</code>, it is trivial.</p>\n</blockquote>\n<p>Elsewhere in the code, it is important that <code>0&lt;n</code> so I copied it without checking.</p>",
        "id": 364965363,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686343262
    },
    {
        "content": "<p><code>finset.sum_prod</code> takes implicit arguments, so you can use <code>@finset.sum_prod</code> if you want to spell them all out (and leave _ in the places you want to be inferred)</p>",
        "id": 364965794,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686343419
    },
    {
        "content": "<p>If <code>n</code> should be positive everywhere, you may want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat\">docs#pnat</a> instead of a natural number.</p>",
        "id": 364970863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686345248
    },
    {
        "content": "<p>I think my problem is that the LHS of <code>finset.sum_product</code> is not being found. How do I rewrite my LHS to match the LHS of <code>finset.sum_product</code>?</p>",
        "id": 364976935,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686347744
    },
    {
        "content": "<p>What are you trying and what is your proof state?</p>",
        "id": 364983417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686350772
    },
    {
        "content": "<p>It would be nice to have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that imports something more specific than <code>all</code> (I'm not sure that my laptop has enough RAM to import <code>all</code>)</p>",
        "id": 364983626,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686350886
    },
    {
        "content": "<p>This is the first thing I tried, and I am now convinced that it will work if the structure of my sum is first rewritten to match The LHS of <code>finset.sum_product</code>. <code>∑ (x : ℕ) in range n, ∑ (x_1 : ℕ) in range n,</code> needs to become something like <code>∑ (x : ?m_2 × ?m_3) in ?m_5 ×ˢ ?m_6,</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">diagonalSumSimp</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.sum_product</span><span class=\"o\">,</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">×ˢ</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">m_7</span> <span class=\"n\">x</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">z₀</span> <span class=\"n\">z₁</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-↑</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"n\">z₀</span>\n</code></pre></div>",
        "id": 364987972,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686353170
    },
    {
        "content": "<p>You need to rewrite <code>finset.sum_product</code> from right to left, not from left to right. Possibly, you need <code>finset.sum_product'</code></p>",
        "id": 364988414,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686353471
    },
    {
        "content": "<p>Thank you for that clarification. I have made some progress, but am currently stumped on a type mismatch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">diagonalSumSimp</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.sum_product</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">sum_product</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">z₀</span> <span class=\"n\">z₁</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-↑</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-↑</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"n\">z₀Lean</span>\n</code></pre></div>",
        "id": 364992576,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686355941
    },
    {
        "content": "<p>I made progress.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">diagonalSumSimp</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k.fst</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k.snd</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k.fst</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k.snd</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.sum_product</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"n\">z₀z₁</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">k.fst</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.fst</span><span class=\"o\">)</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.snd</span><span class=\"o\">)</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"n\">z₀</span>\n<span class=\"n\">All</span> <span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 364993312,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686356332
    },
    {
        "content": "<p>Got to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"n\">z₀z₁</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.snd</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"n\">z₀</span>\n</code></pre></div>\n<p>Now I will take a break.</p>",
        "id": 364994848,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686357199
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">asymptotics</span> <span class=\"n\">real</span> <span class=\"n\">normed_space</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">diagonalSumSimpGen</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">k.fst</span> <span class=\"bp\">+</span> <span class=\"n\">k.snd</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k.fst</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k.snd</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.sum_product</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">f0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.sum_ite</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_const_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">finset.sum_bij</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>results in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">5</span> <span class=\"n\">goals</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k.fst</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k.snd</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n    <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k.fst</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k.snd</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a.fst</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.snd</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k.fst</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k.snd</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha₁</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">∈</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">ha₂</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n    <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">a₁</span> <span class=\"n\">ha₁</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">a₂</span> <span class=\"n\">ha₂</span> <span class=\"bp\">→</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k.fst</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k.snd</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n       <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">k.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k.fst</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k.snd</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x.snd</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 365008970,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686366299
    },
    {
        "content": "<p>Here is the first line you need:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sum_product'</span><span class=\"o\">,</span> <span class=\"n\">sum_ite</span><span class=\"o\">,</span> <span class=\"n\">sum_const_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 365009497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686366681
    },
    {
        "content": "<p>You don't have to tell Lean all the arguments, it can find them.</p>",
        "id": 365009520,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686366696
    },
    {
        "content": "<p>The <code>sum_bij</code> step is less trivial.</p>",
        "id": 365009588,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686366728
    },
    {
        "content": "<p>Wait a minute. I have a shorter proof.</p>",
        "id": 365009766,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686366873
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">diagonalSumSimp</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">rues_diff</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">missing_info</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">rues_diff</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">rues_diff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">rues_diff</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">rues_diff</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rues_diff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">rues_diff</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">z₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.exists_eq_succ_of_ne_zero</span> <span class=\"n\">h.ne'</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k.val</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">l.val</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_zmod_eq_zero_iff_dvd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">neg_add'</span><span class=\"o\">,</span> <span class=\"n\">int.cast_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">eq_neg_iff_add_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">l</span><span class=\"o\">],</span>\n    <span class=\"n\">push_cast</span> <span class=\"o\">[</span><span class=\"n\">zmod.nat_cast_zmod_val</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_range</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">sum_ite_eq'</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">k</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">missing_info</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">z₁</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_neg</span><span class=\"o\">,</span> <span class=\"n\">nat.add</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.mod_eq_of_lt</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_sub</span><span class=\"o\">],</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">k.2.le</span><span class=\"o\">,</span> <span class=\"n\">tsub_lt_self</span> <span class=\"n\">n.succ_pos</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.2</span> <span class=\"bp\">$</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">fin.coe_eq_coe</span> <span class=\"n\">k</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hk</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365013757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686369607
    },
    {
        "content": "<p>Your condition says that <code>l = -k</code> in <code>zmod n</code> or <code>fin n</code>.</p>",
        "id": 365013800,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686369637
    },
    {
        "content": "<p>It was easier to prove in <code>zmod n</code>.</p>",
        "id": 365013812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686369647
    },
    {
        "content": "<p>Great! Thanks! Now I just need to connect it to the rest of my code.</p>",
        "id": 365014499,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686370173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Andrew Gerads</span> has marked this topic as resolved.</p>",
        "id": 365021606,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686374857
    }
]