[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">unique_nonzero_max_ideal</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what do you think?</p>",
        "id": 188142696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581622973
    },
    {
        "content": "<p>Well, we already have <code>local_ring</code></p>",
        "id": 188143009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623171
    },
    {
        "content": "<p>So maybe you should <code>extend</code> that</p>",
        "id": 188143031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623187
    },
    {
        "content": "<p>and then add one extra condition saying that it's not a field</p>",
        "id": 188143061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623203
    },
    {
        "content": "<p>but a general local ring isn't a PID so I need to add that somehow, right?</p>",
        "id": 188143208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581623312
    },
    {
        "content": "<p>You are already extending that, right?</p>",
        "id": 188143260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623368
    },
    {
        "content": "<p>I meant, in addition, extend local ring</p>",
        "id": 188143271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623376
    },
    {
        "content": "<p>I wonder whether we'll be happy with <code>[dvr R]</code> and <code>[pid R]</code>, etc... Or that we'd rather have <code>[comm_ring R] [is_dvr R]</code> and <code>[comm_ring R] [is_pid R]</code> etc...</p>",
        "id": 188143412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623492
    },
    {
        "content": "<p>The first version has more chances to lead to diamonds, I think</p>",
        "id": 188143445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623513
    },
    {
        "content": "<p>I never know if I'm allowed to extend PID and local ring because perhaps I just defined two different multiplications or something? I really have no understanding of this stuff and don't know a place where it's all written up coherently. I occasionally half-understand it for a while and then I just forget it all again.</p>",
        "id": 188143550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581623566
    },
    {
        "content": "<p>Aha, I think it's fine, but maybe you need to switch on the <code>old_structure_cmd</code></p>",
        "id": 188143877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623687
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pseudouniformiser</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 188145502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581624630
    },
    {
        "content": "<p>Yeah, that seems fine. Although I would maybe not call the condition <code>pseudouniformiser</code></p>",
        "id": 188146043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581624975
    },
    {
        "content": "<p><code>exists_nonzero_nonunit</code>?</p>",
        "id": 188146075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581625001
    },
    {
        "content": "<p>Thinking about the proof that given a DVR you actually get a valuation, there's a slight stumbling block: I want to use <code>enat</code> and then do something like <code>R →*+ enat</code> which should be a map from the DVR <code>R</code> to <code>enat</code> which is a map of monoids, but the problem is that I want to think of <code>R</code> as a multiplicative monoid and <code>enat</code> as an additive monoid: it doesn't seem like <code>→*+</code> exists. One other option is to use multiplicative valuations landing in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\geq 0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> but then it's not really clear where a uniformizer is supposed to go: there are infinitely many choices, none of which really stand out in general.</p>",
        "id": 195333635,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587905806
    },
    {
        "content": "<p>Is there some systematic way to add in things like <code>→*+</code>?</p>",
        "id": 195333813,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587906126
    },
    {
        "content": "<p>Alternatively, <code>\\bbZ</code> and <code>\\bbN</code> have <code>has_le</code>, but <code>multiplicative \\bbZ</code> doesn't seem to preserve this, and I'm not sure whether <code>with_zero</code> defines a new ordering...</p>",
        "id": 195335223,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587908318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235423\">@Ashwin Iyengar</span> they used valuations in <a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\" title=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\">the perfectoid project</a> which you might find helpful</p>",
        "id": 195335249,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587908378
    },
    {
        "content": "<p>Yeah I guess what I want to use is linear_ordered_comm_group_with_zero.lean then: <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is this destined for mathlib?</p>",
        "id": 195335498,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587908645
    },
    {
        "content": "<p>But maybe this should be rewritten replacing <code>0</code> with <code>⊥</code> to avoid confusion with <code>0</code> in the integers?</p>",
        "id": 195335533,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587908738
    },
    {
        "content": "<p>I guess I can achieve what I want if I have linear_ordered_comm_group_with_zero.lean, and some way to distinguish between the natural number <code>0</code> and the adjoined <code>0</code></p>",
        "id": 195336032,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587909528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"235423\">Ashwin Iyengar</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/195335498\" title=\"#narrow/stream/116395-maths/topic/DVRs/near/195335498\">said</a>:</p>\n<blockquote>\n<p>Yeah I guess what I want to use is linear_ordered_comm_group_with_zero.lean then: <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> is this destined for mathlib?</p>\n</blockquote>\n<p>I think this can be PR'd. All prerequisites are now in mathlib, if I'm not mistaken. Note that it only works in a multiplicative setting though... so it doesn't yet solve your problem.</p>\n<p>I think there are two questions that need to be answered:</p>\n<ol>\n<li>\n<p>Should DVR's use multiplicative or additive valuations?</p>\n</li>\n<li>\n<p>What ever the answer is to (1): what should the target type be of discrete valuations?</p>\n</li>\n</ol>\n<p>Note that we could also opt for a \"heretical\" approach, in which we take a discrete additive valuation with target type the integers, and we require <code>val 0 = 0</code>, instead of <code>val  0 = infty</code>. This would create it's own problems, but it also solves a lot...</p>",
        "id": 195338108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587913050
    },
    {
        "content": "<p>Additive is what is usually done, but if we want to do multiplicative instead, one option for the target would be to just use a free group on one generator (written multiplicatively), define the obvious ordering on it, and then use your</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Adjoining a zero element to a linearly ordered commutative group</span>\n<span class=\"cm\">gives a linearly ordered commutative group with zero.-/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span><span class=\"bp\">```</span>\n</pre></div>\n\n\n<p>I'll try this for now.</p>",
        "id": 195339207,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587914840
    },
    {
        "content": "<p>Later on it might be convenient to have valuations taking values in a discrete subgroup of the rationals</p>",
        "id": 195341519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587918313
    },
    {
        "content": "<p>I think Johan is the expert in valuations now, there has been lot of movement since that valuation file was originally written, especially with group_with_zero</p>",
        "id": 195341580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587918373
    },
    {
        "content": "<p>We could do something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_discrete_valuation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclic</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n<span class=\"n\">discrete_valuation</span> <span class=\"n\">R</span> <span class=\"n\">G</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>maybe, and have the discrete valuation take values in an arbitrary infinite cyclic group... oh but I'm missing a proof that it's infinite</p>",
        "id": 195341707,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587918576
    },
    {
        "content": "<p>An alternative is to use the general valuations as found in the perfectoid project, and define a predicate on those, saying that the valuation is discrete.</p>",
        "id": 195341852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587918810
    },
    {
        "content": "<p>Do you want <code>discrete_valuation_ring R</code> to be a <code>Prop</code> or will it record data (say a distinguished uniformiser...)?</p>",
        "id": 195341916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587918889
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prime_ideal&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">primality</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">unique_nonzero_prime_ideal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 195342402,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587919657
    },
    {
        "content": "<p>so it records some data</p>",
        "id": 195342405,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587919669
    },
    {
        "content": "<p>a PID with a unique nonzero prime ideal</p>",
        "id": 195342447,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587919689
    },
    {
        "content": "<p>Ok, I see. But it is a subsingleton. That seems like a fine definition</p>",
        "id": 195342489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587919800
    },
    {
        "content": "<p>Then we construct a valuation basically by using the UFD structure and the fact that prime elements are uniformizers</p>",
        "id": 195342540,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587919825
    },
    {
        "content": "<p>In the perfectoid project we also had the notion of a <code>valued_ring</code>, which was a class that registered a (multiplicative) valuation on the ring.</p>",
        "id": 195342926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920474
    },
    {
        "content": "<p>One could have an is_discrete predicate on a valuation in the sense of Huber and a construction which goes from this to the Z-valued valuation. But I don't think it matters that traditionally the group law on Z with 0 is addition -- why not use multiplicative Z with 0?</p>",
        "id": 195342953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920521
    },
    {
        "content": "<p>We might want to have two classes <code>discrete_valuation_ring R</code>, like you propose, and <code>discretely_valued_ring R</code>, for rings like Z_p that have a canonical valuation.</p>",
        "id": 195342997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920539
    },
    {
        "content": "<p>What structure do people use on Z with +infinity? Add, max, probably never multiplication, but external multiplication by Z yes. But we have all this on a group with 0</p>",
        "id": 195343020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920593
    },
    {
        "content": "<p>I'm still upset that it seems really painful to move back and forth between multiplicative and additive valuations...</p>",
        "id": 195343030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920606
    },
    {
        "content": "<p>So why not just bite the bullet and never use additive valuations?</p>",
        "id": 195343034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920620
    }
]