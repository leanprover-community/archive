[
    {
        "content": "<p>One of the things I'm surprised we don't have currently, is custom constructors for <code>Group</code>, <code>CommRing</code> and <code>Field</code> etc, that only ask for the minimal proof requirements. Is there something I'm missing for why we don't already have this, or should I start making a PR with a bunch of these things?</p>",
        "id": 379069497,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690449247
    },
    {
        "content": "<p>I agree we should have these, although some thought needs to go into what minimal sets of axioms we care about, since there are so many different ones.</p>",
        "id": 379070264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690449409
    },
    {
        "content": "<p>We can have different constructors for the many different ones. I don't see a problem with that.</p>",
        "id": 379070483,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690449450
    },
    {
        "content": "<p>I'll start working on it.</p>",
        "id": 379070559,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690449466
    },
    {
        "content": "<p>Are you advocating removing the unnecessary data fields (<code>pow</code>, <code>nsmul</code>, <code>natCast</code> etc) too?</p>",
        "id": 379071149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690449576
    },
    {
        "content": "<p>What would be the purpose of such constructors? My general feeling is that they would act as footguns, and in mathlib review we'd just tell people not to use them anyway. I can see they might be useful pedagogically though.</p>",
        "id": 379071228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690449590
    },
    {
        "content": "<p>I think for those, I would advocate a similar approach to the current approach, which is they're filled in by an <code>optParam</code> or whatever it's called.</p>",
        "id": 379071839,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690449697
    },
    {
        "content": "<p>Why would we tell people not to use them?</p>",
        "id": 379071930,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690449713
    },
    {
        "content": "<p>I think I'm talking mainly about unnecessary proof obligations anyway</p>",
        "id": 379072389,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690449785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Minimal.20axioms.20for.20Group.2C.20CommRing.20etc/near/379070264\">said</a>:</p>\n<blockquote>\n<p>I agree we should have these, although some thought needs to go into what minimal sets of axioms we care about, since there are so many different ones.</p>\n</blockquote>\n<p>I could do something weird like asking for <code>(∀ a, a + 0 = a) ∨ (∀ a, 0 + a = a)</code></p>",
        "id": 379073483,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690449966
    },
    {
        "content": "<p>The usual pattern I see is</p>\n<ol>\n<li>Contributor shows <code>[Ring A] : Ring (MyFoo A)</code></li>\n<li>A reviewer comments \"isn't <code>[Monoid A] : Monoid (MyFoo A)</code> also true\"</li>\n<li>The Ring instance proof is now mostly just copying the Monoid fields</li>\n</ol>\n<p>While the \"easy\" constructor for <code>Ring</code> might be used in step 1, there'd be no point using it in step 3 since it wouldn't save any work, and would increase the chance of diamonds. The refactor from 1 to 3 is <em>easier</em> if the \"easy\" constructor never existing, as now the \"redudnant\" fields cannot just be copied and pasted.</p>",
        "id": 379073813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690450030
    },
    {
        "content": "<p>I agree in principle, although I think that in practice the redundant fields cost very little extra work. And all those simplifications work only for rich structures. In mathlib we often first assume very little assumptions and get a monoid, then add some more assumptions and upgrade to group etc. In that case you don't gain anything because the redundant fields are redundant only for groups, not for monoids.</p>",
        "id": 379074634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690450167
    },
    {
        "content": "<p>I agree that that pattern is common, but I certainly don't think it's the only thing that ever happens. There are some groups that are just groups with some variant being a monoid first.</p>",
        "id": 379074669,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690450170
    },
    {
        "content": "<p>And I just saw Eric's message that has some overlap with mine.</p>",
        "id": 379074834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690450194
    },
    {
        "content": "<p>Patrick, I think your explanation was better :)</p>",
        "id": 379074928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690450205
    },
    {
        "content": "<p>For reference, the motivation for me is I'm doing <code>ModelTheory</code> and I'm proving that a Model for the theory of fields is a field. Now I could go and define the Theory of Semirings and so on first, but I'm not sure this is a good idea at this stage for Model Theory, because it's fairly new and untested, and also not an easy thing to get right, so it might require a lot of refactors and building a lot of code about the Model Theory of Semirings that will be unused for a long time seems like not such a good idea.</p>",
        "id": 379077109,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690450580
    },
    {
        "content": "<p>Note I was trying to explain why those constructor are less useful than they would appear to be, but I'm not against having them anyway.</p>",
        "id": 379078777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690450864
    },
    {
        "content": "<p>Note in mathlib3 we actually dropped the <code>add_zero</code> and <code>zero_add</code> fields of <code>Ring</code>. They were added back (accidentally?) during the ad-hoc port.</p>",
        "id": 379080911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690451245
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6173\">!4#6173</a> for a first PR just for groups.</p>",
        "id": 379104058,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690455013
    },
    {
        "content": "<p>If you take seriously the \"minimal\" part, you should also PR to the Counterexamples folder, examples of things that satisfy all axioms but one (for each axiom).</p>",
        "id": 379127432,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1690459119
    },
    {
        "content": "<p>I certainly made things like the constructor for a group using only the axioms I was taught as an undergraduate (<code>mul_assoc</code>, <code>one_mul</code> and one of the inverse axioms; the one which doesn't make <code>a * b := b</code> and <code>a^-1 := 1</code> into a group). But I never PRed them because this was before the time that Chris finally got it into my head that PRing was important. I was surprised to find that they didn't seem to come up so much as I would have expected but perhaps the earlier responses on the chat explain this. Also, typically proofs of one_mul and mul_one are easy anyway so it's not too much trouble supplying both.</p>",
        "id": 379265575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690482675
    },
    {
        "content": "<p>E.g., for cardinals we prove one of <code>mul_add</code>/<code>add_mul</code> using the other one.</p>",
        "id": 379290238,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690488384
    }
]