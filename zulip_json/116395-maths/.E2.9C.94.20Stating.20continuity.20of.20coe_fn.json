[
    {
        "content": "<p>I have problems stating the following property of <code>coe_fn</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.module.weak_dual</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dual</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.normed_field</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">add_monoid_hom_class_alg_weak_dual</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_monoid_hom_class</span> <span class=\"o\">(</span><span class=\"n\">weak_bilin</span> <span class=\"o\">(</span><span class=\"n\">module.dual_pairing</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"bp\">𝕜</span> <span class=\"o\">:=</span>\n<span class=\"n\">module.add_monoid_hom_class</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">weak_bilin</span> <span class=\"o\">(</span><span class=\"n\">module.dual_pairing</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_uniform_continuous_weak_coe</span> <span class=\"o\">:</span>\n  <span class=\"n\">uniform_continuous</span> <span class=\"o\">(</span><span class=\"n\">coe_fn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">weak_bilin</span> <span class=\"o\">(</span><span class=\"n\">module.dual_pairing</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The last lemma fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">weak_bilin</span> <span class=\"o\">(</span><span class=\"n\">module.dual_pairing</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">weak_bilin</span> <span class=\"o\">(</span><span class=\"n\">module.dual_pairing</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)),</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I know that it is usually better to not explicitly mention <code>coe_fn</code>, but here I see no other way to state the lemma.</p>",
        "id": 278595236,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1649700963
    },
    {
        "content": "<p>Can you add a redundant <code>has_coe_to_fun</code> instance as is done with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_ring_hom.has_coe_to_fun\">docs#order_ring_hom.has_coe_to_fun</a>?</p>",
        "id": 278595403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649701055
    },
    {
        "content": "<p>That works. Thank you.</p>",
        "id": 278595883,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1649701259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> has marked this topic as resolved.</p>",
        "id": 278595951,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649701292
    },
    {
        "content": "<p>(Good to know an example of where the explicit <code>has_coe_to_fun</code> instance is still needed! I had a few for older versions of Lean, but then I tweaked the elaborator so it could infer more instances.)</p>",
        "id": 278598574,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649702274
    }
]