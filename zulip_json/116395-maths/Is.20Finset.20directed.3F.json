[
    {
        "content": "<p>This is going a bit outside my mathematical knowledge...</p>\n<p>The following is easily proved:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊔</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_sup_left</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">le_sup_right</span>\n</code></pre></div>\n<p>I'm wondering if the statement is still true with the <code>[DecidableEq α]</code> hypothesis removed? Intuitively it feels like it ought to be?</p>\n<p>Christopher</p>",
        "id": 377669997,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1690054436
    },
    {
        "content": "<p>Do you want a proof that doesn't use <code>Classical.choice</code>? If no, then you can use <code>by classical; apply directed_of_sup</code></p>",
        "id": 377670575,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690054690
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SemilatticeSup.to_isDirected_le#doc\">docs#SemilatticeSup.to_isDirected_le</a></p>",
        "id": 377670717,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690054777
    },
    {
        "content": "<p>I think that we should add an instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsDirected</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span> <span class=\"n\">infer_nstance</span>\n</code></pre></div>\n<p>if we don't have it yet.</p>",
        "id": 377670906,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690054863
    },
    {
        "content": "<p>Also, many lemmas (e.g., about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.atTop#doc\">docs#Filter.atTop</a>) can be generalized from <code>SemilatticeSup</code> to <code>IsDirected</code>. They were written for semilattices because <code>IsDirected</code> wasn't there back then.</p>",
        "id": 377670986,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690054920
    },
    {
        "content": "<p>So,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsDirected</span>  <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⊆</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"n\">IsDirected</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>?</p>",
        "id": 377672525,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1690055606
    },
    {
        "content": "<p>No, you don't want to assume alpha is a SemilatticeSup</p>",
        "id": 377672694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690055709
    },
    {
        "content": "<p>Linter will catch this.</p>",
        "id": 377673027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690055894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span> We should have instances both for <code>(· ≤ ·)</code> and <code>(· ⊆ ·)</code></p>",
        "id": 377673088,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690055942
    },
    {
        "content": "<p>Thanks. I was trying to add it <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Finset/Basic.lean#L308\">here</a> after importing <code>Mathlib.Order.Directed</code>. The infer instance doesn't seem to work though. If I put it in another file which imports <code>Mathlib.Order.Directed</code> and <code>Mathlib.Data.Finset.Basic</code> then it does work.</p>",
        "id": 377674418,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1690056571
    },
    {
        "content": "<p>It should go after the <code>Lattice</code> instance</p>",
        "id": 377676440,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690057297
    },
    {
        "content": "<p>Okay, so I was now expecting to be able to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">directed_of</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⊆</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I get <code>failed to synthesize instance  IsDirected (Finset α) fun x x_1 ↦ x ⊆ x_1</code></p>",
        "id": 377678633,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1690058525
    },
    {
        "content": "<p>Please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 377679483,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690059009
    },
    {
        "content": "<p>Against the current <code>master</code> branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsDirected</span>  <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⊆</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"n\">IsDirected</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">directed_of</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⊆</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">directed_of</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⊆</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 377680273,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1690059413
    },
    {
        "content": "<p>Looks like a bug in <code>use</code></p>",
        "id": 377680821,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690059835
    },
    {
        "content": "<p>Try <code>exact</code> or just <code>:= directed_of _ _ _</code></p>",
        "id": 377680879,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690059852
    },
    {
        "content": "<p>But you'll need instances both for <code>le</code> and <code>subset</code>.</p>",
        "id": 377680893,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690059874
    },
    {
        "content": "<p>Thanks very much, that worked.</p>\n<p>Now, what if I wanted to prove something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test2</span>  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf₁</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">f₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf₂</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">f₂</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">∧</span><span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">∧</span><span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Again, this is easy enough with <code>[DecidableEq α]</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf₁</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">f₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf₂</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">f₂</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">∧</span><span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">∧</span><span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"bp\">⊔</span> <span class=\"n\">f₂</span><span class=\"o\">)</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hf₁</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hf₂</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">·</span> <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_sup_left</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_sup_right</span>\n</code></pre></div>\n<p>My guess is one uses the fact that there's a <code>(g : Finset α)</code> such that <code>(f₁ ≤ g)∧(f₂ ≤ g)</code> and then somehow construct <code>(f : Finset α)</code> to be the elements <code>x</code> of <code>g</code> which have the property <code>x∈s</code>?</p>",
        "id": 377741762,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1690091916
    },
    {
        "content": "<p>At this point I would just suggest using <code>classical</code> and taking <code>f = f₁ ∪ f₂</code>.</p>",
        "id": 377748331,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690094691
    },
    {
        "content": "<p>Thanks, that works! (My other idea was to work over <code>Finset { a : α // a ∈ s}</code> instead of <code>Finset α</code>).</p>",
        "id": 377760588,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1690099109
    }
]