[
    {
        "content": "<p>How hard would it be to add support for <code>≠ ∞</code> to <code>positivity</code>?</p>",
        "id": 367987192,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687278324
    },
    {
        "content": "<p>I see that it breaks a linear order on outputs.</p>",
        "id": 367987300,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687278353
    },
    {
        "content": "<p>Use case: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.div_pos_iff#doc\">docs4#ENNReal.div_pos_iff</a></p>",
        "id": 367987475,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687278378
    },
    {
        "content": "<p>I agree that it would be nice to have a \"syntactically obviously non-infinite\" tactic doing the same style of reasoning as positivity does for \"syntactically obvious positivity\".  It seems like a matter of taste whether we wrap this into positivity or make it a new tactic called \"finiteness\".</p>",
        "id": 367988109,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687278503
    },
    {
        "content": "<p>(It would also be useful as an additional discharger for <code>gcongr</code>, since this is another side condition which comes up frequently on <code>gcongr</code> lemmas.)</p>",
        "id": 367988311,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687278544
    },
    {
        "content": "<p>Indeed, if <code>finiteness</code> is a new tactic, then <code>positivity</code> and <code>finiteness</code> plugins for <code>ENNReal</code> can call each other if they see <code>a / b</code> without breaking the linear order.</p>",
        "id": 367991409,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687279230
    },
    {
        "content": "<p>BTW, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5265\">!4#5265</a>. I can try to do it but I don't know whether it's better to add a new <code>eval*</code> or try to merge it into the existing one.</p>",
        "id": 367991793,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687279316
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/infinity.20in.20positivity.3F\">#mathlib4 &gt; infinity in positivity?</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 368025428,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687287101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  A related point: it would be nice to make <code>positivity</code> more automated, so that a certain class of lemmas can just be tagged <code>@[positivity]</code> rather than writing out a positivity extension as a mini-tactic.  I've been really enjoying that <code>@[gcongr]</code> can do this.</p>",
        "id": 368025827,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687287199
    },
    {
        "content": "<p>The class of lemmas could be something like: goal is of the form <code>0&lt;</code>/<code>≠0</code>/<code>0≤</code>, and all Prop hypotheses are of the form <code>0&lt;</code>/<code>≠0</code>/<code>0≤</code> for free variables occuring in the goal expression.</p>",
        "id": 368026319,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687287326
    },
    {
        "content": "<p>I think that we should allow other hypotheses. The tactic should try to use <code>assumption</code> for them.</p>",
        "id": 368026462,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687287365
    },
    {
        "content": "<p>Positivity doesn't do that currently.</p>",
        "id": 368026524,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687287383
    },
    {
        "content": "<p>E.g., <code>gauge s x</code> is positive if <code>(hs : Absorbent ℝ s) (hb : Bounded s) (hx : x ≠ 0)</code></p>",
        "id": 368026609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687287405
    },
    {
        "content": "<p>But yes, it could.</p>",
        "id": 368026634,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687287412
    },
    {
        "content": "<p>Can we run <code>aesop</code> with a list of lemmas?</p>",
        "id": 368026670,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687287424
    },
    {
        "content": "<p>With a custom discharger for inequalities between numbers.</p>",
        "id": 368026805,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687287457
    },
    {
        "content": "<p>Positivity is cleverer than aesop (within its domain), because it reasons bottom-up: if it can prove a term is <code>0≤</code> one way and <code>0&lt;</code> another way, it moves forward with the better one.</p>",
        "id": 368026864,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687287470
    },
    {
        "content": "<p>Is it done to avoid backtracking on goals like <code>0 &lt; a + b</code>?</p>",
        "id": 368027262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687287571
    },
    {
        "content": "<p>About other types of assumptions: <code>positivity</code> plugins can do whatever they want. In particular, they can try to find <code>Metric.Bounded s</code> in assumptions.</p>",
        "id": 368027635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687287640
    },
    {
        "content": "<p>Oh sorry, you're right.</p>",
        "id": 368027711,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687287659
    },
    {
        "content": "<p>I have also been missing this feature in <code>positivity</code>. Just using aesop as a discharger for goals it can't reduce further (possibly with a custom set of lemmas to keep it fast) would do wonders I think.</p>",
        "id": 368027849,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1687287694
    },
    {
        "content": "<p>The problem is that <code>positivity</code> does not create these extra goals.</p>",
        "id": 368028027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687287728
    },
    {
        "content": "<p>It goes from inside to outside and asks plugins what they can prove.</p>",
        "id": 368028097,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687287748
    },
    {
        "content": "<p>If someone rewrites <code>positivity</code> to leave less freedom to plugins (or make a generic plugin that runs all <code>@[positivity]</code> lemmas), then this new version should do something about extra goals.</p>",
        "id": 368028539,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687287862
    },
    {
        "content": "<p>If I understand correctly, we have to choose between (A) non-opinionated positivity that tries multiple techniques on a subexpression (carrying forward the best result) and is finishing-only, vs (B) opinionated positivity that tried only one technique per subexpression, but is a useful non-finishing tactic.  Current status is (A).</p>",
        "id": 368028556,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687287866
    },
    {
        "content": "<p>My understanding is that it goes through the hypotheses in the current context after trying all the plugins, and I think replacing that pass with aesop should go quite far.</p>",
        "id": 368028649,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1687287895
    },
    {
        "content": "<p>There's always the possibility of <code>positivity!</code>...(\"tries harder to close side goals\")</p>",
        "id": 368041034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687291149
    },
    {
        "content": "<p>Let me remind you of <a href=\"https://github.com/leanprover-community/mathlib/pull/16632\">#16632</a>, which adds an extension to prove <code>0 ≤ a - b</code> from a <code>b ≤ a</code> assumption in context.</p>",
        "id": 368057710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687296492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> yes we could do that. Are you up for another hacking session?</p>",
        "id": 368061969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687298302
    },
    {
        "content": "<p>Yes, let's do it!</p>",
        "id": 368160604,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687337656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/infinity.20in.20positivity.3F/near/367987192\">said</a>:</p>\n<blockquote>\n<p>How hard would it be to add support for <code>≠ ∞</code> to <code>positivity</code>?</p>\n</blockquote>\n<p>Reviving this old thread for later cross-reference: I implemented a prototype <code>finiteness</code> tactic for the PFR project, see<br>\n<a href=\"https://github.com/teorth/pfr/pull/20\">https://github.com/teorth/pfr/pull/20</a><br>\nand if it works well there we can move it to mathlib.</p>",
        "id": 402807183,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700268815
    }
]