[
    {
        "content": "<p><code>linarith</code> used to do the trick for both of these in lean3, what do I need now in lean4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">not_a_le_b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n  <span class=\"n\">linarith</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344542281,
        "sender_full_name": "Iocta",
        "timestamp": 1679770444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span>  You need to wait until someone writes that functionality into linarith.  See <a href=\"https://github.com/leanprover-community/mathlib4/pull/2714\">!4#2714</a>.</p>",
        "id": 344554501,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679778469
    },
    {
        "content": "<p>Alternatively you can go back to how we were doing this in 2017 before <code>linarith</code> existed, just applying lemmas like <code>div_pos</code> manually.</p>",
        "id": 344554931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679778814
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 344580279,
        "sender_full_name": "Iocta",
        "timestamp": 1679797531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> has marked this topic as resolved.</p>",
        "id": 344580751,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679797905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> has marked this topic as unresolved.</p>",
        "id": 344601952,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679812102
    },
    {
        "content": "<p>If I've defined a variable <code>let e := a + b</code> then <code>e</code> appears in a hypothesis, how can I replace <code>e</code> in that hypothesis with <code>a + b</code>? I tried <code>subst e at this</code> but <code>tactic 'subst' failed, variable '' is a let-declaration</code></p>",
        "id": 344602080,
        "sender_full_name": "Iocta",
        "timestamp": 1679812180
    },
    {
        "content": "<p><code>set e :=a+b with he</code> and then you do a <code>rw he at this</code></p>",
        "id": 344603869,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1679813335
    },
    {
        "content": "<p>(Uh, in Lean 3 at least. I just noticed that you're using Lean4, sorry...)</p>",
        "id": 344603931,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1679813390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/picking.20up.20lean4.20with.20math/near/344554931\">said</a>:</p>\n<blockquote>\n<p>Alternatively you can go back to how we were doing this in 2017 before <code>linarith</code> existed, just applying lemmas like <code>div_pos</code> manually.</p>\n</blockquote>\n<p>I thought that was what we all still did... Oops... <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 344607373,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1679815756
    },
    {
        "content": "<p>Why does this fail?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"bp\">→</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"n\">abs</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_div_iff_mul_lt</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 344614696,
        "sender_full_name": "Iocta",
        "timestamp": 1679820047
    },
    {
        "content": "<p>Also is it just me, I can't copy text from the vscode infoview. I press copy but it doesn't do anything.</p>",
        "id": 344614756,
        "sender_full_name": "Iocta",
        "timestamp": 1679820090
    },
    {
        "content": "<p>did you mean <code>at h</code>? or <code>&lt;-</code>?</p>",
        "id": 344614867,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679820131
    },
    {
        "content": "<p>yeah but it doesn't like that either</p>",
        "id": 344614917,
        "sender_full_name": "Iocta",
        "timestamp": 1679820164
    },
    {
        "content": "<p>What is the new error?</p>",
        "id": 344615048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679820241
    },
    {
        "content": "<p>And what is the new code?</p>",
        "id": 344615102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679820248
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"bp\">→</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"n\">abs</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_div_iff_mul_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 344615147,
        "sender_full_name": "Iocta",
        "timestamp": 1679820275
    },
    {
        "content": "<p>Oh because the reals are not a group.</p>",
        "id": 344615432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679820420
    },
    {
        "content": "<p>(under multiplication)</p>",
        "id": 344615458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679820434
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_div_iff#doc\">docs4#lt_div_iff</a></p>",
        "id": 344615825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679820577
    },
    {
        "content": "<p>or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_div_iff'#doc\">docs4#lt_div_iff'</a> even</p>",
        "id": 344615920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679820614
    },
    {
        "content": "<p>It would be neat if <code>rw</code> could detect that it \"almost\" found an occurrence to rewrite, but failed to synthesize some instance, and report that if it fails</p>",
        "id": 344616583,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679820882
    },
    {
        "content": "<p>Or we compile a list of all 'generic' algebra lemmas and have a tactic that tries every one (in both directions) and reports back those that do not fail</p>",
        "id": 344620047,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679822266
    },
    {
        "content": "<p>Or both <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 344623324,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679823558
    }
]