[
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/tree/master/src/Geometry\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/tree/master/src/Geometry</a> i found this (for the imo grand challenge project)</p>",
        "id": 258336821,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634721674
    },
    {
        "content": "<p>but it seems like i am having problem importing geometry.axioms in tarski_1.lean</p>",
        "id": 258336841,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634721690
    },
    {
        "content": "<p>first it takes a long time to load (lean just says Loading...) and after a long time it says <code>invalid import: algebra.ring\ninvalid object declaration, environment already has an object named 'units._inst_1'</code></p>",
        "id": 258336894,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634721721
    },
    {
        "content": "<p>anyone had any success getting the project up and running? i am keen to try my hand at the xena project</p>",
        "id": 258336979,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634721749
    },
    {
        "content": "<p>This is a very very old repo</p>",
        "id": 258337048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634721803
    },
    {
        "content": "<p>I had a student do a much better job this summer</p>",
        "id": 258337087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634721823
    },
    {
        "content": "<p>I'm not at a computer right now unfortunately</p>",
        "id": 258337116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634721840
    },
    {
        "content": "<p><a href=\"https://ja1941.github.io/hilberts-axioms/\">https://ja1941.github.io/hilberts-axioms/</a></p>",
        "id": 258337490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634722036
    },
    {
        "content": "<p><a href=\"https://github.com/Ja1941/hilberts-axioms\">https://github.com/Ja1941/hilberts-axioms</a></p>\n<p>contains information about how to install the project and prove some theorems in Euclid's Elements using it. </p>\n<blockquote>\n<p>i am keen to try my hand at the xena project</p>\n</blockquote>\n<p>The Xena Project is an attempt to get mathematicians engaging with the theorem prover community, so if you're posting here already then my work is done.</p>",
        "id": 258337648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634722131
    },
    {
        "content": "<p>i see, thanks! ill check that link out <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 258347641,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634727377
    },
    {
        "content": "<p>In the GeoLean branch of mathlib I also did a development of Tarskis axioms, covering about 70% of the Tarski work in the GeoCoq project</p>",
        "id": 258359061,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1634733567
    },
    {
        "content": "<p>Sounds like we should land at least one of those approaches!</p>",
        "id": 258359356,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634733621
    },
    {
        "content": "<p>I think both would be valuable! The axiom systems are both interesting, and we can keep Joseph's development as the 'intended' case while the axiomatic ones are treated as separate theories</p>",
        "id": 258359673,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1634733767
    },
    {
        "content": "<p>i have been looking at the ja1941 project <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> may I ask who i can ask for relevant help? i am trying my hand at understanding the structure and intend to contribute more theorems as part of the imo grand challenge project</p>",
        "id": 258560072,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634828037
    },
    {
        "content": "<p>The project was written by <span class=\"user-mention\" data-user-id=\"376175\">@Tianchen Zhao</span></p>",
        "id": 258578768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634834624
    },
    {
        "content": "<p>Can you give me some example problems you want to do in the imo project? The repo cannot formalize some complicated geometry problems yet, but this is definitely possible by adding more components to it. I <br>\n<span class=\"user-mention silent\" data-user-id=\"451706\">Tchsurvives</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/258560072\">said</a>:</p>\n<blockquote>\n<p>i have been looking at the ja1941 project <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> may I ask who i can ask for relevant help? i am trying my hand at understanding the structure and intend to contribute more theorems as part of the imo grand challenge project</p>\n</blockquote>\n<p>have a webpage explaining some difficult theorems in the repo and in the end there is also a list of things to add. You can check them here <a href=\"https://ja1941.github.io/hilberts-axioms/\">https://ja1941.github.io/hilberts-axioms/</a> and feel free to ask me if you have any questions.</p>",
        "id": 258615288,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1634849512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"376175\">@Tianchen Zhao</span> hi there! awesome project :) i tried to write a proof of the midpoint theorem as an exercise, but i had difficulty formalising what it means for two lines to be parallel. i wasn't sure if that was due to my inaptitude or because it wasnt written yet.</p>",
        "id": 258691578,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634898137
    },
    {
        "content": "<p>i would love to study and contribute, thanks for your help!</p>",
        "id": 258691648,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634898183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451706\">Tchsurvives</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/258691578\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"376175\">Tianchen Zhao</span> hi there! awesome project :) i tried to write a proof of the midpoint theorem as an exercise, but i had difficulty formalising what it means for two lines to be parallel. i wasn't sure if that was due to my inaptitude or because it wasnt written yet.</p>\n</blockquote>\n<p>Thank you! It's so happy to see people want to contribute to this project. Now it's not provable yet, but we just need one more step to prove it. I did update something on parallelism but I forget to push to github. I just pushed them now and you can have a look. Parallelism is simply defined by two lines without intersections. I am now proving corresponding angles for parallel lines are equal. It's a result by contradiction and that exterior angles are larger than the interior. With this lemma we will be ready to prove the midpoint theorem.</p>",
        "id": 258746801,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1634924595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451706\">Tchsurvives</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/258691578\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"376175\">Tianchen Zhao</span> hi there! awesome project :) i tried to write a proof of the midpoint theorem as an exercise, but i had difficulty formalising what it means for two lines to be parallel. i wasn't sure if that was due to my inaptitude or because it wasnt written yet.</p>\n</blockquote>\n<p>We are now ready to prove midpoint theorem. I just drafted the proof that corresponding or alternative angles are equal iff parallel. It's mostly done with some sorry which is not hard to fill. I will complete them later (but feel free to try them in as exercises too).</p>",
        "id": 258768852,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1634934075
    },
    {
        "content": "<p>great! :D ill take a look at it</p>",
        "id": 258808001,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634972496
    },
    {
        "content": "<p>it seems like we have timezone differences, i stay in Singapore, what's your timezone?</p>",
        "id": 258808046,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634972537
    },
    {
        "content": "<p>You can view someones user profile to see their local time. Of course there is no guarantee that it's correct, but it usually is.</p>",
        "id": 258808131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634972654
    },
    {
        "content": "<p>haha either he works at 4am or his local time is off</p>",
        "id": 258810853,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634976844
    },
    {
        "content": "<p>He's a student in London</p>",
        "id": 258810876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634976906
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/XpmniHLzeRrP2CJXxHHIr8y6/Screenshot-2021-10-23-at-4.29.53-PM.png\">Screenshot-2021-10-23-at-4.29.53-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XpmniHLzeRrP2CJXxHHIr8y6/Screenshot-2021-10-23-at-4.29.53-PM.png\" title=\"Screenshot-2021-10-23-at-4.29.53-PM.png\"><img src=\"/user_uploads/3121/XpmniHLzeRrP2CJXxHHIr8y6/Screenshot-2021-10-23-at-4.29.53-PM.png\"></a></div>",
        "id": 258811377,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634977800
    },
    {
        "content": "<p>it seems like this symbol isnt defined? (edit: it works now)</p>",
        "id": 258811415,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634977814
    },
    {
        "content": "<p>Please see <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>. It's hard to help when we don't know what you're doing!</p>",
        "id": 258811514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634977985
    },
    {
        "content": "<p>alright sorry! im not sure why not it works now, it seems like i need to open the files in vs code at least once for it to load...</p>",
        "id": 258811593,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1634978122
    },
    {
        "content": "<p><a href=\"https://github.com/tch1001/hilberts-axioms/commit/09f0037856a9d524ce19e8d5f2d7ede32d9a0751\">https://github.com/tch1001/hilberts-axioms/commit/09f0037856a9d524ce19e8d5f2d7ede32d9a0751</a> I have attempted to try my hand at ang_lt_supplementary, but I think I need a definition of a \"flipped ray\" (vertically opposite angles are equal, corollary 9.3 in hartshone's book)</p>",
        "id": 258827359,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635000627
    },
    {
        "content": "<p>do you think you could define flip_ray for me?</p>",
        "id": 258827365,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635000648
    },
    {
        "content": "<p>:)</p>",
        "id": 258827367,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1635000651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451706\">Tchsurvives</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/258811593\">said</a>:</p>\n<blockquote>\n<p>alright sorry! im not sure why not it works now, it seems like i need to open the files in vs code at least once for it to load...</p>\n</blockquote>\n<p>I just filled all the blanks in corresponding angles and alternative angles. For some hints, you might need the following to prove midpoint theorem:</p>\n<ol>\n<li>extend_congr_seg'<ol start=\"2\">\n<li>SAS</li>\n<li>alternative_eq_iff_parallel</li>\n<li>ASA<br>\nRemind me if you finish the proof or have any questions.</li>\n</ol>\n</li>\n</ol>",
        "id": 258827695,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1635001028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451706\">Tchsurvives</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/258827359\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/tch1001/hilberts-axioms/commit/09f0037856a9d524ce19e8d5f2d7ede32d9a0751\">https://github.com/tch1001/hilberts-axioms/commit/09f0037856a9d524ce19e8d5f2d7ede32d9a0751</a> I have attempted to try my hand at ang_lt_supplementary, but I think I need a definition of a \"flipped ray\" (vertically opposite angles are equal, corollary 9.3 in hartshone's book)</p>\n</blockquote>\n<p>I already proved vertical angles are congruent in congruence/baisc.lean, although without explicitly defining flipped ray.</p>",
        "id": 258880695,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1635084800
    },
    {
        "content": "<p>Hi! I’m Kei Tsukamoto. I’d like to join the project about formalizing tarski’s axiom geometry using Lean with my friend Shun . Could anyone tell us how the project is going and what we should do now?</p>",
        "id": 318222639,
        "sender_full_name": "Kei TSUKAMOTO",
        "timestamp": 1672221027
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span></p>",
        "id": 318222681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672221058
    },
    {
        "content": "<p>I'm not really sure there's an active project at the moment - the only formalisation of Tarski's axioms in Lean I know of is my GeoLean project, but that was designed more as a direct port of the Coq version rather than a Lean-style development</p>",
        "id": 318265737,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1672237732
    },
    {
        "content": "<p>I have had several Imperial students doing projects formalising geometry axiomatically e.g. <a href=\"https://github.com/Ja1941/Hilberts-axioms\">here</a>, and they all made standalone projects rather than trying to get stuff into mathlib. For me, any new formalisation should attempt to get to the \"next level\" which would be using widgets to generate diagrams, which would mean doing a formalisation in Lean 4.</p>",
        "id": 318274519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672240832
    },
    {
        "content": "<p>I'd suggest aiming for Freek's item 12, The Independence of the Parallel Postulate, by proving a complete characterization of instances of versions of axiomatic geometry with and without the parallel postulate (showing that the instances of the former are exactly Euclidean spaces of appropriate dimension, and instances of the latter are exactly Euclidean and hyperbolic spaces of appropriate dimension) - setting things up in appropriate generality to be able to handle spaces of different dimension and to be able to handle the hyperbolic case, and aiming to get things into <code>geometry.tarski</code> in mathlib (with room for also having e.g. <code>geometry.hilbert</code> or <code>geometry.avigad</code> for other sets of axioms).</p>",
        "id": 318294319,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1672247154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/318294319\">said</a>:</p>\n<blockquote>\n<p>I'd suggest aiming for Freek's item 12, The Independence of the Parallel Postulate, by proving a complete characterization of instances of versions of axiomatic geometry with and without the parallel postulate (showing that the instances of the former are exactly Euclidean spaces of appropriate dimension, and instances of the latter are exactly Euclidean and hyperbolic spaces of appropriate dimension) - setting things up in appropriate generality to be able to handle spaces of different dimension and to be able to handle the hyperbolic case, and aiming to get things into <code>geometry.tarski</code> in mathlib (with room for also having e.g. <code>geometry.hilbert</code> or <code>geometry.avigad</code> for other sets of axioms).</p>\n</blockquote>\n<p>Can you explain what “Freek’s item 12” refers to?</p>",
        "id": 318349341,
        "sender_full_name": "Shun Nakatani",
        "timestamp": 1672279526
    },
    {
        "content": "<p><a href=\"https://www.cs.ru.nl/~freek/100/\">https://www.cs.ru.nl/~freek/100/</a></p>",
        "id": 318349990,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1672280170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/318265737\">said</a>:</p>\n<blockquote>\n<p>I'm not really sure there's an active project at the moment - the only formalisation of Tarski's axioms in Lean I know of is my GeoLean project, but that was designed more as a direct port of the Coq version rather than a Lean-style development</p>\n</blockquote>\n<p>Your GeoLean project is impressive!<br>\nBut what change would make it more lean-style?</p>",
        "id": 318382528,
        "sender_full_name": "Shun Nakatani",
        "timestamp": 1672306200
    },
    {
        "content": "<p>What is the current state of axiomatic geometry in Lean ? I think porting GeoCoq should not be too hard (Roland Coghetto has already ported a large part of GeoCoq to Isabelle).  In GeoCoq we have the formalization of axioms systems of Tarski, Hilbert, Euclid, and links between them. We  have the fact that one can reconstruct a field in the Euclidean case (arithmetization of geometry).  I am open to co-advise an internship if someone is interested.</p>",
        "id": 391662941,
        "sender_full_name": "Julien Narboux",
        "timestamp": 1695031285
    },
    {
        "content": "<p>If we can have diagrams as well then I would love to take this into schools in the UK and show the 16 year olds how the Euclidean geometry they learn can be formalised, and how much work it is to make it rigorous. So for me a great goal would be the \"circle theorems\" (of which there are about 6, e.g. angle at centre equals twice angle at circumference etc). But I don't know anything about how to make diagrams (widgets) in Lean.</p>",
        "id": 391667256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695032551
    },
    {
        "content": "<p>Many students worked on that, but it was never polished enough to become part of mathlib. I agree that porting GeoCoq should be the way to go.</p>",
        "id": 391700499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695043867
    },
    {
        "content": "<p>Some people are working on Euclidean Geometry: <a href=\"https://github.com/jjdishere/EG\">https://github.com/jjdishere/EG</a></p>",
        "id": 391710237,
        "sender_full_name": "Wen Yang",
        "timestamp": 1695046609
    },
    {
        "content": "<p>I think there's going to be an announcement quite soon from <span class=\"user-mention\" data-user-id=\"407577\">@André Hernández-Espiet (Rutgers)</span> about formalizing <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>'s axioms and using them to \"naturally\" formalize Euclid's Book 1... <a href=\"https://github.com/ah1112/synthetic_euclid_4\">https://github.com/ah1112/synthetic_euclid_4</a></p>",
        "id": 391744946,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1695057751
    },
    {
        "content": "<p>What would be nice is, once the foundations are laid in these projects is to get that into mathlib so that others can contribute to the formalization of Euclid's Elements so it can be more of a community effort instead of groups working disparately.</p>",
        "id": 391752083,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1695060560
    },
    {
        "content": "<p>The biiiiig problem with this is that there are many competing axiomatic formalisations of geometry</p>",
        "id": 391752642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695060814
    },
    {
        "content": "<p>The advantage of Julian's approach is that he did all of them :-)</p>",
        "id": 391752681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695060831
    },
    {
        "content": "<p>Yes, agreed, all of them and links between them are even better.  I was referring to Alex and Wen's project mentions.</p>",
        "id": 391752890,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1695060918
    },
    {
        "content": "<p>Earlier in the thread I cite two more formalisations which came out of Imperial when were experimenting back in the early days.</p>",
        "id": 391753064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695060997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638590\">@Julien Narboux</span> what would be the first steps for starting the port?</p>",
        "id": 391753914,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1695061368
    },
    {
        "content": "<p>Julien's suggestion was: \"find a good student\" :-)</p>",
        "id": 391754847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695061770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391752083\">said</a>:</p>\n<blockquote>\n<p>What would be nice is, once the foundations are laid in these projects is to get that into mathlib so that others can contribute to the formalization of Euclid's Elements so it can be more of a community effort instead of groups working disparately.</p>\n</blockquote>\n<p>Yes, your point is very well taken...</p>",
        "id": 391757146,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1695062867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391752642\">said</a>:</p>\n<blockquote>\n<p>The biiiiig problem with this is that there are many competing axiomatic formalisations of geometry</p>\n</blockquote>\n<p>The response to that is to have them all in the form of typeclasses and implications between them.</p>",
        "id": 391767223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695067625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638590\">Julien Narboux</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391662941\">said</a>:</p>\n<blockquote>\n<p>What is the current state of axiomatic geometry in Lean ? I think porting GeoCoq should not be too hard (Roland Coghetto has already ported a large part of GeoCoq to Isabelle).  In GeoCoq we have the formalization of axioms systems of Tarski, Hilbert, Euclid, and links between them. We  have the fact that one can reconstruct a field in the Euclidean case (arithmetization of geometry).  I am open to co-advise an internship if someone is interested.</p>\n</blockquote>\n<p>I have a port of a large portion of GeoCoq in Lean, in the GeoLean branch of mathlib3</p>",
        "id": 391771428,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695069558
    },
    {
        "content": "<p>The main issue with it is that the Coq style doesn't work well with the mathlib style - GeoCoq alone had some theorems duplicated with different names inside itself, so there's some work to tidy it up, and then further work to set up the theory to be good lean quality.</p>",
        "id": 391771611,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695069633
    },
    {
        "content": "<p>Did you open a GeoCoq issue about those duplicated theorems?</p>",
        "id": 391780699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695073988
    },
    {
        "content": "<p>I didn't - my impression was that that project was finished and so issues wouldn't be particularly useful</p>",
        "id": 391949182,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695140365
    },
    {
        "content": "<p>I am ready to PR this, can I please have GitHub access for Lean 4? My GitHub user is ah1112</p>",
        "id": 392125400,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1695218843
    },
    {
        "content": "<p>You should have an invitation.</p>",
        "id": 392128575,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1695219717
    },
    {
        "content": "<p>This is now PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7300\">#7300</a>. It's giving me a build error I do not understand. It compiles perfectly on my local machine. Any help would be much appreciated.</p>",
        "id": 392341376,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1695308860
    },
    {
        "content": "<p>One error is that you haven't added the new files you added to the file <code>Mathlib.lean</code> which is a sort of directory of all files within mathlib</p>",
        "id": 392347020,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695310494
    },
    {
        "content": "<p>And I can reproduce the second error locally, there is presumably some issue with the tactics youve written that appears in <code>quad_add_of_quad</code></p>",
        "id": 392348936,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695311044
    },
    {
        "content": "<p>its easy to miss such issues as the only show up as a pop-up in vscode but there is some array index out of bounds in your tactic</p>",
        "id": 392349002,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695311072
    },
    {
        "content": "<p>In this case you can fix the immediate issue by changing the last line of that proof to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">(</span><span class=\"n\">not_online_of_sameside</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">perma</span><span class=\"o\">[</span><span class=\"n\">feL</span><span class=\"o\">]</span> <span class=\"o\">:))]</span>\n</code></pre></div>\n<p>perhaps the issue is something to do with tactics being handed goals with metavariables in</p>",
        "id": 392349730,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695311329
    },
    {
        "content": "<p>it looks like the same issue comes up later in the file also so at the very least it would be better to change the tactic to print good error messages in this case</p>",
        "id": 392349817,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695311359
    },
    {
        "content": "<p>Feel free to say here if you want more info on how to debug / fix this, happy to help</p>",
        "id": 392350617,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695311637
    },
    {
        "content": "<p>Tagging <span class=\"user-mention\" data-user-id=\"613795\">@Vladimír Sedláček</span> who wrote the tactics; hopefully between Vlada and Andre (and Alex's gracious help), this can be fixed...</p>",
        "id": 392363814,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1695316424
    },
    {
        "content": "<p>Ok, I added the files to<code>Mathlib.lean</code>, so it is not complaining about that anymore. I will talk with <span class=\"user-mention\" data-user-id=\"613795\">@Vladimír Sedláček</span>  and if we can't figure it out, then we'll ask for help. Thanks a lot!</p>",
        "id": 392374575,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1695320829
    },
    {
        "content": "<p>Since there are many different axiom systems, I think you should put this in <code>Mathlib.Geometry.Avigad</code> not <code>Mathlib.Geometry.Synthetic</code> (leaving room for future addition of <code>Mathlib.Geometry.Tarski</code> and <code>Mathlib.Geometry.Hilbert</code> and proofs of how the different axiom systems are related). The module doc string definitely needs to give a reference to the source of the particular set of axioms being used.</p>",
        "id": 392403490,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1695334706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266253\">Joseph Myers</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/392403490\">said</a>:</p>\n<blockquote>\n<p>Since there are many different axiom systems, I think you should put this in <code>Mathlib.Geometry.Avigad</code> not <code>Mathlib.Geometry.Synthetic</code> (leaving room for future addition of <code>Mathlib.Geometry.Tarski</code> and <code>Mathlib.Geometry.Hilbert</code> and proofs of how the different axiom systems are related). The module doc string definitely needs to give a reference to the source of the particular set of axioms being used.</p>\n</blockquote>\n<p>Ok! I modified the directories to reflect this. Let me know if you think I should do anything else.</p>",
        "id": 392425132,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1695347759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/392349730\">said</a>:</p>\n<blockquote>\n<p>In this case you can fix the immediate issue by changing the last line of that proof to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">(</span><span class=\"n\">not_online_of_sameside</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">perma</span><span class=\"o\">[</span><span class=\"n\">feL</span><span class=\"o\">]</span> <span class=\"o\">:))]</span>\n</code></pre></div>\n<p>perhaps the issue is something to do with tactics being handed goals with metavariables in</p>\n</blockquote>\n<p>Indeed, it seems that the metavariables are the issue - the index out of bounds error does not happen when the argument type is made explicit. Is that what your <code>:</code> fix does?</p>\n<p>I believe the underlying culprit is the last line of the following MWE, which internally calls <code>Array.get!</code> inside <code>getNthArgName</code>. Any ideas how to fix this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"n\">u3</span>\n<span class=\"kd\">class</span> <span class=\"n\">incidence_geometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sameside</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sameside_symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"o\">},</span> <span class=\"n\">sameside</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">sameside</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">incidence_geometry</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">incidence_geometry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getFVars</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">FVarId</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.collectFVars</span> <span class=\"o\">{}</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fvarIds</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getNthArgName</span> <span class=\"o\">(</span><span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">getFVars</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.getArg</span><span class=\"bp\">!</span> <span class=\"n\">tgt</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getUserName</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"sameside_nf\"</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Conv.getLhs</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">n1</span> <span class=\"bp\">←</span> <span class=\"n\">getNthArgName</span> <span class=\"n\">tgt</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">n2</span> <span class=\"bp\">←</span> <span class=\"n\">getNthArgName</span> <span class=\"n\">tgt</span> <span class=\"mi\">2</span>\n  <span class=\"k\">if</span> <span class=\"n\">n2.lt</span> <span class=\"n\">n1</span> <span class=\"k\">then</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">sameside_symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">))</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"perm\"</span> <span class=\"o\">(</span><span class=\"s2\">\"at \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">perm</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">length</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">all_goals</span> <span class=\"n\">sameside_nf</span><span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">haveExpr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">h</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MVarId.assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">h</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MVarId.intro1P</span> <span class=\"n\">mvarIdNew</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Syntax</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"havePerms\"</span> <span class=\"o\">(</span><span class=\"s2\">\" [\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">havePerms</span> <span class=\"bp\">$</span><span class=\"o\">[[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">hyps</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">((</span><span class=\"n\">args.map</span> <span class=\"o\">(</span><span class=\"n\">TSepArray.getElems</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"o\">{})</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"o\">(</span><span class=\"n\">elabTerm</span> <span class=\"bp\">·.</span><span class=\"n\">raw</span> <span class=\"n\">none</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n    <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">hyps</span> <span class=\"k\">do</span>\n      <span class=\"n\">haveExpr</span> <span class=\"s2\">\"this\"</span> <span class=\"n\">h</span>\n      <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">perm</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"s2\">\"this\"</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 392524931,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1695391277
    },
    {
        "content": "<p>The <code>:</code> essentially delays the elaboration of that tactic, which I think in this case causes lean to fill in the mvars by the time your tactic gets called.</p>",
        "id": 392525553,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695391445
    },
    {
        "content": "<p>Seeing as your normalization strategy really relies on having the user names available</p>",
        "id": 392525623,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695391461
    },
    {
        "content": "<p>I think the best fix is probably just to catch and throw an error in your tactics whenever the goal has some unassigned mvars in</p>",
        "id": 392525764,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695391498
    },
    {
        "content": "<p>And let the user be more specific about where the problem is</p>",
        "id": 392525839,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695391517
    },
    {
        "content": "<p>So maybe instead of <code>  ((getFVars (Lean.Expr.getArg! tgt n)).get! 0).getUserName</code> in <code>getNthArgName</code> you could use (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.fvarId</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.getArg</span><span class=\"bp\">!</span> <span class=\"n\">tgt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"argument {n} is not a free variable\"</span>\n  <span class=\"n\">id.getUserName</span>\n</code></pre></div>",
        "id": 392527328,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695391882
    },
    {
        "content": "<p>Thanks a lot! With your suggested change, only two proofs seem to be broken now, and hopefully the delayed elaboration and/or some slight refactoring will take care of that.</p>",
        "id": 392547026,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1695396991
    },
    {
        "content": "<p>I have two linter issues that I don´t  really understand, if one of you could help me.<br>\nOne of them is saying I have bad universe levels. How do I fix this?<br>\nThe other one says to <code>Remove matcher: gcc</code>.  How do I solve this?</p>",
        "id": 392618240,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1695427155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407577\">@André Hernández-Espiet (Rutgers)</span>, can you post a link to a CI run or otherwise a branch?</p>",
        "id": 392619249,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695427824
    },
    {
        "content": "<p>Sorry, I am kind of new to this. What is a CI run? The branch info is in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7300\">#7300</a> perhaps?</p>",
        "id": 392619513,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1695427950
    },
    {
        "content": "<p>That's great, thanks. (By \"a CI run\" I meant this link: <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6280035987/job/17056653298?pr=7300\">https://github.com/leanprover-community/mathlib4/actions/runs/6280035987/job/17056653298?pr=7300</a>)</p>",
        "id": 392619588,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695428006
    },
    {
        "content": "<p>The remove matcher isn't a failure. So you only need to solve the universes thing</p>",
        "id": 392619701,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695428052
    },
    {
        "content": "<p>The \"remove matcher\" you should ignore --- and we should get rid of.</p>",
        "id": 392619706,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695428056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/392619706\">said</a>:</p>\n<blockquote>\n<p>The \"remove matcher\" you should ignore --- and we should get rid of.</p>\n</blockquote>\n<p>Its a logging message from an action we use so i'm not sure we can get rid of it completely</p>",
        "id": 392619816,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695428113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/392619588\">said</a>:</p>\n<blockquote>\n<p>That's great, thanks. (By \"a CI run\" I meant this link: <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6280035987/job/17056653298?pr=7300\">https://github.com/leanprover-community/mathlib4/actions/runs/6280035987/job/17056653298?pr=7300</a>)</p>\n</blockquote>\n<p>Oooh that's good to know.</p>",
        "id": 392619869,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1695428143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/392619816\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/392619706\">said</a>:</p>\n<blockquote>\n<p>The \"remove matcher\" you should ignore --- and we should get rid of.</p>\n</blockquote>\n<p>Its a logging message from an action we use so i'm not sure we can get rid of it completely</p>\n</blockquote>\n<p>Worth a try: <a href=\"https://github.com/liskin/gh-problem-matcher-wrap/issues/15\">https://github.com/liskin/gh-problem-matcher-wrap/issues/15</a></p>",
        "id": 392620203,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695428336
    },
    {
        "content": "<p>As for the universes thing, it seems unlikely to me that you'd need to have points, lines, circles in different universes for any reason later, so you could make them all the same. And maybe the linter is a hint that things could be annoying later with so much flexibility</p>",
        "id": 392620795,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695428666
    },
    {
        "content": "<p>Ok, I will do that and see if it builds. I can try <code>#lint</code> to check locally, right?</p>",
        "id": 392620976,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1695428765
    },
    {
        "content": "<p>It worked!</p>",
        "id": 392624220,
        "sender_full_name": "André Hernández-Espiet (Rutgers)",
        "timestamp": 1695430577
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7346\">#7346</a> will silence the confusing \"remove matcher\" message! (Yay this modern github world.)</p>",
        "id": 392764089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695520963
    },
    {
        "content": "<p>Andre, it looks like there's a merge conflict. If I understand correctly, this should be cleared with <code>git merge origin/master</code>...</p>",
        "id": 392864689,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1695586534
    },
    {
        "content": "<p>This is exactly what we do in GeoCoq.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391767223\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391752642\">said</a>:</p>\n<blockquote>\n<p>The biiiiig problem with this is that there are many competing axiomatic formalisations of geometry</p>\n</blockquote>\n<p>The response to that is to have them all in the form of typeclasses and implications between them.</p>\n</blockquote>",
        "id": 393254985,
        "sender_full_name": "Julien Narboux",
        "timestamp": 1695740615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391771611\">said</a>:</p>\n<blockquote>\n<p>The main issue with it is that the Coq style doesn't work well with the mathlib style - GeoCoq alone had some theorems duplicated with different names inside itself, so there's some work to tidy it up, and then further work to set up the theory to be good lean quality.</p>\n</blockquote>\n<p>Yes indeed GeoCoq needs to be cleaned up (there some duplicated lemmas (some are just symmetric of others etc), and some good naming convention should be adopted. Currently it is a mix of names coming from the book of Tarski and our own names.</p>",
        "id": 393255506,
        "sender_full_name": "Julien Narboux",
        "timestamp": 1695740705
    },
    {
        "content": "<p>No it is not finished, there plenty of extension needed. For example, we are missing trigonometry, areas, etc...</p>",
        "id": 393255836,
        "sender_full_name": "Julien Narboux",
        "timestamp": 1695740768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391753914\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"638590\">Julien Narboux</span> what would be the first steps for starting the port?</p>\n</blockquote>\n<p>I think the main axiom system could be Tarski's, the book by Schwabhauser, Tarski and Szmiliew is very formal and quite easy to follow, and it brings the very important result that one can reconstruct a field.  From this, one can derive Hilbert's geometry and the proofs that the two are equivalent. It should not be too difficult based on the existing formalizations that will tell you about all the details and help in case one is stuck on a proof. I guess it is not difficult to port  the proofs from Coq to Lean, the first step would be to write the tactics, you need some tactics to deal with pseudo-transitivity of collinearity and symmetries of geometric predicates, etc (see <a href=\"https://adg2023.matf.bg.ac.rs/downloads/slides/IntroductionBoutryNarboux.pdf\">https://adg2023.matf.bg.ac.rs/downloads/slides/IntroductionBoutryNarboux.pdf</a> for a list of tactics). Then each lemma can be reproduced one by one.  A difficulty could be that in some chapters at the end, we rely on a tactic based on Gröbner's basis (nsatz in Coq), I don't know if there is an equivalent in Lean4. The proof could be done manually but that would be boring. <br>\nAnother difficulty is cleaning up: detecting duplicates,  giving good names etc.<br>\nSometimes it may well be the case that a long proof can be replaced by a much a simpler one. <br>\nRoland Coghetto ported GeoCoq to Isabelle using Sledgehammer, without trying to understand the proofs, I don't know if there is a hammer for Isabelle, that could be an option. The hammer could help also detecting duplicates, and shorter proofs.<br>\nMaybe the porting of GeoCoq could be a good opportunity to translate proof from tactic style to a more declarative style, maybe based on tactics like <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> 's Lean-Verbose. </p>\n<p>Yoan Geran has exported our formalization of Euclid/Book 1 (238 lemmas, 20klocs,15% of<br>\nGeoCoq) to Dedukti, and he can translate the proofs back to Coq, HOL-Light, Lean, Matita, PVS and Open Theory. <br>\nBut the (compressed) size of the translated proofs are multiplied by 10 (Lean, Matita, Coq), 25 (Hol-Light) and 50 (PVS).<br>\nSo it may not be usable in practice, even if there is room for improvements.<br>\nThe difficulty is that Dedukti works with lambda terms, and it would be hard to get back some tactics that make the proofs shorter.<br>\nFor example, in GeoCoq we have a tactic that derive automatically a lot of ndg conditions, for example if A is different from B, then the midpoint of AB is different from A and from B, etc... it applies several rules like that in a forward chaining manner and it completes the context with many NDGs. Maybe some of these NDGs are not actually used in the proof, but it is convenient to have them for automation. If one translates the proofs from the lambda term, one can detect that some part are derived but not used (dead code). So the translation in some sense simplifies the proofs, but in practice because all theses facts are produced by a single call to a tactic, the \" simplified \" proof is much longer than the original.</p>",
        "id": 393409879,
        "sender_full_name": "Julien Narboux",
        "timestamp": 1695798742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391667256\">said</a>:</p>\n<blockquote>\n<p>If we can have diagrams as well then I would love to take this into schools in the UK and show the 16 year olds how the Euclidean geometry they learn can be formalised, and how much work it is to make it rigorous. So for me a great goal would be the \"circle theorems\" (of which there are about 6, e.g. angle at centre equals twice angle at circumference etc). But I don't know anything about how to make diagrams (widgets) in Lean.</p>\n</blockquote>\n<p>Filip Maric has a javascript library to draw sketches. Maybe this can be used in a widget.</p>",
        "id": 393412017,
        "sender_full_name": "Julien Narboux",
        "timestamp": 1695799467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638590\">Julien Narboux</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/393409879\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391753914\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"638590\">Julien Narboux</span> what would be the first steps for starting the port?</p>\n</blockquote>\n<p>I guess it is not difficult to port  the proofs from Coq to Lean, the first step would be to write the tactics, you need some tactics to deal with pseudo-transitivity of collinearity and symmetries of geometric predicates, etc (see <a href=\"https://adg2023.matf.bg.ac.rs/downloads/slides/IntroductionBoutryNarboux.pdf\">https://adg2023.matf.bg.ac.rs/downloads/slides/IntroductionBoutryNarboux.pdf</a> for a list of tactics). Then each lemma can be reproduced one by one.  A difficulty could be that in some chapters at the end, we rely on a tactic based on Gröbner's basis (nsatz in Coq), I don't know if there is an equivalent in Lean4. The proof could be done manually but that would be boring. <br>\nAnother difficulty is cleaning up: detecting duplicates,  giving good names etc.<br>\nSometimes it may well be the case that a long proof can be replaced by a much a simpler one. </p>\n<p>For example, in GeoCoq we have a tactic that derive automatically a lot of ndg conditions, for example if A is different from B, then the midpoint of AB is different from A and from B, etc... it applies several rules like that in a forward chaining manner and it completes the context with many NDGs. Maybe some of these NDGs are not actually used in the proof, but it is convenient to have them for automation.</p>\n</blockquote>\n<p>I agree with all of this - in my port of GeoCoq to Lean I did do most of these tactic steps automatically, and used automation to make some of the easy parts even easier. Although the size of the translated proofs was overall shorter than the Coq versions, for me.</p>",
        "id": 393518703,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695828541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638590\">Julien Narboux</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/393412017\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391667256\">said</a>:</p>\n<blockquote>\n<p>If we can have diagrams as well then I would love to take this into schools in the UK and show the 16 year olds how the Euclidean geometry they learn can be formalised, and how much work it is to make it rigorous. So for me a great goal would be the \"circle theorems\" (of which there are about 6, e.g. angle at centre equals twice angle at circumference etc). But I don't know anything about how to make diagrams (widgets) in Lean.</p>\n</blockquote>\n<p>Filip Maric has a javascript library to draw sketches. Maybe this can be used in a widget.</p>\n</blockquote>\n<p>Do you have any link to share?</p>",
        "id": 393519384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695828724
    },
    {
        "content": "<blockquote>\n<p>The response to that is to have them all in the form of typeclasses and implications between them.</p>\n</blockquote>\n<p>I wonder if we can put a [EuclidWithoutFifthPostulate] instance on upper half plane, unit disk (Poincare or Klein), and E^2 (or any inner product space of dimension 2) and have all theorems apply to them ... Looks like a lot of duplication to be saved. By the way, is there anything about higher dimensional (3D?) geometry, even just writing down the axioms? (Edit: GeoCoq apparently has it, see <a href=\"https://adg2023.matf.bg.ac.rs/downloads/slides/IntroductionBoutryNarboux.pdf\">slide 15</a>.)</p>",
        "id": 393616708,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695877373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/393616708\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The response to that is to have them all in the form of typeclasses and implications between them.</p>\n</blockquote>\n<p>I wonder if we can put a [EuclidWithoutFifthPostulate] instance on upper half plane, unit disk (Poincare or Klein), and E^2 (or any inner product space of dimension 2) and have all theorems apply to them ... Looks like a lot of duplication to be saved. By the way, is there anything about higher dimensional (3D?) geometry, even just writing down the axioms? (Edit: GeoCoq apparently has it, see <a href=\"https://adg2023.matf.bg.ac.rs/downloads/slides/IntroductionBoutryNarboux.pdf\">slide 15</a>.)</p>\n</blockquote>\n<p>Yeah - you can take a subset of the Tarski axioms and work on &gt;=2D geometry or &lt;=2D geometry, or modify them and fix which dimension you want to work in</p>",
        "id": 393796044,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695931039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/391667256\">said</a>:</p>\n<blockquote>\n<p>If we can have diagrams as well then I would love to take this into schools in the UK and show the 16 year olds how the Euclidean geometry they learn can be formalised, and how much work it is to make it rigorous. So for me a great goal would be the \"circle theorems\" (of which there are about 6, e.g. angle at centre equals twice angle at circumference etc). But I don't know anything about how to make diagrams (widgets) in Lean.</p>\n</blockquote>\n<p>I made a small widget demo for visualizing points and lines here: <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Demos/Euclidean.lean\">https://github.com/EdAyers/ProofWidgets4/blob/main/ProofWidgets/Demos/Euclidean.lean</a>. I can try extending it for circles as well in the near future.</p>",
        "id": 393815942,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1695941428
    },
    {
        "content": "<p>Another benchmark for formalisation could be Zeilberger's cute geometry textbook <a href=\"https://sites.math.rutgers.edu/~zeilberg/PG/gt.html\">https://sites.math.rutgers.edu/~zeilberg/PG/gt.html</a> .</p>",
        "id": 393879628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695974140
    },
    {
        "content": "<p><a href=\"https://github.com/VladaSedlacek/ProofWidgets4/tree/euclidean\">Here</a>'s my attempt, I'll be glad for feedback.<br>\n<a href=\"/user_uploads/3121/-ItpJGnXD4GRMeB7TRPL-kks/circle_demo1.png\">circle_demo1.png</a><br>\n<a href=\"/user_uploads/3121/FKdb681hWhSz9VbMK0xACPLs/circle_demo2.png\">circle_demo2.png</a><br>\nAfter shift-clicking a subset of hypotheses, they get rendered by <a href=\"https://penrose.cs.cmu.edu\">Penrose</a> according to your styling rules.<br>\n(Before PRing this to ProofWidgets, maybe it makes sense to wait until André's PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7300\">#7300</a> is merged, so that all the geometry can be imported instead of duplicated?)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-ItpJGnXD4GRMeB7TRPL-kks/circle_demo1.png\" title=\"circle_demo1.png\"><img src=\"/user_uploads/3121/-ItpJGnXD4GRMeB7TRPL-kks/circle_demo1.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FKdb681hWhSz9VbMK0xACPLs/circle_demo2.png\" title=\"circle_demo2.png\"><img src=\"/user_uploads/3121/FKdb681hWhSz9VbMK0xACPLs/circle_demo2.png\"></a></div>",
        "id": 394852902,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1696429561
    },
    {
        "content": "<p>This is great, Vlada! You can PR yours on top of Andre's and mark it is as dependent on his</p>",
        "id": 394860968,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1696431737
    },
    {
        "content": "<p>Perhaps the colors should be changed a little bit? At least you can add a css filter that sort of subtracts colors so it's visible in both light and dark mode</p>",
        "id": 394865101,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1696432998
    },
    {
        "content": "<p>This is fantastic! Could you show us an example involving an actual geometry theorem? You could start with stating that lines from the vertices of a triangle to the middle of the opposite edge share a common point. And then do Feuerbach' s theorem for extra credit.</p>",
        "id": 394866357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696433362
    },
    {
        "content": "<p>Or a standard UK high school circle theorem that every 15 year old in my country has to learn, like <a href=\"https://www.bbc.co.uk/bitesize/guides/zcsgdxs/revision/2\">angle at centre equals twice angle at circumference</a>.</p>",
        "id": 394867745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696433802
    },
    {
        "content": "<p>Thanks for the suggestions! Seeing the reactions, I might reconsider the PR after polishing this a little.<br>\n<span class=\"user-mention\" data-user-id=\"404479\">@Trebor Huang</span> We looked into this with <span class=\"user-mention\" data-user-id=\"649518\">@Rohan Karamel</span> today and the colors should now automatically match the VSCode theme. Next level could be adding an infoview panel where you can customize the colors on the fly.<br>\n<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Let's see what I can do. Angles might be slightly tricky to visualize with this setup.<br>\nAlso <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> proposed that to improve usability, it would be nice to have the picture drawn automatically with all the hypotheses selected (currently, you have to add them one by one, and the picture is only shown if the cursor is on the line with the corresponding tactic). I'll look into this, but any ideas would be appreciated - perhaps <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> or <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> might know?</p>",
        "id": 394935345,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1696465739
    },
    {
        "content": "<blockquote>\n<p>Before PRing this to ProofWidgets, maybe it makes sense to wait until André's PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7300\">#7300</a> is merged, so that all the geometry can be imported instead of duplicated?</p>\n</blockquote>\n<p>Perhaps I am misunderstanding, but you cannot import Mathlib from ProofWidgets because Mathlib depends on ProofWidgets. What you can do, though, is put the visualization code under Mathlib.Tactic.Widget.</p>",
        "id": 394942870,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696469788
    },
    {
        "content": "<blockquote>\n<p>the colors should now automatically match the VSCode theme</p>\n</blockquote>\n<p>Were you able to use the <code>foreground/tooltipBackground</code> etc constants?</p>",
        "id": 394942925,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696469825
    },
    {
        "content": "<blockquote>\n<p>to improve usability, it would be nice to have the picture drawn automatically with all the hypotheses selected (currently, you have to add them one by one, and the picture is only shown if the cursor is on the line with the corresponding tactic)</p>\n</blockquote>\n<p>You can change your JS in <code>EuclideanDisplayPanel</code> to ignore <code>props.selectedLocations</code> (ignore the selection) and instead send all the hypotheses to your <code>server_rpc_method</code> for processing. Actually, all the hypotheses are already \"there\" in the MetaM state introduced by <code>ps.mvar.withContext</code>, so you can just ignore <code>locs</code> and grab all the hypotheses instead.</p>",
        "id": 394943129,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1696469941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/tarski.20axiom.20geometry/near/393616708\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The response to that is to have them all in the form of typeclasses and implications between them.</p>\n</blockquote>\n<p>I wonder if we can put a [EuclidWithoutFifthPostulate] instance on upper half plane, unit disk (Poincare or Klein), and E^2 (or any inner product space of dimension 2) and have all theorems apply to them ... Looks like a lot of duplication to be saved. By the way, is there anything about higher dimensional (3D?) geometry, even just writing down the axioms? (Edit: GeoCoq apparently has it, see <a href=\"https://adg2023.matf.bg.ac.rs/downloads/slides/IntroductionBoutryNarboux.pdf\">slide 15</a>.)</p>\n</blockquote>\n<p>Yes in Tarski's book you already have a lot of results proved without the fifth postulate and in arbitrary dimension. In GeoCoq we have often the assumption that we are at least in 2D.</p>",
        "id": 400484117,
        "sender_full_name": "Julien Narboux",
        "timestamp": 1699259883
    }
]