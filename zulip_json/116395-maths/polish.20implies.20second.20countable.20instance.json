[
    {
        "content": "<p>Recently I tried adding the following instance to <code>topology/metric_space/polish.lean</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">second_countable_of_polish</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">polish_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">second_countable_topology</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">h.second_countable</span>\n</code></pre></div>\n<p>This caused quite a few errors of the form <code>maximum class-instance resolution depth has been reached</code> in quite a few files. I tried adding a low priority to this instance. This fixed some of the errors but not all of them. </p>\n<p>How should I address this? Actually, I don't understand why the <code>polish_space</code> class isn't defined with <code>extends second_countable_topology</code> in the first place. I'm aware that you can use <code>upgrade_polish_space</code> to introduce an instance of <code>second_countable_topology</code> yourself, but this seems like it defeats the purpose of type-class inference.</p>",
        "id": 352119059,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1682281278
    },
    {
        "content": "<p>The docs at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polish_space.second_countable\">docs#polish_space.second_countable</a> say</p>\n<blockquote>\n<p>A Polish space is a topological space with second countable topology, that can be endowed with a metric for which it is complete. We register an instance from complete second countable metric space to polish space, and not the other way around as this is the most common use case.</p>\n</blockquote>",
        "id": 352119251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682281382
    },
    {
        "content": "<p>Perhaps the missing explanation is \"loops are not supported in Lean 3 TC search\"</p>",
        "id": 352119280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682281411
    },
    {
        "content": "<p>I see, thanks for the explanation.</p>",
        "id": 352119373,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1682281486
    },
    {
        "content": "<p>Still, is there any way to give lean the ability to automatically find a <code>second_countable_topology</code> instance given a <code>polish_space</code> one without breaking things? It just feels very weird to be missing this.</p>",
        "id": 352119565,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1682281656
    },
    {
        "content": "<p>Only if we remove the instance going in the other direction, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polish_space_of_complete_second_countable\">docs#polish_space_of_complete_second_countable</a></p>",
        "id": 352120666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682282479
    },
    {
        "content": "<p>My impression without any familiarity here is that the current choice is rather strange, and removing that instance in favor of the other one would likely make sense</p>",
        "id": 352120698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682282518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> will certainly have more informed opinions here</p>",
        "id": 352120852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682282642
    },
    {
        "content": "<p>For your purpose, for now you can try remove the instance in the file you're working on with <code>local attribute [-instance] ...</code> and add the other direction (maybe stuff will break)</p>",
        "id": 352121002,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682282760
    },
    {
        "content": "<p>The typical situation is that you will have theorems on polish spaces that you will want to apply to second countable metric spaces (say, finite dimensional real normed vector spaces), so for the sake of appying the theory of polish spaces the current instance choice is the right one. On the other hand, I agree it is suboptimal for building the theory. But in fact what one does a lot is start from a polish space and then endow it with a complete metric space structure compatible with the topology -- and there is a command for this: at the beginning of the proof, do <code>letI := upgrade_polish_space α</code>, and then you will have a metric, and it will be known to be complete and second countable.</p>",
        "id": 352181687,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1682319754
    },
    {
        "content": "<p>Here I should mention that this issue will disappear with Lean 4, which allows loops in TC search, so we will have instances in both directions.</p>",
        "id": 352182162,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1682319923
    },
    {
        "content": "<p>Aha. Probably I will leave this alone in Lean 3 mathlib, then.</p>",
        "id": 352289276,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1682345628
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 352318321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682351485
    },
    {
        "content": "<p>Kevin, was this an answer to my question about DVR's in the other stream?</p>",
        "id": 352319102,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1682351691
    },
    {
        "content": "<p>OK, Now that lean 4 is here I'd like to add this instance: I currently have a working draft pr where the definition of <code>PolishSpace</code> looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PolishSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">secondCountableTopology</span> <span class=\"o\">:</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">α</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">m.toUniformSpace.toTopologicalSpace</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">@</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">α</span> <span class=\"n\">m.toUniformSpace</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polish_space</span> <span class=\"n\">PolishSpace</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">secondCountable_of_polish</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.secondCountableTopology</span>\n</code></pre></div>\n<p>My question for the experts: would it be better to replace this with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PolishSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">m.toUniformSpace.toTopologicalSpace</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">@</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">α</span> <span class=\"n\">m.toUniformSpace</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polish_space</span> <span class=\"n\">PolishSpace</span>\n</code></pre></div>\n<p>and update later things accordingly?</p>",
        "id": 389476947,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694018418
    }
]