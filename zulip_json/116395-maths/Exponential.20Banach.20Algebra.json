[
    {
        "content": "<p>I was searching for interesting things to do in Lean, and I thought about defining the general exponential function in a Banach Algebra. How hard do you think it would be to use this definition to replace <code>complex.exp</code> and <code>real.exp</code> ? I mean, this would obviously involve refactoring big chunks of proofs, but do you think the <code>formal_multilinear_series</code> is mature enough for this definition ? If not, should I still work on the general definition, PR it, and add a \"TODO : merge\" somewhere, or is it better to wait and do both at once ?</p>\n<p>Related question : I see that my use case (exponential of bounded linear maps) is mentionned in the docstring of <code>analysis.analytic.basic</code>. Is anyone working on that already ?</p>",
        "id": 235175778,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1618837259
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> <br>\nDid you ever work further with this? <br>\nKind regards,<br>\nSonia</p>",
        "id": 342330919,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678977312
    },
    {
        "content": "<p>Yes, this is in mathlib now! See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp\">docs#exp</a></p>",
        "id": 342332655,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1678977623
    },
    {
        "content": "<p>Ah, great! Thank you!</p>",
        "id": 342332912,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678977665
    },
    {
        "content": "<p>Note that we still have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp\">docs#exp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp\">docs#real.exp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp\">docs#complex.exp</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_series.exp\">docs#power_series.exp</a></p>",
        "id": 342342454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678979422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20Banach.20Algebra/near/235175778\">said</a>:</p>\n<blockquote>\n<p>... to use this definition to replace <code>complex.exp</code> and <code>real.exp</code>...</p>\n</blockquote>\n<p>I guess that hasn't happened exactly. Might it?</p>",
        "id": 342343948,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1678979704
    },
    {
        "content": "<p>There was still some annoyance about what to do with the extra field argument consumed by <code>exp</code></p>",
        "id": 342344049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678979722
    },
    {
        "content": "<p>I think we concluded it was probably ok to just hard-code it to <code>rat</code>, but there were some complications</p>",
        "id": 342344150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678979744
    },
    {
        "content": "<p>If I want to generalize <code> schwartz_map (fin d -&gt; ‚Ñù)   ‚ÑÇ</code> to the form <code> schwartz_map (Bananch_space)  ‚ÑÇ</code>, what would the notation for the Bananch space be?  :)</p>",
        "id": 342344382,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678979783
    },
    {
        "content": "<p>I think <a href=\"#narrow/stream/113488-general/topic/exponential.20in.20banach.20algebras/near/248773988\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/exponential.20in.20banach.20algebras/near/248773988</a> is the thread that has more info</p>",
        "id": 342344490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678979802
    },
    {
        "content": "<p>It would be <code>A</code>, where you write <code>variables {A} [normed_ring A] [normed_algebra ‚Ñù A] [complete_space A]</code> I believe</p>",
        "id": 342344810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678979863
    },
    {
        "content": "<p>Ah great, thank you :D Why would it be  [normed_algebra ‚Ñù A] with the real?</p>",
        "id": 342345168,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678979935
    },
    {
        "content": "<p>Mainly because I'm trying to keep things easy for you. Strictly speaking you could write <code>{ùïÇ : Type u_1} {ùî∏ : Type u_2} [is_R_or_C ùïÇ] [normed_ring ùî∏] [normed_algebra ùïÇ ùî∏] [complete_space ùî∏]</code> but the extra generality is illusory since every complex normed algebra is also a real normed algebra</p>",
        "id": 342345459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678979994
    },
    {
        "content": "<p>when I try to add it I get the error 'invalid variable binder type update, 'A' is not a variable'. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.schwartz_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">new</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gaussian_complex</span>  <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">‚Ñï</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a.re</span><span class=\"o\">):</span> <span class=\"n\">schwartz_map</span> <span class=\"n\">A</span> <span class=\"n\">‚ÑÇ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">x</span><span class=\"bp\">‚Äñ^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">smooth'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">decay'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">new</span>\n</code></pre></div>",
        "id": 342347635,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678980381
    },
    {
        "content": "<p>That error is asking you to write <code>{A : Type*}</code></p>",
        "id": 342347992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678980444
    },
    {
        "content": "<p><del>It sounds like you actually need <code>normed_algebra ‚ÑÇ A</code> though if you want to be able to multiply by a complex number</del></p>",
        "id": 342348223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678980485
    },
    {
        "content": "<p>Note that you're not actually use the <code>exp</code> in <code>A</code> there; you're applying it to a complex number still</p>",
        "id": 342348694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678980577
    },
    {
        "content": "<p>If I replace <code>exp</code> with <code>complex.exp</code>, then it is okay with it, but would it then defeat the purpose? I guess already taking the norm makes it go from <code> A |--&gt; ‚Ñù </code> and I won't need the Banach exponential?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.schwartz_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">new</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gaussian_complex</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a.re</span><span class=\"o\">):</span> <span class=\"n\">schwartz_map</span> <span class=\"n\">A</span> <span class=\"n\">‚ÑÇ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">x</span><span class=\"bp\">‚Äñ^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">smooth'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">decay'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">new</span>\n</code></pre></div>",
        "id": 342350701,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678980981
    },
    {
        "content": "<p>Yes, there's no point switching from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp\">docs#complex.exp</a> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp\">docs#exp</a> if you're still going to exponentiate complex numbers</p>",
        "id": 342350840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678981010
    },
    {
        "content": "<p>Okay, great, thank you!</p>",
        "id": 342351814,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678981209
    },
    {
        "content": "<p>And why does Lean have <code> [normed_ring A] [normed_algebra ‚Ñù A]</code> and not a notation for normed vector space?</p>",
        "id": 342352649,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678981371
    },
    {
        "content": "<p>You need a multiplication to take the exponential, which is why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp_add_of_commute\">docs#exp_add_of_commute</a> uses that</p>",
        "id": 342353121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678981465
    },
    {
        "content": "<p>If you just need a normed (real) vector space write <code>[normed_add_comm_group A] [normed_space ‚Ñù A]</code></p>",
        "id": 342353200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678981484
    },
    {
        "content": "<p>ah, okay, so I guess since I go to the complex exponential, then I can just stay with the last option?</p>",
        "id": 342353877,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678981617
    },
    {
        "content": "<p>What is the difference between <code>[normed_algebra ‚Ñù A]</code> and <code>[normed_space ‚Ñù A]</code>?  They both have <code>norm_smul_le</code>, but one has  <code>to_module </code>and the other one <code>to_algebra</code>? :)</p>",
        "id": 342355128,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678981847
    },
    {
        "content": "<p><code>normed_algebra</code> = <code>normed_space</code> + <code>algebra</code></p>",
        "id": 342355377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678981909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20Banach.20Algebra/near/342343948\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20Banach.20Algebra/near/235175778\">said</a>:</p>\n<blockquote>\n<p>... to use this definition to replace <code>complex.exp</code> and <code>real.exp</code>...</p>\n</blockquote>\n<p>I guess that hasn't happened exactly. Might it?</p>\n</blockquote>\n<p>The main reason, on top of what Eric said, is that we want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp\">docs#real.exp</a> to be quite elementary, whereas <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp\">docs#exp</a> has a ton of dependencies. This is also why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real\">docs#real</a> is not defined using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion\">docs#uniform_space.completion</a></p>",
        "id": 342357626,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1678982409
    },
    {
        "content": "<p><code>(ùïÇ : Type u_1) {ùî∏ : Type u_2} [field ùïÇ] [ring ùî∏] [algebra ùïÇ ùî∏] [topological_space ùî∏] [topological_ring ùî∏] (x : ùî∏)</code> doesn't feel like many dependencies to me</p>",
        "id": 342357860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678982457
    },
    {
        "content": "<p>Although admittedly the lemmas need many more dependencies</p>",
        "id": 342357913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678982467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20Banach.20Algebra/near/342344049\">said</a>:</p>\n<blockquote>\n<p>There was still some annoyance about what to do with the extra field argument consumed by <code>exp</code></p>\n</blockquote>\n<p>It seems I had two abandoned branches where I tried this, <a href=\"https://github.com/leanprover-community/mathlib/tree/eric-wieser/exp-rat\">branch#eric-wieser/exp-rat</a> and <a href=\"https://github.com/leanprover-community/mathlib/tree/eric-wieser/exp-very-rat\">branch#eric-wieser/exp-very-rat</a></p>",
        "id": 342358309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678982543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Exponential.20Banach.20Algebra/near/342357860\">said</a>:</p>\n<blockquote>\n<p><code>(ùïÇ : Type u_1) {ùî∏ : Type u_2} [field ùïÇ] [ring ùî∏] [algebra ùïÇ ùî∏] [topological_space ùî∏] [topological_ring ùî∏] (x : ùî∏)</code> doesn't feel like many dependencies to me</p>\n</blockquote>\n<p>I meant dependencies in the sense of the import tree : the operator norm for multilinear maps is quite a heavy import</p>",
        "id": 342359163,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1678982718
    },
    {
        "content": "<p>The operator norm is only needed for the lemmas though, right?</p>",
        "id": 342359342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678982761
    },
    {
        "content": "<p>We could define <code>exp</code> somewhere low down, prove all the properties about it for <code>real</code> the current way, then do the heavy operator norm stuff later</p>",
        "id": 342359502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678982788
    },
    {
        "content": "<p>Having redundant special cases of proofs seems slightly less bad than having redundant special cases of definitions</p>",
        "id": 342359605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678982810
    },
    {
        "content": "<p>17 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Typeclasses.20for.20Banach.20Algebra\">#new members &gt; Typeclasses for Banach Algebra</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 342666081,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679087566
    }
]