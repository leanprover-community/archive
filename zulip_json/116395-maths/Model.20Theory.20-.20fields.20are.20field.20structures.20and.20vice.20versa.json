[
    {
        "content": "<p>I've started (slowly) trying to get the Ax-Grothendieck theorem into mathlib on the <code>axgroth</code> branch. I think the Model Theory library is currently well set up for doing general model theory, but without applying it to concrete examples yet.</p>\n<p>One of the things I have to do for this is prove that a model for the theory of Algebraically Closed Fields of char p is an algebraically closed field of char p and vice versa. This is clearly going to be kind of messy, and the decision I made was to make the fact that fields are models of field an instance, and then any theorem that required both model theory and field theory should be stated over fields. This seems to copy what is already there for graphs. The other direction is there, but not as an instance, and is to be used sparingly. However, I will still sometimes need the other direction, and you end up needing to know that going from <code>Language.field.Structure + Theory.field.Model</code> =&gt; <code>Field</code> =&gt; <code>Language.field.Structure + Theory.field.Model</code> is the identity. Ideally this should be by definition. The lack of commutavity is basically because for <code>f : (fin 2 -&gt; M) - M</code>, <code>f = fun x =&gt; f ![x 0, x1]</code> is not by definition. </p>\n<p>One solution is to put up with the pain, and hope that these issues will only come up a couple of times, and that the important theorems about AlgClosedFields, namely completeness of the theory of alg closed fields of a particular characteristic and also the lefschetz principle will be usable without these issues coming up in usage.</p>\n<p>Another solution is to redefine the notion of a Structure for a language to either return an <code>ArityNFunction</code> where an <code>ArityNFunction</code> is defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ArityNFunction</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">ArityNFunction</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>The final solution is to use some sort of iterated binary product instead of <code>Fin n -&gt; M</code> and then for concrete <code>n</code>, the equality mentioned above that failed will be by definition. I think this is my prefered solution, because it's the least radical change from the current implementation. Do <span class=\"user-mention\" data-user-id=\"133584\">@Joseph Hua</span>, <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> or <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> or <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> have any comments on this?</p>",
        "id": 381050573,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690984813
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Model.20Theory.20-.20fields.20are.20field.20structures.20and.20vice.20versa\">#mathlib4 &gt; Model Theory - fields are field structures and vice versa</a> by <span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span>.</p>",
        "id": 381050742,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690984839
    },
    {
        "content": "<p>I guess the other option is to state all theorems with both <code>[Theory.field.Structure K]</code> and <code>[Field K]</code> as well as a compatibility assumption between the two structures.</p>",
        "id": 381219270,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1690993173
    },
    {
        "content": "<p>I've always struggled with good instance design, and this doesn't change the mathematical meaning, so I'll ultimately defer to any changes on that design, if you can make the existing code work with it.</p>",
        "id": 381244213,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1690997666
    },
    {
        "content": "<p>Also, I think that ultimately, it would be good to be able to define things like, say, definability, on a broad array of such types. Explicitly, I think that it should be possible to define definability of functions <code>M -&gt; M -&gt; M</code>, as well as functions <code>M x M -&gt; M</code> and <code>(fin 2 -&gt; M) -&gt; M</code>. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> probably have some thoughts on how to design this well.</p>",
        "id": 381245384,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1690997933
    },
    {
        "content": "<p>Also also, I've had some conversations recently with <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernández Mir</span> about improving the model theory library, so I'll add a tag.</p>",
        "id": 381245551,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1690997969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/116395-maths/topic/Model.20Theory.20-.20fields.20are.20field.20structures.20and.20vice.20versa/near/381219270\">said</a>:</p>\n<blockquote>\n<p>I guess the other option is to state all theorems with both <code>[Theory.field.Structure K]</code> and <code>[Field K]</code> as well as a compatibility assumption between the two structures.</p>\n</blockquote>\n<p>This is what I did in the end. I defined a <code>CompatibleField</code> type class which extends <code>Field</code> and <code>Language.field.Structure</code> along with compatibility hypotheses. It means I need to use <code>let</code> a fair amount to add instances by hand, but it seems to work okay. It's worth noting that the diagram <code>Field =&gt; FieldStructure =&gt; Field</code> won't ever commute by definition unless things like <code>nsmul</code> are added to the language of fields, which would be a controversial addition, and would mean that the theory of fields would require infinitely many axioms, which is a mathematically significant change.</p>",
        "id": 384134028,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1691806046
    },
    {
        "content": "<p>Could you make a variant of <code>FieldStructure</code> which contained the <code>nsmul</code> fields, write down the bijection between field and this modified structure, and then just write down the dodgier bijection between FieldStructure and the modified field structure separately?</p>",
        "id": 384135772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691806960
    },
    {
        "content": "<p>Yes. But I don't see why I would do that. ACtually there's no way to make <code>FieldStructure =&gt; Field =&gt; FieldStructure</code> commute ever I've just realized, because a field structure is a map <code>∀ n, FieldFunc n → (Fin n → K)</code>, where <code>FieldFunc n</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">FieldFunc</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">FieldFunc</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">FieldFunc</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">FieldFunc</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">FieldFunc</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">FieldFunc</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">FieldFunc</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>But to commute by definition would require two functions <code>∀ n, FieldFunc n → (Fin n → K)</code> to be defeq iff they are defeq on all constructors and this is not the case. So there's not much hope of trying to make these things commute.</p>",
        "id": 384137665,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1691807985
    },
    {
        "content": "<p><code>Field =&gt; FieldStructure =&gt; Field</code> could commute with a lot of effort, but I think this is more trouble than it's worth. The occasional <code>let</code> is not that bad, especially since it's not like people will be applying the model theory of fields all the time. There are maybe just a few theorems that can be proved that way and people won't be that annoyed by the <code>letI</code>.</p>",
        "id": 384138237,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1691808277
    }
]