[
    {
        "content": "<p>Do we even need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded.min\">docs#well_founded.min</a>?</p>",
        "id": 347492784,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680806077
    },
    {
        "content": "<p>Obviously, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded.has_min\">docs#well_founded.has_min</a> is super useful as a characterization of well-foundedness, I'm not doubting that.</p>",
        "id": 347492827,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680806100
    },
    {
        "content": "<p>The question is whether being able to select an arbitrary minimal element from a set through choice, instead of just using <code>obtain</code> on an existential, is ever useful.</p>",
        "id": 347492954,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680806137
    },
    {
        "content": "<p>If there is a <em>unique</em> minimal element, then it is nice being able to reference it directly. However, a (nonempty) well-founded order with unique minimal elements is in fact a well-order, and more so a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order_bot\">docs#conditionally_complete_linear_order_bot</a>, so in that case you really ought to be using <code>Inf</code> instead.</p>",
        "id": 347493287,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680806266
    },
    {
        "content": "<p>I've golfed a bunch of proofs in the past by simply replacing <code>well_founded.min</code>, <code>well_founded.min_mem</code>, and <code>well_founded.not_lt_min</code> with a single call to <code>well_founded.has_min</code>, so it really seems like the former are but an annoyance. I say we get rid of them, and if we <em>really</em> need to extract data out of this, we simply use <code>classical.some (well_founded.has_min hr s hs)</code> directly.</p>",
        "id": 347493853,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680806460
    },
    {
        "content": "<p>On this note, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded.succ\">docs#well_founded.succ</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded.sup\">docs#well_founded.sup</a> ought to go too, for the same reasons. I think they're unused, anyways.</p>",
        "id": 347495012,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680806871
    },
    {
        "content": "<p><code>well_founded.min</code> seems to go way back to 2017: <a href=\"https://github.com/leanprover-community/mathlib/commit/49a63b7464df04e216ad1ff353b306ca157119f8\">https://github.com/leanprover-community/mathlib/commit/49a63b7464df04e216ad1ff353b306ca157119f8</a> (edit: I missed that I still haven't gotten to the origin, <a href=\"https://github.com/leanprover-community/mathlib/commit/b19c222c0b267a4ecc9ae869cd072f4efecb2f96\">this might be it</a>)</p>",
        "id": 347495301,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680806963
    },
    {
        "content": "<p>These don't seem to be harmful API to me, so I'm not sure it's worth worrying too much about them. Maybe it's a bit redundant to have them, but at worst using them adds a constant factor to proof size.</p>\n<p>It's not uncommon to create wrappers around <code>classical.some</code> like this, and sometimes it's better because then you can state nicer lemmas than whatever <code>classical.some_spec</code> gives you.</p>",
        "id": 347496077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680807218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/well_founded.2Emin/near/347496077\">said</a>:</p>\n<blockquote>\n<p>These don't seem to be harmful API to me, so I'm not sure it's worth worrying too much about them.</p>\n</blockquote>\n<p>I wanted to add some boilerplate convenience lemmas for <code>well_founded.has_min</code>, re: <a href=\"https://github.com/leanprover-community/mathlib/pull/18751\">#18751</a>. So I need to decide whether I'll port these or not. They add quite a lot of lines to that file.</p>",
        "id": 347496625,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680807388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/well_founded.2Emin/near/347496077\">said</a>:</p>\n<blockquote>\n<p>Sometimes it's better because then you can state nicer lemmas than whatever <code>classical.some_spec</code> gives you.</p>\n</blockquote>\n<p>A generic minimal element of a set is a very broad notion. We really can't say anything about it that isn't just a restatement of the definition, except in the cases I've already brought up.</p>",
        "id": 347496831,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680807458
    },
    {
        "content": "<p>It's telling that the original use case was for ordinals. I believe I was the one who removed it from that file in favor of <code>Inf</code>.</p>",
        "id": 347497468,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680807646
    },
    {
        "content": "<p>Why are you defining <code>is_well_founded.min</code>, <code>well_founded_lt.min</code>, <code>well_founded_gt.max</code> in that PR? Are you planning on using them for something? If not, then don't define them -- if they're not convenient then maybe they're not actually convenience lemmas.</p>",
        "id": 347498892,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680808127
    },
    {
        "content": "<p>I'm defining them for symmetry with the existing API.</p>",
        "id": 347499145,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680808224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/well_founded.2Emin/near/347496831\">said</a>:</p>\n<blockquote>\n<p>A generic minimal element of a set is a very broad notion. We really can't say anything about it that isn't just a restatement of the definition, except in the cases I've already brought up.</p>\n</blockquote>\n<p>Right, I get that this is a completely arbitrary element, but <code>min_mem</code> and <code>not_lt_min</code> are epsilon nicer than what <code>classical.some_spec</code> for <code>∃ a ∈ s, ∀ x ∈ s, ¬ r x a</code> would give you, which is all I'm saying here.</p>",
        "id": 347499158,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680808229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/well_founded.2Emin/near/347499145\">said</a>:</p>\n<blockquote>\n<p>I'm defining them for symmetry with the existing API.</p>\n</blockquote>\n<p>I give you permission not to keep symmetry. It's not symmetric anyway, since the new definitions use instance arguments instead of an explicit one.</p>",
        "id": 347499312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680808301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/well_founded.2Emin/near/347499145\">said</a>:</p>\n<blockquote>\n<p>I'm defining them for symmetry with the existing API.</p>\n</blockquote>\n<p>\"Maintenance without guidance is the API's perdition\" -Someone, I guess?</p>",
        "id": 347499492,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680808359
    },
    {
        "content": "<p>I think you should stop changing API for the sake of it, and set yourself some big goals that will guide your API-writing.</p>",
        "id": 347499621,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680808408
    },
    {
        "content": "<p>This really isn't \"for the sake of it\". I've worked a bunch with well-founded relations, it's somewhat annoying to do this, and I'm making it less annoying.</p>",
        "id": 347500256,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680808600
    },
    {
        "content": "<p>What's your end goal?</p>",
        "id": 347500332,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680808638
    },
    {
        "content": "<p>This really isn't supposed to be a big project, it's just making some code nicer to work with.</p>",
        "id": 347500910,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680808839
    },
    {
        "content": "<p>Admittedly I do have other big projects to go back to, but that shouldn't invalidate this</p>",
        "id": 347500967,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680808856
    },
    {
        "content": "<p>These kinds of decisions are hard to evaluate without a clear end goal, so I would think that, yes, it does invalidate this.</p>",
        "id": 347504312,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680810014
    },
    {
        "content": "<p>Randomly adding stuff to mathlib 3 for no clear reason is a step in the wrong direction</p>",
        "id": 347553412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680833976
    },
    {
        "content": "<p>Or at least, randomly adding stuff to <em>the already-ported parts of</em> mathlib3 for no clear reason is</p>",
        "id": 347586637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680851782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span>, I would recommend for now you focus on forward-porting the files you've already changed; there were &gt;10 files out of sync with your name on last time I checked.</p>",
        "id": 347586933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680851916
    }
]