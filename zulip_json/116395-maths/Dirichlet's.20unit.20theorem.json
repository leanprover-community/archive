[
    {
        "content": "<p>I am very happy to announce that I have completed the proof of Dirichlet's unit theorem.</p>\n<p>Well, there is still a lot of work left to put things into something that can be merged into Mathlib. At the moment, the proofs are<br>\nnot optimized and there is probably some reorganizing that should be done but at least the proof is sorry-free.</p>\n<p>If you want to have a look the PR is <a href=\"https://github.com/leanprover-community/mathlib/pull/18478\">#18478</a>. It relies on a series of 8 other PRs (including <a href=\"https://github.com/leanprover-community/mathlib/pull/2819\">#2819</a> for the proofs of<br>\nBlichfeldt and Minkowski theorems) so I am not sure if it is reasonable to expect it to be<br>\nmerged into Mathlib before the transition to Lean 4.</p>",
        "id": 329369569,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1677056117
    },
    {
        "content": "<p>Congratulations, <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> !</p>",
        "id": 329369639,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1677056141
    },
    {
        "content": "<p>Now, let me say a few words about what is actually proved since I would like some feedback on the best way to state the theorem.</p>\n<p>For <code>K</code> a number field, let <code>ùì§ K := (number_field.ring_of_integers K)À£</code> denote the group of units<br>\nand define the <code>log_embedding</code> as the map</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">log_embedding</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùì§</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">number_field.infinite_place</span> <span class=\"n\">K</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">real.log</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The image of the <code>log_embedding</code> is the ‚Ñ§-submodule called <code>unit_lattice K</code>.</p>\n<p>The first result is that the kernel of this map is the subgroup of <code>roots_of_unity</code> of <code>ùì§ K</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">unit_lattice_kernel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ùì§</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">log_embedding</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">roots_of_unity</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>where <code>roots_of_unity := comm_group.torsion (ùì§ K)</code>.</p>\n<p>Then, the main part is to prove that <code>unit_lattice K</code> is a free ‚Ñ§-module of rank<br>\n<code>unit_rank K</code> with <code>unit_rank := fintype.card (infinite_place K) - 1</code>.</p>\n<p>The result is stated by first constructing the basis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">unit_lattice.basis</span> <span class=\"o\">:</span> <span class=\"bp\">Œ£</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"n\">unit_lattice</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then proving it has the right cardinality</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">unit_lattice.dim</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">unit_lattice.basis</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">unit_rank</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>This is probably not the most elegant way to state the result so I am open to suggestion for a better way to express that.</p>\n<p>Also, I am not sure on how to state the result for the group of units <code>ùì§ K</code>. There is first the problem<br>\nthat <code>log_embedding</code> is not a <code>monoid_hom</code> since it goes from a multiplicative<br>\ngroup to an additive group. I am aware that there are ways to deal with this situation using the tools<br>\ndeveloped in <code>number_theory.legendre_symbol.add_character</code> but I am not sure what is the right way to do<br>\nthat. One option would be to work with <code>multiplicative (number_field.infinite_place K ‚Üí ‚Ñù)</code> or something like that.</p>\n<p>In any case, I'd like to get some feedbacks on what would be the best way to state the result for <code>ùì§ K</code>.</p>",
        "id": 329369721,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1677056163
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 329370799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677056498
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/pull/2819\">#2819</a> is very very close to being mergeable</p>",
        "id": 329370929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677056524
    },
    {
        "content": "<p>But it depends on a PR that is currently somewhat in limbo.</p>",
        "id": 329370991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677056550
    },
    {
        "content": "<p>Yeah sorry about that! I'm trying to find time for it but it's hard during term-time.</p>",
        "id": 329371994,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1677056892
    },
    {
        "content": "<p>If we get this whole stack merged, we can tick off two more items on <code>100.yaml</code> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 329373273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677057309
    },
    {
        "content": "<p>This is great! This was the only ingredient that David Ang was missing for his proof of weak Mordell-Weil (E{K)/n is finite if K is a number field)</p>",
        "id": 329373698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677057443
    },
    {
        "content": "<p>Congratulations, this is really great!! As a trivial remark, can you replace <code>number_field.ring_of_integers</code> by anything such that <code>is_integral_closure...</code>? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 329413810,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1677068768
    },
    {
        "content": "<p>There are certainly results that should be stated in terms of <code>is_integral_closure</code> like for example the ones about integral basis. But I have the feeling what you want is a bit more general. In any case, I would think that most (and maybe even all) of  the results of this proof  are also true for anything that satisfy <code>is_integral_closure</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_integral_closure.equiv\">docs#is_integral_closure.equiv</a>? Am I missing something?</p>",
        "id": 329423332,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1677071371
    },
    {
        "content": "<p>My remark is mathematically totally irrelevant and as you say the two are trivially equivalent. The advantage of <code>is_integral_closure</code> is that if someone ends up somehow with <code>R</code> that morally is <code>ùìû K</code>, but not literally they can use your results.</p>",
        "id": 329442040,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1677076257
    },
    {
        "content": "<p>I see your point. I‚Äôll see what can be done but I think it shouldn‚Äôt be too much of a problem. It depends also on what would be the optimal statement for the final result.</p>",
        "id": 329450466,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1677078216
    },
    {
        "content": "<p>Another comment/question: mathlib already has a notion of <code>roots_of_unity</code>. Do I understand correctly that you are not using that version?</p>",
        "id": 329498177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677089803
    },
    {
        "content": "<p>Yes, I am using a different definition for <code>roots_of_unity</code> for the moment, but that is typically the kind of things that could be changed. I just used what was more practical at the time.</p>",
        "id": 329582026,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1677098428
    },
    {
        "content": "<p>Two PRs for this project <a href=\"https://github.com/leanprover-community/mathlib/pull/18266\">#18266</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/18473\">#18473</a> are ready for review. (Eric left some reviews already on <a href=\"https://github.com/leanprover-community/mathlib/pull/18266\">#18266</a>). <a href=\"https://github.com/leanprover-community/mathlib/pull/17783\">#17783</a> is also ready for review but it depends on <a href=\"https://github.com/leanprover-community/mathlib/pull/18473\">#18473</a>. </p>\n<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  I changed <a href=\"https://github.com/leanprover-community/mathlib/pull/17783\">#17783</a> so that it uses <code>is_integral_closure</code> instead of <code>ùìû K</code>. Can you check that it is indeed what you had in mind?</p>",
        "id": 336480166,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1677244875
    },
    {
        "content": "<p>Hmm, I meant to use it for results about the ring of integers (for example we should know the rank of any <code>R</code> such that <code>is_integral_closure</code> rather than just the norm of <code>ùìû K</code>). Using <code>R</code> to define <code>integer_lattice</code> seems a little strange, since I would say it is something only depends on <code>K</code>.</p>",
        "id": 336496879,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1677248939
    },
    {
        "content": "<p>I see. I guess I got a little bit too enthusiastic <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 336497510,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1677249084
    }
]