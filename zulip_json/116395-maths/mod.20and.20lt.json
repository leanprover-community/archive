[
    {
        "content": "<p>I'm getting a bit muddled trying to reason about lt inequalities.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t2</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">m2</span>\n    <span class=\"k\">have</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- n % 2 = 0 -&gt; n = 2*a</span>\n        <span class=\"gr\">admit</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a2</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>\n<p>It all works out in <code>t1</code>, but in <code>t2</code> it can't see through the division by 2. Multiplying through by 2 lets it simplify again. I was going to make use of the knowledge that n is even to rewrite it into a form with the factor of 2 in it, but when I try this, I keep introducing a new top-level variable to the theorem. I really just want a temporary or private variable. And I can't seem to find a rule involving mod that lets me do the rewrite anyway.</p>\n<p>I wasn't sure if this was a maths question or a general one.</p>",
        "id": 389307904,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693960370
    },
    {
        "content": "<p>Does <code>have a2 : ∃ a, n = 2 * a := by exact?</code> yield anything useful?</p>",
        "id": 389348079,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693982373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/mod.20and.20lt/near/389348079\">said</a>:</p>\n<blockquote>\n<p>Does <code>have a2 : ∃ a, n = 2 * a := by exact?</code> yield anything useful?</p>\n</blockquote>\n<p>The <code>exact?</code> tactic isn't closing that <code>have</code>, and the resulting <code>a2</code> with the existential doesn't seem to let me make any progress</p>",
        "id": 389349981,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693983367
    },
    {
        "content": "<p>Assuming the ∃, you can do <code>cases a2</code> to \"open up the existential\".</p>",
        "id": 389350346,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693983567
    },
    {
        "content": "<p>To prove the existential, you may have to convert the <code>%</code> into a divisibility statement, something like <code>mod_eq_zero_iff_dvd</code> (guessing here...).</p>",
        "id": 389350607,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693983674
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">modlt1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">m2</span>\n    <span class=\"k\">have</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a2</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>The universal allows it to work where the existential doesn't. If I replace everything after <code>:=</code> with <code>sorry</code>, it accepts the proof. However, it won't let me build <code>a2</code> from that lambda.</p>",
        "id": 389352193,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693984213
    },
    {
        "content": "<p>That universal makes no mathematical sense: n can't be equal to 2a for all a</p>",
        "id": 389356728,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693985758
    },
    {
        "content": "<p>Changing to a divisibility statement does indeed help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">modlt1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m2</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_of_mod_eq_zero</span> <span class=\"n\">m2</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 389356823,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693985780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/116395-maths/topic/mod.20and.20lt/near/389356823\">said</a>:</p>\n<blockquote>\n<p>Changing to a divisibility statement does indeed help:</p>\n</blockquote>\n<p>Thanks. <code>dvd_of_mod_eq_zero</code> was exactly what I needed. Is there a way to search for all theorems that can act on some hypothesis? Or do I just need to memorise more of the library?</p>",
        "id": 389364685,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693988723
    },
    {
        "content": "<p>In this case, <code>rw? at m2</code> finds the iff version for me</p>",
        "id": 389365599,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693989079
    },
    {
        "content": "<p>However, I found it by guessing there would be a relevant theorem with <code>mod_eq_zero</code> in the name - because that's how things are named in mathlib. So I started typing that and used ctrl+space in vscode to bring up autocompletion suggestions, and I found it there</p>",
        "id": 389365978,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693989218
    }
]