[
    {
        "content": "<p>What's the least painful way of filling in the following <code>sorry</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.bounded_linear_maps</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_to_bilinear_map</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">W</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I can bash out a proof by hand by choosing explicit epsilons and deltas etc, but it's disgusting. I found some general results about \"currying\" and \"uncurrying\" of continuous multilinear maps but I can't see how to use these here. I'd be grateful for any suggestions.</p>",
        "id": 346004654,
        "sender_full_name": "David Loeffler",
        "timestamp": 1680280516
    },
    {
        "content": "<p>(Context: in the library, continuous bilinear maps seem to be usually written in \"curried\" form; so continuous maps <code>V × W → ℝ</code> get written as <code>V →L[ℝ] W →L[ℝ] ℝ</code>, i.e. continuous maps from V to the space of continuous maps <code>W → ℝ</code>. However, I'm struggling to extract the continuity condition for the uncurried map from the curried one.)</p>",
        "id": 346004968,
        "sender_full_name": "David Loeffler",
        "timestamp": 1680280593
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.continuous₂\"><code>continuous_linear_map.continuous₂</code></a>? (edit: docs# doesn't work with the ₂)</p>",
        "id": 346005395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680280688
    },
    {
        "content": "<p>Ok, that seems to work! I was looking for things with <code>uncurry</code> in the name. Thanks!</p>",
        "id": 346006032,
        "sender_full_name": "David Loeffler",
        "timestamp": 1680280842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span>, here's a good meta-answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.bounded_linear_maps</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_to_bilinear_map</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">W</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 346121915,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680334007
    },
    {
        "content": "<p>(Sadly <code>library_search</code> is slow when you have lots of imports. Happily it is somewhat faster in Lean 4.)</p>",
        "id": 346121952,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680334029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Continuity.20of.20bilinear.20maps/near/346121915\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"bp\">!</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I had tried <code>library_search</code> of course, but I didn't know <code>library_search</code> worked better if you shouted at it :-) I'll have to remember that in future. </p>\n<p>(I think <code>library_search</code> actually timed out, rather than returning a failure message, in the original context where I had many more imports open. So another takeaway here is to make a MWE and _then_ try <code>library_search!</code> on it.)</p>",
        "id": 346124622,
        "sender_full_name": "David Loeffler",
        "timestamp": 1680335262
    },
    {
        "content": "<p>For best results, make sure you only import the file containing the definition you're looking for.</p>",
        "id": 346125110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680335454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Continuity.20of.20bilinear.20maps/near/346125110\">said</a>:</p>\n<blockquote>\n<p>For best results, make sure you only import the file containing the definition you're looking for.</p>\n</blockquote>\n<p>Doesn't that actually guarantee the <em>worst</em> results, since it ensures that lemmas which aren't in the same file as the definition won't get found? If your only metric for a search algorithm is how fast it runs then clearly the optimal answer is to return <code>fail</code> in all cases :-)</p>",
        "id": 346127355,
        "sender_full_name": "David Loeffler",
        "timestamp": 1680336223
    },
    {
        "content": "<p>If library search is timing out and you are willing to wait for it ( <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span>) you can always locally set the timeouts / memory limits to be longer using <a href=\"https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout\">https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout</a> (I believe you should increase both values mentioned there)</p>",
        "id": 346221632,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680365797
    },
    {
        "content": "<p>Also, <code>library_search</code> in mathlib4 will soon automatically stop work before timing out, reporting what it has found so far and warning that you might need to run with a longer maxHeartbeats.</p>",
        "id": 346685919,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680558981
    }
]