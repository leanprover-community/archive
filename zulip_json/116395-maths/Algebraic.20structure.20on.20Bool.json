[
    {
        "content": "<p>I feel like I'm missing something obvious, but do we have + and * and the corresponding algebraic structures defined on Bool?</p>",
        "id": 376075270,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689608654
    },
    {
        "content": "<p>I've just encountered this in the context of finding that <code>Fin n -&gt; Bool</code> doesn't seem to have a 0.</p>",
        "id": 376075528,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689608684
    },
    {
        "content": "<p><code>Bool</code> <a href=\"http://Bool.completeBooleanAlgebra\">is a boolean algebra</a> and uses <code>⊥/⊔/⊓/⊤</code> rather than <code>0/+/*/1</code>. I'm not sure if there's a <code>Bool</code>-like that uses algebraic notation.</p>",
        "id": 376077145,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689608869
    },
    {
        "content": "<p>Well, that's not the end of the world, I can use that notation instead as the Pi type inherits it. Though it feels to me like the kind of thing where having both might be desirable - I don't know if it creates too many issues, mind.</p>",
        "id": 376078063,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689608967
    },
    {
        "content": "<p>In particular, I would use + to mean xor, <em>not</em> or.</p>",
        "id": 376078291,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689608991
    },
    {
        "content": "<p>Oh, if you want <code>+</code> to mean <code>xor</code>, then you can use <code>Fin 2</code></p>",
        "id": 376078926,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689609058
    },
    {
        "content": "<p>Right.</p>",
        "id": 376080067,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689609186
    },
    {
        "content": "<p>It's just that (in another thread, not sure how to link) people were talking about defining bitvectors as Fin n -&gt; Bool.</p>",
        "id": 376080298,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689609219
    },
    {
        "content": "<p>I think that in any scenario where you care about bitvectors, you probably want + to mean xor. But you <em>also</em> probably want \"or\" and \"and\" as operations.</p>",
        "id": 376080597,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689609250
    },
    {
        "content": "<p>Whether you pick <code>X = Bool</code> or <code>X = Fin 2</code>, note that using <code>Fin n -&gt; X</code> for bit vectors means you get and (<code>⊓</code>) and or (<code>⊔</code>) for free.</p>",
        "id": 376081497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689609361
    },
    {
        "content": "<p>Mathlib has <code>a ∆ b</code> notation for symmetric differences at least (which is xor for bool)</p>",
        "id": 376081631,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689609371
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/SymmDiff.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/SymmDiff.html</a></p>",
        "id": 376081821,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689609396
    },
    {
        "content": "<p>Presumably it works just fine for  <code>Fin n -&gt; X</code> too</p>",
        "id": 376081929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689609407
    },
    {
        "content": "<p>Yeah: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.symmDiff_def#doc\">docs#Pi.symmDiff_def</a></p>",
        "id": 376082161,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689609436
    },
    {
        "content": "<p>In SMT-LIB \"addition of bitvectors\" means addition modulo 2^n.<br>\nI will grant that \"bitvector\" seems like an inappropriate word choice, but it's what they use.</p>",
        "id": 376084803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1689609724
    },
    {
        "content": "<p>This certainly doesn't affect <code>Bool</code> itself and probably also not <code>Fin n -&gt; Bool</code>, but it is a counterexample in practice to</p>\n<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebraic.20structure.20on.20Bool/near/376080597\">said</a>:</p>\n<blockquote>\n<p>I think that in any scenario where you care about bitvectors, you probably want + to mean xor. </p>\n</blockquote>",
        "id": 376085255,
        "sender_full_name": "Reid Barton",
        "timestamp": 1689609776
    },
    {
        "content": "<p>I think there's tension here between the <code>Fin (2^n)</code> representation (where <code>+</code> is obviously addition) and the <code>Fin n  -&gt; Fin 2</code> representation (where <code>+</code> is xor)</p>",
        "id": 376085821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689609836
    },
    {
        "content": "<p>Maybe trying to create a <code>BitVector</code> that claims to be both of these and muddies the water about what the operations mean is a mistake</p>",
        "id": 376086163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689609868
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Algebraic.20structure.20on.20Bool\">#mathlib4 &gt; Algebraic structure on Bool</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 376104496,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689612946
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/bool.boolean_ring\">docs3#bool.boolean_ring</a></p>",
        "id": 376126447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689618212
    }
]