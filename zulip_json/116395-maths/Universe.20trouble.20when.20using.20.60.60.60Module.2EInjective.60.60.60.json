[
    {
        "content": "<p>I've succesfully using projective modules before, but today was my first time tying to use injective modules in Lean4, and I immediately run into trouble with universes. Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Injective</span>\n\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Module.Injective</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The error message (on the last line) says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.2942</span> <span class=\"bp\">=?=</span> <span class=\"n\">v</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">TypeMax.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.2942</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.2942</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I've trying <code>ULift</code>ing various objects but without success so far, and I'm also worried that this would cause trouble later.</p>",
        "id": 403006687,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1700397364
    },
    {
        "content": "<p>For some reason, <code>Module.Injective R M</code> requires <code>M</code> to be <code>TypeMax u v</code> (<code>R</code> is type u, v is just other universe floating around). I'm sure there's very good reasons behind that decision even though I don't know what they were. I'm just not sure how to use the <code>Module.Injective</code> structure now. Is the only solution to re-introduce a new module that is explicitely <code>TypeMax</code> ? But then what will happen when I try to apply my new lemmas to an already existing module ?</p>",
        "id": 403006998,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1700397604
    },
    {
        "content": "<p>Ah well, I wouldn't be able to use the new lemmas anyway because there does not seem to be <code>Module.Injective</code> instance on vector spaces, which is what I was hoping to use. So I'll do things another way. But if somebody know how to use <code>Module.Injective</code>, I would still be interested.</p>",
        "id": 403007444,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1700398069
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Injective</span>\n\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TypeMax.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Module.Injective</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403009378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700399793
    },
    {
        "content": "<p>My instinct when universes start causing problems is to start assuming that some of them are equal. Lean has universes so whenever possible one should be as universe polymorphic as possible, but the moment mathematical issues start appearing there will be no mathematical harm in toning them down. Here the mathematical issue is that if the ring is in a bigger universe than the module then nonzero free modules for the ring don't live in the same universe as the module so a bunch of homological algebra gets messed up. In practice mathematicians don't see this phenomenon because of course the module is in the same universe as the ring in all cases in practice</p>",
        "id": 403011766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700401701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Universe.20trouble.20when.20using.20.60.60.60Module.2EInjective.60.60.60/near/403009378\">said</a>:</p>\n<blockquote>\n<p>This works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Injective</span>\n\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TypeMax.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Module.Injective</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks ! <br>\nSuppose that I sometimes want <code>M</code> to be injective and sometimes <code>N</code>, then I have to make sure that both of them are <code>TypeMax.{v,u}</code>. But if this shows up in the middle of a big complicated file (which is not theoretical but exactly what happened to me), then I need to go back to the start and change all my universe declarations. I'm a bit uncomfortable with that because who knows whether it will mess up something else.</p>\n<p>I solved the problem by going back to basics: I wanted the modules to be injective/projective so some linear maps would have sections or retractions. So I just used the existence of the sections or retractions as hypotheses.</p>",
        "id": 403028868,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1700411688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Universe.20trouble.20when.20using.20.60.60.60Module.2EInjective.60.60.60/near/403011766\">said</a>:</p>\n<blockquote>\n<p>My instinct when universes start causing problems is to start assuming that some of them are equal. Lean has universes so whenever possible one should be as universe polymorphic as possible, but the moment mathematical issues start appearing there will be no mathematical harm in toning them down. Here the mathematical issue is that if the ring is in a bigger universe than the module then nonzero free modules for the ring don't live in the same universe as the module so a bunch of homological algebra gets messed up. In practice mathematicians don't see this phenomenon because of course the module is in the same universe as the ring in all cases in practice</p>\n</blockquote>\n<p>Aha, thanks for explaining the universe convention in the definition. So there was a real mathematical problem !</p>\n<p>I tend to tell Lean that everything is <code>Type*</code> (which as far as I understand creates as many different universes as there are declared objects), but here we see how that doesn't always work.</p>",
        "id": 403028997,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1700411768
    },
    {
        "content": "<p>yeah, and when it doesn't work I just make an explicit universe u and start letting different things be in the same universe (because fighting with universes doesn't really appeal to me). The one drawback I've seen from my approach is that if you put all your rings and modules into <code>Type u</code> then when you want to use the reals or integers, either all the modules have to be in <code>Type</code>, or we persuade someone to make copies of the reals and the integers which live in <code>Type u</code> and still have all the usual bells and whistles which people expect from these types (e.g. that a whole bunch of tactics still work on them).</p>",
        "id": 403032338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700413836
    },
    {
        "content": "<p>(we have those copies, they're <code>ULift ℕ</code> etc; but indeed various whistles are missing)</p>",
        "id": 403035730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700415941
    },
    {
        "content": "<p>Does anyone understand why <code>TypeMax</code> is actually needed for this definition? Ping <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> who ported the file and <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> who wrote it originally.</p>",
        "id": 403046339,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700422485
    },
    {
        "content": "<p>Can't we just dualize the definition of projective modules replacing free modules with \"cofree\" modules?</p>",
        "id": 403046692,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700422731
    },
    {
        "content": "<p>Isn't the issue that if the universe of the module is smaller than the universe of the ring then there may well be no free modules at all other than the zero module (because the ring itself is too big for the module's universe). So the entire theory is basically totally messed up without this assumption.</p>",
        "id": 403046785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700422813
    },
    {
        "content": "<p>But that doesn’t matter… if you can’t prove some module is injective then you can’t use the fact that it’s injective…</p>",
        "id": 403046856,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700422921
    },
    {
        "content": "<p>Take a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Projective#doc\">docs#Module.Projective</a> I’m just suggestion that we dualize that.</p>",
        "id": 403046915,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700422964
    },
    {
        "content": "<p>I.e define injectivity as “a direct summand of the cofree module generated by the underlying set of the module” or something like that</p>",
        "id": 403047030,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700423083
    },
    {
        "content": "<p>Does anyone know where we have the fact that a divisible abelian group is injective?</p>",
        "id": 403050305,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700425975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> you know your way around this part of the library very well :-)</p>",
        "id": 403050325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700426003
    },
    {
        "content": "<p>There are various candidates for a predicate <code>Module.Injective</code> with general universe parameters (e.g. the module become injective in the category <code>ModuleCat.{max u v}</code>), but in order to get all the equivalences and practical lemmas we want, we may need more general API developments about injective objects (in particular, a module is injective iff it satisfies a lifting property with respect to inclusions of ideals). Anyway, at least, mathlib shall soon know that <code>ModuleCat</code> has enough injectives <a href=\"https://github.com/leanprover-community/mathlib4/pull/7392\">#7392</a></p>",
        "id": 403050740,
        "sender_full_name": "Joël Riou",
        "timestamp": 1700426398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Universe.20trouble.20when.20using.20.60.60.60Module.2EInjective.60.60.60/near/403050305\">said</a>:</p>\n<blockquote>\n<p>Does anyone know where we have the fact that a divisible abelian group is injective?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroupCat.injective_of_divisible#doc\">docs#AddCommGroupCat.injective_of_divisible</a></p>",
        "id": 403088903,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700453275
    },
    {
        "content": "<p>I guess one option is to promote <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Baer#doc\">docs#Module.Baer</a> to the official definition, as it quantifies ideals of the ring rather than all modules in a universe.</p>",
        "id": 403701660,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700710129
    }
]