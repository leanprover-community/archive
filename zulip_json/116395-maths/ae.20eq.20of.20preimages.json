[
    {
        "content": "<p>I have the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Filter.EventuallyEq.of_forall_open_preimage</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">T0Space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">CountableInterFilter</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>with the main application in mind is <code>l = μ.ae</code>, so two functions are a.e. equal if for any open set, the preimages of this open set are a.e. equal.</p>",
        "id": 367038493,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686967053
    },
    {
        "content": "<p>My question is: do I need all the typeclass assumptions?</p>",
        "id": 367038509,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686967068
    },
    {
        "content": "<p>Clearly, I need T0 but I don't have counterexamples for countability assumptions.</p>",
        "id": 367038593,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686967098
    },
    {
        "content": "<p>BTW, do we have this lemma (e.g., for <code>Measure.ae</code> only)?</p>",
        "id": 367038618,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686967120
    },
    {
        "content": "<p>I see that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Integrable.ae_eq_of_forall_set_integral_eq#doc\">docs4#MeasureTheory.Integrable.ae_eq_of_forall_set_integral_eq</a> but that's a different story.</p>",
        "id": 367038715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686967186
    },
    {
        "content": "<p>With <code>l</code> not countably complete: take X = alpha = N, <code>l</code> and the topology both the collection of co-finite sets, and <code>f</code> and <code>g</code> any two bijections from N to itself. Then for any open (co-finite) <code>U</code>, the preimages of <code>U</code> are in <code>l</code>, so the condition holds. But <code>f</code> and <code>g</code> need not be a.e. equal.</p>\n<p>With <code>X</code> not second countable: Same idea, but with an uncountable set in place of N, and the filter/topology of co-countable sets.</p>",
        "id": 367274693,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1687050478
    },
    {
        "content": "<p>Thank you! I'll add these to the docstring.</p>",
        "id": 367275383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687050760
    },
    {
        "content": "<p>BTW this doesn't really seem like statement about topological spaces, although I can see how that's a case of interest. Do you include a more general statement where <code>X</code> just has a countable collection of sets separating points (taking the place of the opens in the hypothesis <code>a</code>) ?</p>",
        "id": 367275513,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1687050841
    },
    {
        "content": "<p>Probably, I should.</p>",
        "id": 367277051,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687051645
    },
    {
        "content": "<p>Or just write a <code>TODO</code> section in the module docstring and wait till someone needs it.</p>",
        "id": 367277178,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687051712
    },
    {
        "content": "<p>BTW, is there a name for a σ-algebra with this property (there exists a countable set of mesaurable sets that separates points)?</p>",
        "id": 367277265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687051767
    },
    {
        "content": "<p>Because asking for <code>[TopologicalSpace X] [SecondCountableTopology X] [OpensMeasurableSpace X]</code> is possible but looks a bit strange.</p>",
        "id": 367277401,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687051837
    },
    {
        "content": "<p>I'm not sure about a name. For sigma-algebras, i guess one could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_singleton_class\">docs#measurable_singleton_class</a> plus <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_space.countably_generated\">docs#measurable_space.countably_generated</a>, but even a sigma-algebra is more structure than this statement needs.</p>",
        "id": 367283030,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1687055345
    },
    {
        "content": "<p>I'm going to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasCountableSeparatingOn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">S.Countable</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">t.Pairwise</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Xor'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with instances for <code>IsOpen</code>, <code>IsClosed</code>, and <code>MeasurableSet</code>.</p>",
        "id": 367283880,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687055880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/ae.20eq.20of.20preimages/near/367277265\">said</a>:</p>\n<blockquote>\n<p>BTW, is there a name for a σ-algebra with this property (there exists a countable set of mesaurable sets that separates points)?</p>\n</blockquote>\n<p>I believe that “countably separated” is an appropriate term, cf. <a href=\"https://www.ams.org/journals/tran/1961-101-01/S0002-9947-1961-0136681-X/S0002-9947-1961-0136681-X.pdf\">this Transactions paper</a> ( p. 126) by Glimm.</p>",
        "id": 367369834,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1687090755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/ae.20eq.20of.20preimages/near/367283880\">said</a>:</p>\n<blockquote>\n<p>I'm going to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasCountableSeparatingOn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">S.Countable</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">t.Pairwise</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Xor'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with instances for <code>IsOpen</code>, <code>IsClosed</code>, and <code>MeasurableSet</code>.</p>\n</blockquote>\n<p>Awesome, thanks!</p>",
        "id": 367403026,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1687100312
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5218\">!4#5218</a></p>",
        "id": 367465222,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687125903
    },
    {
        "content": "<p>Should <code>Topology.CountableSeparatingOn</code> be moved into perhaps <code>MeasureTheory.Constructions.BorelSpace.Basic</code>? I assume the former file is a thing only because of the port?</p>",
        "id": 394731705,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1696379992
    },
    {
        "content": "<p>But it doesn't need measure theory.</p>",
        "id": 395336556,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1696631291
    },
    {
        "content": "<p>IMHO, it doesn't hurt to have an extra file.</p>",
        "id": 395336600,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1696631333
    }
]