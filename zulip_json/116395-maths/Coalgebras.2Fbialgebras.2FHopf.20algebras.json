[
    {
        "content": "<p>Does anyone have any thoughts on how these objects should be set up? I've tried several configurations for coalgebras and bialgebras and there's always something a little ugly. I've settled on making them classes and I'm keen to get bialgebra to extend coalgebra, for no reason other than personal taste. I'm just messing around with this stuff; I want to mention them in a talk on Thursday.</p>",
        "id": 338622223,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1677599362
    },
    {
        "content": "<p>I can imagine it quickly gets ugly. On paper we very quickly suggest to a very suggestive notation.</p>",
        "id": 338622505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677599431
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Coalgebra#Sweedler_notation\">https://en.wikipedia.org/wiki/Coalgebra#Sweedler_notation</a></p>",
        "id": 338623274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677599624
    },
    {
        "content": "<p>But this seems very hard to mimic in Lean.</p>",
        "id": 338623334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677599639
    },
    {
        "content": "<p>Sweedler's notation is indeed very useful, and looks scary for formalization.</p>\n<p>But is that absolutely horrible to mimick in Lean? Sweedler's notation of course amounts to choosing non-canonical expressions for the coproducts of all elements (indexed collections of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{(1)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7858em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span></span></span></span>'s and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{(2)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7858em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span></span></span></span>'s for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>), but maybe even <code>choice</code> can do that. Lemmas are true for the appropriate <em>sums</em> of such non-canonical choices, so that doesn't look too bad as such. And one certainly wants separate non-canonical representations for iterated coproducts, but still one can set up lemmas to translate between these. (In the worst case one will then have to juggle such coassociativity lemmas just like one would do with associativity lemmas without <code>ring</code>, which would indeed be bad. Do we need a <code>coring</code> tactic?)</p>\n<p>I of course haven't tried, but I'm optimistically hoping that it looks even scarier than it ends up being. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 338627179,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1677600542
    },
    {
        "content": "<p>Maybe you can get quite far with appropriate induction lemmas? But it would need some engineering to get a usable system, I guess.</p>",
        "id": 338631086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677601454
    },
    {
        "content": "<p>I also expect that a lot of engineering would be needed.</p>\n<p>Probably one anyway wants to avoid working with elements as much as possible (and therefore avoid Sweedler notation as much as possible). (Sure, at times Sweedler's notation might really be the easiest way, but other times it is just used out of habit.) So in parallel to engineering Sweedler's notation, maybe this area would also benefit from engineering for good ways to compose multilinear maps in flexibly specified (diagrammatic?) ways?</p>",
        "id": 338637107,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1677602815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> tried to construct the Hopf algebra structure on K[X] last April-May, <del>but seemed to give up (due to timeouts/slowness?)</del> and apparently then switched to defining affine group schemes using representable functors. Not sure what lessons came out of it ... here are some relevant threads:</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20structure.20vs.20class/near/282163086\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20structure.20vs.20class/near/282163086</a><br>\n<a href=\"#narrow/stream/113489-new-members/topic/refactoring.20proofs\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/refactoring.20proofs</a><br>\n<a href=\"#narrow/stream/113489-new-members/topic/get.20the.20two.20maps.20from.20an.20isomorphism\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/get.20the.20two.20maps.20from.20an.20isomorphism</a></p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20algebra.20maps.20takes.201.20to.201\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20algebra.20maps.20takes.201.20to.201</a><br>\n<a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20.60calc.60.20block\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20.60calc.60.20block</a><br>\n<a href=\"#narrow/stream/113489-new-members/topic/deterministic.20timeout.20on.20definition.20of.20structure\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/deterministic.20timeout.20on.20definition.20of.20structure</a></p>",
        "id": 338740279,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677644867
    },
    {
        "content": "<p><a href=\"https://github.com/leomayer1/Hopf/tree/master/src\">https://github.com/leomayer1/Hopf/tree/master/src</a><br>\nHere is the repo with our attempt!</p>",
        "id": 338740756,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1677645325
    },
    {
        "content": "<p>Oh nice! You did finish checking K[X]'s Hopf algebra structure without sorries.</p>",
        "id": 338741214,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677645720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> what did you not like about that approach? Like sheaves of modules I can quite believe that each approach has advantages and disadvantages.</p>",
        "id": 338772695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677660413
    },
    {
        "content": "<p>I had just seen Scott Morrison's comment that coalgebras and bialgebras should be defined first so was having a go at that. But I hadn't read all of these threads so thank you! And I've been using the functor definition too - wanted to compare them and show they're equivalent</p>\n<p>I've had a little go at using Sweedler notation because I think it might improve organisation in my coalgebra/bialgebra stuff, but I haven't finished setting it up.</p>",
        "id": 338774512,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1677660997
    },
    {
        "content": "<p>FWIW Vasily if you do want to PR your work, I'm not looking to PR mine  - just wanted to roll my own (for a talk I'm now too ill to give) and so I know what's going on, and then use it for more specific things, which I maybe would PR.</p>",
        "id": 338776078,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1677661373
    },
    {
        "content": "<p>I would like to see group schemes in mathlib because they're a huge source of very nice results and you don't need any of the theory of varieties to set them up</p>",
        "id": 338777892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677661891
    },
    {
        "content": "<p>I think Joël Riou has some cool work on internal objects in categories <a href=\"https://github.com/leanprover-community/mathlib/compare/master...group-object\">here</a> I was hoping might get PR'ed someday, as explained <a href=\"#narrow/stream/116395-maths/topic/Algebraic.20geometry.20development/near/306654505\">here</a></p>",
        "id": 338779104,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1677662235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118107\">Amelia Livingston</span> <a href=\"#narrow/stream/116395-maths/topic/Coalgebras.2Fbialgebras.2FHopf.20algebras/near/338774512\">said</a>:</p>\n<blockquote>\n<p>I had just seen Scott Morrison's comment that coalgebras and bialgebras should be defined first so was having a go at that.</p>\n</blockquote>\n<p>One (most probably superfluous) remark: There's a bunch of \"general coalgebra\" stuff (as in \"general/universal algebra\") in CS, so I understand the classical coalgebra will be under some appropriate namespace.</p>",
        "id": 338808225,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1677669841
    },
    {
        "content": "<p>I doubt that will be the case; <code>coalgebra</code> would probably end up in the root namespace like <code>algebra</code> is.</p>",
        "id": 338809899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677670233
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"462808\">@Ali Ramsey</span>, we now have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Coalgebra#doc\">docs#Coalgebra</a> !</p>",
        "id": 406545087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701956744
    },
    {
        "content": "<p>So bialgebras next and then Hopf algebras?</p>",
        "id": 406553594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701959193
    },
    {
        "content": "<p>Is it really called \"conunitality\" in the literature?</p>",
        "id": 406553715,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701959227
    },
    {
        "content": "<p>That must be a typo</p>",
        "id": 406555921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701959865
    },
    {
        "content": "<p>fixed the typo: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8874\">#8874</a></p>",
        "id": 406572134,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701964546
    },
    {
        "content": "<p>It looks like you based it on the version that the docs were built from and not master, and picked up a merge conflict as a result.</p>",
        "id": 406576112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701965562
    },
    {
        "content": "<p>Oops. I tried doing this quickly by using the github interface rather than pulling mathlib locally...</p>",
        "id": 406576434,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701965669
    }
]