[
    {
        "content": "<p>What I need to add to make it work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.powerset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">gm</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">gm.edge_set</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">gm</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">gm.edge_finset</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 363950165,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1686046426
    },
    {
        "content": "<p>Does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">gm</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">gm.adj</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">gm.edge_finset</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 363986834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686054702
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.edge_finset\">docs#simple_graph.edge_finset</a>)</p>",
        "id": 363987010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686054734
    },
    {
        "content": "<p>There's also avoiding decidability:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"c1\">-- optional: [fintype V]</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">gm</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">nat.card</span> <span class=\"n\">gm.edge_set</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>What to choose depends on what you're trying to do with this type though.</p>",
        "id": 364009670,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686059437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/graphs.20edge_finset/near/363986834\">said</a>:</p>\n<blockquote>\n<p>Does this work?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">gm</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">gm.adj</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">gm.edge_finset</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>No ): error: \"invalid binder, atomic identifier expected\"</p>",
        "id": 364040073,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1686065654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/graphs.20edge_finset/near/364009670\">said</a>:</p>\n<blockquote>\n<p>There's also avoiding decidability:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"c1\">-- optional: [fintype V]</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">gm</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">nat.card</span> <span class=\"n\">gm.edge_set</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>What to choose depends on what you're trying to do with this type though.</p>\n</blockquote>\n<p>where nat.card is defined?</p>",
        "id": 364040783,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1686065802
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card\">docs#nat.card</a></p>",
        "id": 364049266,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686067643
    },
    {
        "content": "<p>nice, I will try to use it with hope that inifinity will not hunt me later ;)</p>",
        "id": 364081022,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1686075495
    }
]