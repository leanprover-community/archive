[
    {
        "content": "<p>The docstring says that a <code>CompleteDistribLattice</code> is a completely distributive lattice, which according to wikipedia means the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">iInf_iSup_eq</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⨆</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is that true though?  This doesn't seem to (easily) follow from the axioms, which essentially only postulate the equality above if either α or β are  finite.</p>",
        "id": 366667419,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686880933
    },
    {
        "content": "<p>Yeah I think counterexamples are given in <a href=\"https://mathoverflow.net/questions/203189/counterexample-on-completely-distributive-lattices\">this question</a>.</p>",
        "id": 366688976,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1686891700
    },
    {
        "content": "<p>This looks like it would be a great addition to <code>counterexamples</code>!</p>",
        "id": 366692698,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686893206
    },
    {
        "content": "<p>Or/and <code>Counterexamples</code>!</p>",
        "id": 366693051,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686893348
    },
    {
        "content": "<p>Isn't it said in the docstring of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_distrib_lattice\">docs#complete_distrib_lattice</a> that it's complete distributive lattice, not a completely distributive complete lattice?</p>",
        "id": 366701470,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686896367
    },
    {
        "content": "<p>Nope, the <code>ly</code> is present in the docstring.</p>",
        "id": 366701990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686896519
    },
    {
        "content": "<p>It's probably a typo.</p>",
        "id": 366702065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686896527
    },
    {
        "content": "<p>Hmm, indeed. And <a href=\"https://en.m.wikipedia.org/wiki/Distributivity_(order_theory)\">Wikipedia supports Gabriel's interpretation</a></p>",
        "id": 366702370,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686896634
    },
    {
        "content": "<p>All current instances can be strengthened to this new definition, except maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_boolean_algebra.to_complete_distrib_lattice\">docs#complete_boolean_algebra.to_complete_distrib_lattice</a> which I would have to think about. We current have surprisingly less instances than I thought (half of the instances I added very recently as well).</p>",
        "id": 366703334,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686896832
    },
    {
        "content": "<p>(Boolean algebras embody LEM and completely distributive lattices embody choice, so a priori the instance can't be strengthened, but maybe making complete the boolean algebra suddenly increases its \"axiomatic strength\"?)</p>",
        "id": 366704888,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686897171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Thanks for the counterexample!</p>",
        "id": 366905409,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686936963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> If I understand the counterexample correctly, completely Boolean algebras are a strict subset of the complete Boolean algebras.  (Because a complete Boolean algebra is completely distributive iff it is atomic.)</p>",
        "id": 366905753,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686937067
    },
    {
        "content": "<p>I don't have a strong opinion if we should strengthen the existing classes, or whether we should add new <code>CompletelyDistribLattice</code> and <code>CompletelyBooleanAlgebra</code> classes.  Strengthening only the lattice one seems like a bad idea since we loose <code>CompleteBooleanAlgebra.toCompletelyDistribLattice</code></p>",
        "id": 366906202,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686937176
    },
    {
        "content": "<p>I assume the history of <code>complete_distrib_lattice</code> is that it was defined quite early on with no application in sight? In that case I see no problem with strengthening the definition.</p>",
        "id": 366914739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686939421
    },
    {
        "content": "<p>How do you feel about strengthening <code>CompleteBooleanAlgebra</code> as well?</p>",
        "id": 366951887,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686951686
    },
    {
        "content": "<blockquote>\n<p>completely Boolean algebras are a strict subset of the complete Boolean algebras. (Because a complete Boolean algebra is completely distributive iff it is atomic.)</p>\n</blockquote>\n<p>Maybe a more appropriate name is \"completely distributive Boolean algebras\" rather than \"completely Boolean algebras\", and these are just the boring powerset / atomic algebras, and I'm not sure if it deserves a separate typeclass.</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_distrib_lattice\">docs#complete_distrib_lattice</a> doesn't seem to be a standard notion; in the MO link above it's just referred to as both a frame and a coframe. (It's tempted to call it \"biframe\" in analogy with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/biheyting_algebra\">docs#biheyting_algebra</a>, but the name is used for a different notion.) If it's not used anywhere, I agree we should redefine it to be the actual complete<strong>ly</strong> distributive lattice (or remove it until we get to develop the theory of completely distributive lattices).</li>\n<li>On the other hand, the current <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_boolean_algebra\">docs#complete_boolean_algebra</a> agrees with the standard notion of complete boolean algebras, so I don't think we need to change it. If we add the complete distributivity condition, then it becomes restricted to boring powerset/atomic algebras. However, I think the definition can be improved/streamlined, and here are my two cents (even though I'm not familiar with the order theory library to assess practicality/difficulty of my suggestions):</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/boolean_algebra\">docs#boolean_algebra</a> should extend <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heyting_algebra\">docs#heyting_algebra</a> (I think currently they already have the same data fields)</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.frame\">docs#order.frame</a> should extend <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heyting_algebra\">docs#heyting_algebra</a> so that it has the data fields <code>himp</code> and <code>compl</code>, and we get <code>le_himp_iff</code> from which <code>inf_Sup_le_supr_inf</code> <a href=\"https://math.stackexchange.com/q/4526130/12932\">follows</a>.</li>\n<li>Therefore <code>inf_Sup_le_supr_inf</code> can be removed from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.frame\">docs#order.frame</a>, <code>infi_sup_le_sup_Inf</code> from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.coframe\">docs#order.coframe</a>, and both from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_boolean_algebra\">docs#complete_boolean_algebra</a>.</li>\n</ul>",
        "id": 367017081,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1686955963
    },
    {
        "content": "<p>BTW, I was able to trace <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_distrib_lattice\">docs#complete_distrib_lattice</a> to the commit <a href=\"https://github.com/leanprover-community/mathlib/blame/440e6b3b609b444c50fc68db2752f6dd1c1ea0eb/src/order/complete_boolean_algebra.lean#L31\">refactor(*): import content from lean/library/data and library_dev</a> 6 years ago by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> but I have no idea where the content of the commit came from; I searched leanprover/lean and leanprover-community/lean but was unable to find complete_distrib_lattice.</p>",
        "id": 367017515,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1686956169
    },
    {
        "content": "<p>I agree that complete Boolean algebras are a standard notion, and there are many nonatomic examples (even on the wikipedia page more than half of the examples are nonatomic).  So we definitely shouldn't add any extra axioms to <code>CompleteBooleanAlgebra</code>.</p>",
        "id": 367023855,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686959408
    },
    {
        "content": "<ul>\n<li>I think it might be worth keeping this nonstandard notion as the common ancestor to <code>complete_boolean_algebra</code> and <code>completely_distrib_lattice</code></li>\n<li><code>boolean_algebra</code> already extends <code>biheyting_algebra</code>, which extends <code>heyting_algebra</code></li>\n<li>Agreed. I didn't do the refactor because it involved adding a nice constructor to recover the current definitions, and I might also have completely forgotten about it.</li>\n</ul>",
        "id": 367024065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686959549
    },
    {
        "content": "<blockquote>\n<p>just the boring powerset / atomic algebras, and I'm not sure if it deserves a separate typeclass.</p>\n</blockquote>\n<p>Just because they're boring doesn't mean they don't deserve a type class.  They are closed under pis, products, etc., and that type class would extend <code>CompletelyDistribLattice</code>.  If you want to write code that is generic over <code>Prop</code>/<code>Set α</code>/<code>β → Set α</code> then that type class comes in handy.</p>",
        "id": 367024324,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686959711
    },
    {
        "content": "<p>Any suggestions for the name?  <code>CompleteAtomicBooleanAlgebra</code>?</p>",
        "id": 367024457,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686959778
    },
    {
        "content": "<p>What about <code>CompletelyBooleanAlgebra</code>?</p>",
        "id": 367024773,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686959988
    },
    {
        "content": "<p>Actually, what do you think of <code>DistribCompleteLattice</code>/<code>BooleanCompleteAlgebra</code> <code>CompleteDistribLattice</code> vs <code>CompleteBooleanAlgebra</code>? Probably that's too cursed...</p>",
        "id": 367024980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686960079
    },
    {
        "content": "<p>Junyuan didn't like completely Boolean algebra.</p>",
        "id": 367025017,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686960098
    },
    {
        "content": "<p>Then maybe we don't actually need a new typeclass?</p>",
        "id": 367025136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686960141
    },
    {
        "content": "<p>We can use <code>CompleteBooleanAlgebra</code> + <code>IsAtomic</code>, right?</p>",
        "id": 367025187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686960170
    },
    {
        "content": "<blockquote>\n<p><code>BooleanCompleteAlgebra</code></p>\n</blockquote>\n<p>Complete Boolean algebras are a standard term in the literature, I don't think we should reorder the words here.</p>",
        "id": 367025212,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686960183
    },
    {
        "content": "<p>I didn't know about <code>IsAtomic</code>, we could indeed do <code>[CompleteBooleanAlgebra α] [IsAtomic α]</code>.</p>",
        "id": 367025303,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686960241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/Are.20CompleteDistribLattices.20completely.20distributive.3F/near/367017515\">said</a>:</p>\n<blockquote>\n<p>BTW, I was able to trace <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_distrib_lattice\">docs#complete_distrib_lattice</a> to the commit <a href=\"https://github.com/leanprover-community/mathlib/blame/440e6b3b609b444c50fc68db2752f6dd1c1ea0eb/src/order/complete_boolean_algebra.lean#L31\">refactor(*): import content from lean/library/data and library_dev</a> 6 years ago by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> but I have no idea where the content of the commit came from; I searched leanprover/lean and leanprover-community/lean but was unable to find complete_distrib_lattice.</p>\n</blockquote>\n<p>That is the \"initial commit\" of mathlib (not counting some earlier commits that were just setting up the project). Things at this stage were being imported from the lean 2 library, and leanprover-community/lean didn't even exist yet. If you want to keep tracing things back before that you need to go to <a href=\"https://github.com/avigad/library_dev\">https://github.com/avigad/library_dev</a></p>",
        "id": 367027934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686961556
    },
    {
        "content": "<p>the actual commit that adds it is <a href=\"https://github.com/avigad/library_dev/blob/f4a3afd4/algebra/lattice/complete_boolean_algebra.lean#L16-L18\">https://github.com/avigad/library_dev/blob/f4a3afd4/algebra/lattice/complete_boolean_algebra.lean#L16-L18</a> but it's not too informative</p>",
        "id": 367028520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686961816
    },
    {
        "content": "<blockquote>\n<p>boolean_algebra already extends biheyting_algebra, which extends heyting_algebra</p>\n</blockquote>\n<p>Really? <code>class BooleanAlgebra (α : Type u) extends DistribLattice , HasCompl , SDiff , HImp , Top , Bot</code> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BooleanAlgebra#doc\">docs4#BooleanAlgebra</a></p>",
        "id": 367057865,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1686978770
    }
]