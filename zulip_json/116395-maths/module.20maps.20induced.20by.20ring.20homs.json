[
    {
        "content": "<p>What is a good way to define a map between modules induced by ring homomorphisms? Here's an mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- instance : Module R E := Module.compHom E φ</span>\n<span class=\"k\">#check</span> <span class=\"n\">Module.compHom</span> <span class=\"n\">E</span> <span class=\"n\">φ</span> <span class=\"c1\">-- typechecks!</span>\n\n<span class=\"c1\">-- instance : Module R F := Module.compHom F φ</span>\n<span class=\"k\">#check</span> <span class=\"n\">Module.compHom</span> <span class=\"n\">F</span> <span class=\"n\">φ</span> <span class=\"c1\">-- typechecks!</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks,</p>",
        "id": 389699631,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694102777
    },
    {
        "content": "<p>The case I'm interested is when <code>φ</code> is an inclusion of subrings.</p>",
        "id": 389699789,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694102831
    },
    {
        "content": "<p>(Also, VSCode parses <code>\\phi</code> as  <code>\\varphi</code> and <code>\\varphi</code> as <code>\\phi</code> lol)</p>",
        "id": 389700016,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694102897
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.restrictScalars#doc\">docs#LinearMap.restrictScalars</a> work?</p>",
        "id": 389701638,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694103394
    },
    {
        "content": "<p>This is exactly what I want! Thanks!!</p>\n<p>I'm having issues with inducing the second module structure though. This line gives an error even though it typechecks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- instance : Module R E := Module.compHom E φ</span>\n<span class=\"k\">#check</span> <span class=\"n\">Module.compHom</span> <span class=\"n\">E</span> <span class=\"n\">φ</span> <span class=\"c1\">-- typechecks!</span>\n</code></pre></div>\n<p>The error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">instModuleToSemiringToAddCommMonoid</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n      <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n        <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">E</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">Ring</span> <span class=\"bp\">?</span><span class=\"n\">S</span>\n  <span class=\"bp\">@</span><span class=\"n\">Module</span> <span class=\"bp\">?</span><span class=\"n\">S</span> <span class=\"n\">E</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"n\">AddCommGroup.toAddCommMonoid</span>\n</code></pre></div>",
        "id": 389714889,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694106996
    },
    {
        "content": "<p>What's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for the error?</p>",
        "id": 389715587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694107232
    },
    {
        "content": "<p>The same as above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- instance : Module R E := Module.compHom E φ</span>\n<span class=\"k\">#check</span> <span class=\"n\">Module.compHom</span> <span class=\"n\">E</span> <span class=\"n\">φ</span> <span class=\"c1\">-- typechecks!</span>\n</code></pre></div>",
        "id": 389716158,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694107430
    },
    {
        "content": "<p>The instance doesn't really make sense. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> is just a variable. What if I have two ring homomorphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">R\\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>? So the system is complaining that the instance is not mathematically meaningful.</p>",
        "id": 389717891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694107970
    },
    {
        "content": "<p>Mathematically if you want to say \"there is one and only one canonical map from R to S, and I want to fix that one\" then you can use <code>[Algebra R S]</code> and then you can make E into an R-module with <code>[Module R E] [IsScalarTower R S E]</code></p>",
        "id": 389718222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694108082
    },
    {
        "content": "<p>I see, thanks! I will try this out.</p>",
        "id": 389718449,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694108163
    },
    {
        "content": "<p>I think I have a more precise explanation of the error. <code>variable (φ : R →+* S)</code> doesn't mean \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> be a ring homomorphism from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>\". It rather means \"do nothing, but if a user ever mentions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> then just put \"for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>:</mo><mi>R</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">\\phi:R\\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> in front of what they're writing\". So what <code>Module.compHom E \\phi</code> unfolds to is \"for all rings R and S, and for all S-modules E, and for all ring homs phi:R-&gt;S, here's an R-module structure on E\". Now if you make this an <em>instance</em>, then when the typeclass inference system sees <code>Module R E</code> it can figure out what to choose for R and E, but now it has no clue what to let S be, so it gives up.</p>",
        "id": 389719339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694108470
    },
    {
        "content": "<p>I see. So I need a better way to create the _specific_ ring hom I'm interested in.</p>",
        "id": 389719789,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694108606
    },
    {
        "content": "<p>If you have a specific ring hom in mind which won't change then <code>Algebra R S</code> is the way to go.</p>",
        "id": 389719953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694108644
    },
    {
        "content": "<p>Yes, it's just an inclusion of rings.</p>",
        "id": 389720044,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694108676
    },
    {
        "content": "<p>Great, I'll switch to using [Algebra R S]</p>",
        "id": 389720144,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1694108699
    }
]