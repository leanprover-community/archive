[
    {
        "content": "<p>I have this theorem in recent PR for finite fields <code>K</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cast_subgroup_of_units_card_ne_zero</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>Does anyone know if it's also true of infinite fields as well?</p>",
        "id": 384013573,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1691768369
    },
    {
        "content": "<p>Isn't the additive span of <code>G</code> also closed under multiplication?  If so, then it is a finite subfield and your previous result should apply.</p>",
        "id": 384017584,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691769066
    },
    {
        "content": "<p>This is true for infinite fields. If G is a finite subgroup of K^* and |G|=0 in K then K must have char p for some prime and G must have an element of order p, but x^p=1 implies (x-1)^p=0 and hence x=1, meaning x didn't have order p after all, contradiction.</p>",
        "id": 384020056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691769505
    },
    {
        "content": "<p>This was a good exercise.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Cycle.Type</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CharP.Algebra</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_subgroup_of_units_card_ne_zero'</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">G</span>\n  <span class=\"k\">have</span> <span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card_pos</span>\n  <span class=\"n\">intro</span> <span class=\"n\">nzero</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">char_p</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">CharP.exists</span> <span class=\"n\">F</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">CharP.cast_eq_zero_iff</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">nzero</span>\n  <span class=\"n\">cases</span> <span class=\"n\">CharP.char_is_prime_or_zero</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">pzero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ne_zero_of_lt</span> <span class=\"n\">npos</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.eq_zero_of_zero_dvd</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pzero</span> <span class=\"bp\">▸</span> <span class=\"n\">hd</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">pprime</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">fact_pprime</span> <span class=\"o\">:=</span> <span class=\"n\">Fact.mk</span> <span class=\"n\">pprime</span>\n    <span class=\"c1\">-- G has an element x of order p by Cauchy's theorem</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_prime_orderOf_dvd_card</span> <span class=\"n\">p</span> <span class=\"n\">hd</span>\n    <span class=\"c1\">-- F has an element u (= ↑↑x) of order p</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">orderOf</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">orderOf_units</span><span class=\"o\">,</span> <span class=\"n\">orderOf_subgroup</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- u ^ p = 1 implies (u - 1) ^ p = 0</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">sub_pow_char</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n      <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">one_pow</span><span class=\"o\">]</span>\n      <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">pow_orderOf_eq_one</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">sub_self</span> <span class=\"mi\">1</span>\n    <span class=\"c1\">-- ... and hence u = 1 ...</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_left_inj</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">pow_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n    <span class=\"c1\">-- ... meaning x didn't have order p after all, contradiction</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime.one_lt</span> <span class=\"n\">pprime</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">orderOf_one</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 384288897,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691852588
    },
    {
        "content": "<p>Cool! Do you mind if I add this to <a href=\"https://github.com/leanprover-community/mathlib4/pull/6500\">#6500</a> <span class=\"user-mention\" data-user-id=\"400544\">@Buster</span>? (Or you can add it yourself)</p>",
        "id": 384352902,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1691875993
    },
    {
        "content": "<p>I don't mind at all! Probably easier if you do it, if that's ok.</p>",
        "id": 384355401,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691877804
    },
    {
        "content": "<p>I assume lots of improvements to the style and substance are possible. In particular, is that finiteness assumption <code>(h : Fintype G)</code> a bit weird?</p>\n<p>(And <code>Type u</code> is a typo.)</p>",
        "id": 384355575,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691877925
    }
]