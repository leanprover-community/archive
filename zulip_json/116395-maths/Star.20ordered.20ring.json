[
    {
        "content": "<p>We currently have the typeclass <code>star_ordered_ring</code> that is meant to capture the order structure of star algebras, which generalizes the semidefinite ordering on matrices, i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>≤</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A ≤ B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>−</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">B-A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is positive semidefinite. However, as it stands, it doesn't do this: <code>[star_ordered_ring R]</code> requires <code>R</code> to be an <code>ordered_semiring</code>, which includes axioms such as <code>∀ (a b c : α), a &lt; b → 0 &lt; c → c * a &lt; c * b</code> which we definitely don't want. Also, it only requires that <code>0 ≤ star r * r</code> for every <code>r</code>, and it's not clear to me how to exclude other elements without making it an iff.</p>\n<p>My proposal would be the following: redefine <code>star_ordered_ring</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">star_ordered_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">star_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_le_add_left</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonneg_iff</span>            <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">star</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(The first two axioms are just copied from <code>ordered_cancel_add_comm_monoid</code>.) I would be interested in feedback on this before I actually do it. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  ?</p>",
        "id": 266304523,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1640737733
    },
    {
        "content": "<p>So you're saying a star ordered ring shouldn't be an ordered ring?</p>",
        "id": 266329083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640768584
    },
    {
        "content": "<p>Has <code>ordered_semiring</code> changed since <a href=\"https://github.com/leanprover-community/mathlib/pull/4685\">#4685</a>? In the original discussion of <code>star_ordered_ring</code> it looks like Scott double-checked that ℂ was a <code>star_ordered_ring</code> <a href=\"#narrow/stream/116395-maths/topic/Bell.20and.20Tsirelson.20inequalities/near/212407651\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Bell.20and.20Tsirelson.20inequalities/near/212407651</a></p>",
        "id": 266330419,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640770006
    },
    {
        "content": "<p>Some notes:</p>\n<ol>\n<li>This has the slightly unnatural but perhaps convenient side effect that certain pairs of non-selfadjoint elements are comparable so long as their difference is selfadjoint and positive.</li>\n<li>I don't see how to exclude non-positive elements without the iff in the typeclass either; however, given a ⋆-ring, couldn't we always just define this order inductively? For example, maybe something like</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.star.basic</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">star_le</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero_le_star_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">star_le</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">star_le</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">star_le</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure what the advantages / disadvantages of inductive predicates like this may be.</p>\n<ol start=\"3\">\n<li>There is another different ⋆-order (in this order, 0 is minimal) which can be placed on ⋆-rings, namely the order due to Drazin: <a href=\"https://projecteuclid.org/journals/bulletin-of-the-american-mathematical-society-new-series/volume-84/issue-1/Natural-structures-on-semigroups-with-involution/bams/1183540393.full\">https://projecteuclid.org/journals/bulletin-of-the-american-mathematical-society-new-series/volume-84/issue-1/Natural-structures-on-semigroups-with-involution/bams/1183540393.full</a></li>\n</ol>",
        "id": 266363068,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640798923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring/near/266329083\">said</a>:</p>\n<blockquote>\n<p>So you're saying a star ordered ring shouldn't be an ordered ring?</p>\n</blockquote>\n<p>Maybe not? The multiplicative property is the problem as indicated.</p>",
        "id": 266363462,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640799262
    },
    {
        "content": "<p>Maybe we should change the name...? I don't really have a better one in mind though.</p>",
        "id": 266363528,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1640799337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring/near/266330419\">said</a>:</p>\n<blockquote>\n<p>Has <code>ordered_semiring</code> changed since <a href=\"https://github.com/leanprover-community/mathlib/pull/4685\">#4685</a>? In the original discussion of <code>star_ordered_ring</code> it looks like Scott double-checked that ℂ was a <code>star_ordered_ring</code></p>\n</blockquote>\n<p>The problem wouldn't show up with ℂ because it's commutative (and maybe also because it has square roots?).</p>",
        "id": 266363629,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640799391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring/near/266330419\">said</a>:</p>\n<blockquote>\n<p>Has <code>ordered_semiring</code> changed since <a href=\"https://github.com/leanprover-community/mathlib/pull/4685\">#4685</a>? In the original discussion of <code>star_ordered_ring</code> it looks like Scott double-checked that ℂ was a <code>star_ordered_ring</code> <a href=\"#narrow/stream/116395-maths/topic/Bell.20and.20Tsirelson.20inequalities/near/212407651\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Bell.20and.20Tsirelson.20inequalities/near/212407651</a></p>\n</blockquote>\n<p>The current definition works in the commutative case, but the problem is that for, say, matrices, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> are positive semidefinite, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">AB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is not necessarily PSD.</p>",
        "id": 266363663,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1640799416
    },
    {
        "content": "<p>Exactly</p>",
        "id": 266363689,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640799439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring/near/266363068\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what the advantages / disadvantages of inductive predicates like this may be.</p>\n</blockquote>\n<p>The issue with this is that we want to allow the order to come from somewhere else -- for example, <code>ℂ</code> and <code>ℝ</code> already have an order defined on them, and we just want a typeclass that expresses the fact that the preexisting order is compatible with the star structure.</p>",
        "id": 266363844,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1640799539
    },
    {
        "content": "<p>And I think the fact that two elements are comparable if their difference is nonnegative should be fine. We've had this order on the complex numbers for a while now and it hasn't caused problems.</p>",
        "id": 266364014,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1640799673
    },
    {
        "content": "<p>Yeah, it just surprised me a bit, but it makes sense. It seems like it would actually be quite convenient from time to time.</p>",
        "id": 266364126,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640799750
    },
    {
        "content": "<p>Does the removal of <code>∀ (a b c : α), a &lt; b → 0 &lt; c → c * a &lt; c * b</code> break Scott's proof of CHSH?</p>",
        "id": 266364268,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640799859
    },
    {
        "content": "<p>Hmm, good question!</p>",
        "id": 266364359,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1640799945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring/near/266363528\">said</a>:</p>\n<blockquote>\n<p>Maybe we should change the name...? I don't really have a better one in mind though.</p>\n</blockquote>\n<p>Note: if we do keep the name, it definitely deserves a prominent (boldface?) mention in the docstring that it does <em>not</em> extend <code>ordered_semiring</code> along with an explanation for the reason why.</p>",
        "id": 266383500,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640816176
    },
    {
        "content": "<p>Also of note: for the commutative ⋆-rings, like ℝ, ℂ or α →ᵇ β (with appropriate typeclass assumptions), there will be some redundant lemmas coming from the typeclasses <code>star_ordered_ring</code> and <code>ordered_semiring</code> (namely <code>add_le_add_left</code>). I don't think this matters since it isn't data, but I thought I would mention it in case it matters to someone who knows more than me.</p>",
        "id": 266383814,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640816465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring/near/266383814\">said</a>:</p>\n<blockquote>\n<p>Also of note: for the commutative ⋆-rings, like ℝ, ℂ or α →ᵇ β (with appropriate typeclass assumptions), there will be some redundant lemmas coming from the typeclasses <code>star_ordered_ring</code> and <code>ordered_semiring</code> (namely <code>add_le_add_left</code>). I don't think this matters since it isn't data, but I thought I would mention it in case it matters to someone who knows more than me.</p>\n</blockquote>\n<p>Right, I don't think that really matters either.</p>",
        "id": 266387795,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1640820212
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11213\">#11213</a></p>",
        "id": 266735882,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1641243499
    },
    {
        "content": "<p>Revisiting this over a year later; is <code>nonneg_iff</code> really the standard axiom here? It seems to rule out <code>rat</code> being a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_ordered_ring\">docs#star_ordered_ring</a> under the trivial star operation</p>",
        "id": 350374738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681685387
    },
    {
        "content": "<p>The context for my question is <a href=\"https://github.com/leanprover-community/mathlib/pull/18818\">#18818</a>, but it can be expressed more simply as \"can we prove <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.dot_product_self_eq_zero\">docs#matrix.dot_product_self_eq_zero</a> as a special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.dot_product_star_self_eq_zero\">docs#matrix.dot_product_star_self_eq_zero</a> with <code>star x = x</code>\"?</p>",
        "id": 350376619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681686134
    },
    {
        "content": "<p>My suggestion in <a href=\"https://github.com/leanprover-community/mathlib/pull/18819\">#18819</a> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">star_ordered_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_unital_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">star_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_le_add_left</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">conjugate_nonneg</span>      <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">star</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">star_mul_self_nonneg</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">star</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which i suspect is enough to satisfy all the current uses in mathlib</p>",
        "id": 350379003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681687313
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>'s TODO comment that says</p>\n<blockquote>\n<p>In a Banach star algebra without a well-defined square root, the natural ordering is given by the<br>\npositive cone which is the closure of the sums of elements <code>star r * r</code>. A weaker version of<br>\n<code>star_ordered_ring</code> could be defined for this case. Note that the current definition has the<br>\nadvantage of not requiring a topology.</p>\n</blockquote>\n<p>is probably a better solution, but perhaps my proposal is still a better compromise than the current definition</p>",
        "id": 350379468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681687585
    },
    {
        "content": "<p>Changing it to something without an iff (at least something for which the iff isn't provable under some more hypotheses like closedness of the positive elements) will break C-star-algebra theory (in a few months).</p>\n<p>It doesn't break C-star-algebra theory yet because I haven't yet proven (in mathlib, I have it locally) that an element of a complete normed c-star ring over the complex numbers is selfadjoint with nonnegative spectrum if and only if it can be written as <code>star x * x</code> for some <code>x</code>. But once I do, it will be absolutely essential for the rest of the theory.</p>",
        "id": 350384683,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681691582
    },
    {
        "content": "<p>That certainly sounds like a more compelling argument than mine, thanks!</p>",
        "id": 350384986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681691777
    },
    {
        "content": "<p>Are you arguing against Frédéric's proposed generalization too?</p>",
        "id": 350385031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681691809
    },
    {
        "content": "<p>No, because selfadjoint elements with nonnegative spectrum are closed (in the setting mentioned above), and hence with the aforementioned lemma, so are the elements of the form <code>star x * x</code>. So the closure is just this set of elements.</p>",
        "id": 350385255,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681691948
    },
    {
        "content": "<p>So the generalization is fine.</p>",
        "id": 350385277,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681691964
    },
    {
        "content": "<p>You could just create a weaker type class if you wanted though.</p>",
        "id": 350385589,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681692132
    },
    {
        "content": "<p>Do you think this generalization would be useful? I don't remember the details of the rabbit hole I went down when I wrote this TODO...!</p>",
        "id": 350385662,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1681692193
    },
    {
        "content": "<p>As an interim generalization, is <code> ∀ x, 0 ≤ x ↔ x ∈ add_submonoid.closure {(s * star s) | (s : R)}</code> sensible?</p>",
        "id": 350385701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681692223
    },
    {
        "content": "<p>I don't really have an intuition for the relevance of the topological closure here, but the additive closure is enough to include ℚ and presumably the gaussian integers</p>",
        "id": 350385820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681692281
    },
    {
        "content": "<p>Seems OK to me.</p>",
        "id": 350386088,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1681692453
    },
    {
        "content": "<p>Hold on, let me think about it.</p>",
        "id": 350386203,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681692517
    },
    {
        "content": "<p>I just want to make sure it doesn't make something else really hard.</p>",
        "id": 350386247,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681692551
    },
    {
        "content": "<p>No rush, I don't desperately need it, and won't try to rush though a refactor</p>",
        "id": 350386301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681692598
    },
    {
        "content": "<p>Wait, how does that work for <code>\\Q</code>? In particular, how is <code>2</code> positive?</p>",
        "id": 350386453,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681692693
    },
    {
        "content": "<p>2 = 1+1</p>",
        "id": 350386459,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1681692702
    },
    {
        "content": "<p>I guess for any positive rational p/q, it is the sum of pq copies of 1/q^2, so it works in general.</p>",
        "id": 350386855,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681692920
    },
    {
        "content": "<p>I'll admit I claimed that without a proof in mind, thanks for providing one</p>",
        "id": 350386975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681692997
    },
    {
        "content": "<p>Okay, so the effect of this change is that it turns the positive elements into an add_submonoid. For C*-algebras this is already true. The effect this has on me is that it forces me to first show this fact before I can use hypotheses of the form <code>0 \\le x</code> effectively. I'm okay with that for the sake of being able to unify some other things.</p>\n<p>One last thing: are we sure this won't cause other headaches (like for CHSH)? I can't think of any examples where the positive elements shouldn''t form a submonoid, and it would be weird if they didn't. But if we could think of an example, that would be a problem.</p>",
        "id": 350388728,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681694145
    },
    {
        "content": "<p>Eric can you explain the motivation for this?</p>",
        "id": 350405515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681707377
    },
    {
        "content": "<p>You mention <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.dot_product_self_eq_zero\">docs#matrix.dot_product_self_eq_zero</a> but, in general, \"if a sum of squares is zero then all the elements are zero\" is a lot weaker than \"every nonnegative element is a sum of squares\".</p>",
        "id": 350405846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681707560
    },
    {
        "content": "<p>For instance, not every nonnegative polynomial in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>Z</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}[X,Y,Z]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">]</span></span></span></span> is a sum of squares.</p>",
        "id": 350405919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681707597
    },
    {
        "content": "<p>Or a more elementary/maybe more convincing example: take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> with the ordering given by evaluation at large positive <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span></p>",
        "id": 350420498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681714340
    },
    {
        "content": "<p>Reid, a more convincing example of what, exactly? I agree with this:<br>\n<span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring/near/350405846\">said</a>:</p>\n<blockquote>\n<p>\"if a sum of squares is zero then all the elements are zero\" is a lot weaker than \"every nonnegative element is a sum of squares\".</p>\n</blockquote>\n<p>But I'm not sure exactly what point you are trying to make. I wouldn't expect either of your examples to be <code>star_ordered_ring</code>s (under any definition close to our current one).</p>",
        "id": 350423222,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681715152
    },
    {
        "content": "<p>An example where squares are nonnegative (and so if a sum of squares is zero, then each of the things is zero) but where not every positive element is a sum of squares (e.g., <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>).</p>",
        "id": 350423746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681715304
    },
    {
        "content": "<p>I also don't understand what point Eric is trying to make; that's my main point.</p>",
        "id": 350423854,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681715341
    },
    {
        "content": "<p>I'm not really a fan of inventing new \"notions\" just to \"generalize\" lemmas--if one really wants to do this then just turn the statement of every lemma into a class, and the proof of the lemma into an instance.</p>",
        "id": 350424472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681715524
    },
    {
        "content": "<p>Doing this to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.dot_product_self_eq_zero\">docs#matrix.dot_product_self_eq_zero</a> already seems like a better idea than changing <code>star_ordered_ring</code>.</p>",
        "id": 350424627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681715576
    },
    {
        "content": "<p>Even an ordered field doesn't have to satisfy \"every nonnegative element is a sum of squares\".</p>",
        "id": 350425790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681715942
    },
    {
        "content": "<p>Per this paper: <a href=\"https://www.ams.org/tran/1953-074-01/S0002-9947-1953-0054175-2/S0002-9947-1953-0054175-2.pdf\">https://www.ams.org/tran/1953-074-01/S0002-9947-1953-0054175-2/S0002-9947-1953-0054175-2.pdf</a>, I think that Eric's new definition is the correct one, modulo the topological closure. Note, this doesn't mean the lemma in question should necessarily have its hypotheses changed.</p>",
        "id": 350517046,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681738642
    },
    {
        "content": "<p>Note that taking the definition (as per the paper) of the positive elements to be the topological closure of the additive submonoid generated by elements of the form <code>star x * x</code> would make a linearly ordered field which contains <code>\\Q</code> as a dense set into a <code>star_ordered_ring</code> with the trivial star operation.</p>",
        "id": 350628907,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681771800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> do you still have objections? I'm interested in your thoughts on this.</p>",
        "id": 350852297,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681841036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> for reasons unrelated to the above discussion, I now <em>actively prefer</em> the definition of <code>star_ordered_ring</code> to use: <code>∀ x, 0 ≤ x ↔ x ∈ add_submonoid.closure {(s * star s) | (s : R)}</code> instead. The short explanation is I want to declare, for <code>star_ordered_ring</code>s, the type of positive elements as a an <code>add_submonoid</code>. This is for reasons related to the API I am developing for the continuous functional calculus. </p>\n<p>The slightly longer version is that a continuous functional calculus for normal elements (in a topological <code>ℂ</code>-algebra) descends in a natural way to normal elements whose spectra are contained in <code>ℝ</code> (in which case you get something for selfadjoint elements), or in <code>ℝ≥0</code> (in which case you get something for positive elements). We want to be able to consider the latter as an <code>ℝ≥0</code>-linear map, but first we need the positive elements to have an <code>add_comm_monoid</code> structure.</p>\n<p>Pinging <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> because you seemed to care about this, and <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> because we've been having discussions related to this topic privately.</p>",
        "id": 351940109,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682190447
    },
    {
        "content": "<p>(deleted) wrong thread</p>",
        "id": 351941184,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682190778
    },
    {
        "content": "<p>All I really wanted to say is that for the purpose of general algebra, if you want to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>v</mi><mi>T</mi></msup><mi>v</mi><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>v</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">v^T v = 0 \\implies v = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6684em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> say, then assuming that every nonnegative element is a sum of squares is too strong. Because this holds for all ordered fields, say, and for those there's no reason that every nonnegative element should be a sum of squares.</p>",
        "id": 351947068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682193602
    },
    {
        "content": "<p>So wanting to make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> a <code>star_ring</code> in order to prove that fact about it, and adopting the proposed axiom for that specific purpose, doesn't really make sense, since it still excludes many other ordered fields.</p>",
        "id": 351947232,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682193685
    },
    {
        "content": "<p>I think the way to proceed here is to define the <a href=\"https://en.wikipedia.org/wiki/Stufe_(algebra)\">Stufe</a> of a field; a field has infinite Stufe iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>v</mi><mi>t</mi></msup><mi>v</mi><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>v</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">v^tv=0\\implies v=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7936em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6684em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>",
        "id": 351947522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682193866
    },
    {
        "content": "<p>In fact infinite Stufe iff orderable, apparently.</p>",
        "id": 351947607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682193924
    },
    {
        "content": "<p>Sure, as I mentioned before, I think the issue with the definition of <code>star_ordered_ring</code> is not related to whether we should refactor that lemma (despite the fact that this was Eric's original motivation). Note though, Reid, that a <code>star_ordered_ring</code> is not an <code>ordered_ring</code> anyway. It's really a different beast. However, I think it makes sense to have <code>ℚ</code> be a <code>star_ordered_ring</code>, apart from refactoring the lemma, and also this will play better for my purposes in C⋆-algebra theory.</p>",
        "id": 351949795,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682195097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> FYI: I'm working on the refactor now.</p>",
        "id": 351952058,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682196584
    },
    {
        "content": "<p>I've not attempted it anyway, but thanks for letting me know not to</p>",
        "id": 351958632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682200958
    },
    {
        "content": "<p>Out of curiosity, are you actively against the extra topological constraints, or are you just agreeing with my claim that in the short term they matter less than the add_submonoid.closure change?</p>",
        "id": 351958697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682201028
    },
    {
        "content": "<p>I'm only against the topological constraints insofar as they increase the type class burdens on the definition (and in our examples so far it only serves to complicate things). If we come across a situation where we need the topological closure instead we can re-evaluate, but I suspect it will be rare.</p>",
        "id": 351961532,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682202918
    },
    {
        "content": "<p>Although there is the annoying fact I find during the refactor that the<code>submonoid_closure</code> is not already imported in that file, and adding that import violates some <code>assert_not_exists</code> clauses.</p>",
        "id": 351961689,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682203024
    },
    {
        "content": "<p>I would endorse removing an <code>assert_not_exists</code> clause for a refactor like this! :-)</p>",
        "id": 351966168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682206042
    },
    {
        "content": "<p>I think those clauses are more of a canary for reviewers to see and discuss than a hard rule about where the imports should lie.</p>",
        "id": 351966429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682206256
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18854\">#18854</a>. I left the <code>assert_not_exists</code> untouched, so it doesn't build right now, but other than that it should. So please let me know how you think these should be changed. I assume we want to replace them with something else.</p>",
        "id": 351986866,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682220102
    },
    {
        "content": "<p>Is \"star ordered ring\" an existing concept in the literature?</p>",
        "id": 352017094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682238630
    },
    {
        "content": "<p>The situation I know more about is real closed rings. These have a \"continuous semialgebraic functional calculus\" as you might call it, and in fact we might as well use that as the definition of a real closed ring. If you have such a calculus then you have a partial order (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>x</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>x</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le x \\iff x = |x|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span></span></span></span>) and then it follows that any nonnegative element is a square (since if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">x = |x|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is the square of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{|x|}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.24em;vertical-align:-0.305em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.935em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span></span></span><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.305em;\"><span></span></span></span></span></span></span></span></span>).</p>",
        "id": 352017397,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682238754
    },
    {
        "content": "<p>What I'm not sure about is what corresponds to the \"star ordered rings\" here, and what the role of the axiom about nonnegative elements being a sum of squares should be.</p>",
        "id": 352017441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682238779
    },
    {
        "content": "<p>(\"Ring\" in this context means \"commutative ring\".)</p>",
        "id": 352017836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682238960
    },
    {
        "content": "<p>Can you please elaborate on what you mean by <em>continuous semialgebraic functional calculus</em>?</p>",
        "id": 352068721,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682257516
    },
    {
        "content": "<p>Star ordered rings are meant to model objects like hermitian matrices with the positive semidefinite order. Things get a bit tricky because it would be nice, for example, to be able to state that a matrix with entries in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> is positive-semidefinite.</p>",
        "id": 352069322,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1682257743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring/near/352068721\">said</a>:</p>\n<blockquote>\n<p>Can you please elaborate on what you mean by <em>continuous semialgebraic functional calculus</em>?</p>\n</blockquote>\n<p>Given a continuous semialgebraic function, you can evaluate it on an element of any real closed ring.</p>",
        "id": 352069602,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682257845
    },
    {
        "content": "<p>In fact, real closed rings are the algebras for the Lawvere theory of all continuous semialgebraic functions.</p>",
        "id": 352069646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682257866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring/near/352017397\">said</a>:</p>\n<blockquote>\n<p>If you have such a calculus then you have a partial order (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>x</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>x</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le x \\iff x = |x|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span></span></span></span>) and then it follows that any nonnegative element is a square (since if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">x = |x|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is the square of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{|x|}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.24em;vertical-align:-0.305em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.935em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span></span></span><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.305em;\"><span></span></span></span></span></span></span></span></span>).</p>\n</blockquote>\n<p><del>To make this work for star rings is the rule just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>x</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>x</mi><msup><mi>x</mi><mo>∗</mo></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">0 \\le x \\iff x x^* = x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>?</del> No, obviously not because this doesn't work for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn><mo>:</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">-1 : \\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span></p>",
        "id": 352071418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682258586
    },
    {
        "content": "<p>Explicitly, to give a real closed ring is the same as to give a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> together with, for every continuous semialgebraic function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><msup><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo>~</mo></mover><mi>n</mi></msup><mo>→</mo><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo>~</mo></mover></mrow><annotation encoding=\"application/x-tex\">f : \\mathbb{\\tilde Q}^n \\to \\mathbb{\\tilde Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1467em;vertical-align:-0.1667em;\"></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9257em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbb\">Q</span></span><span style=\"top:-3.6079em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">~</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1667em;\"><span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.98em;\"><span style=\"top:-3.3786em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0924em;vertical-align:-0.1667em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9257em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbb\">Q</span></span><span style=\"top:-3.6079em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">~</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1667em;\"><span></span></span></span></span></span></span></span></span>, a corresponding operation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mi>f</mi><mo stretchy=\"true\">‾</mo></munder><mo>:</mo><msup><mi>A</mi><mi>n</mi></msup><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\underline{f} : A^n \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0889em;vertical-align:-0.3944em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-2.6456em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3944em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, compatible with compositions and projections. If you use the reals <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> or another real closed field in place of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo>~</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\mathbb{\\tilde Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0924em;vertical-align:-0.1667em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9257em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbb\">Q</span></span><span style=\"top:-3.6079em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">~</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1667em;\"><span></span></span></span></span></span></span></span></span> then you get real closed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-algebras.<br>\nThere's a theorem here, that real closed rings (or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-algebras) end up being a full subcategory of all rings (or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-algebras), so there is also some way to identify the real closed rings as the rings with some extra properties.</p>",
        "id": 352071423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682258588
    },
    {
        "content": "<p>Every ring R (doesn't have to be ordered!) has a real spectrum Sper R and the ring of functions on this thing is a real closed ring, the real closure of R.</p>",
        "id": 352071767,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682258745
    },
    {
        "content": "<p>So I think real closed rings are like the real, commutative, algebraic analogue of C* algebras.</p>",
        "id": 352071789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682258760
    },
    {
        "content": "<p>And I guess ordinary rings correspond to star rings. But I don't know what should correspond to star ordered rings.</p>",
        "id": 352071865,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682258781
    },
    {
        "content": "<p>I know there are various notions of ordered ring like poring, f-ordered ring, lattice ordered ring, but I haven't had occasion to use those</p>",
        "id": 352074901,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682259953
    },
    {
        "content": "<p>Thanks for the explanation.</p>",
        "id": 352094103,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682267752
    }
]