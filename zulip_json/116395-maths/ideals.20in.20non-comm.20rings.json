[
    {
        "content": "<p>I'm thinking about how to extend <code>ring_theory.ideal.basic</code> to cover two-sided ideals for non-commutative rings. Until recently, <code>ideal</code> was only defined for <code>comm_semiring</code>s, and now it is defined as left-ideals of (non-commutative) <code>semiring</code>s as <code>submodule R R</code>. What would be a good way to define two-sided ideals for <code>semiring</code>s? I can think of two options:</p>\n<ul>\n<li>Define a new structure <code>lrideal</code>, so that lots of lemmas for <code>submodule</code> would have to be copied over.</li>\n<li>Treat two-sided ideals as left-ideals (<code>ideal</code>) with an additional hypothesis that it's closed under right multiplication by ring elements.<br>\nAre there more approaches? I'm not experienced enough to tell which is a better approach.</li>\n</ul>",
        "id": 252119802,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630896433
    },
    {
        "content": "<p>To make matters worse, there is the third option of defining two sided ideals to be left ideals under the R (x) R^op action.</p>",
        "id": 252125567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630902805
    },
    {
        "content": "<p>Do you mean <code>forall (x in I) (r in R), r * x * r in I</code>? Isn't that a bit weaker than a two-sided ideal?</p>",
        "id": 252126667,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630904131
    },
    {
        "content": "<p>I might go with defining a new structure and show equivalence for other approaches</p>",
        "id": 252126773,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630904254
    },
    {
        "content": "<p>Scott means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>R</mi><mo>×</mo><msup><mi>R</mi><mtext>op</mtext></msup><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo>∈</mo><mi>I</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>∙</mo><mi>x</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">\\forall (r,s) \\in R \\times R^{\\text{op}}, \\forall x \\in I, (r,s) \\bullet x \\in I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">op</span></span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∙</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>, which unfolds to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>∗</mo><mi>x</mi><mo>∗</mo><mi>s</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">r * x * s \\in I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>.</p>",
        "id": 252127090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630904525
    },
    {
        "content": "<p>Actually I'll try using this for the moment to avoid defining new things, and see how annoying it gets down the road</p>",
        "id": 252127206,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630904673
    },
    {
        "content": "<p>I think the agreement before was that (two-sided) ideals should be defined as a special case of bimodules (like left ideals are defined as a special class of modules). Let me paste some private communication with Aaron here: \"Bimodules could be easy (<code>smul_comm_class</code> is already there) but subbimodules are confusing. Basically, I think we might have to go down to the bottom of that hierarchy, going through <code>bi_mul_action</code> etc. Here's the discussion from last December: <a href=\"#narrow/stream/116395-maths/topic/Bimodules\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Bimodules</a> \"</p>",
        "id": 252129363,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1630907158
    },
    {
        "content": "<p>Hmm, that's an interesting idea, to start all the way down at <code>bi_mul_action</code>.</p>",
        "id": 252129521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630907295
    },
    {
        "content": "<p>Just looked through the thread you linked. Very interesting! So the idea is to implement <code>bi_mul_action</code>, etc, <code>bi_module</code>, as well as their corresponding sub-objects? Then, two-sided ideal would just be <code>sub_bi_module R R^op R</code>?</p>",
        "id": 252131525,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630909147
    },
    {
        "content": "<p><del> <code>bi_submodule R R^op R</code>, I guess. </del></p>",
        "id": 252131683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630909270
    },
    {
        "content": "<p>Yes, of course</p>",
        "id": 252131704,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630909297
    },
    {
        "content": "<p>Sounds like a lot of work but I'm happy to look into this a bit</p>",
        "id": 252131773,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630909327
    },
    {
        "content": "<p>And at every stage, we define type class instances for the corresponding \"non-bi\" objects for the left multiplication and right multiplication</p>",
        "id": 252131830,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630909399
    },
    {
        "content": "<p>I would be very happy to have a proper theory of bimodules. They are, of course, the fundamental objects. (The R (x) R^op trick I mentioned of course only works in a braided category. :-)</p>",
        "id": 252137102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630913388
    },
    {
        "content": "<p><a href=\"https://m.youtube.com/watch?v=GsDGvwhxq5U\">https://m.youtube.com/watch?v=GsDGvwhxq5U</a> has a discussion of right actions and bimodules in the future work section</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"GsDGvwhxq5U\" href=\"https://m.youtube.com/watch?v=GsDGvwhxq5U\"><img src=\"https://uploads.zulipusercontent.net/74fefdcaa2bdd7e18ebd5674f9ab920aa2217e0d/68747470733a2f2f692e7974696d672e636f6d2f76692f47734447767768787135552f64656661756c742e6a7067\"></a></div>",
        "id": 252144757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630917785
    },
    {
        "content": "<p>I like your proposed notation <code>&lt;•</code> for the right scalar action. Maybe we should even introduce <code>•&gt;</code> as an alias for <code>•</code>.</p>",
        "id": 252156362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630924253
    },
    {
        "content": "<p>Mirroring <code>module</code> and <code>submodule</code>, this would be the overall structure of <code>bimodule</code> and <code>sub_bimodule</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.submonoid.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">m</span> <span class=\"bp\">`</span> <span class=\"bp\">•ᵣ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">bi_mul_action</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">β</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_smul_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_smul_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">•ᵣ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_smul_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_smul_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">•ᵣ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•ᵣ</span> <span class=\"n\">y</span> <span class=\"bp\">•ᵣ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">bi_distrib_mul_action</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">N</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">bi_mul_action</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_add_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_zero_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_add_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">•ᵣ</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•ᵣ</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">•ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_zero_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">•ᵣ</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">bimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">bi_distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_smul_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_smul_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_smul_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">•ᵣ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•ᵣ</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">•ᵣ</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_smul_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">•ᵣ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">sub_bi_mul_action</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mem_l'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mem_r'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">•ᵣ</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">sub_bimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">sub_bi_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lrideal</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sub_bimodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>How does this look? Btw, the <code>&lt;•</code> suggestion is great!</p>",
        "id": 252158567,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630925697
    },
    {
        "content": "<p>Hopefully Eric will give an opinion: I suspect he's thought about this the most so far.</p>\n<p>A minor request: could we write <code>bimodule R M S</code> instead (i.e. the rings on either side of the bimodule), just like in the mathematical notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>R</mi></msub><msub><mi>M</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">{}_R M_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 252159206,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630926063
    },
    {
        "content": "<p><del>https://m.youtube.com/watch?v=GsDGvwhxq5U has a discussion of right actions and bimodules in the future work section</del> (zulip sent this twice)</p>",
        "id": 252170820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630932636
    },
    {
        "content": "<p>The classes should probably extend has_scalar, similar to how mul_action does.</p>",
        "id": 252177377,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630935682
    },
    {
        "content": "<p>And should be generalized to \"mul_one_class\" etc</p>",
        "id": 252177499,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630935738
    },
    {
        "content": "<p>(apologies, I have no idea why zulip sent that twice hours apart)</p>",
        "id": 252179063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630936535
    },
    {
        "content": "<p>I think having a separate <code>bimodule R S M</code> typeclass is probably as reasonable as having <code>integral_domain</code> in that it is just a shorthand for a collection of typeclasses. But most lemmas would probably end up stated about the three separate typeclasses, since then you can relax them individually. If we have it, it should provide a <code>bimodule.to_module : module R M</code> and <code>bimodule.to_right_module : module Sᵒᵖ M</code></p>",
        "id": 252184870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630939240
    },
    {
        "content": "<p>So not as you have it written above</p>",
        "id": 252185027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630939316
    },
    {
        "content": "<p>Can we make <code>open_locale bimodule</code> change the pretty printer to use <code>•&gt;</code> for <code>•</code> and add the other notation?</p>",
        "id": 252185181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630939378
    },
    {
        "content": "<p>Ooh, that would be sweet!</p>",
        "id": 252185444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630939500
    },
    {
        "content": "<p>(for the record, I think that having <a href=\"https://leanprover-community.github.io/mathlib_docs/find/integral_domain\">docs#integral_domain</a> is annoying because if you have only <code>comm_ring</code>, <code>no_zero_divisors</code> and <code>nontrivial</code> you have to insert an awkward <code>letI</code> because typeclass search can't deal with the loops formed by two different ways to express the same thing; but there's clear pedagogical value to <code>integral_domain</code> as a spelling - the same view applies to <code>bimodule</code>)</p>",
        "id": 252231334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630969827
    },
    {
        "content": "<p>My above comment about <code>bimodule.to_module</code> is wrong; it produces a dangerous instance. I think the best approach would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">right_module</span>  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">bimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 252231824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630970367
    },
    {
        "content": "<p>What I've tried so far is to define <code>bimodule</code> as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">bimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">extends</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 252241870,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630980891
    },
    {
        "content": "<p>This way, writing <code>bimodule R M S</code> would require first <code>module R M</code> and <code>module Sᵒᵖ M</code></p>",
        "id": 252242096,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630981123
    },
    {
        "content": "<p>I then defined</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span>\n<span class=\"bp\">...</span> <span class=\"o\">[</span><span class=\"n\">module_RM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module_SM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_left_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">module_RM</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_right_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">module_SM</span>\n</code></pre></div>",
        "id": 252242123,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630981161
    },
    {
        "content": "<p>Avoiding dangerous type class instances</p>",
        "id": 252242195,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630981213
    },
    {
        "content": "<p><code>sub_bimodule</code> is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">sub_bimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kd\">extends</span> <span class=\"n\">add_submonoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mem_l'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mem_r'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then some lemmas for <code>submodule</code> just have to be duplicated with <code>_l</code> and <code>_r</code> versions</p>",
        "id": 252242390,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630981425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/116395-maths/topic/ideals.20in.20non-comm.20rings/near/252242123\">said</a>:</p>\n<blockquote>\n<p>I then defined</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span>\n<span class=\"bp\">...</span> <span class=\"o\">[</span><span class=\"n\">module_RM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module_SM</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_left_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">module_RM</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_right_module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">module_SM</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What is the benefit of this? After all the instance was already there as assumption.<br>\nThis would make sense if you <code>extends module R M, module Sᵒᵖ M, smul_comm_class R Sᵒᵖ M</code></p>",
        "id": 252250118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630989378
    },
    {
        "content": "<p>You're right...</p>",
        "id": 252262921,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1630999884
    },
    {
        "content": "<p>I would mildly caution against having <code>bimodule</code> actually take <code>[module R M]</code> assumptions; I think there's a lower risk of pain down the road (like we experienced with the old <code>module</code>/<code>semimodule</code> split) if you simply assume <code>[has_scalar R M]</code> instead, even though that's somewhat misleading</p>",
        "id": 252263991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631000532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> Has this made it into a PR yet?</p>",
        "id": 259496034,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1635496401
    },
    {
        "content": "<p>See the topic on <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/259727782\">left vs right modules in tensor products</a> for some related discussion about left and right modules (which was moved from here)</p>",
        "id": 262058631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637323976
    },
    {
        "content": "<p>What's the current status of this discussion? It would be nice to have a way to talk about bimodules and two-sided ideals in non-commutative rings sometime soon.</p>",
        "id": 275132235,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647144890
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 275152784,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647177155
    },
    {
        "content": "<p>R-S-Bimodules are possible as <code>[module R M] [module Sᵐᵒᵖ M] [smul_comm_class R Sᵐᵒᵖ M]</code>, what we're missing is sub-bimodules</p>",
        "id": 275160955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647186561
    },
    {
        "content": "<p>Ah, okay. I only looked for two-sided ideals. Silly me. Should I define those, or wait for something else someone is working on?</p>",
        "id": 275162218,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647188103
    },
    {
        "content": "<p>I think we probably want <code>subbimodule R S M</code> and then can define <code>biideal R</code> as <code>subbimodule R R R</code></p>",
        "id": 275174306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647204608
    },
    {
        "content": "<p>Likely with better names</p>",
        "id": 275174310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647204618
    },
    {
        "content": "<p>ah, I was thinking just <code>bimodule R R I</code> but I see now why sub-bimodule makes more sense.</p>",
        "id": 275175581,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647206375
    },
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/14399\">#14399</a> which defines right ideals. I confess I have lost track of where we are with this. Other than code duplication, is there any reason why this is a silly approach?</p>\n<p>Actually I just wanted the result that a division ring is Artinian but I got annoyed when I realised I could only handle the left case so I copied near-minimal amount of left <code>ideal</code> API to allow me do what I wanted. The PR is thus a silly mixture of two things; I'm happy to split it up but first I thought I'd check here.</p>\n<p>Is this crazy? Do we actually want to go in this direction?</p>",
        "id": 284039475,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653588046
    },
    {
        "content": "<p>(the obvious alternative is just to work with <code>ideal Rᵐᵒᵖ</code> but then all elements live in a different type which will be pain)</p>",
        "id": 284044306,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653590521
    },
    {
        "content": "<p>Coming from the order theory library where everything is dualized by hand (still longing for a <code>to_dual</code> attribute), I would say that you should duplicate everything. It's not twice harder to write twice almost the same thing.</p>",
        "id": 284044565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653590652
    },
    {
        "content": "<p>The only problem I see is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite\">docs#mul_opposite</a> is irreducible, so you can't use it to easily dualize lemmas as we do with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a>.</p>",
        "id": 284044651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653590717
    },
    {
        "content": "<p>Maybe you can make it locally reducible when dualizing lemmas?</p>",
        "id": 284044701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653590741
    },
    {
        "content": "<p>... and <code>left_ideal</code> and <code>right_ideal</code> are different structures, so you can't rely on that trick when the statement mentions them.</p>",
        "id": 284044840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653590812
    },
    {
        "content": "<blockquote>\n<p>the obvious alternative is just to work with <code>ideal Rᵐᵒᵖ</code> but then all elements live in a different type which will be pain</p>\n</blockquote>\n<p>My vague memory was that this doesn't actually mean the right thing; but perhaps I told <span class=\"user-mention\" data-user-id=\"419946\">@Haruhisa Enomoto</span> something wrong in their PR</p>",
        "id": 284061036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653599020
    },
    {
        "content": "<p>IIUC, you are referring to <a href=\"https://github.com/leanprover-community/mathlib/pull/13862#discussion_r862521248\">this comment</a> on <a href=\"https://github.com/leanprover-community/mathlib/pull/13862\">#13862</a>. I agree with your comment there.</p>",
        "id": 284119474,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653650111
    },
    {
        "content": "<p>For the sake of definiteness, given a (semi)ring <code>R</code> there are four things one can consider:</p>\n<ol>\n<li><code>submodule R R</code>        -- Left ideal of <code>R</code></li>\n<li><code>submodule Rᵐᵒᵖ R</code>     -- Right ideal of <code>R</code></li>\n<li><code>submodule Rᵐᵒᵖ Rᵐᵒᵖ</code>  -- Left ideal of <code>Rᵐᵒᵖ</code>  (corresponds to right ideal of <code>R</code>)</li>\n<li><code>submodule R Rᵐᵒᵖ</code>     -- Right ideal of <code>Rᵐᵒᵖ</code> (corresponds to left ideal of <code>R</code>)</li>\n</ol>",
        "id": 284119511,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653650151
    },
    {
        "content": "<p>And you were correctly pointing out that 2 and 3 are not equal (though they do \"correspond\" --- mathematically, the point is that when <code>Rᵐᵒᵖ</code> appears as the second argument in <code>submodule</code>, its multiplicative structure has been forgotten so there's no difference between it and <code>R</code>).</p>",
        "id": 284119584,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653650192
    },
    {
        "content": "<p>Looking this morning, we are very nearly able to work with sub-bimodules. The only missing piece is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_i</span> <span class=\"o\">:</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Currently fails</span>\n</code></pre></div>",
        "id": 284119732,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653650314
    },
    {
        "content": "<p>I'll try to PR something that fixes this (today if I get time, though I'm travelling so it could be Monday).</p>",
        "id": 284119844,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653650421
    },
    {
        "content": "<p>For emphasis, we just need to fill the <code>sorry</code> below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_i</span> <span class=\"o\">:</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- YAY: a subbimodule:</span>\n<span class=\"k\">#check</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n\n<span class=\"sd\">/-- A two-sided ideal. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">bi_ideal</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 284119936,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653650512
    },
    {
        "content": "<p>However I think we should still have a definition of <code>def right_ideal := submodule Rᵐᵒᵖ R</code> as proposed in my <a href=\"https://github.com/leanprover-community/mathlib/pull/14399\">#14399</a>.</p>",
        "id": 284120040,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653650580
    },
    {
        "content": "<p>(my only mild concern is that when we have true <code>ring</code>s as opposed to <code>semiring</code>s we might want to work with <code>R ⊗[ℤ] Sᵐᵒᵖ</code> but I think this shouldn't really be a problem)</p>",
        "id": 284120175,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653650668
    },
    {
        "content": "<p>Do we run into trouble with diamonds when <code>M = (R ⊗[ℕ] Sᵐᵒᵖ)</code>?</p>",
        "id": 284123987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653653409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/ideals.20in.20non-comm.20rings/near/284119584\">said</a>:</p>\n<blockquote>\n<p>And you were correctly pointing out that 2 and 3 are not equal (though they do \"correspond\" --- mathematically, the point is that when <code>Rᵐᵒᵖ</code> appears as the second argument in <code>submodule</code>, its multiplicative structure has been forgotten so there's no difference between it and <code>R</code>).</p>\n</blockquote>\n<p>I think I was confused when I wrote this and thought they didn't even correspond, but you're obviously right that they do. Indeed, the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite.has_scalar\">docs#mul_opposite.has_scalar</a> confirms that the multiplicative structure is forgotten.</p>",
        "id": 284124118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653653492
    },
    {
        "content": "<p>I should probably emphasise again that a two-sided ideal should not be called a bi-ideal. That is something else: <a href=\"https://ncatlab.org/nlab/show/biideal\">https://ncatlab.org/nlab/show/biideal</a> Personally, my preference would be to to rename the current ideal to left_ideal, and name a two-sided ideal just ideal, but if that is not wished for, just call it a two_sided_ideal.</p>",
        "id": 284141555,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1653662316
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> I do now remember you making this important point before. I'm hoping finally to push through definitions of right- and two-sided ideals in the next few days and will make sure to remember not to say \"bi-ideal\" anywhere.</p>",
        "id": 284144487,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653663547
    },
    {
        "content": "<p>As to the terminology, I wonder if we could have notation, localized to commutative/non-commutative locales that controlled whether <code>ideal</code> meant two-sided or left. For now I think we'll probably have to stick with <code>ideal</code> meaning left though.</p>",
        "id": 284144753,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653663665
    },
    {
        "content": "<p>I've just pushed <a href=\"https://github.com/leanprover-community/mathlib/pull/14465\">#14465</a> which I think should provide a convenient theory for two-sided submodules of bimodules and in particular allow us to define two-sided ideals easily.</p>",
        "id": 284386825,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653927881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/ideals.20in.20non-comm.20rings/near/284123987\">said</a>:</p>\n<blockquote>\n<p>Do we run into trouble with diamonds when <code>M = (R ⊗[ℕ] Sᵐᵒᵖ)</code>?</p>\n</blockquote>\n<p>In fact we don't because <code>(R ⊗[ℕ] Sᵐᵒᵖ)</code> is not a module over <code>Sᵐᵒᵖ</code> because our definition of tensor product only picks up auxiliary actions from the left factor. However even if we did I think this would be a diamond we could live with.</p>",
        "id": 284387024,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653928009
    },
    {
        "content": "<p>Highlighting a related discussion <a href=\"https://github.com/leanprover-community/mathlib/pull/14465#discussion_r898892696\">from GitHub</a> in case anyone wants to comment.</p>",
        "id": 286353351,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655386595
    },
    {
        "content": "<p>The nub is that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-modules and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\otimes_R N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is naturally an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-module in two different ways, depending on whether we define: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mo>⊗</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">a \\cdot (m \\otimes n) = (a \\cdot m) ⊗ n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> (the \"left option\") or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mo>⊗</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a \\cdot (m \\otimes n) = m \\otimes (a \\cdot n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> (the \"right option\").</p>\n<p>If we want to work with these two different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-module structures using typeclasses, we need two different types indicating whether we want to pick up the left or right <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-action. Currently in Mathlib, we just arbitrarily always take the left action (thus ignoring the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>).</p>\n<p>I sketched out some thoughts about how to resolve this ages ago here <a href=\"#narrow/stream/144837-PR-reviews/topic/.234773.20base.20change/near/240929258\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.234773.20base.20change/near/240929258</a></p>",
        "id": 286354930,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655387301
    },
    {
        "content": "<p>In the case at hand, we are defining an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes_R B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>-module structure on a module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> that carries commuting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-module and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>-module structures (for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebras <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> over a commutative ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>). This fine except for the case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>=</mo><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">M = A \\otimes_R A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> (for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> commutative) when our left-only convention makes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes_R A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> admissible and get a weird module structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes_R A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⊗</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>⊗</mo><msup><mi>b</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi>b</mi><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>⊗</mo><msup><mi>b</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">(a \\otimes b) \\cdot (a&#x27; \\otimes b&#x27;) = (aba&#x27;) \\otimes b&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ab</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 286355768,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655387725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/ideals.20in.20non-comm.20rings/near/286354930\">said</a>:</p>\n<blockquote>\n<p>The nub is that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-modules and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\otimes_R N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is naturally an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-module in two different ways, depending on whether we define: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mo>⊗</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">a \\cdot (m \\otimes n) = (a \\cdot m) ⊗ n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> (the \"left option\") or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mo>⊗</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a \\cdot (m \\otimes n) = m \\otimes (a \\cdot n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> (the \"right option\").</p>\n</blockquote>\n<p>My naive mathematical feeling is that, in this case,  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\otimes_R N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> should be considered as a left <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes_R A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-module, and picking up left or right <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-action corresponds to considering ring morphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\to A \\otimes_R A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> defined by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>↦</mo><mi>a</mi><mo>⊗</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a \\mapsto a \\otimes 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>↦</mo><mn>1</mn><mo>⊗</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a \\mapsto 1 \\otimes a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>.</p>",
        "id": 286628574,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1655527464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419946\">@Haruhisa Enomoto</span> I agree and I have a plan that should make this work (though it's not my current priority).</p>",
        "id": 286769083,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655716687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/ideals.20in.20non-comm.20rings/near/284386825\">said</a>:</p>\n<blockquote>\n<p>I've just pushed <a href=\"https://github.com/leanprover-community/mathlib/pull/14465\">#14465</a> which I think should [...] allow us to define two-sided ideals easily.</p>\n</blockquote>\n<p>I just returned to this PR and have put it up for review again.</p>",
        "id": 291688860,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1659434869
    },
    {
        "content": "<p>I missed this during my hiatus. I'm super excited. I'll review it, but I'm not sure I'll have anything intelligent to say. I definitely would have missed that diamond previously mentioned.</p>",
        "id": 291715932,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659450068
    },
    {
        "content": "<p>I should have some time to look on Thursday</p>",
        "id": 291716218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659450183
    },
    {
        "content": "<p>Thank you both. No rush but any comments very gratefully received!</p>",
        "id": 291719534,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1659451620
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/leanprover-community/mathlib/pull/14465\">#14465</a> has been merged, it might be a good time for somebody to develop the theory of two-sided ideals. Here is how I imagine one might start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.bimodule</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">mul_opposite</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">tensor_product.algebra.module</span>\n\n<span class=\"sd\">/-- A two-sided ideal in a semiring `R` is a left `submodule` of `R` as a `module` over</span>\n<span class=\"sd\">`R ⊗[ℕ] Rᵐᵒᵖ`. -/</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">two_sided_ideal</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">two_sided_ideal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">two_sided_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_mem_left</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">I.smul_mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.algebra.smul_def</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_mem_right</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">I.smul_mem</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">op</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.algebra.smul_def</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Forgetting the right action, a `two_sided_ideal` is just a left `ideal`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_ideal</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">subbimodule.to_submodule</span> <span class=\"n\">I</span>\n\n<span class=\"c1\">-- TODO Lots more boilerplate, presumably can be modelled on existing `ideal` API.</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">two_sided_ideal</span>\n</code></pre></div>",
        "id": 293167433,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660328246
    },
    {
        "content": "<p>Note that these still require the ring to be unital but it's still some progress.</p>",
        "id": 293167521,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660328278
    },
    {
        "content": "<p>Speaking of needing the rings to be unital: this is because of the module restriction, right? We also need modules over non-unital rings. My student is currently developing the theory of Hilbert modules but currently she is doing it over a unital C*-algebra because of this requirement.</p>",
        "id": 293173254,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660330385
    },
    {
        "content": "<p>Yes, unitality is forced on us with the proposed setup because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module\">docs#module</a> requires a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semiring\">docs#semiring</a> rather than a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_semiring\">docs#non_unital_semiring</a> . To remove this I suppose we'd have to  introduce some sort of <code>non_unital_module</code> class with the same axioms as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module\">docs#module</a> except without the <code>one_smul</code> axiom (ultimately coming from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action\">docs#mul_action</a>). And then I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a> would then be redefined using <code>non_unital_module</code> (since the identity plays no role for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a>) and then we would be able to have non-unital <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a> and left <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal\">docs#ideal</a> s.</p>",
        "id": 293195224,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660339376
    },
    {
        "content": "<p>I <strong>think</strong> that should do it in terms of changes to the typeclass hierarchy (just one new class) but there would also be some more work to do so that we know that <code>A ⊗[R] B</code> is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_comm_semiring\">docs#non_unital_comm_semiring</a> when <code>A</code> and <code>B</code> are: we currently only know this for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/comm_semiring\">docs#comm_semiring</a>.</p>",
        "id": 293195522,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660339510
    },
    {
        "content": "<p>Hopefully that's all correct, I'm typing this off the top of my head late just before I fall asleep.</p>",
        "id": 293195554,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660339532
    },
    {
        "content": "<p>Is it likely that we need to generalize mul_actions too?</p>",
        "id": 293201884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660342564
    },
    {
        "content": "<p>Let's only define non-unital mul_actions if we need to. I suspect it's less (or not at all?) necessary, but I've been wrong before!</p>",
        "id": 293204009,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660343724
    },
    {
        "content": "<p>How about simply define <code>non_unital_module R M</code> as <code>module (unitization ℕ R) M</code>? By the way someone should fix <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unitization.comm_semiring/src\">src#unitization.comm_semiring</a> now that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_comm_semiring\">docs#non_unital_comm_semiring</a>.</p>\n<p>If you want to generalize mul_action you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group/with_one.html\">https://leanprover-community.github.io/mathlib_docs/algebra/group/with_one.html</a></p>",
        "id": 293207196,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660345662
    },
    {
        "content": "<p>I'll fix <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unitization.comm_semiring\">docs#unitization.comm_semiring</a> tonight. I think the unitization trick might work, and it could actually be fairly convenient.</p>",
        "id": 293212329,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660350054
    },
    {
        "content": "<p>If unitization is a trick then defining bimodules using action of the tensor product is definitely a bigger trick :)</p>",
        "id": 293220459,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660359275
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16048\">#16048</a> for the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unitization.comm_semiring\">docs#unitization.comm_semiring</a> fix. Somebody can pop it on the queue once it passes CI (just waiting for the linter).</p>",
        "id": 293347432,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660459226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> How much of the boilerplate do you think is necessary to make your draft a valid PR? I'm imagening that some stuff would already benefit from just being able to talk about two-sided ideals, e. g.  the definition of the Jacobson radical of a two-sided ideal in <a href=\"https://github.com/leanprover-community/mathlib/pull/13862\">#13862</a>.</p>",
        "id": 293771713,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1660673069
    },
    {
        "content": "<p>Regarding the unitization trick for modules over non-unital rings: what I really want in order to make this nice is an instance <code>module (unitization 𝕜 R) M</code> given a hypothesis <code>module (unitization ℕ R) M</code> where <code>𝕜</code> is a <code>comm_ring</code>. In other words, in practice I want to be able to replace the ring unitization with the C⋆-algebra unitization (where <code>𝕜 = ℂ</code> and <code>R</code> is a non-unital C⋆-algebra). Is this feasible?</p>",
        "id": 293773971,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660673856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> I'm not sure. Certainly such a PR should include lemmas like <code>zero_mem</code>, <code>add_mem</code>, <code>sub_mem</code>, <code>ext</code>, ... I'd take a careful look at the existing API for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal\">docs#ideal</a> and probably add quite a lot of what they have since code like this is fairly uncontroversial (and easy to write).</p>\n<p>However I think there are two questions to answer before embarking on such a task:</p>\n<ol>\n<li>Should we make <code>two_sided_ideal</code> a specialisation of a new <code>subbimodule R S M</code> structure? [probably]</li>\n<li>Should we wait till we've resolved the issue that <code>submodule R M</code> currently requires <code>R</code> to be unital? [probably not]</li>\n</ol>",
        "id": 293778015,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660675252
    },
    {
        "content": "<p>If I ever get a chance to return to this PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14399\">#14399</a> (defining right ideals) then it should give an example of a minimal API for a new definition like this.</p>",
        "id": 293778279,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660675343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I think that would not be feasible because the carrier type <code>𝕜</code> in such an instance would be undetermined.</p>",
        "id": 293779294,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660675718
    },
    {
        "content": "<p>IIUC if you wanted to pursue this you would have to introduce a type synonym for <code>M</code> and use that in the instance.</p>",
        "id": 293779476,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660675792
    },
    {
        "content": "<p>Yeah, it definitely felt like this instance was \"going the wrong way\"</p>",
        "id": 293779618,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660675837
    },
    {
        "content": "<p>It makes mathematical sense though and I <strong>think</strong> we'll be able to do this sort of thing in Lean 4.</p>",
        "id": 293779715,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660675876
    },
    {
        "content": "<p>For now a type synonym (that captures <code>𝕜</code>) should work.</p>",
        "id": 293779802,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660675904
    },
    {
        "content": "<p>Well, I'm certainly wondering at what point it makes sense to specialize all (okay, I only mean most) of the C⋆-algebra theory to <code>ℂ</code>, and this might be one situation.</p>",
        "id": 293780201,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660676034
    }
]