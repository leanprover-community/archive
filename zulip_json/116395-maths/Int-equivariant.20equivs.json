[
    {
        "content": "<p>In the sphere eversion project, an <code>EquivariantEquiv</code> is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">EquivariantEquiv</span> <span class=\"kd\">extends</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:</span> <span class=\"n\">toFun</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">eqv'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">toFun</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I'm going to port <code>EquivariantMap</code> and <code>EquivariantEquiv</code> to Mathlib (probably, under the names <code>IntEquivariantMap</code> and <code>IntEquivariantEquiv</code>) and merge with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CircleDeg1Lift#doc\">docs#CircleDeg1Lift</a></p>",
        "id": 380462803,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690830515
    },
    {
        "content": "<p>I have 2 questions (probably, to <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ):</p>\n<ol>\n<li>How often do you need non-monotone equivariant maps?</li>\n<li>Why do you need <code>map_zero'</code> (I didn't read how do you use it yet)?</li>\n</ol>",
        "id": 380463090,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690830583
    },
    {
        "content": "<p>I think ultimately the right thing to do is to use <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>’s work around equivariant maps, but I don’t know how far it is from mathlib-ready</p>",
        "id": 380466844,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690831304
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a> and the related discussion in <a class=\"stream\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews\">#PR reviews</a></p>",
        "id": 380469727,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690831764
    },
    {
        "content": "<p>While this is the right thing to do (and I'm going to link <code>IntEquivariant*</code> to Antoine's typeclasses), verifying <code>f (x + 1) = f x + 1</code> is much easier.</p>",
        "id": 380480635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690833949
    },
    {
        "content": "<p>Should this just be a map from <code>add_circle 1</code>?</p>",
        "id": 380482431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690834421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Int-equivariant.20equivs/near/380480635\">said</a>:</p>\n<blockquote>\n<p>While this is the right thing to do (and I'm going to link <code>IntEquivariant*</code> to Antoine's typeclasses), verifying <code>f (x + 1) = f x + 1</code> is much easier.</p>\n</blockquote>\n<p>IMHO that should be a theorem, not the definition</p>",
        "id": 380489561,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690836632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Int-equivariant.20equivs/near/380482431\">said</a>:</p>\n<blockquote>\n<p>Should this just be a map from <code>add_circle 1</code>?</p>\n</blockquote>\n<p>No, that would be <code>f (x + 1) = f x</code>. Unless you also force the codomain to be the <code>add_circle</code>, but then going back to the good old real function becomes painful</p>",
        "id": 380489901,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690836740
    },
    {
        "content": "<p>In fact, \"lift of a circle self-map\" is the main use case for me.</p>",
        "id": 380495687,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690838173
    },
    {
        "content": "<p>Do we have an instance for <code>AddAction Int R</code>, if <code>R</code> is a <code>Ring</code> (or an <code>AddGroupWithOne</code>)?</p>",
        "id": 380495832,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690838234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Int-equivariant.20equivs/near/380463090\">said</a>:</p>\n<blockquote>\n<p>I have 2 questions (probably, to <span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> ):</p>\n<ol>\n<li>How often do you need non-monotone equivariant maps?</li>\n<li>Why do you need <code>map_zero'</code> (I didn't read how do you use it yet)?</li>\n</ol>\n</blockquote>\n<p>I think that in the sphere eversion project, the answer to 1 is: never. I think we only need this construction in <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/loops/reparametrization.lean\">reparametrization.lean</a>. The goal is really to build circle diffeomorphisms fixing a base point. Fixing the circle base point is the reason for <code>map_zero'</code> but of course in a more general context we shouldn't impose this condition (at least not right away). The reason why we don't use the circle directly is that calculus on <span class=\"tex-error\">$$\\mathbb{R]$$</span> is much easier to manipulate in Lean. In particular a very important statement for us is <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/137822135e9ee3a4199725a6184146801112b77b/src/to_mathlib/analysis/cont_diff.lean#L236\">cont_diff_parametric_symm_of_deriv_pos</a>.</p>",
        "id": 380496469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690838442
    },
    {
        "content": "<p>Am I right that you don't use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCircle#doc\">docs#AddCircle</a> because it was not there at the time of writing?</p>",
        "id": 380496714,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690838505
    },
    {
        "content": "<p>I don't remember whether it was there or not. Does it allow to do calculus without using the manifolds library?</p>",
        "id": 380497111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690838601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> There are at least 8 ways to say <code>f (x + 1) = f x + 1</code> using generic equivariant maps (<code>Int</code>, <code>Nat</code>, <code>multiples</code>, <code>zmultiples</code>, possibly with an opposite). I would prefer to have a <code>structure</code> that uses <code>f (x + 1) = f x + 1</code> or a <code>def</code> as the canonical way to talk about these maps.</p>",
        "id": 380497226,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690838638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> No, it doesn't. But it may have more lemmas than a custom circle type you define in the project.</p>",
        "id": 380497443,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690838692
    },
    {
        "content": "<p>It seems <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> introduced this definition in <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/4a217290c0a67f44096ef83f951e06c910bf226e\">https://github.com/leanprover-community/sphere-eversion/commit/4a217290c0a67f44096ef83f951e06c910bf226e</a>, maybe he remembers?</p>",
        "id": 380497849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690838788
    },
    {
        "content": "<p>But in any case I'd be happy to use mathlib more of course.</p>",
        "id": 380497911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690838801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Int-equivariant.20equivs/near/380497226\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> There are at least 8 ways to say <code>f (x + 1) = f x + 1</code> using generic equivariant maps (<code>Int</code>, <code>Nat</code>, <code>multiples</code>, <code>zmultiples</code>, possibly with an opposite). I would prefer to have a <code>structure</code> that uses <code>f (x + 1) = f x + 1</code> or a <code>def</code> as the canonical way to talk about these maps.</p>\n</blockquote>\n<p>I would argue that being equivariant for the <code>Int</code> action is <em>obviously</em> the right characterization (precisely because you can lift to the circle easily), but I get your point.</p>",
        "id": 380498260,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690838897
    },
    {
        "content": "<p>I'm sorry I have very little time to help with the sphere eversion port. I'm less than three days away from moving my family to a different continent for one year.</p>",
        "id": 380498510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690838971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> In case of a <code>Semiring</code>, being equivariant for <code>Nat</code> is better. Also, if you want to talk about <code>f (x + 1) = f x + n</code> (we may add this later - e.g., to prove that under some assumptions, the corresponding circle self-map is conjugate to multiplication by <code>n</code>), then you need something like <code>EquivariantMap (MonoidHom.mulLeft n) R R</code> (not tested).</p>",
        "id": 380498863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690839088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Good luck with packing&amp;moving!</p>",
        "id": 380498887,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690839100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> BTW, we don't have an additive action of <code>Int</code> on an <code>AddGroupWithOne</code>.</p>",
        "id": 380499501,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690839272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Int-equivariant.20equivs/near/380495832\">said</a>:</p>\n<blockquote>\n<p>Do we have an instance for <code>AddAction Int R</code>, if <code>R</code> is a <code>Ring</code> (or an <code>AddGroupWithOne</code>)?</p>\n</blockquote>\n<p>I think we should, but I fear this may necessitate a <code>AddGroupWithOne.zvadd</code> field. I guess we should see if we can craft any diamonds with <code>Int.cast z + r</code>.</p>",
        "id": 380504207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690840942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Int-equivariant.20equivs/near/380498510\">said</a>:</p>\n<blockquote>\n<p>I'm sorry I have very little time to help with the sphere eversion port. I'm less than three days away from moving my family to a different continent for one year.</p>\n</blockquote>\n<p>Wow, that sounds challenging in both directions: good luck! Is the move in some way Lean motivated (and if so, will we be hearing about it soon)?</p>",
        "id": 380505011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690841241
    },
    {
        "content": "<p>I think it's public knowledge that he's visiting Jeremy for the year.</p>",
        "id": 380505076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690841266
    },
    {
        "content": "<p>What would be a better name for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CircleDeg1Lift#doc\">docs#CircleDeg1Lift</a> ?</p>",
        "id": 380507511,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690842195
    },
    {
        "content": "<p>It assumes <code>f (x + 1) = f x + 1</code> and <code>Monotone f</code>.</p>",
        "id": 380507568,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690842223
    },
    {
        "content": "<p><code>NatEquivariantMonoMap</code> is a natural alternative but it's not much more readable than <code>CircleDeg1Lift</code>.</p>",
        "id": 380508353,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690842512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Int-equivariant.20equivs/near/380505076\">said</a>:</p>\n<blockquote>\n<p>I think it's public knowledge that he's visiting Jeremy for the year.</p>\n</blockquote>\n<p>Maybe it wasn't so public if Eric didn't know. I've been thinking about this so much that I may have ended up imagining everybody knew! Indeed I have the great opportunity of spending one year in the Hoskinson center at CMU with Jeremy and his team.</p>",
        "id": 380509332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690842955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Int-equivariant.20equivs/near/380497849\">said</a>:</p>\n<blockquote>\n<p>It seems <span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> introduced this definition in <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/4a217290c0a67f44096ef83f951e06c910bf226e\">https://github.com/leanprover-community/sphere-eversion/commit/4a217290c0a67f44096ef83f951e06c910bf226e</a>, maybe he remembers [that you don't use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCircle#doc\">docs#AddCircle</a> because it was not there at the time of writing]?</p>\n</blockquote>\n<p>Indeed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCircle#doc\">docs#AddCircle</a> did not exist when this work in the SE project was done but as Patrick says, using equivariant maps on the reals, rather than maps from the circle enabled us to avoid using the manifold library for such simple calculus.</p>",
        "id": 380600243,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690878265
    },
    {
        "content": "<p>This is still true btw: even though it's tangent bundle is trivial, the only way to do calculus on the circle is to regard it as a manifold.</p>",
        "id": 380600417,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690878303
    },
    {
        "content": "<p>You can see me waffling on about this here <a href=\"#narrow/stream/116395-maths/topic/Calculus.20on.20the.20circle/near/305005742\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Calculus.20on.20the.20circle/near/305005742</a> (and IIRC briefly also in some other thread about generalising calculus to TVS without norms that I can't seem to find at the moment --- the point is that you don't need a full vector space structure, just an action of sufficiently small scalars).</p>",
        "id": 380601450,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690878485
    },
    {
        "content": "<p>Regarding design, my  first instincts were that I'd like to see <code>Int</code>-equivariant maps as special case of a general definition (which I think is Anantole's view) but when I reflect that we have a special type for the circle I think I'm persuaded that it's a good idea to have a special case for <code>Int</code>-equivariant maps too.</p>",
        "id": 380602716,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690878734
    },
    {
        "content": "<p>Wouldn't the analog of the <code>add_circle p</code> case be <code>f (x + p) = f x + p</code>, rather than only considering <code>p = 1</code>?</p>",
        "id": 380610546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690880212
    },
    {
        "content": "<p>Or are you talking about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Circle#doc\">docs#Circle</a> ?</p>",
        "id": 380610718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690880242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Int-equivariant.20equivs/near/380469727\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a> and the related discussion in <a class=\"stream\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews\">#PR reviews</a></p>\n</blockquote>\n<p>I have good reasons to wish that it be done swiftly, but will probably be away this week. Some stuff has to be fixed, and most importantly, somebody fluent in mathlib should check I do things correctly at the very start. Then I can do the dirty job.</p>",
        "id": 380668719,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690890862
    }
]