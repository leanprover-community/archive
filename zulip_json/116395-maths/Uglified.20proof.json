[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Could please stop doing things like <a href=\"https://github.com/leanprover-community/mathlib/pull/18111/files#diff-5603eadded9b71047a01d203093c3a2b759582dad4f7d86ac16072c1c43bd094L186-R166\">https://github.com/leanprover-community/mathlib/pull/18111/files#diff-5603eadded9b71047a01d203093c3a2b759582dad4f7d86ac16072c1c43bd094L186-R166</a>? Why do you want mathlib to be ugly? This is a proof I'm showing in every propaganda talk I give. My proof was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n<span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùì§</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">‚®Ü</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span>  <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">compact_space_uniformity</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">=</span>  <span class=\"bp\">‚®Ü</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">filter.map_supr</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚®Ü</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>     <span class=\"o\">:</span> <span class=\"n\">supr_mono</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h.prod_map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span><span class=\"o\">)</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚®Ü</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>         <span class=\"o\">:</span> <span class=\"n\">supr_comp_le</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">f</span>\n                     <span class=\"bp\">...</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ≤</span>                   <span class=\"o\">:</span> <span class=\"n\">supr_nhds_le_uniformity</span>\n</code></pre></div>\n<p>and you replace it by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">f</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìùÀ¢</span> <span class=\"o\">(</span><span class=\"n\">diagonal</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">ùìùÀ¢</span> <span class=\"o\">(</span><span class=\"n\">diagonal</span> <span class=\"n\">Œ≤</span><span class=\"o\">)),</span>\n  <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h.prod_map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto_nhds_set</span> <span class=\"n\">maps_to_prod_map_diagonal</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">this.mono_left</span> <span class=\"n\">nhds_set_diagonal_eq_uniformity.ge</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_right</span> <span class=\"n\">nhds_set_diagonal_le_uniformity</span>\n</code></pre></div>\n<p>Why are you doing this? Now your version has been ported to Lean4 as well so both versions need to be fixed.</p>",
        "id": 358038746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683956557
    },
    {
        "content": "<p>I'll try to stop doing it.</p>",
        "id": 358038798,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683956622
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 358038888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683956690
    },
    {
        "content": "<p>If there are some important proofs that are included in propaganda talks, could you please mark them with something like <code>-- don't uglify this proof</code>?</p>",
        "id": 358038930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683956744
    },
    {
        "content": "<p>Usually, I do it because I slightly break a proof, then it's easier for me to rewrite a proof than to read and understand the original proof.</p>",
        "id": 358038987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683956782
    },
    {
        "content": "<p>(BTW, I think that using <code>nhds_set</code> here is not a bad thing)</p>",
        "id": 358039026,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683956835
    },
    {
        "content": "<p>I don't think there is any reason to uglify a proof. This should not require any marking.</p>",
        "id": 358039940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683957635
    },
    {
        "content": "<p>Eric, I don't understand your thumb up reaction. Why should we be marking anything as \"don't uglify\"? Why do you want anything ugly in mathlib? I think we really developed a very toxic golfing culture here.</p>",
        "id": 358042357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683959016
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/3954\">!4#3954</a> with a fix.</p>",
        "id": 358042396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683959041
    },
    {
        "content": "<p>In metamath, there is a marker \"(Proof modification is discouraged.)\" which is placed on theorems where the proof itself is the point of the demonstration. This is a minority thing, and it does deserve a marking</p>",
        "id": 358043261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683959388
    },
    {
        "content": "<p>If you want something not to change you have to explicitly say so, because mathlib is aggressively refactored and people can't just know that this particular proof shows up in some lecture notes if you don't tell them</p>",
        "id": 358043509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683959471
    },
    {
        "content": "<p>It's not just about golfing. As Yury said, sometimes it is a casualty of refactoring, since the proof might need to be rewritten to accommodate a change and the person doing the rewriting might not have the same eye for beauty as you</p>",
        "id": 358043851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683959587
    },
    {
        "content": "<p>I don't think we need refactors uglifying proofs.</p>",
        "id": 358045017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683960229
    },
    {
        "content": "<p>I think that it is not reasonable to ask everyone to write proofs which are as pretty as yours at all times</p>",
        "id": 358045084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960265
    },
    {
        "content": "<p>You have to assume that the new proof is not being written with the old one as a guide</p>",
        "id": 358045130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960292
    },
    {
        "content": "<p>Then we should have some (semi-)formal guidelines on \"golf or not\".</p>",
        "id": 358045183,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683960323
    },
    {
        "content": "<p>Unless you can define prettyness such that a linter can check it this is tilting at windmills</p>",
        "id": 358045195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960336
    },
    {
        "content": "<p>or at least a relatively strict style guide requirement</p>",
        "id": 358045254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960364
    },
    {
        "content": "<p>A guideline may say, e.g., \"a golfing PR can't be merged without consent of the author of the original proof if this author is still active\".</p>",
        "id": 358045293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683960392
    },
    {
        "content": "<p>I don't like that rule, as it means that authorship allows exerting control on a proof-by-proof basis</p>",
        "id": 358045366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960454
    },
    {
        "content": "<p>I think it would be detrimental to refactors of all kinds, since you will have to hunt down who knows how many authors to make sure everything is okay with them</p>",
        "id": 358045457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960495
    },
    {
        "content": "<p>Can we make github auto mention people who previously modified these lines?</p>",
        "id": 358045604,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683960577
    },
    {
        "content": "<p>If the proof is \"this is a demonstration of the calc tactic\" then clearly we want to preserve that it is proved by calc. Most proofs are \"this thing is true\" and so that's what we preserve</p>",
        "id": 358045635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960596
    },
    {
        "content": "<p>I don't understand why anyone would need help from a guide or the original author to understand that this modification strictly deteriorated mathlib.</p>",
        "id": 358045700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683960614
    },
    {
        "content": "<p>modification does not strictly deteriorate mathlib!</p>",
        "id": 358045732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960629
    },
    {
        "content": "<p>maybe <em>this</em> one does, to you, but modifications in general clearly do not</p>",
        "id": 358045781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> If I understood this without a guide (in this and some similar situations), then I would've not dot these PRs.</p>",
        "id": 358045831,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683960671
    },
    {
        "content": "<p>Sorry, I missed a word</p>",
        "id": 358045839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683960675
    },
    {
        "content": "<p>and we need to have a more objective criterion to generalize this</p>",
        "id": 358045869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683960694
    },
    {
        "content": "<p>For what it's worth, I have a variety of strong style opinions of my own, and I don't see this example as clear-cut.</p>",
        "id": 358046058,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683960770
    },
    {
        "content": "<p>(Though I think I could be convinced)</p>",
        "id": 358046102,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683960793
    },
    {
        "content": "<p>/me is away: the kid woke up in the middle of the night<br>\nP.S.: I don't think that my proof is better, more like \"don't care about the difference\".</p>",
        "id": 358047096,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683961390
    },
    {
        "content": "<p>The marking wouldn't be \"don't uglify\" but \"this proof is used as an example in @user's [some course/talk/paper], please try to preserve its structure\"</p>",
        "id": 358061167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683967385
    },
    {
        "content": "<p>Sometimes a refactor trivializes a proof such that a 5 line \"pretty\" calc proof becomes a special case of one or two other lemmas; while I'd argue deleting the calc proof is the right thing to do in general, I think most people would be ok leaving it if there were a comment specifically requesting it.</p>",
        "id": 358061811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683967585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Uglified.20proof/near/358045017\">said</a>:</p>\n<blockquote>\n<p>I don't think we need refactors uglifying proofs.</p>\n</blockquote>\n<p>A refactor that unblocks new mathematics but uglifies a handful of proofs is probably better than no refactor at all.</p>",
        "id": 358062185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683967717
    },
    {
        "content": "<p>I agree with everyone here. Wanting to preserve the state of a specific lemma without letting anyone know within the source code is a lost cause, no matter how goodwilled the contributors are.</p>",
        "id": 358062918,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1683967984
    },
    {
        "content": "<p>I think this was a very nice <code>calc</code> proof, and I understand Patrick is sad to see it is gone.</p>",
        "id": 358063131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683968086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Uglified.20proof/near/358061167\">said</a>:</p>\n<blockquote>\n<p>The marking wouldn't be \"don't uglify\" but \"this proof is used as an example in @user's [some course/talk/paper], please try to preserve its structure\"</p>\n</blockquote>\n<p>I think this is a good idea. Having a few such comments in mathlib can only be helpful.<br>\nBecause I also understand that in the \"heat of the moment\" trying to finish a refactor, preserving the structure of some proof is not the first thing on your mind.</p>",
        "id": 358063346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683968176
    },
    {
        "content": "<p>I think the underlying question is really about calc block proofs. I don't think Patrick has any problem about replacing <code>‚®Ü x, ùìù (x, x)</code> with <code>ùìùÀ¢ (diagonal Œ±)</code> (and I'd say this is definitely a good thing), the only issue that I see with the new proof is that it explicitly uses transitivity(-like) lemmas (<code>tendsto.mono_[left, right]</code>), so it clearly falls into the set of proofs that are more readable in <code>calc</code>-form. So maybe the good rule of thumb would be that if a proof is nontrivial and uses transitivity at least twice (in the same computation), then it should use a calc block.</p>",
        "id": 358070029,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683970371
    },
    {
        "content": "<p>Note that this is orthogonal to the question of adding tags to proof that are examples in a talk/article, I can imagine changes that preserve readability but break the structure of the proof to the extent that it's not a good example anymore.</p>",
        "id": 358070461,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683970508
    },
    {
        "content": "<p>Is it even possible to write <code>calc</code> proofs about <code>tendsto</code> without unfolding <code>tendsto</code>?</p>",
        "id": 358075299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683972287
    },
    {
        "content": "<p>Or is the answer \"you're supposed to unfold <code>tendsto</code> to prove things about it\"?</p>",
        "id": 358075507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683972349
    },
    {
        "content": "<p>No you can‚Äôt indeed. I‚Äôd argue that when you‚Äôre really playing with filter inequalities anyway it looks better if everything is written as filter inequalities, but that‚Äôs debatable.</p>",
        "id": 358080986,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683974322
    },
    {
        "content": "<p>I like it very much that this is discussed.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Uglified.20proof/near/358042357\">said</a>:</p>\n<blockquote>\n<p>Why do you want anything ugly in mathlib? I think we really developed a very toxic golfing culture here.</p>\n</blockquote>\n<p>I completely agree, especially with the last sentence. Actually, I believe that this toxicity is completely involuntary, triggered by reasons already exposed and for the will of obtaining the neatest (most elegant??) term. Whenever possible, I try to code as closely as it can get to blackboard math.</p>",
        "id": 358092011,
        "sender_full_name": "Pedro S√°nchez Terraf",
        "timestamp": 1683978382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Uglified.20proof/near/358070029\">said</a>:</p>\n<blockquote>\n<p>I think the underlying question is really about calc block proofs. I don't think Patrick has any problem about replacing <code>‚®Ü x, ùìù (x, x)</code> with <code>ùìùÀ¢ (diagonal Œ±)</code> (and I'd say this is definitely a good thing)</p>\n</blockquote>\n<p>I'd also say that this is a good thing, but I'd save the <em>definitely</em>: The pen and paper math (or, better, classroom math) I know usually tends to make binding variables explicit, favoring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>‚ãÉ</mo><mi>x</mi></msub><mi>I</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcup_x I(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">‚ãÉ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> over something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚ãÉ</mo><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">g</mi><mi mathvariant=\"normal\">e</mi></mrow><mo stretchy=\"false\">(</mo><mi>I</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcup \\mathrm{range}(I)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">‚ãÉ</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">range</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 358092893,
        "sender_full_name": "Pedro S√°nchez Terraf",
        "timestamp": 1683978690
    },
    {
        "content": "<p>To finish this rant, I think Patrick and many others are doing a great job writing expository proofs in <em>Mathematics in Lean</em>, <em>TPIL</em>, and similar works. My utopistic dream would be that I could find the same coding style in a randomly chosen piece of mathlib.</p>",
        "id": 358093950,
        "sender_full_name": "Pedro S√°nchez Terraf",
        "timestamp": 1683979055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Uglified.20proof/near/358070029\">said</a>:</p>\n<blockquote>\n<p>I think the underlying question is really about calc block proofs. I don't think Patrick has any problem about replacing <code>‚®Ü x, ùìù (x, x)</code> with <code>ùìùÀ¢ (diagonal Œ±)</code> (and I'd say this is definitely a good thing), the only issue that I see with the new proof is that it explicitly uses transitivity(-like) lemmas (<code>tendsto.mono_[left, right]</code>), so it clearly falls into the set of proofs that are more readable in <code>calc</code>-form. So maybe the good rule of thumb would be that if a proof is nontrivial and uses transitivity at least twice (in the same computation), then it should use a calc block.</p>\n</blockquote>\n<p>Sure, I have nothing against <code>ùìùÀ¢</code>, it simply didn't exist when this proof was first written. And indeed in my PR this morning used it. I restored the calc proof without changing the proof term at all. The question was simply: should this proof be readable, knowing that making it readable adds exactly one line and this is an important named theorem?</p>",
        "id": 358116668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683987326
    },
    {
        "content": "<p>Patrick, what are your thoughts on the fact that your <code>calc</code> proof is relying on the defeq of <code>tendsto</code> (in the context of my comments above); should we make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto#doc\">docs4#Filter.Tendsto</a> reducible in order to mark this type of thing as <del>ok</del> encouraged?</p>",
        "id": 358123425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683989807
    },
    {
        "content": "<p>You can write <code>calc</code> proofs about <code>tendsto</code> without unfolding the definition if</p>\n<ul>\n<li>you introduce a (local) infix notation for <code>tendsto</code>. Something like <code>l ‚Üí[f] l'</code> for <code>tendsto f l l'</code></li>\n<li>you add <code>@[trans]</code> attributes (Lean 3) or <code>Trans</code> instances (Lean 4).</li>\n</ul>",
        "id": 358134281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683994094
    },
    {
        "content": "<p>The downside of this approach is that an infix notation with <code>f</code> in the middle is <strong>not</strong> intuitive.</p>",
        "id": 358134420,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683994156
    },
    {
        "content": "<p>OTOH, <code>calc</code> with <code>filter.map f _</code> is not very intuitive as well.</p>",
        "id": 358136904,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683995174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> We unfold the definition of <code>Tendsto</code> without <code>rw</code>/<code>dsimp</code> in many places.</p>",
        "id": 358137054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683995241
    },
    {
        "content": "<p>But I suggest not to change it to <code>reducible</code> in the middle of porting.</p>",
        "id": 358137090,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683995259
    },
    {
        "content": "<p>Indeed let is not change this for now.</p>",
        "id": 358137925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683995577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Uglified.20proof/near/358070029\">said</a>:</p>\n<blockquote>\n<p>maybe the good rule of thumb would be that if a proof is nontrivial and uses transitivity at least twice (in the same computation), then it should use a calc block.</p>\n</blockquote>\n<p>I am very much in favour of this rule of Anatole's. The only part I am unsure about is whether the rule should be applied here (because of the question discussed above: whether the rule applies when you need to unfold definitions to see the preconditions of the rule)</p>",
        "id": 358138719,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683995935
    },
    {
        "content": "<p>... but there are definitely many proofs in the library with no unfolding issue and repeated <code>(...).trans</code>, that's bad style!</p>",
        "id": 358138987,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683996052
    },
    {
        "content": "<p>My experience with transitivity proofs (at least in algebra) is that it's not actually very common to be able to assemble them into a nice <code>calc</code> proof; as soon as you have something like <code>mul_le_mul _ _</code> you're forced out of the calc block and back into term mode</p>",
        "id": 358139256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683996181
    },
    {
        "content": "<p>True, but <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and I should have something to help with this within the next few days ... :P</p>",
        "id": 358139502,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683996296
    },
    {
        "content": "<p>Looking forward to <code>calc++</code>!</p>",
        "id": 358140982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683996922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What do you think about an infix notation for <code>tendsto</code>? Probably, not an arrow but something like Haskell-style <code>l‚ÇÅ `tendsto f` l‚ÇÇ</code>? This way we can hide <code>map _</code> in <code>tendsto+calc</code> proofs.</p>",
        "id": 358159288,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684007112
    },
    {
        "content": "<p>And a similar question about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.MapsTo#doc\">docs4#Set.MapsTo</a>.</p>",
        "id": 358159440,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684007204
    },
    {
        "content": "<p>I would love to see \"arrow-like\" notation for <code>filter.tendsto</code>. When I first understood the notion I did a half-hearted literature search to see if I could find anything, but I didn't come up with anything; the concept is not particularly well-represented in the literature even though it's now got to the point where it feels totally natural to me.</p>",
        "id": 358162223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684009007
    },
    {
        "content": "<p>In papers we write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>‚Üí</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">f(x)\\to b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>‚Üí</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">x\\to a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>‚Å°</mo></mrow><mrow><mi>x</mi><mo>‚Üí</mo><mi>a</mi></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\lim_{x\\to a}f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">‚Üí</span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>. In both cases arrows are near the filters, not the function.</p>",
        "id": 358162511,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684009204
    },
    {
        "content": "<p>I don't understand why you want to hide map in those calc proof. For me the only advantage of <code>tendsto</code> is that it allows dot notation.</p>",
        "id": 358164633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684010601
    },
    {
        "content": "<p>Arguably <code>map</code> is the thing to be preferred given the interpretation of filters as generalized sets.</p>",
        "id": 358176762,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684020092
    },
    {
        "content": "<p>My only reason is that <code>tendsto</code> (in the form of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>‚Å°</mo></mrow><mrow><mi>x</mi><mo>‚Üí</mo><mi>a</mi></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{x\\to a}f(x)=b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">‚Üí</span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>) is something I see in every paper on analysis and <code>filter.map</code> forces a user to think about the actual definition of <code>filter.tendsto</code> in terms of filters.</p>",
        "id": 358179608,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684022687
    },
    {
        "content": "<p>Also using filters means I have to remember what direction the inequality goes and where the map goes, while tendsto makes it obvious. For formalization I would say it has dubious usefulness as a proof shortener, but it seems to have comparatively strong explanatory power</p>",
        "id": 358179791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684022872
    },
    {
        "content": "<p>especially map filters, you don't see those in the literature when you are using this kind of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>‚Å°</mo></mrow><mrow><mi>x</mi><mo>‚Üí</mo><mi>a</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\lim_{x\\to a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">‚Üí</span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> notation</p>",
        "id": 358179901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684022947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Uglified.20proof/near/358045183\">said</a>:</p>\n<blockquote>\n<p>Then we should have some (semi-)formal guidelines on \"golf or not\".</p>\n</blockquote>\n<p>The discussion has moved in the direction of \"<code>calc</code> vs non-<code>calc</code>\", but I for one would like to see a continuation of this point. I understand certain benefits of golfing -- <a href=\"https://github.com/leanprover-community/mathlib/pull/1\">#1</a> compilation speed, <a href=\"https://github.com/leanprover-community/mathlib/pull/2\">#2</a> legibility, <a href=\"https://github.com/leanprover-community/mathlib/pull/3\">#3</a> suppressing trivial/rote proofs -- but not others.</p>\n<p>In particular some golfing seems focused on saving keystrokes or reducing the number of lines of code or commands, and those don't seem valuable to me. If a more human-readable proof compiles just as fast, I'd argue that's actually better than a \"golfed\" proof that is shorter but harder for anyone but the author to understand (and therefore harder to modify if needed).</p>",
        "id": 358189077,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1684026674
    },
    {
        "content": "<p>I should say too, of course golfing can make proofs nicer and more elegant too, not just shorter or faster, and that's certainly desirable.</p>",
        "id": 358189439,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1684026839
    },
    {
        "content": "<p>Mario, it's (I think) immediately obvious when you think of a filter as a generalized set. To be clear, I'm not saying we should get rid of tendsto. I'll have another brief comment on this later when I'm not on mobile.</p>",
        "id": 358189659,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684026920
    },
    {
        "content": "<p>I think I could more likely than not guess the correct order, but knowing that it is flipped only makes things worse</p>",
        "id": 358189785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684026967
    },
    {
        "content": "<p>I think to understand when golfing is good, we need a different metric than \"number of characters\".  For me, one part of the metric is \"number of lemmas mentioned by name\".  The proof <code>ring</code> is better than the proof <code>rw [add_comm]</code> not because it's shorter but because it's more conceptual.</p>",
        "id": 358189935,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684027054
    },
    {
        "content": "<p>Just don't think of the order in terms of the definition. Think of it only in terms of the interpretation as generalized sets.</p>",
        "id": 358190045,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684027095
    },
    {
        "content": "<p>(I wrote a large part of the initial theory of topological spaces back in the early days, so I should know, and I genuinely appreciated the neat algebraic proofs it produces, but there are a lot of parity issues that I would have to look back at the definition to recall)</p>",
        "id": 358190062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684027106
    },
    {
        "content": "<p>not just le but also map and comap, which one is using preimages and which one uses images</p>",
        "id": 358190165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684027163
    },
    {
        "content": "<p>Heather, is <code>ring</code> slower than <code>rw [add_comm]</code>? That's a decent example of where I might write <code>ring</code> when developing the proof and then golf it to <code>rw [add_comm, ...]</code> later, and I agree the latter is uglier and less clear, but I had always figured it was faster to compile.</p>",
        "id": 358190177,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1684027171
    },
    {
        "content": "<p>I hope that with Lean 4 we don't need to care about this.  I want a world in which <code>rw [add_comm]</code> is <em>never</em> used when <code>ring</code> is available.</p>",
        "id": 358190368,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684027253
    },
    {
        "content": "<p>TBH I don't find <code>rw [add_comm]</code> less clear than <code>ring</code> plus a rather involved type ascription</p>",
        "id": 358190533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684027332
    },
    {
        "content": "<p><code>rw</code> is a non-finishing tactic, which gives it certain advantages over <code>ring</code> which requires the proof around it to adjust to put it in terminal position</p>",
        "id": 358190678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684027420
    },
    {
        "content": "<p>Totally agree, I'm not a fan of the <code>rw [(by ring : x + 3 * (z + x) = 4 * x + 3 * z)]</code> one sometimes sees, but that's a separate discussion ...</p>",
        "id": 358190687,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684027426
    },
    {
        "content": "<p>(to be clear, <code>calc</code> is also a rather involved type ascription as far as I am concerned)</p>",
        "id": 358190791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684027463
    },
    {
        "content": "<p>Interesting, I have used that <code>rw [(by ring : ...)]</code> form many times, I don't know how else to arrange something in a desired form in a non-terminal step.</p>",
        "id": 358190820,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1684027482
    },
    {
        "content": "<p>I think there will always be grey areas and differences of opinion on what is nicest (not to mention how much to emphasize niceness over efficiency). Still, I like the idea of trying to formulate some guiding vision for mathlib.</p>",
        "id": 358191073,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1684027609
    },
    {
        "content": "<p>Another thought I've had is: could there be a nice way to record two proofs of the same proposition in mathlib -- one possibly very slow and inefficient, but easy to read; and a second one that is allowed to be golfed into oblivion? (For example a proof with a very slow terminal <code>simp</code> or <code>refl</code>that can be extended into an efficient but hard to read <code>simp only [very long list]</code>, or even just a storage of the generated proof term).</p>",
        "id": 358191316,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1684027773
    },
    {
        "content": "<p>My preferred style is something like, lots of clean-up steps upfront, then all the algebra at the end in a single <code>ring</code>, <code>polyrith</code>, <code>linarith</code> or similar.  Of course that's not always possible!  But often a proof with several <code>ring</code> can become a proof with one terminal <code>ring</code>/<code>polyrith</code>/<code>linarith</code> if you rearrange it carefully.</p>",
        "id": 358191325,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684027783
    },
    {
        "content": "<p>My other preferred style is whatever <code>calc</code> you would naturally write on paper ... this requires less in the way of mental gymnastics to Lean-ify.  And regarding this, may I advertise<br>\n<a href=\"#narrow/stream/116395-maths/topic/New.20tactic.20for.20.22relational.20congruence.22\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/New.20tactic.20for.20.22relational.20congruence.22</a><br>\n? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 358191506,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684027888
    },
    {
        "content": "<p>I would also like to be able to support multiple proofs of the same statement. The main drawback is that people will want to make sure both proofs compile in the face of refactors etc, which means that you would basically just be making mathlib slower, and this excludes really slow proof strategies.</p>",
        "id": 358191519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684027902
    },
    {
        "content": "<p>I'm not really sure that lean proofs are the appropriate level to target when you are trying to construct a good <em>demonstration</em>, though. We should be using dedicated tools for that, like Patrick's informalizer display</p>",
        "id": 358191664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684028001
    },
    {
        "content": "<p>IMO mathlib should be optimized for reasonable compile time and easy refactorability as primary goals, and readability is only a tertiary goal (mainly as it affects maintainability and refactorability).</p>",
        "id": 358191776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684028073
    },
    {
        "content": "<p>It should of course be usable as a <em>library</em> though, meaning that it should be copiously documented at the top level</p>",
        "id": 358191857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684028156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Uglified.20proof/near/358189935\">said</a>:</p>\n<blockquote>\n<p>The proof <code>ring</code> is better than the proof <code>rw [add_comm]</code> not because it's shorter but because it's more conceptual.</p>\n</blockquote>\n<p>The problem with this approach is that I can no longer change the theorem from assuming <code>comm_ring R</code> to assuming <code>ring R</code> or <code>add_comm_group R</code> without changing back to the <code>rw</code> proof. So using <code>ring</code> in proofs makes generalization refactors harder.</p>",
        "id": 358214787,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684050688
    },
    {
        "content": "<p>... especially because it's not just a matter of turning the <code>ring</code> back into a <code>rw</code>, since <span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span>  now has tools that detect whether some typeclasses can be weakened, and <code>ring</code> might trick them into thinking they can't.</p>",
        "id": 358217071,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1684052172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Uglified.20proof/near/358191664\">said</a>:</p>\n<blockquote>\n<p>I'm not really sure that lean proofs are the appropriate level to target when you are trying to construct a good <em>demonstration</em>, though. We should be using dedicated tools for that, like Patrick's informalizer display</p>\n</blockquote>\n<p>My hope is indeed that the output of that informalizer will be the readability target eventually. A proof that doesn't look good once informalized should be considered as bad. We are still far from ready to run this on mathlib unfortunately. I am very busy with administration and teaching as usual and lots of people, very often myself,  keep distracting Kyle by asking for meta-programming help.</p>",
        "id": 358224005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684055904
    }
]