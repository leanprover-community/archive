[
    {
        "content": "<p><code>Algebra R A</code> is the typeclass to designate a preferred RingHom from a CommSemiring R to a Semiring A whose image lies in the center. How can we specify a preferred RingHom whose image doesn't necessarily lie in the center using existing mathlib typeclasses, even better, for not necessarily commutative Semiring R?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Hint 1</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The typeclasses do not include the data of a map from R to A.</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Hint 2</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Two typeclasses are enough.</p>\n</div></div>",
        "id": 407347711,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702342789
    },
    {
        "content": "<p>Isn't the answer to this in the docs for Algebra?</p>",
        "id": 407351850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702344771
    },
    {
        "content": "<p>Indeed, though not very explicitly. That's a better hint than my Hint 3, so I removed it.<br>\nHere's another puzzle that eventually led me to discover this:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Puzzle</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Let B be an A-module and let C be a B-module and A-module such that C/B/A is a tower. Suppose C is free as a B-module, so there's a B-LinearEquiv between <code>Finsupp I B</code> and <code>C</code> for some indexing type <code>I</code>. Show that any such LinearEquiv must also be an A-LinearEquiv. (When <code>I</code> is nonempty we deduce that B/B/A is also a tower.)</p>\n</div></div>",
        "id": 407354827,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702346451
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Puzzle 1 (statement formalized)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import Mathlib.Algebra.Module.Basic</p>\n<p>example {R A} [Semiring R] [Semiring A] :<br>\n    (R →+* A) ≃ { inst : Module R A // IsScalarTower R A A } := sorry</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Puzzle 2 (statement formalized)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import Mathlib.LinearAlgebra.Basis</p>\n<p>example {ι R S M} [Semiring R] [Semiring S] [AddCommMonoid M]<br>\n    [Module R S] [Module R M] [Module S M] [IsScalarTower R S M]<br>\n    (f : M ≃ₗ[S] ι →₀ S) : IsLinearMap R f := sorry</p>\n</div></div>",
        "id": 407357275,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702347474
    },
    {
        "content": "<p>Do you know if this (the first puzzle) can be found in the mathematical literature? My impression is that one of the typeclasses involved is the mathlib community's invention.</p>",
        "id": 407360918,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702348467
    },
    {
        "content": "<p>I've minimized Puzzle 2 down to the statement that M/S/R being a tower implies that any S-linear map from S to M is also R-linear.</p>",
        "id": 407873607,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702528829
    },
    {
        "content": "<p>Aren't you just describing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.restrictScalars#doc\">docs#LinearMap.restrictScalars</a> ?</p>",
        "id": 407903277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702540458
    },
    {
        "content": "<p>You don't a priori have the CompatibleSMul condition. Proving the condition is exactly (minimized) Puzzle 2.</p>",
        "id": 407907725,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702542452
    },
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/9046\">#9046</a></p>",
        "id": 407910749,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702543709
    },
    {
        "content": "<blockquote>\n<p>Aren't you just describing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.restrictScalars#doc\">docs#LinearMap.restrictScalars</a> ?</p>\n</blockquote>\n<p>This is a good point though, I should be adding CompatibleSMul instance rather than IsLinearMap lemmas ...</p>",
        "id": 407913307,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702544664
    }
]