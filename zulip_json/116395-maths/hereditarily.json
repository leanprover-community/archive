[
    {
        "content": "<p>Thinking about the newly added <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set.hereditarily\">docs#Set.hereditarily</a>, it occurred to me that it should also have applications in game theory as well. Most notably, short games are hereditarily finite, and impartial games are hereditarily equal to their negatives.</p>",
        "id": 326535715,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1675847369
    },
    {
        "content": "<p>I was going to suggest this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hereditarily'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_well_founded</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">hereditarily'</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">is_well_founded.to_has_well_founded</span> <span class=\"n\">r</span><span class=\"o\">],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>but for some reason I get an app_builder exception.</p>",
        "id": 326540525,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1675848915
    },
    {
        "content": "<p>Unfortunate that this typeclass doesn't seem to interact well with the equation compiler.</p>",
        "id": 326540830,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1675849006
    },
    {
        "content": "<p>Oops forgot to ping <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span></p>",
        "id": 326935332,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1675984966
    },
    {
        "content": "<p>Actually I'm not sure <code>hereditarily</code> is necessary, given that it could be defined nonrecursively as a forall using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.refl_trans_gen\">docs#relation.refl_trans_gen</a>. For pgames we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.subsequent\">docs#pgame.subsequent</a> defined in terms of trans_gen, so there's even less need to use <code>hereditarily</code>.</p>",
        "id": 326941627,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675988696
    },
    {
        "content": "<p>We can change the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set.hereditarily\">docs#Set.hereditarily</a> if that's better.</p>",
        "id": 326974314,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1676010983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/hereditarily/near/326941627\">said</a>:</p>\n<blockquote>\n<p>Actually I'm not sure <code>hereditarily</code> is necessary, given that it could be defined nonrecursively as a forall using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.refl_trans_gen\">docs#relation.refl_trans_gen</a>.</p>\n</blockquote>\n<p>I think having both the inductive definition and the equivalence with the transitive closure is good.</p>",
        "id": 327130104,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1676057166
    },
    {
        "content": "<p>Same applies with <code>pgame</code>s</p>",
        "id": 327130195,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1676057198
    },
    {
        "content": "<p>Really, if there's enough of a need for it, we can also create a named relation for the reflexive transitive closure of <code>∈</code>. I wouldn't ditch <code>hereditarily</code> even then though. If there's more than one canonical way to write something down, that often is good justification for making a definition.</p>",
        "id": 327130667,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1676057403
    },
    {
        "content": "<p>That argument only works if we add the lemma connecting the <code>refl_trans_gen</code> spelling to the new definition :)</p>",
        "id": 327131250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676057625
    },
    {
        "content": "<p>Oh of course, that's part of the plan</p>",
        "id": 327131271,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1676057635
    },
    {
        "content": "<p>Wait, I think I have a better idea.</p>",
        "id": 327131545,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1676057751
    },
    {
        "content": "<p>We could add an inductive lemma on <code>refl_trans_gen</code> itself</p>",
        "id": 327131623,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1676057773
    },
    {
        "content": "<p>Since after all, <code>refl_trans_gen</code> applies more generally than for just well-founded relations</p>",
        "id": 327131755,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1676057821
    },
    {
        "content": "<p>...oh wait, the inductive lemma in question would just be the induction principle for <code>refl_trans_gen</code></p>",
        "id": 327132275,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1676058024
    },
    {
        "content": "<p>Yeah... Maybe we don't need <code>hereditarily</code> at all</p>",
        "id": 327132423,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1676058070
    },
    {
        "content": "<p>I just realized</p>",
        "id": 338577563,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677588397
    },
    {
        "content": "<p>\"Hereditarily transitive\" is too strong of a condition</p>",
        "id": 338577642,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677588415
    },
    {
        "content": "<p>A transitive set of transitive sets is already an ordinal</p>",
        "id": 338577677,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677588422
    },
    {
        "content": "<p>Since \"hereditarily p\" for a transitive set is exactly the same as \"p for all members\"</p>",
        "id": 338578230,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677588575
    },
    {
        "content": "<p>I proved it in <a href=\"https://github.com/leanprover-community/mathlib/pull/18329\">#18329</a> as <code>Set.is_ordinal_iff_mem_is_transitive</code></p>",
        "id": 338582622,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1677589809
    },
    {
        "content": "<p>I see</p>",
        "id": 338582740,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677589858
    },
    {
        "content": "<p>Surely that should be the definition instead, then? It should be strictly easier to prove</p>",
        "id": 338582829,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677589881
    },
    {
        "content": "<p>But then, notice the definition from my PR is quite simple to prove for a transitive set of transitive sets</p>",
        "id": 338582912,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677589912
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_ordinal_of_transitive_of_mem_transitive</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x.is_transitive</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y.is_transitive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.is_ordinal</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">hyz</span> <span class=\"n\">hzw</span> <span class=\"n\">hwx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">w</span> <span class=\"n\">hwx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subset_of_mem</span> <span class=\"n\">hzw</span> <span class=\"n\">hyz</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 338583113,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677589968
    },
    {
        "content": "<p>Not to be confrontational, but I'd rather we go with my definition for two reasons:<br>\na. It seems like the simplest statement to prove among all the equivalences - a transitive set transitive under <code>∈</code>, a transitive set of transitive sets, and a hereditarily transitive set, are all easily proven to satisfy this; the converses aren't immediate<br>\nb. I've already gotten a lot done with it</p>",
        "id": 338585536,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677590698
    },
    {
        "content": "<p>For reference, here's the equivalent statements (I know of):</p>\n<ol>\n<li>A transitive set <code>x</code> where <code>y ∈ z ∈ w ∈ x</code> implies <code>y ∈ w</code> (my definition)</li>\n<li>A transitive set, transitive under <code>∈</code></li>\n<li>A transitive set, trichotomous under <code>∈</code></li>\n<li>A transitive set, strictly totally ordered under <code>∈</code></li>\n<li>A transitive set, well-ordered under <code>∈</code></li>\n<li>A transitive set of transitive sets</li>\n<li>A hereditarily transitive set</li>\n</ol>",
        "id": 338586303,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677590920
    },
    {
        "content": "<p>5 is the Wikipedia definition, but is far too strong (as seen by all the other statements). Listing all the immediate (one-line) implications:</p>\n<ul>\n<li>1 ↔ 2</li>\n<li>5 → 4 → 2 or 3 </li>\n<li>7 → 6 → 2</li>\n</ul>",
        "id": 338586452,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677590961
    },
    {
        "content": "<p>Takeuti &amp; Zaring use 3, but I imagine proving <code>∀ (y ∈ x) (z ∈ x), y ∈ z ∨ y = z ∨ z ∈ y</code> would be somewhat cumbersome, which only leaves 1 and 2</p>",
        "id": 338586712,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677591045
    },
    {
        "content": "<p>That's ok, I don't strongly request using my definition.</p>",
        "id": 338587322,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1677591225
    },
    {
        "content": "<p>And notice that 1 is just 2 without redundant conditions, since the transitivity condition gives you <code>y ∈ x</code>, <code>z ∈ x</code>, <code>w ∈ x</code> from <code>y ∈ z ∈ w ∈ x</code></p>",
        "id": 338587346,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677591231
    },
    {
        "content": "<p>Oh alright</p>",
        "id": 338587377,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677591241
    },
    {
        "content": "<p>Again, hope I'm not coming off in a negative way, I've just been thinking about this for a while now</p>",
        "id": 338587467,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677591256
    },
    {
        "content": "<p>On this topic, I just opened a new PR just containing the definition and easiest lemmas from my other larger PR</p>",
        "id": 338589328,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677591695
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18513\">#18513</a></p>",
        "id": 338589334,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677591697
    },
    {
        "content": "<p>Should have done this much earlier, I apologize</p>",
        "id": 338589350,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677591703
    },
    {
        "content": "<p>This doesn't depend on the <code>sym2.game_add</code> stuff or anything like that</p>",
        "id": 338589386,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677591712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/hereditarily/near/338582829\">said</a>:</p>\n<blockquote>\n<p>Surely that should be the definition instead, then? It should be strictly easier to prove</p>\n</blockquote>\n<p>It is extremely rare to have to prove that a random set is an ordinal. Most of the time you get ordinals out of very general constructions which are always ordinal-producing by construction. So I don't see this as a strong argument - the definition of ordinal should be almost completely irrelevant because it is so heavily dependent on its robust API</p>",
        "id": 338678260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677613888
    },
    {
        "content": "<p>In such a situation, I usually bias toward short definitions</p>",
        "id": 338678597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677613983
    },
    {
        "content": "<p>I think our definition should still make the least amount of assumptions possible.</p>",
        "id": 338809056,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677670042
    },
    {
        "content": "<p>And I think the definition I've went with also meets this criterion</p>",
        "id": 338809197,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677670078
    }
]