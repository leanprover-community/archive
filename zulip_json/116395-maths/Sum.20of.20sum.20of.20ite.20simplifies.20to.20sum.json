[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n<span class=\"c1\">-- import RootOfUnityExponentialSum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">asymptotics</span> <span class=\"n\">real</span> <span class=\"n\">normed_space</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-----------</span>\n<span class=\"c1\">-- This section is properly defined without any sorry elsewhere.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ruesDiff</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffMPeriodic2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-----------</span>\n<span class=\"c1\">-- The following needs help.</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffArgumentSumRule4</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- The following is example code for the case m=0. I do not understand it well enough to generalize it.</span>\n<span class=\"c1\">-- Help received from https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Diagonal.20sum.20simplification.20request.2E</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">diagonalSumSimp2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">z₀</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">z₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.exists_eq_succ_of_ne_zero</span> <span class=\"n\">h.ne'</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k.val</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">l.val</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_zmod_eq_zero_iff_dvd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">neg_add'</span><span class=\"o\">,</span> <span class=\"n\">int.cast_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">eq_neg_iff_add_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">l</span><span class=\"o\">],</span>\n    <span class=\"n\">push_cast</span> <span class=\"o\">[</span><span class=\"n\">zmod.nat_cast_zmod_val</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_range</span><span class=\"o\">,</span> <span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">sum_ite_eq'</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">k</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">ruesDiffMPeriodic2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">z₁</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_neg</span><span class=\"o\">,</span> <span class=\"n\">nat.add</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.mod_eq_of_lt</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_sub</span><span class=\"o\">],</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">k.2.le</span><span class=\"o\">,</span> <span class=\"n\">tsub_lt_self</span> <span class=\"n\">n.succ_pos</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.2</span> <span class=\"bp\">$</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">fin.coe_eq_coe</span> <span class=\"n\">k</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hk</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 368719762,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1687479770
    },
    {
        "content": "<p>Let me repeat my question: why don't you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pnat#doc\">docs#pnat</a> for <code>n</code> and <code>zmod n</code> for <code>k</code> in <code>ruesDiff n k z</code>?</p>",
        "id": 368726781,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687482865
    },
    {
        "content": "<p>Then you write your \"divisibility\" conditions as equalities in <code>zmod n</code></p>",
        "id": 368726923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687482942
    },
    {
        "content": "<p>I think you are right that using pnat would be better, and probably right about zmod being better. I just built my project in an inefficient way, using a very small subset of mathlib because that's all I know thus far.</p>",
        "id": 368729998,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1687484422
    },
    {
        "content": "<p>What's your math background?</p>",
        "id": 368736593,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687487933
    },
    {
        "content": "<p>I studied 2.5 years undergrad, double majoring in Mathematics and Computer Science, before I dropped out of college. Math has been a relatively consistent hobby for me. I'm going back to college but will focus on Computer Science this time.</p>",
        "id": 368740891,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1687490563
    },
    {
        "content": "<p>I just tried converting all the appropriate nat variables to pnat variables, but it is surprisingly difficult to change everything without breaking proofs. I plan to eventually be coding in Lean4, at which point I plan to rewrite my RootOfUnityExponentialSum project with PNat variables.</p>",
        "id": 368757089,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1687498502
    }
]