[
    {
        "content": "<p>According to <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C06_Structures.html#defining-structures\">MIL</a> and <a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/master/MIL/C06_Structures/S01_Structures.lean#L6\">its source file</a> midpoint is noncomputable.  But manual claims <code>More interestingly, we can compute the midpoint of two points on the simplex. </code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">MIL.Common</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">StandardSimplex</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">NonNeg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">V</span> <span class=\"n\">i</span>\n  <span class=\"n\">sum_eq_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">StandardSimplex</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">midpoint</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">StandardSimplex</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StandardSimplex</span> <span class=\"n\">n</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a.V</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">b.V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"n\">NonNeg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span>\n    <span class=\"n\">apply</span> <span class=\"n\">div_nonneg</span>\n    <span class=\"bp\">·</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">a.NonNeg</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">b.NonNeg</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n  <span class=\"n\">sum_eq_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.sum_mul</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_add_distrib</span><span class=\"o\">,</span>\n      <span class=\"n\">a.sum_eq_one</span><span class=\"o\">,</span> <span class=\"n\">b.sum_eq_one</span><span class=\"o\">]</span>\n    <span class=\"n\">field_simp</span>\n</code></pre></div>\n<p>I can apply midpoint to Simpex:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">xx</span> <span class=\"o\">:</span> <span class=\"n\">StandardSimplex</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">yy</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">midpoint</span> <span class=\"mi\">3</span> <span class=\"n\">xx</span> <span class=\"n\">xx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But can not get actually value of midpint.<br>\nMay be it is due <code>V : Fin n → ℝ</code>.</p>\n<p>My question is \"How to actually compute midpoint?\".  Or what MIL mean by <code>we can compute</code>?</p>\n<p>My specific question is how to get midpoint of two points: 1 0 0 and 0 1 0, and get midpoints x, y and z values.</p>",
        "id": 396774311,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697393691
    },
    {
        "content": "<p>MIL means computing in the sense of defining here. We should probably change that wording. Nothing involving real numbers will be computable in the sense of software engineering.</p>",
        "id": 396774637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697394035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20actually.20compute.20midpoint/near/396774637\">said</a>:</p>\n<blockquote>\n<p>MIL means computing in the sense of defining here. We should probably change that wording. Nothing involving real numbers will be computable in the sense of software engineering.</p>\n</blockquote>\n<p>According to advice, I changed <code>V : Fin n → ℝ</code> to <code>V : Fin n → ℚ</code>, and expression <code>#check V (midpoint 3 xx xx) yy</code> has type ℚ. </p>\n<p>Sorry for straight question, but what I should read to get midpoint of two points: 1 0 0 and 0 1 0, and get midpoints x, y and z values?</p>",
        "id": 396774943,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697394392
    },
    {
        "content": "<p>Use <code>#eval</code> to see the results of computations, not <code>#check</code>, which just tells you the type.</p>",
        "id": 396776778,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697396397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20actually.20compute.20midpoint/near/396776778\">said</a>:</p>\n<blockquote>\n<p>Use <code>#eval</code> to see the results of computations, not <code>#check</code>, which just tells you the type.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">xx</span> <span class=\"o\">:</span> <span class=\"n\">StandardSimplex</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">yy</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">midpoint</span> <span class=\"mi\">3</span> <span class=\"n\">xx</span> <span class=\"n\">xx</span><span class=\"o\">)</span> <span class=\"n\">yy</span>\n</code></pre></div>\n<p>gives me <code>(kernel) declaration has free variables '_eval'</code></p>",
        "id": 396781012,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697401343
    },
    {
        "content": "<p>That means \"this isn't a concrete number so how can I eval it?\"</p>",
        "id": 396783367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697404202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"657412\">@Dmitry Polyakov</span>, could you sketch what sort of answer you are hoping to see?</p>",
        "id": 396878403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697454305
    },
    {
        "content": "<p>(Don't worry about Lean syntax.)</p>",
        "id": 396878462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697454322
    },
    {
        "content": "<p>Yes -- what do you want the answer to be? You do understand that lean is a theorem prover, not a computer algebra system?</p>",
        "id": 396881556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697455551
    },
    {
        "content": "<p>Are you maybe looing for <code>#simp [midpoint] (midpoint 3 xx xx).V</code>?</p>",
        "id": 396883991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697456482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20actually.20compute.20midpoint/near/396881556\">said</a>:</p>\n<blockquote>\n<p>Yes -- what do you want the answer to be? You do understand that lean is a theorem prover, not a computer algebra system?</p>\n</blockquote>\n<p>Lets p1 is a 3-dimension point with fields x=1, y=0, z=0.<br>\nLets p2 is a 3-dimension point with fields x=0, y=1, z=0.</p>\n<p>All what I want is to get object with fields x=0.5, y=0.5, z=0 somehow using general <code>StandardSimplex</code> (not special structure only for 3-dimension points) and midpoint function defined on it structure.</p>\n<p>First of all, I don't understand how to define \"points\" i.e. can I create instance of StandardSimplex? I can do it with Point easily like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"n\">Point.mk</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"n\">Point.mk</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">midpoint1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"n\">b.x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a.y</span> <span class=\"bp\">+</span> <span class=\"n\">b.y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a.z</span> <span class=\"bp\">+</span> <span class=\"n\">b.z</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">midpoint1</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"c1\">-- or get .y/.z</span>\n</code></pre></div>\n<p>May be StandardSimplex is rather \"theoretical\" structure, and therefore I can not work with it like with any other <code>computable</code> structure?</p>",
        "id": 396896877,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697461074
    },
    {
        "content": "<blockquote>\n<p>First of all, I don't understand how to define \"points\" i.e. can I create instance of StandardSimplex? I can do it with Point easily like this:</p>\n</blockquote>\n<p>You can use <code>![]</code> notation, as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myPointInSimplex</span> <span class=\"o\">:</span> <span class=\"n\">StandardSimplex</span> <span class=\"mi\">3</span> <span class=\"n\">where</span>\n   <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n   <span class=\"n\">NonNeg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n   <span class=\"n\">sum_eq_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396925970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697469457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20actually.20compute.20midpoint/near/396925970\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>First of all, I don't understand how to define \"points\" i.e. can I create instance of StandardSimplex? I can do it with Point easily like this:</p>\n</blockquote>\n<p>You can use <code>![]</code> notation, as</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myPointInSimplex</span> <span class=\"o\">:</span> <span class=\"n\">StandardSimplex</span> <span class=\"mi\">3</span> <span class=\"n\">where</span>\n   <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n   <span class=\"n\">NonNeg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n   <span class=\"n\">sum_eq_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you very much!  As far as I understand, every time when I construct instance I must prove NonNeg and sum_eq_one constrains? It is tedious to do it every time.</p>",
        "id": 396953935,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697480033
    },
    {
        "content": "<p>You should be able to find a pretty short tactic you can just copy paste</p>",
        "id": 396967761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697485683
    },
    {
        "content": "<p>You have to prove it every time, because the reason it is true changes every time depending on how you built it; especially if you start introducing other variables</p>",
        "id": 396967906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697485752
    },
    {
        "content": "<p>If you use it a lot with numerical  values then you can use <code>norm_num</code> as a discharger.</p>",
        "id": 396968869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697486174
    },
    {
        "content": "<p>To add a pinch of salt to what Eric and Patrick wrote: your type <code>StandardSimplex 3</code> consists of 3 real numbers which are nonnegative and which add to 1; so it is natural that Lean expects you to provide 3 real numbers plus the proof that they are nonnegative and add to 1. <br>\nWhat Eric suggests is that most of the time, the proof would be similar, if not identical, if you use appropriate tactics.<br>\nPatrick suggests that the <code>norm_num</code> tactic (which is fairly efficient on such computations) will work most of the time.<br>\nTo prove <code>sum_eq_one</code>, <code>by norm_num</code> should work; to prove <code>NonNeg</code>, <code>intro n; by norm_num</code> should work.<br>\n(I couldn't test because the notation <code>![…]</code> does not seem to work on my playground.)</p>",
        "id": 396973640,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697488526
    },
    {
        "content": "<p>You need to import the file that defines <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.vecNotation#doc\">docs#Matrix.vecNotation</a> to make that notation work</p>",
        "id": 396977231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697490347
    },
    {
        "content": "<p>(my suggestion does not work; actually, I do not know how, given <code>i : Fin n</code> (for some explicit integer <code>n</code>), construct <code>n</code> distinct goals in each of which <code>i </code> has a given value).</p>",
        "id": 396978433,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697490973
    },
    {
        "content": "<p><code>fin_cases</code></p>",
        "id": 396978638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697491098
    },
    {
        "content": "<p>You can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">NonNeg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 396978743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697491167
    },
    {
        "content": "<p>I was not able to get <code>fin_cases</code> to work as an auto-param, since auto-params apparently do not allow identifiers.</p>",
        "id": 396978831,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697491204
    },
    {
        "content": "<p>I think we're probably missing a lemma that says <code>0 ≤ cons x xs \\iff 0 ≤ x \\and 0 ≤ xs</code></p>",
        "id": 396978912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697491256
    },
    {
        "content": "<p>(and for <code>cons x xs ≤ cons y ys</code>)</p>",
        "id": 396978976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697491291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"657412\">@Dmitry Polyakov</span>, if you're interested in contributing to mathlib, that might be a straightforward first contribution!</p>",
        "id": 396979084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697491345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20actually.20compute.20midpoint/near/396979084\">said</a>:</p>\n<blockquote>\n<p>if you're interested in contributing to mathlib, that might be a straightforward first contribution!</p>\n</blockquote>\n<p>I have tried to put:<br>\n<code>theorem lemma1 : 0 ≤ cons x p ↔ 0 ≤ x ∧ 0 ≤ p := sorry</code></p>\n<p>Somewhere after <code>cons</code> definition <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Fin/Tuple/Basic.lean#L68\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Fin/Tuple/Basic.lean#L68</a></p>\n<p>But Lean told me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">LE</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397035338,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697523214
    },
    {
        "content": "<p>That says \"a certain space of functions doesn't have a &lt;= defined on it so what do you mean by &lt;=?\"</p>",
        "id": 397038892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697525032
    },
    {
        "content": "<p>If you adopt best practice here, by posting fully working lean code which others can run to see the same error (a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>), rather than just posting error messages, then it will be very easy for the community to give a much more helpful answer.</p>",
        "id": 397039284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697525176
    },
    {
        "content": "<p>In this case building a mwe is slightly harder than the usual \"this exercise didn't work\" problem because the edit is happening within a mathlib file</p>",
        "id": 397041193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697525985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20actually.20compute.20midpoint/near/397039284\">said</a>:</p>\n<blockquote>\n<p>If you adopt best practice here, by posting fully working lean code which others can run to see the same error (a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>), rather than just posting error messages, then it will be very easy for the community to give a much more helpful answer.</p>\n</blockquote>\n<p>Sorry, this is mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Pi.Lex</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Intervals.Basic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">align_import</span> <span class=\"n\">data.fin.tuple.basic</span> <span class=\"k\">from</span> <span class=\"s2\">\"leanprover-community/mathlib\"</span><span class=\"bp\">@</span><span class=\"s2\">\"ef997baa41b5c428be3fb50089a7139bf4ee886b\"</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Fin</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Tuple</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Adding an element at the beginning of an `n`-tuple, to get an `n+1`-tuple. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"n\">Fin.cases</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">j</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">fin.cons</span> <span class=\"n\">Fin.cons</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lemma1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 397043061,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697526650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20actually.20compute.20midpoint/near/396978912\">said</a>:</p>\n<blockquote>\n<p>I think we're probably missing a lemma that says <code>0 ≤ cons x xs \\iff 0 ≤ x \\and 0 ≤ xs</code></p>\n</blockquote>\n<p>By <code>cons x xs =&gt; 0</code> you mean <code>length of vector (cons x xs) =&gt; 0</code>?</p>",
        "id": 397043275,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697526749
    },
    {
        "content": "<p>No, I meant what I said :). You're missing a typeclass assumption; I think <code>[∀ i, LE (α i)]</code> might suffice</p>",
        "id": 397058955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697532408
    },
    {
        "content": "<p>(in your original example you have this because <code>α i = real</code>)</p>",
        "id": 397059028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697532437
    },
    {
        "content": "<p>(in your original example you have this because <code>α i = real</code>)</p>",
        "id": 397059115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697532468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20actually.20compute.20midpoint/near/397058955\">said</a>:</p>\n<blockquote>\n<p>No, I meant what I said :). You're missing a typeclass assumption; I think <code>[∀ i, LE (α i)]</code> might suffice</p>\n</blockquote>\n<p><code>[∀ i, LE (α i)]</code> works quite well with lemma2 (may be because of <code>cons x₀ xs</code> and <code>cons y₀ ys</code> are objects of the same type), but 0 is not instance of vector.  To be honest I don't know how to apply <code>[∀ i, LE (α i)]</code> only for right side:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"n\">y₀</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"n\">Fin.cases</span> <span class=\"n\">x₀</span> <span class=\"n\">xs</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lemma1</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">cons</span> <span class=\"n\">x₀</span> <span class=\"n\">xs</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x₀</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lemma2</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">cons</span> <span class=\"n\">x₀</span> <span class=\"n\">xs</span> <span class=\"bp\">≤</span> <span class=\"n\">cons</span> <span class=\"n\">y₀</span> <span class=\"n\">ys</span> <span class=\"bp\">↔</span> <span class=\"n\">x₀</span> <span class=\"bp\">≤</span> <span class=\"n\">y₀</span> <span class=\"bp\">∧</span> <span class=\"n\">xs</span> <span class=\"bp\">≤</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thank you for patient.</p>",
        "id": 397071332,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697536641
    },
    {
        "content": "<p>Adding <code>[∀ i, Zero (α i)]</code> will help</p>",
        "id": 397078412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697538778
    },
    {
        "content": "<p>You really want this for functions alpha to a general Type? Not the reals (which have got a huge amount of extra inbuilt structure)?</p>",
        "id": 397100879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697546731
    },
    {
        "content": "<p>The issue with your code is that <code>0 ≤ cons x₀ xs</code> is never going to work because in this generality Lean has no idea what <code>0</code> or <code>≤</code> mean. Note that even if you do write <code>[∀ i, LE (α i)]</code> then all this means is that \"<code>≤</code> means something\" -- it doesn't mean that it obeys any axioms like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x\\leq x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> or anything.</p>",
        "id": 397102791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697547343
    },
    {
        "content": "<p>Kevin, this theorem doesn't need any axioms!</p>",
        "id": 397105169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697548106
    },
    {
        "content": "<p>All it needs is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\le y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>i</mi><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\forall i, x_i \\le y_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mn>0</mn><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0_i = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, and <code>[∀ i, LE (α i)]</code> and <code>[∀ i, Zero (α i)]</code> make that true!</p>",
        "id": 397105416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697548189
    },
    {
        "content": "<p>I was anticipating the next question.</p>",
        "id": 397131187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697555704
    },
    {
        "content": "<p>i promise i will prove it.</p>",
        "id": 397134204,
        "sender_full_name": "Dmitry Polyakov",
        "timestamp": 1697556491
    }
]