[
    {
        "content": "<p>Hi, I am trying to prove that the sum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>p</mi><mo>∣</mo><mi>n</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>p</mi><mo>&lt;</mo><mi>z</mi></mrow></msub><msup><mi>n</mi><mrow><mo>−</mo><mi>δ</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">S = \\sum_{n, p \\mid n \\implies p &lt; z} n^{-\\delta}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3238em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mspace mtight\" style=\"margin-right:0.3253em;\"></span><span class=\"mrel mtight\">⟹</span><span class=\"mspace mtight\" style=\"margin-right:0.3253em;\"></span><span class=\"mord mathnormal mtight\">p</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span></span></span></span></span></span></span></span></span> is summable for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\delta &gt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. This is true because it is equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><msub><mo>∏</mo><mrow><mi>p</mi><mo>&lt;</mo><mi>z</mi></mrow></msub><mrow><mo fence=\"true\">(</mo><mn>1</mn><mo>−</mo><msup><mi>p</mi><mrow><mo>−</mo><mi>δ</mi></mrow></msup><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">P = \\prod_{p &lt; z} \\left(1 - p^{-\\delta}\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0777em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span> which is a <strong>finite</strong> product. However, that requires proving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">S = P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>, which requires <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to be summable i.e. there's some circular argument. Am I correct here? Is there an alternative proof?</p>",
        "id": 400554452,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699284158
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSum#doc\">docs#HasSum</a></p>",
        "id": 400555265,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699284377
    },
    {
        "content": "<p>Once you prove <code>HasSum ... P</code> with your <code>P</code>, you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSum.summable#doc\">docs#HasSum.summable</a> to show summability.</p>",
        "id": 400555696,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699284491
    },
    {
        "content": "<p>Is HasSum S P equivalent to saying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>N</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><mrow><mo fence=\"true\">(</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≤</mo><mi>N</mi><mo separator=\"true\">,</mo><mi>p</mi><mo>∣</mo><mi>n</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>p</mi><mo>&lt;</mo><mi>z</mi></mrow></msub><msup><mi>n</mi><mrow><mo>−</mo><mi>δ</mi></mrow></msup><mo fence=\"true\">)</mo></mrow><mo>=</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{N \\to \\infty}\\left(\\sum_{n \\leq N, p \\mid n \\implies p &lt; z} n^{-\\delta}\\right) = P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.8em;vertical-align:-0.65em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mspace mtight\" style=\"margin-right:0.3253em;\"></span><span class=\"mrel mtight\">⟹</span><span class=\"mspace mtight\" style=\"margin-right:0.3253em;\"></span><span class=\"mord mathnormal mtight\">p</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>? Because that seems even harder to prove</p>",
        "id": 400556058,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699284593
    },
    {
        "content": "<p>And finally if you want to show that your sum, defined as <code>tsum</code>, is actuall equal to <code>P</code>, you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSum.tsum_eq#doc\">docs#HasSum.tsum_eq</a></p>",
        "id": 400556071,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699284596
    },
    {
        "content": "<p><code>HasSum</code> is defined as saying that the limit of the partial sums over arbitrary larger and larger finite subsets is equal to <code>P</code>. You can look at the definition itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">HasSum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400556519,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699284704
    },
    {
        "content": "<p>Right</p>",
        "id": 400556864,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699284791
    },
    {
        "content": "<p>So should I write as something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasSum</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">smooth</span> <span class=\"n\">z</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">δ</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">prime_Ico</span> <span class=\"mi\">1</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">δ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400556894,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699284799
    },
    {
        "content": "<p>I don't know what <code>smooth</code> is.</p>",
        "id": 400557088,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699284845
    },
    {
        "content": "<p>Oh oops</p>",
        "id": 400557136,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699284856
    },
    {
        "content": "<p>or <code>prime_Ico</code>.</p>",
        "id": 400557148,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699284858
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.LSeries</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Real</span> <span class=\"n\">ArithmeticFunction</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime_Ico</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">Nat.Prime</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">smooth</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">n.factors</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"n\">smooth</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">smooth</span> <span class=\"bp\">;</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 400557200,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699284878
    },
    {
        "content": "<p>it's just short hands for the ranges that appear in the definitions</p>",
        "id": 400557308,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699284908
    },
    {
        "content": "<p>I guess an approach could be to show that the sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>-smooth numbers in which, in addition, each prime appears at most <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> times are cofinal in all finite subsets of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>-smooth numbers (which ought to be enough since the summands are all nonnegative), and for these subsets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, we can evaluate the sums as products of truncated geometric series.</p>",
        "id": 400557344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1699284919
    },
    {
        "content": "<p>aha I see. yeah you could do that, or you could just use more binders in the sum/product and avoid making these new definitions.</p>",
        "id": 400557384,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699284933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Proving.20a.20sum.20over.20smooth.20numbers.20is.20summable/near/400557344\">said</a>:</p>\n<blockquote>\n<p>I guess an approach could be to show that the sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>-smooth numbers in which, in addition, each prime appears at most <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> times are cofinal in all finite subsets of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>-smooth numbers (which ought to be enough since the summands are all nonnegative), and for these subsets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, we can evaluate the sums as products of truncated geometric series.</p>\n</blockquote>\n<p>Oh! That sounds quite possible - I think I proved something like that already. And also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a finite set / sum, so it should be much easier to handle</p>",
        "id": 400558232,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699285158
    },
    {
        "content": "<p>Thanks a lot Reid, I think I will try that approach. Thanks Adam as well :)</p>",
        "id": 400558330,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699285192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> My <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts/blob/main/EulerProducts/EulerProduct.lean\">Euler product code</a> basically has the equality <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">P = S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. It is <code>prod_of_tsum_geometric</code> in <code>EulerFactor.lean</code>.</p>",
        "id": 400561718,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699286177
    },
    {
        "content": "<p>Yours doesn't work for my use case since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msup><mi>n</mi><mrow><mo>−</mo><mi>δ</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_n n^{-\\delta}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1488em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span></span></span></span></span></span></span></span></span> diverges for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>δ</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 &lt; \\delta \\leq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>?</p>",
        "id": 400561875,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699286226
    },
    {
        "content": "<p>I assume one can prove it using weaker assumptions.</p>",
        "id": 400562183,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699286323
    },
    {
        "content": "<p>Maybe yeah, but <code>∑' n, f n</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> currently as stated</p>",
        "id": 400562406,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699286376
    },
    {
        "content": "<p>Use that the sums in the product on the left converge absolutely to get convergence of the sum (over smooth numbers) on the right. I'll try to come up with something later if you don't beat me to it.</p>",
        "id": 400564784,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699286809
    },
    {
        "content": "<p>I see. But I think I will try to prove it myself first. Thanks though</p>",
        "id": 400565630,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699287064
    },
    {
        "content": "<p>I now have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">hasSum_prod_tsum_primesBelow</span>\n    <span class=\"o\">(</span><span class=\"n\">hsum</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">p.Prime</span> <span class=\"bp\">→</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">‖</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N.factorsBelow</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">HasSum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">N.factorsBelow</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">N.primesBelow</span><span class=\"o\">,</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(I'll push it to my github repo soon, but you don't have to look <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>\n<p>In the proof, I had two occurrences of <code>exact &lt;term&gt;</code> leading to a time-out, but <code>have := &lt;term&gt;; exact this</code> succeeding quickly. What could be the reason for this?</p>",
        "id": 400602151,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699300933
    },
    {
        "content": "<p>BTW, I think I will change <code>factorsBelow</code> to <code>smoothNumbers</code> in my code, as \"smooth\" is a pretty common name for the relevant property.</p>",
        "id": 400602294,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699300989
    },
    {
        "content": "<p><code>exact &lt;term&gt;</code> means \"make this term unify so that it has the type we expect\"; <code>have := &lt;term&gt;; exact this</code> means \"let the term have whatever type it wants to have, and then check that this is defeq to the type we expect\"</p>",
        "id": 400605356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699302409
    },
    {
        "content": "<p>Can you elaborate a bit more on the difference this makes?<br>\nOne of the terms in questions is <code>summable_mul_of_summable_norm hs ih.1</code>, where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖‖</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">‖‖</span>\n<span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖‖</span><span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"bp\">‖‖</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">...</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">^</span> <span class=\"n\">x.1</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">x.2</span><span class=\"bp\">‖</span>\n</code></pre></div>\n<p>and <code>n</code> in <code>hs</code> is a natural number, <code>m</code> in <code>ih</code> is in <code>↑(smoothNumbers N)</code> (a subtype of <code>Nat</code>), and <code>x</code> in the goal is in <code>ℕ × ↑(smoothNumbers N)</code>.<br>\nCould it be related to type class resolution and when this happens?</p>",
        "id": 400608593,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699304032
    },
    {
        "content": "<p>BTW, <code>this</code> and the goal look pretty identical. However, using <code>set_option pp.all true</code>, there are some differences in the type classes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SeminormedRing.toPseudoMetricSpace.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NormedRing.toSeminormedRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NormedCommRing.toNormedRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NormedField.toNormedCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))))))</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SeminormedAddCommGroup.toPseudoMetricSpace.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalSeminormedRing.toSeminormedAddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNormedRing.toNonUnitalSeminormedRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NormedRing.toNonUnitalNormedRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NormedCommRing.toNormedRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NormedField.toNormedCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))))))))</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>which supports my suspicion...</p>",
        "id": 400609356,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699304386
    },
    {
        "content": "<p>Is there some easy way to avoid these problems?</p>",
        "id": 400609650,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699304469
    },
    {
        "content": "<p>So without seeing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I will conjecture that doing things one way makes the whole algebra heirarchy explode, and doing it the other way doesn't, for reasons which I have never entirely understood and lie deep in the typeclass system. What happens if you set time-out to 0 and then look at the traces in <code>exact &lt;term&gt;</code>?</p>",
        "id": 400610824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699304926
    },
    {
        "content": "<p>Maybe tomorrow; it's getting late, and I have other things to do...</p>",
        "id": 400612063,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699305484
    },
    {
        "content": "<p>It appears that <code>convert &lt;term&gt;</code> has the same effect as <code>have := &lt;term&gt;; exact this</code>.</p>",
        "id": 401541643,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699735561
    },
    {
        "content": "<p>No, <code>convert</code> does quite a bit more than that (in particular it will use <code>congr</code> internally and give you subgoals for non-matching subexpressions). But it is strictly more powerful than <code>have := &lt;term&gt;; exact this</code>.</p>",
        "id": 401543854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699738120
    },
    {
        "content": "<p>OK (I know that <code>convert</code> is more powerful, geneally speaking); I should have said \"in the context above\".</p>",
        "id": 401591658,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699777838
    }
]