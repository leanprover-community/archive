[
    {
        "content": "<p>I would like to generalise the results of the PR <a href=\"https://github.com/leanprover-community/mathlib/pull/18266\">#18266</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/18477\">#18477</a> on the theory of ℤ-lattices that are proved for ℝ to other fields (in particular ℚ). The right generalization appears to be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_linear_ordered_field\">docs#normed_linear_ordered_field</a> with the additional property: <br>\n<code> ∀ a b, |a| ≤ |b| → ‖a‖ ≤ ‖b‖</code>. This property already exists in mathlib as the property <code>solid</code> of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_lattice_add_comm_group\">docs#normed_lattice_add_comm_group</a>.</p>\n<p>My first idea is to add a class <code>is_solid</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_solid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_linear_ordered_add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">solid</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">→</span> <span class=\"bp\">‖</span><span class=\"n\">a</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"bp\">‖</span><span class=\"n\">b</span><span class=\"bp\">‖</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then an instance from <code>normed_linear_ordered_field</code> to <code>normed_linear_ordered_add_group</code>. It is then easy to prove that ℝ and ℚ (for which mathlib already knows that there are <code>normed_linear_ordered_field</code>) satisfy <code>is_solid</code>. </p>\n<p>On the other hand, it would be nice to connect this to the property <code>solid</code> of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_lattice_add_comm_group\">docs#normed_lattice_add_comm_group</a> so another option would be to create the class <code>normed_lattice_field</code>(?) that would extend both <code>normed_linear_ordered_field</code> and <code>normed_lattice_add_comm_group</code>. I am not sure if that is feasible easily though. </p>\n<p>In any case, I'd like to get some advice on the best option and the best way to proceed.</p>",
        "id": 339712545,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678030416
    },
    {
        "content": "<p>Dare I ask whether there's any object in mathlib which has both a <code>|b|</code> and a <code>‖b‖</code>, and they don't coincide?</p>",
        "id": 339713372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678030813
    },
    {
        "content": "<p>Well, I was quite surprised to find out that it is not part of the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_linear_ordered_field\">docs#normed_linear_ordered_field</a>... But it appears it is possible to have both exist and be different.</p>",
        "id": 339713513,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678030923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I assume the point is that <code>abs : K → K</code> and <code>norm : K → ℝ</code></p>",
        "id": 339713654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678030991
    },
    {
        "content": "<p>So the question is really \"when is <code>↑|b| ≠ ‖b‖</code>\", for which I suspect there is something Kevin can come up with about the p-adic norm on ℚ</p>",
        "id": 339713813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678031091
    },
    {
        "content": "<p>Do you care about any types which don't satisfy <code>algebra K ℝ</code>?</p>",
        "id": 339713983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678031176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Solid/near/339713983\">said</a>:</p>\n<blockquote>\n<p>Do you care about any types which don't satisfy <code>algebra K ℝ</code>?</p>\n</blockquote>\n<p>Probably not.</p>",
        "id": 339714116,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678031245
    },
    {
        "content": "<p>Is <code>normed_algebra K ℝ</code> acceptable?</p>",
        "id": 339714292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678031309
    },
    {
        "content": "<p>That doesn't allow K=ℤ (though arguably we should refactor so that it does)</p>",
        "id": 339714315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678031321
    },
    {
        "content": "<p>But that should give you <code> ‖↑k‖ = ‖k • 1‖ = ‖k‖ * 1 = ‖k‖ = |k|</code></p>",
        "id": 339714753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678031502
    },
    {
        "content": "<p>That looks good to me. Let me try that</p>",
        "id": 339714858,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678031549
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_algebra_map'\">docs#norm_algebra_map'</a> should be defeq to the left parts of that statement</p>",
        "id": 339714916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678031584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Solid/near/339713813\">said</a>:</p>\n<blockquote>\n<p>So the question is really \"when is <code>↑|b| ≠ ‖b‖</code>\", for which I suspect there is something Kevin can come up with about the p-adic norm on ℚ</p>\n</blockquote>\n<p>Xavier is also well aware of the p-adic norm on the rationals :-)</p>",
        "id": 339715586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678031891
    },
    {
        "content": "<p>Do we have a way to spell \"ℚ but with the p-adic norm\"? I think it would be worth PRing something minimal if so, just so that when this type of thing comes up it's possible to provide a counterexample in lean and not english</p>",
        "id": 339716660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678032378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Solid/near/339714292\">said</a>:</p>\n<blockquote>\n<p>Is <code>normed_algebra K ℝ</code> acceptable?</p>\n</blockquote>\n<p>I cannot make it work, I am afraid. The problem is that I still need <code>linear_ordered_field</code> since I use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.fract\">docs#int.fract</a> and then the absolute value coming from <code>linear_ordered_field</code> is disconnected to the norm unless I am missing something. Basically, this is what I need: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed.order.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_linear_ordered_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">K</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339716974,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678032516
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_eq_abs\">docs#norm_eq_abs</a>?</p>",
        "id": 339717093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678032575
    },
    {
        "content": "<p>You can get the goal to <code>|x • (1 : ℝ)| ≤ 1</code> without too much work</p>",
        "id": 339717278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678032675
    },
    {
        "content": "<p>But then I guess you're stuck</p>",
        "id": 339717492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678032703
    },
    {
        "content": "<p>We don't even seem to have the version of <code>norm_eq_abs</code> on <code>rat</code>!</p>",
        "id": 339717632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678032768
    },
    {
        "content": "<p>I am stuck</p>",
        "id": 339717651,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678032778
    },
    {
        "content": "<p>Maybe the best way is to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">normed_lattice_field</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kd\">extends</span> <span class=\"n\">normed_linear_ordered_field</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">solid</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">→</span> <span class=\"bp\">‖</span><span class=\"n\">a</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"bp\">‖</span><span class=\"n\">b</span><span class=\"bp\">‖</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">normed_lattice_field.to_normed_lattice_add_comm_group</span>  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_lattice_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">normed_lattice_add_comm_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">normed_lattice_field.solid</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and then <code>normed_lattice_field</code> (including ℚ and ℝ) inherits all the lemmas for <code>normed_lattice_add_comm_group</code>.</p>",
        "id": 339720478,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678034297
    },
    {
        "content": "<p>Also dare I mention that <code>solid</code> is a poor name for this property?</p>",
        "id": 339720736,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678034439
    },
    {
        "content": "<p>And it is suited that the right fields for dealing with ℤ-lattices are called <code>normed_lattice_field</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 339720755,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678034456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Solid/near/339720736\">said</a>:</p>\n<blockquote>\n<p>Also dare I mention that <code>solid</code> is a poor name for this property?</p>\n</blockquote>\n<p>You will have to ask the author of the file <code>analysis.normed.order.lattice</code>: <span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span></p>",
        "id": 339720905,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678034558
    },
    {
        "content": "<p>There are solid modules in condensed mathematics which are unrelated to this concept</p>",
        "id": 339722975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678035763
    },
    {
        "content": "<p>I was also thinking about this in relation to your PR <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span>. I think one way of stating this issue is that currently one could take a totally real number field (like $\\mathbf Q (\\sqrt 2)$) and make an instance of Lt using one embedding and the norm using another embedding to R. I was wondering if the property <code> x &lt; y &lt; z \\implies || x - y ||&lt; || x - z ||</code> was a good fix?</p>",
        "id": 339731876,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678041053
    },
    {
        "content": "<p>Maybe that is the same as yours?</p>",
        "id": 339731897,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678041073
    },
    {
        "content": "<p><code>x&lt;y&lt;z</code> implies <code>0&lt;y-x&lt;z-x</code>. Does <code>abs</code> satisfy <code>x &gt; 0 -&gt; abs x = x</code>?</p>",
        "id": 339732057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678041192
    },
    {
        "content": "<p>I hope so! They should be the same after all (and Xavier's is simpler)</p>",
        "id": 339732146,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678041257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Solid/near/339720736\">said</a>:</p>\n<blockquote>\n<p>Also dare I mention that <code>solid</code> is a poor name for this property?</p>\n</blockquote>\n<p>In general mathematicians seem poor at coming up with imaginative names for properties.</p>\n<p>I didn't invent this term, I picked it up from Wikipedia <a href=\"https://en.wikipedia.org/wiki/Normed_vector_lattice\">https://en.wikipedia.org/wiki/Normed_vector_lattice</a></p>\n<p>I've seen the definition of a \"solid subset\" in several sources in the literature. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> is your objection to the use of <code>soild</code> to describe \"the unit ball is <code>solid</code>\" or do you object to the use of \"solid\" in \"solid subset\" too?</p>",
        "id": 339733110,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1678041862
    },
    {
        "content": "<p>I would much expect \"solid\" to refer to (three dimensional) polyhedra.</p>",
        "id": 339733208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678041929
    },
    {
        "content": "<p>Heh, so there's three distinct meanings in the literature already :-)</p>",
        "id": 339739073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678045971
    },
    {
        "content": "<p>According to Zaanen, Lectures on Riesz space, the French use the term \"épais\" (which I think translates as \"thick\") and the Russians use (a term which translates as) \"semi-normal\".</p>",
        "id": 339742629,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1678048525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/Solid/near/339732146\">said</a>:</p>\n<blockquote>\n<p>I hope so! They should be the same after all (and Xavier's is simpler)</p>\n</blockquote>\n<p>Yes, I have decided to go ahead with this solution <a href=\"https://github.com/leanprover-community/mathlib/pull/18554\">#18554</a></p>",
        "id": 339799290,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1678090204
    },
    {
        "content": "<p>Great. I must say I'm not a huge fan of the name solid, I'm sure its standard in a part of the literature I don't know, but if we are now using this for the property of <code>|a| \\le |b| \\implies ||a|| \\le ||b||</code> on the rationals I think adding an alias <code>norm_le_norm_of_abs_le_abs</code> would be worthwhile.</p>",
        "id": 339820369,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678096212
    },
    {
        "content": "<p><del>Does <code>has_isometric_smul α real</code> have the same effect as what you need here?</del></p>",
        "id": 340361971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678282464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Solid/near/339717492\">said</a>:</p>\n<blockquote>\n<p>But then I guess you're stuck</p>\n</blockquote>\n<p>I think the missing piece is a typeclass that says <code>algebra_map R A</code> is monotone; which is true in lots of places around nat / int / rat</p>",
        "id": 340364623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678283175
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed.order.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.module</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_linear_ordered_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">K</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">norm_algebra_map'</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real.norm_eq_abs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">one_smul</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abs_le</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">neg_smul</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is close</p>",
        "id": 340365421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678283375
    },
    {
        "content": "<p>Any ideas, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>?</p>",
        "id": 340365449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678283384
    },
    {
        "content": "<p>(Oh wow I was about to open a PR to add <code>has_isometric_smul</code>. No idea it existed)</p>",
        "id": 340378285,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678286118
    },
    {
        "content": "<p>I have a hint that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_ordered_smul\">docs#has_ordered_smul</a> could help here.</p>",
        "id": 340379231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678286311
    },
    {
        "content": "<p>I was about to say that we should define a <code>normed_ordered_algebra</code> mixin extending <code>normed_algebra</code>, but that would prevent us from being able to talk about non-unital stuff.</p>",
        "id": 340379532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678286371
    },
    {
        "content": "<p>So what's an example of a normed ordered ring-without-a-unit? I mean, at some point you just have to be pragmatic, right?</p>",
        "id": 340381190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678286726
    },
    {
        "content": "<p>Probably stuff like the ideal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">2\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\">2</span><span class=\"mord mathbb\">Z</span></span></span></span></p>",
        "id": 340381517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678286804
    },
    {
        "content": "<p>Yeah yeah, but also we might as well make do with existing pieces.</p>",
        "id": 340381635,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678286831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Solid/near/340381517\">said</a>:</p>\n<blockquote>\n<p>Probably stuff like the ideal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">2\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\">2</span><span class=\"mord mathbb\">Z</span></span></span></span></p>\n</blockquote>\n<p>Does that have a <code>non_unital_ring</code> structure today?</p>",
        "id": 340388987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678288438
    },
    {
        "content": "<p>Probably not.</p>",
        "id": 340389961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678288646
    },
    {
        "content": "<p>I don't think we should add it before the alghier refactor in ml4.</p>",
        "id": 340390047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678288663
    },
    {
        "content": "<p>Non-unital rings are causing enough problems in the current setup.</p>",
        "id": 340390144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678288682
    }
]