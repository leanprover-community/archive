[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- succeeds, *and* prints `Try this: ring_nf`</span>\n</code></pre></div>",
        "id": 329038837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676915811
    },
    {
        "content": "<p>Does <code>by ring_nf</code> close the goal?</p>",
        "id": 329048674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676919201
    },
    {
        "content": "<p>yes and it's not noisy either :-)</p>",
        "id": 329048804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676919250
    },
    {
        "content": "<p>I have also seen this behavior in the past, and this is pretty annoying, especially in the context where you are trying to teach a limited number of tactics.</p>",
        "id": 329049155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1676919394
    },
    {
        "content": "<p>\"People like you ended up buying: <code>ring_nf</code>\"</p>",
        "id": 329049302,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676919470
    },
    {
        "content": "<p>Is <code>ring_nf</code> faster than <code>ring</code> (when it works)? That would at least be some kind of justification. If not then it's definitely a bug.</p>",
        "id": 329060769,
        "sender_full_name": "David Loeffler",
        "timestamp": 1676924268
    },
    {
        "content": "<p>Does <code>ring1</code> work? I think <code>ring</code> is something like <code>ring1 &lt;|&gt; ring_nf</code></p>",
        "id": 329062614,
        "sender_full_name": "David Ang",
        "timestamp": 1676925100
    },
    {
        "content": "<p><code>ring1</code> <em>fails</em>!</p>",
        "id": 329081829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676936321
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_def_eq</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">expressions</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"o\">(</span><span class=\"n\">remark</span><span class=\"o\">:</span> <span class=\"n\">is_def_eq</span> <span class=\"n\">tactic</span> <span class=\"n\">does</span> <span class=\"n\">modify</span> <span class=\"n\">the</span> <span class=\"n\">metavariable</span> <span class=\"n\">assignment</span><span class=\"o\">)</span>\n  <span class=\"n\">tactic.ring.horner</span> <span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">and</span>\n  <span class=\"n\">tactic.ring.horner</span> <span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 329081847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676936340
    },
    {
        "content": "<p>I would not expect these things to be defeq. <code>by dsimp; ring</code> works fine, so it's the unexpanded lambdas which are causing the problem. Perhaps the moral is \"expand your lambdas first\"?</p>",
        "id": 329082055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676936479
    },
    {
        "content": "<p><code>ring</code> succeeds and suggests <code>ring_nf</code> exactly in the case where <code>ring1</code> would fail and <code>ring_nf</code> would succeed. If you don't want to teach <code>ring_nf</code> and pretend it doesn't exist, just use <code>ring1</code> instead</p>",
        "id": 329084782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676938609
    },
    {
        "content": "<p>But <code>ring1</code> doesn't work here and it should, right?</p>",
        "id": 329085404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676939071
    },
    {
        "content": "<p>should it?</p>",
        "id": 329085590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676939220
    },
    {
        "content": "<p>ring uses defeq to determine whether two different atoms should be identified, but it does not do reduction when matching the shape of the expression. I guess it probably should, it used to when it was using qq match directly (before one of the optimization PRs)</p>",
        "id": 329085871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676939414
    },
    {
        "content": "<p>I see -- you're perhaps saying that this is a \"mission creep\" situation where it's the user's job to get rid of the lambdas</p>",
        "id": 329086949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676940215
    },
    {
        "content": "<p>there is a well placed whnfR that will I think fix this particular situation, but there will be other cases where <code>dsimp; ring</code> will do more than <code>ring</code> alone</p>",
        "id": 329087527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676940612
    }
]