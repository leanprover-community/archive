[
    {
        "content": "<p>What does <code>open CategoryTheory</code>do?<br>\n(Apparently, it replaces <code>Ideal R</code> by some <code>↑(ModuleCat.of R { x // x ∈ S })</code>, and I would like to understand how that happens! I did not succeed by searching in the docs…)<br>\nMore generally, is there a comprehensive list of all the <code>open …</code> ? (I could not even understand how what happens when you <code>open Classical</code> actually happens)</p>",
        "id": 375798206,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689524617
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 375798739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689524790
    },
    {
        "content": "<p>Possibly, it adds some <code>Coe*</code> scoped instance.</p>",
        "id": 375798801,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689524812
    },
    {
        "content": "<p>No, I don't have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>… I was adding a <code>DefinableEq (R[X])</code>instance to <code>mathlib</code>, as in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5942\">#5942</a>, but that failed soon, because Lean cannot reconcile that instance with the <code>Classical</code> one. So I started playing with that, removing <code>open Classical</code>. At some point, in the theory of Euclidean rings, I added a <code>\\all (S : Ideal R), Decidable (Nontrivial S)</code>, but then that failed again in the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroupCat.injective_of_divisible#doc\">docs4#AddCommGroupCat.injective_of_divisible</a>…</p>",
        "id": 375817017,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689532071
    },
    {
        "content": "<p>Indeed, there, <code>S : Ideal ℤ</code> is changed to <code>↑(ModuleCat.of ℤ { x // x ∈ S })</code> and I don't understand how…</p>",
        "id": 375817181,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689532140
    },
    {
        "content": "<p>(The initial goal was to make Lean minimally capable of computing Sturm sequences of polynomials with rational coefficients…)</p>",
        "id": 375817299,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689532192
    },
    {
        "content": "<p>(I made a mistake in posting here, can someone can move this thread to #mathlib4 ?)</p>",
        "id": 375817673,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689532321
    },
    {
        "content": "<p>It seems like some coercion triggering. Probably the one from ideals to additive groups, to Z-modules.</p>",
        "id": 375819168,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1689532924
    },
    {
        "content": "<p>IMHO, we should have types with different representations of polynomials that work better for computations.</p>",
        "id": 375822665,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689534414
    },
    {
        "content": "<p>And theorems saying that some operations on these types agree with those on <code>R[X]</code>.</p>",
        "id": 375822710,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689534432
    },
    {
        "content": "<p>Then tactics should move input polynomials to one of those other types, compute there, then use one of those theorems to move back.</p>",
        "id": 375822814,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689534480
    },
    {
        "content": "<p>In fact, we may want to have a typeclass for that so that different implementations can share some code.</p>",
        "id": 375822991,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689534554
    },
    {
        "content": "<p>Antoine, remember that polynomials are noncomputable for a reason (it was hard to work with them). It would be interesting to see whether we can make them computable without too much pain but it might be easier to write a new type. One answer to your question is that Lean 4 <code>open X</code> is the same as lean 3 <code>open X</code> + <code>open_locale X</code></p>",
        "id": 375832945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689539281
    },
    {
        "content": "<p>That I have understood. But <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial#doc\">docs4#MvPolynomial</a> have a <code>DecidableEq</code> instance, and we need the analogue for Polynomial  if we want to avoid a plain <code>open classical </code>... So I tried to add it and things went wrong.<br>\n(I really find annoying that Lean can't presently compute a gcd of polynomials with rational coefficients…)</p>",
        "id": 375838586,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689542487
    },
    {
        "content": "<p>Do you mean <code>DecidableEq</code>?</p>",
        "id": 375838862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689542661
    },
    {
        "content": "<p>Yes</p>",
        "id": 375839826,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689543309
    },
    {
        "content": "<p>Sorry for the typo (I fixed it up above)</p>",
        "id": 375839888,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689543362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>, I think hoping for it to compute GCDs is (at least compatively) rather silly when it can't even compute <code>X + 1</code> right now</p>",
        "id": 375845236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689546786
    },
    {
        "content": "<p>Having said that, I don't think your instance is unreasonable, and is probably indicative of a bad lemma somewher</p>",
        "id": 375845428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689546894
    },
    {
        "content": "<p>I pushed some changes to your PR; feel free to discard them if you don't want them</p>",
        "id": 375849167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689549200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , thanks for the \"good cop/bad cop\" language, “silly” in one sentence, “not unreasonable” in the next one… But above all, thank you for these changes, they work better than the one I had started to write — but not pushed yet.</p>",
        "id": 375902276,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689575762
    }
]