[
    {
        "content": "<p>I'd like to get input from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  on this. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> was suggesting a rename of the Class hom lemmas (e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Class.mem_hom_left\">docs#Class.mem_hom_left</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Class.union_hom\">docs#Class.union_hom</a>) to use <code>coe</code> instead (e.g. <code>Class.coe_mem</code>, <code>Class.union_coe</code>).</p>",
        "id": 338522920,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677572020
    },
    {
        "content": "<p>I agree with the rename, but I recall that renaming things in this specific file was iffier than for others.</p>",
        "id": 338523074,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677572066
    },
    {
        "content": "<p>Why not just hold off on these kinds of questions until after the port to lean 4? Why not try and get this stuff ported instead and then have the discussion about changing the lean 4 files?</p>",
        "id": 338527677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677573779
    },
    {
        "content": "<p>because changing the Lean 4 files can only happen once the port is over, namely in 6 months?</p>",
        "id": 338532913,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677575428
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>rg<span class=\"w\"> </span><span class=\"s2\">\"import set_theory.zfc\"</span>\n<span class=\"go\">src/set_theory/zfc/ordinal.lean</span>\n<span class=\"go\">7:import set_theory.zfc.basic</span>\n</code></pre></div>",
        "id": 338533547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677575640
    },
    {
        "content": "<p>There is only 1 file in mathlib that depends on this file (<code>set_theory/zfc/ordinal.lean</code> is a leaf).</p>",
        "id": 338533741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677575701
    },
    {
        "content": "<p>So I think that after porting this file, it should feel free to change even if the port isn't done yet.</p>",
        "id": 338533832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677575721
    },
    {
        "content": "<p>I'm not aware of plans to make other files in mathlib depend on these two files.</p>",
        "id": 338533879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677575743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ZFC.20hom.20renames/near/338532913\">said</a>:</p>\n<blockquote>\n<p>because changing the Lean 4 files can only happen once the port is over, namely in 6 months?</p>\n</blockquote>\n<p>Of course people should work on what they enjoy and we are grateful for all contributions but I think it's worth noting that the port will happen more quickly if people divert effort away from Mathlib3 and into the port.</p>",
        "id": 338533958,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1677575770
    },
    {
        "content": "<p>I have no objection to the renames, but agree with others that this is added work for the port for no good reason</p>",
        "id": 338544154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677578689
    },
    {
        "content": "<p>Alright, I was worrying this might conflict with the Metamath in Lean thingy you had mentioned in the past</p>",
        "id": 338570982,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677586611
    },
    {
        "content": "<p>(should have mentioned that specific concern earlier, sorry)</p>",
        "id": 338571195,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1677586682
    },
    {
        "content": "<p>Those theorems are not used by the generator, only the definitions are important and the theorems are used in the hand written postprocessing file</p>",
        "id": 338676395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677613334
    },
    {
        "content": "<p>Regarding the ZFC Mathlib 4 port, it's almost done</p>",
        "id": 345431067,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680102053
    },
    {
        "content": "<p>So hopefully that excuses the following bikeshedding</p>",
        "id": 345431191,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680102077
    },
    {
        "content": "<p>I don't remember if I asked before but, what's the point of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Class.of_Set\">docs#Class.of_Set</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Class.to_Set\">docs#Class.to_Set</a>?</p>",
        "id": 345431361,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680102112
    },
    {
        "content": "<p>They are exactly identical to the coercion operator and the membership relation, respectively</p>",
        "id": 345431662,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680102155
    },
    {
        "content": "<p>In Lean 4, the coercion operator usually requires an underlying definition, because <code>coe</code> is unfolded (re <code>Class.of_Set</code>)</p>",
        "id": 345431815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680102188
    },
    {
        "content": "<p>That's good to keep in mind</p>",
        "id": 345432197,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680102250
    },
    {
        "content": "<p>Still, if these are entirely auxiliary definitions, I believe they'd be better off being named <code>Class.coe</code> and <code>Class.mem</code></p>",
        "id": 345432654,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680102322
    },
    {
        "content": "<p>That way it's clear you're supposed to use the other ones</p>",
        "id": 345432766,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680102339
    },
    {
        "content": "<blockquote>\n<p>That way it's clear you're supposed to use the other ones</p>\n</blockquote>\n<p>The up arrow and the function that implements it are syntactically the same in lean 4</p>",
        "id": 345432973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680102369
    },
    {
        "content": "<p>So you should only call it <code>Class.coe</code> if you want that name to appear in the goal view when you hover over the arrow</p>",
        "id": 345433101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680102389
    },
    {
        "content": "<p>I guess since  all the lemmas currently call it <code>coe</code> calling the function <code>Class.coe</code> is the least effort</p>",
        "id": 345433385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680102434
    },
    {
        "content": "<p>Ah, I hadn't grasped the \"syntactic\" bit</p>",
        "id": 345433583,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680102476
    },
    {
        "content": "<p>Well, if this behavior will change in Lean 4, I can postpone the bikeshedding until then</p>",
        "id": 345433699,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680102490
    },
    {
        "content": "<p>The <code>mem</code> stuff hasn't changed, so you could still bikeshed that if you felt the urge</p>",
        "id": 345435190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680102787
    },
    {
        "content": "<p>Sure, why not</p>",
        "id": 345436430,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680103025
    },
    {
        "content": "<p>It's trivial to port this to Lean 4</p>",
        "id": 345436467,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680103035
    },
    {
        "content": "<p>More so in comparison to the other 1700 lines that file has</p>",
        "id": 345436512,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680103047
    },
    {
        "content": "<p>Oh wait, I'm noticing we already have a <code>Class.mem</code></p>",
        "id": 345436994,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680103136
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/SIDkyaMJOFnTmz1h6e-WGcvA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SIDkyaMJOFnTmz1h6e-WGcvA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/SIDkyaMJOFnTmz1h6e-WGcvA/image.png\"></a></div>",
        "id": 345437007,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680103139
    },
    {
        "content": "<p>Surely this means <code>to_Set</code> should go?</p>",
        "id": 345437167,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680103169
    },
    {
        "content": "<p>I think you could reasonably delete both <code>mem</code> and <code>to_Set</code></p>",
        "id": 345440009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680103707
    },
    {
        "content": "<p>The rest of the file follows the pattern of not inlining instances</p>",
        "id": 345440631,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680103828
    },
    {
        "content": "<p>I recall I had some opposition when I tried to change that a few months ago</p>",
        "id": 345440696,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680103839
    },
    {
        "content": "<p>So I'd rather keep <code>mem</code> for now</p>",
        "id": 345440725,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680103845
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18694\">#18694</a></p>",
        "id": 345441513,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104004
    },
    {
        "content": "<p><code>to_Set</code> and <code>Class.mem</code> are not the same, the argument order is reversed (and this is important, because it is intended to be used partially applied)</p>",
        "id": 345501172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680119037
    },
    {
        "content": "<p>you should read it as <code>to_Set (B : Class) : Set Class := {A | A \\in B}</code></p>",
        "id": 345501633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680119172
    },
    {
        "content": "<p>Should we change it to actually say that?</p>",
        "id": 345507420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680121121
    },
    {
        "content": "<p>This file doesn't use <code>Set A</code>, it uses <code>A -&gt; Prop</code> and lambdas, and so it's actually<br>\n<code>to_Set (B : Class) : Class -&gt; Prop := fun A =&gt; A \\in B</code> at which point the usual style guide kicks in and moves <code>A</code> before the colon</p>",
        "id": 345508284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680121424
    },
    {
        "content": "<p>but we could use the docstring to emphasize that it is actually a unary function with a function codomain even though it looks like a binary function</p>",
        "id": 345509210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680121725
    },
    {
        "content": "<p>of course there is no difference for the type theory but it affects the sensibility of the name <code>to_Set</code></p>",
        "id": 345509400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680121781
    },
    {
        "content": "<p>Are you talking about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set#doc\">docs4#Set</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set\">docs#Set</a>?</p>",
        "id": 345511584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680122482
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set#doc\">docs4#Set</a></p>",
        "id": 345512251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680122744
    },
    {
        "content": "<p>the <code>A -&gt; Prop</code> one</p>",
        "id": 345512276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680122754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/ZFC.20hom.20renames/near/345508284\">said</a>:</p>\n<blockquote>\n<p>This file doesn't use <code>Set A</code>, it uses <code>A -&gt; Prop</code> and lambdas</p>\n</blockquote>\n<p>That's the convention we settled on for classes specifically, under the logic that in vanilla ZFC, classes are really predicates with another name. That discussion is summarized in the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Class\">docs#Class</a> docstring.</p>\n<p>For everything else, I believe it would be best if we used whichever of these two makes the most syntactic sense. </p>\n<p>We already use <code>set Class</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Class_to_Cong\">docs#Class_to_Cong</a>, so there's precedent for this.</p>",
        "id": 345669637,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680182223
    },
    {
        "content": "<p>On this note, isn't <code>to_Set</code> also identical to <code>Class_to_Cong</code>? Both literally and syntactically.</p>",
        "id": 345670469,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680182388
    }
]