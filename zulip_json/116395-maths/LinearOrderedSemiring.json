[
    {
        "content": "<p>During the Leiden conference, <span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span> and myself came up with the question whether <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sq_nonneg#doc\">docs#sq_nonneg</a> can be generalized to <code>LinearOrderedSemiring</code>. Thanks to <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> and <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> we now know that the answer is \"no\" (we have a sorry free Lean proof). This means in particular that multiplication by a negative element does not reverse inequalities in a <code>LinearOrderedSemiring</code>.</p>\n<p>I don't have a good example of a <code>LinearOrderedSemiring</code> that is not a subset of a <code>LinearOrderedRing</code>, but my intuition suggest that <code>≤ a ^ 2</code> should always be true.</p>",
        "id": 390297010,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694434332
    },
    {
        "content": "<p>/poll Do you think we should change the definition of <code>LinearOrderedSemiring</code> to imply this?<br>\nYes<br>\nNo<br>\nWe shouldn't really care</p>",
        "id": 390297025,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694434340
    },
    {
        "content": "<p>I went to the definition (in order to make an informed suggestion---I was inclined to say \"No\" because of my preconception of what <code>LinearOrderedSemiring</code> should be) and I was surprised by the extra structure (for example, the “unit”). Am I not reading it correctly?</p>",
        "id": 390303427,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1694436599
    },
    {
        "content": "<p>What \"unit\"? <code>0</code>?</p>",
        "id": 390303717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694436687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390303717\">said</a>:</p>\n<blockquote>\n<p>What \"unit\"? <code>0</code>?</p>\n</blockquote>\n<p>I see a <code>one</code> (<code>1</code>) there.</p>",
        "id": 390304003,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1694436760
    },
    {
        "content": "<p>Currently, a <code>LinearOrderedSemiring</code> is a nontrivial <code>Semiring</code> with a total order such that:</p>\n<ul>\n<li><code>a ≤ b → c + a ≤ c + b</code></li>\n<li><code>a + b ≤ a + c → b ≤ c</code></li>\n<li><code>0 ≤ 1</code></li>\n<li><code>a &lt; b → 0 &lt; c → c * a &lt; c * b</code></li>\n<li><code>a &lt; b → 0 &lt; c → a * c &lt; b * c</code></li>\n</ul>",
        "id": 390304023,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694436765
    },
    {
        "content": "<p><code>Semiring</code> means associative semiring with <code>1</code>.</p>",
        "id": 390304157,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694436808
    },
    {
        "content": "<p>Yeah, I don't think anybody cares (yet) about ordered non-unital semirings.</p>",
        "id": 390304350,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694436865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390304350\">said</a>:</p>\n<blockquote>\n<p>Yeah, I don't think anybody cares (yet) about ordered non-unital semirings.</p>\n</blockquote>\n<p>Haha, fair point. Hope no one does in the future!</p>",
        "id": 390304520,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1694436920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> do any examples spring to mind? I know you've been ordering exotic objects -- but if everything for you is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>-algebra then I suspect you don't care about semirings.</p>",
        "id": 390304941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694437048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225431\">@James Borger</span>, do you care about semirings with linear orders? If so, do you think that <code>0 \\le a^2</code> is always true?</p>",
        "id": 390305291,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694437172
    },
    {
        "content": "<p>What is this example that doesn't work? Is it natural?</p>",
        "id": 390308113,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694438053
    },
    {
        "content": "<p>Here it is (credits to <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> ).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">MyType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyType</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span> <span class=\"bp\">→</span> <span class=\"n\">MyType</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">MyType</span> <span class=\"n\">where</span> <span class=\"n\">add</span> <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a.1</span> <span class=\"bp\">+</span> <span class=\"n\">b.1</span><span class=\"o\">,</span> <span class=\"n\">a.2</span> <span class=\"bp\">+</span> <span class=\"n\">b.2</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">MyType</span> <span class=\"n\">where</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">MyType</span> <span class=\"n\">where</span> <span class=\"n\">mul</span> <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a.1</span> <span class=\"bp\">*</span> <span class=\"n\">b.1</span><span class=\"o\">,</span> <span class=\"n\">a.2</span> <span class=\"bp\">*</span> <span class=\"n\">b.1</span> <span class=\"bp\">+</span> <span class=\"n\">a.1</span> <span class=\"bp\">*</span> <span class=\"n\">b.2</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">MyType</span> <span class=\"n\">where</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">MyType</span> <span class=\"n\">where</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span>\n</code></pre></div>",
        "id": 390308962,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694438320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390304941\">said</a>:</p>\n<blockquote>\n<p>do any examples spring to mind?</p>\n</blockquote>\n<p>Of ordered non-unital semirings? Well, <code>2ℕ</code> is an example, but as Riccardo pointed out, it is a subset of an ordered ring.</p>\n<p>And of course it is not an example of a linearly ordered semiring in which not all squares are non-negative... (I guess an example of that is what you wanted, Kevin).</p>",
        "id": 390309400,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694438461
    },
    {
        "content": "<p>To be honest, I am more puzzled by the fact that <code>Semiring</code> means semiring <em>with unit</em> (but I am not advocating for a change here!).</p>",
        "id": 390309718,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694438568
    },
    {
        "content": "<p>When we introduced non unital stuff we decided to keep the name <code>Ring</code> for rings with unity since it is much more common.</p>",
        "id": 390309896,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694438628
    },
    {
        "content": "<p>Just a comment on my example - the way to view it is <code>a + b eps</code>, with a nonnegative and b non<em>positive</em>, and the ordering is lex in this sense, and eps ^ 2 = 0. The original idea was to have b arbitrary, but this has too many positive elements for <code>mul_lt_mul_of_pos_left</code> to be true (everything except this works); but insisting that b cannot be positive means the only positive elements are the naturals, recovering the axiom. But of course, the hypothetical <code>mul_lt_mul_of_neg_left</code> fails, and this is what creates a negative square. I'll put this example in Counterexamples!</p>",
        "id": 390311642,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694439230
    },
    {
        "content": "<p>Without contributing further examples, I am inclined to say that some ring-like structure where multiplication by positive elements is monotone and by negative ones is antitone should exist.  Depending on how much effort it is to refactor the current LinearOrderedSemiring, there is also the possibility of defining the newer, more restrictive typeclass and then simply doing a rename.</p>",
        "id": 390311721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694439247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390304520\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390304350\">said</a>:</p>\n<blockquote>\n<p>Yeah, I don't think anybody cares (yet) about ordered non-unital semirings.</p>\n</blockquote>\n<p>Haha, fair point. Hope no one does in the future!</p>\n</blockquote>\n<p>Why wouldn't you care about <code>C₀(X, ℝ≥0)</code> for <code>X</code> a locally compact Hausdorff space?</p>",
        "id": 390353167,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694451523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390353167\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390304520\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390304350\">said</a>:</p>\n<blockquote>\n<p>Yeah, I don't think anybody cares (yet) about ordered non-unital semirings.</p>\n</blockquote>\n<p>Haha, fair point. Hope no one does in the future!</p>\n</blockquote>\n<p>Why wouldn't you care about <code>C₀(X, ℝ≥0)</code> for <code>X</code> a locally compact Hausdorff space?</p>\n</blockquote>\n<p>I would, I like my things very general. It would seem that the <em>future</em> is <em>right now</em>.</p>",
        "id": 390353543,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1694451671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> but, more (or perhaps, equally?) generally, the positive elements in a non-unital commutative C⋆-algebra will be an ordered non-unital semiring. Whether I actually need that as a type class or not is less clear, because it will be a <code>StarOrderedRing</code>, so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 390354817,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694452122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>, maybe I missed this, but is it the case for the rings that you work on that the sign of a product is determined by the sign of the factors in the \"obvious\" way?  E.g. can you multiply negative elements and obtain a strictly negative element?</p>",
        "id": 390355520,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694452398
    },
    {
        "content": "<p>no, that's not possible.</p>",
        "id": 390355729,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694452477
    },
    {
        "content": "<p>Ok, so, as far as I can tell, every \"actual\" instance of a <code>LinearOrderedSemiring</code> in mathlib seems to satisfy the stronger condition that products of negatives is positive (zeros being included on either the negative or the positive side).</p>",
        "id": 390355900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694452553
    },
    {
        "content": "<p>This may be a case for at least introducing this typeclass, whether or not it should replace the current <code>LinearOrderedSemiring</code> is maybe a separate question.</p>",
        "id": 390356056,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694452612
    },
    {
        "content": "<p>Oh, by the way, I have <em>no</em> nice examples off hand of non-unital <em>linear</em> ordered semirings.</p>",
        "id": 390356187,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694452672
    },
    {
        "content": "<p>Ok, the typeclass that I had in mind simply would assume a preorder, maybe, a semiring and then some monotonicities (likely as in the current <code>OrderedSemiring</code>) and the new thing: the product of negative elements is non-negative.</p>",
        "id": 390356470,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694452789
    },
    {
        "content": "<p>I think a better new is that multiplication by a negative (/nonpositive, but I hate this word) element is antitone.</p>",
        "id": 390357129,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694453064
    },
    {
        "content": "<p>Yes, that is another possibility and I do not have an example showing that it is actually stronger than just asking it for products of negatives.</p>",
        "id": 390357624,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694453263
    },
    {
        "content": "<p>I simply thought that a (on the surface) weaker axiom might be preferable.  But I'm not going to make a PR anytime soon anyway!</p>",
        "id": 390357792,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694453319
    },
    {
        "content": "<p>Also, I like the automatic symmetry of the weaker assumption, as opposed to having to distinguish between left and right.  Anyway, I think that once there is a consensus on wanting a stronger typeclass, we can discuss which strengthening is desired.</p>",
        "id": 390359907,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694454172
    },
    {
        "content": "<p>Isn’t that the point where we decide to add mixins instead of adding even more nodes to the instance tree? You obviously have all thought more about this than I have, but if there’s one place where I feel like we could use more mixins it’s the intersection of the algebraic and order hierarchies. IMHO things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedLinearOrderedField#doc\">docs#NormedLinearOrderedField</a> (picked this one since I introduced it a while ago) should just not exist in the first place</p>",
        "id": 390385157,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694464979
    },
    {
        "content": "<p>Actually, I feel like we're starting to get a mixin clutter at the intersection of the algebraic and order hierarchies... <code>NormedLinearOrderedField</code> is the intersection of the algebraic, order and norm hierarchies, btw.</p>",
        "id": 390387775,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694466262
    },
    {
        "content": "<p>Regardless, you're missing the point, Anatole. The current plan is not to add any typeclass but to strengthen an existing one.</p>",
        "id": 390387887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694466321
    },
    {
        "content": "<p>True, but it’s starting to feel more and more like a bunch of nice properties put together, at which point you might as well just use the mixins that you need. But again I haven’t thought about it carefully (as shown by the fact that my example doesn’t show what I wanted it to show) so don’t give too much importance to what I say.</p>",
        "id": 390388981,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694466906
    },
    {
        "content": "<p>Actually I’m getting curious, could you expand on the mixin clutter?</p>",
        "id": 390389148,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694466987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390356187\">said</a>:</p>\n<blockquote>\n<p>Oh, by the way, I have <em>no</em> nice examples off hand of non-unital <em>linear</em> ordered semirings.</p>\n</blockquote>\n<p>What do you mean by <em>nice</em> here? Is there another property that you would want such an example to satisfy?</p>",
        "id": 390395917,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694470095
    },
    {
        "content": "<p>By \"nice\" I mean, \"come up in mathematical practice\" (e.g., like the <code>C₀(X, ℝ≥0)</code> example I gave without the linear order condition)</p>",
        "id": 390397197,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694470671
    },
    {
        "content": "<p>I still feel that the even natural numbers should be a go-to example of what you are looking for here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 390398244,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694471131
    },
    {
        "content": "<p>Lol, yes, but when do you ever use those in that capacity?</p>",
        "id": 390402105,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694472959
    },
    {
        "content": "<p>Touché <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 390449378,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694497709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390388981\">said</a>:</p>\n<blockquote>\n<p>True, but it’s starting to feel more and more like a bunch of nice properties put together, at which point you might as well just use the mixins that you need. But again I haven’t thought about it carefully (as shown by the fact that my example doesn’t show what I wanted it to show) so don’t give too much importance to what I say.</p>\n</blockquote>\n<p>I tried to make <code>CanonicallyOrdered...</code> a mixin earlier in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6326\">#6326</a>, but I haven't found out what was causing a ton of timeouts.</p>",
        "id": 390449558,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694497857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390297010\">said</a>:</p>\n<blockquote>\n<p>I don't have a good example of a <code>LinearOrderedSemiring</code> that is not a subset of a <code>LinearOrderedRing</code>, but my intuition suggest that <code>≤ a ^ 2</code> should always be true.</p>\n</blockquote>\n<p>Is there a chance these could be equivalent properties? Meaning, does a <code>LinearOrderedSemiring</code> embed (in a sense to be made precise) in a <code>LinearOrderedRing</code> if and only if the squares are non-negative?</p>",
        "id": 390451435,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694499014
    },
    {
        "content": "<p>The proof strategy is clear: you additively invert all elements, this is an injection, you attempt extend &lt;= in the only way you can and then you see what happens when you try and prove everything. Squares are funny in characteristic 2 (in particular knowing things about squares doesn't mean you know things about products) but that can't happen here because of the order.</p>",
        "id": 390457850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694502557
    },
    {
        "content": "<p>I think the \"invert =&gt; injection\" is not entirely clear, but maybe cancellativity of addition is actually sufficient.  I never fully convinced myself of that.</p>",
        "id": 390458806,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694503053
    },
    {
        "content": "<p>Ok, I was wrong: cancellativity and the fact that <em>addition</em> is commutative are enough: <a href=\"https://math.stackexchange.com/questions/3516249/prove-that-every-abelian-cancellation-semigroup-can-be-imbedded-in-a-group\">https://math.stackexchange.com/questions/3516249/prove-that-every-abelian-cancellation-semigroup-can-be-imbedded-in-a-group</a></p>\n<p>I was mixing add and mul.</p>",
        "id": 390459606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694503402
    },
    {
        "content": "<p>Oh, right, the cancellativity! We thought about that with <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> but I had forgotten <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Maybe that is the abstract condition we should incorporate, then?</p>",
        "id": 390461331,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694504141
    },
    {
        "content": "<p>Cancellativity should follow from the iff with monotonicity of addition, so that's ok, I think.</p>",
        "id": 390461556,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694504221
    },
    {
        "content": "<p>Sorry, what do you mean by 'the iff' here?</p>",
        "id": 390461995,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694504394
    },
    {
        "content": "<p>There are fields <code>add_le_add</code> and <code>le_add</code>, that make the inequality of adds and iff (sorry, I'm on mobile!).</p>",
        "id": 390462196,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694504480
    },
    {
        "content": "<p>Combining that with a linear order you should get cancellativity of addition.  My previous comment was very compressed!</p>",
        "id": 390462520,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694504611
    },
    {
        "content": "<p>Got it, thanks!</p>",
        "id": 390462884,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694504750
    },
    {
        "content": "<p>I wonder how long will it take for the bits of imprecise statements to be automatically converted into a formal proof, without further human assistance...</p>",
        "id": 390463044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694504807
    },
    {
        "content": "<p>(your suggestion to look at things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Monoid/Lemmas.html#add_le_add_iff_left\">#add_le_add_iff_left</a> clarified it for me)</p>",
        "id": 390463045,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694504807
    },
    {
        "content": "<p>There might already be a lemma that says that add is strictly monotone and maybe even a cancel... instance.</p>",
        "id": 390463137,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694504849
    },
    {
        "content": "<p>Are we sure we can also extend the order?</p>",
        "id": 390463666,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694505046
    },
    {
        "content": "<p>Extending preserving addition, I think so.  Multiplication... I am really not sure.</p>",
        "id": 390463786,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694505101
    },
    {
        "content": "<p>Yes, that is not so clear, I agree</p>",
        "id": 390463892,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694505129
    },
    {
        "content": "<p>Why are people focussed on \"squares are nonnegative\" rather than \"if x,y&gt;=0 then so is x*y\"? What's the relationship between those two statements?</p>",
        "id": 390464344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694505326
    },
    {
        "content": "<p>This is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_nonneg#doc\">docs#mul_nonneg</a> and it is already true</p>",
        "id": 390464815,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694505493
    },
    {
        "content": "<p>The problem is when x, y &lt;= 0, Kevin.</p>",
        "id": 390465028,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694505574
    },
    {
        "content": "<p>But in the ring can't you just prove x&gt;=0 iff -x&lt;=0?</p>",
        "id": 390465161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694505609
    },
    {
        "content": "<p>i think I must be missing the point</p>",
        "id": 390465217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694505629
    },
    {
        "content": "<p>Yeah, in a <em>ring</em>. We're talking about semirings here.</p>",
        "id": 390465300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694505660
    },
    {
        "content": "<p>In a ring sure, the discussion is about a semiring.</p>",
        "id": 390465306,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694505662
    },
    {
        "content": "<p>Then I've lost track of the question. I thought the question was about extending &lt;= from a semiring to a ring.</p>",
        "id": 390465370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694505691
    },
    {
        "content": "<p>We are wondering if a semiring such that all squares are nonnegative (or maybe such that the product of nonpositive is nonnegative, we don't know it they're equivalent) can be embedded in an ordered ring.</p>",
        "id": 390465691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694505797
    },
    {
        "content": "<p>I assume the ordered ring in question is (WLOG) the <code>AddLocalization</code> of the semiring?</p>",
        "id": 390466313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694506047
    },
    {
        "content": "<p>which extends all the operations except for the order</p>",
        "id": 390466357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694506064
    },
    {
        "content": "<p>I already proved it extends the order: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddLocalization.orderedAddCancelCommMonoid#doc\">docs#AddLocalization.orderedAddCancelCommMonoid</a> What I don't believe is that it extends the multiplication in an order-preserving way.</p>",
        "id": 390466823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694506235
    },
    {
        "content": "<p>OK so where does the following strategy become problematic:<br>\n1) We have a an ordered semiring<br>\n2) Extend the ordering to the ringification<br>\n3) x&gt;=0 iff -x&lt;=0 so everything is now easy</p>",
        "id": 390468027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694506698
    },
    {
        "content": "<p>I think part 3b \"everything is now easy\"</p>",
        "id": 390468129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694506742
    },
    {
        "content": "<p>if x,y&lt;=0 then xy=(-x)(-y) and -x&gt;=0 and -y&gt;=0 so done. What am I missing?</p>",
        "id": 390468169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694506764
    },
    {
        "content": "<p>Probably 2), given that we have an example of an ordered semiring where a square is negative.</p>",
        "id": 390468177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694506771
    },
    {
        "content": "<p>but I thought we were linearly ordered here?</p>",
        "id": 390468232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694506799
    },
    {
        "content": "<p>Probably mathlib thinks that the complexes are an example of an ordered semiring where a square is negative, but with linear orders this can't happen</p>",
        "id": 390468345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694506828
    },
    {
        "content": "<p>or am I wrong?</p>",
        "id": 390468364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694506835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> you just said you already did 2</p>",
        "id": 390468587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694506916
    },
    {
        "content": "<p>although the theorems are only about <code>LinearOrderedCancelCommMonoid</code> and not anything with <code>Group</code> in the name</p>",
        "id": 390468762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694506973
    },
    {
        "content": "<p>so I'm not sure the negation is proved to be well behaved under the order</p>",
        "id": 390468812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694506989
    },
    {
        "content": "<p>although it doesn't seem like it should be hard</p>",
        "id": 390468840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694506998
    },
    {
        "content": "<p>Nonono! I said I showed that the localization was an ordered additive group, and we also know that it's a ring. What's missing is that it's an ordered ring (namely the interaction between the multiplication and the order).</p>",
        "id": 390468887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694507016
    },
    {
        "content": "<p>but we know x&gt;=0 and y&gt;=0 implies xy&gt;=0 in the semiring</p>",
        "id": 390469078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694507041
    },
    {
        "content": "<p>is that in the MonoidLocalization file?</p>",
        "id": 390469122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694507047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390468840\">said</a>:</p>\n<blockquote>\n<p>although it doesn't seem like it should be hard</p>\n</blockquote>\n<p>This part is easy. In fact, <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> has a PR proving it. The thing is that it only works when you localize at the top submonoid.</p>",
        "id": 390469163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694507067
    },
    {
        "content": "<p>which is what we're localizing at?</p>",
        "id": 390469207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694507088
    },
    {
        "content": "<p>I still feel that I don't understand what the actual question is (and I have a meeting now so will stop adding my ill-informed comments to this thread for a while)</p>",
        "id": 390469327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694507128
    },
    {
        "content": "<p>hm, I'm thinking kevin is right</p>",
        "id": 390469405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694507158
    },
    {
        "content": "<p>Yes, I'm just explaining why we don't have it in mathlib yet. In mathlib we only have the general theory that works for all localizations, and nothing specific to the Grothendieck group construction.</p>",
        "id": 390469463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694507166
    },
    {
        "content": "<p>Wait, I can't find any theory about a ring structure on the <code>AddLocalization</code>, even without the order</p>",
        "id": 390471245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694507753
    },
    {
        "content": "<p>I can't even get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">AddLocalization</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">AddSubmonoid</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">AddLocalization</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">AddSubmonoid</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>to typecheck because the multiplication doesn't exist</p>",
        "id": 390471488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694507840
    },
    {
        "content": "<p>Uh oh</p>",
        "id": 390471844,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694507987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390468027\">said</a>:</p>\n<blockquote>\n<p>OK so where does the following strategy become problematic:<br>\n1) We have a an ordered semiring<br>\n2) Extend the ordering to the ringification<br>\n3) x&gt;=0 iff -x&lt;=0 so everything is now easy</p>\n</blockquote>\n<p>I think the problem is in 2. I see two questions (maybe some already answered..).</p>\n<ul>\n<li>Is the ringification a <code>LinearOrderedRing</code> (assuming we started with a <code>LinearOrderedSemiring</code>)?</li>\n<li>Is the localization map always injective?</li>\n</ul>\n<p>The answer cannot be \"yes\", otherwise the strategy would work in general, but we have an example of a <code>LinearOrderedSemiring</code> with a negative square (something cannot exist in the ringification).</p>",
        "id": 390487786,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694513690
    },
    {
        "content": "<p>Oh the example is linearly ordered?? Then this is my mistake</p>",
        "id": 390491021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694515069
    },
    {
        "content": "<p>what is the example?</p>",
        "id": 390491217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694515137
    },
    {
        "content": "<p>There is code above, posted by Riccardo and attributed to Bhavik but there's no mathematical explanation.</p>",
        "id": 390491301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694515178
    },
    {
        "content": "<p>It seems to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">[</mo><mi>ϵ</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\N[\\epsilon]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mclose\">]</span></span></span></span> with \"epsilon infinitely negative\" (so 100000+eps&lt;0)</p>",
        "id": 390491567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694515282
    },
    {
        "content": "<p>Oh I've now seen Bhavik's explanation</p>",
        "id": 390492857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694515740
    },
    {
        "content": "<p>what's the negative square in question? It's not epsilon^2 because that's zero</p>",
        "id": 390493575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694516042
    },
    {
        "content": "<p>1+eps</p>",
        "id": 390493627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516053
    },
    {
        "content": "<p>This ring has very few positive elements</p>",
        "id": 390493698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516095
    },
    {
        "content": "<p>oh, I thought it had to be a positive number squared</p>",
        "id": 390493801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694516137
    },
    {
        "content": "<p>So it's totally breaking my mental model of ordered semirings, which involves having everything &gt;=0</p>",
        "id": 390493821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390487786\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390468027\">said</a>:</p>\n<blockquote>\n<p>OK so where does the following strategy become problematic:<br>\n1) We have a an ordered semiring<br>\n2) Extend the ordering to the ringification<br>\n3) x&gt;=0 iff -x&lt;=0 so everything is now easy</p>\n</blockquote>\n<p>I think the problem is in 2. I see two questions (maybe some already answered..).</p>\n<ol>\n<li>Is the ringification a <code>LinearOrderedRing</code> (assuming we started with a <code>LinearOrderedSemiring</code>)?</li>\n<li>Is the localization map always injective?</li>\n</ol>\n<p>The answer cannot be \"yes\", otherwise the strategy would work in general, but we have an example of a <code>LinearOrderedSemiring</code> with a negative square (something cannot exist in the ringification).</p>\n</blockquote>\n<p>Right. So, for 1, we are asking for a necessary and sufficient condition for the order of a <code>LinearOrderedSemiring</code> to extend to its <br>\nringification (in a way that makes the ringification a <code>LinearOrderedRing</code>). </p>\n<p>The fact that the squares should be non-negative is necessary. Is it sufficient?</p>",
        "id": 390493847,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694516157
    },
    {
        "content": "<p>Product of two nonpositives is nonnegative is a stronger statement and is also necessary</p>",
        "id": 390494005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516222
    },
    {
        "content": "<p>So one can ask two hopefully easier questions: first is product of nonpositives nonnegative sufficient for extension to find, and secondly whether product of &lt;=0 is &gt;=0 is the same as all squares &gt;=0. These questions sound more reasonable. The second can maybe be attacked using (x+y)^2 and hopefully the first is easy</p>",
        "id": 390494489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516405
    },
    {
        "content": "<p>Now I've understood that semirings can be 99% negative elements I'm thinking that the definition of linear ordered semiring is not correct. It looks like what the books say for ordered rings, but with the absence of negation in semirings I feel like <code>a &lt; b -&gt; c &lt; 0 -&gt; c * b &lt; c * a</code> should also be there as an axiom when we don't have negation.</p>",
        "id": 390494926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516578
    },
    {
        "content": "<p>This is not present in the ring case because you can just apply the <code>c &gt; 0</code> axiom to -c.</p>",
        "id": 390495022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516621
    },
    {
        "content": "<p>Then I bet ringification of a totally ordered semiring is a totally ordered ring</p>",
        "id": 390495202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516680
    },
    {
        "content": "<p>Is addition always cancellative?</p>",
        "id": 390495342,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694516746
    },
    {
        "content": "<p>Yes because of the order</p>",
        "id": 390495366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516756
    },
    {
        "content": "<p>If a+b=a+c then we can't have b&lt;c because an axiom then says a+b&lt;a+c</p>",
        "id": 390495589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516838
    },
    {
        "content": "<p>Oh wait that isn't an axiom :-/</p>",
        "id": 390495670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694516869
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Ring.Defs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedCancelAddCommMonoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>works. It is the direct generalization of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrderedCommSemiring.toLinearOrderedCancelAddCommMonoid#doc\">docs#LinearOrderedCommSemiring.toLinearOrderedCancelAddCommMonoid</a></p>",
        "id": 390496109,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694517052
    },
    {
        "content": "<p>So how does Bhavik's example fit into that story?</p>",
        "id": 390496241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694517108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390495589\">said</a>:</p>\n<blockquote>\n<p>If a+b=a+c then we can't have b&lt;c because an axiom then says a+b&lt;a+c</p>\n</blockquote>\n<p>It's not an axiom but it's true</p>",
        "id": 390496334,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694517136
    },
    {
        "content": "<p>The ringification does not have a <code>LinearOrderedRing</code> instance</p>",
        "id": 390496387,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694517157
    },
    {
        "content": "<p>Ok then done :-)</p>",
        "id": 390496388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694517157
    },
    {
        "content": "<p>By the way we can add my example, <code>inferInstance</code>, does not prove it.</p>",
        "id": 390496511,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694517218
    },
    {
        "content": "<p>So the issue with Bhavik's ring is not \"squares can be negative\" , it's \"multiplication by negative elements does not reverse the order\" which I think is a natural axiom.</p>",
        "id": 390496642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694517260
    },
    {
        "content": "<p>Note that \"multiplication by positive preserves &lt;\" and \"multiplication by negative reverses &lt;\" implies no zero divisors</p>",
        "id": 390496823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694517338
    },
    {
        "content": "<p>(because it implies the usual facts pos x neg is neg, neg x neg is pos)</p>",
        "id": 390497137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694517481
    },
    {
        "content": "<p>In particular it implies squares are &gt;= 0, which I feel is maybe a red herring</p>",
        "id": 390497267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694517531
    },
    {
        "content": "<p>I see that most of the discussion from before I boarded my plane was resolved!</p>\n<p>I just wanted to add something that has not been made explicit, but that might help: when you \"ringify\" by adding additive opposites, you <em>may</em> also add more <em>positive</em> elements.  This is not in any way strange: the subsemiring of <code>Nat[π]</code> generated by <code>{0, 1, π}</code> does not contain <code>π-1</code>, but when you add opposites it will.  Thus, extending the property that multiplication by <em>positive</em> elements is monotone involves checking more inequalities, after adding the opposites.</p>",
        "id": 390519647,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694525063
    },
    {
        "content": "<p>Right! This is why I'm arguing that only explaining what multiplication by positive elements does, in the context where you can't deduce what multiplying by negative elements does, is kind of a weird idea. In the presence of left and right inverse axioms for a group you only need one of <code>mul_one</code> and <code>one_mul</code> because you can deduce the other one using inverses. However in a monoid this is not the case and you need both. Similarly here I feel like if we're inventing things like linearly ordered semirings and we can't use neg to get the negative story from the positive story we should say what multiplication by a negative element does to the ordering, even though we don't need this for ordered rings.</p>",
        "id": 390529134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694528014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390304023\">said</a>:</p>\n<blockquote>\n<p>Currently, a <code>LinearOrderedSemiring</code> is a nontrivial <code>Semiring</code> with a total order such that:</p>\n<ul>\n<li><code>a ≤ b → c + a ≤ c + b</code></li>\n<li><code>a + b ≤ a + c → b ≤ c</code></li>\n<li><code>0 ≤ 1</code></li>\n<li><code>a &lt; b → 0 &lt; c → c * a &lt; c * b</code></li>\n<li><code>a &lt; b → 0 &lt; c → a * c &lt; b * c</code></li>\n</ul>\n</blockquote>\n<p>So, just to make sure I understand: based on the previous discussion, the debate is whether to add the following to the list?</p>\n<ul>\n<li><code>a &lt; b → c &lt; 0 → c * b  &lt; c * a</code></li>\n<li><code>a &lt; b → c &lt; 0 → b * c  &lt; a * c</code></li>\n</ul>",
        "id": 390649201,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694582806
    },
    {
        "content": "<p>I would say that this is one of the main candidates, maybe with more discussion about where you want <code>&lt;</code> and where you want <code>≤</code>.</p>",
        "id": 390649428,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694582966
    },
    {
        "content": "<p>I see, thanks. Do we intend to proceed with the <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390297025\">poll suggested by Riccardo</a>? If so, perhaps we should lay out the options for change more clearly? Or is it too soon at this stage?</p>",
        "id": 390650260,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694583387
    },
    {
        "content": "<p>And I have a related question, which mixes math and programming. </p>\n<p>In the mathlib definition of a <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Field/Defs.html#LinearOrderedField\">#LinearOrderedField</a>, the property <code>zero_le_one : 0 ≤ 1</code> is listed as an axiom/constructor. But mathematically this is not necessary, because if <code>1&lt;0</code> then <code>0 = 1 + (-1) &lt; 0 + (-1) = -1</code> so <code>0 &lt; (-1) * (-1) = 1</code>.</p>\n<p>So, what is the purpose of having it here? Note that I am criticising it, I merely want to understand why this choice has been made and what it permits <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 390651140,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694583864
    },
    {
        "content": "<p>To answer <code>zero_le_one</code>: the field is defined by extending another typeclass.  This means that you copy over the fields of that structure and <code>zero_le_one</code> comes for the ride.</p>",
        "id": 390651552,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694584111
    },
    {
        "content": "<p>OK, that makes sense! But I guess my question is: we are okay with this mathematically?</p>",
        "id": 390651960,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694584326
    },
    {
        "content": "<p>Wrt strengthening the assumptions on <code>LinearOrderedSemiring</code>, this is somewhat unusual since it means replacing a typeclass assumption that is more general with one that is less general.  From the little movement that the poll above has, I suspect that people do not really have a strong opinion: the current system works and changing it is not a priority.</p>\n<p>I think that trying out the change and checking that <del>none</del>all of the \"concrete\" types still satisfies the stronger version would help.</p>",
        "id": 390652178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694584460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390651960\">said</a>:</p>\n<blockquote>\n<p>OK, that makes sense! But I guess my question is: we are okay with this mathematically?</p>\n</blockquote>\n<p>Mathematically I would say: it is provable, so adding it as an axiom is not going to cause any problems!</p>",
        "id": 390652264,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694584521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390651960\">said</a>:</p>\n<blockquote>\n<p>OK, that makes sense! But I guess my question is: we are okay with this mathematically?</p>\n</blockquote>\n<p>More precisely: we would <em>not</em> define a <code>LinearOrderedField</code> with less axioms, and then show that it satisfies the properties of a <code>LinearOrderedCommRing</code> in order to define <code>instance LinearOrderedField.toLinearOrderedCommRing</code>?</p>",
        "id": 390652275,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694584528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390652264\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390651960\">said</a>:</p>\n<blockquote>\n<p>OK, that makes sense! But I guess my question is: we are okay with this mathematically?</p>\n</blockquote>\n<p>Mathematically I would say: it is provable, so adding it as an axiom is not going to cause any problems!</p>\n</blockquote>\n<p>Yes, can't argue with that!</p>",
        "id": 390652408,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694584593
    },
    {
        "content": "<p>With formalization, not always the minimal set of axioms works well.  If you look at the implementation of <code>AddMonoid</code> (maybe?), there are <code>nsmul</code> fields that are helpful to suggest better versions of the automatic instance.  This is only a computer-generated issue, not a mathematical one.  These fields are often left out to their default values, but sometimes it is helpful to control what they are.</p>",
        "id": 390652636,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694584740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390652178\">said</a>:</p>\n<blockquote>\n<p>Wrt strengthening the assumptions on <code>LinearOrderedSemiring</code>, this is somewhat unusual since it means replacing a typeclass assumption that is more general with one that is less general.  From the little movement that the poll above has, I suspect that people do not really have a strong opinion: the current system works and changing it is not a priority.</p>\n</blockquote>\n<p>Yes, that makes sense. I suppose I am using this as an example to understand the structure of the library and how it is built, going from more general to less general, which occasionally causes things like this to happen.</p>",
        "id": 390652667,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694584758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390652636\">said</a>:</p>\n<blockquote>\n<p>With formalization, not always the minimal set of axioms works well.  </p>\n</blockquote>\n<p>Thanks, that's what I wanted to have confirmed.</p>",
        "id": 390652824,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694584832
    },
    {
        "content": "<p>You can make the constructor which doesn't ask for a proof of this axiom and then proves it using the argument above; that way users don't have to prove it. Groups have both mul_one and one_mul and you don't need one of them, it's only there because they extend monoids that this happens. But Chris Hughes recently PRed constructors which don't need all these extra axioms. The actual definitions of things -- what's going on under the hood -- shouldn't be a mathematician's concern.</p>",
        "id": 390652845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694584851
    },
    {
        "content": "<p>Also, this is where someone comes along and says \"but there is a definition of groups that only uses one identity, why don't you use that?\".  The answer is that sometimes laying out your assumptions better and possibly with redundancies may simplify your life later on.</p>",
        "id": 390652858,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694584856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390652845\">said</a>:</p>\n<blockquote>\n<p>You can make the constructor which doesn't ask for a proof of this axiom and then proves it using the argument above; that way users don't have to prove it. Groups have both mul_one and one_mul and you don't need one of them, it's only there because they extend monoids that this happens. But Chris Hughes recently PRed constructors which don't need all these extra axioms. The actual definitions of things -- what's going on under the hood -- shouldn't be a mathematician's concern.</p>\n</blockquote>\n<p>Ok, great! I will look for examples. But I understand what you're saying: if somebody comes along and want to define an order on a specific field <code>F</code> that they are interested in, they should not have to prove that <code>0 &lt; 1</code>.</p>",
        "id": 390653132,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694585015
    },
    {
        "content": "<p>Look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6472\">#6472</a> for example. Chris makes new functions which take smaller axiom sets and produce rings and fields by proving the remaining axioms. The fact that this is not the <em>definition</em> doesn't matter. Mathematicians often say \"the following are equivalent... And a ring satisfying any one of these is said to be a DVR\" or whatever. Lean has to choose one of them to be the actual definition. But which one it chooses shouldn't be relevant to the user as long as they have access to the theorem.</p>",
        "id": 390653596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694585253
    },
    {
        "content": "<p>Yes, I am absolutely on board with this policy but it is helpful to have it spelled out explicitly.</p>",
        "id": 390653767,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694585352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390652178\">said</a>:</p>\n<blockquote>\n<p>I think that trying out the change and checking that none of the \"concrete\" types still satisfies the stronger version would help.</p>\n</blockquote>\n<p><em>All</em> of them, you mean?</p>",
        "id": 390657234,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694587268
    },
    {
        "content": "<p>Yaël, I edited my comment above, thanks!</p>",
        "id": 390658306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694587817
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 390696669,
        "sender_full_name": "James Borger",
        "timestamp": 1694602500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/LinearOrderedSemiring/near/390305291\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"225431\">James Borger</span>, do you care about semirings with linear orders? If so, do you think that <code>0 \\le a^2</code> is always true?</p>\n</blockquote>\n<p>8:55 PM</p>\n<p>There are some subrings with linear orders which I care about (e.g. the natural numbers). But I haven't had a need to think about the class of all linearly ordered semirings. For me, they don't form such a well-behaved class. For instance, they're not closed under cartesian products.</p>\n<p>(I hope this works. First time here. I was just summoned from the void.)</p>",
        "id": 390696772,
        "sender_full_name": "James Borger",
        "timestamp": 1694602540
    }
]