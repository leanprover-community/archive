[
    {
        "content": "<p>Given an arbitrary <code>(ι : Type*)</code> , given <code>(F : Finset ι)</code> is it possible to pick some <code>1,...,n</code> in <code>ℕ</code> to represent the elements of <code>F</code>? Or more generally to totally order the elements of <code>F</code>?</p>\n<p>(Given a Quadratic map <code>Q</code> and an element <code>a</code> of a free module, I'm wondering if it's possible to represent <code>Q(a)</code> as an upper triangular matrix?)</p>",
        "id": 394273926,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1696200894
    },
    {
        "content": "<p>There are some equivalences defined near <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Card.html#Finset.equivFin\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Card.html#Finset.equivFin</a> that might be helpful</p>",
        "id": 394274479,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696201207
    },
    {
        "content": "<p>Ah, thanks! This makes sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">F.equivFin.toFun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">F.equivFin.toFun</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 394336910,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1696229094
    },
    {
        "content": "<p>Or you could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.toList#doc\">docs#Finset.toList</a></p>",
        "id": 394337889,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696229491
    },
    {
        "content": "<p>For block matrices I need a map into a Type with <code>LT</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/LinearAlgebra/Matrix/Block.lean#L55\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/LinearAlgebra/Matrix/Block.lean#L55</a>  so I think  <code>F.equivFin.toFun</code> works better for that?</p>",
        "id": 394342405,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1696230901
    },
    {
        "content": "<p>After spending the evening thinking about it, this is where I've got to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">QuadraticForm</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">Finsupp.single</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">UTmatrix</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">ι</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Matrix.of</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.decEq</span> <span class=\"n\">ι</span>\n  <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">a.support</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">a.support</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a.support.equivFin.toFun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">H.1</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a.support.equivFin.toFun</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">H.2</span><span class=\"o\">⟩)</span> <span class=\"k\">then</span>\n      <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a.support.equivFin.toFun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">H.1</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a.support.equivFin.toFun</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">H.2</span><span class=\"o\">⟩)</span> <span class=\"k\">then</span>\n      <span class=\"n\">Q.exists_companion.choose</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 394519709,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1696284330
    },
    {
        "content": "<p>You should drop the <code>.toFun</code>s there, that's not the preferred spelling</p>",
        "id": 394523794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696286966
    }
]