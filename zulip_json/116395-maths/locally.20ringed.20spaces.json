[
    {
        "content": "<p>In <a href=\"https://github.com/semorrison/lean-category-theory/blob/master/src/category_theory/locally_ringed.lean\" target=\"_blank\" title=\"https://github.com/semorrison/lean-category-theory/blob/master/src/category_theory/locally_ringed.lean\"><code>lean-category-theory</code></a> I've added a definition of <code>locally_ringed_space</code>.</p>",
        "id": 133171105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795147
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def structure_sheaf := sheaf.{v+1 v} Œ± Ring\n\nstructure ringed_space :=\n(ùí™ : structure_sheaf Œ±)\n\nstructure locally_ringed_space extends ringed_space Œ± :=\n(locality : ‚àÄ x : Œ±, local_ring (stalk_at.{v+1 v} ùí™ x).1)\n</pre></div>",
        "id": 133171115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795162
    },
    {
        "content": "<p>and that seems to work (without even many sorries in earlier files :-)</p>",
        "id": 133171148,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795180
    },
    {
        "content": "<p>But there's quite a bit of work to do in order to actually construct examples.</p>",
        "id": 133171149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795200
    },
    {
        "content": "<p>Yeah! Let's do that instead of trying to prove 2 is not a square in Z and get depressed</p>",
        "id": 133171150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535795207
    },
    {
        "content": "<p>I thought I should try to do the sheaf of cts functions on a topological space.</p>",
        "id": 133171151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795216
    },
    {
        "content": "<p>Unfortunately there are going to be some difficulties.</p>",
        "id": 133171156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795235
    },
    {
        "content": "<p>In particular, at the moment <code>stalk_at</code> is just defined by:</p>\n<div class=\"codehilite\"><pre><span></span>def stalk_at (F : sheaf Œ± V) (x : Œ±) : V :=\ncolimit (F.near x)\n</pre></div>",
        "id": 133171180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795282
    },
    {
        "content": "<p>Unfortunately general colimits of rings are pretty gross. My plan had been to construct coequalizers and coproducts in CommRing,</p>",
        "id": 133171203,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795341
    },
    {
        "content": "<p>and then use general machinery to get colimits.</p>",
        "id": 133171208,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795348
    },
    {
        "content": "<p>However if you do that, it's going to be very hard to show that a stalk of the structure sheaf is actually germs of continuous functions at that point.</p>",
        "id": 133171213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795384
    },
    {
        "content": "<p>I think I'll need to change <code>colimit</code> in the definition of <code>stalk_at</code> to <code>directed_colimit</code> (or <code>filtered_colimit</code>?), show that the poset of neighbourhood of <code>x</code> is actually directed, and then separately give a formula for directed colimits of commutative rings.</p>",
        "id": 133171271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795471
    },
    {
        "content": "<p>That formula for directed colimits, when applied to the sheaf of continuous functions, should look exactly like germs.</p>",
        "id": 133171322,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795540
    },
    {
        "content": "<p>But if someone wants to do parts of this:</p>\n<ul>\n<li>define filtered categories, and filtered colimits</li>\n<li>construct instances of <code>has_coproducts</code>, <code>has_coequalizers</code>, and/or <code>has_filtered_limits</code> for <code>Ring</code></li>\n<li>show that continuous functions from a topological space to a topological ring forms a topological ring</li>\n<li>define germs of continuous functions</li>\n<li>show that germs are a local ring<br>\nthen it will get done faster. :-)</li>\n</ul>",
        "id": 133171386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795676
    },
    {
        "content": "<p>I'd love to work on all that, but I really think I should focus on completions of rings, otherwise the perfectoid project will be really stuck</p>",
        "id": 133172131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535797191
    },
    {
        "content": "<p>I definitely plan to define at least filtered categories and colimits</p>",
        "id": 133173786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535800357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, great! I just made a primitive first cut at filtered categories, and shows that inhabited directed posets are filtered.</p>",
        "id": 133174627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535802060
    },
    {
        "content": "<p>I was going to start trying to define filtered limits in <code>Ring</code>, but I think jetlag has caught up with me.</p>",
        "id": 133174638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535802083
    },
    {
        "content": "<p>I'm currently on a train anyways, but is there a branch somewhere where I can follow along with the limits etc.?</p>",
        "id": 133174783,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535802290
    },
    {
        "content": "<p>It's all happening in <code>master</code> of <code>lean-category-theory</code></p>",
        "id": 133174852,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535802375
    },
    {
        "content": "<p>Although I'm committing less often because I'm trying to be better and checking that it compiles before pushing :-)</p>",
        "id": 133174856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535802392
    },
    {
        "content": "<p>Ah yes, I see it.</p>",
        "id": 133175067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535802761
    },
    {
        "content": "<p>Yes, that's a nice thing to do when you have users :)</p>",
        "id": 133175080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535802798
    },
    {
        "content": "<p>Though maybe I could just work in a branch of your library for now</p>",
        "id": 133175086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535802822
    }
]