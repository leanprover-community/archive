[
    {
        "content": "<p>I'm having difficulty proving two seemingly trivial things involving <code>OfNat</code> and <code>Subtype</code> for <code>ConvexCone</code>s.</p>\n<p>The first sorry asks you to prove <code>‚Üë0 = 0</code>.  The rest of sorrys in the first instance are all similar to this.</p>\n<p>The second instance definition is not detecting  <code>AddCommMonoid S</code> which is just defined above!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Cone.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Nonneg.Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ConvexCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.Pointed</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Pointed.toAddCommMonoid</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">‚Ñï</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Function.Injective.addCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">Subtype.coe_injective</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- ‚ä¢ (OfNat.ofNat 0).val = OfNat.ofNat 0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">aesop</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"n\">n</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n    <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">-- AddCommMonoid { x // x ‚àà S }</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 379259116,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690481397
    },
    {
        "content": "<p>You shouldn't be using <code>haveI</code> with data. Does changing it to <code>let</code> make things any better?</p>",
        "id": 379260973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690481744
    },
    {
        "content": "<p>More generally it's often not a good idea to construct things which aren't proofs in tactic mode</p>",
        "id": 379261257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690481790
    },
    {
        "content": "<p>It does work! Two of the <code>sorry</code>s become trivial after replacing <code>have</code> with <code>let</code>! Thanks, I'll see if I can fix the remaining.</p>",
        "id": 379262496,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690482053
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 379269846,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690483514
    },
    {
        "content": "<p><code>have</code> and <code>haveI</code> mean \"check this term has this type and then forget the definition of the term\". For proofs this is fine but if you want to prove something about 0 then you'd better remember what the definition of it was.</p>",
        "id": 379269898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690483524
    },
    {
        "content": "<p>I see. For some reason I thought that Lean doesn't need to retain the <code>0</code> once the instances are defined.</p>",
        "id": 379270515,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690483642
    },
    {
        "content": "<p>So far I've managed to get this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Cone.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Nonneg.Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ConvexCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.Pointed</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Pointed.toAddCommMonoid</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"n\">hzero</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">‚ü©‚ü©</span>\n  <span class=\"n\">letI</span> <span class=\"n\">hsmul</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">‚Ñï</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">ConvexCone.Pointed</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hS</span><span class=\"o\">‚ü©</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Subtype.mk</span>\n        <span class=\"n\">exact</span> <span class=\"n\">S.smul_mem</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"n\">x.2</span> <span class=\"o\">}</span> <span class=\"o\">‚ü©</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Function.Injective.addCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">Subtype.coe_injective</span>\n  <span class=\"bp\">.</span> <span class=\"n\">aesop</span>\n  <span class=\"bp\">.</span> <span class=\"n\">aesop</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"n\">n</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n    <span class=\"bp\">.</span> <span class=\"n\">aesop</span>\n    <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">-- AddCommMonoid { x // x ‚àà S }</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 379270638,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690483665
    },
    {
        "content": "<p>Will keep hacking at it.</p>",
        "id": 379270653,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690483671
    },
    {
        "content": "<p>Making a term of type <code>Zero X</code> is just telling lean what the numeral <code>0</code> should actually point at, so it's important not to forget this if you want to do anything with 0 other than using the fact that there is some term with this name.</p>",
        "id": 379271049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690483764
    },
    {
        "content": "<p>Here is a problem with your set-up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Cone.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Nonneg.Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ConvexCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.Pointed</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">‚ü©‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>\n<p>Typeclass inference (the \"square bracket system\") just looks at a list of stuff in a database, but you add to the database with <code>instance</code>. In particular <code>hS</code> is not in that database (and it can't be added to it because <code>Pointed</code> isn't a class). So it won't be able to find the zero of S. Off the top of my head I can think of two fixes: firstly make <code>Pointed</code> into a class (I have no idea whether this is sensible because I don't know this part of the library at all, but if it is sensible then it is the preferred solution; then you could use <code>[Pointed S]</code>). Secondly, use the <code>Fact</code> hack (which is a hack, but which lets you put an arbitrary proposition in the typeclass inference system, although this idea doesn't scale so shouldn't be relied upon too much):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Cone.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Nonneg.Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ConvexCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">S.Pointed</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Fact.elim</span> <span class=\"n\">i</span><span class=\"o\">‚ü©‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 379275179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690484665
    },
    {
        "content": "<p>Here is a skeleton of how I would go about this with the Fact hack: note that I don't enter tactic mode with <code>by</code> until I am doing proofs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Cone.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Nonneg.Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ConvexCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">S.Pointed</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i.elim</span><span class=\"o\">‚ü©‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">‚Ñï</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">ConvexCone.Pointed</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">i.elim</span><span class=\"o\">‚ü©</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Subtype.mk</span>\n        <span class=\"n\">exact</span> <span class=\"n\">S.smul_mem</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"n\">x.2</span> <span class=\"o\">}</span> <span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Pointed.toAddCommMonoid</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Function.Injective.addCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"n\">n</span>\n        <span class=\"gr\">sorry</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379276701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690485031
    },
    {
        "content": "<p>Thank you! I'll work with this hack for now and open a separate thread about TypeClasses for <code>ConvexCone</code>s.</p>",
        "id": 379277680,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690485298
    },
    {
        "content": "<p>By the way, from what I understand you should not use <code>haveI</code> and <code>letI</code> outside of statements anymore, <code>have</code> and <code>let</code> should be enough</p>",
        "id": 379317740,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690498272
    },
    {
        "content": "<p>The times I've seen <code>haveI</code> and <code>letI</code> be useful are when one of the linters gets confused and claims you're not using a <code>have</code> because they don't spot that it's making typeclass inference work.</p>",
        "id": 379318130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690498506
    },
    {
        "content": "<p>Note that the intended way to use <code>Function.Injective.addCommMonoid</code> is to pre-declare all your instances up front globally with <code>instance</code>, rather than with <code>haveI</code> or <code>letI</code></p>",
        "id": 379318850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690498812
    },
    {
        "content": "<p>That also means you can write the trivial rfl lemmas about those instance before you go on to prove anything</p>",
        "id": 379318891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690498836
    },
    {
        "content": "<p>Regarding the typeclasses, I think <code>Fact S.Pointed</code> is a totally acceptable hack for the purpose of getting this working (and even for merging into mathlib), and is exactly why <code>Fact</code> exists</p>",
        "id": 379319222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690498969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/OfNat.2C.20Subtypes.20issues.20for.20ConvexCone.2EPointed/near/379318850\">said</a>:</p>\n<blockquote>\n<p>Note that the intended way to use <code>Function.Injective.addCommMonoid</code> is to pre-declare all your instances up front globally with <code>instance</code>, rather than with <code>haveI</code> or <code>letI</code></p>\n</blockquote>\n<p>I tried this (before I knew about <code>Fact</code>) and could not get Lean to \"remember\" the typeclasses. But now with <code>Fact Pointed</code> I'll setup the intermediary instances first. I'll also stick with <code>Fact</code> instead of introducing new typeclasses.</p>",
        "id": 379349404,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690514037
    },
    {
        "content": "<p>I thought a rule was that <code>Fact</code> should not cross file boundaries, i.e. only local instances? Or am I hopelessly out of date? :-)</p>",
        "id": 379374928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690526643
    },
    {
        "content": "<p>Not sure if out of date with the rule or the practice, but probably at least one of them :)</p>",
        "id": 379375852,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690526943
    },
    {
        "content": "<p>Scott, I think you're correctly remembering that <code>instance : Fact P</code> should be used very sparingly</p>",
        "id": 379403675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690532360
    },
    {
        "content": "<p>But <code>Instance [Fact P] : Foo</code> is fine</p>",
        "id": 379403972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690532403
    },
    {
        "content": "<p>I now need the <code>pointed</code> instance for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.innerDualCone#doc\">docs#Set.innerDualCone</a> using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pointed_innerDualCone#doc\">docs#pointed_innerDualCone</a>. This looks like a <code>instance [Fact P] := ...</code> situation :(</p>",
        "id": 380385016,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690816590
    },
    {
        "content": "<p>That's fine, that's the one that's not a problem!</p>",
        "id": 380425618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690822945
    },
    {
        "content": "<p>BTW, do discrimination trees make <code>instance : Fact P</code> less bad?</p>",
        "id": 380437247,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690825236
    },
    {
        "content": "<p>I think it's just bad because it's not clear where to draw the line that stops every lemma being re-stated as a fact</p>",
        "id": 380437560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690825302
    },
    {
        "content": "<p>The current way to draw that line is \"make someone invent a new typeclass for a specific family of <code>P</code>s, and review whether it makes sense\"</p>",
        "id": 380437860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690825356
    },
    {
        "content": "<p>BTW, should we turn some predicates that are often used as <code>Fact (p _)</code> into typeclasses? E.g., we often use <code>Fact (Prime _)</code></p>",
        "id": 380437898,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690825367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/OfNat.2C.20Subtypes.20issues.20for.20ConvexCone.2EPointed/near/380425618\">said</a>:</p>\n<blockquote>\n<p>That's fine, that's the one that's not a problem!</p>\n</blockquote>\n<p>Oops I meant the other one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <code>instance : [Fact Pointed]</code>. I want to say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>P</mi><mo>‚äï</mo><mi>Q</mi><msup><mo stretchy=\"false\">)</mo><mo>‚àó</mo></msup><mo>‚âÖ</mo><msup><mi>P</mi><mo>‚àó</mo></msup><mo>‚äï</mo><msup><mi>Q</mi><mo>‚àó</mo></msup></mrow><annotation encoding=\"application/x-tex\">(P \\oplus Q)^* \\cong P^* \\oplus  Q^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">‚äï</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">‚àó</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚âÖ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.772em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">‚àó</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">‚äï</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8831em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">‚àó</span></span></span></span></span></span></span></span></span></span></span> but for this I need the fact that <code>P*</code> (the dual cone of <code>P</code>) is always pointed i.e. <code>instance : Fact Pointed P^*</code></p>",
        "id": 380440327,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690825833
    },
    {
        "content": "<p>Have you considered <code>structure PointedCone extends ConvexCone</code>? Is the issue that you also need <code>PointedProperCone</code>?</p>",
        "id": 380443514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690826469
    },
    {
        "content": "<p>I haven't tried it seriously as <code>[Fact Pointed]</code> was doing great thus far. I will try the <code>PointedCone</code> structure and see if it helps.</p>",
        "id": 380449385,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690827706
    },
    {
        "content": "<p>Back to the typeclass issue :( Lean is not converting <code>OfNat.ofNat 0</code> to <code>0</code>. The same code works if I use <code>[Fact S.Pointed]</code> instead. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Cone.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Nonneg.Ring</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PointedCone</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n     <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">ConvexCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àà</span> <span class=\"n\">carrier</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PointedCone</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">PointedCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ConvexCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">K.1</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ext'</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">((</span><span class=\"bp\">‚Üë</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ConvexCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">S</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">T</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SetLike</span> <span class=\"o\">(</span><span class=\"n\">PointedCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K.carrier</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">PointedCone.ext'</span> <span class=\"o\">(</span><span class=\"n\">SetLike.coe_injective</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Module</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ùïú‚â•0\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">S.zero_mem'</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.coercions</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"n\">hasSmul</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"bp\">ùïú‚â•</span><span class=\"mi\">0</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">‚ü®</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">hzero</span> <span class=\"n\">hpos</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">hzero</span><span class=\"o\">]</span>\n      <span class=\"c\">/-</span>\n<span class=\"cm\">      tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">        OfNat.ofNat 0 ‚Ä¢ ?m</span>\n\n<span class=\"cm\">      case inl</span>\n<span class=\"cm\">      ùïú:¬†Type ?u.6679</span>\n<span class=\"cm\">      inst‚úù¬≥:¬†OrderedSemiring ùïú</span>\n<span class=\"cm\">      E:¬†Type ?u.6685</span>\n<span class=\"cm\">      inst‚úù¬≤:¬†AddCommMonoid E</span>\n<span class=\"cm\">      inst‚úù¬π:¬†SMul ùïú E</span>\n<span class=\"cm\">      inst‚úù:¬†Module ùïú E</span>\n<span class=\"cm\">      S:¬†PointedCone ùïú E</span>\n<span class=\"cm\">      x‚úù¬π:¬†{ c // OfNat.ofNat 0 ‚â§ c }</span>\n<span class=\"cm\">      x‚úù:¬†{ x // x ‚àà S }</span>\n<span class=\"cm\">      c:¬†ùïú</span>\n<span class=\"cm\">      hc:¬†OfNat.ofNat 0 ‚â§ c</span>\n<span class=\"cm\">      x:¬†E</span>\n<span class=\"cm\">      hx:¬†x ‚àà S</span>\n<span class=\"cm\">      hzero:¬†OfNat.ofNat 0 = c</span>\n<span class=\"cm\">      ‚ä¢ OfNat.ofNat 0 ‚Ä¢ x ‚àà S</span>\n<span class=\"cm\">      -/</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">S.smul_mem</span> <span class=\"n\">hpos</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Module</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PointedCone</span>\n</code></pre></div>\n<p>It's hard to come up with a shorter <code>mwe</code> for this as the first time you see an error is when using the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>‚àà</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">0 \\in S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚àà</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</p>",
        "id": 380456945,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690829291
    },
    {
        "content": "<p>Here's the same code but with <code>Fact</code> that works: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Cone.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Nonneg.Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ùïú‚â•0\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ConvexCone.Pointed</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Module</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ConvexCone</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">S.Pointed</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hS.elim</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hasSmul</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"bp\">ùïú‚â•</span><span class=\"mi\">0</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">‚ü®</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">hzero</span> <span class=\"n\">hpos</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">hzero</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">zero_mem</span><span class=\"o\">]</span>     <span class=\"c1\">--works!</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">S.smul_mem</span> <span class=\"n\">hpos</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Module</span>\n<span class=\"kd\">end</span> <span class=\"n\">ConvexCone.Pointed</span>\n</code></pre></div>",
        "id": 380458522,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690829623
    },
    {
        "content": "<p>Does using <code>(zero_smul)</code> or <code>zero_smul _ _</code> help?</p>",
        "id": 380471987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690832139
    },
    {
        "content": "<p>No :( <br>\nNeither does <code>simp_rw</code></p>",
        "id": 380478998,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690833600
    },
    {
        "content": "<p>Ok, I figured out the issue. There were two instance on <code>E</code> <code>[Smul k E]</code> and <code>[Module k E]</code> in the first example. When I got rid of one of them, the error went away.</p>",
        "id": 380482617,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690834463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 380484090,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690834908
    },
    {
        "content": "<p>Thanks for your help btw!</p>",
        "id": 380487889,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690836087
    }
]