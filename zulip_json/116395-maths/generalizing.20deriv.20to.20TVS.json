[
    {
        "content": "<p>It seems that I've missed this thread in 2022. I suggest that we redefine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fderiv\">docs#fderiv</a> in similar terms. What do you think?</p>",
        "id": 359284921,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684368869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 359287421,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684370124
    },
    {
        "content": "<p>We can redefine <code>has_fderiv_at f f' a</code> as <code>‚àÄ (U ‚àà ùìù 0) (r' ‚â† 0) s, is_vonN_bounded ùïú s ‚Üí ‚àÄ·∂† r : ùïú in ùìù[‚â†] 0, maps_to (Œª x, f (a + x) - f a - f' x) (r ‚Ä¢ s) (r' ‚Ä¢ r ‚Ä¢ U)</code> (not tested, may contain typos)</p>",
        "id": 359288092,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684370440
    },
    {
        "content": "<p>BTW, we can redefine topology on multilinear forms in a similar way.</p>",
        "id": 359290094,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684371471
    },
    {
        "content": "<p>Then many facts will work without norms.</p>",
        "id": 359290167,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684371487
    },
    {
        "content": "<p>(though proofs will be harder)</p>",
        "id": 359290197,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684371505
    },
    {
        "content": "<p>I think we had a similar discussion before. I am generally in favor of this, however there might be subtleties when it comes to higher derivatives. The only reference for something like this I know is Hamilton's 1982 paper on Nash-Moser theory and he uses directional derivatives and I don't know whether his smoothness is the same as your proposed smoothness (which would make mathlib's smooth Fr√©chet manifolds weaker).</p>",
        "id": 359290465,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684371628
    },
    {
        "content": "<p>I suggest that the following plan (each step is 1 or more PRs):</p>\n<ol>\n<li>Drop <code>has_fderiv_at_filter</code>, leave only <code>has_fderiv_within_at</code> and <code>has_fderiv_at</code> (defined as <code>has_fderiv_within_at ... univ</code>).</li>\n<li>Redefine <code>has_fderiv_within_at</code> for topological vector spaces. Prove equivalence to the old definition, leave all theorems as is.</li>\n<li>Gradually migrate theorems to topological vector spaces.</li>\n</ol>",
        "id": 359291284,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684372190
    },
    {
        "content": "<p>Do you have an application in mind? I have no objection in theory, but I am not sure I see the point yet.</p>",
        "id": 359325631,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1684396367
    },
    {
        "content": "<p>I have one; I can't talk about derivatives of matrix functions because to even state the results I have to choose a norm</p>",
        "id": 359326930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684396822
    },
    {
        "content": "<p>This <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> and some other finite dimensional spaces.</p>",
        "id": 359326984,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684396850
    },
    {
        "content": "<p>So right now if I wanted to write down how derivatives (by a scalar) distribute across a matrix product, I need to repeat the lemma for every currently-available norm on matrices (I think we have 3 right now via <code>local attribute [instance]</code> and nothing globally)</p>",
        "id": 359327042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684396869
    },
    {
        "content": "<p>Your lemmas should be true for any norm on matrices, so why not write them right away in this generality?</p>",
        "id": 359327700,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1684397150
    },
    {
        "content": "<p>What other examples of \"canonical topology, no canonical norm\" do we have?</p>",
        "id": 359328190,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684397300
    },
    {
        "content": "<p>This came up in a discussion with <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> about tensor products of vector bundles. But in that case there is no canonical topology either.</p>",
        "id": 359329167,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684397660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/Topology.20on.20continuous_maps.20without.20a.20norm/near/359327700\">said</a>:</p>\n<blockquote>\n<p>Your lemmas should be true for any norm on matrices, so why not write them right away in this generality?</p>\n</blockquote>\n<p>How do you suggest I state something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_deriv_at.matrix_mul</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y'</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">X</span> <span class=\"n\">X'</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚¨ù</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"bp\">‚¨ù</span> <span class=\"n\">Y</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"n\">r</span> <span class=\"bp\">‚¨ù</span> <span class=\"n\">Y'</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n</code></pre></div>",
        "id": 359331146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684398342
    },
    {
        "content": "<p>Can you add some typeclasses here? You need some topology somewhere.</p>",
        "id": 359331312,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1684398413
    },
    {
        "content": "<p>Sure, here's the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, extracted from <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook/blob/096e48ea7226daf02d62f2d65adb5fe3611a7a0f/src/matrix_cookbook/for_mathlib/analysis/matrix.lean#L32-L41\">lean-matrix-cookbook</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">matrix.normed_add_comm_group</span> <span class=\"n\">matrix.normed_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_deriv_at_matrix</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">r</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"n\">has_deriv_at_pi</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_deriv_at.matrix_mul</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y'</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">X</span> <span class=\"n\">X'</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚¨ù</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"bp\">‚¨ù</span> <span class=\"n\">Y</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"n\">r</span> <span class=\"bp\">‚¨ù</span> <span class=\"n\">Y'</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_deriv_at_matrix</span> <span class=\"n\">at</span> <span class=\"bp\">‚ä¢</span> <span class=\"n\">hX</span> <span class=\"n\">hY</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.add_apply</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span><span class=\"n\">finset.sum_add_distrib</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">has_deriv_at.sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 359331411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684398460
    },
    {
        "content": "<p>But I cheated, this is only about <code>matrix.normed_space</code> and not the other norms</p>",
        "id": 359331479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684398482
    },
    {
        "content": "<p>I‚Äôve spent some time a year ago thinking about how to get meaningful differentiability (which really means a good notion of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_o\">docs#is_o</a>) without any norm, specifically for the case of finite dimensional vector spaces where we don‚Äôt want to impose the norm, but I didn‚Äôt think about using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_vonN_bounded\">docs#is_vonN_bounded</a> for that. This is interesting, do you have any reference ? (Or maybe this is well known and I‚Äôm just not aware of it)</p>",
        "id": 359331565,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684398504
    },
    {
        "content": "<p>I can't write <code>[normed_add_comm_group (matrix m n R)] [normed_space R (matrix m n R)]</code> because then I get a nonsense addition on the matrices that might not be elementwise</p>",
        "id": 359331610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684398520
    },
    {
        "content": "<p>In this generality, it's definitely not true for all norms (since norms are not all equivalent as you're  not assuming your field is complete).</p>",
        "id": 359331901,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1684398612
    },
    {
        "content": "<p>But I agree I don't see a neat way to write it for all norms even if your field is nice, because <code>normed_add_comm_group</code> can't be expressed with a mixin.</p>",
        "id": 359332103,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1684398717
    },
    {
        "content": "<p><del>However, I wouldn't see a way to write it for all topologies either, for the same reason.</del></p>",
        "id": 359332264,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1684398759
    },
    {
        "content": "<p>One case I‚Äôve heard about a few weeks ago is when you have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_seminorms\">docs#with_seminorms</a>, then it makes perfect sense to say that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_o\">docs#is_o</a> means \"<code>is_o</code> with respect to each seminorm\" and then I think that agrees with the version Yury gave</p>",
        "id": 359332332,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684398788
    },
    {
        "content": "<p>Scratch that, for topologies we can definitely use mixins.</p>",
        "id": 359332348,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1684398795
    },
    {
        "content": "<p>For matrices that‚Äôs no problem anyway, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.topological_space\">docs#matrix.topological_space</a></p>",
        "id": 359332499,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684398844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Topology.20on.20continuous_maps.20without.20a.20norm/near/359331565\">said</a>:</p>\n<blockquote>\n<p>I‚Äôve spent some time a year ago thinking about how to get meaningful differentiability (which really means a good notion of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_o\">docs#is_o</a>) without any norm, specifically for the case of finite dimensional vector spaces where we don‚Äôt want to impose the norm, but I didn‚Äôt think about using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_vonN_bounded\">docs#is_vonN_bounded</a> for that. This is interesting, do you have any reference ? (Or maybe this is well known and I‚Äôm just not aware of it)</p>\n</blockquote>\n<p>I don't know about references. I just made it up.</p>",
        "id": 359334182,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684399456
    },
    {
        "content": "<p>Possibly, there are better ways to generalize it to topological vector spaces - I don't know.</p>",
        "id": 359334283,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1684399487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/Topology.20on.20continuous_maps.20without.20a.20norm/near/359332103\">said</a>:</p>\n<blockquote>\n<p>But I agree I don't see a neat way to write it for all norms even if your field is nice, because <code>normed_add_comm_group</code> can't be expressed with a mixin.</p>\n</blockquote>\n<p>I attempted to change it to be a mixin in <a href=\"https://github.com/leanprover-community/mathlib/pull/18462\">#18462</a>, but that's lost to the porting tide now (and wasn't looking promising performance-wise)</p>",
        "id": 359335635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684399908
    },
    {
        "content": "<p>I've occasionally mused about generalising <code>fderiv</code> in another direction, where we weaken the <code>module</code> structure on the domain so that the axioms <code>smul_add</code> and <code>add_smul</code> are only required to hold for sufficiently small scalars. The motivation is that the circle (or tori) possess such scalar actions so we could speak of smooth functions on them without having to regard them as manifolds.</p>",
        "id": 359337490,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1684400461
    },
    {
        "content": "<p>(I'm not seriously suggesting we actually do this.)</p>",
        "id": 359337539,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1684400479
    },
    {
        "content": "<p>Why is <code>deriv</code> defined from a normed field to a <strong>normed</strong> vector space? For example this <a href=\"https://en.wikipedia.org/wiki/Differentiable_vector%E2%80%93valued_functions_from_Euclidean_space\">wiki article</a> talks about well defined and well behaved derivative from finite dimensional spaces to a general topological vector space. Is this because <code>deriv</code> is defined through <code>fderiv</code>?</p>\n<hr>\n<p><strong>edit</strong>: this was originally the first post in this thread but earlier discussion from a different thread was moved here. Also those two threads got interleaved so it is a bit incoherent right now ...</p>",
        "id": 364340755,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686156742
    },
    {
        "content": "<p>I think there was a recent discussion about generalizing both, but I'm on mobile so I can't find it now.</p>",
        "id": 364350680,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686159116
    },
    {
        "content": "<p>A link to such discussion would be appreciated, I did some searching but I couldn't find any relevant discussions.</p>",
        "id": 364352602,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686159561
    },
    {
        "content": "<p>Maybe <a href=\"#narrow/stream/116395-maths/topic/Topology.20on.20continuous_maps.20without.20a.20norm/near/359326930\">this thread</a>?</p>",
        "id": 364355924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686160419
    },
    {
        "content": "<p>Probably, we should generalize it but this can't be done before the port is over.</p>",
        "id": 364366939,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686163147
    },
    {
        "content": "<p>Waiting for the port to be done makes total sense. I was curious what are the thoughts on this topic as I need the generalization for my project.</p>",
        "id": 364385108,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686168366
    },
    {
        "content": "<p>Since this thread has been linked from somewhere else, I just want to add that the second part of this discussions is not really related to the original topic: unless I‚Äôm missing something obvious, the topology on continuous linear maps does not matter here</p>",
        "id": 364389474,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686169880
    },
    {
        "content": "<p>I initialized the other thread and my motivation for generalizing derivative and differentiability is to allow for isomorphism: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi mathvariant=\"normal\">‚àû</mi></msup><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mo>‚âÖ</mo><msup><mi>C</mi><mi mathvariant=\"normal\">‚àû</mi></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo separator=\"true\">,</mo><msup><mi>C</mi><mi mathvariant=\"normal\">‚àû</mi></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C^\\infty(\\mathbb{R}^2, \\mathbb{R}) \\cong C^\\infty(\\mathbb{R}, C^\\infty(\\mathbb{R}, \\mathbb{R})) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚âÖ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">))</span></span></span></span> which requires to define suitable topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi mathvariant=\"normal\">‚àû</mi></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C^\\infty(\\mathbb{R}, \\mathbb{R})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>After this is done, I want to do some variational calculus calculations.</p>",
        "id": 364391946,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686170770
    },
    {
        "content": "<p>What topology are you proposing to put on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi mathvariant=\"normal\">‚àû</mi></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C^\\infty(\\R,\\R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> to make that assertion true?</p>",
        "id": 364392418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686170948
    },
    {
        "content": "<p>The topology of uniform convergence on compact sets of each derivative separately, see <a href=\"https://en.wikipedia.org/wiki/Convenient_vector_space#Main_properties_of_smooth_calculus\">wiki on convenient vector spaces</a>.</p>",
        "id": 364393642,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686171397
    },
    {
        "content": "<p>You can define such topology for any locally convex TVS with some mild completeness condition and you have a general isomoprhism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi mathvariant=\"normal\">‚àû</mi></msup><mo stretchy=\"false\">(</mo><mi>X</mi><mo>√ó</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>Z</mi><mo stretchy=\"false\">)</mo><mo>‚âÖ</mo><msup><mi>C</mi><mi mathvariant=\"normal\">‚àû</mi></msup><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><msup><mi>C</mi><mi mathvariant=\"normal\">‚àû</mi></msup><mo stretchy=\"false\">(</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>Z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C^\\infty(X\\times Y,  Z) \\cong C^\\infty(X, C^\\infty(Y, Z))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚âÖ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">))</span></span></span></span></p>",
        "id": 364394020,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686171535
    },
    {
        "content": "<p>Oh nice! I could see that it would have to be subtle but I didn't know the answer.</p>",
        "id": 364394623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686171727
    },
    {
        "content": "<p>It is kind of messed up because you end up with functions that are differentiable but not continuous.</p>",
        "id": 364394763,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686171785
    },
    {
        "content": "<p>What are your applications?</p>",
        "id": 364394923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686171844
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 364394994,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686171875
    },
    {
        "content": "<p>Let me move the second part of this thread to the new one.</p>",
        "id": 364395071,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686171912
    },
    {
        "content": "<p>I'm working on symbolic and automatic differentiation for SciLean and if I hope to have it verified I need this generalization of derivative.</p>",
        "id": 364395115,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686171931
    },
    {
        "content": "<p>40 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Topology.20on.20continuous_maps.20without.20a.20norm\">#maths &gt; Topology on continuous_maps without a norm</a> by <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span>.</p>",
        "id": 364395175,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686171957
    },
    {
        "content": "<p>Now the history looks a bit strange ;)</p>",
        "id": 364395492,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686172049
    },
    {
        "content": "<p>ohh well <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span> I added a small explanation to my first post at least.</p>",
        "id": 364395797,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686172194
    },
    {
        "content": "<p>To get back to your original question, I think the reason we don't have this easy generalization (talking about <code>deriv</code> here, not <code>fderiv</code>) is indeed because we tend to see <code>deriv</code> as the one-dimensional Fr√©chet derivative instead of the one-dimensional G√¢teaux d√©rivative. Of course they give the same notion, but because we want the APIs of <code>fderiv</code> and <code>deriv</code> to be similar we probably miss some easy generalizations of <code>deriv</code>.</p>",
        "id": 364400543,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686174146
    },
    {
        "content": "<p>But we can generalize <code>fderiv</code> too (see above)</p>",
        "id": 364408017,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686177591
    },
    {
        "content": "<p>So, the answer is: at the time derivatives were added to <code>mathlib</code> (~4 years ago), nobody cared about this generality.</p>",
        "id": 364408159,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686177644
    },
    {
        "content": "<p>I agree, my point (and I think Tomas' original message too) was about the fact that the generalization to TVS of <code>deriv</code> is way easier: you can just take the usual limit of <code>(f (x + h) - f x) / h</code> and you don't need any more machinery. But if we make the generalization you suggest (and check that it is indeed a strict generalization of this) then that's even better.</p>",
        "id": 364408937,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686178040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I'm not familiar with von Neumann bounded sets. Do you know the relationship between your suggested generalization and differentiability between convenient vector spaces?</p>",
        "id": 364409036,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686178085
    },
    {
        "content": "<p>What definition are you talking about? I don't know any references on the subject. I made up the definition above in some conversation.</p>",
        "id": 364410072,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686178611
    },
    {
        "content": "<p>Wikipedia says that it is possible to generalize derivatives to TVS \"in muliple ways\" but doesn't give references.</p>",
        "id": 364410164,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686178659
    },
    {
        "content": "<p>I think that my definition should be equivalent to <a href=\"https://en.wikipedia.org/wiki/Fr%C3%A9chet_derivative#Generalization_to_topological_vector_spaces\">https://en.wikipedia.org/wiki/Fr%C3%A9chet_derivative#Generalization_to_topological_vector_spaces</a></p>",
        "id": 364410952,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686179070
    },
    {
        "content": "<p>UPD: my definition is a bit different but should be equivalent for \"nice\" TVS domains (probably, locally bounded).</p>",
        "id": 364411280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686179272
    },
    {
        "content": "<p>I guess, we should use the one from Wikipedia instead. UPD: but we need to generalize it to any normed field instead of real numbers.</p>",
        "id": 364411446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686179363
    },
    {
        "content": "<p>Should we add a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Asymptotics.IsLittleO#doc\">docs4#Asymptotics.IsLittleO</a> for TVS?</p>",
        "id": 364411662,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686179485
    },
    {
        "content": "<p>We can't generalize this definition becase it doesn't require a vector space structure; some properties work for a normed group.</p>",
        "id": 364411777,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686179532
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/lf_dRC-2zqtSC8P9AnpUmVJa/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lf_dRC-2zqtSC8P9AnpUmVJa/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/lf_dRC-2zqtSC8P9AnpUmVJa/image.png\"></a></div><p><span aria-label=\"angry\" class=\"emoji emoji-1f620\" role=\"img\" title=\"angry\">:angry:</span></p>",
        "id": 364411795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686179539
    },
    {
        "content": "<p>What would the TVS version look like?</p>",
        "id": 364411926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686179627
    },
    {
        "content": "<p>We need special support for <code>irreducible_def</code> in doc-gen4</p>",
        "id": 364411944,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686179640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/generalizing.20deriv.20to.20TVS/near/364411926\">said</a>:</p>\n<blockquote>\n<p>What would the TVS version look like?</p>\n</blockquote>\n<p>Probably it would look the same</p>",
        "id": 364412004,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686179664
    },
    {
        "content": "<p>I meant, what would the lean definition look like, not the docs!</p>",
        "id": 364412021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686179690
    },
    {
        "content": "<p>/me is thinking</p>",
        "id": 364412137,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686179763
    },
    {
        "content": "<p>Not tested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Asymptotics.Asymptotics</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsLittleOTVS</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">U</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">Tendsto</span> <span class=\"n\">œÜ</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span>\n      <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">,</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">a</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">œÜ</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">b</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">b</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">a</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">U</span>\n</code></pre></div>",
        "id": 364413320,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686180567
    },
    {
        "content": "<p>Trying to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isLittleOTVS_iff_isLittleO</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsLittleOTVS</span> <span class=\"bp\">ùïú</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 364413666,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686180778
    },
    {
        "content": "<p>This <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> definition is wrong. Thinking.</p>",
        "id": 364414318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686181262
    },
    {
        "content": "<p>You can always take <code>U = univ</code></p>",
        "id": 364414345,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686181279
    },
    {
        "content": "<p>(no, you can almost always take <code>a = 0</code> to fail the definition)</p>",
        "id": 364414368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686181319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/generalizing.20deriv.20to.20TVS/near/364410072\">said</a>:</p>\n<blockquote>\n<p>What definition are you talking about? I don't know any references on the subject. I made up the definition above in some conversation.</p>\n</blockquote>\n<p>I would say that <code>f : E ‚Üí F</code> is differentiable at <code>x</code> if for every curve <code>Œ≥ : ùïú ‚Üí E</code> differentiable at <code>0</code> and <code>Œ≥ 0 = x</code> the curve <code>f ‚àò Œ≥ : ùïú ‚Üí F</code> is differentiable at <code>0</code>.</p>\n<p>Is that reasonable generalization? If you require smoothness in the definition then based on <a href=\"https://en.wikipedia.org/wiki/Convenient_vector_space#Main_properties_of_smooth_calculus\">wiki</a> this should recover any reasonable definition of smoothness for Frechet spaces.</p>",
        "id": 364415524,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686182166
    },
    {
        "content": "<p>This is not a generalization of Frechet derivative.</p>",
        "id": 364416427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686182786
    },
    {
        "content": "<p>For a normed vector space, it is not equivalent to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasFDerivAt#doc\">docs4#HasFDerivAt</a></p>",
        "id": 364416517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686182864
    },
    {
        "content": "<p>I see, then I do not understand these things properly. Why is not equivalent? Is there a counter example?</p>",
        "id": 364416800,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686183042
    },
    {
        "content": "<p>The problem is with \"if you require smoothness\"</p>",
        "id": 364417337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686183435
    },
    {
        "content": "<p>First of all, your definition does not involve any continuous linear map.</p>",
        "id": 364417362,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686183457
    },
    {
        "content": "<p>I think that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><msup><mi>x</mi><mn>3</mn></msup><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">f(x, y)=\\frac{x^3}{x^2+y^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.499em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0179em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> is differentiable at zero in the sense of curves but it is not Frechet differentiable.</p>",
        "id": 364417731,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686183698
    },
    {
        "content": "<p>Ahh right, it is mentioned here <a href=\"https://ncatlab.org/nlab/show/Boman%27s+theorem\">https://ncatlab.org/nlab/show/Boman%27s+theorem</a></p>\n<p>My final suggestion would be:<br>\n<code>f : E ‚Üí F</code> is differentiable at <code>x</code> if for every <code>Œ≥ : ùïú√óùïú ‚Üí E</code> differentiable at 0 and Œ≥ 0 = x the <code>f ‚àò Œ≥ : ùïú√óùïú ‚Üí F</code> is differentiable at 0.</p>\n<p>but I really do not understand these things in depth, so I should stop suggesting anything further :)</p>",
        "id": 364418226,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686184037
    },
    {
        "content": "<p>I proved that the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Asymptotics.Asymptotics</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecificLimits.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">Pointwise</span> <span class=\"n\">Asymptotics</span> <span class=\"n\">Metric</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">TVS</span>\n\n<span class=\"kd\">variable</span>  <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsLittleOTVS</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">U</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">‚Üí</span>\n    <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">b</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">,</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">a</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">b</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚àß</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">a</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">U</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">TVS</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isLittleOTVS_iff_isLittleO</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsLittleOTVS</span> <span class=\"bp\">ùïú</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">_</span>\n</code></pre></div>\n<p>The proof is in branch4#YK-isO-TVS</p>",
        "id": 364444748,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686201795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> We will definitely need to have different higher-dimensional-domain derivatives at some point (or rather of differentiability I guess, since when they are defined they all agree) anyway, the key point being that <code>fderiv</code> should keep being the usual one in the case of normed spaces. That said, I would guess and hope that we can stay with only one version in the case of one dimensional domain.</p>",
        "id": 364534081,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686225029
    },
    {
        "content": "<p>One thing I do not understand is what is the motivation to have Frechet derivative as the base definition? If a function has Frechet derivative then it has Gateaux derivative. Why not have Gateaux derivative as the basic definition and have theorem that on nice spaces and under nice differentiability conditions it is Frechet derivative.</p>",
        "id": 364541088,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686226570
    },
    {
        "content": "<p>You want a notion that has nice properties, in the sense that it makes it possible to prove nice theorems. For instance the local inverse theorem, which says that if the derivative is invertible then the map is locally invertible. Or the implicit function theorem. These are true for the Fr√©chet derivative, but not for the Gateaux derivative. In a sense, Gateaux derivative is a nice gadget, but not useful to prove theorems. While Fr√©chet derivative is the fundamental notion.</p>",
        "id": 364542784,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1686226935
    },
    {
        "content": "<p>Wikipedia says:</p>\n<blockquote>\n<p>If F is Fr√©chet differentiable, then it is also Gateaux differentiable, and its Fr√©chet and Gateaux derivatives agree</p>\n</blockquote>\n<p>If this is actually true in general and not just for the cases wikipedia cares about, then presumably the answer to \"Why not have Gateaux derivative as the basic definition\" is \"it's convenient to have the derivative <code>fderiv</code> bundled as a multilinear map\"?</p>",
        "id": 364547065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686227877
    },
    {
        "content": "<p>You could have a definition of a derivative as \"if there is a continuous linear map which gives the directional derivative in every direction, then use it, and otherwise take <code>0</code>\". This would be the Gateaux derivative in mathlib conventions. And it would be essentially useless because it doesn't have nice properties without further assumptions which amount to saying that the function is in fact Fr√©chet-differentiable. For instance, a function which is Gateaux-differentiable at a point doesn't have to be continuous there. Or, the composition of two Gateaux-differentiable maps is not in general Gateaux-differentiable. It's just a bad notion from the mathematical point of view.</p>",
        "id": 364550766,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1686228564
    },
    {
        "content": "<p>Inverse theorem needs strict differentiability, not only Fr√©chet.</p>",
        "id": 364557484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686229902
    },
    {
        "content": "<p>You can define Gateaux derivative using Fr√©chet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">HasDirDerivAt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">lineMap</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">f'</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dirDeriv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">lineMap</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GateauxDifferentiableAt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">DifferentiableAt</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">lineMap</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 364558285,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686230057
    },
    {
        "content": "<p>I think the only thing I'm suggesting is to have <code>deriv</code> and it's bundled version <code>fderiv</code> as general as possible and then of course have theorems about them with different notions of differentiability. </p>\n<p>I would like to formalize Convenient Vector spaces, define a new notion of differentiability and reuse mathlib's <code>deriv</code> but I can't do that as it is restricted to normed spaces.</p>",
        "id": 364561297,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686230694
    },
    {
        "content": "<p>This is a very niche and exotic notion. Are you sure you really need that for your formalization, instead of sticking with more mainstream and established mathematics?</p>",
        "id": 364563493,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1686231154
    },
    {
        "content": "<p>I want to formalize computations in variational calculus, in particular calculations commonly done by physicists in mechanics or thermodynamics.</p>\n<p>Using lebesgue/sobolev spaces is annoying as you have to deal with integrability which is completely unrelated to why you would do those computations.</p>\n<p>I really want to work with smooth functions, but they do not behave well w.r.t. standard notions of vector spaces.</p>\n<p>That is why I want to use convenient vector spaces, I get smooth functions and cartesian closed category which simplifies lot of arguments.</p>",
        "id": 364581914,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1686234554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Once we generalize Fr√©chet derivatives, you can define Gateaux derivatives as above, if you need them.</p>",
        "id": 364592820,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686236491
    },
    {
        "content": "<p>What do we need to assume about topology on the (co)domain to have <code>IsLittleOTVS.add</code>? The problem is that we can choose different <code>a</code>s.</p>",
        "id": 364611247,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686239967
    },
    {
        "content": "<p>If <code>ùïú</code> were <code>‚Ñù</code> there would be no problem right? Because then if you get <code>a‚ÇÅ</code> and <code>a‚ÇÇ</code> for the individuals, you can take <code>a := ‚à•a‚ÇÅ‚à• + ‚à•a‚ÇÇ‚à•</code> for the sum. Just trying to make sure I understand the issue. (In my head the problem isn't that you have two <code>a</code>s, it's that you don't know how to make them \"point in the same direction\")</p>",
        "id": 364615661,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686240929
    },
    {
        "content": "<p>Yes.</p>",
        "id": 364628758,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686244061
    },
    {
        "content": "<p>Probably, we should require that nhds of zero has a basis of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Balanced#doc\">docs4#Balanced</a> sets.</p>",
        "id": 364630622,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686244536
    },
    {
        "content": "<p>It's still not clear how to pick <code>a</code> though.</p>",
        "id": 364631933,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686244867
    },
    {
        "content": "<p>Because you could have say <code>a‚ÇÅ = (1 : ‚ÑÇ)</code> and <code>a‚ÇÇ = Complex.I</code>.</p>",
        "id": 364632200,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686244937
    },
    {
        "content": "<p>I think that <code>Balanced</code> should fix this but I don't have time now. Maybe, tomorrow.</p>",
        "id": 364669071,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686255184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/generalizing.20deriv.20to.20TVS/near/364630622\">said</a>:</p>\n<blockquote>\n<p>Probably, we should require that nhds of zero has a basis of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Balanced#doc\">docs4#Balanced</a> sets.</p>\n</blockquote>\n<p>This is always true, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nhds_basis_balanced#doc\">docs4#nhds_basis_balanced</a></p>",
        "id": 364692024,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686263962
    },
    {
        "content": "<p>I haven't spent enough times thinking about this to be sure about what I say, but I think that another reasonable definition would be the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Asymptotics.Asymptotics</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecificLimits.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Gauge</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">Pointwise</span> <span class=\"n\">Asymptotics</span> <span class=\"n\">Metric</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">TVS</span>\n\n<span class=\"kd\">variable</span>  <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- I would argue this should be the general replacement for `gauge`, but I could be wrong</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gauge'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span> <span class=\"o\">:=</span> <span class=\"n\">sInf</span> <span class=\"o\">((</span><span class=\"bp\">‚Üë‚Äñ¬∑‚Äñ‚Çä</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">k</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">s</span><span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsLittleOTVS</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">U</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">gauge'</span> <span class=\"bp\">ùïú</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">gauge'</span> <span class=\"bp\">ùïú</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I am pretty confident that this gives the usual version in normed spaces, but not sure that it's the same notion as Wikipedia's or Yury's. The reason this feels natural is that, if topologies on E and F are generated by seminorms, I think you get a nice-looking characterization, but it's getting too late to even state it...</p>",
        "id": 364699204,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686267999
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=gauge#doc\">docs4#gauge</a> and the whole file around it. In particular, the gauge (or gauge‚Äô) of the unit ball of a normed space is exactly the norm</p>",
        "id": 364699498,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686268189
    },
    {
        "content": "<ol>\n<li>I think that your <code>gauge'</code> should be added as <code>egauge</code> to the library, similar to <code>edist</code>. <code>gauge</code> should be redefined as <code>(egauge _ _).toReal</code>.</li>\n<li>I think that our definitions are equivalent. I didn't use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gauge\">docs#gauge</a> in mine because it's not <code>egauge</code>.</li>\n</ol>",
        "id": 364702350,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686270038
    },
    {
        "content": "<p>So you lose the fact that the gauge returns a scalar?</p>",
        "id": 364731835,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1686287444
    },
    {
        "content": "<p>In the p-adic theory Frechet spaces are topological vector spaces whose topology is defined by a family of seminorms and they play a big role in the p-adic Langlands program. I'm assuming this is material that we stole from the real analysts...</p>",
        "id": 364743627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686292187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/generalizing.20deriv.20to.20TVS/near/364731835\">said</a>:</p>\n<blockquote>\n<p>So you lose the fact that the gauge returns a scalar?</p>\n</blockquote>\n<p>Currently, <code>gauge</code> is only defined for a real vector space.</p>",
        "id": 364847343,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686315367
    },
    {
        "content": "<p>I‚Äôm on mobile right now so I won‚Äôt develop all of my thoughts, but there are two distinct deviations from <code>gauge</code> at play.</p>\n<ul>\n<li>The first one is indeed just a matter of taking values in <code>ENNReal</code> instead of <code>Real</code>. I would say we should definitely keep both</li>\n<li>The other one is that, even where both the infimum is well defined, it‚Äôs not clear that the two agree for a non-symmetric set. On the other hand, I see no way to generalize <code>gauge</code> to arbitrary field that would preserve this property. This reminds me of the \"real polar\" VS \"absolute polar\" design choice, and iirc we chose the latter precisely because it works over other fields</li>\n</ul>",
        "id": 364852467,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686316331
    },
    {
        "content": "<p>Hence I have a question for people more familiar with convex analysis: do you care about the value of the gauge for non absorbent and balanced sets ?</p>",
        "id": 364852823,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1686316406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> does to construct a homeomorphism with a ball.</p>",
        "id": 364864483,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686318870
    }
]