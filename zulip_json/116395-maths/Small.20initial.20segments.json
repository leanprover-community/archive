[
    {
        "content": "<p>I've recently come to realize that there are two different ways to assign a <code>rank</code> function to a well-founded order. The obvious one would be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded.rank\">docs#well_founded.rank</a>, which returns an ordinal in the same universe as the original type. But in some important cases, including ordinals (trivially), cardinals, ZFC sets and combinatorial games, one is in fact able to assign ordinals in a universe one lower.</p>",
        "id": 345300754,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680069930
    },
    {
        "content": "<p>The necessary condition is that for <code>α : Type (u+1)</code>, all initial segments (meaning intervals <code>Iio a</code>) are <code>small.{u}</code>.</p>",
        "id": 345300988,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680070038
    },
    {
        "content": "<p>I was thinking about implementing this as a typeclass. As arguments, it would have the canonical (transitive) well-founded relation on the type, and a proof that all initial segments are small.</p>",
        "id": 345301451,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680070209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> what do you think about this?</p>",
        "id": 345301546,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680070255
    },
    {
        "content": "<p>Sounds good to me! I don't think we have <code>(&lt;)</code> or <code>Iio</code> defined on ZFC sets and games though.</p>",
        "id": 345303685,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1680071068
    },
    {
        "content": "<p>I used <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subrel\">docs#subrel</a> for this in <a href=\"https://github.com/leanprover-community/mathlib/pull/18527\">#18527</a> recently.</p>",
        "id": 345314043,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1680074514
    },
    {
        "content": "<p>It's probably best to take in an arbitrary relation for this typeclass. The subsequence relation on games should definitely <em>not</em> be using the <code>&lt;</code> symbol.</p>",
        "id": 345321152,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680076548
    }
]