[
    {
        "content": "<p>Do we have a way of indicating that a type is both a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a> and a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_ring\">docs#normed_ring</a>? The former extends <code>has_norm</code>, so <code>[normed_ring R] [inner_product_space R]</code> isn't possible.</p>\n<p>The closest I can find is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_R_or_C\">docs#is_R_or_C</a>, but this is too strong for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quaternion\">docs#quaternion</a></p>",
        "id": 279278071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650281157
    },
    {
        "content": "<p>Maybe <code>is_R_or_C</code> will generalize to such a typeclass? That would be nice, because <code>is_R_or_C</code> is a weird dump of atoms (and I think <span class=\"tex-error\">$$\\Q$$</span> and <span class=\"tex-error\">$$\\Q[i]$$</span> satisfy it as well.</p>",
        "id": 279280344,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1650283491
    },
    {
        "content": "<p><code>is_R_or_C</code> is a way of saying \"is an archimedean local field\" (a field complete with respect to an archimedean norm).</p>",
        "id": 279280656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650283784
    },
    {
        "content": "<p>The context of the question is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.frobenius_nnnorm_mul\">docs#matrix.frobenius_nnnorm_mul</a>, which feels like it should be true on the quaternions too</p>",
        "id": 280871475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651497069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/inner_product_space.20and.20normed_algebra/near/279278071\">said</a>:</p>\n<blockquote>\n<p>[docs#inner_product_space] extends <code>has_norm</code>, so <code>[normed_ring R] [inner_product_space R]</code> isn't possible.</p>\n</blockquote>\n<p>I've created <a href=\"https://github.com/leanprover-community/mathlib/pull/18583\">#18583</a> as an attempt at removing this <code>extends</code>, though I don't expect it to pass CI just yet. <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/analysis/inner_product_space/basic\">port-status#analysis/inner_product_space/basic</a> is far enough away that this could still be possible.</p>",
        "id": 341848831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678811775
    },
    {
        "content": "<p>So is the elaboration issue not a problem anymore?</p>",
        "id": 341863009,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678815055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/Dangerous.20instance.20vs.20elaboration.20problems/near/210594971\">said</a>:</p>\n<blockquote>\n<p>I run into some very annoying elaboration issues where I have to constantly spoonfeed it <code>ùïú</code> and/or <code>Œ±</code> in lemmas that rewrite norms in terms of inner products, even though the relevant instance is directly present in the context.</p>\n</blockquote>\n<p>is still a problem, but the old solution didn't help you if you wanted both a real- and complex- valued inner product on a <code>normed_add_comm_group Œ±</code>. I don't agree that I need to spoon-feed it <code>Œ±</code>, but indeed <code>ùïú</code> still has to be passed in lots of places</p>",
        "id": 341864598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678815476
    },
    {
        "content": "<p>How bad is this elaboration problem (i.e., are you needing to make edits for it in 2 places, 2 dozen, or 2 hundred)?</p>\n<p>Your <code>normed_ring</code> or <code>normed_algebra</code> reasoning is more convincing to me than having both real and complex inner products. It seems like there are just so few situations when you have a complex inner product, but you want the real one, and in those cases I would be inclined to simply locally disable the complex instance.</p>",
        "id": 341865990,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678815827
    },
    {
        "content": "<p>I guess you could count the net change in numbers of <code>ùïú</code>s in the diff</p>",
        "id": 341866383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678815932
    },
    {
        "content": "<p>My guess is that it would be around 100 places where <code>ùïú</code> has to be specified explicitly where it previously didn't</p>",
        "id": 341866790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678816030
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18583\">#18583</a> is green (ignoring style) and <del><code>+360 ‚àí303</code></del> (edit: <code>+330 ‚àí281</code>). At least 128 of the modified lines are just adding new typeclass arguments, and probably another 100 are adding <code>_</code>s to existing elaboration hacks.</p>",
        "id": 341943321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678845862
    },
    {
        "content": "<p>I've spun off two dependencies to try and remove some of these, so that they don't have to be modified in the diff</p>",
        "id": 341943421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678845918
    },
    {
        "content": "<p>It turns out that this refactor has now made the linter aware that there were some lemmas that didn't use the inner product structure at all. I've spun out <a href=\"https://github.com/leanprover-community/mathlib/pull/18605\">#18605</a>, and added a much longer description to <a href=\"https://github.com/leanprover-community/mathlib/pull/18583\">#18583</a></p>",
        "id": 342675558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679092339
    }
]