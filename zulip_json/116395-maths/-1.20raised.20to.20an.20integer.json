[
    {
        "content": "<p>What's the best way of writing <code>(-1) ^ n</code> where <code>n : int</code>? You can't just write it as is since <code>has_pow int int</code> doesn't exist (and shouldn't of course). Is there some construct in mathlib for this?</p>",
        "id": 186120459,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1579541312
    },
    {
        "content": "<p>I guess the best way depends on your application, but the reason <code>-1</code> to a power is allowed is because <code>-1</code> is a unit in the ring Z so one way would be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 186120700,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1579541548
    },
    {
        "content": "<p>Oh very interesting. I'll try this. Thank you</p>",
        "id": 186120809,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1579541656
    },
    {
        "content": "<p>Hmm, is it obvious why <code>ring_exp</code> can't handle this?</p>\n<div class=\"codehilite\"><pre><span></span>example (n : ℕ) : ((-1 : units ℤ) ^ (n + 1)) = (-1 : units ℤ) * ((-1 : units ℤ) ^ n) := by ring_exp\n</pre></div>",
        "id": 186131134,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1579552283
    },
    {
        "content": "<p><code>units ℤ</code> isn't a ring</p>",
        "id": 186131595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579552780
    },
    {
        "content": "<p>it's also overkill for this example. There is a lemma that says exactly this; use <code>library_search</code> to find it</p>",
        "id": 186131680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579552871
    },
    {
        "content": "<p><code>library_search</code> suggests I just use <code>rfl</code>, which I guess makes sense depending on how <code>pow</code> is implemented on <code>succ n</code>. Thanks!</p>",
        "id": 186132377,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1579553659
    },
    {
        "content": "<p>I'm not sure if I should make a new topic instead of joining a 3.5 year old conversation, but I thought I should note that I tried the above solution in mathlib4 without success.  I was able to make things work with <code>(-1: ℤˣ)^n</code> but multiplying with elements of other rings seemed to require an additional cast, e.g., <code>(((-1: ℤˣ)^n):ℤ)</code></p>",
        "id": 379554851,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1690559215
    },
    {
        "content": "<p>Could you write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of what fails precisely?</p>",
        "id": 379557833,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690559788
    },
    {
        "content": "<p>You are probably looking for the <code>local macro_rules | </code>($x ^ $y) =&gt; <code>(HPow.hPow $x $y)</code> workaround. Lean 4 has a system to try to cast everything in an arithmetic expression to a single type, but this doesn't work well for exponentiation at the moment. The <code>macro_rules</code> incantation turns this feature off for exponentiation.</p>",
        "id": 379558746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690559989
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span> <span class=\"o\">)</span> <span class=\"c1\">-- unknown identifier 'units'</span>\n</code></pre></div>\n<p>Am I missing an import?</p>",
        "id": 379560532,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1690560285
    },
    {
        "content": "<p>It is <code>Units</code> in Lean 4</p>",
        "id": 379560608,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690560302
    },
    {
        "content": "<p><code>ℤˣ</code> is <code>Units ℤ</code> by definition</p>",
        "id": 379560788,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690560343
    },
    {
        "content": "<p>Oh, <code>Units</code> works.  Thanks a lot!</p>",
        "id": 379560794,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1690560345
    }
]