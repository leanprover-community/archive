[
    {
        "content": "<p>I want to rename the Kuratowski pair <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set.pair\">docs#Set.pair</a> to something like <code>Set.kpair</code>, since otherwise there's ambiguity in theorem names between <code>{x, y}</code> and <code>pair x y</code>. Is this ok?</p>",
        "id": 323932571,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674777243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 323932603,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674777245
    },
    {
        "content": "<p>IMO the name \"pair\" is better suited to the ordered pair than the unordered pair</p>",
        "id": 323932666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674777299
    },
    {
        "content": "<p>and this is a more important distinction than kuratowski pair (unless we want to have other kinds of ordered pair)</p>",
        "id": 323932711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674777330
    },
    {
        "content": "<p>Well, <code>pair</code> is used for <code>{x, y}</code> elsewhere in mathlib, such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pair_comm\">docs#set.pair_comm</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_pair\">docs#set.image_pair</a></p>",
        "id": 323932803,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674777381
    },
    {
        "content": "<p>To be clear this is entirely a theorem naming issue, I don't plan on adding other kinds of pairs atm</p>",
        "id": 323932853,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674777427
    },
    {
        "content": "<p>I would argue that the Kuratowski ordered pair is somewhat less \"fundamental\" than the more general unordered pair, hence its renaming.</p>",
        "id": 323933274,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674777661
    },
    {
        "content": "<p>The best alternative I have is to just add tildes on the Kuratowski theorems</p>",
        "id": 323933301,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674777678
    },
    {
        "content": "<p>we don't even have a definition for the unordered pair, so I don't see how that is the case</p>",
        "id": 323933551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674777786
    },
    {
        "content": "<p>it's just insert insert empty</p>",
        "id": 323933564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674777792
    },
    {
        "content": "<p><code>{x, y}</code> is sometimes also called <code>doubleton</code></p>",
        "id": 323934272,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674778213
    },
    {
        "content": "<p>I'd vote \"pair\" for ordered and \"upair\" for unordered.</p>",
        "id": 323960823,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1674794653
    },
    {
        "content": "<p>Let me give a concrete example of a name clash.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sUnion_pair</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"bp\">⋃₀</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∪</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sUnion_pair'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"bp\">⋃₀</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 323967950,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674799803
    },
    {
        "content": "<p>The former matches <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sUnion_pair\">docs#set.sUnion_pair</a>. The latter is a lemma I need to prove to define the projection functions.</p>",
        "id": 323968067,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674799860
    },
    {
        "content": "<p>If renaming the Kuratowski pair is not an option, then I suggest we use tildes on the Kuratowski lemmas in case of name clashing.</p>",
        "id": 323968782,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674800316
    },
    {
        "content": "<p>Renaming <code>pair</code> throughout Mathlib seems overkill</p>",
        "id": 323968812,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674800339
    },
    {
        "content": "<p>(That said, I could get behind standardizing <code>pair</code> / <code>doubleton</code>)</p>",
        "id": 323968843,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674800358
    },
    {
        "content": "<p>I don't see any reason to rename pair throughout mathlib</p>",
        "id": 323970057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674801152
    },
    {
        "content": "<p><code>⋃₀ (pair x y) = {x, y}</code> does not hold for all models of ordered pair and the fact that we use Kuratowski's model seems arbitrary. If you need that specific model to prove something, why not define a new function (for example <code>def kpair x y := pair x y</code>)</p>",
        "id": 324002168,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1674812485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/116395-maths/topic/ZFC.20pair.20rename/near/324002168\">said</a>:</p>\n<blockquote>\n<p>If you need that specific model to prove something, why not define a new function (for example <code>def kpair x y := pair x y</code>)</p>\n</blockquote>\n<p>Why not just rename <code>pair</code> directly?</p>",
        "id": 324504494,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1675038871
    },
    {
        "content": "<p>It's not that I want that specific model to prove something, but rather that I am proving something about that specific model, namely that the aforementioned projection functions work.</p>",
        "id": 324504651,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1675038969
    },
    {
        "content": "<p>I'm not against renaming <code>pair</code> to <code>kpair</code>, but I think we should have model agnostic definition of ordered pair such as this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.epsilon</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 324540679,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675063899
    },
    {
        "content": "<p>That's just my opinion. Others may disagree.</p>",
        "id": 324540686,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675063903
    },
    {
        "content": "<p>I don't really see what we would get out of this.</p>",
        "id": 324752405,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1675104420
    },
    {
        "content": "<p>Besides, to get things done, we'd still need to prove the existence of such a set function</p>",
        "id": 324752507,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1675104450
    },
    {
        "content": "<p>As I said, that's just my opinion. Personally, I dislike the idea of being able to prove statements that are true for some models of ordered pair, but not for the others, as the name <code>pair</code> should not imply any particular model. Just like I would be unhappy if I could prove <code>5 ∈ 7</code>, since that would reveal the underlying model of natural numbers.</p>\n<p>If you want to know what others think, try opening a poll.</p>",
        "id": 324768264,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675109695
    },
    {
        "content": "<p>I guess there are plenty of examples of people abusing definitional equality in mathlib, and those are also examples of statements which are true for some implementation of a concept but not for others. I'm not expressing an opinion about <code>pair</code> though.</p>",
        "id": 324769131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675109991
    },
    {
        "content": "<p>This is ZFC we're talking about. It is basically a theorem that every construction exposes implementation details (there are no nontrivial automorphisms of <code>V</code>)</p>",
        "id": 324778251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675113277
    }
]