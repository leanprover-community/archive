[
    {
        "content": "<p>The next step in my <a href=\"https://groupprops.subwiki.org/wiki/Equivalence_of_definitions_of_finite_nilpotent_group\">quest to provide the equivalent definitions for finite nilpotent groups</a> I have to show that if every sylow group is normal, then the group is the direct product of its sylow groups.<br>\nI am unsure what would be the best way to phrase the latter statement. Do we have “group is the direct product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> of its subgroups” somewhere? Should I go via <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> isomorphic to the external product of the sylow subgroups, or rather some notion of internal n-ary product?</p>",
        "id": 269727879,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643372943
    },
    {
        "content": "<p>Probably something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat.primes</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 269728099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643373077
    },
    {
        "content": "<p>Oh, is this using the fact that those primes that don't divide the group order have trivial Sylow group? Clever, thanks!</p>",
        "id": 269751137,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643382917
    },
    {
        "content": "<p>Hmm, but it does seem to assume that there is exactly one Sylow group for each prime (else that product contains conjugate copies). Which I know in the one implication, but not the other. So maybe I should fix a function <code>P : Pi (p : nat.primes) , Sylow p G</code> and use that selection of Sylow groups.</p>\n<p>OTOH, if that equivalency holds, it follows thst each Sylow group exists only once in it, based on a group order argument. </p>\n<p>I'll play around with what works best.</p>",
        "id": 269751955,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643383206
    },
    {
        "content": "<p>Don't we have some kind of internal direct products?</p>",
        "id": 269754106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643384037
    },
    {
        "content": "<p>There is the subgroup lattice’s <code>⊔</code>, e.g. as used in Frattini’s argument. That’s a product? But not necessarily a direct product.</p>",
        "id": 269755473,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643384584
    },
    {
        "content": "<p>Right, you would need a separate lemma saying that the product is direct.</p>",
        "id": 269756364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643384955
    },
    {
        "content": "<p>For the binary product, that’s “just” that the <code>⊓</code> is trivial. But for the n-ary internal direct product, that’s a bit more hairy to express, isn't it?</p>",
        "id": 269756650,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643385067
    },
    {
        "content": "<p>Yep, I think so.</p>",
        "id": 269757280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643385330
    },
    {
        "content": "<p>So the best course of action is to create a new definition for the internal product (in its own file?), with various helper lemmas as desired, maybe even the equivalence with the external product definition, and then use that in the Sylow development.</p>",
        "id": 269782912,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643395374
    },
    {
        "content": "<p>That might very well be the smoothest way forward.</p>",
        "id": 269784450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643396061
    },
    {
        "content": "<p>Is the direct product distinct from the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_product\">docs#free_product</a>?</p>",
        "id": 269792770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643399655
    },
    {
        "content": "<p>I think so: the direct product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> with itself is commutative, while the free product is not.</p>",
        "id": 269797322,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643401446
    },
    {
        "content": "<p>In the direct product, the operation happens componentwise, while the free product is essentially only concatenation of symbols from each factor.</p>",
        "id": 269797456,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643401508
    },
    {
        "content": "<p>I am starting with this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">direct_factors</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">elements_commute</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">H₁</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">H₂</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">H₁</span> <span class=\"bp\">≠</span> <span class=\"n\">H₂</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">triv_intersection</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">H₁</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">H₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">H₁</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am _not_ requiring that <code>Sup S</code> is the whole group here, so this  is “these groups are the direct factors of their product”. Not sure if this is helpful or not.</p>\n<p>The main theorem would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">external_of_internal_direct_product</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">direct_factors</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">H</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but these n-ary products are only defined for <code>comm_monoid</code>, it seems. </p>\n<p>Am I missing something or do we not have the n-ary product of groups somewhere?</p>",
        "id": 269926853,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643541064
    },
    {
        "content": "<p>It would probably be better to use an indexed family (indexed by some other type) rather than a <code>set</code>. Then the product is just a Pi type. I'm not even sure what <code>∏ H in S, H</code> is.</p>",
        "id": 269927980,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643542491
    },
    {
        "content": "<p>compare <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/linear_independent.html\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/linear_independent.html</a></p>",
        "id": 269928055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643542596
    },
    {
        "content": "<p>It’s defined in <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html\">https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/basic.html</a>: There products are defined over types and over sets.<br>\nBut in either case it’s <code>comm_monoids</code>, which is where I think I am stuck here.<br>\nOr is there another definitions elsewhere for n-ary products of groups?</p>",
        "id": 269928331,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643542971
    },
    {
        "content": "<p>Ah, I think I get what you are saying: Lean’s fundamental Pi type has  group instance somewhere?</p>",
        "id": 269928508,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643543226
    },
    {
        "content": "<p>Indeed,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">external_of_internal_direct_product</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">direct_factors</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>typechecks. Thanks :-)</p>",
        "id": 269928521,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643543277
    },
    {
        "content": "<p>Right</p>",
        "id": 269928545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643543283
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group/pi.html\">https://leanprover-community.github.io/mathlib_docs/algebra/group/pi.html</a></p>",
        "id": 269928594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643543378
    },
    {
        "content": "<p>Heh, I looked at that file, but didn’t get it. Thanks for the nudge.</p>",
        "id": 269928657,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643543457
    },
    {
        "content": "<p>Before I think you were using the fact that <code>subgroup G</code> has a <code>*</code> operation, and then implicitly coercing to a type at the end</p>",
        "id": 269928756,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643543608
    },
    {
        "content": "<p>Ahh ok, indeed :-)</p>",
        "id": 269930519,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643545812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> has marked this topic as resolved.</p>",
        "id": 269930541,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643545867
    },
    {
        "content": "<p>It may be worth doing the following: given a family of homomorphisms Hi -&gt; G into the same group, if the ranges of any two different homomorphisms commute, then we get a canonical homomorphism from a subgroup of the pi group of the Hi's (with finitely many components non-identity), or alternatively from a quotient group (by the commutators between different Hi's) of the free_product, into G. Then we can state that this canonical homomorphism is an isomorphism, and it will be a Prop.</p>",
        "id": 269943885,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1643562570
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.independent\">docs#complete_lattice.independent</a> relevant here for <code>triv_intersection</code>?</p>",
        "id": 269957524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643576857
    },
    {
        "content": "<p>Oh, yes, thanks a lot!</p>",
        "id": 269958511,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643577950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> , you nerdsniped me :-)<br>\nSo now it’s 2am and my control of the keyboard becomes shaky… but here we go (in sorry-free, but relatively unpolished form)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/11744\">https://github.com/leanprover-community/mathlib/pull/11744</a></p>",
        "id": 269969700,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643591812
    },
    {
        "content": "<p>Did we warn you about the addictive nature of lean?</p>",
        "id": 269970179,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643592443
    },
    {
        "content": "<p>Lean's fast feedback is optimized to maximize dopamine injections in the bloodstream</p>",
        "id": 269970479,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643592822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, I misread that as \"additive\" - indeed, this looks an awful lot like the non-additive version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a></p>",
        "id": 269970570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643592956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Glad that you find my suggestion fun to work on, and you did it fast! Actually I found your Incredible Proof Machine addictive as well, and I spent lots of time golfing some of the problems and made PR for the records. (Most records in propositional logic had already been set by the Metamath people, who made serious effort golfing those.)</p>",
        "id": 269970800,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1643593248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/.E2.9C.94.20direct.20product.20of.20sylow.20groups/near/269970570\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>, I misread that as \"additive\" - indeed, this looks an awful lot like the non-additive version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a></p>\n</blockquote>\n<p>Do you mean a <code>dfinsupp</code> whose base-value is <code>1</code> instead of <code>0</code>. I talked about that earlier.</p>",
        "id": 269988333,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643613320
    },
    {
        "content": "<blockquote>\n<p>Did we warn you about the addictive nature of lean?</p>\n</blockquote>\n<p>I have done Isabelle and Coq, so I knew exactly what fix I was going for, and I am getting exactly what I was hoping for  :-)</p>",
        "id": 270003852,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643622311
    },
    {
        "content": "<p>Hmm, I thought I was pretty close now, all I have to do is to show that a set of normal p-groups with different p is independent (i.e. that one intersected with the Sup of the others is trivial).<br>\nBut it seems that the proofs out there go via the group orders, using a proposition that the order of the Sup of pairwaise commuting groups with coprime orders is the product of these orders. Which seems again almost as much work as the “is direct product” proof itself.</p>\n<p>I wonder if there is a simpler argument why <code>H p ⊓ (⨆ (p' ≠ p), H p')</code> must be trivial? (I already have that these groups are pairwise disjoint)</p>",
        "id": 270053170,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643644289
    },
    {
        "content": "<p>Maybe something like this:</p>\n<ul>\n<li>Create a variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/subgroup/basic.html#subgroup.normal_mul\">https://leanprover-community.github.io/mathlib_docs/group_theory/subgroup/basic.html#subgroup.normal_mul</a> that works for Sup, which shows that the elements of the Sup are products of elements of the groups</li>\n<li>Show that if elements of different groups commute, then the order of an <code>x \\in (⨆ (p' ≠ p), H p')</code> must divide the product of orders of the groups therein</li>\n<li>Now it follows from coprime-considerations</li>\n</ul>\n<p>Still hairy, especially with these n-ary products everywhere. Maybe inductively.</p>",
        "id": 270061409,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643646939
    },
    {
        "content": "<p>Did it slightly differently after all: Instead of proving independence of the groups, which I used to show injectivity of a certain function, I now prove injectivity more directly, with an argument using coprime orders, more suited for an application in sylow groups</p>",
        "id": 270086883,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643655985
    },
    {
        "content": "<blockquote>\n<p>using a proposition that the order of the Sup of pairwaise commuting groups with coprime orders is the product of these orders. Which seems again almost as much work as the “is direct product” proof itself.</p>\n</blockquote>\n<p>It isn't necessary to show that the order of the Sup is the product of these orders; once you know the Sup is the homomorphic image of the pi group, you know its order divides the product of the orders, and that suffices. (I haven't looked much into your PRs as I am not familiar with the group library at all...)</p>",
        "id": 270129639,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1643674654
    },
    {
        "content": "<p>Whoohoo:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">direct_product_of_normal</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.support</span><span class=\"o\">),</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">P.2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">≃*</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 270391486,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643811993
    },
    {
        "content": "<p>I am not sure if that sigma type is the best way to represent “all sylow groups” (preferably as a <code>fintype</code>), and it becomes quite annoying in the proof.</p>",
        "id": 270395094,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643813338
    },
    {
        "content": "<p>Can't you make the product run over <code>p</code>, then over <code>sylow p G</code>?</p>",
        "id": 270396976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643814009
    },
    {
        "content": "<p>Hmm, I thought “not easily” because I can construct the isomorphism only easily from a single <code>\\Pi</code> type. </p>\n<p>But maybe the way to go is to start with the double product in the lemma statement, and then, for each <code>p</code>, prove the inner product to be isomorphic to “the” unique Sylow group, and then invoke the lemma that produces the isomorphism. </p>\n<p>I would need a lemma that deduces <code>\\Pi H ~- \\Pi J</code> from <code>∀ i, H i ~- J i</code> (where <code>~-</code> is <code>mul_eqiuv</code>). I wonder if we have that.</p>",
        "id": 270398160,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643814413
    },
    {
        "content": "<p>Ah, we do: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/equiv/mul_add.html#mul_equiv.Pi_congr_right\">https://leanprover-community.github.io/mathlib_docs/data/equiv/mul_add.html#mul_equiv.Pi_congr_right</a></p>",
        "id": 270398225,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643814441
    },
    {
        "content": "<p>Yes, that’s nicer, will do :-)</p>",
        "id": 270398392,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643814496
    },
    {
        "content": "<p>lol, I thought yours was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod\">docs#finset.prod</a>, not a Pi type, but my suggestion still applied.</p>",
        "id": 270399124,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643814744
    },
    {
        "content": "<p>I’m getting lost in a twisting maze of coercions, all alike:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic.change</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">type</span>\n  <span class=\"n\">mul_equiv</span> <span class=\"o\">(</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">default</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">)))</span>\n<span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span>\n  <span class=\"n\">mul_equiv</span> <span class=\"o\">(</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">default</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 270415155,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643819989
    },
    {
        "content": "<p><code>set_option pp.implicit true</code>, although it won't be kind to your reading ^^ it's really not fun...</p>",
        "id": 270415431,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643820078
    },
    {
        "content": "<p>Yeah…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic.change</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">mul_equiv</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_like.has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.set_like</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow.inhabited</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_like.has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.set_like</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow.inhabited</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">has_mul</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">has_mul</span>\n<span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span>\n  <span class=\"bp\">@</span><span class=\"n\">mul_equiv</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_like.has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.set_like</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unique.inhabited</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_like.has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.set_like</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_one_class.to_has_mul</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_like.has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.set_like</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unique.inhabited</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_like.has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.set_like</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unique.inhabited</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_monoid</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_like.has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.set_like</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unique.inhabited</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">group.to_div_inv_monoid</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set_like.has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.set_like</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unique.inhabited</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unique.inhabited</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">to_group</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subgroup.has_coe</span> <span class=\"n\">p</span> <span class=\"n\">G</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">has_mul</span>\n</code></pre></div>",
        "id": 270415498,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643820106
    },
    {
        "content": "<p>maybe using <code>convert/convert_to</code> to see what the differences are? hopefully it's not a diamond...</p>",
        "id": 270415740,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643820181
    },
    {
        "content": "<p>Uh, nice tactic. TIL!</p>",
        "id": 270416171,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643820340
    },
    {
        "content": "<p>I wonder if my <a href=\"https://github.com/leanprover-community/mathlib/tree/submonoid_class-def\">branch#submonoid_class-def</a> does this better...</p>",
        "id": 270416200,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643820352
    },
    {
        "content": "<p><code>convert</code> just solves it :-(</p>",
        "id": 270416297,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643820375
    },
    {
        "content": "<p>I mean, great, but not very educating :-)</p>",
        "id": 270416385,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643820406
    },
    {
        "content": "<p>If I were to guess, it's that there's a <code>(@default (@sylow p G _inst_1) (@sylow.inhabited p G _inst_1))</code> in the new type which doesn't match <code>(@default (@sylow p G _inst_1) (@unique.inhabited (@sylow p G _inst_1) _inst_3))</code> in the current goal.</p>",
        "id": 270416566,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643820478
    },
    {
        "content": "<p>Anyways, it works now, enough for today. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , your suggestion worked, I now have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">direct_product_of_normal</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.support</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">≃*</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 270418212,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643820976
    },
    {
        "content": "<p>Pretty nice!</p>",
        "id": 270418323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643821012
    },
    {
        "content": "<p>The issue is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sylow.inhabited\">docs#sylow.inhabited</a> isn't defeq with the inhabited from the unique instance</p>",
        "id": 270442278,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643829596
    },
    {
        "content": "<p>Do we use that instance anywhere <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> or can we just delete it?</p>",
        "id": 270442468,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643829664
    },
    {
        "content": "<p>I only added the inhabited instance to make the linter happy, so feel free to get rid of it if it's causing problems.</p>",
        "id": 270442839,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1643829829
    },
    {
        "content": "<p>The <code>unique</code> instance is local in my proof, so probably the <code>inhabited</code> instance is fine? (And I think I might be actually using it :-))</p>",
        "id": 270452079,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643833666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/116395-maths/topic/.E2.9C.94.20direct.20product.20of.20sylow.20groups/near/269969700\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> , you nerdsniped me :-)<br>\nSo now it’s 2am and my control of the keyboard becomes shaky… but here we go (in sorry-free, but relatively unpolished form)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/11744\">https://github.com/leanprover-community/mathlib/pull/11744</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> , this PR is idly waiting for review. Since you suggested this particular approach (which was of course a great suggest), could I tempt you to review it? :-)</p>",
        "id": 271410716,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1644488230
    }
]