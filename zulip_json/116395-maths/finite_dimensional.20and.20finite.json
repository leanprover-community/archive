[
    {
        "content": "<p>We currently have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional\">docs#finite_dimensional</a> (that is defined as <code>is_noetherian</code> over a division ring) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.finite\">docs#module.finite</a>. The two notion coincide  (over a division ring), and mathlib essentially know this. Should we try to get rid of <code>finite_dimensional</code>? A lot of results in <code>linear_algebra.finite_dimensional</code> hold for finitely generated free modules, and should be stated in that generality. This is in the same spirit as throwing away <code>vector_space</code>.</p>",
        "id": 258508794,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634805932
    },
    {
        "content": "<p>I am pretty sure this has already been discussed, but I don't find the conversation.</p>",
        "id": 258508943,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634806006
    },
    {
        "content": "<p>Related, but even less mathematical: all the names talk about <code>dim</code> but the Lean function is called <code>finrank</code>. I propose making both shorter by replacing them by <code>rk</code>.</p>",
        "id": 258509029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634806063
    },
    {
        "content": "<p>Totally agree.</p>",
        "id": 258509156,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634806115
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/finite.20free.20modules/near/239172867\">Here</a> is the previous discussion.</p>",
        "id": 258509698,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634806400
    },
    {
        "content": "<p>That's not true is it? I thought <code>dim</code> referred to <code>module.rank</code> not finrank</p>",
        "id": 258509759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634806438
    },
    {
        "content": "<p>I made a branch to rename them, but ran into a clash with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rank\">docs#rank</a></p>",
        "id": 258509846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634806470
    },
    {
        "content": "<p>Ooh, maybe I misremembered. At least, the names don't line up well, and we should fix this.</p>",
        "id": 258509874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634806481
    },
    {
        "content": "<p>Should we rename <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rank\">docs#rank</a> to linear_map.rank?</p>",
        "id": 258509882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634806484
    },
    {
        "content": "<p>Yes! That doesn't belong in <code>_root_</code>, I think.</p>",
        "id": 258509933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634806513
    },
    {
        "content": "<p>And <code>f.rank</code> is nice!</p>",
        "id": 258509971,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634806533
    },
    {
        "content": "<p>The problem with <code>finite</code> and <code>finite_dimensional</code> is that we cannot have an instance saying that, over a division ring, <code>finite</code> implies <code>finite_dimensional</code>, since the latter is by definition <code>is_noetherian</code>, that implies <code>finite</code>, we have a loop.<br>\nA possible solution is to get rid completely of <code>finite_dimensional</code>, and not having <code>finite → is_noetherian</code> as an instance, but only as a lemma. Theorems about vector spaces should have <code>finite</code> as assumption, rather than <code>is_noetherian</code>.</p>",
        "id": 258510982,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634807021
    },
    {
        "content": "<p>That seems to be the correct pattern: if we have <code>A → B</code> always and <code>C → (A ↔ B)</code>, then <code>A → B</code> is an instance, <code>C → B → A</code> a lemma, and anything that needs both <code>C</code> and <code>B</code> assumes <code>C</code> and <code>A</code> instead. In this case, <code>A</code> is <code>finite_dimensional = is_noetherian</code>, <code>B</code> is <code>module.finite</code> and <code>C</code> is <code>division_ring</code>.</p>",
        "id": 258513282,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634808192
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/mathlib/issues/9854\">#9854</a>. I modified the definition of <code>finite_dimensional</code> as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">module.finite</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>(of course the goal is to get rid of <code>finite_dimensional</code>, but let me start with this). Now I have to modify quite a lot of proofs. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional_submodule</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian.iff_dim_lt_omega.2</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dim_submodule_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dim_lt_omega</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional_submodule</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">iff_fg.2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iff_fg.1</span>\n    <span class=\"o\">(</span><span class=\"n\">is_noetherian.iff_dim_lt_omega.2</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dim_submodule_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dim_lt_omega</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))),</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does someone see a better way of doing this? I mean, without starting every new proof with <code>letI : is_noetherian K V := iff_fg.2 _,</code> and using <code>iff_fg.1</code> at the end. I can do it without problems, I just want to check I am not wasting time...</p>",
        "id": 258547805,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634823990
    },
    {
        "content": "<p>Nonsense</p>",
        "id": 258548155,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634824122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/finite_dimensional.20and.20finite/near/258547805\">said</a>:</p>\n<blockquote>\n<p>I've created <a href=\"https://github.com/leanprover-community/mathlib/issues/9854\">#9854</a>. I modified the definition of <code>finite_dimensional</code> as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">module.finite</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>(of course the goal is to get rid of <code>finite_dimensional</code>, but let me start with this). Now I have to modify quite a lot of proofs. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional_submodule</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian.iff_dim_lt_omega.2</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dim_submodule_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dim_lt_omega</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional_submodule</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">iff_fg.2</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iff_fg.1</span>\n    <span class=\"o\">(</span><span class=\"n\">is_noetherian.iff_dim_lt_omega.2</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dim_submodule_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dim_lt_omega</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">))),</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does someone see a better way of doing this? I mean, without starting every new proof with <code>letI : is_noetherian K V := iff_fg.2 _,</code> and using <code>iff_fg.1</code> at the end. I can do it without problems, I just want to check I am not wasting time...</p>\n</blockquote>\n<p>I believe that is the best option, and the hope is you eventually prove enough stuff for <code>module.finite</code> that you don't need <code>is_noetherian</code> anymore.</p>",
        "id": 258549567,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634824636
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9854\">#9854</a> should now compile. <code>finite_dimensional</code> is still there, but now is by definition <code>module.finite</code>. I will upgrade the doc before marking the PR ready for review (in any case it depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/9860\">#9860</a>).<br>\nThe next step will be to remove <code>finite_dimensional</code> completely.</p>",
        "id": 258622074,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634852640
    },
    {
        "content": "<p><code>finite_dimensional R M</code> is now by definition <code>module.finite R M</code>. Do we want to delete it completely? Or should it be an <code>abbreviation</code> or something like that?</p>",
        "id": 259083790,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635248537
    },
    {
        "content": "<p>I'm inclined  to remove it completely.</p>",
        "id": 259084342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635248945
    },
    {
        "content": "<p>Maybe in Lean 4 we can have <code>module K V</code> pretty print as <code>vector_space K V</code> whenever there is an instance <code>[field K]</code> around. Similar for <code>finite_dimensional</code> etc... But in Lean 3 this all won't work.</p>",
        "id": 259084445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635249009
    },
    {
        "content": "<p>Gonna be a big bump for my branches <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 259084473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635249022
    },
    {
        "content": "<p>I have to change code of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- An m × n matrix has some finite basis of cardinality m * n</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">s</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span>\n            <span class=\"o\">(</span><span class=\"n\">finset.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian.iff_fg.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">s_basis</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian.finset_basis</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finite_dimensional.finrank_eq_card_finset_basis</span> <span class=\"n\">s_basis</span><span class=\"o\">,</span>\n      <span class=\"n\">matrix.finrank_matrix</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.card</span><span class=\"o\">,</span> <span class=\"n\">finset.card_fin</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>to start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian.iff_fg.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>Is this the best-practices approach now?</p>",
        "id": 259121698,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635265133
    },
    {
        "content": "<p>This is going to work. A better thing to do is to check which result needs <code>is_noetherian</code> and see if you can generalize it to <code>finite</code>. But of course this requires more work</p>",
        "id": 259123140,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635265744
    },
    {
        "content": "<p>But note that the standard basis of matrices is already there</p>",
        "id": 259123548,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635265903
    },
    {
        "content": "<p>I am on my phone so it's not easy to find it, but I guess is something like <code>matrix.std_basis</code></p>",
        "id": 259123747,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635265990
    },
    {
        "content": "<p>Thanks for checking. The result needing the instance is the first <code>is_noetherian.finset_basis</code> line. Yup, <code>std_basis</code> would be the explicit basis that would satisfy this, but I'm also trying to demo how to make general linear algebra statements, so I was hoping to keep the example and proof close.</p>",
        "id": 259123883,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635266048
    },
    {
        "content": "<p>If you want the dimension we have the general result using <code>module.rank</code> (and cardinals). What you want is probably in  <a href=\"https://github.com/leanprover-community/mathlib/issues/9832\">#9832</a></p>",
        "id": 259123933,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635266074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> is working on generalizing <code>Mathlib.LinearAlgebra.FiniteDimensional</code> to free modules. Currently the situation is a little mess, with results (sometimes suboptimal) in <code>Mathlib.LinearAlgebra.FiniteDimensional</code>, <code>Mathlib.LinearAlgebra.FreeModule.*</code>, <code>Mathlib.LinearAlgebra.Dimension</code> and <code>Mathlib.RingTheory.Finiteness</code>.</p>\n<p>I really think we should clean up everything, to make clear which results hold in general (over any ring, maybe with the strong rank condition), which one for free modules, and which one for vector spaces (over division rings).</p>\n<p>My first question is whether we want to keep <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiniteDimensional#doc\">docs#FiniteDimensional</a>: currently it is a reducible def</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">FiniteDimensional</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>so we can easily get rid of it if we want.</p>",
        "id": 407441682,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702376391
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8912\">#8912</a> for start</p>",
        "id": 407442199,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702376570
    },
    {
        "content": "<p>Can we not rename <code>Module.Finite</code> to <code>FiniteDimensional</code>? This is not a very discoverable name.</p>",
        "id": 407442739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702376745
    },
    {
        "content": "<p>But \"dimension\" suggests things like basis, and scalar fields, etc.</p>",
        "id": 407443361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702376907
    },
    {
        "content": "<p>The terminology is completely standard (probably because we rarely care about modules that finite as sets), and nobody says \"dimension\" for module that are not over a field (even if they're free)</p>",
        "id": 407443431,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702376937
    },
    {
        "content": "<p>Then we should keep <code>FiniteDimensional</code> as an abbreviation for discoverability.</p>",
        "id": 407443768,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702377013
    },
    {
        "content": "<p>Yes, I really like that \"ring-finite\" and \"module-finite\" have taken off; in the 90s when you had an R-algebra A you had \"finite (when viewed as an A-module)\" and \"finite (when viewed as an A-algebra)\".</p>",
        "id": 407443934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702377068
    },
    {
        "content": "<p>We use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.FiniteType#doc\">docs#Algebra.FiniteType</a> for that</p>",
        "id": 407444062,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702377114
    },
    {
        "content": "<p>The docstring in <code>Mathlib.LinearAlgebra.FiniteDimensional</code> explains why we have <code>FiniteDimensional</code> instead of using <code>Module.Finite</code>. To summarize: <code>FiniteDimensional</code> is the combination of <code>Module.Finite</code> and <code>IsNoetherian</code> and <code>Module.Free</code>. We just arbitrarily chose the first as a definition.</p>",
        "id": 407444823,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702377321
    },
    {
        "content": "<p>Anyway I don't have anything against <code>FiniteDimensional</code>, it can stays in its own file where we put results that hold only over a division ring.</p>",
        "id": 407444887,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702377340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/116395-maths/topic/finite_dimensional.20and.20finite/near/407444823\">said</a>:</p>\n<blockquote>\n<p>The docstring in <code>Mathlib.LinearAlgebra.FiniteDimensional</code> explains why we have <code>FiniteDimensional</code> instead of using <code>Module.Finite</code>. To summarize: <code>FiniteDimensional</code> is the combination of <code>Module.Finite</code> and <code>IsNoetherian</code> and <code>Module.Free</code>. We just arbitrarily chose the first as a definition.</p>\n</blockquote>\n<p>BTW do we have the equivalences as instances? In Lean 3 it was impossible to have all of them (because they cycle), but it should be possible in Lean 4.</p>",
        "id": 407445109,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702377412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/116395-maths/topic/finite_dimensional.20and.20finite/near/407444823\">said</a>:</p>\n<blockquote>\n<p>The docstring in <code>Mathlib.LinearAlgebra.FiniteDimensional</code> explains why we have <code>FiniteDimensional</code> instead of using <code>Module.Finite</code>. To summarize: <code>FiniteDimensional</code> is the combination of <code>Module.Finite</code> and <code>IsNoetherian</code> and <code>Module.Free</code>. We just arbitrarily chose the first as a definition.</p>\n</blockquote>\n<p>To me the docstring doesn't capture why we need them. Also, I think some of the steps in this cycle don't require division rings, right? (I'm thinking basis -&gt; fg for example). So having two separate definitions seems weird</p>",
        "id": 407445289,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702377481
    },
    {
        "content": "<p>One argument is \"think of the undergraduates\" but I'm no longer convinced about how good an argument this is (because I have turned my attention to getting other people addicted).</p>",
        "id": 407445481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702377545
    },
    {
        "content": "<p>For example we use <code>IsDedekindDomain R</code> instead of <code>UniqueFactorizationMonoid (Ideal R)</code> because</p>\n<ol>\n<li>We didn't choose it as the main definition.</li>\n<li>Even if we chose it, this choice is non-canonical and should be hidden as a implementation detail.</li>\n</ol>\n<p>I believe it is the same case here?</p>",
        "id": 407447113,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702378036
    },
    {
        "content": "<p>Anyway, I plan to:</p>\n<ol>\n<li>Generalize current results on <code>FiniteDimensional</code> into finite, free, and/or noetherian modules when possible.</li>\n<li>Keep the lemmas above in terms of <code>FiniteDimensional</code> for discoverability and usability.</li>\n<li>Split and reorganize <code>Mathlib.LinearAlgebra.FiniteDimensional</code>, <code>Mathlib.LinearAlgebra.FreeModule.Rank</code>,  <code>Mathlib.LinearAlgebra.FreeModule.Finite.Rank</code>,  <code>Mathlib.LinearAlgebra.Dimension</code> and <code>Mathlib.RingTheory.Finiteness</code> into a folder under <code>LinearAlgebra</code>.</li>\n</ol>",
        "id": 407448186,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702378387
    },
    {
        "content": "<p>Using the \"jump to definition\" feature on lemmas in 2. should make it clear what hypotheses are actually needed?</p>",
        "id": 407448432,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702378472
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 407448473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702378490
    },
    {
        "content": "<p>I don't like step 2, I'm strongly against duplicating lemmas; could this just be written as an alias in the finite dimensional namescape?</p>",
        "id": 407453565,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702380216
    },
    {
        "content": "<p>The plan is to keep them as one lemma proofs.</p>",
        "id": 407454048,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702380381
    },
    {
        "content": "<p>You mean one line proof?</p>",
        "id": 407454381,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702380500
    },
    {
        "content": "<p>Is there a real difference between alias and one line proofs?</p>",
        "id": 407457227,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702381537
    },
    {
        "content": "<p>An alias wouldn't actually be about <code>FiniteDimensional</code>, would it?</p>",
        "id": 407457496,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702381650
    },
    {
        "content": "<p>Unless it's strictly an abbreviation</p>",
        "id": 407457521,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702381661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/finite_dimensional.20and.20finite/near/407457227\">said</a>:</p>\n<blockquote>\n<p>Is there a real difference between alias and one line proofs?</p>\n</blockquote>\n<p>Yes, the size of the diff, hence the reviewability of the PR.</p>",
        "id": 407457677,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702381712
    },
    {
        "content": "<p>Is an alias more than one line?</p>",
        "id": 407457826,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702381776
    },
    {
        "content": "<p>It's much easier to generalise lemmas if you don't have to worry about the call sites. Those can be dealt with in a later PR.</p>",
        "id": 407457972,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702381815
    },
    {
        "content": "<p>An alias is also right next to the call site, whilst a one line proof is usually in another file; much harder to maintain in this way.</p>",
        "id": 407461219,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702382949
    },
    {
        "content": "<p>I mean, we're talking about a short transition period here, right? Those one-line lemmas could be around for less than a day.</p>",
        "id": 407461465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702383027
    },
    {
        "content": "<p>Are we? In this case we should stop worrying, but if we want to keep them (for discoverability) we should think about it</p>",
        "id": 407461642,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702383093
    },
    {
        "content": "<p>For discoverability, I think that it's important to keep <code>FiniteDimensional</code> around, but with a big flashing stroboscopic warning saying \"if you want lemmas about me, instead look for lemmas about <code>Module.Finite</code> in files such and such\".</p>",
        "id": 407461944,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702383203
    },
    {
        "content": "<p>I think lemmas will be made in the wrong generality if we keep <code>FiniteDimensional</code> around, too</p>",
        "id": 407463355,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702383754
    },
    {
        "content": "<p>That might be better than lemmas not being made at all because people were put off?</p>",
        "id": 407463851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702383936
    },
    {
        "content": "<p>I think what would end up happening is people coming on Zulip, asking why their PR isn't progressing, being told it's done in the wrong generality and to rewrite it all (e.g. SVD)</p>",
        "id": 407464159,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702384033
    },
    {
        "content": "<p>I think we should keep <code>FiniteDimensional</code> so that there is a unified spelling of finite dimensional vector spaces over division rings.<br>\nIf we can make <code>finite</code> -&gt; <code>IsNoetherian</code> an instance for modules, I'm fine with not restating lemmas. But they will still be kept until the refactor is done and removed in the end.</p>",
        "id": 407464211,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702384053
    },
    {
        "content": "<p>It should be easy to generalize results on finite-dimensional vector spaces to finite free modules though. Usually the proof still works and one just need to change the typeclass.</p>",
        "id": 407464431,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702384119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/finite_dimensional.20and.20finite/near/407464159\">said</a>:</p>\n<blockquote>\n<p>I think what would end up happening is people coming on Zulip, asking why their PR isn't progressing, being told it's done in the wrong generality and to rewrite it all (e.g. SVD)</p>\n</blockquote>\n<p>Great example! SVD (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6042\">#6042</a>) has been completely stalled for the past two months and a half <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 407464446,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702384122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/116395-maths/topic/finite_dimensional.20and.20finite/near/407464211\">said</a>:</p>\n<blockquote>\n<p>I think we should keep <code>FiniteDimensional</code> so that there is a unified spelling of finite dimensional vector spaces over division rings.<br>\nIf we can make <code>finite</code> -&gt; <code>IsNoetherian</code> an instance for modules, I'm fine with not restating lemmas. But they will still be kept until the refactor is done and removed in the end.</p>\n</blockquote>\n<p>It seems it already is. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isNoetherian_of_finite#doc\">docs#isNoetherian_of_finite</a></p>",
        "id": 407464992,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702384308
    },
    {
        "content": "<p>That <code>Finite</code> is <code>_root_.Finite</code> not <code>Module.Finite</code>.</p>",
        "id": 407465120,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702384339
    },
    {
        "content": "<p>Note that I just said two hours ago that this terminology is not a problem <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 407465229,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702384381
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8999\">#8999</a></p>",
        "id": 407465506,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702384470
    },
    {
        "content": "<p>It worked like a charm :)</p>",
        "id": 407483402,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702389954
    }
]