[
    {
        "content": "<p>What is the difference supposed to be between multiplicative ring norms and absolute values? The following proves that they are the same under <code>[ring R] [linear_ordered_comm_ring S] [nontrivial R] [is_domain S]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.absolute_value</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ohuh</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_ring_norm_class</span> <span class=\"o\">(</span><span class=\"n\">absolute_value</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_neg_eq_map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.map_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_zero_of_map_eq_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f.eq_zero.1</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">absolute_value.subadditive_hom_class</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">absolute_value.monoid_with_zero_hom_class</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uhoh</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_ring_norm_class</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">absolute_value</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">map_mul</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">nonneg'</span> <span class=\"o\">:=</span> <span class=\"n\">map_nonneg</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_zero'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_eq_zero_iff_eq_zero</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">add_le'</span> <span class=\"o\">:=</span> <span class=\"n\">map_add_le_add</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 322739712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674313550
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span></p>",
        "id": 322739861,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674313595
    },
    {
        "content": "<p>Do you mean, besides the fact that norms take their values in real numbers, while for absolute values arbitrary ordered monoids are allowed? — nothing.</p>",
        "id": 322892081,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1674411301
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_ring_norm_class\">docs#mul_ring_norm_class</a> doesn't require the norm to be a real number either, <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span></p>",
        "id": 322892225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674411384
    },
    {
        "content": "<p>Actually, people like Roland Huber call norms <a href=\"https://leanprover-community.github.io/mathlib_docs/find/absolute_value\">docs#absolute_value</a>, more precisely,  he studies seminorms, hence the variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/absolute_value\">docs#absolute_value</a> where the stuff can be zero on nonzero elements. (They <em>must</em> be in mathlib , otherwise I can't understand how <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> managed to study perfectoids…)</p>",
        "id": 322892315,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1674411456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Absolute.20values.20.26.20multiplicative.20ring.20norms/near/322892225\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_ring_norm_class\">docs#mul_ring_norm_class</a> doesn't require the norm to be a real number either, <span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span></p>\n</blockquote>\n<p>What is  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_ring_norm\">docs#mul_ring_norm</a> as compared with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_ring_norm_class\">docs#mul_ring_norm_class</a> ?</p>",
        "id": 322892457,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1674411519
    },
    {
        "content": "<p>I think I see what you're getting at; it is a bit odd how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_ring_norm\">docs#mul_ring_norm</a> is restricted to reals but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_ring_norm_class\">docs#mul_ring_norm_class</a> isn't. Usually the class version is essentially identical to the structure.</p>",
        "id": 322893305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674412056
    },
    {
        "content": "<p>Shouldn't there a coherent way to define structures/typeclasses hand in hand, with just a kind of <code>@[to_class]</code> label?</p>",
        "id": 322894494,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1674412843
    },
    {
        "content": "<p>I think that was dismissed as \"something to try in Lean 4\", which now means \"something to try after the port\"</p>",
        "id": 322894838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674413121
    },
    {
        "content": "<p>The target of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a> don't need a semiring structure</p>",
        "id": 322899829,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674416464
    },
    {
        "content": "<p>That's the main difference</p>",
        "id": 322899872,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674416506
    },
    {
        "content": "<p>because it involves <code>max</code> instead of <code>+</code> in the codomain, right</p>",
        "id": 322901074,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674417268
    },
    {
        "content": "<p>But here I am concretely talking about <code>mul_ring_norm_class</code> and <code>absolute_value</code>. The discussion seems to conclude that there really shouldn't be any difference.</p>",
        "id": 322901157,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674417329
    },
    {
        "content": "<p>Does that mean I have approval from both the algebra and analysis worlds to merge them into one hom structure + one hom class? If so, should I keep <code>absolute_value</code> or <code>mul_ring_norm</code> as a name?</p>",
        "id": 322901269,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674417416
    },
    {
        "content": "<p>I have been away and I just saw the discussion. Yes, <code>absolute_value</code> and <code>mul_ring_norm</code> are equivalent. I am not sure about which name I would prefer to keep - maybe <code>absolute_value</code> is more common, but <code>mul_ring_norm</code> is consistent with the <code>ring_seminorm</code>, etc. nomenclature in mathlib.</p>",
        "id": 323444590,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1674641268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>, <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>, what typeclass assumptions would satisfy both uses? Currently we have</p>\n<ul>\n<li><code>[non_assoc_ring α] [ordered_semiring β]</code> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_ring_norm_class\">docs#mul_ring_norm_class</a></li>\n<li><code>[semiring α] [ordered_semiring β]</code> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/absolute_value\">docs#absolute_value</a></li>\n</ul>",
        "id": 350434357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681718447
    },
    {
        "content": "<p>Why does one require <code>[non_assoc_ring α]</code> and the other one <code>[semiring α]</code>?  <br>\nIs there something such as <code>[non_assoc_semiring α]</code>?<br>\nMoreover, non archimedean valuations are usually defined on a ring, and take their values into an ordered abelian group extended with a 0 element, a structure that becomes an ordered semiring using (min, +) algebra. (All conventions exist in respectable math texts, with respect to the group law should be additive or multiplicative, and the ordering of the triangular inequality…).</p>",
        "id": 350443745,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1681721121
    },
    {
        "content": "<p>The problem here is that we want <code>f (-a) = f a</code> for (multiplicative) ring norms, but it's true for absolute values only under stronger conditions (<code>[ring R] [ordered_comm_ring S] [no_zero_divisors S]</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/absolute_value.map_neg\">docs#absolute_value.map_neg</a>).</p>",
        "id": 350444459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681721289
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_assoc_semiring\">docs#non_assoc_semiring</a> exists, FWIW</p>",
        "id": 350444597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681721327
    },
    {
        "content": "<p>Is it reasonable to add <code>f (-a) = f a</code> as an axiom to <code>absolute_value</code>? That will have the cost of requiring <code>α</code> to be a ring, as opposed to just a semiring.</p>",
        "id": 350444883,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681721406
    },
    {
        "content": "<p>To be quite fair, <code>f (-a) = f a</code> holds for absolute values according to <a href=\"https://en.wikipedia.org/wiki/Absolute_value_(algebra)\">Wikipedia's definition</a>, because they define absolute values on integral domains only.</p>",
        "id": 350445638,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681721581
    },
    {
        "content": "<p>And to clarify, the <code>non_assoc</code> isn't the main difference. Most of <code>algebra.order.absolute_value</code> generalises to non associative (semi)rings (I just tried), but likely it isn't very interesting mathematically.</p>",
        "id": 350446779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681721850
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/tree/unify_absolute_value_mul_ring_norm\">branch#unify_absolute_value_mul_ring_norm</a> for thoughts.</p>",
        "id": 350449387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681722475
    },
    {
        "content": "<p>I think being able to state that <code>id</code> is an absolute value function on the naturals is sensible to support</p>",
        "id": 350450039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681722624
    },
    {
        "content": "<p>Is it, though? Applications here are field theoretic and analytic.</p>",
        "id": 350459744,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681724825
    }
]