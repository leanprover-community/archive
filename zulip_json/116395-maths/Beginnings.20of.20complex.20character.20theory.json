[
    {
        "content": "<p>I'm currently trying to prove that the character <code>f</code> of a complex representation of a finite group satisfies <code>f(g^-1) = f(g)*</code>. Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.Character</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Star.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Charpoly.Eigs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">FdRep</span> <span class=\"n\">ℂ</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conjAe_sum</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.conjAe</span> <span class=\"n\">s.sum</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">Complex.conjAe</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">AddMonoidHom.map_multiset_sum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">starAddEquiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">char_inv_eq_conj</span> <span class=\"o\">:</span> <span class=\"n\">FdRep.character</span> <span class=\"n\">V</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.conjAe</span> <span class=\"o\">(</span><span class=\"n\">FdRep.character</span> <span class=\"n\">V</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">FdRep.character</span>\n  <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">FiniteDimensional.finBasis</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearMap.trace_eq_matrix_trace</span> <span class=\"n\">ℂ</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">FdRep.ρ</span> <span class=\"n\">V</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n    <span class=\"n\">LinearMap.trace_eq_matrix_trace</span> <span class=\"n\">ℂ</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">FdRep.ρ</span> <span class=\"n\">V</span> <span class=\"n\">g</span><span class=\"o\">)]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.trace_eq_sum_roots_charpoly</span><span class=\"o\">,</span> <span class=\"n\">Matrix.trace_eq_sum_roots_charpoly</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">conjAe_sum</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.count_roots</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But I'm not sure how to proceed from here. Any help would be much appreciated.</p>",
        "id": 372419907,
        "sender_full_name": "Geno Racklin Asher",
        "timestamp": 1688507445
    },
    {
        "content": "<p>Do you know the maths proof or are you asking about the maths proof? all you've done so far is unfolded everything without using the key fact that g has finite order (the result is false in general if g has infinite order)</p>",
        "id": 372424729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688510611
    },
    {
        "content": "<p>Really this is a theorem about automorphisms of a complex finite-dimensional vector space of finite order</p>",
        "id": 372424824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688510695
    },
    {
        "content": "<p>I am assuming we have the multiset of eigenvalues of an endomorphism of a finite-dimensional vector space. I would be tempted to prove (1) trace is sum of eigenvalues (which presumably we have) and (2) eigenvalues of inverse equals inverse of eigenvalues and (3) eigenvalues of finite order automorphism are roots of 1 and (4) conjugate of a root of unity (and more generally a complex number of norm 1) is its inverse. These feel like they're the building blocks for the result and it might be better to establish these first and then put them together to get the result you want, rather than just running straight at the result you want with what seems to be little idea about the direction you want to go.</p>",
        "id": 372425111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688510871
    },
    {
        "content": "<p>Formalisation works best if you have a plan.</p>",
        "id": 372425192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688510901
    },
    {
        "content": "<p>I know the maths proof - putting the trace in terms of the roots of polys was a first step on that front</p>",
        "id": 372426893,
        "sender_full_name": "Geno Racklin Asher",
        "timestamp": 1688512013
    },
    {
        "content": "<p>I think what I've been struggling with is finding appropriate theorems for some of those intermediate results</p>",
        "id": 372426921,
        "sender_full_name": "Geno Racklin Asher",
        "timestamp": 1688512033
    },
    {
        "content": "<p>In particular, that taking the inverses of eigenvalues corresponds to the char poly of the inverse matrix</p>",
        "id": 372426947,
        "sender_full_name": "Geno Racklin Asher",
        "timestamp": 1688512075
    },
    {
        "content": "<p>Apologies if I didn't make it clear, I think where I got stuck in this instance is trying to get from <code>Multiset.map conjAe ...</code> into the roots of a new polynomial which I then want to show is the char poly of the appropriate matrix</p>",
        "id": 372427074,
        "sender_full_name": "Geno Racklin Asher",
        "timestamp": 1688512156
    },
    {
        "content": "<p>But yes, I think you're right that I need to break down the result much more to make some progress</p>",
        "id": 372427463,
        "sender_full_name": "Geno Racklin Asher",
        "timestamp": 1688512472
    },
    {
        "content": "<p>So you first want to formalise the statement of what you want, and then if it's not in the library you want to start a new lemma proving it rather than just arguing in one big proof</p>",
        "id": 372475972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688537979
    }
]