[
    {
        "content": "<p>Because of calculus, I realized we don't have anything about convexity in mathlib. I started something, but filling the holes in the API (including the interval API) will be very tedious, so I'd like feedback before moving on: <a href=\"https://gist.github.com/PatrickMassot/6b03a8cd63c44cac510e2abeb2ea710f\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/6b03a8cd63c44cac510e2abeb2ea710f\">https://gist.github.com/PatrickMassot/6b03a8cd63c44cac510e2abeb2ea710f</a></p>",
        "id": 160289423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552052262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you understand why <a href=\"https://gist.github.com/PatrickMassot/6b03a8cd63c44cac510e2abeb2ea710f#file-convex-lean-L116-L120\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/6b03a8cd63c44cac510e2abeb2ea710f#file-convex-lean-L116-L120\">https://gist.github.com/PatrickMassot/6b03a8cd63c44cac510e2abeb2ea710f#file-convex-lean-L116-L120</a> can't be shrinked to one line containing only <code>abel</code>?</p>",
        "id": 160289535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552052347
    },
    {
        "content": "<p>I believe Alexander Bentkamp has been working on convexity, although I don't know if he is ready to release anything</p>",
        "id": 160309536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552067322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>?</p>",
        "id": 160311922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552069123
    },
    {
        "content": "<p>Yes, I have started working on convexity, too. What I have is only slightly larger than yours so far.</p>",
        "id": 160312250,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552069359
    },
    {
        "content": "<p>We should probably merge our efforts. My definition is a bit different from yours, but I think they are equivalent.</p>",
        "id": 160312397,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552069480
    },
    {
        "content": "<p>Could you share your file?</p>",
        "id": 160312442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552069546
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/w2CfiiYLR8tdi24yaWG6EF_L/convex.lean\" target=\"_blank\" title=\"convex.lean\">convex.lean</a></p>",
        "id": 160312566,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552069659
    },
    {
        "content": "<p>I have been working along the Isabelle theory on convexity: <a href=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Analysis/Convex_Euclidean_Space.html\" target=\"_blank\" title=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Analysis/Convex_Euclidean_Space.html\">http://isabelle.in.tum.de/dist/library/HOL/HOL-Analysis/Convex_Euclidean_Space.html</a></p>",
        "id": 160312746,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552069787
    },
    {
        "content": "<p>Nice! I think we'll need to define segments anyway. For instance we want to be able to state the mean value inequality in terms of a bound on the derivative on the relevant segment. The chosen definition of <code>is_convex</code> itself is not very import, we will have many equivalent formulations anyway (like in you file). About convexity of intervals, I think we need to fill in the intervals API anyway. And once we get inclusion criterion for all kinds of intervals then the convexity of intervals will come for free (from the caracterisation of convexity by inclusion of segments, and the fact that a segment in R is a closed interval). About half spaces in C, why don't you use the fact that <code>re</code> and <code>im</code> are real-linear forms and use the general result you proved above?</p>",
        "id": 160314094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552070700
    },
    {
        "content": "<p>Are you currently working on this, or is it dormant?</p>",
        "id": 160314111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552070718
    },
    {
        "content": "<p>I am actively working on this</p>",
        "id": 160315313,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552071635
    },
    {
        "content": "<p>Concerning the halfspaces in C, I haven't found lemmas stating that re and im are real-linear forms...</p>",
        "id": 160315399,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552071718
    },
    {
        "content": "<p>Then let's prove it!</p>",
        "id": 160315641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552071866
    },
    {
        "content": "<p>Well, that's essentially what I did, but you are right that we should have a lemma explicitly stating that fact.</p>",
        "id": 160315837,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552072011
    },
    {
        "content": "<p>Since you are actively working on this, here is what I propose. I'll open a PR adding stuff to <code>intervals.lean</code>, filling the missing intervals and adding all lemmas stating precisely when a non-empty Icc is contained in another interval. Then you can take everything you want from my convexity gist. I really think we want the segment definition, but then I don't care what is the official definition of convexity, as long as we have many lemmas giving caracterisations.</p>",
        "id": 160315891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552072063
    },
    {
        "content": "<p>And I say that convexity of all intervals will follow trivially from my interval lemmas</p>",
        "id": 160315967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552072110
    },
    {
        "content": "<p>Ok, sounds good.</p>",
        "id": 160316008,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552072156
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/805\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/805\">https://github.com/leanprover-community/mathlib/pull/805</a></p>",
        "id": 160316142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552072247
    },
    {
        "content": "<p>So you can take this intervals file, remove the corresponding bits from my convexity file, and move from there. Actually I think your symmetric descriptions of segments may be pretty convenient in the ball proofs</p>",
        "id": 160316851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552072838
    },
    {
        "content": "<p>By the way, it means that you should find a way to make sure your proofs of different conditions for convexity also prove the corresponding descriptions of segments. It only means you should state them as conditions about being in a segment, and then transfer to convexity condition.</p>",
        "id": 160317200,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552073059
    },
    {
        "content": "<p>The Isabelle file is really large. I like the way they state that distance to a fixed point is convex instead of hiding it inside the proof of convexity of balls like I did.</p>",
        "id": 160318122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552073663
    },
    {
        "content": "<blockquote>\n<p>By the way, it means that you should find a way to make sure your proofs of different conditions for convexity also prove the corresponding descriptions of segments. It only means you should state them as conditions about being in a segment, and then transfer to convexity condition. </p>\n</blockquote>\n<p>I am not sure what you mean here. Do you just mean that I should prove that my definition is eqivalent to how you defined convexity?</p>",
        "id": 160321761,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552076172
    },
    {
        "content": "<p>re: <code>re</code> and <code>im</code> linearity, I don't think this exact statement is there but it's a direct application of lemmas that should be there (i.e. <code>re (x + y) = re x + re y</code>, <code>re (r * x) = r * re x</code>)</p>",
        "id": 160321928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552076294
    },
    {
        "content": "<p>Yes, but I also needed to instantiate C as a R-vector space and then show that (c • x).re = c • <a href=\"http://x.re\" target=\"_blank\" title=\"http://x.re\">x.re</a>. That's around 30 lines that should probably be put into complex/basic.lean at some point.</p>",
        "id": 160322184,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552076478
    },
    {
        "content": "<p>Oh, I expected these to be in there but they were missing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">smul_re</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">smul_im</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>The stuff about having C as an R vector space and instantiating coe and re as linear functions should go somewhere else, maybe somewhere in ring_theory?</p>",
        "id": 160322779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552076972
    },
    {
        "content": "<p>I'm pretty sure we have a method for obtaining a vector space from a ring hom (coe), so that part should be easy, and the linearity conditions should should all be defeq to existing lemmas</p>",
        "id": 160322911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552077068
    },
    {
        "content": "<p>Oh, then I probably did it the hard way...</p>",
        "id": 160322937,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552077109
    },
    {
        "content": "<p>How would that work exactly?</p>",
        "id": 160323054,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552077189
    },
    {
        "content": "<p>You can define an instance of <code>vector_space E F</code> given a field hom <code>f : E -&gt; F</code> where you define the smul as <code>a \\bu x = f a * x</code></p>",
        "id": 160323149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552077263
    },
    {
        "content": "<p>This is how I did it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">add_smul</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_add</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_mul</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>What you wrote sounds much easier than that.</p>",
        "id": 160323151,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552077266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> will know the state of this - I've seen various versions of it float by the chat but I'm not sure what's made it into mathlib</p>",
        "id": 160323196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552077317
    },
    {
        "content": "<p>there should be something in ring_theory/algebra.lean</p>",
        "id": 160323320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552077399
    },
    {
        "content": "<p>yes, <code>algebra.of_ring_hom</code> looks like it will work, although you have to get the module part out and upgrade it to a vector_space</p>",
        "id": 160323432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552077492
    },
    {
        "content": "<p>But I guess it's not a bad thing knowing that actually C is a R-algebra rather than just a module</p>",
        "id": 160323465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552077536
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>By the way, it means that you should find a way to make sure your proofs of different conditions for convexity also prove the corresponding descriptions of segments. It only means you should state them as conditions about being in a segment, and then transfer to convexity condition. </p>\n</blockquote>\n<p>I am not sure what you mean here. Do you just mean that I should prove that my definition is eqivalent to how you defined convexity?</p>\n</blockquote>\n<p>Yes, I think so</p>",
        "id": 160325513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552079052
    },
    {
        "content": "<p>ok, sure. I can do that.</p>",
        "id": 160325545,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552079076
    },
    {
        "content": "<p>and <code>algebra.of_ring_hom</code> works like a charm!</p>",
        "id": 160326134,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552079641
    },
    {
        "content": "<p>There are two natural structures that make it possible to speak about convex combinations (hence, convexity, convex functions etc): <code>[semimodule nnreal E]</code> and <code>[vector_space real E] [add_torsor E P]</code>.</p>",
        "id": 207690717,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598048179
    },
    {
        "content": "<p>Unfortunately, in the most common case <code>[vector_space real E]</code> these two approaches result in non-defeq definitions.</p>",
        "id": 207690862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598048331
    },
    {
        "content": "<p>For a <code>[semimodule nnreal E]</code> we can talk about <code>a • x + (1 - a) • y</code> and for an <code>affine_space</code> we can talk about <code>a • (y -ᵥ x) +ᵥ x</code>.</p>",
        "id": 207691089,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598048517
    },
    {
        "content": "<p>So, we either need some clever trick (I failed to come up with one) or stick to one of the approaches. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> What do think?</p>",
        "id": 207691339,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598048703
    },
    {
        "content": "<p>There's also a separate algebraic structure of <a href=\"https://ncatlab.org/nlab/show/convex+space\">convex space</a> which is a place where you can form convex combinations, and which you can obtain from either of these I guess. (Its free algebra on n+1 generators is the n-simplex.)</p>",
        "id": 207691943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598049146
    },
    {
        "content": "<p>This abstract version has some examples which don't really come from geometry, like the quotient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> (as a convex set) by the <del>equivalence</del> relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>∼</mo><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r \\sim r'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo separator=\"true\">,</mo><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">r,r' \\in [0,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 207692474,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598049614
    },
    {
        "content": "<p><del>(or r=r'=1 :p)</del></p>",
        "id": 207692727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598049848
    },
    {
        "content": "<p><del>well yeah :)</del></p>",
        "id": 207692754,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598049879
    },
    {
        "content": "<p>I would prioritize the affine space case which seems much more common.</p>",
        "id": 207697814,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598054657
    },
    {
        "content": "<p>Is there no way to define some sort of \"pre-<code>add_torsor</code>\" typeclass that wouldn't require an additive group but only a monoid? Even if it's only used for this, it might be worth it if it's possible.</p>",
        "id": 207698069,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1598054936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/convexity/near/207691943\">said</a>:</p>\n<blockquote>\n<p>There's also a separate algebraic structure of <a href=\"https://ncatlab.org/nlab/show/convex+space\">convex space</a> which is a place where you can form convex combinations, and which you can obtain from either of these I guess. (Its free algebra on n+1 generators is the n-simplex.)</p>\n</blockquote>\n<p>If we go this way, then a <code>vector_space real E</code> will have two non-defeq instances.</p>",
        "id": 207702101,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598061713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> Do you have some definition?</p>",
        "id": 207702209,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598061850
    },
    {
        "content": "<p>FWIW, I do think that these abstract convex gadgets deserve some attention. They're (positive) Archimedean analogues of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> modules, and the silly example I mentioned above is a \"torsion\" module, in some sense. The \"usual\" convex spaces, defined as subsets of real vector spaces, are analogous to lattices in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>-vector spaces.</p>",
        "id": 207702428,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598062207
    },
    {
        "content": "<p>We can add a typeclass <code>convex_space</code> but then we'll have a diamond <code>vector_space ℝ E → add_torsor E E → convex_space E</code> vs <code>vector_space ℝ E → semimodule ℝ≥0 E → convex_space E</code>, and the resulting \"convex combination\" instances are not defeq.</p>",
        "id": 207706428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1598069484
    },
    {
        "content": "<p>The second path <code>vector_space ℝ E → semimodule ℝ≥0 E → convex_space E</code> is essentially a restriction of scalars. Would it make sense to define something analogous to <code>scalar_tower</code> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> ?</p>",
        "id": 207726946,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598106721
    },
    {
        "content": "<p>I don't know</p>",
        "id": 207726998,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598106788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> No, I don't have a specific definition, it was probably just wishful thinking.</p>",
        "id": 207727891,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1598108178
    },
    {
        "content": "<p>what's the definition of <code>convex_space</code>?</p>",
        "id": 207728151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598108614
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/convex+space\">https://ncatlab.org/nlab/show/convex+space</a></p>",
        "id": 207728247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598108749
    }
]