[
    {
        "content": "<p>Is there an easy way to prove the size of the following <code>Finset</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">max</span> <span class=\"n\">x.1.natAbs</span> <span class=\"n\">x.2.natAbs</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">square_size</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset.card</span> <span class=\"o\">(</span><span class=\"n\">square</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"c1\">--This is what I want to prove</span>\n</code></pre></div>\n<p>I can do this by first doing a horrible case check to show this <code>Finset</code> is the same as : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">×ˢ</span>  <span class=\"o\">{(</span><span class=\"n\">m</span><span class=\"o\">)})</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">{</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)}</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">({(</span><span class=\"n\">m</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">({</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>But I was hoping for something nicer.</p>",
        "id": 383578141,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1691664796
    },
    {
        "content": "<p>Is showing it's the difference of <code>Finset.Icc (-m, -m) (m, m)</code> and <code>Finset.Icc (-m + 1, -m + 1)(m - 1, m-1)</code> any easier?</p>",
        "id": 383580828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691665371
    },
    {
        "content": "<p>Hmm I can't immediately tell if that would be any easier</p>",
        "id": 383581947,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1691665635
    },
    {
        "content": "<p>had a stab at these but gave up as its pretty horrible lol, also please <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> next time with imports <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">max</span> <span class=\"n\">x.1.natAbs</span> <span class=\"n\">x.2.natAbs</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">square_eq</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">square</span> <span class=\"n\">m</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">\\</span>\n    <span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">x2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">square</span><span class=\"o\">,</span> <span class=\"n\">max_eq_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">abs_cases</span> <span class=\"n\">x1</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">su</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">su</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">abs_cases</span> <span class=\"n\">x2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">su2</span><span class=\"o\">,</span> <span class=\"n\">hh2</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">su2</span><span class=\"o\">,</span> <span class=\"n\">hh2</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"bp\">.</span>\n    <span class=\"n\">aesop</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">or_iff_not_imp_left</span><span class=\"o\">]</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">le_add_of_nonneg_of_le</span> <span class=\"n\">hh</span> <span class=\"n\">hm</span><span class=\"o\">)</span>\n    <span class=\"n\">aesop</span>\n    <span class=\"bp\">.</span> <span class=\"n\">specialize</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_add_of_nonneg_of_le</span> <span class=\"n\">hh2</span> <span class=\"n\">hm</span><span class=\"o\">)</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"bp\">.</span> <span class=\"n\">linarith</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">square_size</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset.card</span> <span class=\"o\">(</span><span class=\"n\">square</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"c1\">--This is what I want to prove</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">square_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.card_sdiff</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Prod.card_Icc</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Prod.card_Icc</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">lt_neg_self_iff</span><span class=\"o\">,</span> <span class=\"n\">Int.card_Icc</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span>\n      <span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_add_cancel</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_add</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_cast</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.toNat_ofNat</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul'</span> <span class=\"bp\">&lt;;&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span>\n        <span class=\"n\">linarith</span>\n    <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">ring</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">Prod.mk_lt_mk</span><span class=\"o\">,</span> <span class=\"n\">lt_neg_self_iff</span><span class=\"o\">,</span> <span class=\"n\">le_neg_self_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Int.coe_nat_nonpos_iff</span><span class=\"o\">,</span> <span class=\"n\">Prod.Icc_mk_mk</span><span class=\"o\">,</span>\n      <span class=\"n\">Finset.mem_product</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_Icc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">aesop</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 383702894,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691687590
    },
    {
        "content": "<p>I thought an induction approach might be more pleasant, but ran into a deterministic timeout in <code>simp only</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">max</span> <span class=\"n\">x.1.natAbs</span> <span class=\"n\">x.2.natAbs</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">square_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">square</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Finset.Icc</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">n.succ</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span><span class=\"o\">,</span><span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">\\</span>\n    <span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">),</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>  <span class=\"c1\">-- this causes it to hang</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383708268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691688651
    },
    {
        "content": "<p>If only we still had omega <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 383708526,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691688703
    },
    {
        "content": "<p>oh E_2, i'll have a stab in a couple seconds</p>",
        "id": 383722817,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691691969
    },
    {
        "content": "<p><code>rfl</code> proves the zero step</p>",
        "id": 383725646,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691692620
    },
    {
        "content": "<p>but I'm not too sure how this is an inductive approach</p>",
        "id": 383725744,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691692640
    },
    {
        "content": "<p>as in, I don't really see an obvious induction argument for this</p>",
        "id": 383725911,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691692682
    },
    {
        "content": "<p>I hit the timeout before thinking about it</p>",
        "id": 383726057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691692712
    },
    {
        "content": "<p>But I would guess a more viable aproach is to show that <code>(square n.succ).disjUnion (Finset.Icc (-(n),-(n)) (n,n)) sorry = Finset.Icc ((-n.succ,-n.succ) : ℤ × ℤ) (n.succ,n.succ)</code></p>",
        "id": 383726183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691692745
    },
    {
        "content": "<p>Which should also make it easier to get the cardinality at the end</p>",
        "id": 383726257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691692767
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">max</span> <span class=\"n\">x.1.natAbs</span> <span class=\"n\">x.2.natAbs</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">square_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">⟨(</span><span class=\"bp\">·</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)),</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">disjUnion</span>\n    <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">⟨(</span><span class=\"bp\">·</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)),</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩)</span>\n  <span class=\"o\">(</span><span class=\"n\">Finset.disjoint_iff_ne.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">))</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">(((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">⟨(((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">disjUnion</span>\n    <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">⟨((</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.disjoint_iff_ne.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n    <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finset.card_union</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">s.card</span> <span class=\"bp\">+</span> <span class=\"n\">t.card</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_tsub_of_add_eq</span> <span class=\"o\">(</span><span class=\"n\">card_union_add_card_inter</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">square</span> <span class=\"bp\">$</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">square_eq</span><span class=\"o\">,</span> <span class=\"n\">Finset.card_union</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Int.toNat</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-↑</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ring_nf</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.card_map</span><span class=\"o\">,</span> <span class=\"n\">Finset.card_disjUnion</span><span class=\"o\">,</span> <span class=\"n\">neg_add_rev</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">lt_add_neg_iff_add_lt</span><span class=\"o\">,</span> <span class=\"n\">Int.card_Icc</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_eq_of_eq_add</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ring</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383740026,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691696294
    },
    {
        "content": "<p>I think this is a good approach</p>",
        "id": 383740037,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691696298
    },
    {
        "content": "<p>the <code>sorry</code>s in the definition of <code>square_eq</code> are <code>by aesop</code>, I just removed them for speed</p>",
        "id": 383740109,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691696319
    },
    {
        "content": "<p>the <code>sorry</code>s in that theorem just follow by boring ass case bashing</p>",
        "id": 383740157,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691696334
    },
    {
        "content": "<p>and the last <code>sorry</code> is that the corners have size 4, the expression looks really ugly but it's probably fairly simple with judicious use of <code>simp</code></p>",
        "id": 383740256,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691696367
    },
    {
        "content": "<p>(stuff looks a lot better with <code>set_option pp.proofs.withType false</code>)</p>",
        "id": 383746812,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691698144
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">max</span> <span class=\"n\">x.1.natAbs</span> <span class=\"n\">x.2.natAbs</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- a re-definition in simp-normal form</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">square_eq</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">square</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">max</span> <span class=\"bp\">|</span><span class=\"n\">x.1</span><span class=\"bp\">|</span> <span class=\"bp\">|</span><span class=\"n\">x.2</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">square</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_square_aux</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">max</span> <span class=\"bp\">|</span><span class=\"n\">i.1</span><span class=\"bp\">|</span> <span class=\"bp\">|</span><span class=\"n\">i.2</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">abs_le</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">square_disj</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">square_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.disjoint_left</span><span class=\"o\">,</span> <span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_square_aux</span><span class=\"o\">]</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">simp_all</span>\n\n<span class=\"c1\">-- copied from the nat version, probably it already exists somewhere?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Int.le_add_one_iff</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">lt_add_one_iff.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">Or.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le.intro</span> <span class=\"mi\">1</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">le_of_eq</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">square_union</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">square_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_square_aux</span><span class=\"o\">,</span> <span class=\"n\">mem_square_aux</span><span class=\"o\">,</span>\n    <span class=\"n\">and_iff_right_of_imp</span> <span class=\"n\">le_of_eq</span><span class=\"o\">,</span> <span class=\"n\">Int.le_add_one_iff</span><span class=\"o\">,</span> <span class=\"n\">or_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">square_disjunion</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">disjUnion</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">square_disj</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">disjUnion_eq_union</span><span class=\"o\">,</span> <span class=\"n\">square_union</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">square_size</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset.card</span> <span class=\"o\">(</span><span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">square</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">disjUnion</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">square_disj</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">square_disjunion</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">card_disjUnion</span><span class=\"o\">,</span> <span class=\"n\">card_product</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">card_product</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">Int.card_Icc</span><span class=\"o\">,</span> <span class=\"n\">Int.card_Icc</span><span class=\"o\">,</span> <span class=\"n\">Int.toNat_sub_of_le</span><span class=\"o\">,</span> <span class=\"n\">Int.toNat_sub_of_le</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">eq_sub_iff_add_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.cast_inj</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_ofNat</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">ring_nf</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>using Erics' ideas, but without the case bashing</p>",
        "id": 383768270,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1691705005
    },
    {
        "content": "<p>Oh amazing, thank you! I was out and missed all the discussion, but I'll definitely profit from the results :)</p>",
        "id": 383770058,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1691705532
    },
    {
        "content": "<p>The key ideas are to use Eric W's idea of showing the disjoint union, and then expressing everything in terms of max |x| |y| makes the case-work a lot simpler</p>",
        "id": 383771071,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1691705865
    },
    {
        "content": "<p>Yes, I hadn't thought about showing the disjoint union. That's a really nice way to do it</p>",
        "id": 383771234,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1691705919
    }
]