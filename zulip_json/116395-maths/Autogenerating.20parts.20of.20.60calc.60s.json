[
    {
        "content": "<p>Perhaps we could have <code>calc?</code> which outputs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n     <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>For the goal <code>A ≤ B</code></p>",
        "id": 358251669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684067868
    },
    {
        "content": "<p>My dream here is actually a full calc widget, where you click on a subterm and it adds a new line with a hole replacing the subterm and a <code>rel_congr</code> partial proof focusing on the hole, as well as other UI features (drag and drop a hypothesis, click to combine two <code>rel_congr</code> lines into one, etc).</p>",
        "id": 358252081,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684068061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/New.20tactic.20for.20.22relational.20congruence.22/near/358251669\">said</a>:</p>\n<blockquote>\n<p>Perhaps we could have <code>calc?</code> which outputs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n     <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>For the goal <code>A ≤ B</code></p>\n</blockquote>\n<p>ha ha I remember asking for this with Lean 3 calc in about 2018 :-) I had an essentially isomorphic moan that it was hard to remember the syntax. I think the Lean 4 syntax is easier though (although IIRC someone was complaining that spacing issues can give counterintuitive errors)</p>",
        "id": 358253819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684068743
    },
    {
        "content": "<p>I think it would be even easier if the underscore could be replaced by something more visible when underlined, eg a dot</p>",
        "id": 358254583,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684069030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/New.20tactic.20for.20.22relational.20congruence.22/near/358251669\">said</a>:</p>\n<blockquote>\n<p>Perhaps we could have <code>calc?</code> which outputs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n     <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>For the goal <code>A ≤ B</code></p>\n</blockquote>\n<p>Nice proof by example: the Lean 4 syntax is really hard to remember. Your <code>:</code> should be <code>:=</code> (I don't know why).</p>",
        "id": 358257044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684070032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/New.20tactic.20for.20.22relational.20congruence.22/near/358257044\">said</a>:</p>\n<blockquote>\n<p>Your <code>:</code> should be <code>:=</code> (I don't know why).</p>\n</blockquote>\n<p>Because the thing on the right is a proof of the thing on the left. If you use <code>statement : proof</code> it's backwards from every other use of <code>:</code> in lean</p>",
        "id": 358261832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684071937
    },
    {
        "content": "<p>(sorry, just accidentally renamed this entire thread in an attempt to move a post (I didn't know I could do that with other people's threads) and couldn't remember what it had been called before so have guessed)</p>",
        "id": 358263010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684072344
    },
    {
        "content": "<p>you can see it in the edit history</p>",
        "id": 358264651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684072921
    },
    {
        "content": "<p>Restored</p>",
        "id": 358264812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684072980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/New.20tactic.20for.20.22relational.20congruence.22/near/358254583\">said</a>:</p>\n<blockquote>\n<p>I think it would be even easier if the underscore could be replaced by something more visible when underlined, eg a dot</p>\n</blockquote>\n<p>Coming from Isabelle, the natural and pretty symbol here would be …<br>\nQuite similar to pen and paper proofs that way.</p>",
        "id": 358276739,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684077762
    },
    {
        "content": "<p>10 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/New.20tactic.20for.20.22relational.20congruence.22\">#maths &gt; New tactic for \"relational congruence\"</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 358280338,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684079368
    },
    {
        "content": "<p>That's what we have in Lean 3 (well, <code>...</code>). Not sure why we changed. Maybe to have a single character?</p>",
        "id": 358280379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684079387
    },
    {
        "content": "<p>Doesn't <code>...</code> mean \"as many <code>_</code>s as required\" in Lean4?</p>",
        "id": 358300757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684088124
    },
    {
        "content": "<p>That’s <code>..</code>—<code>...</code> might be unused?</p>",
        "id": 358524471,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1684171079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358280379\">said</a>:</p>\n<blockquote>\n<p>That's what we have in Lean 3 (well, <code>...</code>). Not sure why we changed. Maybe to have a single character?</p>\n</blockquote>\n<p>Having a single character is pretty handy for aligning</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n    <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>(is this the right syntax for Lean 4 now?)</p>",
        "id": 358533265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684173216
    },
    {
        "content": "<p>True, but most goals proved by calcs don't have single-character LHS!</p>",
        "id": 358538929,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684174571
    },
    {
        "content": "<p>In lean 3 I would often have a single character there; a single underscore!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">some_long_type</span> <span class=\"bp\">≃</span> <span class=\"n\">some_other_long_type</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">some_intermediate_type</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">some_other_intermediate_type</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>though I don't know if that's still legal in Lean 4.</p>",
        "id": 358539446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684174708
    },
    {
        "content": "<p>It is, yeah</p>",
        "id": 358540690,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684175079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358533265\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358280379\">said</a>:</p>\n<blockquote>\n<p>That's what we have in Lean 3 (well, <code>...</code>). Not sure why we changed. Maybe to have a single character?</p>\n</blockquote>\n<p>Having a single character is pretty handy for aligning</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It could even be just one (Unicode) character: “…” (U+2026):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"bp\">…</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 358545280,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1684176285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358280379\">said</a>:</p>\n<blockquote>\n<p>That's what we have in Lean 3 (well, <code>...</code>). Not sure why we changed. Maybe to have a single character?</p>\n</blockquote>\n<p>The reason it's a <code>_</code> is because it's a term. There is nothing keywordish going on here. You can perfectly well not put <code>_</code> there and write out the term</p>",
        "id": 358571207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684184805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358539446\">said</a>:</p>\n<blockquote>\n<p>In lean 3 I would often have a single character there; a single underscore!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">some_long_type</span> <span class=\"bp\">≃</span> <span class=\"n\">some_other_long_type</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">some_intermediate_type</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">some_other_intermediate_type</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>though I don't know if that's still legal in Lean 4.</p>\n</blockquote>\n<p>in other words, yes this is legal, you could put all the underscores on the RHS instead if you wanted, or even put underscores everywhere and use the proof term to determine the type</p>",
        "id": 358571532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684184950
    },
    {
        "content": "<p>In the porting meeting today, we discussed code actions which would be useful for calcs.  Here's a general framework for the discussion: consider a proof with a goal <code>A &lt; Z</code>, and a partially-complete calc block, together with some cursor positions I have labelled by number:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">possibly_existing_proof_about_A_B</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n<span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>At (1) the goal is <code>A &lt; B</code>, at (2) the goal is <code>B &lt; C</code>, and at (3) the goal is <code>C &lt; Z</code>.</p>\n<p><strong>Wishlist item 1:</strong> a code action which is triggered by having a cursor in one of the numbered positions, then clicking on a subterm of either the LHS or the RHS of the goal displayed at that numbered position.  It would generate a row which is a duplicate of the LHS/RHS (whichever side was clicked on), which has a _ replacing the subterm that was clicked on, and which has a partial proof by <code>rel_congr</code> focusing on that subterm, and which is either above or below the existing row, as appropriate.</p>\n<p>So, for example, if <code>B</code> has the form <code>3 * (x + y) + 5</code>, clicking <code>x + y</code> as shown on the RHS of the goal at position (1) generates</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n</code></pre></div>\n<p>and clicking <code>x + y</code> as shown on the LHS of the goal at position (2) generates</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">possibly_existing_proof_about_A_B</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n</code></pre></div>\n<p>If <code>C</code> has the form <code>3 * (x + y) + 5</code>, clicking <code>x + y</code> as shown on the LHS of the goal at position (3) generates</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_A_B</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>If <code>Z</code> has the form <code>3 * (x + y) + 5</code>, clicking <code>x + y</code> as shown on the RHS of the goal at position (3) generates</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_A_B</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 358586347,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684191637
    },
    {
        "content": "<p><strong>Wishlist item 2:</strong> a code action which is triggered when we have a proof with consecutive \"disjoint\" <code>rel_congr</code>s,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">stuff</span> <span class=\"bp\">&lt;</span> <span class=\"n\">stuff</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"o\">[</span><span class=\"n\">etc</span><span class=\"o\">]</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">possibly_existing_proof_1</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">possibly_existing_proof_2</span>\n  <span class=\"o\">[</span><span class=\"n\">etc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and which cleans it up by combining the two lines to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">stuff</span> <span class=\"bp\">&lt;</span> <span class=\"n\">stuff</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"o\">[</span><span class=\"n\">etc</span><span class=\"o\">]</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">possibly_existing_proof_1</span><span class=\"bp\">;</span> <span class=\"n\">possibly_existing_proof_2</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">sorries</span> <span class=\"n\">here</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">more</span> <span class=\"n\">side</span> <span class=\"n\">goals</span> <span class=\"n\">are</span> <span class=\"n\">generated</span> <span class=\"n\">than</span> <span class=\"n\">before</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">etc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 358587027,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684191959
    },
    {
        "content": "<p>I have bigger dreams, but I think said dreams would require rendering a clickable interactive version of the calc as a picture in the infoview.  So these are intended as more modest proposals which might be doable with the current framework.</p>",
        "id": 358587376,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684192134
    },
    {
        "content": "<p>I should say, also, that this is partly a record of a conversation with <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> a few months ago.  But maybe now that both widgets and <code>rel_congr</code> are more advanced, it is easier to state a proper specification.</p>",
        "id": 358588246,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684192573
    },
    {
        "content": "<p>Are there any variations on these code actions (it sounds like you are describing not code actions but widgets) which would be applicable without <code>rel_congr</code>?</p>",
        "id": 358588335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684192618
    },
    {
        "content": "<p>Code actions in std have calc available but not <code>rel_congr</code></p>",
        "id": 358588382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684192643
    },
    {
        "content": "<p>and even without that, not all calc proofs use <code>rel_congr</code> for the proof</p>",
        "id": 358588446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684192678
    },
    {
        "content": "<p>I suppose Eric's original suggestion could be done as a tactic code action</p>",
        "id": 358588591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684192746
    },
    {
        "content": "<p>For equality calcs, you'd want <code>congrm</code> (once it's ported) instead of <code>rel_congr</code>.  But I think the pattern feature (common to both those tactics) will often be important in writing a partial proof which focused correctly.</p>",
        "id": 358588637,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684192771
    },
    {
        "content": "<p>Honestly, <code>rel_congr</code> probably could move to <code>Std</code>; it imports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Algebra.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Relation.Rfl</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Relation.Symm</span>\n</code></pre></div>\n<p>and even those three imports are only for the limited amount of forward-reasoning on hypotheses.</p>",
        "id": 358588853,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684192897
    },
    {
        "content": "<p>that should be an extensible tactic anyway, like we did for <code>rel_congr_discharger</code></p>",
        "id": 358589119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193041
    },
    {
        "content": "<p>I think we could also move rfl and symm</p>",
        "id": 358589197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193070
    },
    {
        "content": "<p>I guess my point is that the situation when writing a new line of the calc is (most) annoying is precisely when it's largely the same as an existing line, with a difference in a subterm.  And that's precisely the use case of <code>rel_congr</code>/<code>congrm</code>.  For a new calc line which differs \"in the large\" from existing lines, there's no code action which could help -- you just need to write it out.</p>",
        "id": 358589242,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193103
    },
    {
        "content": "<p>I think some code actions (which, mind you, take no input other than the cursor/selection position) could be used to do structural editing of calc blocks, like the thing you mentioned about selecting a subterm and producing a new intermediate goal replacing this with <code>_</code></p>",
        "id": 358589353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193180
    },
    {
        "content": "<p>You mean, as opposed to letting the user select the subterm by clicking in the goal view?  I do think that clicking in the goal view will be much more user-friendly (and less liable to user error).</p>",
        "id": 358589436,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193267
    },
    {
        "content": "<p>No \"as opposed\"</p>",
        "id": 358589504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193294
    },
    {
        "content": "<p>this is just general support for calc block syntax trickiness</p>",
        "id": 358589517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193309
    },
    {
        "content": "<p>clicking in the goal view isn't going to work in the near term because the goal view is not configurable/extensible like code actions are</p>",
        "id": 358589596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193381
    },
    {
        "content": "<p>Perhaps what I don't understand is how you could reliably let the user select a subterm based just on the code.  Would the action make a guess based on the fewest-characters-away head symbol?</p>",
        "id": 358589606,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193394
    },
    {
        "content": "<p>You can make a brand new widget and put whatever functionality you like in there</p>",
        "id": 358589625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358589596\">said</a>:</p>\n<blockquote>\n<p>clicking in the goal view isn't going to work in the near term because the goal view is not configurable/extensible like code actions are</p>\n</blockquote>\n<p>What about a widget which just displayed the existing goal, and let you click and do the things I was suggesting?</p>",
        "id": 358589695,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193423
    },
    {
        "content": "<p>but it won't actually be the goal view, and more likely than not the goal view will still be there</p>",
        "id": 358589703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193428
    },
    {
        "content": "<p>That seems fine.</p>",
        "id": 358589719,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193439
    },
    {
        "content": "<p>sure, you can do that (or induce others to do so :) )</p>",
        "id": 358589745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193456
    },
    {
        "content": "<p>Hoping for the latter .... I hadn't necessarily hoped for it immediately, but I got excited when Scott was asking about it in the porting meeting!</p>",
        "id": 358589796,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193500
    },
    {
        "content": "<p>but it's a rather heavyweight solution and probably not suitable for std (at least not on all calc blocks)</p>",
        "id": 358589803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193510
    },
    {
        "content": "<p>so I'm thinking more in the direction of smaller \"quick fix\" style code actions that are more universally useful</p>",
        "id": 358589911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193581
    },
    {
        "content": "<p>like eric's autocomplete suggestion</p>",
        "id": 358589948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358589606\">said</a>:</p>\n<blockquote>\n<p>Perhaps what I don't understand is how you could reliably let the user select a subterm based just on the code.  Would the action make a guess based on the fewest-characters-away head symbol?</p>\n</blockquote>\n<p>Can you explain the answer to this?  It's perhaps what I'm missing from your idea.</p>",
        "id": 358589952,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193612
    },
    {
        "content": "<p>code actions actually get a selection, not just a cursor position</p>",
        "id": 358590001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193644
    },
    {
        "content": "<p>(the cursor is a <code>Range</code>)</p>",
        "id": 358590028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193656
    },
    {
        "content": "<p>Do you mean, the user would highlight the subterm?</p>",
        "id": 358590039,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193668
    },
    {
        "content": "<p>so selecting subterms is a thing you can do, and we can also do something reasonable for point selections</p>",
        "id": 358590063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193690
    },
    {
        "content": "<p>I think that could work if it was rather forgiving of the range selected.  It would be frustrating to have to highlight exactly the right number of parentheses.</p>",
        "id": 358590122,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193732
    },
    {
        "content": "<p>when you hover any position you already see a highlight for the nearest enclosing subterm</p>",
        "id": 358590130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193736
    },
    {
        "content": "<p>yeah, I would do something very forgiving, basically trying to give an answer to any possible cursor position / selection</p>",
        "id": 358590219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193783
    },
    {
        "content": "<p>This is actually one of the issues with \"term code actions\" along the same lines as hole code actions: terms can be nested, so it's not always obvious whether you want a code action for <code>foo</code> to fire when your cursor is in the <code>x</code> of <code>foo x y</code></p>",
        "id": 358590287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193863
    },
    {
        "content": "<p>Right, and in this task it will do something different for <em>every</em> term and subterm, so you have to get it right.</p>",
        "id": 358590379,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684193912
    },
    {
        "content": "<p>and I don't want to generate tens of code actions for every super-term of your cursor position, it needs to be just one for the user to be able to make sense of it</p>",
        "id": 358590388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684193917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358590130\">said</a>:</p>\n<blockquote>\n<p>when you hover any position you already see a highlight for the nearest enclosing subterm</p>\n</blockquote>\n<p>Can you clarify what you mean by this?  I just fired up a mathlib4 to investigate, but can't see it.</p>",
        "id": 358590607,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684194071
    },
    {
        "content": "<p>the other thing is that if possible I would like it to be implementable as one pass for all (or at least most) term code actions, because you basically have to scan the whole info tree to do anything with it, so if every code action does its own pass that's a lot of work per cursor move</p>",
        "id": 358590637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684194099
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>If you put your mouse cursor over the first <code>+</code> you should see a highlight over the span <code>1 + 2</code></p>",
        "id": 358590716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684194141
    },
    {
        "content": "<p>Oh wait, I do see it .. it's a very faint highlight and half-covered by the pop-up.</p>",
        "id": 358590717,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684194142
    },
    {
        "content": "<p>(I'll fix my VSCode settings.)</p>",
        "id": 358590764,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684194183
    },
    {
        "content": "<p>OK, I can see how a code action (no widget) would work then.</p>",
        "id": 358590789,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684194205
    },
    {
        "content": "<p>What about my <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358587027\">other wishlist item</a>?  That seems like it doesn't need a widget either?</p>",
        "id": 358590913,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684194285
    },
    {
        "content": "<p>that's certainly possible to do, it would be quite specific to rel_congr but should be implementable as a tactic code action</p>",
        "id": 358591150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684194441
    },
    {
        "content": "<p>actually I'm not sure about the sorries part, current code actions don't actually try to run the tactic in the new state to see what they would do, although I suppose they could</p>",
        "id": 358591327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684194569
    },
    {
        "content": "<p>I guess you could stick <code>&lt;;&gt; sorry</code> at the end so it doesn't need to know.</p>",
        "id": 358591416,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684194608
    },
    {
        "content": "<p>or just nothing and let the user deal with the errors?</p>",
        "id": 358591436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684194626
    },
    {
        "content": "<p>we try to discourage proofs with subgoals not using <code>.</code> for focusing, not sure I like that this tactic is producing such proofs</p>",
        "id": 358591506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684194690
    },
    {
        "content": "<p>The important part for me would that in combining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rel_congr</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">possibly_existing_proof_1</span>\n<span class=\"n\">rel_congr</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">possibly_existing_proof_2</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rel_congr</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">possibly_existing_proof_1</span><span class=\"bp\">;</span> <span class=\"n\">possibly_existing_proof_2</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">sorries</span> <span class=\"n\">here</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">more</span> <span class=\"n\">side</span> <span class=\"n\">goals</span> <span class=\"n\">are</span> <span class=\"n\">generated</span> <span class=\"n\">than</span> <span class=\"n\">before</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>it put the proofs for the main goals, <code>possibly_existing_proof_1</code> and <code>possibly_existing_proof_2</code>, in the right positions to deal with the new main goals.  I think, as you say, that how or whether it deals with the side goals is secondary.</p>",
        "id": 358591615,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684194758
    },
    {
        "content": "<p>well, this is made more awkward given that we decided to put the side goals in the same place as the main goals</p>",
        "id": 358591756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684194864
    },
    {
        "content": "<p>(FWIW, in <a href=\"https://github.com/leanprover-community/mathlib4/commit/9a5e0ce9f9b714fd5383610a12746cded21f030f\">my experiments with the tactic so far</a>, I'd guess the side goals are being auto-resolved 90% of the time.  But it is still very useful to have the tactic work sensibly when they're not.)</p>",
        "id": 358591851,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684194935
    },
    {
        "content": "<p>you also have the reverse problem: the <code>possibly_existing_proof_1</code> might actually be a side goal or start with a proof of one, which is gone or reordered in the new proof</p>",
        "id": 358591948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684195019
    },
    {
        "content": "<p>Yup!</p>",
        "id": 358591959,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684195027
    },
    {
        "content": "<p>I'm not sure what we can do for those, since there is no guarantee of a correspondence between the old and new side goals</p>",
        "id": 358592003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684195076
    },
    {
        "content": "<p>Can the code action be a tactic itself?</p>",
        "id": 358592056,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684195099
    },
    {
        "content": "<p>it isn't a tactic, but it can run elaborator functions and tactics on the original goal state, or make up a new goal state and run a tactic on that</p>",
        "id": 358592088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684195139
    },
    {
        "content": "<p>It's a plain <code>IO</code> action, but it has a bird's eye view of the original elaboration and can pick and choose states to work in</p>",
        "id": 358592139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684195187
    },
    {
        "content": "<p>Does it know which parts of the proof terms in the original 2-line proof were generated by <code>rel_congr</code> and which parts by <code>possibly_existing_proof_n</code>?</p>",
        "id": 358592411,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684195348
    },
    {
        "content": "<p>you have the goals before and after each tactic, and by looking at the instantiations of before mvars in the after state you can also determine what partial proof term was generated by that tactic</p>",
        "id": 358592545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684195449
    },
    {
        "content": "<p>why would you care about proof terms here though?</p>",
        "id": 358592583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684195473
    },
    {
        "content": "<p>I figured you could reverse-engineer what main goals were generated purely by looking at the <code>rel_congr</code> lemmas used (and what is stored for them in the <code>rel_congr</code> attribute).</p>",
        "id": 358592775,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684195590
    },
    {
        "content": "<p>the easiest way to keep track of the main goals would be to have rel_congr push a \"the first 5 goals are side goals\" log to the info tree</p>",
        "id": 358592857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684195660
    },
    {
        "content": "<p>I don't know what an infotree is, I guess it's one of the pieces of information about the original elaboration which you were saying was available to the code action?</p>",
        "id": 358592992,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684195740
    },
    {
        "content": "<p>the info tree stores basically everything about lean's elaboration: the tactic states, the syntax and the terms they elaborate to, how many goals and the metavariable context to interpret them in, etc. All of the information I have been talking about is pulled out of the info tree</p>",
        "id": 358593172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684195836
    },
    {
        "content": "<p>and you can also put whatever custom information you want in there and pull it back out in code actions or what have you</p>",
        "id": 358593236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684195873
    },
    {
        "content": "<p>When <code>rel_congr</code> applies a congruence lemma, say for a pattern <code>f x1 y z1 &lt; f x2 y z2</code>, it knows which hypothesis (or -es?) of the congruence lemma are associated to which of the pairs <code>(x1, x2)</code> and <code>(z1, z2)</code>.  So it should be able to store not just the pattern-tree of the match which <code>rel_congr</code> identifies between the LHS and the RHS, but also the \"trace through the pattern-tree\" which is the history of any main goal that results.</p>",
        "id": 358594332,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684196413
    },
    {
        "content": "<p>(By \"store\" I mean \"store in the infotree\", if I'm understanding its capabilities correctly.)</p>",
        "id": 358594445,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684196466
    },
    {
        "content": "<p>yes to the storage question, although I'm not sure I quite understand the data structure you are proposing</p>",
        "id": 358594710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684196584
    },
    {
        "content": "<p>If there is a template provided, you can pretty directly say which syntax corresponds to which main goal, but when there is no template you need to describe that same structure without the syntax</p>",
        "id": 358594972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684196704
    },
    {
        "content": "<p>To make a concrete claim: It seems to me that when <code>rel_congr</code> does this, even without a template:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rel_congr</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>you can keep track, from <code>rel_congr</code>'s operation, of what the pattern <code>_ * ?m1 + ?m2</code> must be, and also of the fact that the first goal is a relation between the two inputs in <code>?m1</code> and the second goal is a relation between the two inputs in <code>?m2</code>.</p>",
        "id": 358595281,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684196843
    },
    {
        "content": "<p>sure, it could generate a template expression (with deliberately unassigned <code>?m1</code> mvars), and then make a list of <code>(?m1, ?g1)</code> pairs for each main subgoal <code>?g1</code> produced</p>",
        "id": 358595783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684197034
    },
    {
        "content": "<p>So then the task is to take two <code>rel_congr</code> runs, like in my other example <code>x^2 + 4 * ?m1</code> and <code>?m2 ^ 2 + _</code>, which are both partial trips down the parse tree of the middle expression in the <code>A &lt; B &lt; C</code> they are proving, formally combine the trees to <code>?m2 ^ 2 + 4 * ?m1</code> with a <code>p1</code>/<code>p2</code> possibly recorded as a proof for <code>?m1</code>/<code>?m2</code>, run <code>rel_congr</code> again now on <code>A &lt; C</code>with the pattern <code>?m2 ^ 2 + 4 * ?m1</code>, and optimistically fill in <code>pi</code>for any main goals associated to <code>?mi</code> in that last <code>rel_congr</code> run.</p>",
        "id": 358596721,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684197357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358586347\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">possibly_existing_proof_about_A_B</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It seems pretty unpleasant (at least, for long expressions) that we have to write <code>3 * _ + 5</code> twice here</p>",
        "id": 358668456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684228890
    },
    {
        "content": "<p>A possible idea might be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">calc_congr</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"k\">from</span><span class=\"bp\">%</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">possibly_existing_proof_about_A_B</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">to</span><span class=\"bp\">%</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"c1\">-- goal is add_comm</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n</code></pre></div>",
        "id": 358668956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684229022
    },
    {
        "content": "<p>Where the semantics are \"use rel_congr to focus such that the goal is between the <code>from</code> in the previous step and the <code>to</code> in the current one\"</p>",
        "id": 358669700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684229160
    },
    {
        "content": "<p>That could extend to multiple (named) goals with <code>from[name]%</code> etc</p>",
        "id": 358670459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684229290
    },
    {
        "content": "<p>Maybe you don't need <code>from</code>, and <code>to</code> alone is enough with heuristics</p>",
        "id": 358670778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684229372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358586347\">said</a>:</p>\n<blockquote>\n<p>So, for example, if <code>B</code> has the form <code>3 * (x + y) + 5</code>, clicking <code>x + y</code> as shown on the RHS of the goal at position (1) generates</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I assume this is a typo and the middle line should be <code>3 * (x + y) + 5</code>?</p>",
        "id": 358674679,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684230360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358668456\">said</a>:</p>\n<blockquote>\n<p>It seems pretty unpleasant (at least, for long expressions) that we have to write <code>3 * _ + 5</code> twice here</p>\n</blockquote>\n<p>You don't. The template argument of <code>rel_congr</code> is optional</p>",
        "id": 358677816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684231112
    },
    {
        "content": "<p>Presumably there are situations where the heuristic fails, like it does with <code>congr</code> on <code>f (a + b) = f (b + a)</code>. In those cases, it would be nice to have a way to be precise about the target without having to repeat yourself</p>",
        "id": 358686293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684233359
    },
    {
        "content": "<p>I mean, what we want is a bunch of coloured pencils, and you underline in one colour the corresponding changing pieces between lines n and n+1, and in another colour the corresponding pieces between lines n+1 and n+2, and so on.</p>",
        "id": 358686693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684233470
    },
    {
        "content": "<p>Or at least, that's what I do in complicated <code>calc</code> blocks.</p>",
        "id": 358686748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684233483
    },
    {
        "content": "<p>Semantic highlighting could in theory do that if we had the source code markers</p>",
        "id": 358699516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684236630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358668456\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Autogenerating.20parts.20of.20.60calc.60s/near/358586347\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">possibly_existing_proof_about_A_B</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It seems pretty unpleasant (at least, for long expressions) that we have to write <code>3 * _ + 5</code> twice here</p>\n</blockquote>\n<p>Would this work (maybe a naive question):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">possibly_existing_proof_about_A_B</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">possibly_existing_proof_about_B_C</span>\n</code></pre></div>\n<p>I.e., if <code>rel_congr</code> is given a pattern, and the LHS is known, as it is here, will lean see that the RHS must be of shape  <code>3 * _ + 5</code>?</p>",
        "id": 358713513,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684239911
    },
    {
        "content": "<p>I don't think so; the problem is that the <code>_</code> was a placeholder from Heather, the actual value is (say) <code>3 * foo x + 5</code>, while the <code>?_</code> is literally <code>?_</code> to be populated by the tactic</p>",
        "id": 358736382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684244577
    },
    {
        "content": "<p>I'm imagining that the code action would generate the _, but then the user would fill it in to <code>foo x</code></p>",
        "id": 358742359,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684245741
    },
    {
        "content": "<p>Perhaps generating a <code>sorry</code> would send a clearer message to the user that they have to fill it</p>",
        "id": 358755380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684248277
    },
    {
        "content": "<p>It doesn't seem to me that that would be a problem?  The user clicked on that term <em>because</em> she wanted to replace it.</p>",
        "id": 358756031,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684248415
    },
    {
        "content": "<p>Oh, maybe you mean the second _ rather than the first _ in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel_congr</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 358756797,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684248591
    },
    {
        "content": "<p>Sure, the second _ could be a sorry.</p>",
        "id": 358756941,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684248617
    },
    {
        "content": "<p>I meant the first <code>_</code>, but I guess I should have meant both (though I think Mario has argued that <code>done</code> is better for hole command-like things)</p>",
        "id": 358761326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684249346
    },
    {
        "content": "<blockquote>\n<p>The user clicked on that term because she wanted to replace it.</p>\n</blockquote>\n<p>Sure, but if the term contains <code>_</code>s already that they didn't click on (proof terms found by unification), then I think things are going to be confusing</p>",
        "id": 358761478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684249379
    },
    {
        "content": "<p>I think for a wide audience, having a <code>sorry</code> representing a mathematical expression (as opposed to a missing proof) is more confusing than that!</p>",
        "id": 358763388,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684249757
    },
    {
        "content": "<p>Maybe we could have a <code>hole</code> tactic that's synonym to <code>done</code> (and maybe make it emit a custom warning).</p>",
        "id": 358768106,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684250729
    },
    {
        "content": "<p>That doesn't help with the LHS unless we also have a <code>%hole</code> term to use as <code>3 * %hole + 5</code></p>",
        "id": 358772574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684251637
    },
    {
        "content": "<p>Maybe <code>?!_</code>?</p>",
        "id": 358772626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684251649
    },
    {
        "content": "<p>Or a <code>hole</code> proof term that's synonym of `sorry|</p>",
        "id": 358775171,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684252202
    },
    {
        "content": "<p>This really just doesn't seem like an issue to me.  And I think multi-character solutions are awkward to interact with (more times hitting the backspace key) and lots of punctuation is forbidding.  I'd suggest trying with <code>_</code> before getting more baroque ... but of course, before we can even bikeshed properly, someone needs to implement it!</p>",
        "id": 358775628,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684252300
    }
]