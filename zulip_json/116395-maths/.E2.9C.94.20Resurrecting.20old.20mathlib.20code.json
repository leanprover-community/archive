[
    {
        "content": "<p>I have a MWE of what would have worked ~8 months ago.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">formal_multilinear_series</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">formal_multilinear_series</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">radius_le_radius_of_nnnorm_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‚à•</span><span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"bp\">‚à•‚Çä</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚à•</span><span class=\"n\">q</span> <span class=\"n\">n</span><span class=\"bp\">‚à•‚Çä</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.radius</span> <span class=\"bp\">‚â§</span> <span class=\"n\">p.radius</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">radius_eq_liminf</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">liminf_le_liminf</span> <span class=\"n\">ennreal</span> <span class=\"n\">‚Ñï</span> <span class=\"n\">_</span> <span class=\"n\">at_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ennreal.inv_le_inv</span><span class=\"o\">,</span> <span class=\"n\">ennreal.coe_le_coe</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nnreal.rpow_le_rpow</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"bp\">‚ä§</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/rLb0pksft6kwTcoh6B2zgA6m/image.png\">image.png</a><br>\nmathlib was refactored in that duration, and I suspect I now need <code>open</code> or <code>open_locale</code> on something to get it to work again, but do not know the actual reason it no longer works.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rLb0pksft6kwTcoh6B2zgA6m/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rLb0pksft6kwTcoh6B2zgA6m/image.png\"></a></div>",
        "id": 363433394,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1685862337
    },
    {
        "content": "<p>You have the wrong symbol for the norm</p>",
        "id": 363436380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685863893
    },
    {
        "content": "<p>(though the one you have looks almost identical in your font!)</p>",
        "id": 363436481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685863927
    },
    {
        "content": "<p>You want the one that you type with <code>\\norm</code>, but currently have the one from <code>\\parallel</code>.</p>",
        "id": 363436628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685863999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Andrew Gerads</span> has marked this topic as resolved.</p>",
        "id": 363437391,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685864353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Andrew Gerads</span> has marked this topic as unresolved.</p>",
        "id": 363442765,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685866582
    },
    {
        "content": "<p>Another piece of code that used to work, but stopped working for reasons unknown:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">asymptotics</span> <span class=\"n\">real</span> <span class=\"n\">normed_space</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- The sums need to be stretched with additional zero coefficients general form</span>\n<span class=\"c1\">-- Help received from https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/tsum.20stretcher.2C.20adding.20zeroes.20to.20sums.20like.20this</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_mul_ite</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àë'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">‚à£</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"bp\">‚àë'</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set.range</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"bp\">‚Üë</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"o\">(</span><span class=\"n\">equiv.of_injective</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.mul_right_injective</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">tsum_eq</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)),</span> <span class=\"n\">tsum_subtype</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tsum_congr</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.indicator</span><span class=\"o\">,</span> <span class=\"n\">has_dvd.dvd</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 363442995,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1685866692
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 363446328,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1685868069
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/KaokS3Cd_X6XKcCghba5PiA0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KaokS3Cd_X6XKcCghba5PiA0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KaokS3Cd_X6XKcCghba5PiA0/image.png\"></a></div>",
        "id": 363451736,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1685870014
    },
    {
        "content": "<p>I would guess you just want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_right_injective\">docs#mul_right_injective</a></p>",
        "id": 363452945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685870475
    },
    {
        "content": "<p>You might find <a href=\"https://mathlib-changelog.org/\">https://mathlib-changelog.org/</a> useful</p>",
        "id": 363453681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685870722
    },
    {
        "content": "<p>That probably is what I want, but am having trouble because I did not write the code and thus have limited understanding of it.<br>\nReplacing <code>nat.mul_right_injective h</code> with <code>mul_right_injective n</code> seems to be progress but results in another error.<br>\n<a href=\"/user_uploads/3121/yOVi1fIMPvQ5X_DVIOkX2b7L/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yOVi1fIMPvQ5X_DVIOkX2b7L/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yOVi1fIMPvQ5X_DVIOkX2b7L/image.png\"></a></div>",
        "id": 363456020,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1685871489
    },
    {
        "content": "<p>Ah, I guess it's false for n=0</p>",
        "id": 363456445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685871601
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_right\">docs#mul_right</a>_injective‚ÇÄ is the one you want</p>",
        "id": 363456827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685871721
    },
    {
        "content": "<p>I fixed the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tsum_mul_ite</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àë'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">‚à£</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">‚àë'</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set.range</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"bp\">‚Üë</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"o\">(</span><span class=\"n\">equiv.of_injective</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_right_injective‚ÇÄ</span> <span class=\"n\">h‚ÇÄ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">tsum_eq</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a.val</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tsum_subtype</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tsum_congr</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.indicator</span><span class=\"o\">,</span> <span class=\"n\">has_dvd.dvd</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 363459423,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1685872550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Andrew Gerads</span> has marked this topic as resolved.</p>",
        "id": 363459431,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685872553
    },
    {
        "content": "<p>Do you know about <a href=\"http://mathlib-changelog.org\">mathlib-changelog.org</a> ? That would have helped answer your question.</p>",
        "id": 363467031,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1685874944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/.E2.9C.94.20Resurrecting.20old.20mathlib.20code/near/363453681\">said</a>:</p>\n<blockquote>\n<p>You might find <a href=\"https://mathlib-changelog.org/\">https://mathlib-changelog.org/</a> useful</p>\n</blockquote>\n<p>Presumably yes, since it was already mentioned in this thread!</p>",
        "id": 363476671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685878134
    },
    {
        "content": "<p>Phone screen is small <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 363494681,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1685883673
    }
]