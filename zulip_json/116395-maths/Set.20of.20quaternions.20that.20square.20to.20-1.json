[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Quaternion</span> <span class=\"n\">Classical</span>\n\n<span class=\"c1\">--declare a Set Of Quaternions That Square To Negative 1</span>\n<span class=\"kd\">def</span> <span class=\"n\">soqtstn1₀</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">q₀</span> <span class=\"o\">:</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">q₀</span> <span class=\"bp\">*</span> <span class=\"n\">q₀</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">soqtstn1₁</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">q₀</span> <span class=\"o\">:</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">rx</span> <span class=\"n\">ry</span> <span class=\"n\">rz</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">q₀</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rx</span><span class=\"o\">,</span> <span class=\"n\">ry</span><span class=\"o\">,</span> <span class=\"n\">rz</span><span class=\"o\">⟩</span> <span class=\"bp\">∧</span> <span class=\"n\">rx</span><span class=\"bp\">*</span><span class=\"n\">rx</span> <span class=\"bp\">+</span> <span class=\"n\">ry</span><span class=\"bp\">*</span><span class=\"n\">ry</span> <span class=\"bp\">+</span> <span class=\"n\">rz</span><span class=\"bp\">*</span><span class=\"n\">rz</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equalSets</span> <span class=\"o\">:</span> <span class=\"n\">soqtstn1₀</span> <span class=\"bp\">=</span> <span class=\"n\">soqtstn1₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Set.ext</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n  <span class=\"n\">intros</span> <span class=\"n\">q₀</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">soqtstn1₀</span><span class=\"o\">,</span> <span class=\"n\">soqtstn1₁</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>A guide to the proof is here: <a href=\"https://www.quora.com/What-is-the-square-root-of-1-in-a-quaternionic-number-system\">https://www.quora.com/What-is-the-square-root-of-1-in-a-quaternionic-number-system</a><br>\nI am having trouble (I don't even know how to split the goal from 'a&lt;-&gt;b' into the 2 goals 'a-&gt;b' and 'b-&gt;a' ), so I want to know that.</p>",
        "id": 401255222,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1699573900
    },
    {
        "content": "<p><code>constructor</code> will split it</p>",
        "id": 401256756,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699574668
    },
    {
        "content": "<p>This seems like a good start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equalSets</span> <span class=\"o\">:</span> <span class=\"n\">soqtstn1₀</span> <span class=\"bp\">=</span> <span class=\"n\">soqtstn1₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">⟩</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">soqtstn1₀</span><span class=\"o\">,</span> <span class=\"n\">soqtstn1₁</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Quaternion.ext_iff</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401258033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699575418
    },
    {
        "content": "<p>I made some progress.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equalSets</span> <span class=\"o\">:</span> <span class=\"n\">soqtstn1₀</span> <span class=\"bp\">=</span> <span class=\"n\">soqtstn1₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">⟩</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">soqtstn1₀</span><span class=\"o\">,</span> <span class=\"n\">soqtstn1₁</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Quaternion.ext_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ha</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span>\n  <span class=\"n\">use</span> <span class=\"n\">z</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hSphere3</span><span class=\"o\">,</span><span class=\"n\">h0x</span><span class=\"o\">,</span><span class=\"n\">h0y</span><span class=\"o\">,</span><span class=\"n\">h0z</span><span class=\"o\">⟩</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h₀</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h₀</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rx</span><span class=\"o\">,</span><span class=\"n\">ry</span><span class=\"o\">,</span><span class=\"n\">rz</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hx₀</span><span class=\"o\">,</span><span class=\"n\">hSphere</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx₀</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hr</span><span class=\"o\">,</span><span class=\"n\">hrx</span><span class=\"o\">,</span><span class=\"n\">hry</span><span class=\"o\">,</span><span class=\"n\">hrz</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">zero_pow'</span><span class=\"o\">,</span> <span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hrx</span><span class=\"o\">,</span><span class=\"n\">hry</span><span class=\"o\">,</span><span class=\"n\">hrz</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">hSphere2</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">xk</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">xk</span><span class=\"o\">)</span> <span class=\"n\">hSphere</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_add_rev</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hSphere2</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hSphere2</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/PyGjRtlYVasuxtY4BKv18pvo/image.png\">image.png</a><br>\nIs there any way to use the ring tactic on a hypothesis instead of a goal? I want to simplify h0x, h0y, and h0z.<br>\nI plan to show r=0 through proof by contradiction after that.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PyGjRtlYVasuxtY4BKv18pvo/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PyGjRtlYVasuxtY4BKv18pvo/image.png\"></a></div>",
        "id": 402796568,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1700263717
    },
    {
        "content": "<p>Does <code>ring_nf at h</code> work?</p>",
        "id": 402801443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700266439
    },
    {
        "content": "<p>It does. Thanks.</p>",
        "id": 402805783,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1700268272
    },
    {
        "content": "<ul>\n<li><code>ring_nf</code> means: rewrite ring expressions into a normal form.</li>\n<li><code>ring</code> means: close the goal, by using <code>ring_nf</code></li>\n</ul>\n<p>With this in mind, you can see why <code>ring at h</code> is not supported.</p>",
        "id": 402806861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700268705
    },
    {
        "content": "<p>Okay, I proved the first lemma, and part of the second lemma. Here is a MWE of the second lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Quaternion</span> <span class=\"n\">Classical</span>\n\n<span class=\"c1\">--declare a Set Of Quaternions That Square To Negative 1</span>\n<span class=\"kd\">def</span> <span class=\"n\">soqtstn1₁</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">q₁</span> <span class=\"o\">:</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">rx</span> <span class=\"n\">ry</span> <span class=\"n\">rz</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">q₁</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rx</span><span class=\"o\">,</span> <span class=\"n\">ry</span><span class=\"o\">,</span> <span class=\"n\">rz</span><span class=\"o\">⟩</span> <span class=\"bp\">∧</span> <span class=\"n\">rx</span><span class=\"bp\">*</span><span class=\"n\">rx</span> <span class=\"bp\">+</span> <span class=\"n\">ry</span><span class=\"bp\">*</span><span class=\"n\">ry</span> <span class=\"bp\">+</span> <span class=\"n\">rz</span><span class=\"bp\">*</span><span class=\"n\">rz</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)}</span>\n<span class=\"kd\">def</span> <span class=\"n\">soqtstn1₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"bp\">‖</span><span class=\"n\">q₂</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">q₂.re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equalSetsSoqtstn1₁AndSoqtstn1₂</span> <span class=\"o\">:</span> <span class=\"n\">soqtstn1₁</span> <span class=\"bp\">=</span> <span class=\"n\">soqtstn1₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">⟩</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">soqtstn1₁</span><span class=\"o\">,</span> <span class=\"n\">soqtstn1₂</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Quaternion.ext_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rx</span><span class=\"o\">,</span><span class=\"n\">ry</span><span class=\"o\">,</span><span class=\"n\">rz</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"n\">hSphere</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hr0</span><span class=\"o\">,</span> <span class=\"n\">hxrx</span><span class=\"o\">,</span> <span class=\"n\">hyry</span><span class=\"o\">,</span> <span class=\"n\">hzrz</span><span class=\"o\">⟩</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hr0</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h₀</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h₀</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hNorm1</span><span class=\"o\">,</span> <span class=\"n\">hr0</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span>\n  <span class=\"n\">use</span> <span class=\"n\">z</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hr0</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/LLM8RU0EKbPYc8V2BEjDhNss/image.png\">image.png</a><br>\nI ran into a problem: I don't know how to simplify the norm of a quaternion. Can I or someone just define the norm if no one else has done it yet?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LLM8RU0EKbPYc8V2BEjDhNss/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/LLM8RU0EKbPYc8V2BEjDhNss/image.png\"></a></div>",
        "id": 402943710,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1700360844
    },
    {
        "content": "<p>It looks like maybe I need to square it to simplify it? I saw Quaternion.normSq exists.</p>",
        "id": 402944580,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1700361414
    },
    {
        "content": "<p>I don't know. I'll try again later after I get a chance for advice.</p>",
        "id": 402944988,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1700361606
    },
    {
        "content": "<p>The norm has already been defined, else you would never end up with it in your goal in the first place</p>",
        "id": 402994340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700388811
    },
    {
        "content": "<p>I would guess you want the lemma saying <code>norm x = sqrt (inner x x)</code></p>",
        "id": 402994414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700388850
    },
    {
        "content": "<p>I made some progress and defeated a sorry.<br>\nThe <a href=\"http://Moogle.ai\">Moogle.ai</a> math search engine was quite helpful.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equalSetsSoqtstn1₁AndSoqtstn1₂</span> <span class=\"o\">:</span> <span class=\"n\">soqtstn1₁</span> <span class=\"bp\">=</span> <span class=\"n\">soqtstn1₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">⟩</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">soqtstn1₁</span><span class=\"o\">,</span> <span class=\"n\">soqtstn1₂</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Quaternion.ext_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rx</span><span class=\"o\">,</span><span class=\"n\">ry</span><span class=\"o\">,</span><span class=\"n\">rz</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"n\">hSphere</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hr0</span><span class=\"o\">,</span> <span class=\"n\">hxrx</span><span class=\"o\">,</span> <span class=\"n\">hyry</span><span class=\"o\">,</span> <span class=\"n\">hzrz</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hr0</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_true</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h₀</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h₀</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hNorm1</span><span class=\"o\">,</span> <span class=\"n\">hr0</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span>\n  <span class=\"n\">use</span> <span class=\"n\">z</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hr0</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">hNormSquare1</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">=&gt;</span><span class=\"n\">r₀</span><span class=\"bp\">*</span><span class=\"n\">r₀</span><span class=\"o\">)</span> <span class=\"n\">hNorm1</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hNormSquare1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Quaternion.normSq_eq_norm_mul_self</span><span class=\"o\">,</span> <span class=\"n\">hr0</span><span class=\"o\">,</span> <span class=\"n\">Quaternion.normSq_def'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hNormSquare1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hNormSquare1</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">OfNat.ofNat_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">zero_pow'</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">ring_nf</span>\n</code></pre></div>\n<p>The state of the remaining sorry is <br>\n<a href=\"/user_uploads/3121/V_BrJnV2TgM0wW4IWlOD9E4q/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/V_BrJnV2TgM0wW4IWlOD9E4q/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/V_BrJnV2TgM0wW4IWlOD9E4q/image.png\"></a></div>",
        "id": 403039438,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1700418270
    },
    {
        "content": "<p>The obvious next step is to eliminate the last three equalities, with <code>rw</code> or <code>cases</code> or <code>subst</code></p>",
        "id": 403043603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700420742
    },
    {
        "content": "<p>I'm done. The complete code is at <a href=\"https://github.com/Nazgand/NazgandLean4/blob/master/NazgandLean4/quaternionLemma.lean\">https://github.com/Nazgand/NazgandLean4/blob/master/NazgandLean4/quaternionLemma.lean</a></p>",
        "id": 403045149,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1700421734
    },
    {
        "content": "<p>I strongly recommend you use <code>· </code> to mark where each subgoal begins</p>",
        "id": 403045486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700421960
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">constructor</span>\n<span class=\"bp\">·</span> <span class=\"n\">all</span> <span class=\"n\">of</span> <span class=\"n\">the</span>\n  <span class=\"n\">forward</span> <span class=\"n\">direction</span>\n<span class=\"bp\">·</span> <span class=\"n\">and</span> <span class=\"n\">now</span> <span class=\"n\">the</span>\n  <span class=\"n\">reverse</span> <span class=\"n\">direction</span>\n</code></pre></div>",
        "id": 403045624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700422037
    },
    {
        "content": "<p>Done. I was wondering about that, since there was something similar in Lean3.</p>",
        "id": 403046693,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1700422731
    }
]