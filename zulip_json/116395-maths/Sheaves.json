[
    {
        "content": "<p>Kenny and I have been playing about with the schemes repo; I've been trying to glue sheaves together on subspaces. I realise when doing this work that there are big design decisions that need to be made. A sheaf in maths is just some assignment of a type to each open subset of a topological space, modulo a bit of extra structure and some axioms. I'd been working with <code>opens X</code> but now I'm working with sheaves on open subsets of X I am forever wrestling with <code>opens U</code> with <code>U : opens X</code> and having to dig through subtypes of subtypes etc. Sure I could write a bunch of API for <code>opens U</code>. On the other hand I could just try and avoid subtypes completely -- this was <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> 's suggestion -- and even go so far as to define a sheaf on an open subspace of a topological space just to be pair (U,F) where U is open, F is a sheaf on all of X, and the values of F are irrelevant if we evaluate on a set that isn't an open subset of U. This seems to be leading to some sort of \"how to do this sort of thing optimally in dependent type theory\" conversation and it reminds me a lot of <span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> using subgroups instead of groups in Coq (the rooster and the butterfly) and so on. Doing it like this, the restriction of F to an open subspace is very very easy indeed.</p>\n<p>On the other hand, my plan has always been to use <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's category theory work to do sheaves, as this is the language which is used in practice by mathematicians. However in some sense I now feel that this would drift even further from the \"very easy\" approach and force me to write even more API. I do not object to writing more API. But I'm just confused about the best approach to take. Scott's approach seems to be far closer to what a mathematician would do, and Kenny's to what a computer scientist would do. I don't know which one I want to be though, in this context. I somehow get the feeling that it matters though.</p>",
        "id": 167766087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560178534
    },
    {
        "content": "<p>I'm proud of my construction :P</p>",
        "id": 167766197,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560178594
    },
    {
        "content": "<p>It makes no mathematical sense :P</p>",
        "id": 167766554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560178859
    },
    {
        "content": "<p>It feels a bit like this weird idea of defining a subset to be compact instead of defining what it means for a top space to be compact.</p>",
        "id": 167766608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560178918
    },
    {
        "content": "<p>I don't know how feasible this is in this case but maybe you can pick an application which needs gluing of sheaves--fiber products maybe--and imagine (if not actually carry out) the construction using the interface you intend to provide</p>",
        "id": 167766928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560179142
    },
    {
        "content": "<p>Well I guess gluing schemes is a bit more work than gluing sheaves</p>",
        "id": 167767030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1560179207
    },
    {
        "content": "<blockquote>\n<p>It makes no mathematical sense :P</p>\n</blockquote>\n<p>Couldn't you identify a sheaf on U with either its extension by zero or push-forward to X? They both make a lot of mathematical sense , and they are fully faithful functors so that you don't lose any information.</p>",
        "id": 167770880,
        "sender_full_name": "Simon Pepin Lehalleur",
        "timestamp": 1560182022
    },
    {
        "content": "<p>Indeed! But in this game people might equally want to just say \"what is going on outside U is junk\". The extension by zero would be hard to work with in Lean -- the definition would then be \"if V is a subset of U then the correct thing, else 0\", and you would forever be splitting ifs. The pushforward is easier because its value on V is the correct value on V intersect U, so you are just having to invoke the fact that the intersection of two opens is open occasionally, which sounds nicer. What I am frustrated about is that both of them seem to be slightly artificial workarounds for the thing I want to have, which is the sheaf on U and nothing more. My question is whether I should bite the bullet and work with the thing that seems right to me or make these artificial extensions. Even with the extensions one has to choose whether to prove that the sheaf axiom holds for the extension or just check it on U.</p>\n<p>Hmm. Here's another issue. What I want to be easy is this: given X a top space, and F a sheaf on U (an open subset of X) and V an open subset of U, I want the restriction of F to V. With my suggestion (\"junk outside U\") I can literally use F again, With either the pushforward (they call it <code>map</code> here) or extension by zero one would have to change F. What I have no real feeling about is whether the convenience of being able to recycle F is worth anything, or whether I should just bite the bullet, write some code which does what I want \"properly\" (i.e. a sheaf on U is just a function on the open subsets of U and hang the other open subsets of X) and then just figure out the API I need. I might need a lot of API. But this is not a mathematical issue, it is a tedious implementation issue.</p>",
        "id": 167771662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560182523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224267\">@Simon Pepin Lehalleur</span> Welcome on the chat!</p>",
        "id": 167773695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560184143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks! I saw the mathoverflow question and I got curious...</p>",
        "id": 167774114,
        "sender_full_name": "Simon Pepin Lehalleur",
        "timestamp": 1560184516
    },
    {
        "content": "<p>I don't believe \"extension by zero\" makes sense mathematically.</p>",
        "id": 167777925,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560187543
    },
    {
        "content": "<p>I've just spent another 20 minutes struggling to even write down the definition of glueing sheaves. The mathematical argument is: you have a topological space <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> covered by opens <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, and for each <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">i</span></span></span></span> you have a sheaf <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"script\">F</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>. Say you have isomorphisms <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ϕ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>:</mo><msub><mi mathvariant=\"script\">F</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mo>(</mo><msub><mi>U</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>U</mi><mi>j</mi></msub><mo>)</mo><mo>→</mo><msub><mi mathvariant=\"script\">F</mi><mi>j</mi></msub><mi mathvariant=\"normal\">∣</mi><mo>(</mo><msub><mi>U</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>U</mi><mi>j</mi></msub><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi_{ij}:\\mathcal{F}_i|(U_i\\cap U_j)\\to\\mathcal{F}_j|(U_i\\cap U_j)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mrel\">:</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathrm\">∣</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">∩</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mord mathrm\">∣</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">∩</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> of sheaves satisfying the cocycle condition <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ϕ</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><mo>=</mo><msub><mi>ϕ</mi><mrow><mi>j</mi><mi>k</mi></mrow></msub><mo>∘</mo><msub><mi>ϕ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\phi_{ik}=\\phi_{jk}\\circ\\phi_{ij}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mbin\">∘</span><span class=\"mord\"><span class=\"mord mathit\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span> as maps of sheaves on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>U</mi><mi>j</mi></msub><mo>∩</mo><msub><mi>U</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i\\cap U_j\\cap U_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">∩</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mbin\">∩</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, and such that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ϕ</mi><mrow><mi>i</mi><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\phi_{ii}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mord mathit mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is the identity. Then we want a sheaf on all of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.</p>\n<p>Even writing down the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"script\">F</mi></mrow><mo>(</mo><mi>U</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}(U)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> is a pain. It involves taking the elements <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><msub><mi>t</mi><mi>i</mi></msub><mo>)</mo><mo>∈</mo><msub><mo>∏</mo><mi>i</mi></msub><mrow><msub><mi mathvariant=\"script\">F</mi><mi>i</mi></msub></mrow><mo>(</mo><mi>U</mi><mo>∩</mo><msub><mi>U</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(t_i)\\in\\prod_i\\mathcal{F_i}(U\\cap U_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">∈</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.09931em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mbin\">∩</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> which agree on overlaps; however the way <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> has set up sheaves is with categories in mind, so we have <code>U: opens X</code> and so to make the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.61508em;\"></span><span class=\"strut bottom\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> we need <code>U ∩ U_i : opens U_i</code> and then to say \"agree on overlaps\" it becomes a bit of a nightmare.</p>",
        "id": 167778039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560187633
    },
    {
        "content": "<blockquote>\n<p>I don't believe \"extension by zero\" makes sense mathematically.</p>\n</blockquote>\n<p>Sure it does; it's a sheaf, not vector bundle. Its fibre is 0 outside <code>U</code>.</p>",
        "id": 167778073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560187671
    },
    {
        "content": "<p>what does \"agree on overlaps\" even mean in the Hartshorn exercise?</p>",
        "id": 167778133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560187695
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I don't believe \"extension by zero\" makes sense mathematically.</p>\n</blockquote>\n<p>Sure it does; it's a sheaf, not vector bundle. Its fibre is 0 outside <code>U</code>.</p>\n</blockquote>\n<p>then isn't it just the same as the pushforward</p>",
        "id": 167778144,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560187702
    },
    {
        "content": "<p>No -- the pushforward you're allowed poles outside U.</p>",
        "id": 167778175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560187725
    },
    {
        "content": "<p>Agree on overlaps: mathematically it's easy to say. I want <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ϕ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\phi_{ij}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span> to send (the restriction of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.61508em;\"></span><span class=\"strut bottom\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi><mo>∩</mo><msub><mi>U</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>U</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">U\\cap U_i\\cap U_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mbin\">∩</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">∩</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span>) to (the restriction of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>t</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.61508em;\"></span><span class=\"strut bottom\" style=\"height:0.9011879999999999em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi><mo>∩</mo><msub><mi>U</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>U</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">U\\cap U_i\\cap U_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mbin\">∩</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">∩</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span>)</p>",
        "id": 167778360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560187840
    },
    {
        "content": "<p>but isn't it also a philosophy in maths that we don't talk about equality / subset relations between two unrelated sets / groups / rings?</p>",
        "id": 167778418,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560187891
    },
    {
        "content": "<p>I'm using <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ϕ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\phi_{ij}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span> -- that's the glue.</p>",
        "id": 167778440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560187914
    },
    {
        "content": "<p>oh right we're gluing along an isomorphism</p>",
        "id": 167778511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560187954
    },
    {
        "content": "<p>the problem with formalising all this in Lean is that I have all these terms of type <code>open A</code> and I want them to be of type <code>open B</code> so I seem to be forever writing explicit results going from one random open set in some space to another random open set in another space.</p>",
        "id": 167778526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560187972
    },
    {
        "content": "<p>On the tube home I tried implementing your solution Kenny, but this seems to involve rewriting all definitions of sheaves and presheaves.</p>",
        "id": 167778559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560187997
    },
    {
        "content": "<p>Because now I want to talk about a top space X, and an open subset U, and a sheaf-on-U, which takes as input an open subset of X and a proof that it's a subset of U, and spits out a ring, and now the sheaf axiom etc all need to be redone in this context.</p>",
        "id": 167778645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560188048
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/P49Gh-JrLfgrKr0Ov-ZTms65/2019-06-10-2.png\" target=\"_blank\" title=\"2019-06-10-2.png\">gluing-vs-glueing</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/P49Gh-JrLfgrKr0Ov-ZTms65/2019-06-10-2.png\" target=\"_blank\" title=\"gluing-vs-glueing\"><img src=\"/user_uploads/3121/P49Gh-JrLfgrKr0Ov-ZTms65/2019-06-10-2.png\"></a></div>",
        "id": 167778662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560188073
    },
    {
        "content": "<p>Also maybe it's time to care about spelling</p>",
        "id": 167778670,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560188079
    },
    {
        "content": "<p>As I said before, it feels very much like Assia's approach to proving Zassenhaus by having every group living in a bigger group</p>",
        "id": 167778673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560188085
    },
    {
        "content": "<p>ok I'll try formulating the statement</p>",
        "id": 167778685,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560188101
    },
    {
        "content": "<p>In which context?</p>",
        "id": 167778712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560188120
    },
    {
        "content": "<p>It seems to me that there is a big design decision to be made here.</p>",
        "id": 167778720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560188130
    },
    {
        "content": "<p>Sheaves-on-an-open-subset, or go full category, or this type-theory-friendly approach which involves defining \"sheaf on U\" as \"sheaf on X except not quite\"</p>",
        "id": 167778802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560188175
    },
    {
        "content": "<p>well I still stand by my approach :P</p>",
        "id": 167778861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560188226
    },
    {
        "content": "<p>I suspect you want to do the type-theory-friendly approach, but in some sense this brings into question Ramon's very definition of a sheaf.</p>",
        "id": 167778868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560188229
    },
    {
        "content": "<p>Does one then have two definitions of a sheaf? Sheaf-on-a-subset and then you define sheaf to be sheaf-on-a-subset-but-the-subset-is-X? And then you have to supply lots of proofs of X \\subseteq X  everywhere?</p>",
        "id": 167778991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560188298
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">sheaf_on_open_subset</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span>\n</pre></div>",
        "id": 167779012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560188325
    },
    {
        "content": "<p>You'll get laughed at in the maths department</p>",
        "id": 167779612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560188791
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">sheaves</span><span class=\"bp\">.</span><span class=\"n\">sheaf</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sheaf_on_opens</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">sheaf_on_opens</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf_on_opens</span> <span class=\"n\">X</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">sheaf</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">V</span>\n\n<span class=\"n\">def</span> <span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf_on_opens</span> <span class=\"n\">X</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWU</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWV</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">W</span> <span class=\"n\">HWU</span> <span class=\"o\">:=</span>\n<span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">HWV</span>\n\n<span class=\"n\">def</span> <span class=\"n\">res_subset</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf_on_opens</span> <span class=\"n\">X</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf_on_opens</span> <span class=\"n\">X</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">F</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">morphism</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf_on_opens</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">sheaf_on_opens</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">V</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">V</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HV</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWV</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">map</span> <span class=\"n\">W</span> <span class=\"n\">HW</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"n\">HV</span> <span class=\"n\">W</span> <span class=\"n\">HW</span> <span class=\"n\">HWV</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"n\">HV</span> <span class=\"n\">W</span> <span class=\"n\">HW</span> <span class=\"n\">HWV</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">V</span> <span class=\"n\">HV</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">sheaf_on_opens</span>\n</pre></div>",
        "id": 167780167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560189175
    },
    {
        "content": "<blockquote>\n<p>You'll get laughed at in the maths department</p>\n</blockquote>\n<p>so maybe I should LaTeX the whole thing instead</p>",
        "id": 167780190,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560189195
    },
    {
        "content": "<p>rofl. Hey, I would recommend not using two universes. Why not just use one?</p>",
        "id": 167780216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560189227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Can you prove that <code>f _*</code> and <code>f ^*</code> are adjoint (with or without using <code>category_theory/</code>)?</p>",
        "id": 167823735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560235376
    },
    {
        "content": "<p>We don't even have f^* apart from for open maps.</p>",
        "id": 167823754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560235405
    },
    {
        "content": "<p>Sure... but a sheaves API without this adjunction is quite incomplete.</p>",
        "id": 167823775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560235442
    },
    {
        "content": "<p>(maybe even only for open immersions)</p>",
        "id": 167823804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560235444
    },
    {
        "content": "<p>Any decent approach to sheaves should at least give us sheafification and this adjunction.</p>",
        "id": 167823833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560235474
    },
    {
        "content": "<p>And if we did it for sheaves of types you'd say it was incomplete because we didn't have it for sheaves of groups, rings, modules...</p>",
        "id": 167823843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560235492
    },
    {
        "content": "<p>There's still loads to do.</p>",
        "id": 167823855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560235505
    },
    {
        "content": "<p>In the end, I don't care how we get there. (Implementation details, like you say.)</p>",
        "id": 167823859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560235508
    },
    {
        "content": "<blockquote>\n<p>And if we did it for sheaves of types you'd say it was incomplete because we didn't have it for sheaves of groups, rings, modules...</p>\n</blockquote>\n<p>No, not really. I can kind of see how we would bolt that on afterwards.</p>",
        "id": 167823879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560235539
    },
    {
        "content": "<p>I'm trying to make sense of what we have for sheaves. It's time I understood what has been done. There are (at least) four branches on mathlib:</p>\n<p>Branch <code>sheaf-2</code> of mathlib has sieves, grothendieck topologies and sheaves on a site. </p>\n<p>Branch <code>sheaf-old</code> does not have a name which fills you with confidence.</p>\n<p>Branch <code>sheaf</code> is 6000 lines of code. </p>\n<p>Branch <code>sheaves</code> is some code <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> wrote over the summer.</p>\n<p>Do we have the assertion that pullback and pushforward of sheaves of abelian groups are adjoint functors on the category of open sets of a topological space?</p>\n<p>Do we have the assertion that pullback and pushforward of sheaves of abelian groups are adjoint functors in the category of sheaves on a site?</p>\n<p>Do we have any more general assertions about pullback and pushforward of sheaves of algebraic objects or other objects?</p>",
        "id": 183449000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576342610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> you said you had trouble with this stuff. What is in mathlib? I can't even find the category of open sets of a topological space.</p>",
        "id": 183449709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576343771
    },
    {
        "content": "<p>That's in <code>topology.category.Top.opens</code></p>",
        "id": 183449898,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576344168
    },
    {
        "content": "<p>Besides that, only the definition of a presheaf (on a topological space, I think) is in mathlib.</p>",
        "id": 183449969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576344314
    },
    {
        "content": "<p>I don't think we have anything about pullbacks anywhere</p>",
        "id": 183449974,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576344327
    },
    {
        "content": "<p>Are there any PR's about sheaves?</p>",
        "id": 183451006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576346074
    },
    {
        "content": "<p>Nope, don't think so</p>",
        "id": 183451033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576346149
    },
    {
        "content": "<p>Old gist of <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Presheaf (of types).</span>\n<span class=\"cm\">  https://stacks.math.columbia.edu/tag/006D</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounds</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">-- Definition of a presheaf.</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">F</span>     <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">res</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hid</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcomp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWV</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">≤</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span> <span class=\"err\">∘</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">presheaf</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- Simplification lemmas for Hid and Hcomp.</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">Hcomp&#39;</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWV</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">≤</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">Hcomp</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">Hid&#39;</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">Hid</span> <span class=\"n\">U</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">total</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">total</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">H</span>\n\n<span class=\"n\">def</span> <span class=\"n\">res&#39;</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">inf_le_left</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">res&#39;_def</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">inf_le_left</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">res&#39;_val</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">∀</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">inf_of_le_right</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">res&#39;_eq_inf</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">res&#39;_def</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">res&#39;_val</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">inf_le_left</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">res&#39;_eq_left</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">W</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">res&#39;_eq_inf</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">res&#39;_eq_inf</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">res&#39;_id</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">U</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">res&#39;_val</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">Hid</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">res&#39;_comp</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">V</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">⊓</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">total</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">W</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">res&#39;_def</span><span class=\"o\">,</span> <span class=\"n\">res&#39;_def</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">Hcomp&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">res&#39;_val</span><span class=\"o\">,</span> <span class=\"n\">res&#39;_eq_left</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inf_left_comm</span><span class=\"o\">,</span> <span class=\"n\">inf_comm</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Morphism of presheaves.</span>\n\n<span class=\"c1\">-- Kenny wants morphisms on the subsheaves</span>\n<span class=\"kn\">structure</span> <span class=\"n\">morphism</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span>      <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">))</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">⟶</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">morphism</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">morphism</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gh</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"err\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">gh</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">U</span> <span class=\"err\">∘</span> <span class=\"n\">fg</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">,</span> <span class=\"n\">gh</span><span class=\"bp\">.</span><span class=\"n\">commutes</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">],</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">fg</span><span class=\"bp\">.</span><span class=\"n\">commutes</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">]</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">⊚</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mor</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"err\">⟶</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mor_inv_id</span> <span class=\"o\">:</span> <span class=\"n\">mor</span> <span class=\"err\">⊚</span> <span class=\"n\">inv</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_mor_id</span> <span class=\"o\">:</span> <span class=\"n\">inv</span> <span class=\"err\">⊚</span> <span class=\"n\">mor</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">≅</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">iso</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">morphism</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">sheaf_condition</span>\n\n<span class=\"c1\">-- Sheaf condition.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">locality</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">U</span> <span class=\"n\">S</span><span class=\"o\">}},</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">}},</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">V</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">V</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">gluing</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}}</span> <span class=\"o\">{{</span><span class=\"n\">S</span><span class=\"o\">}},</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">res&#39;</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">⊓</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res&#39;</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">⊓</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">V</span><span class=\"o\">:</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">V</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">V</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_sheaf</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">locality</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"n\">gluing</span> <span class=\"n\">F</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">sheaf_condition</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">presheaf</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">semilattice_inf_hom</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_inf&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">to_fun</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">semilattice_inf_hom</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">semilattice_inf_hom</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">map_inf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">map_inf&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">monotone_id</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">monotone</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">mono</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">semilattice_inf_hom</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">semilattice_inf_lub_emb</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_lub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">}},</span> <span class=\"n\">is_lub</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">semilattice_inf_lub_emb</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">↪⊓⨆</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">semilattice_inf_lub_emb</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">↪⊓⨆</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">to_semilattice_inf_hom</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">map_inf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪⊓⨆</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_inf&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪⊓⨆</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">semilattice_inf_hom</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective_id</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf_hom</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">↪⊓⨆</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪⊓⨆</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪⊓⨆</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective_comp</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inj</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">map_lub</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_lub</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_image</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">semilattice_inf_lub_emb</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">presheaf</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">Hid</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">Hid</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">Hcomp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">bc</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">Hcomp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">comap_res</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">comap_coe_inj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">coe_total_coe</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">total</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">comap_res&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">total</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">↑</span><span class=\"o\">((</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">total</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">W</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">res&#39;_def</span><span class=\"o\">,</span> <span class=\"n\">coe_total_coe</span><span class=\"o\">,</span> <span class=\"n\">coe_total_coe</span><span class=\"o\">,</span> <span class=\"n\">comap_res</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">res&#39;_val</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_inf</span><span class=\"o\">,</span>\n       <span class=\"err\">←</span> <span class=\"n\">res&#39;_eq_inf</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">presheaf</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">sheaf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">presheaf</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">locality</span> <span class=\"o\">:</span> <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">locality</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gluing</span>   <span class=\"o\">:</span> <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">gluing</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">sheaf_of_rings</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">sheaf</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">ring&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"n\">ring_hom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">sheaf</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">total</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">total</span>\n\n<span class=\"n\">def</span> <span class=\"n\">res&#39;</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">sheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪⊓⨆</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">locality</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">S</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">locality</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_lub</span> <span class=\"n\">lub</span><span class=\"o\">)</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n           <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">comap_res&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">comap_res&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H1</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">gluing</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">S</span> <span class=\"n\">lub</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)),</span> <span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">⊓</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀_</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">⊓</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n                          <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">⊓</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">W</span><span class=\"o\">)),</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n    <span class=\"n\">choose</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"kn\">using</span> <span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hk</span> <span class=\"n\">V</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">g&#39;eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">total</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U&#39;</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">U&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h&#39;</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">U&#39;</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">U&#39;</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)))</span> <span class=\"o\">},</span>\n      <span class=\"n\">rintro</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">gluing</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_lub</span> <span class=\"n\">lub</span><span class=\"o\">)</span> <span class=\"n\">g&#39;</span> <span class=\"bp\">_</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">comap_coe_inj</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inj</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">comap_res&#39;</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">g&#39;eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hW</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hW</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">comap_res&#39;</span><span class=\"o\">,</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">comap_res&#39;</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">g&#39;eq</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">g&#39;eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_semilattice_inf_hom</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">sheaf</span>\n</pre></div>",
        "id": 183453989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576350759
    },
    {
        "content": "<p>I am trying to read <code>topology/category/Top/opens.lean</code> and I can't tell the difference between usual Lean function arrow and category theory very-slightly-longer-in-my-current-font arrow. I'm on Ubuntu. Does anyone have any recommendations for a font where I will be more easily able to see the difference between the two kinds of morphism?</p>",
        "id": 183454073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576350930
    },
    {
        "content": "<p>In VScode I don't have any trouble. (They also have different colours.)</p>",
        "id": 183454124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576350978
    },
    {
        "content": "<p>Dependent type theory is a bit like concrete categories, and I am beginning to see the point of abstract categories slowly and surely thanks to the continued efforts of <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> calmly telling me that this is actually going to be a good way to do sheaves</p>",
        "id": 183454142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576351007
    },
    {
        "content": "<p>In VS Code they are indistinguishable to my eyes and I've even got my glasses on</p>",
        "id": 183454156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576351028
    },
    {
        "content": "<p>Hmm, that's annoying. I don't really have a good font recommendation... sorry</p>",
        "id": 183454196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576351079
    },
    {
        "content": "<p>Maybe the safe thing to do is assume that all arrows belong to some category.</p>",
        "id": 183454248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576351111
    },
    {
        "content": "<p>And sometimes the category is <code>Type</code></p>",
        "id": 183454255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576351121
    },
    {
        "content": "<p><a href=\"https://github.com/ramonfmir/lean-scheme/blob/sheaves_of_categories/src/sheaves_of_categories/sheaf.lean\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme/blob/sheaves_of_categories/src/sheaves_of_categories/sheaf.lean\">https://github.com/ramonfmir/lean-scheme/blob/sheaves_of_categories/src/sheaves_of_categories/sheaf.lean</a></p>\n<p>There's a definition of a sheaf on a topological space taking values in a category. <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> had <code>locality</code> and <code>gluing</code> but it seems to me that these just claim that a certain morphism is monic and epic. The sheaf axiom, I believe, is<br>\nthat it is an isomorphism.</p>\n<p>I was playing around at the end and ran into two sorrys. Is there a cute way of solving them <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  ? I don't know what I'm doing really. My definition of sheaf is that a certain fork is a limit (an equalizer).</p>",
        "id": 183591499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576530913
    },
    {
        "content": "<p>That definition seems right</p>",
        "id": 183592555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576531575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Huh, wait? How are <code>to_fork</code> and <code>map_to_equalizer</code> related?</p>",
        "id": 183592631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576531651
    },
    {
        "content": "<p>Because the sheaf axiom says that one of them is an iso, and then you want to prove that the other is an iso...</p>",
        "id": 183592660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576531676
    },
    {
        "content": "<p><code>map_to_equalizer</code>is the morphism from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}(U)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> to the equalizer of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mi>i</mi></msub><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">(</mo><msub><mi>U</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>→</mo><mo>→</mo><msub><mo>∏</mo><mrow><mi>j</mi><mo separator=\"true\">,</mo><mi>k</mi></mrow></msub><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">(</mo><msub><mi>U</mi><mi>j</mi></msub><mo>∩</mo><msub><mi>U</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod_i\\mathcal{F}(U_i)\\to\\to\\prod_{j,k}\\mathcal{F}(U_j\\cap U_k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.185818em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 183596818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576534471
    },
    {
        "content": "<p>where the two arrows just mean I have an equalizer diagram. And <code>to_fork</code> produces the entire cone.</p>",
        "id": 183596959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576534570
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_sheaf&#39;</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℱ</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">to_fork</span> <span class=\"n\">OC</span> <span class=\"err\">≅</span>\n    <span class=\"o\">(</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">res_left</span> <span class=\"n\">OC</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span><span class=\"bp\">.</span><span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">res_right</span> <span class=\"n\">OC</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_limit</span><span class=\"bp\">.</span><span class=\"n\">unique_up_to_iso</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"n\">OC</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This has come out really nicely now. I've persevered with universes and now it's all beginning to work.</p>",
        "id": 183598315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576535621
    },
    {
        "content": "<p>OK so I think that in the <code>sheaves_of_categories</code> branch of <a href=\"https://github.com/ramonfmir/lean-scheme\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme\">the schemes repo</a> I have defined a sheaf of categories on a top space in the \"lowbrow\" way (a function on opens X).</p>",
        "id": 183599137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576536240
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">sheaf</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_equalizers</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">extends</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_limit</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n   <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">to_fork</span> <span class=\"n\">to_presheaf</span> <span class=\"n\">OC</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Doing it this way, <code>is_limit</code> seems to be data, so <code>sheaf X C</code> is not a full subcategory of <code>presheaf X C</code>; however it is a subsingleton, so maybe it is. Should I make <code>presheaf.is_sheaf</code> or something? Presheaves are a category and I want to make sheaves a category.  Hey <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I am doing sheaves of categories in the schemes repo. Next it's pushforward and pullbacks I think...</p>",
        "id": 183603085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576539842
    },
    {
        "content": "<p>nice</p>",
        "id": 183603131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1576539853
    },
    {
        "content": "<p>I think I want to make the fully faithful functor from sheaves to presheaves</p>",
        "id": 183603460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576540238
    },
    {
        "content": "<p>Sheaf of categories or sheaves valued in a given category?</p>",
        "id": 183604213,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1576541088
    },
    {
        "content": "<p>Yes, sheaves valued in a given category. Sorry.</p>",
        "id": 183604232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576541111
    },
    {
        "content": "<p>I don't quite know what to make of the fact that given a presheaf, the assertion that it is a sheaf seems to be data rather than a proposition.</p>",
        "id": 183605964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576542853
    },
    {
        "content": "<p>Hmm, yes. Is being a limit a proposition? Or is the data of the cone over the diagram nontrivial?</p>",
        "id": 183608737,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1576545515
    },
    {
        "content": "<p>In Lean it seems that it's a subsingleton but data <em>shrug</em></p>",
        "id": 183609125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576546021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> There is some stuff about <code>induced_category</code>. If your type is a subtype, this gives you a full subcategory. In your setup, you would get \"merely\" a fully faithful functor. Of course those are math-equal.<br>\nAll you need to do is feed the projection function from <code>sheaves</code> to <code>presheaves</code> into <code>induced_category</code>.</p>",
        "id": 183620224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576560592
    }
]