[
    {
        "content": "<p>How might one construct the coequalizer of two parallel functions between types X and Y?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">coeq</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 350080041,
        "sender_full_name": "Dean Young",
        "timestamp": 1681524895
    },
    {
        "content": "<p>One approach is to use a quotient</p>",
        "id": 350081625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681525955
    },
    {
        "content": "<p>That gives the concrete type. You can also use the category theory library and use colimits</p>",
        "id": 350081663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681525992
    },
    {
        "content": "<p>Do you know where the documentation for an equivalence relation is? How might I fill these in?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">reflexivity</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">symmetry</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">transitivity</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">equivalence_relation</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">XmodR</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 350201173,
        "sender_full_name": "Dean Young",
        "timestamp": 1681582334
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equivalence#doc\">docs4#Equivalence</a> (I searched for \"equivalence\" in the mathlib4 docs to see what it's called now)</p>",
        "id": 350201410,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681582503
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient#doc\">docs4#Quotient</a> takes a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Setoid#doc\">docs4#Setoid</a> (which is what equivalence relation with its Equivalence proof is called) and gives the quotient.</p>",
        "id": 350201531,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681582585
    }
]