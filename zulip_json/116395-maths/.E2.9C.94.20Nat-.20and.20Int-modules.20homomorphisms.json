[
    {
        "content": "<p>Mathlib know that an <code>add_comm_monoid</code> is a <code>Nat-module</code>, but it apparently does not know that a <code>add_monoid_hom</code> is a <code>linear_map</code>. Same for <code>add_comm_group</code> and <code>Int-module</code>.  Did I miss something in the following code ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℕ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_comm_monoid.nat_module</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→+</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_add</span><span class=\"o\">,</span>\n<span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_nsmul</span><span class=\"o\">,</span> <span class=\"n\">eq_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_id</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]:</span> <span class=\"n\">module</span> <span class=\"n\">ℤ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_comm_group.int_module</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→+</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_add</span><span class=\"o\">,</span>\n<span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_int_cast</span><span class=\"o\">,</span> <span class=\"n\">int.cast_id</span><span class=\"o\">,</span> <span class=\"n\">map_zsmul</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 344812455,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679910381
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.to_nat_linear_map\">docs#add_monoid_hom.to_nat_linear_map</a></p>",
        "id": 344812761,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1679910475
    },
    {
        "content": "<p>And just below the one for <code>ℤ</code>.</p>",
        "id": 344812902,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1679910500
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 344813426,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679910616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> has marked this topic as resolved.</p>",
        "id": 344813440,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679910619
    }
]