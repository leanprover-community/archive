[
    {
        "content": "<ol>\n<li>Is there anything blocking the definition of a Lie group?</li>\n<li>If not, is there anything blocking the definition of examples of Lie groups, such as GL_n and SL_n?</li>\n</ol>",
        "id": 196179711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588598997
    },
    {
        "content": "<ol>\n<li>manifolds</li>\n<li>implicit function theorem</li>\n</ol>",
        "id": 196179797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588599038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Could you expand? We seem to have both of these.</p>",
        "id": 196179980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588599144
    },
    {
        "content": "<p>oh I thought Patrick said earlier that manifolds are difficult</p>",
        "id": 196180008,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588599168
    },
    {
        "content": "<p>He said that 2 years ago</p>",
        "id": 196180024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588599178
    },
    {
        "content": "<p><em>tempus fugit</em></p>",
        "id": 196180052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588599200
    },
    {
        "content": "<p>Since then <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> appeared. And now manifolds are still difficult. But no longer non-existent.</p>",
        "id": 196180064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588599211
    },
    {
        "content": "<p>We don't quite have implicit function theorem yet. And we certainly don't have the API to use it to build manifolds.</p>",
        "id": 196180488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588599431
    },
    {
        "content": "<p>So I think it should be easy to define Lie groups and prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(\\mathbb R)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> is a Lie group. But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SL_n(\\mathbb R)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>O</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O_n(\\mathbb R)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> are still out of reach.</p>",
        "id": 196180559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588599476
    },
    {
        "content": "<p>What is the name of the predicate that claims that a function <code>M → M'</code> is \"smooth with respect to certain structure groupoids\"?</p>",
        "id": 196182663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588600533
    },
    {
        "content": "<p><code>mdifferentiable</code> on gives <code>C^1</code>-functions, right?</p>",
        "id": 196183740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588601018
    },
    {
        "content": "<p>Maybe we should wait for the analytic functions PR.</p>",
        "id": 196183865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588601065
    }
]