[
    {
        "content": "<p>Does the following partial converse to König's lemma/theorem on cardinals have a name (or exist in mathlib)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pow_le_of_isStrongLimit</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">IsStrongLimit</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">κ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">μ.ord.cof</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">μ</span> <span class=\"bp\">^</span> <span class=\"n\">κ</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span>\n</code></pre></div>",
        "id": 407932542,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1702550736
    },
    {
        "content": "<p>A proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Cofinality</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funMap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"bp\">#</span><span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">mk_range_le</span><span class=\"o\">⟩,</span> <span class=\"n\">InvImage</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">funMap_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsWellOrder</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">funMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">funMap</span><span class=\"o\">,</span> <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">Subtype.mk.injEq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">refine</span> <span class=\"n\">IsWellFounded.induction</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">clear</span> <span class=\"n\">y</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"n\">ih</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">g</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h.1</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h₁</span><span class=\"o\">]</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"bp\">|</span> <span class=\"n\">h₂</span> <span class=\"bp\">|</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trichotomy</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.1</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h₃</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">h₂</span> <span class=\"n\">z</span> <span class=\"n\">rfl</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun₂</span> <span class=\"n\">h.2</span> <span class=\"n\">z</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff</span><span class=\"o\">,</span> <span class=\"n\">true_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">cases</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"n\">this</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun₂</span> <span class=\"n\">h.2</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">h₂</span> <span class=\"n\">y</span> <span class=\"n\">rfl</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h₂.trans_eq</span> <span class=\"o\">(</span><span class=\"n\">h₁.symm.trans</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"n\">cases</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mk_fun_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"o\">({</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"bp\">#</span><span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IsWellOrder.subtype_nonempty</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">linearOrderOfSTO</span> <span class=\"n\">r</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">funMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">funMap_injective</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_le_of_isStrongLimit'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Infinite</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">IsStrongLimit</span> <span class=\"bp\">#</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord.cof</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">β</span> <span class=\"bp\">^</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">mk_fun_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mk_prod</span><span class=\"o\">,</span> <span class=\"n\">lift_id</span><span class=\"o\">,</span> <span class=\"n\">mk_pi</span><span class=\"o\">,</span> <span class=\"n\">mk_fintype</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_prop</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_ofNat</span><span class=\"o\">,</span> <span class=\"n\">prod_const</span><span class=\"o\">,</span>\n    <span class=\"n\">lift_id'</span><span class=\"o\">,</span> <span class=\"n\">lift_two</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"bp\">#</span><span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"n\">β</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mk_subset_mk_lt_cof</span> <span class=\"n\">h₁.2</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"k\">fun</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">S.prop.trans_lt</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n    <span class=\"n\">intro</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.mk.injEq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Subtype.coe_injective</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"bp\">#</span><span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"n\">β</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">power_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_self</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.infinite_iff.mp</span> <span class=\"n\">inferInstance</span><span class=\"o\">)]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">h₁.2</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂.trans_le</span> <span class=\"o\">(</span><span class=\"n\">Ordinal.cof_ord_le</span> <span class=\"bp\">#</span><span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">mul_le_max</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">le_max_iff</span><span class=\"o\">,</span> <span class=\"n\">max_le_iff</span><span class=\"o\">,</span> <span class=\"n\">le_aleph0_iff_subtype_countable</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span>\n    <span class=\"n\">aleph0_le_mk</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_le_of_isStrongLimit</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">IsStrongLimit</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">κ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">μ.ord.cof</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">μ</span> <span class=\"bp\">^</span> <span class=\"n\">κ</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">κ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ℵ₀</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">pow_le</span> <span class=\"n\">h₁.isLimit.aleph0_le</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">revert</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h</span>\n    <span class=\"n\">refine</span> <span class=\"n\">inductionOn₂</span> <span class=\"n\">κ</span> <span class=\"n\">μ</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.infinite_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.infinite_iff.mpr</span> <span class=\"n\">h₁.isLimit.aleph0_le</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pow_le_of_isStrongLimit'</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n</code></pre></div>",
        "id": 407932850,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1702550826
    },
    {
        "content": "<p>For the sake of readability, could include a mathematical English statement of the result?</p>",
        "id": 407935010,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1702551537
    },
    {
        "content": "<p>König's lemma says that for infinite cardinals κ, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi><mo>&lt;</mo><msup><mi>κ</mi><mrow><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">f</mi></mrow><mo stretchy=\"false\">(</mo><mi>κ</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\kappa &lt; \\kappa^{\\mathrm{cf}(\\kappa)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">κ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\" style=\"margin-right:0.07778em;\">cf</span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">κ</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">f</mi></mrow><mo stretchy=\"false\">(</mo><mi>κ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{cf}(\\kappa)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">cf</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">κ</span><span class=\"mclose\">)</span></span></span></span> is the cofinality of κ. This result says that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span> is a strong limit cardinal, for any exponent <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> strictly smaller than the cofinality of κ, we don't have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi><mo>&lt;</mo><msup><mi>κ</mi><mi>α</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\kappa &lt; \\kappa^\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">κ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span></span></span></span></span></span></span> (that is, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>κ</mi><mi>α</mi></msup><mo>≤</mo><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa^\\alpha \\leq \\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8004em;vertical-align:-0.136em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>).</p>",
        "id": 407935671,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1702551734
    },
    {
        "content": "<p>This establishes a critical point in the exponentiation function where the base is a strong limit cardinal. For all exponents strictly smaller than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">f</mi></mrow><mo stretchy=\"false\">(</mo><mi>κ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{cf}(\\kappa)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">cf</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">κ</span><span class=\"mclose\">)</span></span></span></span>, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>κ</mi><mi>α</mi></msup><mo>≤</mo><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa^\\alpha \\leq \\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8004em;vertical-align:-0.136em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span> (and of course this is an equality for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\alpha \\neq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>), and for all exponents at least <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">f</mi></mrow><mo stretchy=\"false\">(</mo><mi>κ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{cf}(\\kappa)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.07778em;\">cf</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">κ</span><span class=\"mclose\">)</span></span></span></span>, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>κ</mi><mi>α</mi></msup><mo>&gt;</mo><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa^\\alpha &gt; \\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7035em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>.</p>",
        "id": 407936262,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1702551920
    },
    {
        "content": "<p>Note: Usually, \"König's Lemma\" refers to the <a href=\"https://en.wikipedia.org/wiki/K%C5%91nig%27s_lemma\">fact about trees</a>.</p>",
        "id": 407940399,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1702553470
    }
]