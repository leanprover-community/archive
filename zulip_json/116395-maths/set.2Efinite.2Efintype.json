[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> From data.set.finite:</span>\n\n<span class=\"cm\">noncomputable instance finite.fintype {s : set α} (h : finite s) : fintype s :=</span>\n<span class=\"cm\">classical.choice h</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">tactic.mk_instance failed to generate instance for</span>\n<span class=\"cm\">  fintype ↥s</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">s : set α,</span>\n<span class=\"cm\">hs : finite s</span>\n<span class=\"cm\">⊢ fintype ↥s</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- same error</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- same error</span>\n</pre></div>\n\n\n<p>The instance <code>finite s -&gt; fintype s</code> -- I can't ever get it to fire. I just changed <code>instance</code> to <code>def</code> in mathlib and recompiled, and it seems to compile fine (I haven't finished yet but it's been running for a while). Should it be a <code>def</code>?</p>",
        "id": 186803197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580231149
    },
    {
        "content": "<p>I think it should</p>",
        "id": 186804089,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580231726
    },
    {
        "content": "<p>We could detect this with a linter, right? <code>hs</code> is not a type class argument (and <code>finite</code> is not even a class--does this matter?) and nothing depends on <code>hs</code> so there is no way it could ever be inferred, either.</p>",
        "id": 186844188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580256393
    },
    {
        "content": "<p>I like the idea of checking this with a linter. It can definitely be done</p>",
        "id": 186844358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580256581
    },
    {
        "content": "<p>it does matter that <code>finite</code> is not a class</p>",
        "id": 186844437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580256656
    },
    {
        "content": "<p>The simplest way to make the linter work is to create a replica of the instance type and try to prove it by <code>apply_instance</code></p>",
        "id": 186844575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580256785
    },
    {
        "content": "<p>this might have false negatives for \"transitivity\" instances like <code>foo A B -&gt; foo B C -&gt; foo A C</code> (which should be discouraged)</p>",
        "id": 186844691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580256919
    }
]