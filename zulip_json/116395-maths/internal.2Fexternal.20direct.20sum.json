[
    {
        "content": "<p>Given an R-algebra A, with submodules (\\iota \\to M) my goal this weekend was to endow this algebra of a structure of graded algebra. I wrote the code below, but I wonder whether this could already be somewhere…</p>\n<p>Moreover, it is likely that I don't understand something, I feel <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.direct_sum.internal\">docs#algebra.direct_sum.internal</a> talks about external direct sums, and don't understand why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.coe_ring_hom\">docs#direct_sum.coe_ring_hom</a> should be an <em>isomorphism</em> (as written in the docstring).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.graded_algebra.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">direct_sum</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Given an R-algebra A and a family (ι → submodule R A) of submodules</span>\n<span class=\"cm\">parameterized by an additive monoid</span>\n<span class=\"cm\">and statisfying `set_like.graded_monoid M` (essentially, is multiplicative)</span>\n<span class=\"cm\">such that `direct_sum.is_internal M` (A is the direct sum of the M i),</span>\n<span class=\"cm\">we endow A with the structure of a graded algebra.</span>\n<span class=\"cm\">The submodules are the *homogeneous* parts -/</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">set_like.graded_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">decompose_fun_of</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum.is_internal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">function.bijective_iff_has_inverse.mp</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">decompose_fun_of_apply_iff</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum.is_internal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">decompose_fun_of</span> <span class=\"n\">hM</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">direct_sum.coe_add_monoid_hom</span> <span class=\"n\">M</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hMl</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"o\">(</span><span class=\"n\">decompose_fun_of</span> <span class=\"n\">hM</span><span class=\"o\">)</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">direct_sum.coe_add_monoid_hom</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">function.bijective_iff_has_inverse.mp</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec.1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hMr</span> <span class=\"o\">:</span> <span class=\"n\">function.right_inverse</span> <span class=\"o\">(</span><span class=\"n\">decompose_fun_of</span> <span class=\"n\">hM</span><span class=\"o\">)</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">direct_sum.coe_add_monoid_hom</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">function.bijective_iff_has_inverse.mp</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec.2</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hMr</span> <span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hMl</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">decompose_of</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum.is_internal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"n\">decompose_fun_of</span> <span class=\"n\">hM</span><span class=\"o\">,</span>\n<span class=\"n\">map_one'</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">decompose_fun_of_apply_iff</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>  <span class=\"n\">direct_sum.coe_add_monoid_hom_of</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">map_mul'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">direct_sum.mul_eq_sum_support_ghas_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">decompose_fun_of_apply_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">decompose_fun_of_apply_iff</span> <span class=\"n\">hM</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">decompose_fun_of_apply_iff</span> <span class=\"n\">hM</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">direct_sum.sum_support_of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">decompose_fun_of</span> <span class=\"n\">hM</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">direct_sum.sum_support_of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">decompose_fun_of</span> <span class=\"n\">hM</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">map_sum</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">map_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.sum_mul_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">map_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg2</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">direct_sum.coe_add_monoid_hom_of</span><span class=\"o\">,</span> <span class=\"n\">set_like.coe_ghas_mul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">decompose_fun_of_apply_iff</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">],</span>\n<span class=\"n\">map_add'</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">decompose_fun_of_apply_iff</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg2</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">decompose_fun_of_apply_iff</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">decompose_fun_of_apply_iff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">decompose_fun_of_apply_iff</span><span class=\"o\">,</span> <span class=\"n\">direct_sum.algebra_map_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">direct_sum.coe_add_monoid_hom_of</span><span class=\"o\">,</span> <span class=\"n\">submodule.set_like.coe_galgebra_to_fun</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">graded_algebra_of</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum.is_internal</span> <span class=\"n\">M</span><span class=\"o\">):</span> <span class=\"n\">graded_algebra</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">graded_algebra.of_alg_hom</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">decompose_of</span> <span class=\"n\">hM</span><span class=\"o\">)</span> <span class=\"o\">(</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_id</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.coe_add_monoid_hom</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">decompose_fun_of</span> <span class=\"n\">hM</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">decompose_fun_of_apply_iff</span> <span class=\"n\">hM</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"o\">(</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">decompose_fun_of</span> <span class=\"n\">hM</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">decompose_fun_of_apply_iff</span> <span class=\"n\">hM</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">direct_sum.coe_add_monoid_hom_of</span> <span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">direct_sum</span>\n</code></pre></div>",
        "id": 341350535,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1678667270
    },
    {
        "content": "<p>I think the word \"isomorphism\" in this docstring (and the definition that follows it) is a typo</p>",
        "id": 341351460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678667923
    },
    {
        "content": "<p>The other link you mentioned doesn't work for me. Did you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.is_internal\">docs#direct_sum.is_internal</a> ?</p>",
        "id": 341351648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678668071
    },
    {
        "content": "<p>If you only care about the algebra isomorphism, then the following simplifies things a little bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.graded_algebra.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">direct_sum</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Given an R-algebra A and a family (ι → submodule R A) of submodules</span>\n<span class=\"cm\">parameterized by an additive monoid</span>\n<span class=\"cm\">and statisfying `set_like.graded_monoid M` (essentially, is multiplicative)</span>\n<span class=\"cm\">such that `direct_sum.is_internal M` (A is the direct sum of the M i),</span>\n<span class=\"cm\">we endow A with the structure of a graded algebra.</span>\n<span class=\"cm\">The submodules are the *homogeneous* parts -/</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">set_like.graded_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coe_alg_iso_of_is_internal</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum.is_internal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">ring_equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.coe_alg_hom</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">hM</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">direct_sum</span>\n</code></pre></div>",
        "id": 341352737,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678668871
    },
    {
        "content": "<p>your map would then become <code>coe_alg_iso_of_is_internal M hM).symm</code></p>",
        "id": 341352887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678668982
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.decompose_alg_equiv\">docs#direct_sum.decompose_alg_equiv</a> but that would require a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/graded_algebra\">docs#graded_algebra</a> instance</p>",
        "id": 341353160,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678669197
    },
    {
        "content": "<p>Here's a more complete bit of code, with the final graded algebra instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_sum.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.graded_algebra.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">direct_sum</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Given an R-algebra A and a family (ι → submodule R A) of submodules</span>\n<span class=\"cm\">parameterized by an additive monoid</span>\n<span class=\"cm\">and statisfying `set_like.graded_monoid M` (essentially, is multiplicative)</span>\n<span class=\"cm\">such that `direct_sum.is_internal M` (A is the direct sum of the M i),</span>\n<span class=\"cm\">we endow A with the structure of a graded algebra.</span>\n<span class=\"cm\">The submodules are the *homogeneous* parts -/</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">set_like.graded_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">ι</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coe_alg_iso_of_is_internal</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum.is_internal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">ring_equiv.of_bijective</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.coe_alg_hom</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">hM</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">graded_algebra_of_is_internal</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum.is_internal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">graded_algebra</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">decompose'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coe_alg_iso_of_is_internal</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coe_alg_iso_of_is_internal</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.left_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coe_alg_iso_of_is_internal</span> <span class=\"n\">hM</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">set_like.graded_monoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">direct_sum</span>\n</code></pre></div>",
        "id": 341353872,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678669669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/internal.2Fexternal.20direct.20sum/near/341351648\">said</a>:</p>\n<blockquote>\n<p>The other link you mentioned doesn't work for me. Did you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.is_internal\">docs#direct_sum.is_internal</a> ?</p>\n</blockquote>\n<p>Actually, I meant the whole file that contains <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.is_internal\">docs#direct_sum.is_internal</a>…</p>",
        "id": 341393202,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1678694881
    },
    {
        "content": "<p>There are similar instances that one could write (graded modules, etc.). Do you think I should add them to mathlib? (With <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> , we will probably need quotients of graded modules, algebra, etc. That will also be useful for those working on schemes.)</p>",
        "id": 341393483,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1678694999
    },
    {
        "content": "<p>The expectation is that you use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/graded_algebra\">docs#graded_algebra</a> here, as that's the constructive version of is_internal</p>",
        "id": 341399851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678697166
    },
    {
        "content": "<p>I would guess you can golf the above even further with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_equiv.of_bijective\">docs#alg_equiv.of_bijective</a></p>",
        "id": 341400077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678697252
    },
    {
        "content": "<p>I looked for this alg equiv of bijective but didn’t find it! Yes using that would be even better.</p>",
        "id": 341488344,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678719889
    }
]