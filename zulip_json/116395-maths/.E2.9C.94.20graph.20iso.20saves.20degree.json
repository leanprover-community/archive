[
    {
        "content": "<p>Can somone help me with the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">u'</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G'.adj</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">simple_graph</span>\n<span class=\"c1\">-- prove taht any two isomorphic graphs have the same degree sequence</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">deg_iso</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">g</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.degree</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">G'.degree</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 361788455,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685292394
    },
    {
        "content": "<p>Just guessing here, but there's likely a lemma that says that degree of a vertex across a graph hom is at least the degree of the vertex. Then use antisymmetry</p>",
        "id": 361788608,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685292477
    },
    {
        "content": "<p>Or, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.iso.map_neighbor_set\">docs#simple_graph.iso.map_neighbor_set</a></p>",
        "id": 361789346,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685292751
    },
    {
        "content": "<p>It looks like it almost there, but I dont know how to continue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">iso.map_neighbor_set</span> <span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">degree</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neighbor_finset_def</span><span class=\"o\">,</span> <span class=\"n\">neighbor_finset_def</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 361791357,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685293494
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_eq\">docs#finset.card_eq</a>, I don't remember the one that uses an equiv</p>",
        "id": 361791756,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685293642
    },
    {
        "content": "<p>Here is the mathlib4 proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">deg_iso</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">g</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.degree</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">G'.degree</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">degree</span><span class=\"o\">,</span> <span class=\"n\">neighborFinset_def</span><span class=\"o\">,</span> <span class=\"n\">Set.toFinset_card</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h.mapNeighborSet</span> <span class=\"n\">v</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 361793171,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685294188
    },
    {
        "content": "<p>I still like my first approach more, it provides a missing (?) mathlib lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">u'</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G'.Adj</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SimpleGraph</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Embedding.degree_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">↪</span><span class=\"n\">g</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.degree</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">G'.degree</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">degree</span><span class=\"o\">,</span> <span class=\"n\">neighborFinset_def</span><span class=\"o\">,</span> <span class=\"n\">Set.toFinset_card</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Fintype.card_le_of_embedding</span> <span class=\"o\">(</span><span class=\"n\">f.mapNeighborSet</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Iso.degree_eq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">g</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.degree</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">G'.degree</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">h.toEmbedding.degree_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">h.symm.toEmbedding.degree_le</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">SimpleGraph</span>\n</code></pre></div>",
        "id": 361793681,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685294409
    },
    {
        "content": "<p>replacing card_le_of_embedding with card_conger solved it at onece</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">u'</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G'.adj</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">simple_graph</span>\n<span class=\"c1\">-- prove taht any two isomorphic graphs have the same degree sequence</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">deg_iso</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">g</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.degree</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">G'.degree</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">degree</span><span class=\"o\">,</span> <span class=\"n\">neighbor_finset_def</span><span class=\"o\">,</span> <span class=\"n\">set.to_finset_card</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.card_congr</span> <span class=\"o\">(</span><span class=\"n\">h.map_neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 361799833,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685297276
    },
    {
        "content": "<p>Thanks!!!</p>",
        "id": 361799921,
        "sender_full_name": "Shimon Cohen",
        "timestamp": 1685297288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"615364\">Shimon Cohen</span> has marked this topic as resolved.</p>",
        "id": 361799940,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685297297
    }
]