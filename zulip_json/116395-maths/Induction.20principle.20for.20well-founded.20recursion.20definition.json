[
    {
        "content": "<p>When you make a definition by well-founded recursion, is there a way to auto-generate an induction principle for it?</p>\n<p>For example, the following definition is made by well-founded recursion (it moves strictly forward according to the default <code>SizeOf</code> instance on <code>Nat × Nat</code>, namely <code>SizeOf.sizeOf (a, b) = 1 + a + b</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Pascal</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pascal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Pascal</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there a way to generate the following induction principle for free: if <code>P : Nat × Nat → Nat → Prop</code> is some family of predicates, true in the right base cases, and also if we have we have the right inductive hypothesis (it's complicated but approximately</p>\n<blockquote>\n<p>if we have assigned Nat values to everything less than <code>(a.succ, b.succ)</code> as specified by a function <code>A : ∀ y : Nat × Nat, sizeOf y &lt; sizeOf (a.succ, b.succ) → Nat</code>, and they all satisfy <code>P</code> for the right inputs, then the assignation of a Nat value according to the induction rule for <code>(a.succ, b.succ)</code> will also satisfy <code>P</code> for the right inputs</p>\n</blockquote>\n<p>) then the statement is true for <code>P (a, b) (Pascal (a, b))</code> for all <code>(a, b)</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">SizeOf</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.add_lt_add_right</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_lt_add_left</span> <span class=\"n\">a.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.add_lt_add_left</span> <span class=\"n\">b.lt_succ_self</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Pascal.rec</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"o\">,</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"o\">,</span> <span class=\"n\">b.succ</span><span class=\"o\">)),</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">))</span>\n    <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"o\">,</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">lt_right</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span> <span class=\"n\">lt_left</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Pascal</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 339747304,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678052374
    },
    {
        "content": "<p>My first idea is to turn the inductive definition of <code>Pascal</code> into an inductive relation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PascalRel</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero_left</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PascalRel</span> <span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero_right</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PascalRel</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ_succ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PascalRel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">PascalRel</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">PascalRel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Wouldn't the induction principle for <code>PascalRel</code> be exactly what you are looking for?</p>",
        "id": 339821981,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678096610
    },
    {
        "content": "<p>Looking at <code>#print PascalRel.rec</code> we'd need to do some rewriting (namely by using <code>PascalRel a b n ↔ n = Pascal a b</code>), but I think it's close to what you're looking for.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">recursor</span> <span class=\"n\">PascalRel.rec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PascalRel</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">PascalRel</span> <span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">PascalRel</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">PascalRel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"n\">PascalRel</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n          <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span>\n            <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">a_2</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">PascalRel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">PascalRel</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 339823076,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678096869
    }
]