[
    {
        "content": "<p>I have several loosely related proposals about API of fiber bundles.</p>\n<p><strong>See below for an updated version</strong></p>\n<h3>Fiber bundle structure on <code>proj : Z → B</code></h3>\n<p>Currently, the only surviving file about maps <code>proj : Z → B</code> as fiber bundles is the file about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization#doc\">docs#Trivialization</a>. I think that we should restore at least the topological fiber bundle definition (as a typeclass or as a bundled <code>proj</code> map) so that we can talk about, e.g., Hopf fibration as a fiber bundle without choosing a bijection to the sigma type.</p>\n<p>Also, I suggest that we reformulate the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization#doc\">docs#Trivialization</a> in terms of fiberwise maps and add a custom <code>toLocalHomeomorph</code> making <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization.coe_fst#doc\">docs#Trivialization.coe_fst</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization.source_eq#doc\">docs#Trivialization.source_eq</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization.target_eq#doc\">docs#Trivialization.target_eq</a> into <code>rfl</code>s.</p>\n<h3>Fiber bundles as sigma types</h3>\n<p>I had 2 suggestions, both of them turned out to be bad ideas.</p>\n<p><del>As for fibder bundles as \"a topology on the sigma type with a trivialization around each point\", I suggest that we drop the axiomatic approach <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiberBundle#doc\">docs#FiberBundle</a> and deal with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiberBundleCore#doc\">docs#FiberBundleCore</a> instead. The reason is simple: except for trivial examples like the trivial bundle, I don't know any way to construct a nice <code>TopologicalSpace</code> structure on the sigma type.</del></p>\n<p><del>Also, we can use <code>Prod</code> instead of <code>Sigma</code> because all fibers are defeq anyway.</del></p>",
        "id": 369308565,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687669183
    },
    {
        "content": "<p>Of course, all these suggestions are for after port.</p>",
        "id": 369309085,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687669464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>  <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 369309446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687669618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Fiber.20bundles/near/369308565\">said</a>:</p>\n<blockquote>\n<p>Also, we can use <code>Prod</code> instead of <code>Sigma</code> because all fibers are defeq anyway.</p>\n</blockquote>\n<p>No, because in Riemannian manifolds you want to have different norms on each fibers, so they should be types of their own, and this is much more convenient with Sigma types.</p>",
        "id": 369322841,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687677169
    },
    {
        "content": "<p>Our fibers are type synonyms for the same type anyway.</p>",
        "id": 369387482,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687694381
    },
    {
        "content": "<p>With <code>Prod</code> we can continue using <code>Fiber x</code> everywhere but avoid <code>HEq</code></p>",
        "id": 369387746,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687694424
    },
    {
        "content": "<p>I think I don't understand what you want to do. For instance, in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalVectorSpace.linear#doc\">docs#TopologicalVectorSpace.linear</a>, we express a bunch of properties of fibers using typeclasses, which is very handy in a Sigma type situation. I don't see how you would express this kind of things if we used products.</p>",
        "id": 369391661,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687695279
    },
    {
        "content": "<p>The <code>docs</code> leads to 404</p>",
        "id": 369401929,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687697621
    },
    {
        "content": "<p>Sorry. Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pretrivialization.linear#doc\">docs#Pretrivialization.linear</a> better?</p>\n<p>To elaborate, when you have <code>v : E x</code>, then you can form <code>⟨x, v⟩</code> as an element of the total space, and Lean understands its type right away. Conversely, if you have <code>z : TotalSpace E</code>, then if you do a case on <code>z</code> you get a pair <code>⟨x, v⟩</code> where Lean already knows that <code>v</code> is in the fiber above <code>x</code>, with all its classes. In a product situation, I don't see how to obtain such a transparent way to go back and forth without confusing Lean.</p>",
        "id": 369404434,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687698201
    },
    {
        "content": "<p>Probably, you're right. Sigma types work better with <code>cases</code> etc.</p>",
        "id": 369409626,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687699364
    },
    {
        "content": "<p>About <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pretrivialization.IsLinear#doc\">docs#Pretrivialization.IsLinear</a>, I suggest that we drop it (as well as the rest of the axiomatic approach to bundles on sigma types) and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiberBundleCore#doc\">docs#FiberBundleCore</a> + <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=VectorBundleCore#doc\">docs#VectorBundleCore</a> instead.</p>",
        "id": 369410180,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687699504
    },
    {
        "content": "<p>(UPD: rethinking; possibly, this is not a very good idea)</p>",
        "id": 369410566,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687699602
    },
    {
        "content": "<p>If we drop it and reformulate constructions like <code>prod</code> in terms of <code>FiberBundleCore</code>, then fibers will unfold to products of model spaces, not of fibers.</p>",
        "id": 369411653,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687699864
    },
    {
        "content": "<p>So, scratch that.</p>",
        "id": 369411733,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687699881
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 369412108,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687699953
    },
    {
        "content": "<p>As for the first suggestion, nothing in the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiberBundle#doc\">docs#FiberBundle</a> needs the total space to be a sigma type. I think that we can have this definition for any type, then restrict to a sigma type for definition/lemmas that need it (and for vector bundles).</p>",
        "id": 369413678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687700311
    },
    {
        "content": "<h2>Updated proposal</h2>\n<h3>Trivializations</h3>\n<ul>\n<li>Redefine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization#doc\">docs#Trivialization</a> in terms of fiberwise maps (maps <code>Z → F</code> and <code>B → F → Z</code> with properties).</li>\n<li>Define <code>Trivialization.toLocalHomeomorph</code> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization.coe_fst#doc\">docs#Trivialization.coe_fst</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization.source_eq#doc\">docs#Trivialization.source_eq</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization.target_eq#doc\">docs#Trivialization.target_eq</a> true by definition.</li>\n<li>(?) Define a constructor from a <code>LocalHomeomorph</code> with extra assumptions.</li>\n</ul>\n<h3>Fiber bundle structure on <code>proj : Z → B</code></h3>\n<ul>\n<li>Generalize <code>docs#FiberBundle</code> to any map, not just <code>Sigma.fst</code>.</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=VectorBundle#doc\">docs#VectorBundle</a> deals with <code>FiberBundle</code> for <code>Sigma.fst</code>.</li>\n</ul>\n<h3>Fiber bundles on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bundle.TotalSpace#doc\">docs#Bundle.TotalSpace</a></h3>\n<ul>\n<li>(?) Make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bundle.TotalSpace.proj#doc\">docs#Bundle.TotalSpace.proj</a> semireducible.</li>\n<li>Alternatively, use an entirely new type instead of <code>Sigma</code>. We don't need much API about <code>Sigma</code> anyway and Lean 4 <code>simp</code> can't use, e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sigma.mk.inj_iff#doc\">docs#Sigma.mk.inj_iff</a> for elements of the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bundle.TotalSpace#doc\">docs#Bundle.TotalSpace</a>.</li>\n</ul>",
        "id": 369417033,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687701023
    },
    {
        "content": "<p>Yes, I like these suggestions. </p>\n<p>I briefly tried the trivialization refactor in branch3#trivialization_definitional_fiberwise, but there I also changed <code>Z</code> to <code>total_space E</code> at the same time; I realize now that this was not necessary.</p>\n<p>I'm happy with the FiberBundle suggestions.</p>\n<p>We are definitely having a bit of a mess with <code>Bundle.TotalSpace.proj</code> vs <code>Sigma.fst</code>. The first thing that has to be done there is to remove the <code>simp</code> attribute from <code>Bundle.TotalSpace.proj</code> and instead make <code>Bundle.TotalSpace.proj</code> the simp-normal form (assuming we can do that without changing the behavior for ordinary sigma-types).</p>",
        "id": 369506564,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687728058
    },
    {
        "content": "<p>We can do it by using a new type instead of <code>Sigma</code>. I think that we don't need much of the API.</p>",
        "id": 369508177,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687729124
    },
    {
        "content": "<p>Probably not too much, but we might still want some of the equivalences on <code>Sigma</code>. If you prefer a new structure, that's fine by me.</p>",
        "id": 369711175,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687787530
    },
    {
        "content": "<p>I'll complete the port first, then do the <code>Trivialization</code> refactor. Then we'll see.</p>",
        "id": 369714873,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687788168
    },
    {
        "content": "<p>I'm redefining <code>bundle.total_space</code> so that it depends on <code>F</code>. I'm trying to switch to a custom structure at the same time. The first field will be called <code>proj</code>. What is a good name for  the second field?</p>",
        "id": 370806262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688049013
    },
    {
        "content": "<p>Thinking about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trivialization#doc\">docs#Trivialization</a> again, I tihnk that we should move to the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bundle#doc\">docs#Bundle</a> everywhere, make API as nice as we can get in this case, move everything about it to the <code>Bundle</code> namespace, then add abstract fiber bundles in a new namespace.</p>",
        "id": 370832492,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688053447
    },
    {
        "content": "<p>E.g., this way the inverse map can be from <code>F</code> to <code>E x</code>, not to <code>Z</code>.</p>",
        "id": 370832626,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688053470
    }
]