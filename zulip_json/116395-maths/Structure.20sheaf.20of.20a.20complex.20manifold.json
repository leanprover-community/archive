[
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/19094\">#19094</a>, building the sheaf of functions on a manifold satisfying a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/structure_groupoid.local_invariant_prop\">docs#structure_groupoid.local_invariant_prop</a>, for example the sheaf of holomorphic functions on a complex manifold.</p>\n<p>Now is the time to make a decision we have put off for a while: with complex manifolds, should we work with \"differentiable\", \"<code>ℂ</code>-smooth\" or analytic functions?  The point: these are mathematically equivalent conditions.</p>\n<ul>\n<li>Analytic is the strongest, but we don't have any differential geometry machinery (e.g. the associated structure groupoid) built up there.</li>\n<li>Smooth has the most currently-available differential geometry machinery.</li>\n<li>Differentiable is the category in which Yury has developed the complex analysis library</li>\n</ul>\n<p>For now I wrote the PR for \"differentiable\", but I don't mind switching if we can come to an agreement.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 361164052,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1685047937
    },
    {
        "content": "<p>Proving stuff should be easier with the a priori weaker differentiable assumption, right?</p>",
        "id": 361166604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685048815
    },
    {
        "content": "<p>I would imagine so, as long as we have the results to \"upgrade\" differentiable to one of the variants when necessary. And I think we have at least the analytic one already.</p>",
        "id": 361167253,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685049063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Structure.20sheaf.20of.20a.20complex.20manifold/near/361166604\">said</a>:</p>\n<blockquote>\n<p>Proving stuff should be easier with the a priori weaker differentiable assumption, right?</p>\n</blockquote>\n<p>But it also means that your assumptions will usually be weaker. So probably it will be good to have some amount of API.</p>",
        "id": 361172043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685051199
    },
    {
        "content": "<p>We (<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>) have been talking about this in Banff, and one point is that since the underlying manifolds basically have to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span> (being the only category in which we currently have enough machinery), it is philosophically more consistent to consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span> functions too.</p>",
        "id": 361172183,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1685051269
    },
    {
        "content": "<p>(It's easy enough to make a <em>constructor</em> for a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span> thing from a differentiable thing.)</p>",
        "id": 361172273,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1685051300
    },
    {
        "content": "<p>Ok, you should try it then.</p>",
        "id": 361173859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685052053
    },
    {
        "content": "<p>Why can't we reuse infinitely smooth manifolds with <code>complex</code> as the base field?</p>",
        "id": 361176955,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685053463
    },
    {
        "content": "<p>With a constructor from <code>differentiable</code> and an implication about <code>analytic</code></p>",
        "id": 361177022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685053503
    },
    {
        "content": "<p>Indeed, this is what I meant by the second option I listed, the <code>ℂ</code>-smooth option.  And I <em>think</em> it's my favourite option (even though it's not how I did it currently).</p>",
        "id": 361177259,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1685053627
    },
    {
        "content": "<p>Using <code>smooth</code> is also my favorite option. In this way, the tangent bundle to a complex manifold is also a complex manifold, without having to do any additional work.</p>",
        "id": 361221662,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1685080138
    },
    {
        "content": "<p>My opinion in more details:</p>\n<ol>\n<li>For now, reusing smooth manifolds code seems like the best option.</li>\n<li>If we ever decide to add real analytic manifolds, then we can switch to that typeclass (or add an instance saying that a smooth complex manifold is a complex analytic manifold; this will create a cycle but I hope we'll use Lean 4 by then).</li>\n</ol>",
        "id": 361237849,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685085934
    },
    {
        "content": "<p>OK, thanks!  Let's stick with <code>ℂ</code>-smooth at least in the medium term; someday someone will build (real- and complex-)analytic manifolds and we can revisit.</p>",
        "id": 361349628,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1685112101
    }
]