[
    {
        "content": "<p>I ported <a href=\"https://github.com/girving/ray\">https://github.com/girving/ray</a> to Lean 4, so now Lean 4 knows that the Mandelbrot set is connected (and also Hartogs' theorem that functions which are analytic along each axis are jointly analytic) </p>\n<p>I'd be curious to upstream parts of this is there is interest.  I'm not sure the best way to go about this, since it's a fair amount of code.  One option is if someone is interested in skimming the overall structure (file comments) and getting a sense what is worth cleaning up and upstreaming (I'm happy to do nontrivial cleanup).  Another route is me suggesting things: three possible starting points are</p>\n<ol>\n<li><code>AnalyticManifold.lean</code> and <code>RiemannSphere.lean</code> (or rather the holomorphic structure in RiemannSphere, if we should use the existing sphere type).  E.g., <a href=\"https://github.com/girving/ray/tree/main/Ray/AnalyticManifold\">https://github.com/girving/ray/tree/main/Ray/AnalyticManifold</a></li>\n<li>The <code>bound</code> tactic (<a href=\"https://github.com/girving/ray/blob/main/Ray/Tactic/Bound.lean\">https://github.com/girving/ray/blob/main/Ray/Tactic/Bound.lean</a>), which is used heavily throughout the rest of the repo, including for both Hartogs' theorem and holomorphic dynamics results.  This needs significant cleanup, and I'm not sure if it's wanted at all due to relationships with positivity and mono, but it will be hard to upstream much else (except for (1)) without something similar to it.</li>\n<li>Various tiny lemmas, such as topology lemmas in <a href=\"https://github.com/girving/ray/blob/main/Ray/Misc/Topology.lean\">https://github.com/girving/ray/blob/main/Ray/Misc/Topology.lean</a></li>\n</ol>\n<p>Here are directory and file counts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">for</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"bp\">*;</span> <span class=\"k\">do</span> <span class=\"n\">wc</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"bp\">/*.</span><span class=\"n\">lean</span><span class=\"bp\">;</span> <span class=\"n\">echo</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n     <span class=\"mi\">661</span>    <span class=\"mi\">5467</span>   <span class=\"mi\">34456</span> <span class=\"n\">Analytic</span><span class=\"bp\">/</span><span class=\"n\">Analytic.lean</span>\n     <span class=\"mi\">146</span>    <span class=\"mi\">1031</span>    <span class=\"mi\">7002</span> <span class=\"n\">Analytic</span><span class=\"bp\">/</span><span class=\"n\">Holomorphic.lean</span>\n     <span class=\"mi\">194</span>    <span class=\"mi\">1796</span>    <span class=\"mi\">9174</span> <span class=\"n\">Analytic</span><span class=\"bp\">/</span><span class=\"n\">Products.lean</span>\n     <span class=\"mi\">165</span>    <span class=\"mi\">1557</span>    <span class=\"mi\">7740</span> <span class=\"n\">Analytic</span><span class=\"bp\">/</span><span class=\"n\">Series.lean</span>\n     <span class=\"mi\">272</span>    <span class=\"mi\">2448</span>   <span class=\"mi\">13505</span> <span class=\"n\">Analytic</span><span class=\"bp\">/</span><span class=\"n\">Uniform.lean</span>\n    <span class=\"mi\">1438</span>   <span class=\"mi\">12299</span>   <span class=\"mi\">71877</span> <span class=\"n\">total</span>\n\n     <span class=\"mi\">740</span>    <span class=\"mi\">5980</span>   <span class=\"mi\">42358</span> <span class=\"n\">AnalyticManifold</span><span class=\"bp\">/</span><span class=\"n\">AnalyticManifold.lean</span>\n     <span class=\"mi\">132</span>    <span class=\"mi\">1441</span>    <span class=\"mi\">7593</span> <span class=\"n\">AnalyticManifold</span><span class=\"bp\">/</span><span class=\"n\">GlobalInverse.lean</span>\n     <span class=\"mi\">326</span>    <span class=\"mi\">2567</span>   <span class=\"mi\">16419</span> <span class=\"n\">AnalyticManifold</span><span class=\"bp\">/</span><span class=\"n\">Inverse.lean</span>\n      <span class=\"mi\">68</span>     <span class=\"mi\">576</span>    <span class=\"mi\">3661</span> <span class=\"n\">AnalyticManifold</span><span class=\"bp\">/</span><span class=\"n\">LocalInj.lean</span>\n     <span class=\"mi\">241</span>    <span class=\"mi\">1954</span>   <span class=\"mi\">13793</span> <span class=\"n\">AnalyticManifold</span><span class=\"bp\">/</span><span class=\"n\">Nonseparating.lean</span>\n     <span class=\"mi\">436</span>    <span class=\"mi\">3861</span>   <span class=\"mi\">24925</span> <span class=\"n\">AnalyticManifold</span><span class=\"bp\">/</span><span class=\"n\">Nontrivial.lean</span>\n     <span class=\"mi\">392</span>    <span class=\"mi\">3161</span>   <span class=\"mi\">20693</span> <span class=\"n\">AnalyticManifold</span><span class=\"bp\">/</span><span class=\"n\">OneDimension.lean</span>\n     <span class=\"mi\">262</span>    <span class=\"mi\">2455</span>   <span class=\"mi\">15576</span> <span class=\"n\">AnalyticManifold</span><span class=\"bp\">/</span><span class=\"n\">OpenMapping.lean</span>\n     <span class=\"mi\">604</span>    <span class=\"mi\">4329</span>   <span class=\"mi\">33035</span> <span class=\"n\">AnalyticManifold</span><span class=\"bp\">/</span><span class=\"n\">RiemannSphere.lean</span>\n    <span class=\"mi\">3201</span>   <span class=\"mi\">26324</span>  <span class=\"mi\">178053</span> <span class=\"n\">total</span>\n\n     <span class=\"mi\">247</span>    <span class=\"mi\">1910</span>   <span class=\"mi\">12648</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Bottcher.lean</span>\n     <span class=\"mi\">704</span>    <span class=\"mi\">6486</span>   <span class=\"mi\">34202</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">BottcherNear.lean</span>\n     <span class=\"mi\">635</span>    <span class=\"mi\">5029</span>   <span class=\"mi\">32804</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">BottcherNearM.lean</span>\n     <span class=\"mi\">653</span>    <span class=\"mi\">5947</span>   <span class=\"mi\">35532</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Grow.lean</span>\n      <span class=\"mi\">42</span>     <span class=\"mi\">217</span>    <span class=\"mi\">1532</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Mandelbrot.lean</span>\n    <span class=\"mi\">1418</span>   <span class=\"mi\">12876</span>   <span class=\"mi\">76623</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Multibrot.lean</span>\n     <span class=\"mi\">110</span>     <span class=\"mi\">748</span>    <span class=\"mi\">5834</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">MultibrotConnected.lean</span>\n     <span class=\"mi\">242</span>    <span class=\"mi\">2174</span>   <span class=\"mi\">14282</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Multiple.lean</span>\n     <span class=\"mi\">242</span>    <span class=\"mi\">1961</span>   <span class=\"mi\">12465</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Postcritical.lean</span>\n     <span class=\"mi\">527</span>    <span class=\"mi\">4559</span>   <span class=\"mi\">27954</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Potential.lean</span>\n     <span class=\"mi\">343</span>    <span class=\"mi\">2982</span>   <span class=\"mi\">18802</span> <span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Ray.lean</span>\n    <span class=\"mi\">5163</span>   <span class=\"mi\">44889</span>  <span class=\"mi\">272678</span> <span class=\"n\">total</span>\n\n     <span class=\"mi\">153</span>    <span class=\"mi\">1325</span>    <span class=\"mi\">7347</span> <span class=\"n\">Hartogs</span><span class=\"bp\">/</span><span class=\"n\">Duals.lean</span>\n     <span class=\"mi\">357</span>    <span class=\"mi\">2762</span>   <span class=\"mi\">17713</span> <span class=\"n\">Hartogs</span><span class=\"bp\">/</span><span class=\"n\">FubiniBall.lean</span>\n     <span class=\"mi\">831</span>    <span class=\"mi\">7322</span>   <span class=\"mi\">43772</span> <span class=\"n\">Hartogs</span><span class=\"bp\">/</span><span class=\"n\">Hartogs.lean</span>\n     <span class=\"mi\">102</span>     <span class=\"mi\">694</span>    <span class=\"mi\">4269</span> <span class=\"n\">Hartogs</span><span class=\"bp\">/</span><span class=\"n\">MaxLog.lean</span>\n     <span class=\"mi\">612</span>    <span class=\"mi\">5634</span>   <span class=\"mi\">33450</span> <span class=\"n\">Hartogs</span><span class=\"bp\">/</span><span class=\"n\">Osgood.lean</span>\n    <span class=\"mi\">1091</span>    <span class=\"mi\">9503</span>   <span class=\"mi\">59868</span> <span class=\"n\">Hartogs</span><span class=\"bp\">/</span><span class=\"n\">Subharmonic.lean</span>\n    <span class=\"mi\">3146</span>   <span class=\"mi\">27240</span>  <span class=\"mi\">166419</span> <span class=\"n\">total</span>\n\n      <span class=\"mi\">21</span>     <span class=\"mi\">126</span>     <span class=\"mi\">682</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">AbsoluteValue.lean</span>\n     <span class=\"mi\">112</span>     <span class=\"mi\">824</span>    <span class=\"mi\">5654</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">AtInf.lean</span>\n     <span class=\"mi\">426</span>    <span class=\"mi\">3743</span>   <span class=\"mi\">19401</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Bounds.lean</span>\n      <span class=\"mi\">62</span>     <span class=\"mi\">424</span>    <span class=\"mi\">3229</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">ChartedSpace.lean</span>\n     <span class=\"mi\">275</span>    <span class=\"mi\">2431</span>   <span class=\"mi\">15739</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Connected.lean</span>\n     <span class=\"mi\">195</span>    <span class=\"mi\">1927</span>   <span class=\"mi\">10392</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Continuation.lean</span>\n      <span class=\"mi\">83</span>     <span class=\"mi\">573</span>    <span class=\"mi\">3368</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Finset.lean</span>\n      <span class=\"mi\">41</span>     <span class=\"mi\">275</span>    <span class=\"mi\">1651</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Max.lean</span>\n     <span class=\"mi\">353</span>    <span class=\"mi\">2777</span>   <span class=\"mi\">18017</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Measure.lean</span>\n     <span class=\"mi\">266</span>    <span class=\"mi\">2325</span>   <span class=\"mi\">14634</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Multilinear.lean</span>\n      <span class=\"mi\">20</span>     <span class=\"mi\">108</span>     <span class=\"mi\">663</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Pow.lean</span>\n      <span class=\"mi\">65</span>     <span class=\"mi\">439</span>    <span class=\"mi\">2791</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Prod.lean</span>\n     <span class=\"mi\">557</span>    <span class=\"mi\">5405</span>   <span class=\"mi\">31829</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">Topology.lean</span>\n      <span class=\"mi\">85</span>     <span class=\"mi\">587</span>    <span class=\"mi\">4182</span> <span class=\"n\">Misc</span><span class=\"bp\">/</span><span class=\"n\">TotallyDisconnected.lean</span>\n    <span class=\"mi\">2561</span>   <span class=\"mi\">21964</span>  <span class=\"mi\">132232</span> <span class=\"n\">total</span>\n\n     <span class=\"mi\">333</span>    <span class=\"mi\">2691</span>   <span class=\"mi\">15470</span> <span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Bound.lean</span>\n      <span class=\"mi\">13</span>      <span class=\"mi\">36</span>     <span class=\"mi\">253</span> <span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">BoundRules.lean</span>\n     <span class=\"mi\">346</span>    <span class=\"mi\">2727</span>   <span class=\"mi\">15723</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 396156117,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697054036
    },
    {
        "content": "<p>Your <code>bound</code> tactic, at a cursory glance, seems to perform similar duties to <code>gcongr</code> (with a variety of dischargers). Can you compare and contrast the two tactics so we can get a better idea?</p>",
        "id": 396157409,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697054599
    },
    {
        "content": "<p><code>bound</code> and <code>gcongr</code> do look similar, but does <code>gcongr</code> use <code>DiscrTree</code>?  If not, how is it fast for a large number of lemmas?</p>\n<p>Another small difference is that <code>bound</code> applies <code>le_of_lt</code> on the fly in appropriate places, and this is very important for ergonomics.  Ah, looks like <code>gcongr</code> does that too.</p>",
        "id": 396157855,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697054802
    },
    {
        "content": "<p>I should also mention that <span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> has written a generalised rewrite tactic which could be useful here.</p>",
        "id": 396158326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697055043
    },
    {
        "content": "<p>Geoffrey, looking only at your messages here, I would say everything is in scope for Mathlib.</p>",
        "id": 396158408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697055100
    },
    {
        "content": "<p>^ Thank you!  But I think the main worry I'd have is whether the various machinery is deemed general enough.  At a minimum I expect reviewers to reasonably want a bunch of refactoring.</p>",
        "id": 396158657,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697055224
    },
    {
        "content": "<p>I'll also say that someone fluent in sheafs and such could probably make a significantly cleaner proof , but I don't know that stuff well so I went with lower tech arguments (that amount to the same thing, but less generally).</p>",
        "id": 396158817,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697055295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> And yep, <code>gcongr</code> does use <code>DiscrTree</code>, so it would be similar speed.  It doesn't seem to have syntax for passing in extra lemmas (things like <code>bound [h.1]</code> occur all the time), but that's not hard to add.  I think the <code>gcongr_forward</code> machinery might miss some cases that the logic in <code>bound</code> would catch: <code>bound</code> can jump back from <code>≤</code> to <code>&lt;</code>if a lemma has that kind of side condition (and I think at least one does), and it seems like forward only handles unapplied lemmas.  But these issues may be easy to fix, or I might be imagining them.</p>",
        "id": 396159695,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697055753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 396163085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697057467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> My tentative conclusion is that with not much work <code>bound</code> can either go away entirely or call into internals of <code>gcongr</code>.</p>",
        "id": 396163141,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697057498
    },
    {
        "content": "<p>Thanks for that assessment.</p>",
        "id": 396164609,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697058190
    },
    {
        "content": "<p>Thank you for your work! I am going to formalize hyperbolic surfaces and I am trying to build it on the <code>RiemannSphere.lean</code> in your work. I shall be glad to see them in the mathlib!</p>",
        "id": 396244939,
        "sender_full_name": "Wen Yang",
        "timestamp": 1697101069
    },
    {
        "content": "<p>And naive computer science me was thinking someone drew a pretty picture upon reading the title of this topic :( Still nice work though!</p>\n<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> can you make a pretty picture out of this? :P</p>",
        "id": 396276991,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697113272
    },
    {
        "content": "<p>This is already done IIRC (I'm pretty sure I tweeted about it a year or so ago)</p>",
        "id": 396281346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697114997
    },
    {
        "content": "<p>I’m going to make a formalized picture using interval arithmetic, the Koebe quarter theorem, and injectivity of the Bottcher map soon.</p>",
        "id": 396293659,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697119010
    },
    {
        "content": "<p>Presumably that’s not the picture that was already made: mine will have some red “who knows” pixels.</p>",
        "id": 396293749,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697119034
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://github.com/chughes87/Mandlebrah/blob/master/mandelbrot.png\"><img src=\"https://uploads.zulipusercontent.net/2fd5eed679365709805c4542ea42bfcef7470f4b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6368756768657338372f4d616e646c65627261682f6d61737465722f6d616e64656c62726f742e706e67\"></a></div>",
        "id": 396308177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697123218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> This is just using the usual (unverified) algorithm I'm sure where you just iterate a fixed number of steps.  What I think <span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> is thinking is something like this<br>\n<a href=\"/user_uploads/3121/doLvZ9xHqFxg1R1j6OO9IgUD/image.png\">image.png</a><br>\nas in this the paper <a href=\"https://webdoc.sub.gwdg.de/ebook/serien/e/IMPA_A/721.pdf\">Images of Julia Sets You Can Trust</a> (<a href=\"https://lhf.impa.br/ftp/oral/balzan.pdf\">slides</a>).</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/doLvZ9xHqFxg1R1j6OO9IgUD/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/doLvZ9xHqFxg1R1j6OO9IgUD/image.png\"></a></div>",
        "id": 396309831,
        "sender_full_name": "Jason Rute",
        "timestamp": 1697123701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/116395-maths/topic/Mandelbrot.20-.20Lean.204.20version/near/396293749\">said</a>:</p>\n<blockquote>\n<p>Presumably that’s not the picture that was already made: mine will have some red “who knows” pixels.</p>\n</blockquote>\n<p>Funny, I remember a similar drawing to the Julia set above but of a Mandelbrot set instead of a Julia set also with red pixels for the unknown areas.  Mandela effect?</p>",
        "id": 396310329,
        "sender_full_name": "Jason Rute",
        "timestamp": 1697123820
    },
    {
        "content": "<p>Yes this is just a picture using the usual algorithm; I was just noting that what Henrik suggested was already done in Lean. I'm well aware that Geoffrey is suggesting something rather different.</p>",
        "id": 396311362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697124084
    },
    {
        "content": "<p>(Also, I can't help mentioning my favorite tidbit about the Mandelbrot set.  <a href=\"https://mathoverflow.net/questions/249617/is-the-area-of-the-mandelbrot-provably-computable\">We currently don't know if the area of the Mandelbrot set is computable.</a>  It probably is and we even know how to compute it if certain hypotheses hold, but we can't be sure.)</p>",
        "id": 396311475,
        "sender_full_name": "Jason Rute",
        "timestamp": 1697124115
    },
    {
        "content": "<p>Coincidentally I think Geoffrey holds the record for computing it :-) (or more precisely for computing the coefficients of the Boettcher map): <a href=\"https://github.com/girving/mandelbrot\">https://github.com/girving/mandelbrot</a></p>",
        "id": 396311839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697124199
    },
    {
        "content": "<p>I should clarify that I have the record for computing Bottcher power series coefficients (2^27 of them), which gives you an area estimate as described in that repo, but the area estimate record is due to Fisher and Hill (<a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.2337&amp;rep=rep1&amp;type=pdf\">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.2337&amp;rep=rep1&amp;type=pdf</a>) using the Koebe quarter theorem but not interval arithmetic.  They also did it a while ago, so we should be able to beat their estimate as a theorem (though using <code>native_decide</code> of course).</p>",
        "id": 396322163,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697127195
    },
    {
        "content": "<p>Probably we don’t want to commit that theorem to Mathlib, though.</p>",
        "id": 396322253,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697127224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/116395-maths/topic/Mandelbrot.20-.20Lean.204.20version/near/396311475\">said</a>:</p>\n<blockquote>\n<p>(Also, I can't help mentioning my favorite tidbit about the Mandelbrot set.  <a href=\"https://mathoverflow.net/questions/249617/is-the-area-of-the-mandelbrot-provably-computable\">We currently don't know if the area of the Mandelbrot set is computable.</a>  It probably is and we even know how to compute it if certain hypotheses hold, but we can't be sure.)</p>\n</blockquote>\n<p>Yep, though of course for computability you need a way weaker assumption than hyperbolicity: all you need is not-uncomputably-slow convergence of the coefficients of the Bottcher series, and it’s really really implausible that it’s uncomputable how slowly they converge.</p>",
        "id": 396333780,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697131498
    },
    {
        "content": "<p>They’re maddeningly noisy and heavy-tailed, though.</p>",
        "id": 396333879,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697131538
    },
    {
        "content": "<p>Yes, it would be crazy novel (and dare I say unprecedented) to have a naturally occurring convergent series whose convergence is uncomputable.</p>",
        "id": 396336243,
        "sender_full_name": "Jason Rute",
        "timestamp": 1697132413
    },
    {
        "content": "<p>Edit: Of course the coefficients converge to zero as O(1/sqrt(n)) trivially; I mean how fast the partial sums of the area series converge.</p>",
        "id": 396336278,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697132431
    },
    {
        "content": "<p>I spent a good while tinkering with the first 2^27 area series terms a_n to try to conjecture a convergence rate, but all I got was</p>\n<ol>\n<li>They look like they’re O(1/n). </li>\n<li>Plausibly limsup n a_n &gt; 0: there are Theta(1/n) terms occurring sparsely forever</li>\n<li>The locally averaged terms converge faster, of course, but the local distribution is so heavy tailed that I couldn’t model it well enough to make a conjecture.</li>\n</ol>\n<p>But this is mostly off topic: feel free to ping if that experimental math aspect is interesting.</p>",
        "id": 396340428,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697134090
    },
    {
        "content": "<p>Somewhat off-topic but a cute goal might be to formalise the statement appearing in this question: <a href=\"https://mathoverflow.net/questions/215187/is-there-a-reference-for-computing-pi-using-external-rays-of-the-mandelbrot\">https://mathoverflow.net/questions/215187/is-there-a-reference-for-computing-pi-using-external-rays-of-the-mandelbrot</a></p>",
        "id": 396477153,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697192718
    },
    {
        "content": "<p>What would be the right next step for upstreaming?  I’d be curious to do at least one piece soon for learning purposes.</p>",
        "id": 396632790,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697274956
    },
    {
        "content": "<p>You should open a PR, a small one to get started (ideally less than 100 lines, but could go up to 200 lines ). For instance some of your lemmas on analytic functions, say. The PR process is explained on <a href=\"https://leanprover-community.github.io/contribute/index.html#making-a-pull-request-pr\">https://leanprover-community.github.io/contribute/index.html#making-a-pull-request-pr</a>. Most importantly, it should be done from a branch on the main mathlib repo, not your own fork, to make sure that all the infrastructure works on it (and notably the cache, to make sure that people can review the PR without having to build the files themselves).</p>",
        "id": 396637116,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697278498
    },
    {
        "content": "<p>Often, the first PR is a little bit painful, with a lot of back and forth between author and reviewer, because we are quite picky on style details and suitable generality and things like that. Apologies in advance, but please bear with us, this is important to make sure that mathlib is a unified library and not a disjoint union of individual contributions (and it won't be specific to you, of course!)</p>",
        "id": 396637302,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697278622
    },
    {
        "content": "<p>Also it will probably be easier if you start by PR-ing lemmas that fit in existing APIs (Sébastien’s recommandation works perfectly for that) rather than new APIs like your <code>AnalyticManifold</code> file. You should of course open PR for those too at some point, but there will probably be way more discussion on them and they will potentially require substantial rewrite (I haven’t actually looked at them closely) so it’s best to do that once you’re used to the PR process.</p>",
        "id": 396638103,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1697279266
    },
    {
        "content": "<p>Great!  I will send a first PR soon.</p>",
        "id": 396652659,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697291418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> Here's an invitation for push access to non-master branches of mathlib: <a href=\"https://github.com/leanprover-community/mathlib4/invitations\">https://github.com/leanprover-community/mathlib4/invitations</a></p>",
        "id": 396653449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697292071
    },
    {
        "content": "<p>Accepted, thanks!</p>",
        "id": 396653462,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697292097
    },
    {
        "content": "<p>Here's a very small first PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7677\">https://github.com/leanprover-community/mathlib4/pull/7677</a></p>",
        "id": 396672738,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697311411
    }
]