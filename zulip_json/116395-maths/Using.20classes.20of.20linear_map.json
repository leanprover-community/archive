[
    {
        "content": "<p>mathlib recommends using classes of linear maps, whenever possible, but I didn't find the function that gives me the actual linear_map when I need it. <br>\nSomething like below. I also wonder why I need to explicitly type the output of lmc_to_linear_map.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_map_class</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lmc_to_linear_map</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>  <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">map_add</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_smulₛₗ</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">lmc_to_linear_map</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 344968563,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679951400
    },
    {
        "content": "<p>For what would you need the explicit linear map? It seems to me that you might be using the forgetful functor early. I could imagine some lemmas are too specialized to explicit linear maps, as opposed to classes. Or some constructions, like composition, require a term of the specific type.</p>",
        "id": 344969994,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1679952008
    },
    {
        "content": "<p>I need to define linear maps from direct sums to direct sums, but <code>direct_sum.to_module</code> doesn't work with classes.<br>\nMaybe I should just redefine <code>direct_sum.to_module</code> but those who are porting mathlib to Lean4 will object, and I understand them.</p>",
        "id": 344970454,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679952206
    },
    {
        "content": "<p>The function should just be <code>coe</code>, but maybe we didn't implement it for linear maps</p>",
        "id": 344971478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679952706
    },
    {
        "content": "<p>The analogue certainly exists for additive maps</p>",
        "id": 344971522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679952723
    },
    {
        "content": "<p><code>coe</code> is polytyped? it can be used to give an <code>add_monoid_hom</code> or a <code>function</code>, or whatever it has to (if the function has been provided?)</p>",
        "id": 344972693,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679953327
    },
    {
        "content": "<p>You have to tell it the type you expect</p>",
        "id": 344972920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679953461
    },
    {
        "content": "<p>That seems to work as I expect!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_map_class</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">map_add</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">map_smulₛₗ</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"o\">:=</span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 344973468,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1679953747
    },
    {
        "content": "<p>I suspect you are expected to use <code>has_coe_t</code>; you should try and find the existing additive instance and copy the approach there</p>",
        "id": 344974027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679954009
    },
    {
        "content": "<p>Notably you'll want to add the silly lemmas that a linear map coerced to itself is just itself, and that <code>alg_hom.to_linear_map</code> and <code>continuous_linear_map.to_linear_map</code> and <code>linear_equiv.to_linear_map</code> is the same as this coercion</p>",
        "id": 344974116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679954044
    }
]