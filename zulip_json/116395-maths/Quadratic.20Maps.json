[
    {
        "content": "<p>I'd like to introduce Quadratic Maps over a (commutative) Ring to Mathlib. This is in order to be able to define such things as quadratic Jordan Algebras and Jordan Pairs.</p>\n<p>Currently Mathlib has <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/LinearAlgebra/QuadraticForm/Basic.lean#L130\">Quadratic Forms</a>. These are defined over a non-commutative semiring.</p>\n<p>There are a number of possible ways of proceeding:</p>\n<ol>\n<li>Develop <code>QuadraticMap</code> and <code>QuadraticForm</code> as separate (but very similar) theories, with the former over a commutative ring and the latter over a non-commutative ring</li>\n<li>Have <code>QuadraticForm</code> as a special case of <code>QuadraticMap</code>, but both over a commutative ring. This would result in a <code>QuadraticForm</code> that is less general than what we currently have</li>\n<li>Develop a theory of <code>QuadraticMap</code> over a non-commutative ring that specialises to the current <code>QuadraticForm</code></li>\n</ol>\n<p>Option 1. seems undesirable to me. I made a start on 3. in this PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7569\">https://github.com/leanprover-community/mathlib4/pull/7569</a> but it requires more bi-module theory than we currently have.</p>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  is suggesting that we try 2. instead, but we thought it might be worth asking here first.</p>\n<p>Possibly <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  may have an opinion as their PR first introduced Quadratic Forms <a href=\"https://github.com/leanprover-community/mathlib/pull/2480\">https://github.com/leanprover-community/mathlib/pull/2480</a></p>",
        "id": 395527983,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1696761690
    },
    {
        "content": "<p>In particular, 2 would start with un-generalizing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuadraticForm#doc\">docs#QuadraticForm</a> from <code>Semiring</code> to <code>CommSemiring</code></p>",
        "id": 395529811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696762463
    },
    {
        "content": "<p>But I claim that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>r</mi><mn>2</mn></msup><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q(rm) = r^2Q(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span> axiom we currently have is nonsense in the non-commutative case anyway, so we'd not be losing anything of value</p>",
        "id": 395529867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696762523
    },
    {
        "content": "<p>What's the correct axiom then? <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>r</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">Q(rm) = rQ(m)r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>?</p>",
        "id": 395531043,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696763385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Maps/near/395531043\">said</a>:</p>\n<blockquote>\n<p>What's the correct axiom then? <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>r</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">Q(rm) = rQ(m)r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>?</p>\n</blockquote>\n<p>We've already ruled that out: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7538#issuecomment-1751785216\">https://github.com/leanprover-community/mathlib4/pull/7538#issuecomment-1751785216</a></p>",
        "id": 395532012,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1696764056
    },
    {
        "content": "<p>I think it's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>r</mi><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">Q(rm)= rQ(m)r^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>, but I don't think that generalization is worth the effort yet</p>",
        "id": 395532718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696764553
    },
    {
        "content": "<p>(in that the generalization that Christopher wants now is more important than fixing the incorrect one that we already have but no one wants yet)</p>",
        "id": 395533952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696765480
    },
    {
        "content": "<p>This is relevant: <a href=\"https://eudml.org/doc/257900\">https://eudml.org/doc/257900</a></p>",
        "id": 395540846,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696770588
    },
    {
        "content": "<p>That looks consistent with my guess above, though it's nice to have a reference now</p>",
        "id": 395545936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696774105
    },
    {
        "content": "<p>I have very little use for the noncommutative case, so I think we should go for whatever works best in the commutative case, and is easy enough to make work noncommutatively. My slight preference goes towards 2 since you've convinced me that our noncommutative quadratic form isn't really a quadratic form (yet).</p>",
        "id": 395644582,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696839840
    },
    {
        "content": "<p>Are we concluding that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BilinForm#doc\">docs#BilinForm</a> is also nonsense when R is non-commutative?</p>",
        "id": 395656594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696843833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> made some generalization in that direction in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6824\">#6824</a>, but it seems we've had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">bilin_form</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>right from the very beginning in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1300\">#1300</a></p>",
        "id": 395657685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696844204
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7581\">#7581</a> removes support for non-commutative rings from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuadraticForm#doc\">docs#QuadraticForm</a></p>",
        "id": 395659718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696844835
    },
    {
        "content": "<p>I guess the questions about <code>BilinForm</code> become irrelevant once we finish the refactor to replace it with nested linear maps</p>",
        "id": 395659813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696844876
    },
    {
        "content": "<p>Yes, pulling out both scalars on the left seems non-standard in the non-commutative setting, see e.g. Morita's \"A theorem on Frobenius extensions\" (1969), where a generalisation of Frobenius algebras appears.</p>",
        "id": 395663364,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1696845963
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/leanprover-community/mathlib4/pull/7581\">#7581</a> is merged, you can start on 2 <span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span> without having to worry about non-commutativity</p>",
        "id": 395726665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696866404
    },
    {
        "content": "<p>Thanks! It seems to be working. :)</p>",
        "id": 395767327,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1696888365
    },
    {
        "content": "<p>It's starting to look like maybe we should finish the <code>def BilinForm R M := M →ₗ[R] M →ₗ[R] R</code> refactor before going ahead too far with this one</p>",
        "id": 395767687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696888643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Maps/near/395767687\">said</a>:</p>\n<blockquote>\n<p>It's starting to look like maybe we should finish the <code>def BilinForm R M := M →ₗ[R] M →ₗ[R] R</code> refactor before going ahead too far with this one</p>\n</blockquote>\n<p>Okay,  is there an issue or PR I can track for that, so I know when the refactor is done?</p>",
        "id": 395808587,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1696914289
    }
]