[
    {
        "content": "<p>Currently if you want to lift a function / relation from the reals to the hyperreals, then there are separate functions for this depending on the arity of your function (1 or 2) and whether or not it is a relation -- see <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/filter_product.lean#L40\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/filter_product.lean#L40\">https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/filter_product.lean#L40</a> .</p>\n<p>We can do this more uniformly by noting that 'taking ultrapowers' is an <code>applicative</code> functor: <a href=\"https://gist.github.com/dwarn/35d168349a298d3312534fe622c7f56e\" title=\"https://gist.github.com/dwarn/35d168349a298d3312534fe622c7f56e\">https://gist.github.com/dwarn/35d168349a298d3312534fe622c7f56e</a> .</p>\n<p>Can we 'lift theorems' in a similar way? <code>applicative</code> provides very nice language for turning say a <code>monoid</code> structure on <code>M</code> into a monoid structure on <code>upower M</code>, but how do we prove the monoid axioms? It seems like we need more than just the <code>applicative</code> laws here. We have internal function types, but can we define 'internal dependent products'?</p>\n<p>If Lean were a  first-order theory like ZFC, you could say \"pick a universe V, and consider the elementary embedding V -&gt; *V\" -- I'm trying to do something analogous to this, but it seems hard as the \"theory of Lean\" is fairly complicated.</p>",
        "id": 195827647,
        "sender_full_name": "David WÃ¤rn",
        "timestamp": 1588247232
    }
]